{"pr_number": 537, "pr_title": "535 - Add IT for deploying artifacts", "pr_createdAt": "2020-09-01T08:03:07Z", "pr_url": "https://github.com/artipie/artipie/pull/537", "timeline": [{"oid": "f5267a65b53493431ae31a9a50fcfd6ed889409e", "url": "https://github.com/artipie/artipie/commit/f5267a65b53493431ae31a9a50fcfd6ed889409e", "message": "535 - Add IT for deploying artifacts", "committedDate": "2020-09-01T07:57:08Z", "type": "commit"}, {"oid": "cc02b08cb57365b58f7b0b60ae4399919e458e45", "url": "https://github.com/artipie/artipie/commit/cc02b08cb57365b58f7b0b60ae4399919e458e45", "message": "#535 - Implement downloading and deploying artifacts", "committedDate": "2020-09-04T14:45:25Z", "type": "commit"}, {"oid": "9381982963076095405fe055dbec448dd5930778", "url": "https://github.com/artipie/artipie/commit/9381982963076095405fe055dbec448dd5930778", "message": "Merge remote-tracking branch 'upstream/master' into 535-MavenIT", "committedDate": "2020-09-04T14:46:30Z", "type": "commit"}, {"oid": "351e4c29f062776cc58f0b21be09d36dfd2cb7fd", "url": "https://github.com/artipie/artipie/commit/351e4c29f062776cc58f0b21be09d36dfd2cb7fd", "message": "#535 - Exclude directory", "committedDate": "2020-09-04T15:00:18Z", "type": "commit"}, {"oid": "91eac6dc0d9f3dd438a51d81ca699b6ca3609884", "url": "https://github.com/artipie/artipie/commit/91eac6dc0d9f3dd438a51d81ca699b6ca3609884", "message": "#535 - Exclude directory", "committedDate": "2020-09-04T15:03:31Z", "type": "commit"}, {"oid": "0e79dc210655ec731919ba3fbfaf7904d2e1e25c", "url": "https://github.com/artipie/artipie/commit/0e79dc210655ec731919ba3fbfaf7904d2e1e25c", "message": "#535 - Move from resources-binary to resources", "committedDate": "2020-09-07T06:43:19Z", "type": "commit"}, {"oid": "0c57c74c4ec5d7515bf6c87ec3d6111a9363b305", "url": "https://github.com/artipie/artipie/commit/0c57c74c4ec5d7515bf6c87ec3d6111a9363b305", "message": "#535 - Exclude directory", "committedDate": "2020-09-07T06:48:29Z", "type": "commit"}, {"oid": "5018c922cf6cc394a91ee66f379d0014f0ab673d", "url": "https://github.com/artipie/artipie/commit/5018c922cf6cc394a91ee66f379d0014f0ab673d", "message": "#535 - Add subdirectory", "committedDate": "2020-09-07T10:19:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI4NzExNg==", "url": "https://github.com/artipie/artipie/pull/537#discussion_r484287116", "bodyText": "@genryxy I think you can simplify this code by using just foreach loop for (Key key : bsto.list(Key.ROOT)) {, this way you avoid unnecessary \"unchecked\" wrappers and you can put exceptions in method declaration", "author": "g4s8", "createdAt": "2020-09-07T08:50:45Z", "path": "src/test/java/com/artipie/maven/MavenITCase.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.maven;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.scalar.Unchecked;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.shaded.org.apache.commons.io.FileUtils;\n+\n+/**\n+ * Integration tests for Maven repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class MavenITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException, InterruptedException {\n+        this.storage = new FileStorage(this.tmp);\n+        this.server = new ArtipieServer(this.tmp, \"my-maven\", this.configs());\n+        this.port = this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        final Path setting = this.tmp.resolve(\"settings.xml\");\n+        setting.toFile().createNewFile();\n+        Files.write(setting, this.settings());\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.tmp.toString(), \"/home\");\n+        this.cntn.start();\n+        this.cntn.execInContainer(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\"helloworld,0.1\", \"snapshot,1.0-SNAPSHOT\"})\n+    void downloadsArtifact(final String type, final String vers) throws Exception {\n+        this.addFilesToStorage(\n+            String.format(\"com/artipie/%s\", type),\n+            new Key.From(\"repos\", \"my-maven\", \"com\", \"artipie\", type)\n+        );\n+        MatcherAssert.assertThat(\n+            this.exec(\n+                \"mvn\", \"-s\", \"/home/settings.xml\", \"dependency:get\",\n+                String.format(\"-Dartifact=com.artipie:%s:%s\", type, vers)\n+            ).replaceAll(\"\\n\", \"\"),\n+            new StringContainsInOrder(\n+                new ListOf<String>(\n+                    // @checkstyle LineLengthCheck (2 lines)\n+                    String.format(\n+                        \"Downloaded from my-maven: http://host.testcontainers.internal:%d/my-maven/com/artipie/%s/%s/%s-%s.jar\",\n+                        this.port, type, vers, type, vers\n+                    ),\n+                    \"BUILD SUCCESS\"\n+                )\n+            )\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\"helloworld,0.1,0.1\", \"snapshot,1.0-SNAPSHOT,1.0-[\\\\d-.]{17}\"})\n+    void deploysArtifact(final String type, final String vers, final String assembly)\n+        throws Exception {\n+        this.prepareDirectory(\n+            String.format(\"%s-src\", type),\n+            String.format(\"%s-src/pom.xml\", type)\n+        );\n+        MatcherAssert.assertThat(\n+            \"Build failure\",\n+            this.exec(\n+                \"mvn\", \"-s\", \"/home/settings.xml\", \"-f\",\n+                String.format(\"/home/%s-src/pom.xml\", type),\n+                \"deploy\"\n+            ).replaceAll(\"\\n\", \"\"),\n+            new StringContains(\"BUILD SUCCESS\")\n+        );\n+        MatcherAssert.assertThat(\n+            \"Artifacts weren't added to storage\",\n+            this.storage.list(\n+                new Key.From(\"repos\", \"my-maven\", \"com\", \"artipie\", type)\n+            ).join().stream()\n+            .map(Key::string)\n+            .collect(Collectors.toList())\n+            .toString()\n+            .replaceAll(\"\\n\", \"\"),\n+            new AllOf<>(\n+                Arrays.asList(\n+                    new MatchesPattern(\n+                        Pattern.compile(\n+                            String.format(\n+                                \".*repos/my-maven/com/artipie/%s/maven-metadata.xml.*\", type\n+                            )\n+                        )\n+                    ),\n+                    new MatchesPattern(\n+                        Pattern.compile(\n+                            String.format(\n+                                \".*repos/my-maven/com/artipie/%s/%s/%s-%s.pom.*\",\n+                                type, vers, type, assembly\n+                            )\n+                        )\n+                    ),\n+                    new MatchesPattern(\n+                        Pattern.compile(\n+                            String.format(\n+                                \".*repos/my-maven/com/artipie/%s/%s/%s-%s.jar.*\",\n+                                type, vers, type, assembly\n+                            )\n+                        )\n+                    )\n+                )\n+            )\n+        );\n+    }\n+\n+    @AfterEach\n+    void stopContainer() {\n+        this.server.stop();\n+        this.cntn.stop();\n+    }\n+\n+    private void prepareDirectory(final String src, final String pom) throws IOException {\n+        FileUtils.copyDirectory(\n+            new TestResource(src).asPath().toFile(),\n+            this.tmp.resolve(src).toFile()\n+        );\n+        Files.write(\n+            this.tmp.resolve(pom),\n+            String.format(\n+                Files.readString(this.tmp.resolve(pom)),\n+                this.port\n+            ).getBytes()\n+        );\n+    }\n+\n+    /**\n+     * Executes dnf command in container.\n+     * @param command What to do\n+     * @return String stdout\n+     * @throws Exception On error\n+     */\n+    private String exec(final String... command) throws Exception {\n+        Logger.debug(this, \"Command:\\n%s\", String.join(\" \", command));\n+        return this.cntn.execInContainer(command).getStdout();\n+    }\n+\n+    private List<String> settings() {\n+        return new ListOf<String>(\n+            \"<settings>\",\n+            \"    <profiles>\",\n+            \"        <profile>\",\n+            \"            <id>artipie</id>\",\n+            \"            <repositories>\",\n+            \"                <repository>\",\n+            \"                    <id>my-maven</id>\",\n+            String.format(\"<url>http://host.testcontainers.internal:%d/my-maven/</url>\", this.port),\n+            \"                </repository>\",\n+            \"            </repositories>\",\n+            \"        </profile>\",\n+            \"    </profiles>\",\n+            \"    <activeProfiles>\",\n+            \"        <activeProfile>artipie</activeProfile>\",\n+            \"    </activeProfiles>\",\n+            \"</settings>\"\n+        );\n+    }\n+\n+    private String configs() {\n+        return Yaml.createYamlMappingBuilder().add(\n+            \"repo\",\n+            Yaml.createYamlMappingBuilder()\n+                .add(\"type\", \"maven\")\n+                .add(\n+                    \"storage\",\n+                    Yaml.createYamlMappingBuilder()\n+                        .add(\"type\", \"fs\")\n+                        .add(\"path\", this.tmp.resolve(\"repos\").toString())\n+                        .build()\n+                )\n+                .build()\n+        ).build().toString();\n+    }\n+\n+    private void addFilesToStorage(final String resource, final Key key)\n+        throws InterruptedException {\n+        final Storage resources = new FileStorage(\n+            new TestResource(resource).asPath()\n+        );\n+        final BlockingStorage bsto = new BlockingStorage(resources);\n+        bsto.list(Key.ROOT).stream()\n+            .map(Key::string)\n+            .forEach(", "originalCommit": "0c57c74c4ec5d7515bf6c87ec3d6111a9363b305", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1ODM2Ng==", "url": "https://github.com/artipie/artipie/pull/537#discussion_r484458366", "bodyText": "@g4s8 thanks, simplified", "author": "genryxy", "createdAt": "2020-09-07T14:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI4NzExNg=="}], "type": "inlineReview"}, {"oid": "33a82615624135d4fa9637adec4cda655f1fdcdc", "url": "https://github.com/artipie/artipie/commit/33a82615624135d4fa9637adec4cda655f1fdcdc", "message": "#535 - Use SetWritable", "committedDate": "2020-09-07T11:53:05Z", "type": "commit"}, {"oid": "9281cf355c6d55e150b57f8ea373fbcea9e49449", "url": "https://github.com/artipie/artipie/commit/9281cf355c6d55e150b57f8ea373fbcea9e49449", "message": "#535 - Remove unchecked", "committedDate": "2020-09-07T11:55:22Z", "type": "commit"}, {"oid": "cc789b1523b91df60634ceff06b4fba474032da3", "url": "https://github.com/artipie/artipie/commit/cc789b1523b91df60634ceff06b4fba474032da3", "message": "#535 - Add mvn clean", "committedDate": "2020-09-07T13:56:33Z", "type": "commit"}, {"oid": "62d31afbb87f8d08c685f7224d249cd4fb96173b", "url": "https://github.com/artipie/artipie/commit/62d31afbb87f8d08c685f7224d249cd4fb96173b", "message": "Merge remote-tracking branch 'upstream/master' into 535-MavenIT", "committedDate": "2020-09-07T13:59:06Z", "type": "commit"}, {"oid": "aa51f2dcafd79601d6fdc236a9748735bd0026d5", "url": "https://github.com/artipie/artipie/commit/aa51f2dcafd79601d6fdc236a9748735bd0026d5", "message": "#535 - Fix StringFormat", "committedDate": "2020-09-07T14:07:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NzQ2MA==", "url": "https://github.com/artipie/artipie/pull/537#discussion_r484677460", "bodyText": "@genryxy javadoc seems inaccurate, I think we can remove it as it's not required in tests and other methods have no comments", "author": "olenagerasimova", "createdAt": "2020-09-08T06:24:50Z", "path": "src/test/java/com/artipie/maven/MavenITCase.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2020 artipie.com\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included\n+ * in all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.maven;\n+\n+import com.amihaiemil.eoyaml.Yaml;\n+import com.artipie.ArtipieServer;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.blocking.BlockingStorage;\n+import com.artipie.asto.fs.FileStorage;\n+import com.artipie.asto.test.TestResource;\n+import com.jcabi.log.Logger;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.AllOf;\n+import org.hamcrest.core.StringContains;\n+import org.hamcrest.text.MatchesPattern;\n+import org.hamcrest.text.StringContainsInOrder;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.shaded.org.apache.commons.io.FileUtils;\n+\n+/**\n+ * Integration tests for Maven repository.\n+ * @since 0.11\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+@EnabledOnOs({OS.LINUX, OS.MAC})\n+final class MavenITCase {\n+\n+    /**\n+     * Temporary directory for all tests.\n+     * @checkstyle VisibilityModifierCheck (3 lines)\n+     */\n+    @TempDir\n+    Path tmp;\n+\n+    /**\n+     * Subdirectory in temporary directory.\n+     */\n+    private Path subdir;\n+\n+    /**\n+     * Tested Artipie server.\n+     */\n+    private ArtipieServer server;\n+\n+    /**\n+     * Container.\n+     */\n+    private GenericContainer<?> cntn;\n+\n+    /**\n+     * Storage.\n+     */\n+    private Storage storage;\n+\n+    /**\n+     * Artipie server port.\n+     */\n+    private int port;\n+\n+    @BeforeEach\n+    void init() throws IOException, InterruptedException {\n+        this.subdir = Files.createDirectory(Path.of(this.tmp.toString(), \"subdir\"));\n+        this.storage = new FileStorage(this.subdir);\n+        this.server = new ArtipieServer(this.subdir, \"my-maven\", this.configs());\n+        this.port = this.server.start();\n+        Testcontainers.exposeHostPorts(this.port);\n+        final Path setting = this.subdir.resolve(\"settings.xml\");\n+        setting.toFile().createNewFile();\n+        Files.write(setting, this.settings());\n+        this.cntn = new GenericContainer<>(\"centos:centos8\")\n+            .withCommand(\"tail\", \"-f\", \"/dev/null\")\n+            .withWorkingDirectory(\"/home/\")\n+            .withFileSystemBind(this.subdir.toString(), \"/home\");\n+        this.cntn.start();\n+        this.cntn.execInContainer(\"yum\", \"-y\", \"install\", \"maven\");\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\"helloworld,0.1\", \"snapshot,1.0-SNAPSHOT\"})\n+    void downloadsArtifact(final String type, final String vers) throws Exception {\n+        this.addFilesToStorage(\n+            String.format(\"com/artipie/%s\", type),\n+            new Key.From(\"repos\", \"my-maven\", \"com\", \"artipie\", type)\n+        );\n+        MatcherAssert.assertThat(\n+            this.exec(\n+                \"mvn\", \"-s\", \"/home/settings.xml\", \"dependency:get\",\n+                String.format(\"-Dartifact=com.artipie:%s:%s\", type, vers)\n+            ).replaceAll(\"\\n\", \"\"),\n+            new StringContainsInOrder(\n+                new ListOf<String>(\n+                    // @checkstyle LineLengthCheck (2 lines)\n+                    String.format(\n+                        \"Downloaded from my-maven: http://host.testcontainers.internal:%d/my-maven/com/artipie/%s/%s/%s-%s.jar\",\n+                        this.port, type, vers, type, vers\n+                    ),\n+                    \"BUILD SUCCESS\"\n+                )\n+            )\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\"helloworld,0.1,0.1\", \"snapshot,1.0-SNAPSHOT,1.0-[\\\\d-.]{17}\"})\n+    void deploysArtifact(final String type, final String vers, final String assembly)\n+        throws Exception {\n+        this.prepareDirectory(\n+            String.format(\"%s-src\", type),\n+            String.format(\"%s-src/pom.xml\", type)\n+        );\n+        MatcherAssert.assertThat(\n+            \"Build failure\",\n+            this.exec(\n+                \"mvn\", \"-s\", \"/home/settings.xml\", \"-f\",\n+                String.format(\"/home/%s-src/pom.xml\", type),\n+                \"deploy\"\n+            ).replaceAll(\"\\n\", \"\"),\n+            new StringContains(\"BUILD SUCCESS\")\n+        );\n+        this.exec(\n+            \"mvn\", \"-s\", \"/home/settings.xml\", \"-f\",\n+            String.format(\"/home/%s-src/pom.xml\", type),\n+            \"clean\"\n+        );\n+        MatcherAssert.assertThat(\n+            \"Artifacts weren't added to storage\",\n+            this.storage.list(\n+                new Key.From(\"repos\", \"my-maven\", \"com\", \"artipie\", type)\n+            ).join().stream()\n+            .map(Key::string)\n+            .collect(Collectors.toList())\n+            .toString()\n+            .replaceAll(\"\\n\", \"\"),\n+            new AllOf<>(\n+                Arrays.asList(\n+                    new MatchesPattern(\n+                        Pattern.compile(\n+                            String.format(\n+                                \".*repos/my-maven/com/artipie/%s/maven-metadata.xml.*\", type\n+                            )\n+                        )\n+                    ),\n+                    new MatchesPattern(\n+                        Pattern.compile(\n+                            String.format(\n+                                \".*repos/my-maven/com/artipie/%s/%s/%s-%s.pom.*\",\n+                                type, vers, type, assembly\n+                            )\n+                        )\n+                    ),\n+                    new MatchesPattern(\n+                        Pattern.compile(\n+                            String.format(\n+                                \".*repos/my-maven/com/artipie/%s/%s/%s-%s.jar.*\",\n+                                type, vers, type, assembly\n+                            )\n+                        )\n+                    )\n+                )\n+            )\n+        );\n+    }\n+\n+    @AfterEach\n+    void release() {\n+        this.server.stop();\n+        this.cntn.stop();\n+    }\n+\n+    private void prepareDirectory(final String src, final String pom) throws IOException {\n+        FileUtils.copyDirectory(\n+            new TestResource(src).asPath().toFile(),\n+            this.subdir.resolve(src).toFile()\n+        );\n+        Files.write(\n+            this.subdir.resolve(pom),\n+            String.format(\n+                Files.readString(this.subdir.resolve(pom)),\n+                this.port\n+            ).getBytes()\n+        );\n+    }\n+\n+    /**\n+     * Executes dnf command in container.", "originalCommit": "aa51f2dcafd79601d6fdc236a9748735bd0026d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eb09c24e73658f15d9d89e6c3b7bc5eba52da54c", "url": "https://github.com/artipie/artipie/commit/eb09c24e73658f15d9d89e6c3b7bc5eba52da54c", "message": "#535 - Remove comment", "committedDate": "2020-09-08T06:41:07Z", "type": "commit"}, {"oid": "dbc2d215d1e903015dc7445a4727a94a1a8e5b85", "url": "https://github.com/artipie/artipie/commit/dbc2d215d1e903015dc7445a4727a94a1a8e5b85", "message": "Merge branch 'master' into 535-MavenIT", "committedDate": "2020-09-09T12:51:27Z", "type": "commit"}]}