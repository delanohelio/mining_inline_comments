{"pr_number": 72, "pr_title": "#71 Auth: implemented RpPermissions", "pr_createdAt": "2020-04-15T12:55:40Z", "pr_url": "https://github.com/artipie/artipie/pull/72", "timeline": [{"oid": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893", "url": "https://github.com/artipie/artipie/commit/1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893", "message": "#71 Auth: implemented RpPermissions", "committedDate": "2020-04-15T12:52:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMTQ5MQ==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408821491", "bodyText": "@olenagerasimova  you have logic in constructor, as far as I know it's not accepted here. And I personally think it should be moved to a method.", "author": "Guseyn", "createdAt": "2020-04-15T12:59:07Z", "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));", "originalCommit": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjQ3NA==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408956474", "bodyText": "@Guseyn I've designed this object to work with yaml (I mean yaml as a java object), when accepting File in the ctor, I have to validate the file - it can be not even yaml, then there is no point instantiating this object. Validations in ctors are allowed, Yegor explained it here.\nAnd I do not want to move file parsing in allowed method, because there is no point to parse it each time we want to check permissions.", "author": "olenagerasimova", "createdAt": "2020-04-15T16:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4Mzc3MQ==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408983771", "bodyText": "@olenagerasimova alright", "author": "Guseyn", "createdAt": "2020-04-15T16:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMTQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk4MQ==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408826981", "bodyText": "@olenagerasimova  Checks if permissions sequence has given an action.", "author": "Guseyn", "createdAt": "2020-04-15T13:08:03Z", "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param yaml Configuration yaml\n+     */\n+    public RpPermissions(final YamlMapping yaml) {\n+        this.yaml = yaml;\n     }\n \n     @Override\n     public boolean allowed(final String name, final String action) {\n-        throw new NotImplementedException(\"this method is not yet implemented\");\n+        final YamlMapping all = this.yaml.yamlMapping(\"permissions\");\n+        return check(all.yamlSequence(name), action) || check(all.yamlSequence(\"*\"), action);\n+    }\n+\n+    /**\n+     * Read provided file into Yaml object.\n+     * @param conf File\n+     * @return Yaml mapping\n+     */\n+    private static YamlMapping readYaml(final File conf) {\n+        try {\n+            return Yaml.createYamlInput(conf).readYamlMapping().yamlMapping(\"repo\");\n+        } catch (final IOException ex) {\n+            throw new IllegalArgumentException(\"Invalid configuration file\", ex);\n+        }\n+    }\n+\n+    /**\n+     * Checks if permissions sequence has given action.", "originalCommit": "1e2eb156d6dee4bf49f6071d3744b1d2e5fe0893", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODU5MQ==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408958591", "bodyText": "@Guseyn hm, I don't agree... This method check, that the sequence contains action, given as a parameter.", "author": "olenagerasimova", "createdAt": "2020-04-15T16:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjE4Mg==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r408982182", "bodyText": "@olenagerasimova Okay, \"has a given action\"", "author": "Guseyn", "createdAt": "2020-04-15T16:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk4MQ=="}], "type": "inlineReview"}, {"oid": "8ec6a969b0697a77dfea354f573ff8ef7a316b79", "url": "https://github.com/artipie/artipie/commit/8ec6a969b0697a77dfea354f573ff8ef7a316b79", "message": "#71 CR", "committedDate": "2020-04-15T17:57:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxODI1MQ==", "url": "https://github.com/artipie/artipie/pull/72#discussion_r410018251", "bodyText": "@olenagerasimova let's extract the * to a static variable and use it in check and allowed methods.", "author": "Vatavuk", "createdAt": "2020-04-17T06:32:55Z", "path": "src/main/java/com/artipie/RpPermissions.java", "diffHunk": "@@ -23,38 +23,70 @@\n  */\n package com.artipie;\n \n+import com.amihaiemil.eoyaml.Yaml;\n+import com.amihaiemil.eoyaml.YamlMapping;\n+import com.amihaiemil.eoyaml.YamlSequence;\n import com.artipie.http.auth.Permissions;\n import java.io.File;\n-import org.apache.commons.lang3.NotImplementedException;\n+import java.io.IOException;\n \n /**\n  * Repository permissions: this implementation is based on\n  * on repository yaml configuration file.\n  * @since 0.2\n- * @todo #69:30min Implement this interface to read and process permissions from\n- *  repository yaml configuration file. Test is already implemented, see {@link RpPermissionsTest},\n- *  don't forget to enable is when this class is ready. Remove also PMD suppressions please.\n- *  For more details check issue #69.\n  */\n-@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n public final class RpPermissions implements Permissions {\n \n     /**\n-     * Repository yaml configuration file.\n+     * YAML storage settings.\n      */\n-    private final File conf;\n+    private final YamlMapping yaml;\n \n     /**\n      * Ctor.\n-     * @param conf Conf file\n+     * @param conf Config file\n      */\n     public RpPermissions(final File conf) {\n-        this.conf = conf;\n+        this(readYaml(conf));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param yaml Configuration yaml\n+     */\n+    public RpPermissions(final YamlMapping yaml) {\n+        this.yaml = yaml;\n     }\n \n     @Override\n     public boolean allowed(final String name, final String action) {\n-        throw new NotImplementedException(\"this method is not yet implemented\");\n+        final YamlMapping all = this.yaml.yamlMapping(\"permissions\");\n+        return check(all.yamlSequence(name), action) || check(all.yamlSequence(\"*\"), action);", "originalCommit": "8ec6a969b0697a77dfea354f573ff8ef7a316b79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b44295e400ff6d1b74c89f304f859ef64ab77b7", "url": "https://github.com/artipie/artipie/commit/4b44295e400ff6d1b74c89f304f859ef64ab77b7", "message": "#71 CR", "committedDate": "2020-04-17T07:43:15Z", "type": "commit"}, {"oid": "715742ca60b9d0fa0e1cccfa4b11d466542b0149", "url": "https://github.com/artipie/artipie/commit/715742ca60b9d0fa0e1cccfa4b11d466542b0149", "message": "Merge branch 'master' of https://github.com/artipie/artipie into 71", "committedDate": "2020-04-17T07:44:24Z", "type": "commit"}]}