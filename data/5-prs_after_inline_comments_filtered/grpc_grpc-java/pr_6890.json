{"pr_number": 6890, "pr_title": "xds: ensure we shutdown XdsClientImpl when XDS Server is shut down", "pr_createdAt": "2020-04-01T21:29:18Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6890", "timeline": [{"oid": "a4ed8269992eaba7724d0243ee76f23001ffb619", "url": "https://github.com/grpc/grpc-java/commit/a4ed8269992eaba7724d0243ee76f23001ffb619", "message": "xds: implement XdsServer to ensure we shutdown XdsClientImpl when XdsServer is shutdown", "committedDate": "2020-04-01T21:53:36Z", "type": "commit"}, {"oid": "a4ed8269992eaba7724d0243ee76f23001ffb619", "url": "https://github.com/grpc/grpc-java/commit/a4ed8269992eaba7724d0243ee76f23001ffb619", "message": "xds: implement XdsServer to ensure we shutdown XdsClientImpl when XdsServer is shutdown", "committedDate": "2020-04-01T21:53:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NzYyNQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401967625", "bodyText": "nit: add @Nullable to the param xdsClientWrapperForServerSds. but, i don't see why it wants null? if this is null the caller can use delegate Server. factory method returns Server type can easily achieve that if caller doesn't want to check null.", "author": "creamsoup", "createdAt": "2020-04-01T23:26:49Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}\n+ * object.\n+ */\n+@VisibleForTesting\n+public final class XdsServer extends Server {\n+  private final Server delegate;\n+  @Nullable private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  XdsServer(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2ODMzNA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401968334", "bodyText": "should this call shutdownNow?", "author": "creamsoup", "createdAt": "2020-04-01T23:29:02Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}\n+ * object.\n+ */\n+@VisibleForTesting\n+public final class XdsServer extends Server {\n+  private final Server delegate;\n+  @Nullable private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  XdsServer(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+    checkNotNull(delegate, \"delegate\");\n+    this.delegate = delegate;\n+    this.xdsClientWrapperForServerSds = xdsClientWrapperForServerSds;\n+  }\n+\n+  @Override\n+  public Server start() throws IOException {\n+    delegate.start();\n+    return this;\n+  }\n+\n+  @Override\n+  public Server shutdown() {\n+    if (xdsClientWrapperForServerSds != null) {\n+      xdsClientWrapperForServerSds.shutdown();\n+    }\n+    delegate.shutdown();\n+    return this;\n+  }\n+\n+  @Override\n+  public Server shutdownNow() {\n+    if (xdsClientWrapperForServerSds != null) {\n+      xdsClientWrapperForServerSds.shutdown();", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NjA1Ng==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401986056", "bodyText": "good  catch.", "author": "sanjaypujare", "createdAt": "2020-04-02T00:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2ODMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NzE5OQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401987199", "bodyText": "oops actually XdsClient only has shutdown ignore my comment.", "author": "creamsoup", "createdAt": "2020-04-02T00:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2ODMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2OTkxNw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401969917", "bodyText": "those should do awaitTermination on sds andThen server.", "author": "creamsoup", "createdAt": "2020-04-01T23:33:58Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}\n+ * object.\n+ */\n+@VisibleForTesting\n+public final class XdsServer extends Server {\n+  private final Server delegate;\n+  @Nullable private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  XdsServer(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+    checkNotNull(delegate, \"delegate\");\n+    this.delegate = delegate;\n+    this.xdsClientWrapperForServerSds = xdsClientWrapperForServerSds;\n+  }\n+\n+  @Override\n+  public Server start() throws IOException {\n+    delegate.start();\n+    return this;\n+  }\n+\n+  @Override\n+  public Server shutdown() {\n+    if (xdsClientWrapperForServerSds != null) {\n+      xdsClientWrapperForServerSds.shutdown();\n+    }\n+    delegate.shutdown();\n+    return this;\n+  }\n+\n+  @Override\n+  public Server shutdownNow() {\n+    if (xdsClientWrapperForServerSds != null) {\n+      xdsClientWrapperForServerSds.shutdown();\n+    }\n+    delegate.shutdownNow();\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean isShutdown() {\n+    return delegate.isShutdown();\n+  }\n+\n+  @Override\n+  public boolean isTerminated() {\n+    return delegate.isTerminated();\n+  }\n+\n+  @Override\n+  public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NTkxNA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401985914", "bodyText": "There is no awaitTermination in XdsClient (XdsClientImpl) which is I think what you are suggesting. It can be plumbed and added here but it doesn't seem necessary. What does the user gain by waiting for XdsClient to shut down?", "author": "sanjaypujare", "createdAt": "2020-04-02T00:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2OTkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NzI2Mw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401987263", "bodyText": "same here. XdsClient doesn't have it.", "author": "creamsoup", "createdAt": "2020-04-02T00:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2OTkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MzQ5Nw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401973497", "bodyText": "nit: it would be nice if the other constructor is calling this one (or could be a factory method).", "author": "creamsoup", "createdAt": "2020-04-01T23:45:16Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -264,12 +266,24 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n         localXdsClientWrapperForServerSds =\n             XdsClientWrapperForServerSds.newInstance(port, Bootstrapper.getInstance(), syncContext);\n       } catch (Exception e) {\n-        logger.log(Level.WARNING, \"Exception while creating the xDS client\", e);\n+        logger.log(Level.FINE, \"Fallback to plaintext due to exception\", e);\n         localXdsClientWrapperForServerSds = null;\n       }\n       this.xdsClientWrapperForServerSds = localXdsClientWrapperForServerSds;\n     }\n \n+    @VisibleForTesting\n+    public ServerSdsProtocolNegotiator(", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3Mzc0MA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401973740", "bodyText": "nit: this field can be final", "author": "creamsoup", "createdAt": "2020-04-01T23:46:05Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -264,12 +266,24 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n         localXdsClientWrapperForServerSds =\n             XdsClientWrapperForServerSds.newInstance(port, Bootstrapper.getInstance(), syncContext);\n       } catch (Exception e) {\n-        logger.log(Level.WARNING, \"Exception while creating the xDS client\", e);\n+        logger.log(Level.FINE, \"Fallback to plaintext due to exception\", e);\n         localXdsClientWrapperForServerSds = null;\n       }\n       this.xdsClientWrapperForServerSds = localXdsClientWrapperForServerSds;\n     }\n \n+    @VisibleForTesting\n+    public ServerSdsProtocolNegotiator(\n+        DownstreamTlsContext downstreamTlsContext,\n+        XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+      this.downstreamTlsContext = downstreamTlsContext;", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NDcyNg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401974726", "bodyText": "nit: null check here seems reasonable", "author": "creamsoup", "createdAt": "2020-04-01T23:49:17Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -264,12 +266,24 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n         localXdsClientWrapperForServerSds =\n             XdsClientWrapperForServerSds.newInstance(port, Bootstrapper.getInstance(), syncContext);\n       } catch (Exception e) {\n-        logger.log(Level.WARNING, \"Exception while creating the xDS client\", e);\n+        logger.log(Level.FINE, \"Fallback to plaintext due to exception\", e);\n         localXdsClientWrapperForServerSds = null;\n       }\n       this.xdsClientWrapperForServerSds = localXdsClientWrapperForServerSds;\n     }\n \n+    @VisibleForTesting\n+    public ServerSdsProtocolNegotiator(\n+        DownstreamTlsContext downstreamTlsContext,\n+        XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+      this.downstreamTlsContext = downstreamTlsContext;\n+      this.xdsClientWrapperForServerSds = xdsClientWrapperForServerSds;", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAwOTM3Mg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402009372", "bodyText": "with the refactoring both params can be null (plaintext case) so no null checks", "author": "sanjaypujare", "createdAt": "2020-04-02T01:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NDcyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NzY3OQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402447679", "bodyText": "then add @Nullable, if both are null isn't it plaintext?", "author": "creamsoup", "createdAt": "2020-04-02T16:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NDcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTM2MQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401975361", "bodyText": "if you keep it in the io.grpc.xds.internal.sds, the ServerSdsProtocolNegotiator  doesn't need to expose it as public. also, the Builder is anyways in the sds package it seems better place to be.", "author": "creamsoup", "createdAt": "2020-04-01T23:51:30Z", "path": "xds/src/test/java/io/grpc/xds/XdsServerBuilderTest.java", "diffHunk": "@@ -14,17 +14,23 @@\n  * limitations under the License.\n  */\n \n-package io.grpc.xds.internal.sds;", "originalCommit": "a4ed8269992eaba7724d0243ee76f23001ffb619", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4MzI3Nw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r401983277", "bodyText": "Yes and I would have liked that. But XdsClient, XdsClientImpl, and XdsClient.shutdown are package private which causes problem for this test unless I make them all public. So making those things public just for a test in SDS didn't sound appealing to me.", "author": "sanjaypujare", "createdAt": "2020-04-02T00:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAwOTcwMg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402009702", "bodyText": "No change based on my comment.", "author": "sanjaypujare", "createdAt": "2020-04-02T01:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTM2MQ=="}], "type": "inlineReview"}, {"oid": "27e5fde094b543b8cc7dc33dab5d385d78a1c880", "url": "https://github.com/grpc/grpc-java/commit/27e5fde094b543b8cc7dc33dab5d385d78a1c880", "message": "Address review comments", "committedDate": "2020-04-02T01:55:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0ODQ5NA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402448494", "bodyText": "add @nullable for 2nd param. overall methods returns null should also be marked with the annotation. can you check other methods/params/instance variables for the classes in this PR?", "author": "creamsoup", "createdAt": "2020-04-02T16:31:00Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}\n+ * object.\n+ */\n+final class XdsServer extends Server {\n+  private final Server delegate;\n+  private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  static Server newInstance(\n+      Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {", "originalCommit": "27e5fde094b543b8cc7dc33dab5d385d78a1c880", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjE4MA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402462180", "bodyText": "why we do this instead of using plaintext when creating the protocol negotiator?", "author": "creamsoup", "createdAt": "2020-04-02T16:51:46Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -251,23 +252,38 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n     }\n   }\n \n-  private static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n+  @VisibleForTesting\n+  public static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n \n-    private DownstreamTlsContext downstreamTlsContext;\n+    private final DownstreamTlsContext downstreamTlsContext;\n     private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n \n     ServerSdsProtocolNegotiator(\n         DownstreamTlsContext downstreamTlsContext, int port, SynchronizationContext syncContext) {\n-      this.downstreamTlsContext = downstreamTlsContext;\n-      XdsClientWrapperForServerSds localXdsClientWrapperForServerSds;\n+      this(downstreamTlsContext, getXdsClientWrapperForServerSds(port, syncContext));\n+    }\n+\n+    private static XdsClientWrapperForServerSds getXdsClientWrapperForServerSds(\n+        int port, SynchronizationContext syncContext) {\n       try {\n-        localXdsClientWrapperForServerSds =\n-            XdsClientWrapperForServerSds.newInstance(port, Bootstrapper.getInstance(), syncContext);\n+        return XdsClientWrapperForServerSds.newInstance(\n+            port, Bootstrapper.getInstance(), syncContext);\n       } catch (Exception e) {\n-        logger.log(Level.WARNING, \"Exception while creating the xDS client\", e);\n-        localXdsClientWrapperForServerSds = null;\n+        logger.log(Level.FINE, \"Fallback to plaintext due to exception\", e);", "originalCommit": "27e5fde094b543b8cc7dc33dab5d385d78a1c880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4NzYzMw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402487633", "bodyText": "So for the logic, it does end up creating the plaintext protocol negotiator if you follow this flow: null for XdsClientWrapperForServerSds causes SdsProtocolNegotiators.HandlerPickerHandler on line 335 to replace with a plaintext negotiator. Is that what you were asking or something else?", "author": "sanjaypujare", "createdAt": "2020-04-02T17:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5ODMxMg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402498312", "bodyText": "if we know it will be plaintext, the factory method SdsProtocolNegotiators#serverProtocolNegotiator can just return the simple plaintext PN not in the protocol negotiation handler if possible. we want to minimize conditional logic in each protocol to easy to maintain and debug. it can be very hard due to the async nature of handler.", "author": "creamsoup", "createdAt": "2020-04-02T17:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0OTYxMw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402549613", "bodyText": "I think it can go both ways. For the HandlerPickerHandler you wanted (in a previous PR) proper handling of ProtocolNegotiationEvent to pick the actual Handler (plaintext or ServerSdsHandler)  based on downstreamTlsContext being empty. So that logic is centralized in one place even if the decision is delayed in the case you point out.\nWhat you are saying can be done but will be a non-trivial change and I will have to create tests for it. Since this PR is really about server shutdown I am thinking of creating a TODO for me to do in another PR. I have a couple of PRs pending to add tests anyway so I can include this. What do you think?", "author": "sanjaypujare", "createdAt": "2020-04-02T19:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NDE4OA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402584188", "bodyText": "iirc, it was merged before the review is done done, so this is expected.\nthe logic is centralized but in wrong place. thus, TODO is rarely fixed in near future. so i don't want to go for that route if timeline allows.", "author": "creamsoup", "createdAt": "2020-04-02T20:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MjE4MA=="}], "type": "inlineReview"}, {"oid": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "url": "https://github.com/grpc/grpc-java/commit/77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "message": "address more review comments", "committedDate": "2020-04-02T23:36:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1OTI0NA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402659244", "bodyText": "this method can move to the factory method in L79; this makes slightly more sense since the ServerSdsPN doesn't need to return plaintext which is not really ServerSdsPN.", "author": "creamsoup", "createdAt": "2020-04-02T23:47:24Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -258,9 +260,15 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n     private final DownstreamTlsContext downstreamTlsContext;\n     private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n \n-    ServerSdsProtocolNegotiator(\n-        DownstreamTlsContext downstreamTlsContext, int port, SynchronizationContext syncContext) {\n-      this(downstreamTlsContext, getXdsClientWrapperForServerSds(port, syncContext));\n+    static ProtocolNegotiator createServerNegotiator(\n+        @Nullable DownstreamTlsContext downstreamTlsContext,\n+        int port,\n+        SynchronizationContext syncContext) {\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds =", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MDI4OQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402660289", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          (SdsProtocolNegotiators.ServerSdsProtocolNegotiator)serverProtocolNegotiator;\n          \n          \n            \n                      (SdsProtocolNegotiators.ServerSdsProtocolNegotiator) serverProtocolNegotiator;", "author": "creamsoup", "createdAt": "2020-04-02T23:50:53Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -184,9 +185,15 @@ void panic(final Throwable t) {\n    */\n   @VisibleForTesting\n   public Server createXdsServer(\n-      SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator) {\n-    delegate.protocolNegotiator(serverSdsProtocolNegotiator);\n-    return XdsServer.newInstance(\n-        delegate.build(), serverSdsProtocolNegotiator.getXdsClientWrapperForServerSds());\n+          InternalProtocolNegotiator.ProtocolNegotiator serverProtocolNegotiator) {\n+    delegate.protocolNegotiator(serverProtocolNegotiator);\n+    if (serverProtocolNegotiator instanceof SdsProtocolNegotiators.ServerSdsProtocolNegotiator) {\n+      SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+              (SdsProtocolNegotiators.ServerSdsProtocolNegotiator)serverProtocolNegotiator;", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MDY4OA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402660688", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** creates an instance from the 2 params. */\n          \n          \n            \n                /** Constructor. */", "author": "creamsoup", "createdAt": "2020-04-02T23:52:18Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -274,15 +282,18 @@ private static XdsClientWrapperForServerSds getXdsClientWrapperForServerSds(\n       }\n     }\n \n+    /** creates an instance from the 2 params. */", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MzA2MQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402663061", "bodyText": "indentation is wrong.", "author": "creamsoup", "createdAt": "2020-04-03T00:00:18Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -184,9 +185,15 @@ void panic(final Throwable t) {\n    */\n   @VisibleForTesting\n   public Server createXdsServer(\n-      SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator) {\n-    delegate.protocolNegotiator(serverSdsProtocolNegotiator);\n-    return XdsServer.newInstance(\n-        delegate.build(), serverSdsProtocolNegotiator.getXdsClientWrapperForServerSds());\n+          InternalProtocolNegotiator.ProtocolNegotiator serverProtocolNegotiator) {", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NTU4OA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402665588", "bodyText": "what makes it XdsServer?", "author": "creamsoup", "createdAt": "2020-04-03T00:08:35Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}\n+ * object.\n+ */\n+final class XdsServer extends Server {", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MjYyNg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402682626", "bodyText": "Okay the name is misleading but the builder was named XdsServerBuilder so this ended up as XdsServer. It is basically a wrapper for an actual io.grpc.Server with a reference to the accompanying XdsClient that watches for LDS updates. It is package private so not sure if it's worth renaming.", "author": "sanjaypujare", "createdAt": "2020-04-03T01:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NTU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NjAwMw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402666003", "bodyText": "wrong indentation", "author": "creamsoup", "createdAt": "2020-04-03T00:09:53Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -77,7 +79,8 @@ public static ProtocolNegotiatorFactory clientProtocolNegotiatorFactory(\n   public static ProtocolNegotiator serverProtocolNegotiator(\n       @Nullable DownstreamTlsContext downstreamTlsContext, int port,\n       SynchronizationContext syncContext) {\n-    return new ServerSdsProtocolNegotiator(downstreamTlsContext, port, syncContext);\n+    return ServerSdsProtocolNegotiator.createServerNegotiator(\n+            downstreamTlsContext, port, syncContext);", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NjI4Mg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402666282", "bodyText": "looks like those 2 can be null.", "author": "creamsoup", "createdAt": "2020-04-03T00:11:23Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -251,23 +254,47 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n     }\n   }\n \n-  private static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n+  @VisibleForTesting\n+  public static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n \n-    private DownstreamTlsContext downstreamTlsContext;\n+    private final DownstreamTlsContext downstreamTlsContext;", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NjQxOQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402666419", "bodyText": "can we log when it downgrades to plaintext?", "author": "creamsoup", "createdAt": "2020-04-03T00:11:56Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -251,23 +254,47 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n     }\n   }\n \n-  private static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n+  @VisibleForTesting\n+  public static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n \n-    private DownstreamTlsContext downstreamTlsContext;\n+    private final DownstreamTlsContext downstreamTlsContext;\n     private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n \n-    ServerSdsProtocolNegotiator(\n-        DownstreamTlsContext downstreamTlsContext, int port, SynchronizationContext syncContext) {\n-      this.downstreamTlsContext = downstreamTlsContext;\n-      XdsClientWrapperForServerSds localXdsClientWrapperForServerSds;\n+    static ProtocolNegotiator createServerNegotiator(\n+        @Nullable DownstreamTlsContext downstreamTlsContext,\n+        int port,\n+        SynchronizationContext syncContext) {\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+          getXdsClientWrapperForServerSds(port, syncContext);\n+      return (xdsClientWrapperForServerSds == null && downstreamTlsContext == null)", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NzUxNg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402667516", "bodyText": "(i know we discussed before) this exception seems too aggressive. a bit worried that this can make it very hard to debug", "author": "creamsoup", "createdAt": "2020-04-03T00:15:51Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -251,23 +254,47 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n     }\n   }\n \n-  private static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n+  @VisibleForTesting\n+  public static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n \n-    private DownstreamTlsContext downstreamTlsContext;\n+    private final DownstreamTlsContext downstreamTlsContext;\n     private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n \n-    ServerSdsProtocolNegotiator(\n-        DownstreamTlsContext downstreamTlsContext, int port, SynchronizationContext syncContext) {\n-      this.downstreamTlsContext = downstreamTlsContext;\n-      XdsClientWrapperForServerSds localXdsClientWrapperForServerSds;\n+    static ProtocolNegotiator createServerNegotiator(\n+        @Nullable DownstreamTlsContext downstreamTlsContext,\n+        int port,\n+        SynchronizationContext syncContext) {\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+          getXdsClientWrapperForServerSds(port, syncContext);\n+      return (xdsClientWrapperForServerSds == null && downstreamTlsContext == null)\n+          ? InternalProtocolNegotiators.serverPlaintext()\n+          : new ServerSdsProtocolNegotiator(downstreamTlsContext, xdsClientWrapperForServerSds);\n+    }\n+\n+    private static XdsClientWrapperForServerSds getXdsClientWrapperForServerSds(\n+        int port, SynchronizationContext syncContext) {\n       try {\n-        localXdsClientWrapperForServerSds =\n-            XdsClientWrapperForServerSds.newInstance(port, Bootstrapper.getInstance(), syncContext);\n+        return XdsClientWrapperForServerSds.newInstance(\n+            port, Bootstrapper.getInstance(), syncContext);\n       } catch (Exception e) {", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2Nzk2Nw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402667967", "bodyText": "newInstance is misleading especially for server. it sounds like it will spin up a new server.", "author": "creamsoup", "createdAt": "2020-04-03T00:17:23Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}\n+ * object.\n+ */\n+final class XdsServer extends Server {\n+  private final Server delegate;\n+  private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  static Server newInstance(", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTc5MQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402669791", "bodyText": "when do we need to have  XdsClientWrapperForServerSds? it looks like it is only required during ProtocolNegotiation. if this is the case, we can rely on the PN#close.", "author": "creamsoup", "createdAt": "2020-04-03T00:24:01Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts\n+ * {@link Server#shutdown()} etc to properly shut down the {@link XdsClientWrapperForServerSds}", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MzIxOQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402683219", "bodyText": "The XdsClientWrapperForServerSds is needed for the life of the server. Note that every incoming connection to the server results into TLS handshake and protocol neg and should use the latest cert/key material pointed by the tlsContext. Why close it on PN#close?", "author": "sanjaypujare", "createdAt": "2020-04-03T01:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4ODY0Nw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402688647", "bodyText": "okay. that's why i am confused. the ownership of XdsClientWrapperForServerSds is weird. XdsServer should own the XdsClientWrapperForServerSds, and PN should borrow it from the XdsServer. because PN only exists during protocol negotiation.\nbut, this code create it in PN. and the ownership is transferred to XdsServer. if we change PN to accept XdsClientWrapperForServerSds from server side the code will be much easier to follow. also, PN doesn't need to create/handle exception of the XdsClientWrapperForServerSds.", "author": "creamsoup", "createdAt": "2020-04-03T01:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczNTEwMg==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402735102", "bodyText": "Just realized the PN exists for the whole lifetime of the server: you set it on the server-builder with NettyServerBuilder.protocolNegotiator() and the server calls newHandler every time it needs a handshaker. So you were right: I can keep the XdsClientWrapperForServerSds with the PN and inside PN#close I can call XdsClientWrapperForServerSds.shutdown and I probably don't even need XdsServer then.", "author": "sanjaypujare", "createdAt": "2020-04-03T04:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDMzOQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402670339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                       null);\n          \n          \n            \n                        null);", "author": "creamsoup", "createdAt": "2020-04-03T00:26:01Z", "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -257,6 +258,14 @@ public void clientSdsProtocolNegotiatorNewHandler_fireProtocolNegotiationEvent()\n     assertTrue(channel.isOpen());\n   }\n \n+  @Test\n+  public void serverSdsProtocolNegotiator_passNulls_expectPlaintext() {\n+    InternalProtocolNegotiator.ProtocolNegotiator protocolNegotiator =\n+        SdsProtocolNegotiators.ServerSdsProtocolNegotiator.createServerNegotiator(null, 7000,\n+           null);", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MjMzOA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402672338", "bodyText": "it is weird that this build() doesn't return XdsServer even though it is XdsServerBuilder. Although it is questionable that we need that XdsServer class or not.", "author": "creamsoup", "createdAt": "2020-04-03T00:33:00Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -171,9 +173,27 @@ void panic(final Throwable t) {\n               panicMode = true;\n             }\n           });\n-    delegate.protocolNegotiator(\n+    InternalProtocolNegotiator.ProtocolNegotiator serverProtocolNegotiator =\n         SdsProtocolNegotiators.serverProtocolNegotiator(\n-            this.downstreamTlsContext, port, syncContext));\n-    return delegate.build();\n+            this.downstreamTlsContext, port, syncContext);\n+    return createXdsServer(serverProtocolNegotiator);", "originalCommit": "77ae4eb691a8e32eba8231f8927d5881b7c7e0e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDQ2Nw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r402684467", "bodyText": "As mentioned above, we need to keep the XdsClientWrapperForServerSds instance thru the life of the server and shut down when the server shuts down. It can always return XdsServer even if not needed just to avoid the \"weirdness\"?", "author": "sanjaypujare", "createdAt": "2020-04-03T01:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MjMzOA=="}], "type": "inlineReview"}, {"oid": "674cdb04e598f77aa8dd55f0375f21ae9d2661ea", "url": "https://github.com/grpc/grpc-java/commit/674cdb04e598f77aa8dd55f0375f21ae9d2661ea", "message": "Update xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>", "committedDate": "2020-04-03T04:49:51Z", "type": "commit"}, {"oid": "7ca0be5b871317490a1f491ed0d283ae6f90e9e4", "url": "https://github.com/grpc/grpc-java/commit/7ca0be5b871317490a1f491ed0d283ae6f90e9e4", "message": "Update xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>", "committedDate": "2020-04-03T04:50:49Z", "type": "commit"}, {"oid": "4bf181d367858f1cbc70b6d3ca4a92f046960f8a", "url": "https://github.com/grpc/grpc-java/commit/4bf181d367858f1cbc70b6d3ca4a92f046960f8a", "message": "Update xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>", "committedDate": "2020-04-03T04:51:16Z", "type": "commit"}, {"oid": "f0ee2fbed08085b8498de3c4d3ddf6dc630aa0d9", "url": "https://github.com/grpc/grpc-java/commit/f0ee2fbed08085b8498de3c4d3ddf6dc630aa0d9", "message": "address next set of comments", "committedDate": "2020-04-03T06:06:17Z", "type": "commit"}, {"oid": "8a77bc8c5571b12f8c120feb41c9d2fd49680d2b", "url": "https://github.com/grpc/grpc-java/commit/8a77bc8c5571b12f8c120feb41c9d2fd49680d2b", "message": "fix formatting", "committedDate": "2020-04-03T06:30:54Z", "type": "commit"}, {"oid": "bbc24320b802955efa1f42f2bd58107d8520e905", "url": "https://github.com/grpc/grpc-java/commit/bbc24320b802955efa1f42f2bd58107d8520e905", "message": "log a message", "committedDate": "2020-04-03T06:40:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzAxNw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403123017", "bodyText": "the port is not used if the xdsClientWrapperForServerSds is null, right?", "author": "creamsoup", "createdAt": "2020-04-03T16:21:19Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -77,7 +79,14 @@ public static ProtocolNegotiatorFactory clientProtocolNegotiatorFactory(\n   public static ProtocolNegotiator serverProtocolNegotiator(\n       @Nullable DownstreamTlsContext downstreamTlsContext, int port,\n       SynchronizationContext syncContext) {\n-    return new ServerSdsProtocolNegotiator(downstreamTlsContext, port, syncContext);\n+    XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        ServerSdsProtocolNegotiator.getXdsClientWrapperForServerSds(port, syncContext);\n+    if (xdsClientWrapperForServerSds == null && downstreamTlsContext == null) {\n+      logger.log(Level.INFO, \"Fallback to plaintext for server at port {0}\", port);", "originalCommit": "bbc24320b802955efa1f42f2bd58107d8520e905", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMjQ2Nw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403132467", "bodyText": "But the server is bound to a port e.g. 8080. As a log message it will be useful to point out to the user that server bound to port 8080 fell back to plaintext for whatever reason. If an application creates, say 5 servers out of which 3 fell back to plaintext because of xDS issues but 2 kept TLS/mTLS because they didn't use xDS it will be useful to log the port in the log.", "author": "sanjaypujare", "createdAt": "2020-04-03T16:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzNjM3MA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403136370", "bodyText": "this message is very confusing. there are multiple servers, what is the server here?", "author": "creamsoup", "createdAt": "2020-04-03T16:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MjUwNw==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403142507", "bodyText": "So not saying it is a \"grpc xds-based\" server is confusing?\nGiven\nServer serverA = XdsServerBuilder.forPort(80).build();\nServer serverB = XdsServerBuilder.forPort(81).build();\nServer serverC = NettyServerBuilder.forPort(82).build();\n\nThe port uniquely identifies the server. So port number 80 or 81 will be mentioned in the log message to point to serverA or serverB resp. I don't understand the confusion.", "author": "sanjaypujare", "createdAt": "2020-04-03T16:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NjY4OA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403146688", "bodyText": "Can you suggest what the message should be?", "author": "sanjaypujare", "createdAt": "2020-04-03T16:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNDM5MQ==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403124391", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 The gRPC Authors\n          \n          \n            \n             * Copyright 2020 The gRPC Authors", "author": "creamsoup", "createdAt": "2020-04-03T16:22:56Z", "path": "xds/src/test/java/io/grpc/xds/XdsServerBuilderTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019 The gRPC Authors", "originalCommit": "bbc24320b802955efa1f42f2bd58107d8520e905", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyOTYwNA==", "url": "https://github.com/grpc/grpc-java/pull/6890#discussion_r403129604", "bodyText": "The file was moved from under sds to this new location and a test was added. Not sure if the year needs to be updated", "author": "sanjaypujare", "createdAt": "2020-04-03T16:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNDM5MQ=="}], "type": "inlineReview"}]}