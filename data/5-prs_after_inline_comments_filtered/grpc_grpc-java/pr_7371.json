{"pr_number": 7371, "pr_title": "xds: add server start semantics as per the server api design", "pr_createdAt": "2020-08-27T18:32:02Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7371", "timeline": [{"oid": "3d7061615ba2d64a096491bf1904b387ab40e6a6", "url": "https://github.com/grpc/grpc-java/commit/3d7061615ba2d64a096491bf1904b387ab40e6a6", "message": "xds: add server start semantics as per the server api design", "committedDate": "2020-08-27T18:28:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDMxNA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r478720314", "bodyText": "If this throws an exception, it should cause start() itself to throw an exception. start() should block until delegate.start() completes.", "author": "ejona86", "createdAt": "2020-08-27T22:01:30Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,16 +39,39 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n \n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n-  public Server start() throws IOException {\n-    delegate.start();\n+  public Server start() {\n+    xdsClientWrapperForServerSds.addServerWatcher(\n+        new XdsClientWrapperForServerSds.ServerWatcher() {\n+          @Override\n+          public void onError(Status error) {\n+            if (errorNotifier != null) {\n+              errorNotifier.onError(error);\n+            }\n+          }\n+\n+          @Override\n+          public void onSuccess(EnvoyServerProtoData.DownstreamTlsContext downstreamTlsContext) {\n+            try {\n+              delegate.start();", "originalCommit": "3d7061615ba2d64a096491bf1904b387ab40e6a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyOTg1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r478729857", "bodyText": "Oh okay. So to clarify:\n\n\nany exceptions from delegate.start() should just be thrown from this start without notifying via errorNotifier\n\n\nany error from the xdsClient will be notified via the errorNotifier but the start will remain blocked indefinitely (since there is no timeout) until a successful onSuccess is received from the xdsClient that will result in a delegate.start() call\n\n\nIs my understanding correct?", "author": "sanjaypujare", "createdAt": "2020-08-27T22:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMTQ0Mg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r478731442", "bodyText": "any exceptions from delegate.start() should just be thrown from this start without notifying via errorNotifier\n\nYes. The notifier is for the xds watch which may take ~forever to complete.\n\nany error from the xdsClient will be notified via the errorNotifier but the start will remain blocked indefinitely (since there is no timeout) until a successful onSuccess is received from the xdsClient that will result in a delegate.start() call\n\nYes.", "author": "ejona86", "createdAt": "2020-08-27T22:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MTkzMQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r478791931", "bodyText": "Fixed.", "author": "sanjaypujare", "createdAt": "2020-08-28T02:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDMxNA=="}], "type": "inlineReview"}, {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10", "url": "https://github.com/grpc/grpc-java/commit/0236e9f307decc2e9e43b1d057c95a348a014d10", "message": "address review comments: start should block", "committedDate": "2020-08-28T02:11:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMzA4MQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479403081", "bodyText": "Should this be private?", "author": "dapengzhang0", "createdAt": "2020-08-28T16:14:00Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -202,6 +208,14 @@ public DownstreamTlsContext getDownstreamTlsContext(Channel channel) {\n       checkState(\n           port == localInetAddr.getPort(),\n           \"Channel localAddress port does not match requested listener port\");\n+      return getDownstreamTlsContext(localInetAddr);\n+    }\n+    return null;\n+  }\n+\n+  DownstreamTlsContext getDownstreamTlsContext(InetSocketAddress localInetAddr) {", "originalCommit": "0236e9f307decc2e9e43b1d057c95a348a014d10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwOTIwMw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479409203", "bodyText": "Can the name just be serverWatcher?", "author": "dapengzhang0", "createdAt": "2020-08-28T16:24:41Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +42,59 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher myServerWatcher;", "originalCommit": "0236e9f307decc2e9e43b1d057c95a348a014d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTQzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480249435", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-08-31T16:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwOTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNDc1Ng==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479414756", "bodyText": "start()  throws IllegalStateException if already started. Although current implementation does so but could be more graceful without side effect.", "author": "dapengzhang0", "createdAt": "2020-08-28T16:35:12Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +42,59 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher myServerWatcher;\n \n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n   public Server start() throws IOException {", "originalCommit": "0236e9f307decc2e9e43b1d057c95a348a014d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTYzOA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480249638", "bodyText": "Added a check similar to ServerImpl logic.", "author": "sanjaypujare", "createdAt": "2020-08-31T16:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxOTI2OA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479419268", "bodyText": "Might be better to move static helper methods to a test util class.", "author": "dapengzhang0", "createdAt": "2020-08-28T16:44:07Z", "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java", "diffHunk": "@@ -51,12 +57,14 @@\n   @Mock private Channel channel;\n \n   private XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  private XdsClient.ListenerWatcher registeredWatcher;\n \n   @Before\n   public void setUp() throws IOException {\n     MockitoAnnotations.initMocks(this);\n     xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT);\n-    xdsClientWrapperForServerSds.start(xdsClient);\n+    registeredWatcher =\n+        XdsServerBuilderTest.startAndGetWatcher(xdsClientWrapperForServerSds, xdsClient, PORT);", "originalCommit": "0236e9f307decc2e9e43b1d057c95a348a014d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTc5Nw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480249797", "bodyText": "moved to a new helper test class.", "author": "sanjaypujare", "createdAt": "2020-08-31T16:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxOTI2OA=="}], "type": "inlineReview"}, {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "url": "https://github.com/grpc/grpc-java/commit/b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "message": "address review comments", "committedDate": "2020-08-31T16:35:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDM1Mw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480270353", "bodyText": "I don't understand this method detail from it's name and args. Why there are two sets of port and context? Why there are two ports args but they are always the same value in all usages?", "author": "dapengzhang0", "createdAt": "2020-08-31T17:13:42Z", "path": "xds/src/test/java/io/grpc/xds/XdsServerTestHelper.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import org.mockito.ArgumentCaptor;\n+\n+/**\n+ * Helper methods related to {@link XdsServerBuilder} and related classes.\n+ */\n+class XdsServerTestHelper {\n+\n+  static XdsClient.ListenerWatcher startAndGetWatcher(\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      XdsClient mockXdsClient,\n+      int port) {\n+    xdsClientWrapperForServerSds.start(mockXdsClient);\n+    ArgumentCaptor<XdsClient.ListenerWatcher> listenerWatcherCaptor = ArgumentCaptor.forClass(null);\n+    verify(mockXdsClient).watchListenerData(eq(port), listenerWatcherCaptor.capture());\n+    return listenerWatcherCaptor.getValue();\n+  }\n+\n+  static void generateListenerUpdate(", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5OTM2Nw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480299367", "bodyText": "So this is due to the complexity of the Listener proto. This is really defined for the Envoy proxy which has a physical address for the listener to listen on. And then the addresses in the filter chain which consist of prefix_range and the destination port. Until we have the control plane (TD) send us the listener response especially for gRPC that has a single Listener object containing a single filter-chain with appropriate IP+port values I had to add support for processing and selecting the correct filter chain for the requested port. So the test needed to simulate those responses. Hope that answers the question. I'll add comments to this method to explain the need for those params.", "author": "sanjaypujare", "createdAt": "2020-08-31T18:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NTk3MA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481445970", "bodyText": "done and also cleaned up", "author": "sanjaypujare", "createdAt": "2020-09-01T21:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480272500", "bodyText": "We can use an AtomicBoolean and checkState compareAndSet(false, true) instead. synchronized method with IO operation scares me in general although it works in this case.", "author": "dapengzhang0", "createdAt": "2020-08-31T17:18:08Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -56,26 +59,28 @@\n   }\n \n   @Override\n-  public Server start() throws IOException {\n+  public synchronized Server start() throws IOException {", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NTU4Mg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480285582", "bodyText": "AtomicBoolean isn't quite right because that means other start() calls could return before the first start() returns. I think we should just have a non-public lock and lock on it, which is what we do in ServerImpl.start(). That would also allow using lockInterruptibly() to have consistent interruption behavior. (Although multiple simultaneous starts really isn't all that interesting of a use-case.)", "author": "ejona86", "createdAt": "2020-08-31T17:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5MTg3NA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480291874", "bodyText": "I do understand your concern about IO operation inside synchronized and thought about it. Note the lock is not for just atomic setting of started but for an atomic start operation similar to how ServerImpl.start does it. There too IO operations are done inside the synchronized block. If 2 threads concurrently call start, one of them will fail with \"Already started\" (assuming the other start succeeds) in this implementation and I thought that was one of the objectives.\nSo the alternatives are:\n\ndon't worry about concurrent start protection and just implement protection against repeated (non-concurrent) calls to start using just  started as an AtomicBoolean\ndo not worry about side-effects and let the delegate.start() throw the exception with \"Already started\" (old code)\n\nWDYT?", "author": "sanjaypujare", "createdAt": "2020-08-31T17:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5OTQzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480299435", "bodyText": "Oh, I looked at the documentation, it says IllegalStateException - if already started. I guess start() didn't do very much work before, so it would run reasonably quickly. Now we are making it take a much longer time. It seems quite fair to use an AtomicBoolean and say \"already started\" even before the other start() returns. (I was mistaken and thought a duplicate start would just return immediately.)", "author": "ejona86", "createdAt": "2020-08-31T18:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzEwMg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480303102", "bodyText": "... (Although multiple simultaneous starts really isn't all that interesting of a use-case.)\n\nI agree with that but ServerImpl.start seems to have code to guard against that.", "author": "sanjaypujare", "createdAt": "2020-08-31T18:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNDQ5OA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480304498", "bodyText": "Oh, we should definitely handle it, but if things get out-of-hand we might choose something easier over something \"nicer.\"", "author": "ejona86", "createdAt": "2020-08-31T18:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwODYxMw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480308613", "bodyText": "...It seems quite fair to use an AtomicBoolean and say \"already started\" even before the other start() returns. (I was mistaken and thought a duplicate start would just return immediately.)\n\nOkay so you are suggesting that the first one saying \"already started\" really just means \"start already called and in progress\" as opposed to implying \"already successfully started\". So I am thinking of doing it in one of two ways:\n\n\ninstead of a boolean have something that reflects 3 states: not_started, start_in_progress, successfully_started. This variable will reflect the state of this server object and guard against multiple (even concurrent) calls to start.\n\n\nkeep the boolean and set it to true at the beginning of start() and set it to false if start does not succeed.\n\n\nI would prefer to do it the second way as multiple concurrent start calls is not a use-case we should worry about so much.", "author": "sanjaypujare", "createdAt": "2020-08-31T18:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyOTE3Mw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480429173", "bodyText": "keep the boolean and set it to true at the beginning of start() and set it to false if start does not succeed.\n\nSGTM.", "author": "ejona86", "createdAt": "2020-08-31T22:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NTgxNg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481445816", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-09-01T21:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3ODIxOA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480278218", "bodyText": "If interrupted, you need to call Thread.currentThread().interrupt().", "author": "ejona86", "createdAt": "2020-08-31T17:28:54Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -52,8 +56,26 @@\n   }\n \n   @Override\n-  public Server start() {\n-    xdsClientWrapperForServerSds.addServerWatcher(\n+  public Server start() throws IOException {\n+    Future<EnvoyServerProtoData.DownstreamTlsContext> future = addServerWatcher();\n+    if (!xdsClientWrapperForServerSds.hasXdsClient()) {\n+      xdsClientWrapperForServerSds.createXdsClientAndStart();\n+    }\n+    try {\n+      future.get();\n+    } catch (InterruptedException | ExecutionException ex) {", "originalCommit": "0236e9f307decc2e9e43b1d057c95a348a014d10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzIzMg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480303232", "bodyText": "Correct. WIll do", "author": "sanjaypujare", "createdAt": "2020-08-31T18:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3ODIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MTU2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480281566", "bodyText": "We want this logging disabled when a user's watcher is installed. Wait... there's a lot of logging in this class. There should not be any logging at default-enabled log levels in this class (INFO and higher). Maybe there's an exception here or there, but this is clearly too often.", "author": "ejona86", "createdAt": "2020-08-31T17:35:18Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -170,18 +174,20 @@ public void onListenerChanged(XdsClient.ListenerUpdate update) {\n                 \"Setting myListener from ConfigUpdate listener: {0}\",\n                 update.getListener());\n             curListener = update.getListener();\n+            reportSuccess();\n           }\n \n           @Override\n           public void onResourceDoesNotExist(String resourceName) {\n             logger.log(Level.INFO, \"Resource {0} is unavailable\", resourceName);", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NTcyOA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481445728", "bodyText": "Cut down a lot of logging as suggested.", "author": "sanjaypujare", "createdAt": "2020-09-01T21:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MTU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjU4Nw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480286587", "bodyText": "s/with/set/ or to match other methods, just errorNotifier. We use with* when the method returns a new instance.", "author": "ejona86", "createdAt": "2020-08-31T17:44:38Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -129,6 +131,12 @@ public XdsServerBuilder fallbackProtocolNegotiator(\n     return this;\n   }\n \n+  /** Set the {@link ErrorNotifier}. Pass null to unset a previously set value. */\n+  public XdsServerBuilder withErrorNotifier(ErrorNotifier errorNotifier) {", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MzIyNA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481443224", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-09-01T21:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NzI3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480287272", "bodyText": "This watcher should only be used during start(), so make that clear.", "author": "ejona86", "createdAt": "2020-08-31T17:45:55Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -150,6 +158,13 @@ public Server build() {\n   public ServerWrapperForXds buildServer(ServerSdsProtocolNegotiator serverProtocolNegotiator) {\n     delegate.protocolNegotiator(serverProtocolNegotiator);\n     return new ServerWrapperForXds(\n-        delegate.build(), serverProtocolNegotiator.getXdsClientWrapperForServerSds());\n+        delegate.build(), serverProtocolNegotiator.getXdsClientWrapperForServerSds(),\n+        errorNotifier);\n+  }\n+\n+  /** Watcher to receive error notifications from the xDS control plane. */", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MzUyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481443529", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-09-01T21:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NzI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5Mjc0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480292743", "bodyText": "This is an synchronized write. It could be read concurrently within start().", "author": "ejona86", "createdAt": "2020-08-31T17:56:06Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +44,62 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n-\n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher serverWatcher;\n+  @GuardedBy(\"this\") private boolean started;\n+\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n-  public Server start() throws IOException {\n-    delegate.start();\n+  public synchronized Server start() throws IOException {\n+    checkState(!started, \"Already started\");\n+    Future<EnvoyServerProtoData.DownstreamTlsContext> future = addServerWatcher();\n     if (!xdsClientWrapperForServerSds.hasXdsClient()) {\n       xdsClientWrapperForServerSds.createXdsClientAndStart();\n     }\n+    try {\n+      future.get();\n+    } catch (InterruptedException | ExecutionException ex) {\n+      xdsClientWrapperForServerSds.removeServerWatcher(serverWatcher);\n+      serverWatcher = null;\n+      throw new RuntimeException(ex);\n+    }\n+    delegate.start();\n+    started = true;\n     return this;\n   }\n \n+  private Future<EnvoyServerProtoData.DownstreamTlsContext> addServerWatcher() {\n+    final SettableFuture<EnvoyServerProtoData.DownstreamTlsContext> settableFuture =\n+        SettableFuture.create();\n+    serverWatcher =\n+        new XdsClientWrapperForServerSds.ServerWatcher() {\n+          @Override\n+          public void onError(Status error) {\n+            if (errorNotifier != null) {\n+              errorNotifier.onError(error);\n+            }\n+          }\n+\n+          @Override\n+          public void onSuccess(EnvoyServerProtoData.DownstreamTlsContext downstreamTlsContext) {\n+            xdsClientWrapperForServerSds.removeServerWatcher(this);\n+            serverWatcher = null;", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NDI5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481444292", "bodyText": "Good catch. Used a synchronized method to write and removeServerWatcher", "author": "sanjaypujare", "createdAt": "2020-09-01T21:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5Mjc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480297122", "bodyText": "This doesn't look right. This means the xds client is running and doing I/O before start(). It should be created within start(). Probably best not to fix it in this PR though.", "author": "ejona86", "createdAt": "2020-08-31T18:04:30Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +44,62 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n-\n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher serverWatcher;\n+  @GuardedBy(\"this\") private boolean started;\n+\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,", "originalCommit": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3NDczMg==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480374732", "bodyText": "This is behaving as expected. The xdsClient is only started during ServerWrapperForXds.start() as you can see the call to xdsClientWrapperForServerSds.createXdsClientAndStart() inside ServerWrapperForXds.start(). Only for unit tests a mocked XdsClient is injected into XdsClientWrapperForServerSds that doesn't need to be started and that's the reason for the if (!xdsClientWrapperForServerSds.hasXdsClient()) clause.", "author": "sanjaypujare", "createdAt": "2020-08-31T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyOTg5Mw==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480429893", "bodyText": "Hmm... that's problematic as if start() throws we need to call shutdown() on it. But can it be restarted?", "author": "ejona86", "createdAt": "2020-08-31T22:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNTQyMQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480435421", "bodyText": "Hmmm. So what's the general behavior of a Server in gRPC? If start() throws, is it possible for the user to retry start (depending on the nature of exception) or do we ask them to just build a new server and try start on that? Depending on that I can fix this start so the xDS client can be shutdown in case of an error and make start() retriable. I don't see any reason why retry cannot be made to work but depends on what we want.", "author": "sanjaypujare", "createdAt": "2020-08-31T22:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1MzY3Ng==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480453676", "bodyText": "If start() throws, is it possible for the user to retry start (depending on the nature of exception) or do we ask them to just build a new server and try start on that?\n\nThis is related to the topic proposed in out ExperimentalApi meeting about if start() throws IOException should the library automatically clean up all resources by its spec.", "author": "dapengzhang0", "createdAt": "2020-08-31T22:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NTM3NA==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r481445374", "bodyText": "For now this one doesn't do any cleanup when start throws. Can revisit this in a separate PR (along with the other start related issue mentioned?)", "author": "sanjaypujare", "createdAt": "2020-09-01T21:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg=="}], "type": "inlineReview"}, {"oid": "28468592d1155ce25ca07e90862f9352c426f1d2", "url": "https://github.com/grpc/grpc-java/commit/28468592d1155ce25ca07e90862f9352c426f1d2", "message": "address review comments", "committedDate": "2020-09-01T18:32:55Z", "type": "commit"}, {"oid": "223b8262209801542b071d931110a23b2016c1cd", "url": "https://github.com/grpc/grpc-java/commit/223b8262209801542b071d931110a23b2016c1cd", "message": "fix the async code in the test to remove flakiness", "committedDate": "2020-09-02T18:55:47Z", "type": "commit"}, {"oid": "00c1d94131612ccccc645d81d01a753a8ed42538", "url": "https://github.com/grpc/grpc-java/commit/00c1d94131612ccccc645d81d01a753a8ed42538", "message": "limit the loop iterations", "committedDate": "2020-09-02T19:40:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyNTM2NQ==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r483425365", "bodyText": "Should still throw a wrapped exception, otherwise the server is started in a broken state.", "author": "dapengzhang0", "createdAt": "2020-09-04T06:58:17Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +44,72 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n-\n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher serverWatcher;\n+  private AtomicBoolean started = new AtomicBoolean();\n+\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n   public Server start() throws IOException {\n-    delegate.start();\n+    checkState(started.compareAndSet(false, true), \"Already started\");\n+    Future<EnvoyServerProtoData.DownstreamTlsContext> future = addServerWatcher();\n     if (!xdsClientWrapperForServerSds.hasXdsClient()) {\n       xdsClientWrapperForServerSds.createXdsClientAndStart();\n     }\n+    try {\n+      future.get();\n+    } catch (InterruptedException | ExecutionException ex) {\n+      removeServerWatcher();\n+      if (ex instanceof InterruptedException) {\n+        Thread.currentThread().interrupt();", "originalCommit": "00c1d94131612ccccc645d81d01a753a8ed42538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNTM0Ng==", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r485105346", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-09-08T18:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyNTM2NQ=="}], "type": "inlineReview"}, {"oid": "19e5d9ce0c77c677df97fbe3f650ad4786c500f4", "url": "https://github.com/grpc/grpc-java/commit/19e5d9ce0c77c677df97fbe3f650ad4786c500f4", "message": "address review comments", "committedDate": "2020-09-08T18:08:13Z", "type": "commit"}]}