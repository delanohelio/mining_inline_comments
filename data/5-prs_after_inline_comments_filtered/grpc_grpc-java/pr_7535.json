{"pr_number": 7535, "pr_title": "xds: create a full xDS example with XDS Channel creds and server xDS options", "pr_createdAt": "2020-10-20T00:35:09Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7535", "timeline": [{"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "url": "https://github.com/grpc/grpc-java/commit/b7e8d0422249c7afe79967fae4e0b7f8e1440720", "message": "xds: create a full xDS example with XDS Channel creds and server xDS options", "committedDate": "2020-10-20T00:29:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDUyOA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509940528", "bodyText": "s/2015/2020/g", "author": "voidzcy", "createdAt": "2020-10-22T07:33:00Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0NzYwOA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509947608", "bodyText": "nit: It's clearer to use a local variable that creates a InsecureChannelCredentials instance.\nChannelCredentials insecure = InsecureChannelCredentials.create();\nChannelCredentials channelCreds = useXdsCreds ? XdsChannelCredentials.create(/* fallback */ insecure) : insecure;\nGrpc.newChannelBuilder(target, channelCreds).build();", "author": "voidzcy", "createdAt": "2020-10-22T07:45:04Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2NDg4MA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r510364880", "bodyText": "That's what I wanted but the constructor call restriction (calling this) prevents it. But I am removing the other constructor - not needed", "author": "sanjaypujare", "createdAt": "2020-10-22T18:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0NzYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0OTg1MA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509949850", "bodyText": "You do not need this constructor right? Everything can be put in the single constructor.", "author": "voidzcy", "createdAt": "2020-10-22T07:48:55Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build());\n+  }\n+\n+  /** Construct client for accessing HelloWorld server using the channel passed. */\n+  HelloWorldClientXds(ManagedChannel channel) {", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1NDQ5Mg==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509954492", "bodyText": "y is not descriptive, a better message might be \"USAGE: HelloWorldClientXds target [name [--secure]]\".", "author": "voidzcy", "createdAt": "2020-10-22T07:56:31Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build());\n+  }\n+\n+  /** Construct client for accessing HelloWorld server using the channel passed. */\n+  HelloWorldClientXds(ManagedChannel channel) {\n+    this.channel = channel;\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [y]]\\n\");", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1ODc0NQ==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509958745", "bodyText": "nit: a (slightly) better style is to declare all the variables that the command line argument parsing logic will parse to at the top. This makes the main cleaner. (Well, this comment might be overly strictly...)", "author": "voidzcy", "createdAt": "2020-10-22T08:03:20Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build());\n+  }\n+\n+  /** Construct client for accessing HelloWorld server using the channel passed. */\n+  HelloWorldClientXds(ManagedChannel channel) {\n+    this.channel = channel;\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [y]]\\n\");\n+      System.err.println(\"  target  The xds target to connect to using the 'xds:' target scheme.\");\n+      System.err.println(\"  name    The name you wish to include in the greeting request. Defaults to \" + user);\n+      System.err.println(\n+          \"  'y'     'y' or 'yes' indicates using xDS credentials otherwise defaults to insecure.\");\n+      System.exit(1);\n+    }\n+    boolean useXdsCreds = false;", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1OTczMg==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509959732", "bodyText": "Same comment for the message as that for the client side.", "author": "voidzcy", "createdAt": "2020-10-22T08:05:05Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Server;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class HelloWorldServerXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldServerXds.class.getName());\n+  private final int port;\n+  private final boolean useXdsCreds;\n+  private final String hostName;\n+  private Server server;\n+\n+  public HelloWorldServerXds(int port, String hostName, boolean useXdsCreds) {\n+    this.port = port;\n+    this.hostName = hostName;\n+    this.useXdsCreds = useXdsCreds;\n+  }\n+\n+  private void start() throws IOException {\n+    XdsServerBuilder builder = XdsServerBuilder.forPort(port).addService(new HostnameGreeter(hostName));\n+    if (useXdsCreds) {\n+      builder = builder.useXdsSecurityWithPlaintextFallback();\n+    }\n+    server = builder.build().start();\n+    logger.info(\"Server started, listening on \" + port);\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread() {\n+              @Override\n+              public void run() {\n+                // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n+                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n+                HelloWorldServerXds.this.stop();\n+                System.err.println(\"*** server shut down\");\n+              }\n+            });\n+  }\n+\n+  private void stop() {\n+    if (server != null) {\n+      server.shutdown();\n+    }\n+  }\n+\n+  /** Await termination on the main thread since the grpc library uses daemon threads. */\n+  private void blockUntilShutdown() throws InterruptedException {\n+    if (server != null) {\n+      server.awaitTermination();\n+    }\n+  }\n+\n+  /** Main launches the server from the command line. */\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldServerTls port [hostname [y]]\");", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MjgwNw==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509962807", "bodyText": "Would be better to put this class inside HelloWorldServerXds, same as the hello world example. That's more concise.", "author": "voidzcy", "createdAt": "2020-10-22T08:09:59Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HostnameGreeter.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Random;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Greeter implementation which replies identifying itself with its hostname. */\n+public final class HostnameGreeter extends GreeterGrpc.GreeterImplBase {", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2Njc3NQ==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r510366775", "bodyText": "This is the structure in example-hostname and if we want to change it we should change it in both. For now I am keeping it like this. I agree with your suggestion BTW.", "author": "sanjaypujare", "createdAt": "2020-10-22T18:20:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MjgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2NjcwMA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509966700", "bodyText": "server.shutdown().awaitTermination(30, TimeUnit.SECONDS); Try keep as close as the existing code in the existing hello world example.", "author": "voidzcy", "createdAt": "2020-10-22T08:16:03Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Server;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class HelloWorldServerXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldServerXds.class.getName());\n+  private final int port;\n+  private final boolean useXdsCreds;\n+  private final String hostName;\n+  private Server server;\n+\n+  public HelloWorldServerXds(int port, String hostName, boolean useXdsCreds) {\n+    this.port = port;\n+    this.hostName = hostName;\n+    this.useXdsCreds = useXdsCreds;\n+  }\n+\n+  private void start() throws IOException {\n+    XdsServerBuilder builder = XdsServerBuilder.forPort(port).addService(new HostnameGreeter(hostName));\n+    if (useXdsCreds) {\n+      builder = builder.useXdsSecurityWithPlaintextFallback();\n+    }\n+    server = builder.build().start();\n+    logger.info(\"Server started, listening on \" + port);\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread() {\n+              @Override\n+              public void run() {\n+                // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n+                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n+                HelloWorldServerXds.this.stop();\n+                System.err.println(\"*** server shut down\");\n+              }\n+            });\n+  }\n+\n+  private void stop() {\n+    if (server != null) {\n+      server.shutdown();", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2ODE4Mw==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509968183", "bodyText": "System.exit(1);", "author": "voidzcy", "createdAt": "2020-10-22T08:18:23Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Server;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class HelloWorldServerXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldServerXds.class.getName());\n+  private final int port;\n+  private final boolean useXdsCreds;\n+  private final String hostName;\n+  private Server server;\n+\n+  public HelloWorldServerXds(int port, String hostName, boolean useXdsCreds) {\n+    this.port = port;\n+    this.hostName = hostName;\n+    this.useXdsCreds = useXdsCreds;\n+  }\n+\n+  private void start() throws IOException {\n+    XdsServerBuilder builder = XdsServerBuilder.forPort(port).addService(new HostnameGreeter(hostName));\n+    if (useXdsCreds) {\n+      builder = builder.useXdsSecurityWithPlaintextFallback();\n+    }\n+    server = builder.build().start();\n+    logger.info(\"Server started, listening on \" + port);\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread() {\n+              @Override\n+              public void run() {\n+                // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n+                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n+                HelloWorldServerXds.this.stop();\n+                System.err.println(\"*** server shut down\");\n+              }\n+            });\n+  }\n+\n+  private void stop() {\n+    if (server != null) {\n+      server.shutdown();\n+    }\n+  }\n+\n+  /** Await termination on the main thread since the grpc library uses daemon threads. */\n+  private void blockUntilShutdown() throws InterruptedException {\n+    if (server != null) {\n+      server.awaitTermination();\n+    }\n+  }\n+\n+  /** Main launches the server from the command line. */\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldServerTls port [hostname [y]]\");\n+      System.err.println(\"\");\n+      System.err.println(\"  port  The port to bind to.\");\n+      System.err.println(\"  hostname  The name clients will see in greet responses. \");\n+      System.err.println(\"            Defaults to the machine's hostname\");\n+      System.out.println(\n+          \"  'y'  'y' or 'yes' indicates using xDS credentials options; otherwise defaults to insecure credentials.\");\n+      System.exit(0);", "originalCommit": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5de7e8924123af2d26d9ecb446877ac4f6dd2e2d", "url": "https://github.com/grpc/grpc-java/commit/5de7e8924123af2d26d9ecb446877ac4f6dd2e2d", "message": "address review comments", "committedDate": "2020-10-22T18:34:07Z", "type": "commit"}, {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8", "url": "https://github.com/grpc/grpc-java/commit/b848560ca065231fba2c76ed4a56a8585a5113c8", "message": "address review comments-2", "committedDate": "2020-10-22T18:48:35Z", "type": "commit"}, {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "url": "https://github.com/grpc/grpc-java/commit/4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "message": "address review comments-3", "committedDate": "2020-10-22T19:19:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTU5OQ==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528971599", "bodyText": "The example should not depend on forever-experimental APIs like grpc-netty. It doesn't seem these are even used.\nI think the imports need to get cleaned up. It looks like java.io.File also isn't used, and the io.netty imports. I assume there are others.", "author": "ejona86", "createdAt": "2020-11-23T20:18:41Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;", "originalCommit": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTQ1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528975457", "bodyText": "Why would we ever do this? What is wrong with a case sensitive equals? If we really must, a case-insensitive equals. But why startswith?", "author": "ejona86", "createdAt": "2020-11-23T20:26:24Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this.channel =\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build();\n+    blockingStub = GreeterGrpc.newBlockingStub(this.channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    boolean useXdsCreds = false;\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [--secure]]\\n\");\n+      System.err.println(\"  target  The xds target to connect to using the 'xds:' target scheme.\");\n+      System.err.println(\"  name    The name you wish to include in the greeting request. Defaults to \" + user);\n+      System.err.println(\n+          \"  '--secure'     Indicates using xDS credentials otherwise defaults to insecure.\");\n+      System.exit(1);\n+    }\n+    if (args.length > 1) {\n+      user = args[1];\n+      if (args.length == 3) {\n+        useXdsCreds = args[2].toLowerCase().startsWith(\"--s\");", "originalCommit": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzMzYwMQ==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r529233601", "bodyText": "To support any substring of --secure in a case-insensitive way to make it easy for users. Let me fix this", "author": "sanjaypujare", "createdAt": "2020-11-24T06:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTk2Mw==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528975963", "bodyText": ":-/ You changed the order compared to the helloworld example. I can understand why to a degree, but it would probably be better to just have both names required. This will also impact documentation.", "author": "ejona86", "createdAt": "2020-11-23T20:27:25Z", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this.channel =\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build();\n+    blockingStub = GreeterGrpc.newBlockingStub(this.channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    boolean useXdsCreds = false;\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [--secure]]\\n\");", "originalCommit": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzNTU3OA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r529235578", "bodyText": "target should be required and name can be optional so this order is better than the one in helloworld. But I guess we cannot change helloworld so I'll make both of them required.", "author": "sanjaypujare", "createdAt": "2020-11-24T06:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNTQ1NA==", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r529735454", "bodyText": "I'd be fine if it behaved identically to before: it defaults to not using xds but when you specify an xds string it kicks into action.", "author": "ejona86", "createdAt": "2020-11-24T17:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTk2Mw=="}], "type": "inlineReview"}]}