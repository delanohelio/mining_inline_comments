{"pr_number": 7010, "pr_title": "xds: replace deprecated fields for Upstream and Downstream TlsContext", "pr_createdAt": "2020-05-05T23:42:44Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7010", "timeline": [{"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3", "url": "https://github.com/grpc/grpc-java/commit/009ae80a13419fff50ab2e11355abafe494dcaa3", "message": "xds: remove deprecated fields for Upstream and Downstream TlsContext", "committedDate": "2020-05-06T01:11:08Z", "type": "commit"}, {"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3", "url": "https://github.com/grpc/grpc-java/commit/009ae80a13419fff50ab2e11355abafe494dcaa3", "message": "xds: remove deprecated fields for Upstream and Downstream TlsContext", "committedDate": "2020-05-06T01:11:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTI0MA==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421021240", "bodyText": "isInitialized is always true for proto3 since it checks mandatory fields are set or not. this need to be fixed.\nalso, can upstreamTlsContext be null?", "author": "creamsoup", "createdAt": "2020-05-06T18:58:25Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1051,8 +1061,14 @@ private void handleCdsResponse(DiscoveryResponse cdsResponse) {\n         }\n         updateBuilder.setLrsServerName(\"\");\n       }\n-      if (cluster.hasTlsContext()) {\n-        updateBuilder.setUpstreamTlsContext(cluster.getTlsContext());\n+      try {\n+        UpstreamTlsContext upstreamTlsContext = getTlsContextFromCluster(cluster);\n+        if (upstreamTlsContext != null && upstreamTlsContext.isInitialized()) {", "originalCommit": "009ae80a13419fff50ab2e11355abafe494dcaa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwMDk1NQ==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421100955", "bodyText": "isInitialized only checks for mandatory fields? It's quite useless then. I'll then use hasCommonTlsContext() unless that too always returns true :-)\nupstreamTlsContext can be null when we switch to v3 protos and cluster.getTlsContext() won't be there anymore so getTlsContextFromCluster will return null in that case.", "author": "sanjaypujare", "createdAt": "2020-05-06T21:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwMjAzNw==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421102037", "bodyText": "it was useful for proto2 because proto2 has required fields. in proto3, all fields are optional.", "author": "creamsoup", "createdAt": "2020-05-06T21:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMjQ1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421022457", "bodyText": "this always pass or it won't execute this line. i think you should check size of filterChains", "author": "creamsoup", "createdAt": "2020-05-06T19:00:28Z", "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "diffHunk": "@@ -93,6 +95,37 @@ public void listener_convertFromListenerProto() {\n     assertThat(tlsCertSdsConfigs.get(0).getName()).isEqualTo(\"google-sds-config-default\");\n   }\n \n+  // TODO(sanjaypujare): remove when we move to envoy protos v3\n+  @Test\n+  public void listener_convertFromDeprecatedListenerProto() throws InvalidProtocolBufferException {\n+    io.envoyproxy.envoy.api.v2.core.Address address =\n+        io.envoyproxy.envoy.api.v2.core.Address.newBuilder()\n+            .setSocketAddress(SocketAddress.newBuilder()\n+                .setPortValue(8000)\n+                .setAddress(\"10.2.1.34\")\n+                .build())\n+            .build();\n+    io.envoyproxy.envoy.api.v2.Listener listener =\n+        io.envoyproxy.envoy.api.v2.Listener.newBuilder()\n+            .setName(\"8000\")\n+            .setAddress(address)\n+            .addFilterChains(createDeprecatedInFilter())\n+            .build();\n+    Listener xdsListener = Listener.fromEnvoyProtoListener(listener);\n+    List<EnvoyServerProtoData.FilterChain> filterChains = xdsListener.getFilterChains();\n+    EnvoyServerProtoData.FilterChain inFilter = filterChains.get(0);\n+    assertThat(inFilter).isNotNull();", "originalCommit": "009ae80a13419fff50ab2e11355abafe494dcaa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNjk1MA==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421026950", "bodyText": "nit: && should be in front\nif (condition\n    && another_condition) {\n  ...\n}", "author": "creamsoup", "createdAt": "2020-05-06T19:08:07Z", "path": "xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java", "diffHunk": "@@ -173,13 +176,26 @@ public String toString() {\n     }\n \n     static FilterChain fromEnvoyProtoFilterChain(\n-        io.envoyproxy.envoy.api.v2.listener.FilterChain proto) {\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain proto)\n+        throws InvalidProtocolBufferException {\n       return new FilterChain(\n           FilterChainMatch.fromEnvoyProtoFilterChainMatch(proto.getFilterChainMatch()),\n-          proto.getTlsContext()\n+          getTlsContextFromFilterChain(proto)\n       );\n     }\n \n+    private static DownstreamTlsContext getTlsContextFromFilterChain(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain filterChain)\n+        throws InvalidProtocolBufferException {\n+      if (filterChain.hasTransportSocket() && \"tls\"", "originalCommit": "009ae80a13419fff50ab2e11355abafe494dcaa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9157439509ce079c9f855f25d1eb2bd547d1a9f2", "url": "https://github.com/grpc/grpc-java/commit/9157439509ce079c9f855f25d1eb2bd547d1a9f2", "message": "xds: address review comments", "committedDate": "2020-05-07T06:05:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421668651", "bodyText": "The ACK should be sent before the information is used.", "author": "voidzcy", "createdAt": "2020-05-07T17:22:57Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -708,22 +710,30 @@ private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n           ldsResponse.getVersionInfo(), \"Malformed LDS response: \" + e);\n       return;\n     }\n-    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of(),\n-        ldsResponse.getVersionInfo());\n     if (requestedListener != null) {\n       if (ldsRespTimer != null) {\n         ldsRespTimer.cancel();\n         ldsRespTimer = null;\n       }\n-      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n-          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n-          .build();\n-      listenerWatcher.onListenerChanged(listenerUpdate);\n+      try {\n+        ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+            .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+            .build();\n+        listenerWatcher.onListenerChanged(listenerUpdate);", "originalCommit": "9157439509ce079c9f855f25d1eb2bd547d1a9f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODM5OA==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421678398", "bodyText": "Okay, I see what you mean. I'll need to restructure the code so I call \"onListernerChanged\" only after sending the ACK and if there is an exception then send a NACK instead.", "author": "sanjaypujare", "createdAt": "2020-05-07T17:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNzUzNA==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421707534", "bodyText": "fixed", "author": "sanjaypujare", "createdAt": "2020-05-07T18:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMTUyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421711529", "bodyText": "Should also include onResourceDoesNotExit().", "author": "voidzcy", "createdAt": "2020-05-07T18:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ=="}], "type": "inlineReview"}, {"oid": "ec1a36aed1290fb3a8c42da42d19eae4606ebe3e", "url": "https://github.com/grpc/grpc-java/commit/ec1a36aed1290fb3a8c42da42d19eae4606ebe3e", "message": "xds: send ACK before calling listenerUpdate", "committedDate": "2020-05-07T18:27:17Z", "type": "commit"}]}