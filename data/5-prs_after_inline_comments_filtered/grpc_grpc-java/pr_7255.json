{"pr_number": 7255, "pr_title": "xds: refactor usage of Node in Bootstrap to EnvoyProtoData.Node", "pr_createdAt": "2020-07-27T21:19:39Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7255", "timeline": [{"oid": "e119990157f886f935acb27b6607a230d7c4fc00", "url": "https://github.com/grpc/grpc-java/commit/e119990157f886f935acb27b6607a230d7c4fc00", "message": "xds: refactor usage of Node in Bootstrap to EnvoyProtoData.Node", "committedDate": "2020-07-27T21:41:04Z", "type": "commit"}, {"oid": "e119990157f886f935acb27b6607a230d7c4fc00", "url": "https://github.com/grpc/grpc-java/commit/e119990157f886f935acb27b6607a230d7c4fc00", "message": "xds: refactor usage of Node in Bootstrap to EnvoyProtoData.Node", "committedDate": "2020-07-27T21:41:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTAxMw==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461199013", "bodyText": "How the nullity for these fields are determined? Some of them have checkNotNull while some others don't.\nI don't see the different between id and cluster while one of them has checkNotNull and the other doesn't. Node's builder has a default value of \"\" for id and its setter can never be null.", "author": "voidzcy", "createdAt": "2020-07-27T22:09:21Z", "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -135,17 +141,370 @@ public String toString() {\n   }\n \n   /**\n-   * See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.core.Locality}.\n+   * See corresponding Envoy proto message {@link io.envoyproxy.envoy.config.core.v3.Node}.\n+   */\n+  public static final class Node {\n+\n+    private final String id;\n+    private final String cluster;\n+    @Nullable\n+    private final Map<String, ?> metadata;\n+    @Nullable\n+    private final Locality locality;\n+    private final List<Address> listeningAddresses;\n+    private final String buildVersion;\n+    private final String userAgentName;\n+    @Nullable\n+    private final String userAgentVersion;\n+    private final List<String> clientFeatures;\n+\n+    private Node(\n+        String id, String cluster, @Nullable Map<String, ?> metadata, @Nullable Locality locality,\n+        List<Address> listeningAddresses, String buildVersion, String userAgentName,\n+        @Nullable String userAgentVersion, List<String> clientFeatures) {\n+      this.id = id;", "originalCommit": "e119990157f886f935acb27b6607a230d7c4fc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTYxNw==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461205617", "bodyText": "I missed a check here.  The checkNotNull here is in case builder.setId() is not called.", "author": "dapengzhang0", "createdAt": "2020-07-27T22:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTU3Ng==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461199576", "bodyText": "Why this is not calling builder.addListeningAddresses(...) while looping through the list?", "author": "voidzcy", "createdAt": "2020-07-27T22:10:42Z", "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -135,17 +141,370 @@ public String toString() {\n   }\n \n   /**\n-   * See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.core.Locality}.\n+   * See corresponding Envoy proto message {@link io.envoyproxy.envoy.config.core.v3.Node}.\n+   */\n+  public static final class Node {\n+\n+    private final String id;\n+    private final String cluster;\n+    @Nullable\n+    private final Map<String, ?> metadata;\n+    @Nullable\n+    private final Locality locality;\n+    private final List<Address> listeningAddresses;\n+    private final String buildVersion;\n+    private final String userAgentName;\n+    @Nullable\n+    private final String userAgentVersion;\n+    private final List<String> clientFeatures;\n+\n+    private Node(\n+        String id, String cluster, @Nullable Map<String, ?> metadata, @Nullable Locality locality,\n+        List<Address> listeningAddresses, String buildVersion, String userAgentName,\n+        @Nullable String userAgentVersion, List<String> clientFeatures) {\n+      this.id = id;\n+      this.cluster = checkNotNull(cluster, \"cluster\");\n+      this.metadata = metadata;\n+      this.locality = locality;\n+      this.listeningAddresses = Collections.unmodifiableList(\n+          checkNotNull(listeningAddresses, \"listeningAddresses\"));\n+      this.buildVersion = checkNotNull(buildVersion, \"buildVersion\");\n+      this.userAgentName = checkNotNull(userAgentName, \"userAgentName\");\n+      this.userAgentVersion = userAgentVersion;\n+      this.clientFeatures = Collections.unmodifiableList(\n+          checkNotNull(clientFeatures, \"clientFeatures\"));\n+    }\n+\n+    static final class Builder {\n+      private String id = \"\";\n+      private String cluster = \"\";\n+      @Nullable\n+      private Map<String, ?> metadata;\n+      @Nullable\n+      private Locality locality;\n+      private final List<Address> listeningAddresses = new ArrayList<>();\n+      private String buildVersion = \"\";\n+      private String userAgentName = \"\";\n+      @Nullable\n+      private String userAgentVersion;\n+      private final List<String> clientFeatures = new ArrayList<>();\n+\n+      private Builder() {\n+      }\n+\n+      Builder setId(String id) {\n+        this.id = checkNotNull(id, \"id\");\n+        return this;\n+      }\n+\n+      Builder setCluster(String cluster) {\n+        this.cluster = checkNotNull(cluster, \"cluster\");\n+        return this;\n+      }\n+\n+      Builder setMetadata(Map<String, ?> metadata) {\n+        this.metadata = checkNotNull(metadata, \"metadata\");\n+        return this;\n+      }\n+\n+      Builder setLocality(Locality locality) {\n+        this.locality = checkNotNull(locality, \"locality\");\n+        return this;\n+      }\n+\n+      Builder addListeningAddresses(Address address) {\n+        listeningAddresses.add(checkNotNull(address, \"address\"));\n+        return this;\n+      }\n+\n+      Builder setBuildVersion(String buildVersion) {\n+        this.buildVersion = checkNotNull(buildVersion, \"buildVersion\");\n+        return this;\n+      }\n+\n+      Builder setUserAgentName(String userAgentName) {\n+        this.userAgentName = checkNotNull(userAgentName, \"userAgentName\");\n+        return this;\n+      }\n+\n+      Builder setUserAgentVersion(String userAgentVersion) {\n+        this.userAgentVersion = checkNotNull(userAgentVersion, \"userAgentVersion\");\n+        return this;\n+      }\n+\n+      Builder addClientFeatures(String clientFeature) {\n+        this.clientFeatures.add(checkNotNull(clientFeature, \"clientFeature\"));\n+        return this;\n+      }\n+\n+      Node build() {\n+        return new Node(\n+            id, cluster, metadata, locality, listeningAddresses, buildVersion, userAgentName,\n+            userAgentVersion, clientFeatures);\n+      }\n+    }\n+\n+    static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    Builder toBuilder() {\n+      Builder builder = new Builder().setId(id).setCluster(cluster);\n+      if (metadata != null) {\n+        builder.setMetadata(metadata);\n+      }\n+      if (locality != null) {\n+        builder.setLocality(locality);\n+      }\n+      builder.listeningAddresses.addAll(listeningAddresses);\n+      return builder;\n+    }\n+\n+    String getId() {\n+      return id;\n+    }\n+\n+    String getCluster() {\n+      return cluster;\n+    }\n+\n+    @Nullable\n+    Map<String, ?> getMetadata() {\n+      return metadata;\n+    }\n+\n+    @Nullable\n+    Locality getLocality() {\n+      return locality;\n+    }\n+\n+    List<Address> getListeningAddresses() {\n+      return listeningAddresses;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Node node = (Node) o;\n+      return Objects.equals(id, node.id)\n+          && Objects.equals(cluster, node.cluster)\n+          && Objects.equals(metadata, node.metadata)\n+          && Objects.equals(locality, node.locality)\n+          && Objects.equals(listeningAddresses, node.listeningAddresses)\n+          && Objects.equals(buildVersion, node.buildVersion)\n+          && Objects.equals(userAgentName, node.userAgentName)\n+          && Objects.equals(userAgentVersion, node.userAgentVersion)\n+          && Objects.equals(clientFeatures, node.clientFeatures);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(\n+          id, cluster, metadata, locality, listeningAddresses, buildVersion, userAgentName,\n+          userAgentVersion, clientFeatures);\n+    }\n+\n+    static Node fromEnvoyProtoNode(io.envoyproxy.envoy.config.core.v3.Node proto) {\n+      Node.Builder builder = newBuilder();\n+      builder.setId(proto.getId());\n+      builder.setCluster(proto.getCluster());\n+      if (proto.hasMetadata()) {\n+        builder.setMetadata(proto.getMetadata().getFieldsMap());\n+      }\n+      if (proto.hasLocality()) {\n+        builder.setLocality(Locality.fromEnvoyProtoLocality(proto.getLocality()));\n+      }\n+      List<io.envoyproxy.envoy.config.core.v3.Address> listeningAddressesList =\n+          proto.getListeningAddressesList();\n+      List<Address> listeningAddresses = new ArrayList<>(listeningAddressesList.size());\n+      for (io.envoyproxy.envoy.config.core.v3.Address addressProto : listeningAddressesList) {\n+        listeningAddresses.add(Address.fromEnvoyProtoAddress(addressProto));\n+      }\n+      builder.listeningAddresses.addAll(listeningAddresses);", "originalCommit": "e119990157f886f935acb27b6607a230d7c4fc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODcxMg==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461218712", "bodyText": "Because we chose to have Builder. addListeningAddresses(Address address) instead of Builder.setListeningAddresses(List<Address>), so builder.listeningAddresses has to be final, otherwise Node.toBuilder().addListeningAddresses() will be broken.\nBecause builder.listeningAddresses is final, we need addAll().\n\"builder.addListeningAddresses(...) while looping through the list\" is also why I chose setListeningAddresses in my first version.", "author": "dapengzhang0", "createdAt": "2020-07-27T23:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ0OA==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461224448", "bodyText": "I don't understand your reasoning...\nWhat's the problem of \"builder.addListeningAddresses(...) while looping through the list\"? You are looping over proto messages to convert Address. What's the problem of calling addListeningAddresses in each iteration?", "author": "voidzcy", "createdAt": "2020-07-27T23:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMDA4OA==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461230088", "bodyText": "I misunderstood you question. You were right. Fixed.", "author": "dapengzhang0", "createdAt": "2020-07-27T23:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMjUxMA==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461202510", "bodyText": "This way of unit testing is wrong. The output of parsing the bootstrap file has changed, you should verify the direct output (aka, EnvoyProtoData.Node) instead of converting it to a proto message. Logics of converting EnvoyProtoData.Node to a proto message should be covered in its own unit tests (which we currently do not have).", "author": "voidzcy", "createdAt": "2020-07-27T22:18:08Z", "path": "xds/src/test/java/io/grpc/xds/BootstrapperTest.java", "diffHunk": "@@ -78,7 +78,7 @@ public void parseBootstrap_validData_singleXdsServer() throws IOException {\n     assertThat(serverInfo.getChannelCredentials().get(1).getConfig()).isNull();\n     assertThat(serverInfo.getChannelCredentials().get(2).getType()).isEqualTo(\"google_default\");\n     assertThat(serverInfo.getChannelCredentials().get(2).getConfig()).isNull();\n-    assertThat(info.getNode()).isEqualTo(\n+    assertThat(info.getNode().toEnvoyProtoNodeV2()).isEqualTo(", "originalCommit": "e119990157f886f935acb27b6607a230d7c4fc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2OTkxNw==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461269917", "bodyText": "Fixed.", "author": "dapengzhang0", "createdAt": "2020-07-28T01:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMjUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzU2OQ==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461203569", "bodyText": "nit: (this is not for your change) This Node is not a constant, so it should not be named in upper-case.", "author": "voidzcy", "createdAt": "2020-07-27T22:20:54Z", "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTestForListener.java", "diffHunk": "@@ -109,7 +109,7 @@\n       \"type.googleapis.com/\"\n           + \"envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\";\n \n-  private static final Node NODE = Node.getDefaultInstance();\n+  private static final Node NODE = Node.newBuilder().build();", "originalCommit": "e119990157f886f935acb27b6607a230d7c4fc00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjIxMA==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461222210", "bodyText": "Why is it not constant?", "author": "dapengzhang0", "createdAt": "2020-07-27T23:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzE5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461223195", "bodyText": "Because it gets modified based on the port passed to it (adding the listening_address etc). I admit I left it as NODE even though it was not a constant (in the sense it does not represent a constant literal), so yes it will be good to change from all upper-case.", "author": "sanjaypujare", "createdAt": "2020-07-27T23:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTg4Ng==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461225886", "bodyText": "Because it gets modified based on the port passed to it (adding the listening_address etc).\n\nAfter the change, NODE is not modified.", "author": "dapengzhang0", "createdAt": "2020-07-27T23:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3MTIxNw==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461371217", "bodyText": "I'd say the Node here is unmodified, but its usage is not as a constant (compare to how the integer PORT is used). So I would not treat it as a constant.\nAlright, this is the test code, not a big issue. I am not gonna be too picky for this small nit.", "author": "voidzcy", "createdAt": "2020-07-28T07:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzU2OQ=="}], "type": "inlineReview"}, {"oid": "403c33c3570c4b586270206d630f3e5c02b5f886", "url": "https://github.com/grpc/grpc-java/commit/403c33c3570c4b586270206d630f3e5c02b5f886", "message": "add missing checkNotNull", "committedDate": "2020-07-27T23:12:59Z", "type": "commit"}, {"oid": "6085ca4bf5e61c265e5ce4874c364bbfeb9bd71b", "url": "https://github.com/grpc/grpc-java/commit/6085ca4bf5e61c265e5ce4874c364bbfeb9bd71b", "message": "fix the way to test Bootstrapper", "committedDate": "2020-07-27T23:32:57Z", "type": "commit"}, {"oid": "4b17bed6feea287e3a441e9ceb6a714133c26f03", "url": "https://github.com/grpc/grpc-java/commit/4b17bed6feea287e3a441e9ceb6a714133c26f03", "message": "add test for Node data conversion", "committedDate": "2020-07-28T01:49:12Z", "type": "commit"}, {"oid": "db25dedb66be2eec82915597a1930a36bfb42a37", "url": "https://github.com/grpc/grpc-java/commit/db25dedb66be2eec82915597a1930a36bfb42a37", "message": "remove unused util function", "committedDate": "2020-07-28T05:50:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NTE2MA==", "url": "https://github.com/grpc/grpc-java/pull/7255#discussion_r461365160", "bodyText": "Indentation?", "author": "voidzcy", "createdAt": "2020-07-28T07:09:54Z", "path": "xds/src/test/java/io/grpc/xds/EnvoyProtoDataTest.java", "diffHunk": "@@ -84,6 +90,95 @@ public void locality_equal() {\n         .testEquals();\n   }\n \n+  @Test\n+  public void convertNode() {\n+    Node node = Node.newBuilder()\n+        .setId(\"node-id\")\n+        .setCluster(\"cluster\")\n+        .setMetadata(\n+            ImmutableMap.of(\n+                \"TRAFFICDIRECTOR_INTERCEPTION_PORT\",\n+                \"ENVOY_PORT\",\n+                \"TRAFFICDIRECTOR_NETWORK_NAME\",\n+                \"VPC_NETWORK_NAME\"))\n+        .setLocality(new Locality(\"region\", \"zone\", \"subzone\"))\n+        .addListeningAddresses(new Address(\"www.foo.com\", 8080))\n+        .addListeningAddresses(new Address(\"www.bar.com\", 8088))\n+        .setBuildVersion(\"v1\")\n+        .setUserAgentName(\"agent\")\n+        .setUserAgentVersion(\"1.1\")\n+        .addClientFeatures(\"feature-1\")\n+        .addClientFeatures(\"feature-2\")\n+        .build();\n+    io.envoyproxy.envoy.config.core.v3.Node nodeProto =\n+        io.envoyproxy.envoy.config.core.v3.Node.newBuilder()\n+            .setId(\"node-id\")\n+            .setCluster(\"cluster\")\n+            .setMetadata(Struct.newBuilder()\n+                .putFields(\"TRAFFICDIRECTOR_INTERCEPTION_PORT\",\n+                    Value.newBuilder().setStringValue(\"ENVOY_PORT\").build())\n+                .putFields(\"TRAFFICDIRECTOR_NETWORK_NAME\",\n+                    Value.newBuilder().setStringValue(\"VPC_NETWORK_NAME\").build()))\n+            .setLocality(\n+                io.envoyproxy.envoy.config.core.v3.Locality.newBuilder()\n+                    .setRegion(\"region\")\n+                    .setZone(\"zone\")\n+                    .setSubZone(\"subzone\"))\n+            .addListeningAddresses(\n+                io.envoyproxy.envoy.config.core.v3.Address.newBuilder()\n+                    .setSocketAddress(\n+                        io.envoyproxy.envoy.config.core.v3.SocketAddress.newBuilder()\n+                            .setAddress(\"www.foo.com\")\n+                            .setPortValue(8080)))\n+            .addListeningAddresses(\n+                io.envoyproxy.envoy.config.core.v3.Address.newBuilder()\n+                    .setSocketAddress(\n+                        io.envoyproxy.envoy.config.core.v3.SocketAddress.newBuilder()\n+                            .setAddress(\"www.bar.com\")\n+                            .setPortValue(8088)))\n+            .setUserAgentName(\"agent\")\n+            .setUserAgentVersion(\"1.1\")\n+            .addClientFeatures(\"feature-1\")\n+            .addClientFeatures(\"feature-2\")\n+            .build();\n+    assertThat(node.toEnvoyProtoNode()).isEqualTo(nodeProto);\n+\n+    @SuppressWarnings(\"deprecation\") // Deprecated v2 API setBuildVersion().", "originalCommit": "db25dedb66be2eec82915597a1930a36bfb42a37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4cfe46cdeace0c5b6c79f16e78276db2f1de45ef", "url": "https://github.com/grpc/grpc-java/commit/4cfe46cdeace0c5b6c79f16e78276db2f1de45ef", "message": "fix indentation", "committedDate": "2020-07-28T15:11:38Z", "type": "commit"}]}