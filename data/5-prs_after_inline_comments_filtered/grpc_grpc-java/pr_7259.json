{"pr_number": 7259, "pr_title": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl", "pr_createdAt": "2020-07-28T22:50:27Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7259", "timeline": [{"oid": "5136d919171d3877be8e3bd7ed6e1a1e68115b9a", "url": "https://github.com/grpc/grpc-java/commit/5136d919171d3877be8e3bd7ed6e1a1e68115b9a", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-28T22:56:18Z", "type": "forcePushed"}, {"oid": "b4d9da475dd304c445fe4eea48de6a27fde6669e", "url": "https://github.com/grpc/grpc-java/commit/b4d9da475dd304c445fe4eea48de6a27fde6669e", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-28T23:00:45Z", "type": "forcePushed"}, {"oid": "f5d2668ed86564a5cb004c6fcdbce66c60dc4609", "url": "https://github.com/grpc/grpc-java/commit/f5d2668ed86564a5cb004c6fcdbce66c60dc4609", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-28T23:18:47Z", "type": "forcePushed"}, {"oid": "36c5605e40ee3a4937339f83baa46a19fe1729da", "url": "https://github.com/grpc/grpc-java/commit/36c5605e40ee3a4937339f83baa46a19fe1729da", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T00:19:29Z", "type": "forcePushed"}, {"oid": "968966731944a11d9d3df35f56c3de0ffaca77db", "url": "https://github.com/grpc/grpc-java/commit/968966731944a11d9d3df35f56c3de0ffaca77db", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T02:08:22Z", "type": "forcePushed"}, {"oid": "42841da9aaf78ad91d0cd45e9f90ea71151511d7", "url": "https://github.com/grpc/grpc-java/commit/42841da9aaf78ad91d0cd45e9f90ea71151511d7", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T04:31:11Z", "type": "forcePushed"}, {"oid": "611b3dd3e38015a392e92b7d83c6222f7ef304b1", "url": "https://github.com/grpc/grpc-java/commit/611b3dd3e38015a392e92b7d83c6222f7ef304b1", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T05:15:23Z", "type": "forcePushed"}, {"oid": "de3a3f494fe74503ff29384fb32af0cec4fa93dd", "url": "https://github.com/grpc/grpc-java/commit/de3a3f494fe74503ff29384fb32af0cec4fa93dd", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T05:30:19Z", "type": "forcePushed"}, {"oid": "3c89c168d19485482d8b3fd3807a8adb0e22efcb", "url": "https://github.com/grpc/grpc-java/commit/3c89c168d19485482d8b3fd3807a8adb0e22efcb", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T17:12:57Z", "type": "forcePushed"}, {"oid": "212a4825d4ab97eba9334a7b824fde6bdf361fec", "url": "https://github.com/grpc/grpc-java/commit/212a4825d4ab97eba9334a7b824fde6bdf361fec", "message": "core: add DelayedClientCall waiting for configSelector", "committedDate": "2020-07-29T18:57:10Z", "type": "forcePushed"}, {"oid": "564c37e1d44c0835bbc3c0f47823fde20e754463", "url": "https://github.com/grpc/grpc-java/commit/564c37e1d44c0835bbc3c0f47823fde20e754463", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl", "committedDate": "2020-08-05T00:04:04Z", "type": "forcePushed"}, {"oid": "de3ac370b898b59372b621d49b32f4e08b5d85fe", "url": "https://github.com/grpc/grpc-java/commit/de3ac370b898b59372b621d49b32f4e08b5d85fe", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl", "committedDate": "2020-08-05T17:25:24Z", "type": "forcePushed"}, {"oid": "ed8dae3bff8788c2ca94d30e835dc42b93d843e6", "url": "https://github.com/grpc/grpc-java/commit/ed8dae3bff8788c2ca94d30e835dc42b93d843e6", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl", "committedDate": "2020-08-05T20:23:44Z", "type": "commit"}, {"oid": "17a301e8daabc08d1965fd9899589661c82444d6", "url": "https://github.com/grpc/grpc-java/commit/17a301e8daabc08d1965fd9899589661c82444d6", "message": "add tests", "committedDate": "2020-08-05T20:49:09Z", "type": "commit"}, {"oid": "17a301e8daabc08d1965fd9899589661c82444d6", "url": "https://github.com/grpc/grpc-java/commit/17a301e8daabc08d1965fd9899589661c82444d6", "message": "add tests", "committedDate": "2020-08-05T20:49:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNDEwMw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r466114103", "bodyText": "Is it better to offload this to the executor?\nfinal List<Runnable> runnables = pendingCalls;\npendingCalls = null;\nexecutor.execute(()-> {\n    for (Runnable pendingCall : runnables) {\n      pendingCall.run();\n    }});", "author": "dapengzhang0", "createdAt": "2020-08-06T02:49:13Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1511,6 +1588,15 @@ private void handleErrorInSyncContext(Status error) {\n       scheduleExponentialBackOffInSyncContext();\n     }\n \n+    private void drainPendingCalls() {\n+      if (pendingCalls != null) {\n+        for (Runnable pendingCall : pendingCalls) {\n+          pendingCall.run();\n+        }\n+        pendingCalls = null;", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyODAxOQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467228019", "bodyText": "Yes, I think we need to. We should really follow DelayedClientSteram's approach: schedule each call separately in the executor and if the CallOptions had an executor, we should use it.", "author": "ejona86", "createdAt": "2020-08-07T19:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNzgwNw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r468927807", "bodyText": "Using callExecutor io.grpc.stub.ClientCallsTest.test blockingUnaryCall2_interruptedWaitsForOnClose is failing. Because the callExecutor is ClientCalls.ThreadlessExecutor and it throws with interrupted exception before assigning inprocess server response observer.  I think the failure is legitimate.", "author": "dapengzhang0", "createdAt": "2020-08-11T23:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMzg4MA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474323880", "bodyText": "Using callExecutor io.grpc.stub.ClientCallsTest.test blockingUnaryCall2_interruptedWaitsForOnClose is failing. Because the callExecutor is ClientCalls.ThreadlessExecutor and it throws with interrupted exception before assigning inprocess server response observer. I think the failure is legitimate.\n\nAs per offline discussion, we want to keep the tests behavior because exiting users' tests may also be relying on the currrent behavior. So we decide to make a hack/optimization at the beginning of newCall().", "author": "dapengzhang0", "createdAt": "2020-08-20T23:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2NzU4OQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r466567589", "bodyText": "nit: get rid of the else and just reduce the indentation of the rest of this method's code?", "author": "ejona86", "createdAt": "2020-08-06T17:21:52Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,18 +907,39 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n-      return new ClientCallImpl<>(\n-          method,\n-          getCallExecutor(callOptions),\n-          callOptions,\n-          transportProvider,\n-          terminated ? null : transportFactory.getScheduledExecutorService(),\n-          channelCallTracer)\n-          .setFullStreamDecompression(fullStreamDecompression)\n-          .setDecompressorRegistry(decompressorRegistry)\n-          .setCompressorRegistry(compressorRegistry);\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      } else {", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2ODc2OA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r466568768", "bodyText": "I don't think the OobChannel should have any service config. It certainly wouldn't share the service config with the parent, right, since it is to some other random server?", "author": "ejona86", "createdAt": "2020-08-06T17:23:14Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1204,7 +1258,8 @@ public ManagedChannel createOobChannel(EquivalentAddressGroup addressGroup, Stri\n               \"OobChannel for \" + addressGroup);\n       final OobChannel oobChannel = new OobChannel(\n           authority, balancerRpcExecutorPool, transportFactory.getScheduledExecutorService(),\n-          syncContext, callTracerFactory.create(), oobChannelTracer, channelz, timeProvider);\n+          syncContext, callTracerFactory.create(), oobChannelTracer, channelz, timeProvider,\n+          configSelector);", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MDAyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467270029", "bodyText": "Right. I thought the OobChannel uses the same lb policy as the parent channel, so it need the same config selector. After a second look, it does not uses any lb policy, just makes use of a given subchannelImpl", "author": "dapengzhang0", "createdAt": "2020-08-07T21:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2ODc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk0NDk2OA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r471944968", "bodyText": "Fixed", "author": "dapengzhang0", "createdAt": "2020-08-18T06:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2ODc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0NzUzMA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467147530", "bodyText": "I don't think we should log at info level. This could be FINE, but we should not log at a default log level when everything is fine, and even when something is broken we try hard not to log.", "author": "ejona86", "createdAt": "2020-08-07T16:34:53Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1408,13 +1465,21 @@ public void run() {\n             }\n             effectiveServiceConfig =\n                 defaultServiceConfig == null ? EMPTY_SERVICE_CONFIG : defaultServiceConfig;\n+            if (resolvedConfigSelector != null) {\n+              channelLogger.log(\n+                  ChannelLogLevel.INFO,", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2Nzg1OQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467267859", "bodyText": "ChannelLogLevel.INFO is java.util.Logger.LogLevel.FINEST, there is no ChannelLogLevel.FINE available.", "author": "dapengzhang0", "createdAt": "2020-08-07T21:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0NzUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTQ5OA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467309498", "bodyText": "That burns me every time.", "author": "ejona86", "createdAt": "2020-08-07T22:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0NzUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0ODYwOQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467148609", "bodyText": "I don't understand why you are assuming the config selector will only exist if there is a service config. Why can't we use the config selector here?\nReally, it seems like we can use the configSelector independent of how the service config validated; the name resolver could be fully aware of the failure, after all, and we have decided we want to allow the name resolver to allow communicating things failing independently. The only time we'd avoid applying the config selector is if lookUpServiceConfig == true, although even in that case it could make sense to call the config selector but throw away the service config result (that could be done easily by wrapping resolvedConfigSelector).", "author": "ejona86", "createdAt": "2020-08-07T16:36:58Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1408,13 +1465,21 @@ public void run() {\n             }\n             effectiveServiceConfig =\n                 defaultServiceConfig == null ? EMPTY_SERVICE_CONFIG : defaultServiceConfig;\n+            if (resolvedConfigSelector != null) {\n+              channelLogger.log(\n+                  ChannelLogLevel.INFO,\n+                  \"Config selector from name resolver discarded by channel settings\");\n+            }\n+            configSelector.set(null);\n           } else {\n             // Try to use config if returned from name resolver\n             // Otherwise, try to use the default config if available\n             if (validServiceConfig != null) {\n               effectiveServiceConfig = validServiceConfig;\n+              configSelector.set(resolvedConfigSelector);\n             } else if (defaultServiceConfig != null) {\n               effectiveServiceConfig = defaultServiceConfig;\n+              configSelector.set(null);", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NzA3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467267077", "bodyText": "The config selector should only work with the service config returned together by the resolver. It shouldn't work with an arbitrarily provided defaultServiceConfig. In the case we choose defaultServiceConfig, we should ignore the config selector.", "author": "dapengzhang0", "createdAt": "2020-08-07T21:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0ODYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzIwNw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467197207", "bodyText": "Could we always discard this key?", "author": "ejona86", "createdAt": "2020-08-07T18:16:14Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1452,22 +1518,29 @@ public void run() {\n                   re);\n             }\n           }\n+          drainPendingCalls();\n \n           Attributes effectiveAttrs = resolutionResult.getAttributes();\n           // Call LB only if it's not shutdown.  If LB is shutdown, lbHelper won't match.\n           if (NameResolverListener.this.helper == ManagedChannelImpl.this.lbHelper) {\n+            Attributes.Builder attrBuilder = effectiveAttrs.toBuilder();\n+            if (configSelector.get() == null) {\n+              attrBuilder.discard(InternalConfigSelector.KEY);\n+            } else {\n+              attrBuilder.set(InternalConfigSelector.KEY, configSelector.get());", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk0NTM1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r471945357", "bodyText": "Yes, you're right.", "author": "dapengzhang0", "createdAt": "2020-08-18T06:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTYxNQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467201615", "bodyText": "Are we assuming that the NameResolver will return before we will go idle? We may want a check in enterIdleMode() to wake things up again if configSelector.get() == INITIAL_PENDING_SELECTOR, like where we check inUseStateAggregator. It would probably be good to just update inUseStateAggregator appropriately; that will also handle this exitIdleMode().", "author": "ejona86", "createdAt": "2020-08-07T18:25:46Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,18 +907,39 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n-      return new ClientCallImpl<>(\n-          method,\n-          getCallExecutor(callOptions),\n-          callOptions,\n-          transportProvider,\n-          terminated ? null : transportFactory.getScheduledExecutorService(),\n-          channelCallTracer)\n-          .setFullStreamDecompression(fullStreamDecompression)\n-          .setDecompressorRegistry(decompressorRegistry)\n-          .setCompressorRegistry(compressorRegistry);\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      } else {\n+        final DelayedClientCall<ReqT, RespT> delayedClientCall = new DelayedClientCall<>(\n+            getCallExecutor(callOptions), scheduledExecutor, callOptions.getDeadline());\n+        final Context context = Context.current();\n+        class TransitionRunnable extends ContextRunnable {\n+          TransitionRunnable() {\n+            super(context);\n+          }\n+\n+          @Override\n+          public void runInContext() {\n+            delayedClientCall.setCall(newClientCall(method, callOptions));\n+          }\n+        }\n+\n+        syncContext.execute(new Runnable() {\n+          @Override\n+          public void run() {\n+            exitIdleMode();", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MDgxMQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467280811", "bodyText": "The purpose of exitIdleMode() here is to start the name resolver. Why should we care if NameResolver returns after channel going idle?", "author": "dapengzhang0", "createdAt": "2020-08-07T21:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMDgxMg==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467310812", "bodyText": "The code buffers calls until the name resolver returns for the first time. We must not let the channel go idle while calls are buffered, as they will be \"stuck\"; the channel would not be trying to connect yet there are outstanding RPCs to service.", "author": "ejona86", "createdAt": "2020-08-07T22:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk0NTUyNA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r471945524", "bodyText": "Fixed.", "author": "dapengzhang0", "createdAt": "2020-08-18T06:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTUxNg==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467209516", "bodyText": "How much do we care about this holding onto cancelled RPCs during startup? It seems we should remove items for RPC cancellation, right?", "author": "ejona86", "createdAt": "2020-08-07T18:43:31Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -207,6 +216,10 @@ public void uncaughtException(Thread t, Throwable e) {\n   // switch to a ConcurrentHashMap.\n   private final Set<InternalSubchannel> subchannels = new HashSet<>(16, .75f);\n \n+  // Must be accessed from syncContext\n+  @Nullable\n+  private Collection<Runnable> pendingCalls = new ArrayList<>();", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzY5Nw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467273697", "bodyText": "Hmm, it might be hard to remove an item when it's cancelled.\nBut at least we should avoid setCall(newClientCall(method, callOptions)) when resolver returns after cancellation. That is easier, we can just check\nfor (Runnable pendingCall : pendingCalls) {\n  if (!peddingCall.isCancelled()) {\n    executor.execute(() -> pendingCall.run());\n  }\n}", "author": "dapengzhang0", "createdAt": "2020-08-07T21:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMTc2MA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467311760", "bodyText": "DelayedClientTransport keeps a LinkedHashSet for the instances to be able to remove them. It doesn't seem that hard to me, although it'd be harder if you keep the collection containing Runnables.\nI don't think setCall(newClientCall(method, callOptions)) is any problem; ClientCallImpl can be safely thrown away and not started. And setCall() does nothing if the call was already.", "author": "ejona86", "createdAt": "2020-08-07T22:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNzIzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467317235", "bodyText": "DelayedClientTransport keeps a LinkedHashSet for the instances to be able to remove them. It doesn't seem that hard to me, although it'd be harder if you keep the collection containing Runnables.\n\nI could use a LinkedHashMap instead. But I might need to copy the pattern from DelayedClientTransport as well.\nclass PendingStream extends DelayedStream {\n  @Override\n  public void cancel(Status reason) {}\n}\n\nI don't think setCall(newClientCall(method, callOptions)) is any problem\n\nMy concern was instantiation of ClientCallImpl objects just waiting for garbage collection.", "author": "dapengzhang0", "createdAt": "2020-08-07T22:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk0MzY5OA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r471943698", "bodyText": "Doing removal for cancelled calls now.", "author": "dapengzhang0", "createdAt": "2020-08-18T06:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTQwNg==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467229406", "bodyText": "I don't see us making an InternalConfigSelector for the provided service config anywhere. The \"normal\" approach is the name resolver will not provide an InternalConfigSelector, and it isn't clear how that is supposed to be handled.", "author": "ejona86", "createdAt": "2020-08-07T19:27:37Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1393,9 +1448,11 @@ public void run() {\n \n           nameResolverBackoffPolicy = null;\n           ConfigOrError configOrError = resolutionResult.getServiceConfig();\n+          InternalConfigSelector resolvedConfigSelector =\n+              resolutionResult.getAttributes().get(InternalConfigSelector.KEY);", "originalCommit": "17a301e8daabc08d1965fd9899589661c82444d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2MjQzNw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467262437", "bodyText": "I don't understand. What does \"normal\" approach do?", "author": "dapengzhang0", "createdAt": "2020-08-07T20:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMzMxMA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467313310", "bodyText": "If a service config provides per-method configuration, right now ServiceConfigInterceptor processes the configuration and applies it to the call via CallOptions. This is quite a different flow. I would have expected the two data flows to be more similar.", "author": "ejona86", "createdAt": "2020-08-07T22:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk0NDExMw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r471944113", "bodyText": "Will be doing that in a separate PR.", "author": "dapengzhang0", "createdAt": "2020-08-18T06:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTQwNg=="}], "type": "inlineReview"}, {"oid": "7aabd153750d6aa2236afe5263433dd407ec2e81", "url": "https://github.com/grpc/grpc-java/commit/7aabd153750d6aa2236afe5263433dd407ec2e81", "message": "get rid of else", "committedDate": "2020-08-10T21:08:45Z", "type": "commit"}, {"oid": "5938653b574af989179c9b734278c64c162fba75", "url": "https://github.com/grpc/grpc-java/commit/5938653b574af989179c9b734278c64c162fba75", "message": "Merge branch 'master' of https://github.com/grpc/grpc-java into delayed-call", "committedDate": "2020-08-10T21:10:53Z", "type": "commit"}, {"oid": "0b18de3080a88f94dcc0253ebfe19672b8e9aae4", "url": "https://github.com/grpc/grpc-java/commit/0b18de3080a88f94dcc0253ebfe19672b8e9aae4", "message": "oob channel should not have config", "committedDate": "2020-08-10T21:24:27Z", "type": "commit"}, {"oid": "5849b1e23710a32e1d383a5a1179312aadbb6d66", "url": "https://github.com/grpc/grpc-java/commit/5849b1e23710a32e1d383a5a1179312aadbb6d66", "message": "always discard config selector attributes", "committedDate": "2020-08-10T21:36:19Z", "type": "commit"}, {"oid": "e5948fa9b746be63fc10b008de5a827bd49a3549", "url": "https://github.com/grpc/grpc-java/commit/e5948fa9b746be63fc10b008de5a827bd49a3549", "message": "run pendingCalls in callExecutor", "committedDate": "2020-08-10T21:56:35Z", "type": "commit"}, {"oid": "1bf2ad2f4aee53edbc3c18ae7c0a071195dd7738", "url": "https://github.com/grpc/grpc-java/commit/1bf2ad2f4aee53edbc3c18ae7c0a071195dd7738", "message": "fix enterIdle and cancellation", "committedDate": "2020-08-18T06:28:24Z", "type": "commit"}, {"oid": "b2cb8822dc120b7d56a017ccc98c80a4199d1b57", "url": "https://github.com/grpc/grpc-java/commit/b2cb8822dc120b7d56a017ccc98c80a4199d1b57", "message": "add TODO", "committedDate": "2020-08-18T06:44:16Z", "type": "commit"}, {"oid": "0d9449cda2858319e3ff34ba0cca857956ff1332", "url": "https://github.com/grpc/grpc-java/commit/0d9449cda2858319e3ff34ba0cca857956ff1332", "message": "fix NPE", "committedDate": "2020-08-18T06:54:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NTE5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472255196", "bodyText": "This is only called from the PendingCallRunnable. cancel() calls setRealCall(), not this method.", "author": "ejona86", "createdAt": "2020-08-18T14:48:17Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,24 +914,90 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      }\n+      final Context context = Context.current();\n+      final PendingCall<ReqT, RespT> pendingCall = new PendingCall<>(context, method, callOptions);\n+\n+      syncContext.execute(new Runnable() {\n+        @Override\n+        public void run() {\n+          exitIdleMode();\n+          if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n+            if (pendingCalls.isEmpty()) {\n+              inUseStateAggregator.updateObjectInUse(RealChannel.this, true);\n+            }\n+            pendingCalls.add(pendingCall);\n+          } else {\n+            pendingCall.pendingCallRunnable.run();\n+          }\n+        }\n+      });\n+      return pendingCall;\n+    }\n+\n+    @Override\n+    public String authority() {\n+      return authority;\n+    }\n+\n+    private final class PendingCall<ReqT, RespT> extends DelayedClientCall<ReqT, RespT> {\n+      final Runnable pendingCallRunnable;\n+\n+      PendingCall(\n+          final Context context, final MethodDescriptor<ReqT, RespT> method,\n+          final CallOptions callOptions) {\n+        super(getCallExecutor(callOptions), scheduledExecutor, callOptions.getDeadline());\n+        class PendingCallRunnable implements Runnable {\n+          @Override\n+          public void run() {\n+            getCallExecutor(callOptions).execute(\n+                new ContextRunnable(context) {\n+                  @Override\n+                  public void runInContext() {\n+                    setCall(newClientCall(method, callOptions));\n+                  }\n+                }\n+            );\n+          }\n+        }\n+\n+        pendingCallRunnable = new PendingCallRunnable();\n+      }\n+\n+      @Override\n+      void setCall(ClientCall<ReqT, RespT> call) {", "originalCommit": "0d9449cda2858319e3ff34ba0cca857956ff1332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwMjkwNg==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472302906", "bodyText": "Should I override setRealCall() or cancel(final Status status, boolean onlyCancelPendingCall)?", "author": "dapengzhang0", "createdAt": "2020-08-18T15:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2NTE5OA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472365198", "bodyText": "Cancel would be ideal, but I don't think it currently makes sense because it might not actually cancel. setRealCall() is called under a lock, so that's no good. I think it may be good to have a new protected void callCancelled() {} noop method for overriding, that is called during cancel(Status, boolean) only if it cancels.", "author": "ejona86", "createdAt": "2020-08-18T17:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTE0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472419143", "bodyText": "Good idea. Done.", "author": "dapengzhang0", "createdAt": "2020-08-18T19:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzAyNQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472257025", "bodyText": "This may be large. We don't want to keep it around after we are no longer queuing calls.", "author": "ejona86", "createdAt": "2020-08-18T14:50:40Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -207,6 +217,9 @@ public void uncaughtException(Thread t, Throwable e) {\n   // switch to a ConcurrentHashMap.\n   private final Set<InternalSubchannel> subchannels = new HashSet<>(16, .75f);\n \n+  // Must be accessed from syncContext\n+  private final Collection<RealChannel.PendingCall<?, ?>> pendingCalls = new LinkedHashSet<>();", "originalCommit": "0d9449cda2858319e3ff34ba0cca857956ff1332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwMDQ4Mg==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472300482", "bodyText": "Yeah, I was trying to clear it but I had NPE 0d9449c. Seems I need introduce a flag.", "author": "dapengzhang0", "createdAt": "2020-08-18T15:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1Nzc1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472357757", "bodyText": "After each remove(), if the set is now empty check the config selector to see if buffering is still occurring. If not, set it to null.", "author": "ejona86", "createdAt": "2020-08-18T17:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTMwMw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472419303", "bodyText": "Done.", "author": "dapengzhang0", "createdAt": "2020-08-18T19:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzAyNQ=="}], "type": "inlineReview"}, {"oid": "df5eb253af6a1de65217b2dc76be38a9c7d8411e", "url": "https://github.com/grpc/grpc-java/commit/df5eb253af6a1de65217b2dc76be38a9c7d8411e", "message": "Use callCancelled() call back to update inUseStateAggregator", "committedDate": "2020-08-18T19:06:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMjg5OQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472422899", "bodyText": "I think you actually had this correct before. We need to wait until the calls are drained (at least the newCall and start() for each call) until we consider this no longer used, as otherwise that opens up a race window where it appears there are no RPCs in progress.", "author": "ejona86", "createdAt": "2020-08-18T19:15:46Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1511,6 +1626,18 @@ private void handleErrorInSyncContext(Status error) {\n       scheduleExponentialBackOffInSyncContext();\n     }\n \n+    // Must run in SynchronizationContext.\n+    private void drainPendingCalls() {\n+      if (pendingCalls == null) {\n+        return;\n+      }\n+      for (RealChannel.PendingCall<?, ?> pendingCall : pendingCalls) {\n+        pendingCall.pendingCallRunnable.run();\n+      }\n+      inUseStateAggregator.updateObjectInUse(pendingCallsInUseObject, false);", "originalCommit": "df5eb253af6a1de65217b2dc76be38a9c7d8411e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzY0NA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472503644", "bodyText": "Yeah, that's subtle. Fixed.", "author": "dapengzhang0", "createdAt": "2020-08-18T21:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMjg5OQ=="}], "type": "inlineReview"}, {"oid": "47d0f4a0050541e1ac2e60d7fda0908601bb3cb1", "url": "https://github.com/grpc/grpc-java/commit/47d0f4a0050541e1ac2e60d7fda0908601bb3cb1", "message": "update inUseAggregator when calls are drained", "committedDate": "2020-08-18T20:29:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472503867", "bodyText": "Every call to executeLater must be followed by a drain() call. I don't see such a call here or in callCancelled()", "author": "ejona86", "createdAt": "2020-08-18T21:28:58Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -962,6 +962,18 @@ public void run() {\n                   @Override\n                   public void runInContext() {\n                     setCall(newClientCall(method, callOptions));\n+                    syncContext.executeLater(new Runnable() {", "originalCommit": "47d0f4a0050541e1ac2e60d7fda0908601bb3cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMjc3OQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472512779", "bodyText": "The IdleTimer or cancelIdleTimer() will drain it. It only need be drained any time before IdleTimer is called.", "author": "dapengzhang0", "createdAt": "2020-08-18T21:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNzEwOA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472517108", "bodyText": "isInUse() is accessed in syncContext. So whenever you check isInUse(), it is drained. Otherwise it will eventually be drained by IdleTimer or cancelIdleTimer()", "author": "dapengzhang0", "createdAt": "2020-08-18T21:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NTAzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r473175035", "bodyText": "IdleTimer: you are saying you are willing to wait for minutes, to hours, or maybe even forever (idle time could be infinite)? No, that's a bad idea.\nisInUse(): That seems neither here nor there. It is called from idle mode logic, and we won't call exitIdleMode() unless we are in idle mode.\nEven if those weren't broken, they are far too hard to verify and audit. Every call to executeLater needs to have a call to drain(). We use executeLater when we are processing within a lock, and then we call drain outside of the lock. I don't understand why we are using executeLater here.", "author": "ejona86", "createdAt": "2020-08-19T16:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwOTcxNA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r473209714", "bodyText": "I don't understand why we are using executeLater here.\n\nMy purpose of using executeLater() is to offload channel's tasks in syncCtx (could be a ton of them) from callExecutor thread. If it's not necessary performance wise, I will revert to execute().", "author": "dapengzhang0", "createdAt": "2020-08-19T17:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1MTg5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r473251895", "bodyText": "The amount of processing in the Runnable is very small. I don't think we should be too concerned. In any case, we should favor correctness over performance so if this was important we'd need to figure out some other approach (which I do see some options available, but given the current inexpensive runnable it would be very hard to show significant improvements).", "author": "ejona86", "createdAt": "2020-08-19T18:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NTk3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r473285972", "bodyText": "Reverted.", "author": "dapengzhang0", "createdAt": "2020-08-19T20:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw=="}], "type": "inlineReview"}, {"oid": "82c740ad920505d1a04e2e0cf4399ce0db41b9c1", "url": "https://github.com/grpc/grpc-java/commit/82c740ad920505d1a04e2e0cf4399ce0db41b9c1", "message": "reuse shared code", "committedDate": "2020-08-18T21:35:30Z", "type": "commit"}, {"oid": "3a9f07609430fb9a810b12b1360b8635f0157d5e", "url": "https://github.com/grpc/grpc-java/commit/3a9f07609430fb9a810b12b1360b8635f0157d5e", "message": "not to use executeLater()", "committedDate": "2020-08-19T19:56:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MTgxNA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474171814", "bodyText": "I think for the moment this also needs to avoid inheriting the config selector. Yes, it is on a connection to a legit backend, but there's actually no LB policy in place. That means it would break xDS reference counting. It doesn't look like this previously used service config, so I think we should leave it config-less for now.", "author": "ejona86", "createdAt": "2020-08-20T17:59:08Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1737,7 +1864,8 @@ public Channel asChannel() {\n       return new SubchannelChannel(\n           subchannel, balancerRpcExecutorHolder.getExecutor(),\n           transportFactory.getScheduledExecutorService(),\n-          callTracerFactory.create());\n+          callTracerFactory.create(),\n+          configSelector);", "originalCommit": "3a9f07609430fb9a810b12b1360b8635f0157d5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyNzk4NQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474327985", "bodyText": "Fixed.", "author": "dapengzhang0", "createdAt": "2020-08-20T23:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MTgxNA=="}], "type": "inlineReview"}, {"oid": "940358d392e2cb3004ed61ab4fdeb175d09f9973", "url": "https://github.com/grpc/grpc-java/commit/940358d392e2cb3004ed61ab4fdeb175d09f9973", "message": "fix InProcessTransport tests server side behavior change", "committedDate": "2020-08-20T23:19:34Z", "type": "commit"}, {"oid": "75fdec9fd225e4c4dcbc2ae8ae34aaf66ac00def", "url": "https://github.com/grpc/grpc-java/commit/75fdec9fd225e4c4dcbc2ae8ae34aaf66ac00def", "message": "use no config for SubchannelImpl.asChannel()", "committedDate": "2020-08-20T23:35:11Z", "type": "commit"}, {"oid": "e17fddc6b181e063692a90776a95a07a3d2b40ae", "url": "https://github.com/grpc/grpc-java/commit/e17fddc6b181e063692a90776a95a07a3d2b40ae", "message": "use null as no config", "committedDate": "2020-08-20T23:39:13Z", "type": "commit"}, {"oid": "e679c7bea027b92ab9813d357e446f62e88aa105", "url": "https://github.com/grpc/grpc-java/commit/e679c7bea027b92ab9813d357e446f62e88aa105", "message": "run in context only for newClientCall", "committedDate": "2020-08-21T00:27:18Z", "type": "commit"}, {"oid": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42", "url": "https://github.com/grpc/grpc-java/commit/3962b7ea4919f14235aedb0cdc0e894bf2a18e42", "message": "remove unneeded final", "committedDate": "2020-08-21T00:37:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMzY3Ng==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474813676", "bodyText": "Why added these lines? It doesn't do anything.", "author": "voidzcy", "createdAt": "2020-08-21T16:51:41Z", "path": "core/src/main/java/io/grpc/internal/DelayedClientCall.java", "diffHunk": "@@ -231,6 +231,10 @@ public void run() {\n       }\n       drainPendingCalls();\n     }\n+    callCancelled();", "originalCommit": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNjkwOQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474836909", "bodyText": "Its extension ManagedChannelImpl.PendingCall is overriding it. See the thread #7259 (comment)", "author": "dapengzhang0", "createdAt": "2020-08-21T17:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMzY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0MDc5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474840791", "bodyText": "Oh, I see.", "author": "voidzcy", "createdAt": "2020-08-21T17:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMzY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTgxNA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474819814", "bodyText": "nit: this doesn't need to be a Runnable, it could just be a method for PendingCall.", "author": "voidzcy", "createdAt": "2020-08-21T17:04:09Z", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,24 +916,113 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        MethodDescriptor<ReqT, RespT> method, CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      }\n+      syncContext.execute(new Runnable() {\n+        @Override\n+        public void run() {\n+          exitIdleMode();\n+        }\n+      });\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        // This is an optimization for the case (typically with InProcessTransport) when name\n+        // resolution result is immediately available at this point. Otherwise, some users'\n+        // tests might observe slight behavior difference from earlier grpc versions.\n+        return newClientCall(method, callOptions);\n+      }\n+      Context context = Context.current();\n+      final PendingCall<ReqT, RespT> pendingCall = new PendingCall<>(context, method, callOptions);\n+      syncContext.execute(new Runnable() {\n+        @Override\n+        public void run() {\n+          if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n+            if (pendingCalls == null) {\n+              pendingCalls = new LinkedHashSet<>();\n+              inUseStateAggregator.updateObjectInUse(pendingCallsInUseObject, true);\n+            }\n+            pendingCalls.add(pendingCall);\n+          } else {\n+            pendingCall.pendingCallRunnable.run();\n+          }\n+        }\n+      });\n+      return pendingCall;\n+    }\n+\n+    @Override\n+    public String authority() {\n+      return authority;\n+    }\n+\n+    private final class PendingCall<ReqT, RespT> extends DelayedClientCall<ReqT, RespT> {\n+      final Runnable pendingCallRunnable;", "originalCommit": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzOTk1NA==", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474839954", "bodyText": "Yes. It was used to be stored in a list of runnables, now it's no longer needed.", "author": "dapengzhang0", "createdAt": "2020-08-21T17:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTgxNA=="}], "type": "inlineReview"}, {"oid": "c44fb60bef9c3f39ec6522ce8e4c2dff9f263132", "url": "https://github.com/grpc/grpc-java/commit/c44fb60bef9c3f39ec6522ce8e4c2dff9f263132", "message": "change PendingCall.pendingCallRunnable to a method", "committedDate": "2020-08-21T17:49:30Z", "type": "commit"}]}