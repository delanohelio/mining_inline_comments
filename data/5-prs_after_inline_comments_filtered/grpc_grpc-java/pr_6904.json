{"pr_number": 6904, "pr_title": "rls: delegating helper for rls child policies", "pr_createdAt": "2020-04-07T17:37:59Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6904", "timeline": [{"oid": "38bd4e27c26df842c8c41169d1fcd2a2d1654be6", "url": "https://github.com/grpc/grpc-java/commit/38bd4e27c26df842c8c41169d1fcd2a2d1654be6", "message": "rls: delegating helper for rls child policies", "committedDate": "2020-04-07T17:37:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MTQwNg==", "url": "https://github.com/grpc/grpc-java/pull/6904#discussion_r406971406", "bodyText": "Is just Helper as return value type sufficient?", "author": "dapengzhang0", "createdAt": "2020-04-10T22:39:42Z", "path": "rls/src/main/java/io/grpc/rls/internal/ChildLoadBalancerHelper.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.ConnectivityState;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * A delegating {@link Helper} for the child load blanacer. The child load-balancer notifies the\n+ * higher level load-blancer with aggregated status instead of each individual child load-blanacer's\n+ * state.\n+ */\n+final class ChildLoadBalancerHelper extends ForwardingLoadBalancerHelper {\n+\n+  private final String target;\n+  private final Helper rlsHelper;\n+  private final SubchannelStateManager subchannelStateManager;\n+  private final SubchannelPicker picker;\n+\n+  private ChildLoadBalancerHelper(\n+      String target,\n+      Helper rlsHelper,\n+      SubchannelStateManager subchannelStateManager,\n+      SubchannelPicker picker) {\n+    this.target = checkNotNull(target, \"target\");\n+    this.rlsHelper = checkNotNull(rlsHelper, \"rlsHelper\");\n+    this.subchannelStateManager = checkNotNull(subchannelStateManager, \"subchannelStateManager\");\n+    this.picker = checkNotNull(picker, \"picker\");\n+  }\n+\n+  @Override\n+  protected Helper delegate() {\n+    return rlsHelper;\n+  }\n+\n+  /**\n+   * Updates balancing state from one or more subchannels tracked in the {@link\n+   * SubchannelStateManager}. The passed picker will be ignored, instead the picker which governs\n+   * many subchannels/pickers will be reported to the parent load-balancer.\n+   */\n+  @Override\n+  public void updateBalancingState(\n+      @Nonnull ConnectivityState newState,\n+      @Nonnull SubchannelPicker unused) {\n+    subchannelStateManager.updateState(target, newState);\n+    super.updateBalancingState(subchannelStateManager.getAggregatedState(), picker);\n+  }\n+\n+  static final class ChildLoadBalancerHelperProvider {\n+    private final Helper helper;\n+    private final SubchannelStateManager subchannelStateManager;\n+    private final SubchannelPicker picker;\n+\n+    ChildLoadBalancerHelperProvider(\n+        Helper helper, SubchannelStateManager subchannelStateManager, SubchannelPicker picker) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      this.subchannelStateManager = checkNotNull(subchannelStateManager, \"subchannelStateManager\");\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    ChildLoadBalancerHelper forTarget(String target) {", "originalCommit": "38bd4e27c26df842c8c41169d1fcd2a2d1654be6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MjA1Ng==", "url": "https://github.com/grpc/grpc-java/pull/6904#discussion_r406992056", "bodyText": "yes, Helper is sufficient and it is usually better choice. I am worried about passing/using wrong helper. There will be another helper class (total 3 helpers - original from channel, this one and the other one not sent yet). Using it as Helper class confused me, so probably it will confuse other people.", "author": "creamsoup", "createdAt": "2020-04-11T00:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MTQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MjI2Mg==", "url": "https://github.com/grpc/grpc-java/pull/6904#discussion_r406972262", "bodyText": "no assertion for subchannelStateManager.getState(target) ?", "author": "dapengzhang0", "createdAt": "2020-04-10T22:43:25Z", "path": "rls/src/test/java/io/grpc/rls/internal/ChildLoadBalancerHelperTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import io.grpc.ConnectivityState;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+@RunWith(JUnit4.class)\n+public class ChildLoadBalancerHelperTest {\n+\n+  private final Helper helper = mock(Helper.class);\n+  private final SubchannelStateManager subchannelStateManager = new SubchannelStateManagerImpl();\n+  private final SubchannelPicker picker = mock(SubchannelPicker.class);\n+  private final ChildLoadBalancerHelperProvider provider =\n+      new ChildLoadBalancerHelperProvider(helper, subchannelStateManager, picker);\n+\n+  @Test\n+  public void childLoadBalancerHelper_shouldReportsSubchannelState() {", "originalCommit": "38bd4e27c26df842c8c41169d1fcd2a2d1654be6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDU1MQ==", "url": "https://github.com/grpc/grpc-java/pull/6904#discussion_r406990551", "bodyText": "hmm i was trying to limit the scope but it sounds fair to add them.", "author": "creamsoup", "createdAt": "2020-04-11T00:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MjI2Mg=="}], "type": "inlineReview"}, {"oid": "d16953f35946f71e79cff6a3ed4cbefbe3890fbe", "url": "https://github.com/grpc/grpc-java/commit/d16953f35946f71e79cff6a3ed4cbefbe3890fbe", "message": "add checking states in test", "committedDate": "2020-04-11T00:34:38Z", "type": "commit"}]}