{"pr_number": 6967, "pr_title": "api, core, services: make ProtoReflectionService interceptor compatible", "pr_createdAt": "2020-04-23T22:03:44Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6967", "timeline": [{"oid": "4f7462d8340083714675957442793870a96ba311", "url": "https://github.com/grpc/grpc-java/commit/4f7462d8340083714675957442793870a96ba311", "message": "Eliminate InternalNotifyOnServerBuilder interface.", "committedDate": "2020-04-23T21:58:16Z", "type": "commit"}, {"oid": "7d8547aa5f8a050789f22288bd59292d654bc2c8", "url": "https://github.com/grpc/grpc-java/commit/7d8547aa5f8a050789f22288bd59292d654bc2c8", "message": "Expose server reference on ServerCall interface.", "committedDate": "2020-04-23T21:58:38Z", "type": "commit"}, {"oid": "19529270d93a81fff621703e6c4ee70ddf66933f", "url": "https://github.com/grpc/grpc-java/commit/19529270d93a81fff621703e6c4ee70ddf66933f", "message": "Add getServer() API implementation to subclasses.", "committedDate": "2020-04-23T22:01:07Z", "type": "commit"}, {"oid": "5b51f87e512d67d1a1de7b3b69ec43a78d372eed", "url": "https://github.com/grpc/grpc-java/commit/5b51f87e512d67d1a1de7b3b69ec43a78d372eed", "message": "Obtain server via a server interceptor.", "committedDate": "2020-04-23T22:01:42Z", "type": "commit"}, {"oid": "9273cdd24397fd30e339d3a66c41a04d9e1af69a", "url": "https://github.com/grpc/grpc-java/commit/9273cdd24397fd30e339d3a66c41a04d9e1af69a", "message": "Eliminate callback for server build.", "committedDate": "2020-04-23T22:02:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTkzNg==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r416975936", "bodyText": "It must have a default implementation. Either return null or UnsupportedOperationException. The documentation should say what the default behavior is when unsupported.", "author": "ejona86", "createdAt": "2020-04-28T23:05:23Z", "path": "api/src/main/java/io/grpc/ServerCall.java", "diffHunk": "@@ -229,4 +229,10 @@ public String getAuthority() {\n    * The {@link MethodDescriptor} for the call.\n    */\n   public abstract MethodDescriptor<ReqT, RespT> getMethodDescriptor();\n+\n+  /**\n+   * Returns the {@link Server} that dispatches the call.\n+   */\n+  // TODO(chengyuanzhang): add ExperimentalApi annotation.\n+  public abstract Server getServer();", "originalCommit": "9273cdd24397fd30e339d3a66c41a04d9e1af69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDAzOQ==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r417700039", "bodyText": "Default to return null.\nSome thoughts about this: isn't the semantics of a ServerCall a call dispatched by a server? Then it's kind of reasonable to always require concrete implementations (the only real one in gRPC is ServerCallImpl).", "author": "voidzcy", "createdAt": "2020-04-30T01:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1NDUyNg==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418154526", "bodyText": "The problem is this is an API anyone can implement, and so wouldn't already be implementing this method. The \"common case\" would return non-null, but that doesn't mean we can guarantee all cases will.", "author": "ejona86", "createdAt": "2020-04-30T16:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1NTAxNA==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418155014", "bodyText": "(And note, it isn't entirely theoretical. Many interceptors implement this API. We just so happen to encourage them to use ForwardingServerCall, but it is possible they don't.)", "author": "ejona86", "createdAt": "2020-04-30T16:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NjA3Mw==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r416976073", "bodyText": "Yeah, we can go ahead and create that.", "author": "ejona86", "createdAt": "2020-04-28T23:05:45Z", "path": "api/src/main/java/io/grpc/ServerCall.java", "diffHunk": "@@ -229,4 +229,10 @@ public String getAuthority() {\n    * The {@link MethodDescriptor} for the call.\n    */\n   public abstract MethodDescriptor<ReqT, RespT> getMethodDescriptor();\n+\n+  /**\n+   * Returns the {@link Server} that dispatches the call.\n+   */\n+  // TODO(chengyuanzhang): add ExperimentalApi annotation.", "originalCommit": "9273cdd24397fd30e339d3a66c41a04d9e1af69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDA4OQ==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r417700089", "bodyText": "Added. It's #6989.", "author": "voidzcy", "createdAt": "2020-04-30T01:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NjA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NzU4Mw==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r416977583", "bodyText": "I don't think it would be obvious that you must use a different reflection service instance for each server. Can we instead add the Server to the Context and handle multiple servers? (WeakHashMap may make sense)", "author": "ejona86", "createdAt": "2020-04-28T23:09:23Z", "path": "services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java", "diffHunk": "@@ -140,6 +150,21 @@ private ServerReflectionIndex updateIndexIfNecessary() {\n     return requestObserver;\n   }\n \n+  private static final class ServerCaptureInterceptor implements ServerInterceptor {\n+    private final AtomicReference<Server> captor;\n+\n+    ServerCaptureInterceptor(AtomicReference<Server> captor) {\n+      this.captor = captor;\n+    }\n+\n+    @Override\n+    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n+        Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n+      captor.set(call.getServer());", "originalCommit": "9273cdd24397fd30e339d3a66c41a04d9e1af69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDc2Ng==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r417700766", "bodyText": "As our offline discussion, added a WeakHashMap to cache indexes for servers. This supports a single reflection service instance to be shared across multiple servers, without recomputing its service index upon each RPC.\nI don't think adding the cache to the Context is necessary. Did I miss anything?", "author": "voidzcy", "createdAt": "2020-04-30T01:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NzU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MzMzNA==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418183334", "bodyText": "No, this AtomicReference doesn't work. This is not thread-safe. If two reflection RPCs come in at the same time, the responses may be for the wrong Server. Add the Server to Context here (not the cache; although adding the cache entry instead would be \"fine\" functionally).", "author": "ejona86", "createdAt": "2020-04-30T17:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NzU4Mw=="}], "type": "inlineReview"}, {"oid": "d26801272485926a6a04e31b3bbb79fc4c1f9c73", "url": "https://github.com/grpc/grpc-java/commit/d26801272485926a6a04e31b3bbb79fc4c1f9c73", "message": "Add default implementation for ServerCall.getServer().", "committedDate": "2020-04-29T21:29:44Z", "type": "commit"}, {"oid": "933d0992993a8573a39e4c9f8292b496e14526a3", "url": "https://github.com/grpc/grpc-java/commit/933d0992993a8573a39e4c9f8292b496e14526a3", "message": "Add ExperimentalApi annotation.", "committedDate": "2020-04-29T21:31:51Z", "type": "commit"}, {"oid": "130adde5b13209a6aa5d14e36b2329c66d9d79d7", "url": "https://github.com/grpc/grpc-java/commit/130adde5b13209a6aa5d14e36b2329c66d9d79d7", "message": "Remove comment requirement for using one reflection service instance per server.", "committedDate": "2020-04-29T23:11:15Z", "type": "commit"}, {"oid": "f50789b05b52a9985c8c2eda5cefc016ba6bfec7", "url": "https://github.com/grpc/grpc-java/commit/f50789b05b52a9985c8c2eda5cefc016ba6bfec7", "message": "Add a simple test case covering a single reflection service instance can be shared for multiple servers.", "committedDate": "2020-04-30T00:53:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1Nzk5MQ==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418157991", "bodyText": "Doh. I missed this before. Of course it was already limited to one server. Sorry for asking for the WeakHashMap, although it is nicer that way. I guess previously we'd have just returned wrong data? Yeah, using the WeakHashMap is much nicer for users.", "author": "ejona86", "createdAt": "2020-04-30T17:04:01Z", "path": "services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java", "diffHunk": "@@ -77,8 +77,7 @@\n   private ProtoReflectionService() {}\n \n   /**\n-   * Creates a instance of {@link ProtoReflectionService}. Intended usage is one instance per", "originalCommit": "130adde5b13209a6aa5d14e36b2329c66d9d79d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1OTIwMQ==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418159201", "bodyText": "@GuardedBy(\"this\")?", "author": "ejona86", "createdAt": "2020-04-30T17:06:06Z", "path": "services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java", "diffHunk": "@@ -68,11 +68,8 @@\n @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2222\")\n public final class ProtoReflectionService extends ServerReflectionGrpc.ServerReflectionImplBase {\n \n-  private final Object lock = new Object();\n-\n+  private final Map<Server, ServerReflectionIndex> serverReflectionIndexes = new WeakHashMap<>();", "originalCommit": "f50789b05b52a9985c8c2eda5cefc016ba6bfec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2NDQ2Mw==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418164463", "bodyText": "Does @GuardedBy checks accessing collection elements? I thought I was just the field itself.", "author": "voidzcy", "createdAt": "2020-04-30T17:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1OTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3MDUyOQ==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418170529", "bodyText": "It would notice most method invocations on the map, like get/put.", "author": "ejona86", "createdAt": "2020-04-30T17:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1OTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3MjA3NA==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418172074", "bodyText": "Oh, good to know. Thanks. Added back.", "author": "voidzcy", "createdAt": "2020-04-30T17:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE1OTIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2MDkwMQ==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418160901", "bodyText": "Why get rid of this lock? We generally do this on purpose to avoid letting a user from interacting with our synchronization.", "author": "ejona86", "createdAt": "2020-04-30T17:08:59Z", "path": "services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java", "diffHunk": "@@ -68,11 +68,8 @@\n @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2222\")\n public final class ProtoReflectionService extends ServerReflectionGrpc.ServerReflectionImplBase {\n \n-  private final Object lock = new Object();", "originalCommit": "f50789b05b52a9985c8c2eda5cefc016ba6bfec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3MjE0Nw==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418172147", "bodyText": "Added back.", "author": "voidzcy", "createdAt": "2020-04-30T17:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2MDkwMQ=="}], "type": "inlineReview"}, {"oid": "acb2a44e07c91d634a59b2e81083af75de240c07", "url": "https://github.com/grpc/grpc-java/commit/acb2a44e07c91d634a59b2e81083af75de240c07", "message": "Use explicit lock", "committedDate": "2020-04-30T17:25:36Z", "type": "commit"}, {"oid": "19fd73030f715f534d53d9dcc671b42172b7b354", "url": "https://github.com/grpc/grpc-java/commit/19fd73030f715f534d53d9dcc671b42172b7b354", "message": "Put server into Context.", "committedDate": "2020-04-30T20:10:00Z", "type": "commit"}, {"oid": "b0d15a6e40eebf727f972d37c4f5345b09690fdb", "url": "https://github.com/grpc/grpc-java/commit/b0d15a6e40eebf727f972d37c4f5345b09690fdb", "message": "Add an internal accessor for accessing the Context key.", "committedDate": "2020-04-30T20:10:23Z", "type": "commit"}, {"oid": "d3935faa87c7bfc19fe601f0b130c97ecfadf818", "url": "https://github.com/grpc/grpc-java/commit/d3935faa87c7bfc19fe601f0b130c97ecfadf818", "message": "Change ProtoReflectionService to obtain Server from Context.", "committedDate": "2020-04-30T20:10:50Z", "type": "commit"}, {"oid": "e4a6b9ba19f297fb85f2e66f740b22ede32b65d8", "url": "https://github.com/grpc/grpc-java/commit/e4a6b9ba19f297fb85f2e66f740b22ede32b65d8", "message": "Revert changes for exposing Server via ServerCall.", "committedDate": "2020-04-30T20:21:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTUyOA==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418289528", "bodyText": "Since this instance is being used as API and not as convenience, the instance needs to be created in io.grpc (not just copied, like here). If we shaded io.grpc.internal this reference would no longer match between implementations.", "author": "ejona86", "createdAt": "2020-04-30T21:07:07Z", "path": "core/src/main/java/io/grpc/internal/InternalServerAccessor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import io.grpc.Context;\n+import io.grpc.Internal;\n+import io.grpc.Server;\n+\n+/**\n+ * Internal accessor for getting the {@link Server} instance inside server RPC {@link Context}.\n+ * This is intended for usage internal to the gRPC team, as it's unclear to us what users would\n+ * need. If you *really* think you need to use this, please file an issue for us to discuss a\n+ * public API.\n+ */\n+@Internal\n+public class InternalServerAccessor {\n+  public static final Context.Key<Server> SERVER_KEY = ServerImpl.SERVER_CONTEXT_KEY;", "originalCommit": "e4a6b9ba19f297fb85f2e66f740b22ede32b65d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNzUzMw==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418307533", "bodyText": "Moved the creation to io.grpc.Server and accessor to io.grpc.", "author": "voidzcy", "createdAt": "2020-04-30T21:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTkyNg==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418289926", "bodyText": "Let's drop the \"really\". I don't see the need for the emphasis, and no real need to scare off users from filing an issue.", "author": "ejona86", "createdAt": "2020-04-30T21:07:58Z", "path": "core/src/main/java/io/grpc/internal/InternalServerAccessor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import io.grpc.Context;\n+import io.grpc.Internal;\n+import io.grpc.Server;\n+\n+/**\n+ * Internal accessor for getting the {@link Server} instance inside server RPC {@link Context}.\n+ * This is intended for usage internal to the gRPC team, as it's unclear to us what users would\n+ * need. If you *really* think you need to use this, please file an issue for us to discuss a", "originalCommit": "e4a6b9ba19f297fb85f2e66f740b22ede32b65d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwODE0Nw==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418308147", "bodyText": "Reworded. Users should refer to the documentation at where the Context key is created (io.grpc.Server). The accessor is just for our own usage.", "author": "voidzcy", "createdAt": "2020-04-30T21:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTkyNg=="}], "type": "inlineReview"}, {"oid": "9a979c5c6d3ecbd3377867424e75fabcaf330030", "url": "https://github.com/grpc/grpc-java/commit/9a979c5c6d3ecbd3377867424e75fabcaf330030", "message": "Move the Context key definition and accessor to io.grpc.", "committedDate": "2020-04-30T21:45:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMzI0OA==", "url": "https://github.com/grpc/grpc-java/pull/6967#discussion_r418313248", "bodyText": "protected leaks it. Using package-private is probably better.", "author": "ejona86", "createdAt": "2020-04-30T21:59:43Z", "path": "api/src/main/java/io/grpc/Server.java", "diffHunk": "@@ -30,6 +30,14 @@\n @ThreadSafe\n public abstract class Server {\n \n+  /**\n+   * Key for accessing the {@link Server} instance inside server RPC {@link Context}. It's\n+   * unclear to us what users would need. If you think you need to use this, please file an\n+   * issue for us to discuss a public API.\n+   */\n+  protected static final Context.Key<Server> SERVER_CONTEXT_KEY =", "originalCommit": "9a979c5c6d3ecbd3377867424e75fabcaf330030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6277cac648680d5de348817a9efd9ddaaaefffb5", "url": "https://github.com/grpc/grpc-java/commit/6277cac648680d5de348817a9efd9ddaaaefffb5", "message": "Makee context key package private.", "committedDate": "2020-04-30T22:00:55Z", "type": "commit"}]}