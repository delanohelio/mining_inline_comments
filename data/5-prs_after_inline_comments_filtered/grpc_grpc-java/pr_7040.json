{"pr_number": 7040, "pr_title": "xds: provide fallback protocol negotiator", "pr_createdAt": "2020-05-13T23:51:03Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7040", "timeline": [{"oid": "46b93ea56f2ae084133fd73687d13e04586e7320", "url": "https://github.com/grpc/grpc-java/commit/46b93ea56f2ae084133fd73687d13e04586e7320", "message": "xds: provide fallback protocol negotiator", "committedDate": "2020-05-13T23:49:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTM2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425289366", "bodyText": "this comment is not correct, remove it?", "author": "creamsoup", "createdAt": "2020-05-14T16:55:49Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -129,8 +139,9 @@ public static XdsServerBuilder forPort(int port) {\n   @Override\n   public Server build() {\n     // note: doing it in build() will overwrite any previously set ProtocolNegotiator", "originalCommit": "46b93ea56f2ae084133fd73687d13e04586e7320", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTkyNw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425289927", "bodyText": "do we want to provide default value? if no default value, probably no fallback instead of throwing NPE?", "author": "creamsoup", "createdAt": "2020-05-14T16:56:38Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -43,6 +46,7 @@\n \n   private final NettyServerBuilder delegate;\n   private final int port;\n+  private ProtocolNegotiator fallbackProtocolNegotiator;", "originalCommit": "46b93ea56f2ae084133fd73687d13e04586e7320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzgxNw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425357817", "bodyText": "Yes, I was rethinking null check in build() as well. Providing a default for fallback doesn't sound right: they both have similar meaning:  fall back to something or default to something.  So why provide a default for fallback? In that case no fallback is the way to go - which means failing the connection if the Sds PN fails. Is that right?", "author": "sanjaypujare", "createdAt": "2020-05-14T18:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3NTk1Nw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425375957", "bodyText": "yes, i think that is natural behavior or at least better than not able to construct XdsServer.\nno fallback PN -> no fallback when SdsPN fails.", "author": "creamsoup", "createdAt": "2020-05-14T19:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425292930", "bodyText": "null check here would be nice.", "author": "creamsoup", "createdAt": "2020-05-14T17:01:25Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -120,6 +124,12 @@ public XdsServerBuilder intercept(ServerInterceptor interceptor) {\n     return this;\n   }\n \n+  public XdsServerBuilder fallbackProtocolNegotiator(\n+      ProtocolNegotiator fallbackProtocolNegotiator) {\n+    this.fallbackProtocolNegotiator = fallbackProtocolNegotiator;", "originalCommit": "46b93ea56f2ae084133fd73687d13e04586e7320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxMzc5Mw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425513793", "bodyText": "Hmmm, on second thoughts since we are making fallbackProtocolNegotiator optional (in the builder) if somebody wants to \"nullify\" the previously set value, shouldn't we allow null here?", "author": "sanjaypujare", "createdAt": "2020-05-15T01:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NjEwNg==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425546106", "bodyText": "that's little bit subjective. but setting and unsetting on the same builder is weird. calling this has intention of setting Fallback PN, so it is okay to not accept null imo.", "author": "creamsoup", "createdAt": "2020-05-15T03:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODQ0MA==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425568440", "bodyText": "But I can call it multiple times with different values - the last value wins. It doesn't make sense to disallow null in that case. If I need to clear the previously set value in a different piece of code (over which I have no control) then the only thing I can do is to call this with null assuming it is allowed.", "author": "sanjaypujare", "createdAt": "2020-05-15T05:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTk0Mg==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425925942", "bodyText": "i don't really care which way you use because both has pros and cons. iirc, this topic was mentioned in the api meeting briefly.\nmake sure this is described in the javadoc.", "author": "creamsoup", "createdAt": "2020-05-15T16:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MTI1Mw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r426081253", "bodyText": "We normally allow people to \"undo\" changes to the builder, so if null is okay, allowing null is fine. But I'd just remind you not to send too much effort on this part of the API because it will be replaced.", "author": "ejona86", "createdAt": "2020-05-15T22:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTI4MA==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r426215280", "bodyText": "null is okay so I am going to allow null to override a previous non-null value (and mention so in javadocs)", "author": "sanjaypujare", "createdAt": "2020-05-17T04:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNTAyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425305029", "bodyText": "i am not sure what this is testing. it provides fallbackPN that throws \"no fallback negotiation\" exception?", "author": "creamsoup", "createdAt": "2020-05-14T17:20:02Z", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -87,6 +92,34 @@ public void plaintextClientServer() throws IOException, URISyntaxException {\n     assertThat(unaryRpc(\"buddy\", blockingStub)).isEqualTo(\"Hello buddy\");\n   }\n \n+  @Test\n+  public void fallbackProtocolNegotiator_expectException() throws IOException, URISyntaxException {", "originalCommit": "46b93ea56f2ae084133fd73687d13e04586e7320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NTYzNA==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425365634", "bodyText": "The test makes sure the fallback PN is invoked in an easy way. I can see the contradiction of the fallback PN throwing exception saying \"no fallback exception\". I can change the text message. In connection with the other thread: if fallback PN is now optional, I can use the same fallback PN (as internal default) that throws an exception? Or else the HandlerPickerHandler can generate an error when there is no fallback PN. Which is better?", "author": "sanjaypujare", "createdAt": "2020-05-14T19:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3OTE2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425379166", "bodyText": "mock PN can be better fit here. verify(mockFallbackPn).newHandler();.\nThe thrown exception should be able to converted to meaningful Status, probably UNAVAILABLE. the conversion logic is in WriteBufferingAndExceptionHandler#exceptionCaught. you can do it in default FallbackPN or HandlerPickerHandler whichever makes more sense.", "author": "creamsoup", "createdAt": "2020-05-14T19:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTUwMQ==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r426215501", "bodyText": "Just used null and verified that server is shutdown because of missing fallback PN", "author": "sanjaypujare", "createdAt": "2020-05-17T04:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNTAyOQ=="}], "type": "inlineReview"}, {"oid": "2c30db2de23b53795d9942671dae66296cd9b20a", "url": "https://github.com/grpc/grpc-java/commit/2c30db2de23b53795d9942671dae66296cd9b20a", "message": "xds: address review comments", "committedDate": "2020-05-15T05:56:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNjM3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425926377", "bodyText": "those are @Nullable (anything accept fallbackProtocolNegotiator, there are quite a few of those)", "author": "creamsoup", "createdAt": "2020-05-15T16:49:47Z", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -232,12 +236,15 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n   public static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n \n     private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+    private final ProtocolNegotiator fallbackProtocolNegotiator;\n \n     /** Constructor. */\n     @VisibleForTesting\n-    public ServerSdsProtocolNegotiator(XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+    public ServerSdsProtocolNegotiator(XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+        ProtocolNegotiator fallbackProtocolNegotiator) {", "originalCommit": "2c30db2de23b53795d9942671dae66296cd9b20a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzNDg3OA==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r425934878", "bodyText": "no reply for my previous comment. consider mock here. you can verify newHandler is called or not. this is cleaner and we can remove L316-344.", "author": "creamsoup", "createdAt": "2020-05-15T17:05:48Z", "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -239,10 +245,11 @@ public SocketAddress localAddress() {\n   }\n \n   @Test\n-  public void serverSdsHandler_nullTlsContext_expectPlaintext() throws IOException {\n+  public void serverSdsHandler_nullTlsContext_expectFallbackProtocolNegotiator() {\n     SdsProtocolNegotiators.HandlerPickerHandler handlerPickerHandler =\n         new SdsProtocolNegotiators.HandlerPickerHandler(\n-            grpcHandler, /* xdsClientWrapperForServerSds= */ null);\n+            grpcHandler, /* xdsClientWrapperForServerSds= */ null,\n+            new FallbackProtocolNegotiator());", "originalCommit": "2c30db2de23b53795d9942671dae66296cd9b20a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NDU5OQ==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r426054599", "bodyText": "Your previous comment was for a different file/test XdsSdsClientServerTest#nullFallbackProtocolNegotiator_expectException I renamed the test and also changed it. Also that test verifies the server closes so the clients can't connect any more.\nFor this one: yes, I will look into using a mock - I think it should work.", "author": "sanjaypujare", "createdAt": "2020-05-15T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzNDg3OA=="}], "type": "inlineReview"}, {"oid": "77b3e2cb7ec6cd1fe868973f7f4e652f079804fb", "url": "https://github.com/grpc/grpc-java/commit/77b3e2cb7ec6cd1fe868973f7f4e652f079804fb", "message": "xds: address review comments - 2", "committedDate": "2020-05-17T04:53:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NTgyNw==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r426765827", "bodyText": "nit: this comment (ed code?) is confusing", "author": "creamsoup", "createdAt": "2020-05-18T16:53:27Z", "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -239,10 +244,14 @@ public SocketAddress localAddress() {\n   }\n \n   @Test\n-  public void serverSdsHandler_nullTlsContext_expectPlaintext() throws IOException {\n+  public void serverSdsHandler_nullTlsContext_expectFallbackProtocolNegotiator() {\n+    ChannelHandler mockChannelHandler = mock(ChannelHandler.class);\n+    ProtocolNegotiator mockProtocolNegotiator = mock(ProtocolNegotiator.class);\n+    when(mockProtocolNegotiator.newHandler(grpcHandler)).thenReturn(mockChannelHandler);\n     SdsProtocolNegotiators.HandlerPickerHandler handlerPickerHandler =\n         new SdsProtocolNegotiators.HandlerPickerHandler(\n-            grpcHandler, /* xdsClientWrapperForServerSds= */ null);\n+            grpcHandler, /* xdsClientWrapperForServerSds= */ null,\n+            mockProtocolNegotiator);  // new FallbackProtocolNegotiator()", "originalCommit": "77b3e2cb7ec6cd1fe868973f7f4e652f079804fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2ODg4NQ==", "url": "https://github.com/grpc/grpc-java/pull/7040#discussion_r426768885", "bodyText": "oops, good catch. Will fix", "author": "sanjaypujare", "createdAt": "2020-05-18T16:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NTgyNw=="}], "type": "inlineReview"}, {"oid": "3e553607b5a99886106df81a3dbffb95ef9cfcde", "url": "https://github.com/grpc/grpc-java/commit/3e553607b5a99886106df81a3dbffb95ef9cfcde", "message": "xds: remove commented code", "committedDate": "2020-05-18T17:00:09Z", "type": "commit"}]}