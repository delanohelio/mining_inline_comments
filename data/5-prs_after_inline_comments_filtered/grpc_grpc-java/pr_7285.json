{"pr_number": 7285, "pr_title": "xds: add support for cert-providers to bootstrap file", "pr_createdAt": "2020-08-04T15:32:38Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7285", "timeline": [{"oid": "4bd3be216fb0804459fabbb5dfc4d69b4b7c5a00", "url": "https://github.com/grpc/grpc-java/commit/4bd3be216fb0804459fabbb5dfc4d69b4b7c5a00", "message": "xds: add support for cert-providers to bootstrap file", "committedDate": "2020-08-04T15:31:35Z", "type": "commit"}, {"oid": "e1e30db91af9942fc8c2428b06bf6f67f69a7060", "url": "https://github.com/grpc/grpc-java/commit/e1e30db91af9942fc8c2428b06bf6f67f69a7060", "message": "change cert-providers to certificate-providers", "committedDate": "2020-08-04T15:48:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465259926", "bodyText": "Do you really just want to keep the content of certificate_providers as a blob? Ideally, we could parse it into an object explicitly. If design has a clear definition for what a certificate provider configuration would look like, then we should parse each field instead of dump them into a map, which is hard for consumers of certificate provider configurations to read off.", "author": "voidzcy", "createdAt": "2020-08-04T18:52:52Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -160,7 +160,8 @@ static BootstrapInfo parseConfig(String rawData) throws IOException {\n     nodeBuilder.setUserAgentVersion(buildVersion.getImplementationVersion());\n     nodeBuilder.addClientFeatures(CLIENT_FEATURE_DISABLE_OVERPROVISIONING);\n \n-    return new BootstrapInfo(servers, nodeBuilder.build());\n+    Map<String, ?> certProviders = JsonUtil.getObject(rawBootstrap, \"certificate_providers\");", "originalCommit": "e1e30db91af9942fc8c2428b06bf6f67f69a7060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwMTc2NA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465301764", "bodyText": "So this one proposes the changes to bootstrap https://docs.google.com/document/d/1k9nnfZXCyuvWi3MsLSStPMGAyf-UEw2Mvso0ZxDTAG4/edit?ts=5f244687# - which says\n\nA new field will be added to the bootstrap file which will contain a map of CertificateProvider plugin instances (a plugin instance is a unique instantiation of a CertificateProvider with a specific configuration). The key to this map will be an opaque name (agreed upon by the client and the control plane) and the value will be the CertificateProvider name and configuration.\n\nSo the new field is \"certificate_providers\" and the value (JSON object) represents a map of Certificate-provider instance names to (plugin-name + configs) tuple. e.g.\n{\n    \"gcp_id\": {\n        \"plugin_name\": \"meshca\",\n        \"config\": { ...MeshCA config... }\n    },\n    \"local_file\": {\n        \"plugin_name\": \"file_watcher\",\n        \"config\": { ...FileWatcher config... }\n    }\n}\n\nI will update this PR to represent this structure. Thanks", "author": "sanjaypujare", "createdAt": "2020-08-04T20:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwODE5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465308195", "bodyText": "Is there a definition for what a certificate provider plugin's config would look like? I saw that is a big blob. Hopefully we could have a Java object to represent that.\nA parsed CertificateProvider will roughly look like:\nclass CertificateProvider {\n  private final String name;\n  private final String pluginName;\n  private final Config config;  // To be defined.\n\n  // Getters.\n}", "author": "voidzcy", "createdAt": "2020-08-04T20:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxMTU4Mw==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465311583", "bodyText": "Is there a definition for what a certificate provider plugin's config would look like? I saw that is a big blob. Hopefully we could have a Java object to represent that.\nA parsed CertificateProvider will roughly look like:\nclass CertificateProvider {\n  private final String name;\n  private final String pluginName;\n  private final Config config;  // To be defined.\n\n  // Getters.\n}\n\n\nNo, take the name out and call it an instanceName. So one should be able to get the \"pluginName\" and \"config\" by looking up the instanceName. Also the Config is just a representation of JSON snippet so a Map<String, ?> should work.", "author": "sanjaypujare", "createdAt": "2020-08-04T20:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NDQxOA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465344418", "bodyText": "fixed as per the design described.", "author": "sanjaypujare", "createdAt": "2020-08-04T21:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NzU1NA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465347554", "bodyText": "Also the Config is just a representation of JSON snippet so a Map<String, ?> should work.\n\nDo you really want the config to be opaque? A consumer of the certificate provider config would suffer from reading this Map<String, ?>. It needs to take steps as a parser to go inside the map, do casting and populate pieces out, which really should be done by parser.", "author": "voidzcy", "createdAt": "2020-08-04T21:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MTc5OA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465351798", "bodyText": "Agreed. But the current spec just dictates a JSON bob as the value of config. Also the CertificateProvider APIs are going to consume a generic Map as the JSON representation of a config. So converting this to a Java class is counter-productive.\n\"config\" : { ...}", "author": "sanjaypujare", "createdAt": "2020-08-04T21:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTkyNg=="}], "type": "inlineReview"}, {"oid": "a4d1bfbf4340c547afdd484020cb88ce0836b183", "url": "https://github.com/grpc/grpc-java/commit/a4d1bfbf4340c547afdd484020cb88ce0836b183", "message": "address review comments", "committedDate": "2020-08-04T21:35:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODc2MA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465348760", "bodyText": "Use JsonUtil.getObject(...). Same for config.", "author": "voidzcy", "createdAt": "2020-08-04T21:46:47Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -160,7 +161,32 @@ static BootstrapInfo parseConfig(String rawData) throws IOException {\n     nodeBuilder.setUserAgentVersion(buildVersion.getImplementationVersion());\n     nodeBuilder.addClientFeatures(CLIENT_FEATURE_DISABLE_OVERPROVISIONING);\n \n-    return new BootstrapInfo(servers, nodeBuilder.build());\n+    Map<String, ?> certProvidersBlob = JsonUtil.getObject(rawBootstrap, \"certificate_providers\");\n+    Map<String, CertificateProviderInfo> certProviders = null;\n+    if (certProvidersBlob != null) {\n+      certProviders = new HashMap<>(certProvidersBlob.size());\n+      for (Map.Entry<String, ?> entry : certProvidersBlob.entrySet()) {\n+        String name = entry.getKey();\n+        Object value = entry.getValue();", "originalCommit": "a4d1bfbf4340c547afdd484020cb88ce0836b183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MTQxMg==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465371412", "bodyText": "done. Also added more tests related to these.", "author": "sanjaypujare", "createdAt": "2020-08-04T22:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0OTYyNA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465349624", "bodyText": "You would probably want this to be public (and internal).", "author": "voidzcy", "createdAt": "2020-08-04T21:48:47Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -225,6 +251,29 @@ String getServerUri() {\n     }\n   }\n \n+  /**\n+   * Data class containing Certificate provider information: the plugin-name and an opaque\n+   * Map that represents the config for that plugin.\n+   */\n+  @Immutable\n+  static class CertificateProviderInfo {", "originalCommit": "a4d1bfbf4340c547afdd484020cb88ce0836b183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MTQ0OQ==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465371449", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-08-04T22:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0OTYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1NDYzMw==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465354633", "bodyText": "nit: mark Nullable.", "author": "voidzcy", "createdAt": "2020-08-04T22:00:42Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -233,11 +282,14 @@ String getServerUri() {\n   public static class BootstrapInfo {\n     private List<ServerInfo> servers;\n     private final Node node;\n+    private final Map<String, CertificateProviderInfo> certProviders;", "originalCommit": "a4d1bfbf4340c547afdd484020cb88ce0836b183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MTQ3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465371477", "bodyText": "done", "author": "sanjaypujare", "createdAt": "2020-08-04T22:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1NDYzMw=="}], "type": "inlineReview"}, {"oid": "78b7c73a2c528fd104cfa1ca19fa0ed4dde4837b", "url": "https://github.com/grpc/grpc-java/commit/78b7c73a2c528fd104cfa1ca19fa0ed4dde4837b", "message": "address review comments-2", "committedDate": "2020-08-04T22:43:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465379835", "bodyText": "Since this is the parsing logic, the input (the boostrap JSON file) can contain anything, it needs to be defensive. You should always check if the retrieved result exists, a proper exception should be thrown if not. All exceptions should be checked, runtime exceptions will be a surprise.", "author": "voidzcy", "createdAt": "2020-08-04T23:10:03Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -165,24 +167,12 @@ static BootstrapInfo parseConfig(String rawData) throws IOException {\n     Map<String, CertificateProviderInfo> certProviders = null;\n     if (certProvidersBlob != null) {\n       certProviders = new HashMap<>(certProvidersBlob.size());\n-      for (Map.Entry<String, ?> entry : certProvidersBlob.entrySet()) {\n-        String name = entry.getKey();\n-        Object value = entry.getValue();\n-        if (!(value instanceof Map)) {\n-          throw new IOException(\n-              \"Invalid bootstrap: invalid 'certificate_providers' entry for \" + name);\n-        }\n-        @SuppressWarnings(\"unchecked\")\n-        Map<String, ?> valueMap = (Map<String, ?>) value;\n-        Object pluginName = valueMap.get(\"plugin_name\");\n-        Object config = valueMap.get(\"config\");\n-        if (!(pluginName instanceof String) || !(config instanceof Map)) {\n-          throw new IOException(\n-              \"Invalid bootstrap: invalid 'certificate_providers' entry for \" + name);\n-        }\n-        @SuppressWarnings(\"unchecked\")\n+      for (String name : certProvidersBlob.keySet()) {\n+        Map<String, ?> valueMap = JsonUtil.getObject(certProvidersBlob, name);\n+        String pluginName = JsonUtil.getString(valueMap, \"plugin_name\");", "originalCommit": "78b7c73a2c528fd104cfa1ca19fa0ed4dde4837b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MTMyOA==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465391328", "bodyText": "But JsonUtil.getString(), JsonUtil.getObject() etc (which is being used in parseConfig and you suggested I use) throw ClassCastException which is a RuntimeException so how is this different? Presumably you are talking about checkNotNull later inside new CertificateProviderInfo. I can have checkNotNull or checkArgument with a better message if that works.", "author": "sanjaypujare", "createdAt": "2020-08-04T23:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NDI5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465394291", "bodyText": "String pluginName = JsonUtil.getString(valueMap, \"plugin_name\");\nif (pluginName == null) {\n  throw new IOException(\"a descriptive string\");\n}\n\nThis is the defensive programming pattern I am talking about. This catches the following JSON file content error:\n    \"gcp_id\": {\n        \"config\": { ...MeshCA config... }\n    }", "author": "voidzcy", "createdAt": "2020-08-04T23:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDQzMQ==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465400431", "bodyText": "In the following example:\n\"gcp_id\": {\n        \"plugin_name\": 123,\n        \"config\": { ...MeshCA config... }\n    }\n\nYou'll get a ClassCastException from JsonUtil.getString(valueMap, \"plugin_name\") and that's a RuntimeException and not an IOException. Do you think that one needs to be addressed as well? parseConfig is full of such cases and they will all need to be fixed (or have a common catch clause at the end to create a wrapper IOException around ClassCastException).", "author": "sanjaypujare", "createdAt": "2020-08-05T00:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDM3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465404372", "bodyText": "parseConfig is full of such cases and they will all need to be fixed (or have a common catch clause at the end to create a wrapper IOException around ClassCastException).\n\nYes, I think that could be ideal and this makes readBootstrap() have a better API guarantee.", "author": "voidzcy", "createdAt": "2020-08-05T00:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODE2Mg==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465408162", "bodyText": "Yes, I think that could be ideal and this makes readBootstrap() have a better API guarantee.\n\nI can do that in this PR if that's what is blocking this PR from your point of view. Or I can do that in a separate PR. Lmk", "author": "sanjaypujare", "createdAt": "2020-08-05T00:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMjEzNg==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465412136", "bodyText": "Up to you, that's very picky for error handlings. Here, my main point is regarding the API usage. From an API's perspective JsonUtil.getString may give you null, so callers may want to handle that properly.", "author": "voidzcy", "createdAt": "2020-08-05T01:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNDA4Nw==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465434087", "bodyText": "But what I am saying is there is no qualitative difference between a missing value for \"plugin_name\" and a value of wrong type for \"plugin_name\". Currently in both cases they generate a RuntimeException (NullPointerException and ClassCastException) which is consistent. If you are thinking of API guarantees all these should be fixed instead of just selectively doing it for the new code in this PR. Do you agree?", "author": "sanjaypujare", "createdAt": "2020-08-05T02:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0Mzg0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7285#discussion_r465443843", "bodyText": "With your current implementation, if fields like \"plugin_name\" is missing, the application will be panic with a NullPointerException pointing that your code has a bug.\nFor those ClassCastException cases, we are still able to see from the exception that the JSON file is malformed.", "author": "voidzcy", "createdAt": "2020-08-05T03:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTgzNQ=="}], "type": "inlineReview"}, {"oid": "1c3b88fc7dd9654e16d4325b623264356a1e6c44", "url": "https://github.com/grpc/grpc-java/commit/1c3b88fc7dd9654e16d4325b623264356a1e6c44", "message": "address review comments-3", "committedDate": "2020-08-05T04:34:33Z", "type": "commit"}, {"oid": "8fa3d67504f78cb7ec22a6a311fd6a9ce6aab64a", "url": "https://github.com/grpc/grpc-java/commit/8fa3d67504f78cb7ec22a6a311fd6a9ce6aab64a", "message": "address review comments-4", "committedDate": "2020-08-05T05:09:12Z", "type": "commit"}]}