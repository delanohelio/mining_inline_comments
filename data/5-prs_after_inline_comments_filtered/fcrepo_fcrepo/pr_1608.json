{"pr_number": 1608, "pr_title": "doesResourceExist function", "pr_createdAt": "2020-01-22T17:57:18Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1608", "timeline": [{"oid": "124319bdf983a1290d2940ab096705cd1a3c5a1e", "url": "https://github.com/fcrepo/fcrepo/commit/124319bdf983a1290d2940ab096705cd1a3c5a1e", "message": "GetResource service", "committedDate": "2020-01-22T17:56:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3NTg4Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370275883", "bodyText": "ResourceFactory has getResource which includes logic for determining what interaction model a resource uses and initializing the correct FedoraResource class based off it:\nhttps://github.com/fcrepo4/fcrepo4/blob/master/fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/ResourceFactoryImpl.java#L84\nSo I think you can call that rather than going through getHeaders", "author": "bbpennel", "createdAt": "2020-01-23T18:13:12Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/GetResourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Instant;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.services.GetResourceService;\n+import org.fcrepo.kernel.impl.models.BinaryImpl;\n+import org.fcrepo.kernel.impl.models.ContainerImpl;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Implementation to check for or get FedoraResources from storage.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+@Component\n+public class GetResourceServiceImpl implements GetResourceService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager psManager;\n+\n+    @Inject\n+    private ResourceFactory rsFactory;\n+\n+    @Override\n+    public FedoraResource getResource(final Transaction transaction, final String fedoraId, final Instant version) {\n+        final PersistentStorageSession psSession;\n+        if (transaction == null) {\n+            psSession = psManager.getReadOnlySession();\n+        } else {\n+            psSession = psManager.getSession(transaction.getId());\n+        }\n+        try {\n+            final ResourceHeaders headers = psSession.getHeaders(fedoraId, version);", "originalCommit": "124319bdf983a1290d2940ab096705cd1a3c5a1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3Nzg0NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370277844", "bodyText": "I don't think we want to commit the session if the transaction existed before this service was called, otherwise it might prematurely commit changes. Doesn't seem like we have a commitIfShortLived equivalent for PersistentStorageSession, so might have to rely on checking if transaction was null or not.", "author": "bbpennel", "createdAt": "2020-01-23T18:17:20Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/GetResourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Instant;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.services.GetResourceService;\n+import org.fcrepo.kernel.impl.models.BinaryImpl;\n+import org.fcrepo.kernel.impl.models.ContainerImpl;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Implementation to check for or get FedoraResources from storage.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+@Component\n+public class GetResourceServiceImpl implements GetResourceService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager psManager;\n+\n+    @Inject\n+    private ResourceFactory rsFactory;\n+\n+    @Override\n+    public FedoraResource getResource(final Transaction transaction, final String fedoraId, final Instant version) {\n+        final PersistentStorageSession psSession;\n+        if (transaction == null) {\n+            psSession = psManager.getReadOnlySession();\n+        } else {\n+            psSession = psManager.getSession(transaction.getId());\n+        }\n+        try {\n+            final ResourceHeaders headers = psSession.getHeaders(fedoraId, version);\n+            final FedoraResource resource;\n+            if (headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                resource = new BinaryImpl(fedoraId, transaction, psManager, rsFactory);\n+            } else {\n+                resource = new ContainerImpl(fedoraId, transaction, psManager, rsFactory);\n+            }\n+            // Commit session so it doesn't hang around.\n+            psSession.commit();", "originalCommit": "124319bdf983a1290d2940ab096705cd1a3c5a1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4MDIxMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370280213", "bodyText": "Also, we should probably commit in a finally block, otherwise we might leak sessions when exceptions occur", "author": "bbpennel", "createdAt": "2020-01-23T18:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3Nzg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0NTYzMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370645631", "bodyText": "The commit here is on a persistent storage session we just created. Would that not mean nothing else has occurred in this session and should not cause trouble? I'm a little unclear about how the various sessions work so i could be missing something.", "author": "whikloj", "createdAt": "2020-01-24T13:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3Nzg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxMDExNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370710115", "bodyText": "I have moved the commit to a finally block, but as it also can throw an exception I have had to squash and log that exception. Not sure if that is an acceptable trade-off.", "author": "whikloj", "createdAt": "2020-01-24T16:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3Nzg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczNTc0MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370735741", "bodyText": "Since it retrieves a persistent session using the transaction when present, it could grab an ongoing modification session. What you have here looks good to me, it failing to close the temporary session doesn't really impact that rest of the operation, so logging is fine.", "author": "bbpennel", "createdAt": "2020-01-24T16:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3Nzg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3OTM5NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370279395", "bodyText": "Same thing as in the other method", "author": "bbpennel", "createdAt": "2020-01-23T18:20:21Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/GetResourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Instant;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.kernel.api.services.GetResourceService;\n+import org.fcrepo.kernel.impl.models.BinaryImpl;\n+import org.fcrepo.kernel.impl.models.ContainerImpl;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentStorageException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Implementation to check for or get FedoraResources from storage.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+@Component\n+public class GetResourceServiceImpl implements GetResourceService {\n+\n+    @Inject\n+    private PersistentStorageSessionManager psManager;\n+\n+    @Inject\n+    private ResourceFactory rsFactory;\n+\n+    @Override\n+    public FedoraResource getResource(final Transaction transaction, final String fedoraId, final Instant version) {\n+        final PersistentStorageSession psSession;\n+        if (transaction == null) {\n+            psSession = psManager.getReadOnlySession();\n+        } else {\n+            psSession = psManager.getSession(transaction.getId());\n+        }\n+        try {\n+            final ResourceHeaders headers = psSession.getHeaders(fedoraId, version);\n+            final FedoraResource resource;\n+            if (headers.getInteractionModel().equals(NON_RDF_SOURCE.toString())) {\n+                resource = new BinaryImpl(fedoraId, transaction, psManager, rsFactory);\n+            } else {\n+                resource = new ContainerImpl(fedoraId, transaction, psManager, rsFactory);\n+            }\n+            // Commit session so it doesn't hang around.\n+            psSession.commit();\n+            return resource;\n+        } catch (PersistentItemNotFoundException e) {\n+            // Object doesn't exist.\n+            return null;\n+        } catch (PersistentStorageException e) {\n+            throw new RepositoryRuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean doesResourceExist(final Transaction transaction, final String fedoraId, final Instant version) {\n+        // TODO: Check the index first.\n+\n+        final PersistentStorageSession psSession;\n+        if (transaction == null) {\n+            psSession = psManager.getReadOnlySession();\n+        } else {\n+            psSession = psManager.getSession(transaction.getId());\n+        }\n+        try {\n+            psSession.getHeaders(fedoraId, version);\n+            // Commit session so it doesn't hang around.\n+            psSession.commit();", "originalCommit": "124319bdf983a1290d2940ab096705cd1a3c5a1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4MjExNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370282117", "bodyText": "Finding some of these tests names a bit hard to read grammatically. Bit redundant, maybe doesResourceExistExists or something along those lines. Similarly, doesResourceExistDoesntExist, etc, so that the method being tested is consistently in there. Or maybe some kind of delimiter between doesResource_Exists to split what's being tested from the state being tested.", "author": "bbpennel", "createdAt": "2020-01-23T18:26:25Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/GetResourceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.RdfLexicon.BASIC_CONTAINER;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.util.ReflectionTestUtils.setField;\n+\n+import java.util.UUID;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.Binary;\n+import org.fcrepo.kernel.api.models.Container;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentSessionClosedException;\n+import org.fcrepo.persistence.common.ResourceHeadersImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class GetResourceServiceImplTest {\n+\n+    @Mock\n+    private PersistentStorageSessionManager psManager;\n+\n+    @Mock\n+    private PersistentStorageSession psSession;\n+\n+    @Mock\n+    private ResourceFactory rsFactory;\n+\n+    @Mock\n+    private Transaction transaction;\n+\n+    @Mock\n+    private ResourceHeaders headers;\n+\n+    @InjectMocks\n+    private GetResourceServiceImpl service;\n+\n+    @Before\n+    public void setUp() {\n+        when(psManager.getReadOnlySession()).thenReturn(psSession);\n+        when(psManager.getSession(ArgumentMatchers.any())).thenReturn(psSession);\n+        when(transaction.getId()).thenReturn(UUID.randomUUID().toString());\n+        setField(service, \"psManager\", psManager);\n+        setField(service, \"rsFactory\", rsFactory);\n+    }\n+\n+    @Test\n+    public void doesResourceExists() throws Exception {", "originalCommit": "124319bdf983a1290d2940ab096705cd1a3c5a1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDg4OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370284888", "bodyText": "Might be worth adding tests to verify the expected session behaviors depending on if a transaction is provided or not.", "author": "bbpennel", "createdAt": "2020-01-23T18:32:18Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/GetResourceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.RdfLexicon.BASIC_CONTAINER;\n+import static org.fcrepo.kernel.api.RdfLexicon.NON_RDF_SOURCE;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.util.ReflectionTestUtils.setField;\n+\n+import java.util.UUID;\n+\n+import org.fcrepo.kernel.api.Transaction;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.models.Binary;\n+import org.fcrepo.kernel.api.models.Container;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.ResourceFactory;\n+import org.fcrepo.kernel.api.models.ResourceHeaders;\n+import org.fcrepo.persistence.api.PersistentStorageSession;\n+import org.fcrepo.persistence.api.PersistentStorageSessionManager;\n+import org.fcrepo.persistence.api.exceptions.PersistentItemNotFoundException;\n+import org.fcrepo.persistence.api.exceptions.PersistentSessionClosedException;\n+import org.fcrepo.persistence.common.ResourceHeadersImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.Silent.class)\n+public class GetResourceServiceImplTest {", "originalCommit": "124319bdf983a1290d2940ab096705cd1a3c5a1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwOTU0Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1608#discussion_r370709547", "bodyText": "Added in 40e294e", "author": "whikloj", "createdAt": "2020-01-24T16:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDg4OA=="}], "type": "inlineReview"}, {"oid": "3c95376c92a7534fcaf9c972c8480e136e273c87", "url": "https://github.com/fcrepo/fcrepo/commit/3c95376c92a7534fcaf9c972c8480e136e273c87", "message": "Move existence check to resourcefactory", "committedDate": "2020-01-24T14:29:39Z", "type": "commit"}, {"oid": "40e294ecc2a3cfdc9fd41b4eb9ccb5cce81451d0", "url": "https://github.com/fcrepo/fcrepo/commit/40e294ecc2a3cfdc9fd41b4eb9ccb5cce81451d0", "message": "With and without session tests", "committedDate": "2020-01-24T15:59:47Z", "type": "commit"}]}