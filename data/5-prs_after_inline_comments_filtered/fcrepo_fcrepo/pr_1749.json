{"pr_number": 1749, "pr_title": "Inbound references service", "pr_createdAt": "2020-09-10T16:14:14Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1749", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NDAwMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487054003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Return a RDFstream of statements referring the provided resource.\n          \n          \n            \n                 * Return a RDFstream of statements referring to the provided resource.", "author": "bbpennel", "createdAt": "2020-09-11T13:43:36Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/services/ReferenceService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.api.services;\n+\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+\n+/**\n+ * Service to retrieve references to repository resources.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+public interface ReferenceService {\n+\n+    /**\n+     * Return a RDFstream of statements referring the provided resource.", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NjM5OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487056399", "bodyText": "Might be worth noting why this method is where, since its protected and not used within this class or any children class.", "author": "bbpennel", "createdAt": "2020-09-11T13:47:13Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/TransactionManagerImpl.java", "diffHunk": "@@ -137,4 +141,7 @@ protected EventAccumulator getEventAccumulator() {\n         return eventAccumulator;\n     }\n \n+    protected ReferenceService getReferenceService() {", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyNTY2MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487225660", "bodyText": "Its called in TransactionImpl to get the service to commit the transaction.\nhttps://github.com/fcrepo4/fcrepo4/pull/1749/files#diff-1704d54771cc04a4b70dddfed086aba7R89", "author": "whikloj", "createdAt": "2020-09-11T18:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NjM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExOTgxMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487119811", "bodyText": "Is there value to keeping these peeks at this point?", "author": "bbpennel", "createdAt": "2020-09-11T15:25:07Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/ReferenceServiceImpl.java", "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.fcrepo.kernel.api.FedoraTypes.FEDORA_ID_PREFIX;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.sql.DataSource;\n+import javax.transaction.Transactional;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.fcrepo.common.db.DbPlatform;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.exception.RepositoryRuntimeException;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.models.NonRdfSourceDescription;\n+import org.fcrepo.kernel.api.rdf.DefaultRdfStream;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.slf4j.Logger;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Implementation of reference service.\n+ * @author whikloj\n+ * @since 6.0.0\n+ */\n+@Component\n+public class ReferenceServiceImpl implements ReferenceService {\n+\n+    private static final Logger LOGGER = getLogger(ReferenceServiceImpl.class);\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    private static final String TABLE_NAME = \"reference\";\n+\n+    private static final String TRANSACTION_TABLE = \"reference_transaction_operations\";\n+\n+    private static final String SUBJECT_COLUMN = \"fedora_id\";\n+\n+    private static final String PROPERTY_COLUMN = \"property\";\n+\n+    private static final String TARGET_COLUMN = \"target_id\";\n+\n+    private static final String OPERATION_COLUMN = \"operation\";\n+\n+    private static final String TRANSACTION_COLUMN = \"transaction_id\";\n+\n+    private static final String SELECT_INBOUND = \"SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" +\n+            TABLE_NAME + \" WHERE \" + TARGET_COLUMN + \" = :targetId\";\n+\n+    private static final String SELECT_INBOUND_IN_TRANSACTION = \"SELECT x.\" + SUBJECT_COLUMN + \", x.\" +\n+            PROPERTY_COLUMN + \" FROM \" + \"(SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" + TABLE_NAME +\n+            \" WHERE \" + TARGET_COLUMN + \" = :targetId UNION \" + \"SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN +\n+            \" FROM \" + TRANSACTION_TABLE + \" WHERE \" + TARGET_COLUMN + \" = :targetId AND \"\n+            + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add') x WHERE NOT EXISTS \" +\n+            \"(SELECT 1 FROM \" + TRANSACTION_TABLE + \" WHERE \" + TARGET_COLUMN + \" = :targetId AND \" +\n+            OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String SELECT_OUTBOUND = \"SELECT \" + TARGET_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" +\n+            TABLE_NAME + \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId\";\n+\n+    private static final String SELECT_OUTBOUND_IN_TRANSACTION = \"SELECT x.\" + TARGET_COLUMN + \", x.\" +\n+            PROPERTY_COLUMN + \" FROM \" + \"(SELECT \" + TARGET_COLUMN + \", \" + PROPERTY_COLUMN + \" FROM \" + TABLE_NAME +\n+            \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId UNION \" + \"SELECT \" + TARGET_COLUMN + \", \" + PROPERTY_COLUMN +\n+            \" FROM \" + TRANSACTION_TABLE + \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId \" +\n+            \"AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add') x WHERE NOT \" +\n+            \"EXISTS (SELECT 1 FROM \" + TRANSACTION_TABLE + \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId AND \" +\n+            OPERATION_COLUMN + \" = 'delete')\";\n+\n+    private static final String INSERT_REFERENCE_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_TABLE + \"(\" +\n+            SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \", \" + TARGET_COLUMN + \", \" + TRANSACTION_COLUMN + \", \" +\n+            OPERATION_COLUMN + \") VALUES (:resourceId, :property, :targetId, :transactionId, 'add')\";\n+\n+    private static final String UNDO_INSERT_REFERENCE_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_TABLE + \" WHERE \" +\n+            SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String DELETE_REFERENCE_IN_TRANSACTION = \"INSERT INTO \" + TRANSACTION_TABLE + \"(\" +\n+            SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \", \" + TARGET_COLUMN + \", \" + TRANSACTION_COLUMN + \", \" +\n+            OPERATION_COLUMN + \") VALUES (:resourceId, :property, :targetId, :transactionId, 'delete')\";\n+\n+    private static final String UNDO_DELETE_REFERENCE_IN_TRANSACTION = \"DELETE FROM \" + TRANSACTION_TABLE + \" WHERE \" +\n+            SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String IS_REFERENCE_ADDED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_TABLE + \" WHERE \"\n+            + SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String IS_REFERENCE_DELETED_IN_TRANSACTION = \"SELECT TRUE FROM \" + TRANSACTION_TABLE +\n+            \" WHERE \" + SUBJECT_COLUMN + \" = :resourceId AND \" + PROPERTY_COLUMN + \" = :property AND \" + TARGET_COLUMN +\n+            \" = :targetId AND \" + TRANSACTION_COLUMN + \" = :transactionId AND \" + OPERATION_COLUMN + \" = 'delete'\";\n+\n+    private static final String COMMIT_ADD_RECORDS = \"INSERT INTO \" + TABLE_NAME + \" ( \" + SUBJECT_COLUMN + \", \"\n+            + PROPERTY_COLUMN + \", \" + TARGET_COLUMN + \" ) SELECT \" + SUBJECT_COLUMN + \", \" + PROPERTY_COLUMN + \", \" +\n+            TARGET_COLUMN + \" FROM \" + TRANSACTION_TABLE + \" WHERE \" + TRANSACTION_COLUMN + \" = :transactionId AND \" +\n+            OPERATION_COLUMN + \" = 'add'\";\n+\n+    private static final String COMMIT_DELETE_RECORDS = \"DELETE FROM \" + TABLE_NAME + \" WHERE \" +\n+            \"EXISTS (SELECT * FROM \" + TRANSACTION_TABLE + \" t WHERE t.\" +\n+            TRANSACTION_COLUMN + \" = :transactionId AND t.\" +  OPERATION_COLUMN + \" = 'delete' AND\" +\n+            \" t.\" + SUBJECT_COLUMN + \" = \" + TABLE_NAME + \".\" + SUBJECT_COLUMN +\n+            \" AND t.\" + PROPERTY_COLUMN + \" = \" + TABLE_NAME + \".\" + PROPERTY_COLUMN +\n+            \" AND t.\" + TARGET_COLUMN + \" = \" + TABLE_NAME + \".\" + TARGET_COLUMN + \")\";\n+\n+    private static final String DELETE_TRANSACTION = \"DELETE FROM \" + TRANSACTION_TABLE + \" WHERE \" +\n+            TRANSACTION_COLUMN + \" = :transactionId\";\n+\n+    private static final String TRUNCATE_TABLE = \"TRUNCATE TABLE \" + TABLE_NAME;\n+\n+    private static final Map<DbPlatform, String> DDL_MAP = Map.of(\n+            DbPlatform.MYSQL, \"sql/mysql-references.sql\",\n+            DbPlatform.H2, \"sql/default-references.sql\",\n+            DbPlatform.POSTGRESQL, \"sql/default-references.sql\",\n+            DbPlatform.MARIADB, \"sql/default-references.sql\"\n+    );\n+\n+    @PostConstruct\n+    public void setUp() {\n+        jdbcTemplate = new NamedParameterJdbcTemplate(getDataSource());\n+\n+        final var dbPlatform = DbPlatform.fromDataSource(dataSource);\n+\n+        Preconditions.checkArgument(DDL_MAP.containsKey(dbPlatform),\n+                \"Missing DDL mapping for %s\", dbPlatform);\n+\n+        final var ddl = DDL_MAP.get(dbPlatform);\n+        LOGGER.info(\"Applying ddl: {}\", ddl);\n+        DatabasePopulatorUtils.execute(\n+                new ResourceDatabasePopulator(new DefaultResourceLoader().getResource(\"classpath:\" + ddl)),\n+                dataSource);\n+    }\n+\n+    @Override\n+    public RdfStream getInboundReferences(final String txId, final FedoraResource resource) {\n+        final String resourceId = resource.getFedoraId().getFullId();\n+        final Node subject = NodeFactory.createURI(resourceId);\n+        final Stream<Triple> stream = getReferencesInternal(txId, resourceId);\n+        if (resource instanceof NonRdfSourceDescription) {\n+            final Stream<Triple> stream2 = getReferencesInternal(txId, resource.getFedoraId().getBaseId());\n+            return new DefaultRdfStream(subject, Stream.concat(stream, stream2));\n+        }\n+        return new DefaultRdfStream(subject, stream);\n+    }\n+\n+    /**\n+     * Get the inbound references for the resource Id and the transaction id.\n+     * @param txId transaction id or null for none.\n+     * @param resourceId the resource id.\n+     * @return RDF stream of inbound references\n+     */\n+    private Stream<Triple> getReferencesInternal(final String txId, final String resourceId) {\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        parameterSource.addValue(\"targetId\", resourceId);\n+        final Node targetNode = NodeFactory.createURI(resourceId);\n+\n+        final RowMapper<Triple> inboundMapper = (rs, rowNum) ->\n+                Triple.create(NodeFactory.createURI(rs.getString(SUBJECT_COLUMN)),\n+                        NodeFactory.createURI(rs.getString(PROPERTY_COLUMN)),\n+                        targetNode);\n+\n+        final List<Triple> references;\n+        if (txId != null) {\n+            // we are in a transaction\n+            parameterSource.addValue(\"transactionId\", txId);\n+            references = jdbcTemplate.query(SELECT_INBOUND_IN_TRANSACTION, parameterSource, inboundMapper);\n+        } else {\n+            // not in a transaction\n+            references = jdbcTemplate.query(SELECT_INBOUND, parameterSource, inboundMapper);\n+        }\n+        LOGGER.debug(\"getInboundReferences for {} in transaction {} found {} references\",\n+                resourceId, txId, references.size());\n+        return references.stream();\n+    }\n+\n+    @Override\n+    public void deleteAllReferences(@Nonnull final String txId, final FedoraId resourceId) {\n+        final Stream<Triple> deleteReferences = getOutboundReferences(txId, resourceId);\n+        // Remove all the existing references.\n+        deleteReferences.forEach(t ->\n+                removeReference(txId, resourceId.getFullId(), t.getPredicate().getURI(), t.getObject().getURI())\n+        );\n+    }\n+\n+    /**\n+     * Get a stream of triples of resources being referenced from the provided resource.\n+     * @param txId transaction Id or null if none.\n+     * @param resourceId the resource Id.\n+     * @return stream of Triples\n+     */\n+    private Stream<Triple> getOutboundReferences(final String txId, final FedoraId resourceId) {\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        parameterSource.addValue(\"resourceId\", resourceId.getFullId());\n+        final Node subjectNode = NodeFactory.createURI(resourceId.getFullId());\n+\n+        final RowMapper<Triple> outboundMapper = (rs, rowNum) ->\n+                Triple.create(subjectNode,\n+                        NodeFactory.createURI(rs.getString(PROPERTY_COLUMN)),\n+                        NodeFactory.createURI(rs.getString(TARGET_COLUMN)));\n+\n+        final List<Triple> references;\n+        if (txId != null) {\n+            // we are in a transaction\n+            parameterSource.addValue(\"transactionId\", txId);\n+            references = jdbcTemplate.query(SELECT_OUTBOUND_IN_TRANSACTION, parameterSource, outboundMapper);\n+        } else {\n+            // not in a transaction\n+            references = jdbcTemplate.query(SELECT_OUTBOUND, parameterSource, outboundMapper);\n+        }\n+        LOGGER.debug(\"getOutboundReferences for {} in transaction {} found {} references\",\n+                resourceId, txId, references.size());\n+        return references.stream();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void updateReferences(@Nonnull final String txId, final FedoraId resourceId, final RdfStream rdfStream) {\n+        try {\n+            final Stream<Triple> deleteReferences = getOutboundReferences(txId, resourceId);\n+            // Remove all the existing references.\n+            deleteReferences.forEach(t ->\n+                removeReference(txId, resourceId.getFullId(), t.getPredicate().getURI(), t.getObject().getURI())\n+            );\n+            final Stream<Triple> addReferences = getReferencesFromRdf(rdfStream);\n+            addReferences.forEach(r -> addReference(txId, resourceId.getFullId(),\n+                    r.getPredicate().getURI(), r.getObject().getURI()));\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to update reference index for resource {} in transaction {}: {}\",\n+                    resourceId.getFullId(), txId, e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to update reference index\", e);\n+        }\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void commitTransaction(final String txId) {\n+        try {\n+            final Map<String, String> parameterSource = Map.of(\"transactionId\", txId);\n+            jdbcTemplate.update(COMMIT_DELETE_RECORDS, parameterSource);\n+            jdbcTemplate.update(COMMIT_ADD_RECORDS, parameterSource);\n+            jdbcTemplate.update(DELETE_TRANSACTION, parameterSource);\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to commit reference index transaction {}: {}\", txId, e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to commit reference index transaction\", e);\n+        }\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void rollbackTransaction(final String txId) {\n+        try {\n+            final Map<String, String> parameterSource = Map.of(\"transactionId\", txId);\n+            jdbcTemplate.update(DELETE_TRANSACTION, parameterSource);\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to rollback reference index transaction {}: {}\", txId, e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to rollback reference index transaction\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void reset() {\n+        try {\n+            jdbcTemplate.update(TRUNCATE_TABLE, Map.of());\n+        } catch (final Exception e) {\n+            LOGGER.warn(\"Unable to reset reference index: {}\", e.getMessage());\n+            throw new RepositoryRuntimeException(\"Unable to reset reference index\", e);\n+        }\n+    }\n+\n+    /**\n+     * Remove a reference.\n+     * @param txId transaction Id.\n+     * @param resourceId the subject resource Id.\n+     * @param targetId the target resource Id.\n+     */\n+    private void removeReference(@Nonnull final String txId, final String resourceId, final String property,\n+                                 final String targetId) {\n+        final Map<String, String> parameterSource = Map.of(\"transactionId\", txId,\n+                \"resourceId\", resourceId,\n+                \"property\", property,\n+                \"targetId\", targetId);\n+        final boolean addedInTx = !jdbcTemplate.queryForList(IS_REFERENCE_ADDED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (addedInTx) {\n+            jdbcTemplate.update(UNDO_INSERT_REFERENCE_IN_TRANSACTION, parameterSource);\n+        } else {\n+            jdbcTemplate.update(DELETE_REFERENCE_IN_TRANSACTION, parameterSource);\n+        }\n+    }\n+\n+    /**\n+     * Add a reference\n+     * @param txId the transaction Id.\n+     * @param resourceId the subject resource Id.\n+     * @param targetId the target resource Id.\n+     */\n+    private void addReference(@Nonnull final String txId, final String resourceId, final String property,\n+                              final String targetId) {\n+        final Map<String, String> parameterSource = Map.of(\"transactionId\", txId,\n+                \"resourceId\", resourceId,\n+                \"property\", property,\n+                \"targetId\", targetId);\n+        final boolean addedInTx = !jdbcTemplate.queryForList(IS_REFERENCE_DELETED_IN_TRANSACTION, parameterSource)\n+                .isEmpty();\n+        if (addedInTx) {\n+            jdbcTemplate.update(UNDO_DELETE_REFERENCE_IN_TRANSACTION, parameterSource);\n+        } else {\n+            jdbcTemplate.update(INSERT_REFERENCE_IN_TRANSACTION, parameterSource);\n+        }\n+    }\n+\n+    /**\n+     * Utility to filter a RDFStream to just the URIs from subjects and objects within the repository.\n+     * @param stream the provided stream\n+     * @return stream of triples with internal references.\n+     */\n+    private Stream<Triple> getReferencesFromRdf(final RdfStream stream) {\n+        final Predicate<Triple> isInternalReference = t -> {\n+            final Node s = t.getSubject();\n+            final Node o = t.getObject();\n+            return (s.isURI() && s.getURI().startsWith(FEDORA_ID_PREFIX) && o.isURI() &&\n+                    o.getURI().startsWith(FEDORA_ID_PREFIX));\n+        };\n+        return stream.peek(t -> LOGGER.trace(\"Before reference filtering: {}\", t)).filter(isInternalReference)", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDQ1Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487154457", "bodyText": "This looks good, there are a few extra cases that we should probably check:\n\nVerify that if you request references from a committed transaction (or transaction that doesn't exist), you get nothing\nCheck that references deleted in a transaction are not visible within the transaction, but still are outside of it (can probably add this to testAddAndRemove)\nCommitting without having called updateReferences", "author": "bbpennel", "createdAt": "2020-09-11T16:25:21Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReferenceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.rdf.DefaultRdfStream.fromModel;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.ResourceFactory;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Reference Service Tests\n+ * @author whikloj\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/containmentIndexTest.xml\")\n+public class ReferenceServiceImplTest {", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyNzg1Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487227857", "bodyText": "A little unsure I understand this one\n\nVerify that if you request references from a committed transaction ... you get nothing\n\nYou mean if there is nothing? Because the query in a transaction gets things from the general table and this specific to the current transaction.", "author": "whikloj", "createdAt": "2020-09-11T18:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NTkwNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r488875905", "bodyText": "So if you provide a transaction id to getInboundReferences, and there are no entries specific to that transaction, you would get back references from outside of transactions? Looks like it from the new test. That seems reasonable.", "author": "bbpennel", "createdAt": "2020-09-15T18:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1Njk1MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487156951", "bodyText": "Doesn't seem like we need a case insensitive comparison here, the interaction model uris can be case sensitive.", "author": "bbpennel", "createdAt": "2020-09-11T16:29:54Z", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/IndexBuilderImpl.java", "diffHunk": "@@ -148,6 +166,13 @@ private void indexOcflObject(final String ocflId, final String txId, final OcflO\n                                 fedoraId.getFullId()));\n                     }\n                 }\n+                if (!headers.getInteractionModel().equalsIgnoreCase(NON_RDF_SOURCE.toString())) {", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDkwNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487154905", "bodyText": "Did you look into removing the @Ignore from:\nhttps://github.com/fcrepo4/fcrepo4/blob/main/fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java#L3971", "author": "awoods", "createdAt": "2020-09-11T16:26:10Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -2850,6 +2849,58 @@ public void testGetObjectReferences() throws IOException {\n         }\n     }\n \n+    @Test", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MjU5OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487252598", "bodyText": "Done", "author": "whikloj", "createdAt": "2020-09-11T19:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1NDkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2Mzc1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487163754", "bodyText": "Following the same pattern as \"recordEvent()\", would it make sense to refactor the method \"updateReferences()\" up to the AbstractService class?", "author": "awoods", "createdAt": "2020-09-11T16:42:54Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/services/CreateResourceServiceImpl.java", "diffHunk": "@@ -180,6 +180,8 @@ public void perform(final String txId, final String userPrincipal, final FedoraI\n \n         try {\n             pSession.persist(createOp);\n+            referenceService.updateReferences(txId, fedoraId,\n+                    fromModel(model.getResource(fedoraId.getFullId()).asNode(), model));", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMTQ3MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487231470", "bodyText": "Not sure I understand the reasoning for that? You have a method that calls the other method. Seems to make it harder to understand what is going on. I'll do it, but if you could explain the benefits for my own sanity.", "author": "whikloj", "createdAt": "2020-09-11T18:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2Mzc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNDEzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487234138", "bodyText": "Oh I think I get what you're thinking here.", "author": "whikloj", "createdAt": "2020-09-11T19:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2Mzc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MjI3MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487182271", "bodyText": "Make final?", "author": "awoods", "createdAt": "2020-09-11T17:18:21Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReferenceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.rdf.DefaultRdfStream.fromModel;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.ResourceFactory;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Reference Service Tests\n+ * @author whikloj\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/containmentIndexTest.xml\")\n+public class ReferenceServiceImplTest {\n+\n+    @Inject\n+    private ReferenceService referenceService;\n+\n+    @Mock\n+    private FedoraResource targetResource;\n+\n+    private FedoraId subject1Id;\n+\n+    private FedoraId subject2Id;\n+\n+    private Resource subject1;\n+\n+    private Resource subject2;\n+\n+    private Resource target;\n+\n+    private static Property referenceProp = ResourceFactory.createProperty(\"http://example.org/pointer\");", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5NTg0MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r487195841", "bodyText": "It appears that setting the fields here is unnecessary. I believe the setUp method can be removed.", "author": "awoods", "createdAt": "2020-09-11T17:45:01Z", "path": "fcrepo-jms/src/test/java/org/fcrepo/integration/jms/observer/AbstractJmsIT.java", "diffHunk": "@@ -135,6 +140,12 @@\n \n     protected abstract Destination createDestination() throws JMSException;\n \n+    @Before\n+    public void setUp() {\n+        setField(createResourceService, \"referenceService\", referenceService);", "originalCommit": "1a83e1e3badbcc4a57dc90ab856b747009193ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cede1869d66f847cb7a2715295e362cb83b1547e", "url": "https://github.com/fcrepo/fcrepo/commit/cede1869d66f847cb7a2715295e362cb83b1547e", "message": "Inbound references", "committedDate": "2020-09-14T14:34:42Z", "type": "commit"}, {"oid": "7eb90ca3c026a4a712769eeea48e1d922549f215", "url": "https://github.com/fcrepo/fcrepo/commit/7eb90ca3c026a4a712769eeea48e1d922549f215", "message": "Add delete references", "committedDate": "2020-09-14T14:34:42Z", "type": "commit"}, {"oid": "c6b227e281128c3e6c5ea7010c754e874fb48220", "url": "https://github.com/fcrepo/fcrepo/commit/c6b227e281128c3e6c5ea7010c754e874fb48220", "message": "code review", "committedDate": "2020-09-14T14:34:42Z", "type": "commit"}, {"oid": "b400bc68c59e889a0b4c4c2dd7b384900fb7eece", "url": "https://github.com/fcrepo/fcrepo/commit/b400bc68c59e889a0b4c4c2dd7b384900fb7eece", "message": "Remove Override", "committedDate": "2020-09-14T14:35:39Z", "type": "commit"}, {"oid": "653cc66412d5d9c9382af5ac928376cad4dc9a22", "url": "https://github.com/fcrepo/fcrepo/commit/653cc66412d5d9c9382af5ac928376cad4dc9a22", "message": "Remove whitespace", "committedDate": "2020-09-14T14:38:38Z", "type": "commit"}, {"oid": "653cc66412d5d9c9382af5ac928376cad4dc9a22", "url": "https://github.com/fcrepo/fcrepo/commit/653cc66412d5d9c9382af5ac928376cad4dc9a22", "message": "Remove whitespace", "committedDate": "2020-09-14T14:38:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4MjkzMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r488882930", "bodyText": "One more test I'd suggest adding: that a reference to a binary is returned in a request to its description", "author": "bbpennel", "createdAt": "2020-09-15T18:39:41Z", "path": "fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/services/ReferenceServiceImplTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.kernel.impl.services;\n+\n+import static org.apache.jena.rdf.model.ModelFactory.createDefaultModel;\n+import static org.fcrepo.kernel.api.rdf.DefaultRdfStream.fromModel;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.rdf.model.Model;\n+import org.apache.jena.rdf.model.Property;\n+import org.apache.jena.rdf.model.Resource;\n+import org.apache.jena.rdf.model.ResourceFactory;\n+import org.fcrepo.kernel.api.RdfStream;\n+import org.fcrepo.kernel.api.identifiers.FedoraId;\n+import org.fcrepo.kernel.api.models.FedoraResource;\n+import org.fcrepo.kernel.api.services.ReferenceService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * Reference Service Tests\n+ * @author whikloj\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/containmentIndexTest.xml\")\n+public class ReferenceServiceImplTest {", "originalCommit": "653cc66412d5d9c9382af5ac928376cad4dc9a22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca329d3f4cf0da230da86340e31a385c315ba099", "url": "https://github.com/fcrepo/fcrepo/commit/ca329d3f4cf0da230da86340e31a385c315ba099", "message": "Additional reference test for binaries", "committedDate": "2020-09-15T19:28:10Z", "type": "commit"}, {"oid": "9294886b06a8406d39f2b71e36020be78b810e27", "url": "https://github.com/fcrepo/fcrepo/commit/9294886b06a8406d39f2b71e36020be78b810e27", "message": "Use subject from RDF not resource being acted on", "committedDate": "2020-09-17T02:30:18Z", "type": "commit"}, {"oid": "1df17ea2f612b762fa329aa28ebb0328ea7fb1cb", "url": "https://github.com/fcrepo/fcrepo/commit/1df17ea2f612b762fa329aa28ebb0328ea7fb1cb", "message": "Track resource URI with references", "committedDate": "2020-09-17T22:08:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2MjMxNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1749#discussion_r492262314", "bodyText": "Minor, but there is a helper method on the parent class of this test used for adding properties to resources which you could use here. setProperty(binaryUri + \"/\" + FCR_METADATA, \"http://awoods.com/pointsAt\", \"<\" + containerUri + \">\")", "author": "bbpennel", "createdAt": "2020-09-21T18:27:26Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraLdpIT.java", "diffHunk": "@@ -2856,6 +2856,41 @@ public void testGetObjectReferences() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void testInboundReferencesFromBinary() throws Exception {\n+        final Node referenceProp = NodeFactory.createURI(\"http://awoods.com/pointsAt\");\n+        final HttpPost postContainer = postObjMethod();\n+        final String containerUri;\n+        try (final CloseableHttpResponse response = execute(postContainer)) {\n+            assertEquals(CREATED.getStatusCode(), getStatus(response));\n+            containerUri = getLocation(response);\n+        }\n+\n+        final HttpPost postBinary = postObjMethod();\n+        postBinary.setHeader(CONTENT_TYPE, TEXT_PLAIN);\n+        postBinary.setEntity(new StringEntity(\"Test text\"));\n+        final String binaryUri;\n+        try (final CloseableHttpResponse response = execute(postBinary)) {\n+            assertEquals(CREATED.getStatusCode(), getStatus(response));\n+            binaryUri = getLocation(response);\n+        }\n+\n+        final String linkRdf = \"INSERT { <\" + binaryUri + \"> <http://awoods.com/pointsAt> <\" + containerUri + \"> . } \" +", "originalCommit": "9294886b06a8406d39f2b71e36020be78b810e27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d33b6152c339fe96d55fe4b65757b55ef4bb3ebd", "url": "https://github.com/fcrepo/fcrepo/commit/d33b6152c339fe96d55fe4b65757b55ef4bb3ebd", "message": "Use existing setProperty function", "committedDate": "2020-09-21T19:22:27Z", "type": "commit"}]}