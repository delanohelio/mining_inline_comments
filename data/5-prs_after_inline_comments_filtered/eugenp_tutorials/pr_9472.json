{"pr_number": 9472, "pr_title": "[BAEL-2322] Test Code", "pr_createdAt": "2020-06-10T03:45:21Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9472", "timeline": [{"oid": "88714a983823c58fae88be4c1926874c2590bb7f", "url": "https://github.com/eugenp/tutorials/commit/88714a983823c58fae88be4c1926874c2590bb7f", "message": "[BAEL-2322] Apache BookKeeper", "committedDate": "2020-06-08T05:22:11Z", "type": "commit"}, {"oid": "972f005d0bde6fa2c36789a5f17e9992082d3132", "url": "https://github.com/eugenp/tutorials/commit/972f005d0bde6fa2c36789a5f17e9992082d3132", "message": "[BAEL-2322] ignore data files", "committedDate": "2020-06-09T13:14:30Z", "type": "commit"}, {"oid": "c470bf5ab2aa1220827db4714a0b5deaec80a40a", "url": "https://github.com/eugenp/tutorials/commit/c470bf5ab2aa1220827db4714a0b5deaec80a40a", "message": "Merge branch 'master' of https://github.com/eugenp/tutorials", "committedDate": "2020-06-10T00:35:29Z", "type": "commit"}, {"oid": "f7e5448e9de011d6b7f981ea6259b30ccd13d2c2", "url": "https://github.com/eugenp/tutorials/commit/f7e5448e9de011d6b7f981ea6259b30ccd13d2c2", "message": "[BAEL-2322] Relocate module", "committedDate": "2020-06-10T03:32:08Z", "type": "commit"}, {"oid": "84cbd364d65412f794860a40904559419cccc734", "url": "https://github.com/eugenp/tutorials/commit/84cbd364d65412f794860a40904559419cccc734", "message": "[BAEL-2322] Remove unused Dockerfile", "committedDate": "2020-06-10T03:38:23Z", "type": "commit"}, {"oid": "3ea4f853a20929998dee1a6e80ddf997ebbae643", "url": "https://github.com/eugenp/tutorials/commit/3ea4f853a20929998dee1a6e80ddf997ebbae643", "message": "[BAEL-2322] Relocating module", "committedDate": "2020-06-10T04:16:31Z", "type": "commit"}, {"oid": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "url": "https://github.com/eugenp/tutorials/commit/0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "message": "[BAEL-2322] Relocating module", "committedDate": "2020-06-10T04:20:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODU1OA==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768558", "bodyText": "Can We remove these blank lines at the start of methods?", "author": "JonCook", "createdAt": "2020-06-13T20:55:28Z", "path": "persistence-modules/apache-bookkeeper/src/main/java/com/baeldung/tutorials/bookkeeper/BkHelper.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package com.baeldung.tutorials.bookkeeper;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.LedgerMetadata;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.zookeeper.AsyncCallback;\n+\n+public class BkHelper {\n+\n+    private static final Log log = LogFactory.getLog(BkHelper.class);\n+\n+    public static BookKeeper createBkClient(String zkConnectionString) {\n+        try {\n+            return new BookKeeper(zkConnectionString);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a Ledger with the given name added as custom metadata\n+     * @param bk\n+     * @param name\n+     * @param password\n+     * @return\n+     */\n+    public static LedgerHandle createLedger(BookKeeper bk, String name, byte[] password) {\n+        try {\n+            return bk.createLedger(3, 2, 2, DigestType.MAC, password, Collections.singletonMap(\"name\", name.getBytes()));\n+        } catch (Exception ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Iterates over all available ledgers and returns the first one that has\n+     * a metadata key 'name' equals to the given name\n+     * @param bk\n+     * @param name\n+     * @return\n+     * @throws Exception\n+     */\n+    public static Optional<Long> findLedgerByName(BookKeeper bk, String name) throws Exception {\n+", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODU4Mw==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768583", "bodyText": "The formatting is off on this class", "author": "JonCook", "createdAt": "2020-06-13T20:55:44Z", "path": "persistence-modules/apache-bookkeeper/src/main/java/com/baeldung/tutorials/bookkeeper/BkHelper.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package com.baeldung.tutorials.bookkeeper;\n+", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODYxNg==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768616", "bodyText": "Let's use capitals for static final variables.", "author": "JonCook", "createdAt": "2020-06-13T20:56:13Z", "path": "persistence-modules/apache-bookkeeper/src/main/java/com/baeldung/tutorials/bookkeeper/BkHelper.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package com.baeldung.tutorials.bookkeeper;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.LedgerMetadata;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.zookeeper.AsyncCallback;\n+\n+public class BkHelper {\n+\n+    private static final Log log = LogFactory.getLog(BkHelper.class);", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODYyOA==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768628", "bodyText": "The formatting is off on this class.", "author": "JonCook", "createdAt": "2020-06-13T20:56:31Z", "path": "persistence-modules/apache-bookkeeper/src/test/java/com/baeldung/tutorials/bookkeeper/BkHelperLiveTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package com.baeldung.tutorials.bookkeeper;\n+", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODY0Mg==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768642", "bodyText": "Let's remove the many unused imports please.", "author": "JonCook", "createdAt": "2020-06-13T20:56:48Z", "path": "persistence-modules/apache-bookkeeper/src/test/java/com/baeldung/tutorials/bookkeeper/BkHelperLiveTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package com.baeldung.tutorials.bookkeeper;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODY1Mw==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768653", "bodyText": "Again let's remove this blank lines.", "author": "JonCook", "createdAt": "2020-06-13T20:57:03Z", "path": "persistence-modules/apache-bookkeeper/src/test/java/com/baeldung/tutorials/bookkeeper/BkHelperLiveTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package com.baeldung.tutorials.bookkeeper;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.DigestType;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.ReadHandle;\n+import org.apache.bookkeeper.client.api.WriteAdvHandle;\n+import org.apache.bookkeeper.client.api.WriteHandle;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.zookeeper.AsyncCallback;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.Iterables;\n+\n+class BkHelperLiveTest extends BkHelper {\n+    \n+    private static BookKeeper bk;\n+    private byte[] ledgerPassword = \"SuperS3cR37\".getBytes();\n+    \n+    private static final Log log = LogFactory.getLog(BkHelperLiveTest.class);\n+    \n+    @BeforeAll\n+    static void initBkClient() {\n+        bk = createBkClient(\"192.168.99.101:2181\");         \n+    }\n+    \n+    @Test\n+    void whenCreateLedger_thenSuccess() throws Exception {\n+        ", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODY2Nw==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768667", "bodyText": "No need for double blank lines.", "author": "JonCook", "createdAt": "2020-06-13T20:57:17Z", "path": "persistence-modules/apache-bookkeeper/src/test/java/com/baeldung/tutorials/bookkeeper/BkHelperLiveTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package com.baeldung.tutorials.bookkeeper;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.DigestType;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.ReadHandle;\n+import org.apache.bookkeeper.client.api.WriteAdvHandle;\n+import org.apache.bookkeeper.client.api.WriteHandle;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.zookeeper.AsyncCallback;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.Iterables;\n+\n+class BkHelperLiveTest extends BkHelper {\n+    \n+    private static BookKeeper bk;\n+    private byte[] ledgerPassword = \"SuperS3cR37\".getBytes();\n+    \n+    private static final Log log = LogFactory.getLog(BkHelperLiveTest.class);\n+    \n+    @BeforeAll\n+    static void initBkClient() {\n+        bk = createBkClient(\"192.168.99.101:2181\");         \n+    }\n+    \n+    @Test\n+    void whenCreateLedger_thenSuccess() throws Exception {\n+        \n+        LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.MAC, ledgerPassword);\n+        assertNotNull(lh);\n+        assertNotNull(lh.getId());\n+                \n+        log.info(\"[I33] Ledge created: id=\" + lh.getId());\n+    }\n+    \n+    \n+    @Test\n+    void whenCreateLedgerAsync_thenSuccess() throws Exception {\n+        \n+        CompletableFuture<WriteHandle> cf = bk.newCreateLedgerOp()\n+          .withDigestType(org.apache.bookkeeper.client.api.DigestType.MAC)\n+          .withPassword(\"password\".getBytes())\n+          .execute();\n+        \n+        WriteHandle handle = cf.get(1, TimeUnit.MINUTES);\n+        assertNotNull(handle);\n+        handle.close();\n+\n+    }\n+    ", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2ODY4NA==", "url": "https://github.com/eugenp/tutorials/pull/9472#discussion_r439768684", "bodyText": "Again lots of blank space.", "author": "JonCook", "createdAt": "2020-06-13T20:57:34Z", "path": "persistence-modules/apache-bookkeeper/src/test/java/com/baeldung/tutorials/bookkeeper/BkHelperLiveTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package com.baeldung.tutorials.bookkeeper;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.api.DigestType;\n+import org.apache.bookkeeper.client.api.LedgerEntries;\n+import org.apache.bookkeeper.client.api.ReadHandle;\n+import org.apache.bookkeeper.client.api.WriteAdvHandle;\n+import org.apache.bookkeeper.client.api.WriteHandle;\n+import org.apache.bookkeeper.tools.cli.commands.bookie.ListLedgersCommand;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.zookeeper.AsyncCallback;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.Iterables;\n+\n+class BkHelperLiveTest extends BkHelper {\n+    \n+    private static BookKeeper bk;\n+    private byte[] ledgerPassword = \"SuperS3cR37\".getBytes();\n+    \n+    private static final Log log = LogFactory.getLog(BkHelperLiveTest.class);\n+    \n+    @BeforeAll\n+    static void initBkClient() {\n+        bk = createBkClient(\"192.168.99.101:2181\");         \n+    }\n+    \n+    @Test\n+    void whenCreateLedger_thenSuccess() throws Exception {\n+        \n+        LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.MAC, ledgerPassword);\n+        assertNotNull(lh);\n+        assertNotNull(lh.getId());\n+                \n+        log.info(\"[I33] Ledge created: id=\" + lh.getId());\n+    }\n+    \n+    \n+    @Test\n+    void whenCreateLedgerAsync_thenSuccess() throws Exception {\n+        \n+        CompletableFuture<WriteHandle> cf = bk.newCreateLedgerOp()\n+          .withDigestType(org.apache.bookkeeper.client.api.DigestType.MAC)\n+          .withPassword(\"password\".getBytes())\n+          .execute();\n+        \n+        WriteHandle handle = cf.get(1, TimeUnit.MINUTES);\n+        assertNotNull(handle);\n+        handle.close();\n+\n+    }\n+    \n+\n+    @Test\n+    void whenAsyncCreateLedger_thenSuccess() throws Exception {\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+        AtomicReference<LedgerHandle> handleRef =new AtomicReference<>();\n+        \n+        bk.asyncCreateLedger(3, 2, 2, \n+          BookKeeper.DigestType.MAC, \n+          ledgerPassword, \n+          (rc, lh, ctx) -> {\n+              handleRef.set(lh);\n+              latch.countDown();\n+          }, \n+          null, \n+          Collections.emptyMap());\n+        \n+        latch.await(1, TimeUnit.MINUTES);\n+        LedgerHandle lh = handleRef.get();\n+        assertNotNull(lh);        \n+        assertFalse(lh.isClosed(),\"Ledger should be writeable\");\n+    }\n+\n+    \n+    @Test\n+    void whenListLedgers_thenSuccess() throws Exception {\n+\n+        List<Long> ledgers = listAllLedgers(bk);\n+        assertNotNull(ledgers);\n+    }\n+    \n+    @Test\n+    void whenWriteEntries_thenSuccess() throws Exception {\n+        \n+        LedgerHandle lh = createLedger(bk,\"myledger\",ledgerPassword);\n+                \n+        long start = System.currentTimeMillis();\n+        for ( int i = 0 ; i < 1000 ; i++ ) {\n+            byte[] data = new String(\"message-\" + i).getBytes();\n+            lh.append(data);\n+        } \n+                        \n+        lh.close();\n+        long elapsed = System.currentTimeMillis() - start;\n+        log.info(\"Entries added to ledgerId \" + lh.getId() + \". count=1000, elapsed=\" + elapsed);\n+    }\n+    \n+    @Test \n+    void whenWriteEntriesAsync_thenSuccess() throws Exception {\n+                \n+        CompletableFuture<Object> f = bk.newCreateLedgerOp()\n+          .withDigestType(DigestType.MAC)\n+          .withPassword(ledgerPassword)\n+          .execute()\n+          .thenApply((wh) -> {              \n+              List<CompletableFuture<Long>> ops = new ArrayList<>();             \n+              for( int i = 0; i < 1000 ; i++ ) {\n+                  byte[] data = String.format(\"message-%04d\", i).getBytes();\n+                  ops.add(wh.appendAsync(data));\n+              }\n+              \n+              return CompletableFuture\n+                .allOf(ops.stream().toArray(CompletableFuture[]::new))\n+                .thenCompose((v) -> wh.closeAsync());\n+          });\n+        \n+        f.get(5, TimeUnit.MINUTES);\n+    }\n+    \n+    @Test \n+    void whenWriteAndReadEntriesAsync_thenSuccess() throws Exception {\n+                \n+        CompletableFuture<Long> f = bk.newCreateLedgerOp()\n+          .withDigestType(DigestType.MAC)\n+          .withPassword(ledgerPassword)\n+          .execute()\n+          .thenApply((wh) -> {              \n+              List<CompletableFuture<Long>> ops = new ArrayList<>();             \n+              for( int i = 0; i < 1000 ; i++ ) {\n+                  byte[] data = String.format(\"message-%04d\", i).getBytes();\n+                  ops.add(wh.appendAsync(data));\n+              }\n+              \n+              \n+              return CompletableFuture\n+                .allOf(ops.stream().toArray(CompletableFuture[]::new))\n+                .thenCompose((v) -> wh.closeAsync())\n+                .thenApply((v) -> wh.getId());\n+          })\n+          .thenCompose((lf) -> lf); // flatten the\n+        \n+        Long ledgerId = f.get(5, TimeUnit.MINUTES);\n+        log.info(\"Ledger created with 1000 entries: ledgerId=\" + ledgerId);\n+        \n+        // Now let's read data back...\n+        CompletableFuture<LedgerEntries> ef = bk.newOpenLedgerOp()\n+          .withLedgerId(ledgerId)\n+          .withPassword(ledgerPassword)\n+          .withDigestType(DigestType.MAC)\n+          .execute()\n+          .thenCompose((rh) -> {\n+             return rh.readLastAddConfirmedAsync()\n+               .thenCompose((lastId) -> rh.readAsync(0, lastId));\n+          });\n+        \n+        LedgerEntries entries = ef.get(5,TimeUnit.MINUTES);\n+        ", "originalCommit": "0de9a8f1d452e86d7e267e7172cb915a41d39ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ffd9b1a4763fa3d16552475c2610738f31b78da", "url": "https://github.com/eugenp/tutorials/commit/5ffd9b1a4763fa3d16552475c2610738f31b78da", "message": "[BAEL-2322] Code formatting", "committedDate": "2020-06-14T19:54:22Z", "type": "commit"}, {"oid": "9d971a4a6a8f3b9965a2f624ebe69428de75cdae", "url": "https://github.com/eugenp/tutorials/commit/9d971a4a6a8f3b9965a2f624ebe69428de75cdae", "message": "[BAEL-2322] Code formatting", "committedDate": "2020-06-14T19:54:49Z", "type": "commit"}, {"oid": "0c3146d058ab44d1e80256dd5c0f73699c827c3b", "url": "https://github.com/eugenp/tutorials/commit/0c3146d058ab44d1e80256dd5c0f73699c827c3b", "message": "BAEL-2322: PR fix", "committedDate": "2020-06-21T23:49:45Z", "type": "commit"}, {"oid": "c182699477fcd207217696159759aa0b1281ba9e", "url": "https://github.com/eugenp/tutorials/commit/c182699477fcd207217696159759aa0b1281ba9e", "message": "BAEL-2322: PR fix", "committedDate": "2020-06-21T23:56:01Z", "type": "commit"}]}