{"pr_number": 10194, "pr_title": "Java-2824 fix tests in java 9 and above modules", "pr_createdAt": "2020-10-22T20:16:32Z", "pr_url": "https://github.com/eugenp/tutorials/pull/10194", "timeline": [{"oid": "e5438e39e41279e71b9009c7bc88de0523f7152c", "url": "https://github.com/eugenp/tutorials/commit/e5438e39e41279e71b9009c7bc88de0523f7152c", "message": "JAVA-2824 Fix tests in Java 9 and above modules", "committedDate": "2020-10-22T08:42:10Z", "type": "commit"}, {"oid": "39af870a1a9dd9015d20fe84dca051886ead3cec", "url": "https://github.com/eugenp/tutorials/commit/39af870a1a9dd9015d20fe84dca051886ead3cec", "message": "JAVA-2824 Fix tests in Java 9 and above modules", "committedDate": "2020-10-22T20:04:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMTY1OA==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r510431658", "bodyText": "I have removed the assertions on the number of modules. It's dependent on the JVM version, so we shouldn't test for it.", "author": "Maiklins", "createdAt": "2020-10-22T20:17:57Z", "path": "core-java-modules/core-java-9-jigsaw/src/test/java/com/baeldung/java9/modules/ModuleAPIUnitTest.java", "diffHunk": "@@ -2,8 +2,7 @@\n ", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNzU0Mw==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r513507543", "bodyText": "can we use the @Disabled annotation instead?", "author": "dkapil", "createdAt": "2020-10-28T14:50:43Z", "path": "core-java-modules/core-java-11/src/test/java/com/baeldung/java11/httpclient/test/HttpRequestUnitTest.java", "diffHunk": "@@ -48,7 +48,12 @@ public void shouldUseHttp2WhenWebsiteUsesHttp2() throws IOException, Interrupted\n         assertThat(response.version(), equalTo(HttpClient.Version.HTTP_2));\n     }\n \n-    @Test\n+    /*\n+    * This test will fail as soon as the given URL returns a HTTP 2 response.\n+    * Therefore, let's leave it commented out.\n+    * */\n+\n+   /* @Test", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzNTYxOA==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r514535618", "bodyText": "ok", "author": "Maiklins", "createdAt": "2020-10-29T20:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNzU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODI5MQ==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r513508291", "bodyText": "Let's use @Disabled annotation.", "author": "dkapil", "createdAt": "2020-10-28T14:51:34Z", "path": "core-java-modules/core-java-datetime-string/src/test/java/com/baeldung/datetime/DateTimeFormatterUnitTest.java", "diffHunk": "@@ -105,14 +107,15 @@ public void shouldPrintStyledDate() {\n         Assert.assertEquals(\"8/23/16\", DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT).format(anotherSummerDay));\n     }\n \n-    @Test\n-    public void shouldPrintStyledDateTime() {\n-        LocalDateTime anotherSummerDay = LocalDateTime.of(2016, 8, 23, 13, 12, 45);\n-        Assert.assertEquals(\"Tuesday, August 23, 2016 1:12:45 PM EET\", DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL).withZone(ZoneId.of(\"Europe/Helsinki\")).format(anotherSummerDay));\n-        Assert.assertEquals(\"August 23, 2016 1:12:45 PM EET\", DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG).withZone(ZoneId.of(\"Europe/Helsinki\")).format(anotherSummerDay));\n-        Assert.assertEquals(\"Aug 23, 2016 1:12:45 PM\", DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).withZone(ZoneId.of(\"Europe/Helsinki\")).format(anotherSummerDay));\n-        Assert.assertEquals(\"8/23/16 1:12 PM\", DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT).withZone(ZoneId.of(\"Europe/Helsinki\")).format(anotherSummerDay));\n-    }\n+    // Note: The exact output format using the different FormatStyle constants differs by JVM/Java version", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzOTk0OA==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r514539948", "bodyText": "I think that test doesn't make much sense. We are testing the Java API here.", "author": "Maiklins", "createdAt": "2020-10-29T20:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODkyMA==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r513508920", "bodyText": "have the assertions changed because the Java version has been upgraded? I just want to understand if we are asserting the correct data.", "author": "dkapil", "createdAt": "2020-10-28T14:52:15Z", "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessAPIEnhancementsUnitTest.java", "diffHunk": "@@ -61,7 +61,7 @@ public void givenSpawnProcess_whenInvokeGetInfo_thenSuccess() throws IOException\n           .contains(\"java\"));\n         assertEquals(true, processInfo.startInstant()\n           .isPresent());\n-        assertEquals(true, processInfo.totalCpuDuration()\n+        assertEquals(false, processInfo.totalCpuDuration()", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDI2OA==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r514540268", "bodyText": "yes", "author": "Maiklins", "createdAt": "2020-10-29T20:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwOTU0OQ==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r513509549", "bodyText": "can we add a reason why these tests will not work and disabled them instead of removing?", "author": "dkapil", "createdAt": "2020-10-28T14:53:01Z", "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessUnderstandingUnitTest.java", "diffHunk": "@@ -16,28 +16,6 @@\n \n class ProcessUnderstandingUnitTest {\n \n-    @Test\n-    public void givenSourceProgram_whenExecutedFromAnotherProgram_thenSourceProgramOutput3() throws IOException {", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwOTc1Nw==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r513509757", "bodyText": "@disabled annotation", "author": "dkapil", "createdAt": "2020-10-28T14:53:18Z", "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotUnitTest.java", "diffHunk": "@@ -38,14 +40,15 @@ public void givenMultipleScreens_whenTakeScreenshot_thenSaveToFile() throws Exce\n         assertTrue(imageFile.exists());\n     }\n \n-    @Test\n-    public void givenComponent_whenTakeScreenshot_thenSaveToFile(Component component) throws Exception {\n-        Rectangle componentRect = component.getBounds();\n-        BufferedImage bufferedImage = new BufferedImage(componentRect.width, componentRect.height, BufferedImage.TYPE_INT_ARGB);\n-        component.paint(bufferedImage.getGraphics());\n-        File imageFile = File.createTempFile(\"component-screenshot\", \"bmp\");\n-        ImageIO.write(bufferedImage, \"bmp\", imageFile);\n-        assertTrue(imageFile.exists());\n-    }\n+    //    This methods needs a component as a parameter and can only be run from an application with a GUI", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxMDc5Ng==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r513510796", "bodyText": "I think in this case we can rename the entire test to *ManualTest?", "author": "dkapil", "createdAt": "2020-10-28T14:54:25Z", "path": "core-java-modules/core-java-time-measurements/src/test/java/com/baeldung/time/ElapsedTimeUnitTest.java", "diffHunk": "@@ -50,19 +50,27 @@ public void givenRunningTask_whenMeasuringTimeWithStopWatch_thenGetElapsedTime()\n         \n         assertEquals(true, (2000L <= timeElapsed) && (timeElapsed <= 3000L));\n     }\n-    \n-    @Test\n+\n+    /*\n+     The below test depends on the elapsed time, which isn't ideal in a test.\n+     Also, it slows down test execution artificially.\n+     */\n+    /*@Test", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MzkwNg==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r514543906", "bodyText": "ok", "author": "Maiklins", "createdAt": "2020-10-29T20:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxMDc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjMzNw==", "url": "https://github.com/eugenp/tutorials/pull/10194#discussion_r514542337", "bodyText": "We are killing a \"random\" process. This can work or no, depending on if that process exists or not. Most likely it doesn't exist, so the test fails.", "author": "Maiklins", "createdAt": "2020-10-29T20:21:07Z", "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/java9/process/ProcessUnderstandingUnitTest.java", "diffHunk": "@@ -83,14 +61,6 @@ public void givenSubProcess_whenDestroyed_thenCheckIfAlive() throws IOException,\n         assertFalse(process.isAlive());\n     }\n \n-    @Test", "originalCommit": "39af870a1a9dd9015d20fe84dca051886ead3cec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f6c86d9a7270f9f46124408f9c2d2f078a2d87c", "url": "https://github.com/eugenp/tutorials/commit/6f6c86d9a7270f9f46124408f9c2d2f078a2d87c", "message": "JAVA-2824 Fix tests in Java 9 and above modules (Update after PR review)", "committedDate": "2020-10-29T21:01:15Z", "type": "commit"}]}