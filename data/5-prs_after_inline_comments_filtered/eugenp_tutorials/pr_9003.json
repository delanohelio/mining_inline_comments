{"pr_number": 9003, "pr_title": "[BAEL-2749] DBUnit", "pr_createdAt": "2020-03-31T16:00:37Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9003", "timeline": [{"oid": "eb6de304dac647a22b53c0305eb718fe202faa05", "url": "https://github.com/eugenp/tutorials/commit/eb6de304dac647a22b53c0305eb718fe202faa05", "message": "[BAEL-2749] create new module `dbunit`; add DbUnit tests: `OldSchoolDbUnitTest` + `PrepAndExpectedDbUnitTest` + relevant data", "committedDate": "2020-03-29T09:06:11Z", "type": "commit"}, {"oid": "e4ebf4f8e44d660371d3cebb6c8b96637009eeb2", "url": "https://github.com/eugenp/tutorials/commit/e4ebf4f8e44d660371d3cebb6c8b96637009eeb2", "message": "[BAEL-2749] add `SampleDbUnitTest` (extending `DBTestCase`)", "committedDate": "2020-03-29T09:06:11Z", "type": "commit"}, {"oid": "8af74a7a7febfd9f4882dedeedc50fdb20e149f6", "url": "https://github.com/eugenp/tutorials/commit/8af74a7a7febfd9f4882dedeedc50fdb20e149f6", "message": "[BAEL-2749] add dbunit module to parent pom", "committedDate": "2020-03-31T15:56:54Z", "type": "commit"}, {"oid": "3f63c94b57e17c7a9dec82765690b7c53450b4fa", "url": "https://github.com/eugenp/tutorials/commit/3f63c94b57e17c7a9dec82765690b7c53450b4fa", "message": "[BAEL-2749] Introduces Assertj and uses builder pattern", "committedDate": "2020-03-31T15:57:05Z", "type": "commit"}, {"oid": "c30b7d79dca78630e236b646b03c49990d2895b5", "url": "https://github.com/eugenp/tutorials/commit/c30b7d79dca78630e236b646b03c49990d2895b5", "message": "[BAEL-2749] Select and Delete for OldSchool", "committedDate": "2020-03-31T15:57:05Z", "type": "commit"}, {"oid": "e3ac902d6f6e085f002ea631897ae1995aab1394", "url": "https://github.com/eugenp/tutorials/commit/e3ac902d6f6e085f002ea631897ae1995aab1394", "message": "[BAEL-2749] Code refactoring", "committedDate": "2020-03-31T15:57:05Z", "type": "commit"}, {"oid": "23b06998efeddeb64768f357b46b0e553f3eb28c", "url": "https://github.com/eugenp/tutorials/commit/23b06998efeddeb64768f357b46b0e553f3eb28c", "message": "[BAEL-2749] Adds DataSourceBaseDBTestCase", "committedDate": "2020-03-31T15:57:06Z", "type": "commit"}, {"oid": "2e49cf7c64ba40b111e839339f30681b66298480", "url": "https://github.com/eugenp/tutorials/commit/2e49cf7c64ba40b111e839339f30681b66298480", "message": "[BAEL-2749] USERS table name changed to CLIENTS", "committedDate": "2020-03-31T15:57:06Z", "type": "commit"}, {"oid": "597892170007b100cce3dbac90a61e04551db011", "url": "https://github.com/eugenp/tutorials/commit/597892170007b100cce3dbac90a61e04551db011", "message": "[BAEL-2749] Insertion test with ignore cols", "committedDate": "2020-03-31T15:57:06Z", "type": "commit"}, {"oid": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "url": "https://github.com/eugenp/tutorials/commit/812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "message": "[BAEL-2749] Test Code Completion", "committedDate": "2020-03-31T15:57:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1NzAzNg==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401057036", "bodyText": "let's use at rule expected exception instead of the whole method check. this way we can granularly say when we expect the exception", "author": "rpvilao", "createdAt": "2020-03-31T16:39:41Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+    @Override\n+    protected DataSource getDataSource() {\n+        JdbcDataSource dataSource = new JdbcDataSource();\n+        dataSource.setURL(JDBC_URL);\n+        dataSource.setUser(\"sa\");\n+        dataSource.setPassword(\"\");\n+        return dataSource;\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        return new FlatXmlDataSetBuilder().build(getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"data.xml\"));\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+\n+    @Test\n+    public void testSimpleDataSet() throws SQLException {\n+        final Connection connection = getDataSource()\n+                .getConnection();\n+\n+        final ResultSet rs = connection\n+                .createStatement()\n+                .executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString(\"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testEmptySchema() throws Exception {\n+        IDataSet expectedDataSet = getDataSet();\n+        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\n+        IDataSet databaseDataSet = getConnection().createDataSet();\n+        ITable actualTable = databaseDataSet.getTable(\"CLIENTS\");\n+        Assertion.assertEquals(expectedTable, actualTable);\n+    }\n+\n+    @Test\n+    public void testAssertByQuery() throws Exception {\n+        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"expected-user.xml\"));\n+        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\n+        Connection conn = getDataSource().getConnection();\n+        conn.createStatement()\n+                .executeUpdate(\n+                        \"INSERT INTO CLIENTS (first_name, last_name) VALUES ('John', 'Jansen')\");\n+        ITable actualData = getConnection()\n+                .createQueryTable(\n+                        \"result_name\",\n+                        \"SELECT * FROM CLIENTS WHERE last_name='Jansen'\");\n+        Assertion.assertEqualsIgnoreCols(expectedTable, actualData, new String[]{\"id\"});\n+    }\n+\n+    @Test(expected = AssertionError.class)", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1NzM3Nw==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401057377", "bodyText": "difficult to read, let's build logical paragraphs", "author": "rpvilao", "createdAt": "2020-03-31T16:40:09Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+    @Override\n+    protected DataSource getDataSource() {\n+        JdbcDataSource dataSource = new JdbcDataSource();\n+        dataSource.setURL(JDBC_URL);\n+        dataSource.setUser(\"sa\");\n+        dataSource.setPassword(\"\");\n+        return dataSource;\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        return new FlatXmlDataSetBuilder().build(getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"data.xml\"));\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+\n+    @Test\n+    public void testSimpleDataSet() throws SQLException {\n+        final Connection connection = getDataSource()\n+                .getConnection();\n+\n+        final ResultSet rs = connection\n+                .createStatement()\n+                .executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString(\"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testEmptySchema() throws Exception {\n+        IDataSet expectedDataSet = getDataSet();\n+        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\n+        IDataSet databaseDataSet = getConnection().createDataSet();\n+        ITable actualTable = databaseDataSet.getTable(\"CLIENTS\");\n+        Assertion.assertEquals(expectedTable, actualTable);\n+    }\n+\n+    @Test\n+    public void testAssertByQuery() throws Exception {\n+        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"expected-user.xml\"));\n+        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\n+        Connection conn = getDataSource().getConnection();\n+        conn.createStatement()\n+                .executeUpdate(\n+                        \"INSERT INTO CLIENTS (first_name, last_name) VALUES ('John', 'Jansen')\");\n+        ITable actualData = getConnection()\n+                .createQueryTable(\n+                        \"result_name\",\n+                        \"SELECT * FROM CLIENTS WHERE last_name='Jansen'\");\n+        Assertion.assertEqualsIgnoreCols(expectedTable, actualData, new String[]{\"id\"});\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void testMultipleFailures() throws Exception {\n+        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(getClass().getClassLoader().getResourceAsStream(\"expected-multiple-failures.xml\"));", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1NzUwNQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401057505", "bodyText": "remove if not needed", "author": "rpvilao", "createdAt": "2020-03-31T16:40:20Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+    @Override\n+    protected DataSource getDataSource() {\n+        JdbcDataSource dataSource = new JdbcDataSource();\n+        dataSource.setURL(JDBC_URL);\n+        dataSource.setUser(\"sa\");\n+        dataSource.setPassword(\"\");\n+        return dataSource;\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        return new FlatXmlDataSetBuilder().build(getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"data.xml\"));\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+\n+    @Test\n+    public void testSimpleDataSet() throws SQLException {\n+        final Connection connection = getDataSource()\n+                .getConnection();\n+\n+        final ResultSet rs = connection\n+                .createStatement()\n+                .executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString(\"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testEmptySchema() throws Exception {\n+        IDataSet expectedDataSet = getDataSet();\n+        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\n+        IDataSet databaseDataSet = getConnection().createDataSet();\n+        ITable actualTable = databaseDataSet.getTable(\"CLIENTS\");\n+        Assertion.assertEquals(expectedTable, actualTable);\n+    }\n+\n+    @Test\n+    public void testAssertByQuery() throws Exception {\n+        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"expected-user.xml\"));\n+        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\n+        Connection conn = getDataSource().getConnection();\n+        conn.createStatement()\n+                .executeUpdate(\n+                        \"INSERT INTO CLIENTS (first_name, last_name) VALUES ('John', 'Jansen')\");\n+        ITable actualData = getConnection()\n+                .createQueryTable(\n+                        \"result_name\",\n+                        \"SELECT * FROM CLIENTS WHERE last_name='Jansen'\");\n+        Assertion.assertEqualsIgnoreCols(expectedTable, actualData, new String[]{\"id\"});\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void testMultipleFailures() throws Exception {\n+        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(getClass().getClassLoader().getResourceAsStream(\"expected-multiple-failures.xml\"));\n+        ITable expectedTable = expectedDataSet.getTable(\"ITEMS\");\n+        Connection conn = getDataSource().getConnection();\n+        conn.createStatement().executeUpdate(\"INSERT INTO ITEMS (title, price) VALUES ('Battery', '1000000')\");\n+        ITable actualData = getConnection().createDataSet().getTable(\"ITEMS\");\n+        DiffCollectingFailureHandler collectingHandler = new DiffCollectingFailureHandler();\n+        Assertion.assertEquals(expectedTable, actualData, collectingHandler);\n+        if (!collectingHandler.getDiffList().isEmpty()) {\n+            String message = (String) collectingHandler.getDiffList().stream().map(d -> formatDifference((Difference) d)).collect(joining(\"\\n\"));\n+//        throw new AssertionError(message);", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODMzOA==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401058338", "bodyText": "try with resources, we need to keep showing the good practices", "author": "rpvilao", "createdAt": "2020-03-31T16:41:34Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/DbUnitTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DBTestCase;\n+import org.dbunit.PropertiesBasedJdbcDatabaseTester;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_DRIVER;\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static com.baeldung.dbunit.ConnectionSettings.PASSWORD;\n+import static com.baeldung.dbunit.ConnectionSettings.USER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DbUnitTest extends DBTestCase {\n+\n+    public DbUnitTest(String name) {\n+        super(name);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_DRIVER_CLASS, JDBC_DRIVER);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_CONNECTION_URL, JDBC_URL);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_USERNAME, USER);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_PASSWORD, PASSWORD);\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        final InputStream is = DbUnitTest.class.getClassLoader().getResourceAsStream(\"data.xml\");\n+        return new FlatXmlDataSetBuilder().build(is);\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Test\n+    public void testSelect() throws Exception {\n+        final Connection connection = getConnection().getConnection();\n+\n+        final ResultSet rs = connection.createStatement().executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString( \"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testDelete() throws Exception {\n+        final Connection connection = getConnection().getConnection();\n+\n+        final InputStream is = DbUnitTest.class.getClassLoader().getResourceAsStream(\"items_exp_delete.xml\");", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODQwNQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401058405", "bodyText": "try with resources, we need to keep showing the good practices", "author": "rpvilao", "createdAt": "2020-03-31T16:41:40Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/DbUnitTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DBTestCase;\n+import org.dbunit.PropertiesBasedJdbcDatabaseTester;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_DRIVER;\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static com.baeldung.dbunit.ConnectionSettings.PASSWORD;\n+import static com.baeldung.dbunit.ConnectionSettings.USER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DbUnitTest extends DBTestCase {\n+\n+    public DbUnitTest(String name) {\n+        super(name);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_DRIVER_CLASS, JDBC_DRIVER);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_CONNECTION_URL, JDBC_URL);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_USERNAME, USER);\n+        System.setProperty(PropertiesBasedJdbcDatabaseTester.DBUNIT_PASSWORD, PASSWORD);\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        final InputStream is = DbUnitTest.class.getClassLoader().getResourceAsStream(\"data.xml\");\n+        return new FlatXmlDataSetBuilder().build(is);\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Test\n+    public void testSelect() throws Exception {\n+        final Connection connection = getConnection().getConnection();\n+\n+        final ResultSet rs = connection.createStatement().executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString( \"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testDelete() throws Exception {\n+        final Connection connection = getConnection().getConnection();\n+\n+        final InputStream is = DbUnitTest.class.getClassLoader().getResourceAsStream(\"items_exp_delete.xml\");\n+        ITable expectedTable = (new FlatXmlDataSetBuilder().build(is)).getTable(\"items\");\n+\n+        connection.createStatement().executeUpdate(\"delete from ITEMS where id = 2\");\n+\n+        final IDataSet databaseDataSet = getConnection().createDataSet();\n+        ITable actualTable = databaseDataSet.getTable(\"items\");\n+\n+        Assertion.assertEquals(expectedTable, actualTable);\n+    }\n+\n+    @Test\n+    public void testUpdate() throws Exception {\n+        final Connection connection = getConnection().getConnection();\n+\n+        final InputStream is = DbUnitTest.class.getClassLoader().getResourceAsStream(\"items_exp_rename.xml\");", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODgxMQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401058811", "bodyText": "try with resources, we need to keep showing the good practices", "author": "rpvilao", "createdAt": "2020-03-31T16:42:12Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/OldSchoolDbUnitTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.IDatabaseTester;\n+import org.dbunit.JdbcDatabaseTester;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.filter.DefaultColumnFilter;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_DRIVER;\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static com.baeldung.dbunit.ConnectionSettings.PASSWORD;\n+import static com.baeldung.dbunit.ConnectionSettings.USER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.dbunit.Assertion.assertEquals;\n+\n+public class OldSchoolDbUnitTest {\n+\n+    private static IDatabaseTester tester = null;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        tester = initDatabaseTester();\n+    }\n+\n+    private static IDatabaseTester initDatabaseTester() throws Exception {\n+        final JdbcDatabaseTester tester = new JdbcDatabaseTester(JDBC_DRIVER, JDBC_URL, USER, PASSWORD);\n+        tester.setDataSet(initDataSet());\n+        tester.setSetUpOperation(DatabaseOperation.REFRESH);\n+        tester.setTearDownOperation(DatabaseOperation.DELETE_ALL);\n+        return tester;\n+    }\n+\n+    private static IDataSet initDataSet() throws Exception {\n+        final InputStream is = OldSchoolDbUnitTest.class.getClassLoader().getResourceAsStream(\"data.xml\");\n+        return new FlatXmlDataSetBuilder().build(is);\n+    }\n+\n+    @Before\n+    public void setup() throws Exception {\n+        tester.onSetup();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        tester.onTearDown();\n+    }\n+\n+    @Test\n+    public void testSelect() throws Exception {\n+        final Connection connection = tester.getConnection().getConnection();\n+\n+        final ResultSet rs = connection.createStatement().executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString(\"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testIgnoringProduced() throws Exception {\n+        final Connection connection = tester.getConnection().getConnection();\n+        final String[] excludedColumns = {\"id\", \"produced\"};\n+        final IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(getClass().getClassLoader()", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1OTA3MQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401059071", "bodyText": "ok let's review all the places and do it everywhere", "author": "rpvilao", "createdAt": "2020-03-31T16:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1ODgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1OTM3MQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401059371", "bodyText": "to wrap lines we use operators, in this case it would be =", "author": "rpvilao", "createdAt": "2020-03-31T16:43:05Z", "path": "dbunit/src/test/java/com/baeldung/dbunit/PrepAndExpectedDbUnitTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.DefaultPrepAndExpectedTestCase;\n+import org.dbunit.IDatabaseTester;\n+import org.dbunit.JdbcDatabaseTester;\n+import org.dbunit.PrepAndExpectedTestCaseSteps;\n+import org.dbunit.VerifyTableDefinition;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.dbunit.util.fileloader.DataFileLoader;\n+import org.dbunit.util.fileloader.FlatXmlDataFileLoader;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_DRIVER;\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static com.baeldung.dbunit.ConnectionSettings.PASSWORD;\n+import static com.baeldung.dbunit.ConnectionSettings.USER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PrepAndExpectedDbUnitTest extends DefaultPrepAndExpectedTestCase {\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        setDatabaseTester(initDatabaseTester());\n+        setDataFileLoader(initDataFileLoader());\n+        super.setUp();\n+    }\n+\n+    private IDatabaseTester initDatabaseTester() throws Exception {\n+        final JdbcDatabaseTester tester = new JdbcDatabaseTester(JDBC_DRIVER, JDBC_URL, USER, PASSWORD);\n+        tester.setDataSet(initDataSet());\n+        tester.setSetUpOperation(DatabaseOperation.REFRESH);\n+        return tester;\n+    }\n+\n+    private IDataSet initDataSet() throws Exception {\n+        final InputStream is = getClass().getClassLoader().getResourceAsStream(\"data.xml\");\n+        return new FlatXmlDataSetBuilder().build(is);\n+    }\n+\n+    private DataFileLoader initDataFileLoader() {\n+        return new FlatXmlDataFileLoader();\n+    }\n+\n+    @Test\n+    public void testSelect() throws Exception {\n+        final Connection connection = getConnection().getConnection();\n+        final VerifyTableDefinition[] verifyTables = {new VerifyTableDefinition(\"CLIENTS\", new String[]{})};\n+        final String[] prepDataFiles = {\"/users.xml\"};\n+        final String[] expectedDataFiles = {\"/users.xml\"};\n+        final PrepAndExpectedTestCaseSteps testSteps =", "originalCommit": "812ff2f229d0d5e9ff01d9a98bed144654c6c5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26ec65a924f138fa37540b177c5ac2e7e6c3983c", "url": "https://github.com/eugenp/tutorials/commit/26ec65a924f138fa37540b177c5ac2e7e6c3983c", "message": "[BAEL-2749] Improves code and makes a copy in libraries-testing", "committedDate": "2020-03-31T18:18:11Z", "type": "commit"}, {"oid": "f6b9f67c16785eaae65bf80d4af177010b53f3af", "url": "https://github.com/eugenp/tutorials/commit/f6b9f67c16785eaae65bf80d4af177010b53f3af", "message": "[BAEL-2749] Removes dbunit module", "committedDate": "2020-03-31T18:19:11Z", "type": "commit"}, {"oid": "7d6caf5024d8c75781ea29e39ef1c38e57cca7f0", "url": "https://github.com/eugenp/tutorials/commit/7d6caf5024d8c75781ea29e39ef1c38e57cca7f0", "message": "[BAEL-2749] DBUnit documentation", "committedDate": "2020-04-01T05:44:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTIxOA==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401775218", "bodyText": "let's use an import here", "author": "rpvilao", "createdAt": "2020-04-01T17:10:15Z", "path": "libraries-testing/src/test/java/com/baeldung/dbunit/OldSchoolDbUnitTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.IDatabaseTester;\n+import org.dbunit.JdbcDatabaseTester;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.filter.DefaultColumnFilter;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_DRIVER;\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static com.baeldung.dbunit.ConnectionSettings.PASSWORD;\n+import static com.baeldung.dbunit.ConnectionSettings.USER;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.dbunit.Assertion.assertEquals;\n+\n+public class OldSchoolDbUnitTest {\n+\n+    private static IDatabaseTester tester = null;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        tester = initDatabaseTester();\n+    }\n+\n+    private static IDatabaseTester initDatabaseTester() throws Exception {\n+        final JdbcDatabaseTester tester = new JdbcDatabaseTester(JDBC_DRIVER, JDBC_URL, USER, PASSWORD);\n+        tester.setDataSet(initDataSet());\n+        tester.setSetUpOperation(DatabaseOperation.REFRESH);\n+        tester.setTearDownOperation(DatabaseOperation.DELETE_ALL);\n+        return tester;\n+    }\n+\n+    private static IDataSet initDataSet() throws Exception {\n+        try (final java.io.InputStream is = OldSchoolDbUnitTest.class.getClassLoader().getResourceAsStream(\"dbunit/data.xml\")) {\n+            return new FlatXmlDataSetBuilder().build(is);\n+        }\n+    }\n+\n+    @Before\n+    public void setup() throws Exception {\n+        tester.onSetup();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        tester.onTearDown();\n+    }\n+\n+    @Test\n+    public void testSelect() throws Exception {\n+        final Connection connection = tester.getConnection().getConnection();\n+\n+        final ResultSet rs = connection.createStatement().executeQuery(\"select * from iTEMS where id = 1\");\n+\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getString(\"title\")).isEqualTo(\"Grey T-Shirt\");\n+    }\n+\n+    @Test\n+    public void testIgnoringProduced() throws Exception {\n+        final Connection connection = tester.getConnection().getConnection();\n+        final String[] excludedColumns = {\"id\", \"produced\"};\n+        try (final java.io.InputStream is = getClass().getClassLoader()\n+                .getResourceAsStream(\"dbunit/expected-ignoring-registered_at.xml\")) {\n+            final IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(is);\n+            final ITable expectedTable = DefaultColumnFilter.excludedColumnsTable(expectedDataSet.getTable(\"ITEMS\"), excludedColumns);\n+\n+            connection.createStatement().executeUpdate(\"INSERT INTO ITEMS (title, price, produced)  VALUES('Necklace', 199.99, now())\");\n+\n+            final IDataSet databaseDataSet = tester.getConnection().createDataSet();\n+            final ITable actualTable = DefaultColumnFilter.excludedColumnsTable(databaseDataSet.getTable(\"ITEMS\"), excludedColumns);\n+\n+            Assertion.assertEquals(expectedTable, actualTable);\n+        }\n+    }\n+\n+    @Test\n+    public void testDelete() throws Exception {\n+        final Connection connection = tester.getConnection().getConnection();\n+\n+        try (final java.io.InputStream is =\n+                     OldSchoolDbUnitTest.class.getClassLoader()\n+                             .getResourceAsStream(\"dbunit/items_exp_delete.xml\");) {\n+            ITable expectedTable = new FlatXmlDataSetBuilder().build(is).getTable(\"items\");\n+\n+            connection.createStatement().executeUpdate(\"delete from ITEMS where id = 2\");\n+\n+            final IDataSet databaseDataSet = tester.getConnection().createDataSet();\n+            ITable actualTable = databaseDataSet.getTable(\"items\");\n+\n+            assertEquals(expectedTable, actualTable);\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithExcludedColumns() throws Exception {\n+        final Connection connection = tester.getConnection().getConnection();\n+\n+        try (final java.io.InputStream is =", "originalCommit": "7d6caf5024d8c75781ea29e39ef1c38e57cca7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTM5Ng==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401775396", "bodyText": "let's use imports on this one and the following", "author": "rpvilao", "createdAt": "2020-04-01T17:10:30Z", "path": "libraries-testing/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+    private static Logger logger = LoggerFactory.getLogger(DataSourceDBUnitTest.class);\n+\n+    @Override\n+    protected javax.sql.DataSource getDataSource() {\n+        JdbcDataSource dataSource = new JdbcDataSource();\n+        dataSource.setURL(JDBC_URL);\n+        dataSource.setUser(\"sa\");\n+        dataSource.setPassword(\"\");\n+        return dataSource;\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        try (java.io.InputStream resourceAsStream = getClass()", "originalCommit": "7d6caf5024d8c75781ea29e39ef1c38e57cca7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTc1MQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r401775751", "bodyText": "if the iTEMS is not on purpose that's put everything uppercase", "author": "rpvilao", "createdAt": "2020-04-01T17:10:59Z", "path": "libraries-testing/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+    private static Logger logger = LoggerFactory.getLogger(DataSourceDBUnitTest.class);\n+\n+    @Override\n+    protected javax.sql.DataSource getDataSource() {\n+        JdbcDataSource dataSource = new JdbcDataSource();\n+        dataSource.setURL(JDBC_URL);\n+        dataSource.setUser(\"sa\");\n+        dataSource.setPassword(\"\");\n+        return dataSource;\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        try (java.io.InputStream resourceAsStream = getClass()\n+                .getClassLoader()\n+                .getResourceAsStream(\"dbunit/data.xml\")) {\n+            return new FlatXmlDataSetBuilder().build(resourceAsStream);\n+        }\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+\n+    @Test\n+    public void testSimpleDataSet() throws SQLException {\n+        final Connection connection = getDataSource()\n+                .getConnection();\n+\n+        final ResultSet rs = connection\n+                .createStatement()\n+                .executeQuery(\"select * from iTEMS where id = 1\");", "originalCommit": "7d6caf5024d8c75781ea29e39ef1c38e57cca7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2f3f20ae35e4ae29c3f45d894aaf734bdbc5e04c", "url": "https://github.com/eugenp/tutorials/commit/2f3f20ae35e4ae29c3f45d894aaf734bdbc5e04c", "message": "[BAEL-2749] Uses static imports and uses code format", "committedDate": "2020-04-01T17:47:19Z", "type": "commit"}, {"oid": "1ff71f2ad50475024324e2d95ad1e577100f4e7c", "url": "https://github.com/eugenp/tutorials/commit/1ff71f2ad50475024324e2d95ad1e577100f4e7c", "message": "[BAEL-2749] Formats pom", "committedDate": "2020-04-01T18:02:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTE3MQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r402145171", "bodyText": "why? let's format it properly, it was ok before. annotations and method definitions on different lines", "author": "rpvilao", "createdAt": "2020-04-02T08:39:26Z", "path": "libraries-testing/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+        private static final Logger logger = LoggerFactory.getLogger(DataSourceDBUnitTest.class);\n+\n+        @Override protected javax.sql.DataSource getDataSource() {", "originalCommit": "1ff71f2ad50475024324e2d95ad1e577100f4e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NzkxNw==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r402167917", "bodyText": "Something went wrong with my autoformatting settings. Let me have a look at what happened.", "author": "jesperancinha", "createdAt": "2020-04-02T09:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTY5NQ==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r402145695", "bodyText": "we use 4 spaces indentation", "author": "rpvilao", "createdAt": "2020-04-02T08:40:15Z", "path": "libraries-testing/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+        private static final Logger logger = LoggerFactory.getLogger(DataSourceDBUnitTest.class);\n+\n+        @Override protected javax.sql.DataSource getDataSource() {\n+                JdbcDataSource dataSource = new JdbcDataSource();\n+                dataSource.setURL(JDBC_URL);\n+                dataSource.setUser(\"sa\");\n+                dataSource.setPassword(\"\");\n+                return dataSource;\n+        }\n+\n+        @Override protected IDataSet getDataSet() throws Exception {\n+                try (InputStream resourceAsStream = getClass().getClassLoader().getResourceAsStream(\"dbunit/data.xml\")) {", "originalCommit": "1ff71f2ad50475024324e2d95ad1e577100f4e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3MTg4Nw==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r402171887", "bodyText": "Yes, just found another issue with the indentation format. Sorry about this. I've just set this up correctly. I think its fine now.", "author": "jesperancinha", "createdAt": "2020-04-02T09:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NTY5NQ=="}], "type": "inlineReview"}, {"oid": "0a43b0f19af61795a1fd3fdeae308c3085fabc0c", "url": "https://github.com/eugenp/tutorials/commit/0a43b0f19af61795a1fd3fdeae308c3085fabc0c", "message": "[BAEL-2749] Indentation and annotations format", "committedDate": "2020-04-02T09:20:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2Mzk0MA==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r402363940", "bodyText": "one last thing on the PR, sorry I didn't notice before. We need to follow the test naming conventions: givenX_whenY_thenZ e.g.: whenSendingAPost_thenCorrectStatusCode more info on baeldung - for authors - 2 - code in the article\nif there are any tests in the article we need to update it there as well", "author": "rpvilao", "createdAt": "2020-04-02T14:37:10Z", "path": "libraries-testing/src/test/java/com/baeldung/dbunit/DataSourceDBUnitTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.baeldung.dbunit;\n+\n+import org.dbunit.Assertion;\n+import org.dbunit.DataSourceBasedDBTestCase;\n+import org.dbunit.assertion.DiffCollectingFailureHandler;\n+import org.dbunit.assertion.Difference;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITable;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.h2.jdbcx.JdbcDataSource;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static com.baeldung.dbunit.ConnectionSettings.JDBC_URL;\n+import static java.util.stream.Collectors.joining;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DataSourceDBUnitTest.class);\n+\n+    @Override\n+    protected javax.sql.DataSource getDataSource() {\n+        JdbcDataSource dataSource = new JdbcDataSource();\n+        dataSource.setURL(JDBC_URL);\n+        dataSource.setUser(\"sa\");\n+        dataSource.setPassword(\"\");\n+        return dataSource;\n+    }\n+\n+    @Override\n+    protected IDataSet getDataSet() throws Exception {\n+        try (InputStream resourceAsStream = getClass().getClassLoader().getResourceAsStream(\"dbunit/data.xml\")) {\n+            return new FlatXmlDataSetBuilder().build(resourceAsStream);\n+        }\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getSetUpOperation() {\n+        return DatabaseOperation.REFRESH;\n+    }\n+\n+    @Override\n+    protected DatabaseOperation getTearDownOperation() {\n+        return DatabaseOperation.DELETE_ALL;\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testSimpleDataSet() throws SQLException {", "originalCommit": "0a43b0f19af61795a1fd3fdeae308c3085fabc0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NzY3Nw==", "url": "https://github.com/eugenp/tutorials/pull/9003#discussion_r402777677", "bodyText": "just updated them.", "author": "jesperancinha", "createdAt": "2020-04-03T07:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2Mzk0MA=="}], "type": "inlineReview"}, {"oid": "1d84d448324cb3a6e9da474d082fcfb4d48c4427", "url": "https://github.com/eugenp/tutorials/commit/1d84d448324cb3a6e9da474d082fcfb4d48c4427", "message": "[BAEL-2749] Renaming test methods and running them with JUnit4", "committedDate": "2020-04-03T06:51:46Z", "type": "commit"}, {"oid": "885f256d9a03483b652472bd801e9fe9b72cf165", "url": "https://github.com/eugenp/tutorials/commit/885f256d9a03483b652472bd801e9fe9b72cf165", "message": "[BAEL-2749] Bumps DBUnit to version 2.7.0", "committedDate": "2020-04-08T06:25:21Z", "type": "commit"}]}