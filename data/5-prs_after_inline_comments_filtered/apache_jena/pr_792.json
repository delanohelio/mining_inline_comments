{"pr_number": 792, "pr_title": "JENA-1959 Added JsonLdReadContext", "pr_createdAt": "2020-09-03T10:21:08Z", "pr_url": "https://github.com/apache/jena/pull/792", "timeline": [{"oid": "f34fe628234994dd14084a6d4c640aaaa484a788", "url": "https://github.com/apache/jena/commit/f34fe628234994dd14084a6d4c640aaaa484a788", "message": "Added JsonLdReadContext", "committedDate": "2020-09-03T10:19:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MDIzMQ==", "url": "https://github.com/apache/jena/pull/792#discussion_r483640231", "bodyText": "Should be /*. (Yes - some other files have /** and need fixing)", "author": "afs", "createdAt": "2020-09-04T14:10:49Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDReadContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**", "originalCommit": "f34fe628234994dd14084a6d4c640aaaa484a788", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjkxMA==", "url": "https://github.com/apache/jena/pull/792#discussion_r483642910", "bodyText": "OK - I see the intention here but subclassing isn't going to work. This is because Context is also used in places where it is a container of settings from different subsystems - e.g. RIOT.getContext() is a global system place to have context settings. A subclass doesn't because it can't be shared.\nInstead, have a library class JsonLD with static functions.\npublic static void setOptions(Context cxt, JsonLdOptions opts) {\n        cxt.set(JsonLDReader.JSONLD_OPTIONS, opts);\n}", "author": "afs", "createdAt": "2020-09-04T14:15:26Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDReadContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot;\n+\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import org.apache.jena.atlas.web.ContentType;\n+import org.apache.jena.riot.lang.JsonLDReader;\n+import org.apache.jena.riot.system.StreamRDF;\n+import org.apache.jena.sparql.util.Context;\n+\n+import java.io.InputStream;\n+\n+/**\n+ * Set of parameters that can be used to control the reading of JSON-LD.\n+ *\n+ * This class provides setters to define a \"Context\" suitable to be passed as \n+ * last argument to  {@link ReaderRIOT#read(InputStream, String, ContentType, StreamRDF, Context)}\n+ * when the ReaderRIOT has been created with one of the JSON-LD RDFFormat variants (that is, when it is\n+ * an instance of {@link JsonLDReader})\n+ *\n+ * Parameters that are actually useful are ''documentLoader'' and ''produceGeneralizedRdf''.\n+ *\n+ */\n+public class JsonLDReadContext extends Context {", "originalCommit": "f34fe628234994dd14084a6d4c640aaaa484a788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5MjU0OQ==", "url": "https://github.com/apache/jena/pull/792#discussion_r483792549", "bodyText": "I was doing the same as it is being done in JsonLdWriteContext. Why would it work for the writer and not for the reader?\nThe only thing this class is doing is to forward the set method calls to the parent context. It is just a helper for people who wants to create a JsonLdReaderContext (same as right now with JsonLdWriterContext). But the class hierarchy here doesn't matter", "author": "umbreak", "createdAt": "2020-09-04T18:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MzQ0OQ==", "url": "https://github.com/apache/jena/pull/792#discussion_r483983449", "bodyText": "OK - I see now. I hadn't remembered JsonLdWriteContext; I'd also jumped to the conclusion that JsonLdReadContext would be used where general Context is.\nSame style as existing is fine; if is to be changed, that's a separate work item.", "author": "afs", "createdAt": "2020-09-05T20:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NjMxNw==", "url": "https://github.com/apache/jena/pull/792#discussion_r483646317", "bodyText": "RIOT holds the public constants so an app does not need to import class JsonLDReader (which is in a subpackage).\nIt is possibly used by existing Jena applications so there is a compatibility issue here.\nWhile not a perfect way to achieve a tidy separate of public and implementation I think we ought to keep the current style (and for JSONLD_OPTONS) unless there is a specific reason for this change.", "author": "afs", "createdAt": "2020-09-04T14:21:24Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/RIOT.java", "diffHunk": "@@ -109,13 +109,6 @@ public static String getBuildDate() {\n \n     // ---- Symbols\n \n-    /**\n-     * Symbol to use to pass (in a Context object) the \"@context\" to be used when reading jsonld\n-     * (overriding the actual @context in the jsonld)\n-     * Expected value: the value of the \"@context\",\n-     * as expected by the JSONLD-java API (a Map) */\n-    public static final Symbol JSONLD_CONTEXT = Symbol.create(\"http://jena.apache.org/riot/jsonld#JSONLD_CONTEXT\");\n-", "originalCommit": "f34fe628234994dd14084a6d4c640aaaa484a788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5NDM1Mw==", "url": "https://github.com/apache/jena/pull/792#discussion_r483794353", "bodyText": "Same argument goes here: I was trying to build it consistent to the JsonLdWriter.\nBut I can keep it if you prefer. Right now I flagged it as deprecated.", "author": "umbreak", "createdAt": "2020-09-04T18:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MzU3MQ==", "url": "https://github.com/apache/jena/pull/792#discussion_r483983571", "bodyText": "As above, existing style is fine.\nLeaving the constant, whether deprecated or not, helps migration.\n(and I don't know why it is in RIOT in the first place.)", "author": "afs", "createdAt": "2020-09-05T20:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MTUxNw==", "url": "https://github.com/apache/jena/pull/792#discussion_r483651517", "bodyText": "/*", "author": "afs", "createdAt": "2020-09-04T14:30:02Z", "path": "jena-arq/src/test/java/org/apache/jena/riot/TestJsonLDReader.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/*\n+/**", "originalCommit": "f34fe628234994dd14084a6d4c640aaaa484a788", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MTU1Ng==", "url": "https://github.com/apache/jena/pull/792#discussion_r483651556", "bodyText": "I'm getting warnings on lines 114, 139: these should be suppressed (it makes it easier to see when new warnings appear in the codebase).\nMap is a raw type. References to generic type Map<K,V> should be parameterized\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 139\nType safety: The method put(Object, Object) belongs to the raw type Map. References to generic type Map<K,V> should be parameterized\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 139\nUnnecessary @SuppressWarnings(\"rawtypes\")\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 114\nUnnecessary @SuppressWarnings(\"unchecked\")\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 114", "author": "afs", "createdAt": "2020-09-04T14:30:07Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/JsonLDReader.java", "diffHunk": "@@ -112,8 +130,21 @@ public void read(InputStream in, String baseURI, ContentType ct, StreamRDF outpu\n             IO.exception(e) ;\n         }\n     }\n-    \n-    private void read$(Object jsonObject, String baseURI, ContentType ct, final StreamRDF output, Context context) {\n+\n+    private void readWithJsonLDCtxOptions(Object jsonObject, String baseURI, final StreamRDF output, Context context)  throws JsonParseException, IOException {\n+        JsonLdOptions options = getJsonLdOptions(baseURI, context) ;\n+        Object jsonldCtx = getJsonLdContext(context);\n+        if (jsonldCtx != null) {\n+            if (jsonObject instanceof Map) {\n+                ((Map) jsonObject).put(\"@context\", jsonldCtx);", "originalCommit": "f34fe628234994dd14084a6d4c640aaaa484a788", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjM0OA==", "url": "https://github.com/apache/jena/pull/792#discussion_r483652348", "bodyText": "JSON-LD is a dataset format and  can encode datasets (quads) as well as a single graph.", "author": "afs", "createdAt": "2020-09-04T14:31:22Z", "path": "jena-arq/src/test/java/org/apache/jena/riot/TestJsonLDReader.java", "diffHunk": "@@ -18,127 +18,123 @@\n \n package org.apache.jena.riot;\n \n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-\n import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.github.jsonldjava.core.DocumentLoader;\n+import com.github.jsonldjava.core.JsonLdOptions;\n import com.github.jsonldjava.utils.JsonUtils;\n-\n-import org.apache.jena.query.Dataset;\n-import org.apache.jena.query.DatasetFactory;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.riot.lang.JsonLDReader;\n import org.apache.jena.riot.system.ErrorHandlerFactory;\n import org.apache.jena.sparql.util.Context;\n import org.apache.jena.vocabulary.RDF;\n import org.junit.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertTrue;\n+\n public class TestJsonLDReader {\n \n     @Test\n-    public final void simpleReadTest() {\n-        try {\n-            String jsonld = someSchemaDorOrgJsonld();\n-            Model m = ModelFactory.createDefaultModel();\n-            RDFParser.create()\n-                .errorHandler(ErrorHandlerFactory.errorHandlerNoLogging)\n-                .fromString(jsonld)\n-                .lang(Lang.JSONLD)\n-                .parse(m);\n-            assertJohnDoeIsOK(m);\n-        } catch (RiotException e) {\n-            // cf. org.apache.jena.riot.RiotException: loading remote context failed: http://schema.org/\n-            // There's a line printed anyway\n-            // e.printStackTrace();\n-        }\n+    public final void simpleReadTest() throws IOException {\n+        String jsonld = someSchemaDorOrgJsonld();\n+        Model m = jsonld2model(jsonld, null);\n+        assertJohnDoeIsOK(m);\n     }\n \n-    /** Test using the jena Context mechanism to pass the jsonld \"@context\" */\n-    @Test public final void overrideAtContextTest() throws JsonGenerationException, IOException {\n+    /**\n+     * Test using the jena Context mechanism to pass the jsonld \"@context\"\n+     */\n+    @Test\n+    public final void overrideAtContextTest() throws JsonGenerationException, IOException {\n         // some jsonld using schema.org's URI as \"@context\"\n         String jsonld = someSchemaDorOrgJsonld();\n \n         // a subset of schema.org that can be used as @context for jsonld\n-        String jsonldContext = \"{\\\"name\\\":{\\\"@id\\\":\\\"http://schema.org/name\\\"},\\\"Person\\\": {\\\"@id\\\": \\\"http://schema.org/Person\\\"}}\";\n+        String jsonldContext = \"{\\\"name\\\":{\\\"@id\\\":\\\"http://schema.org/name\\\", \\\"@type\\\": \\\"http://www.w3.org/2001/XMLSchema#other\\\"},\\\"Person\\\": {\\\"@id\\\": \\\"http://schema.org/Person\\\"}}\";\n \n         // pass the jsonldContext to the read using a jena Context\n         Context jenaCtx = new Context();\n         Object jsonldContextAsMap = JsonUtils.fromInputStream(new ByteArrayInputStream(jsonldContext.getBytes(StandardCharsets.UTF_8)));\n-        jenaCtx.set(RIOT.JSONLD_CONTEXT, jsonldContextAsMap);\n+        jenaCtx.set(JsonLDReader.JSONLD_CONTEXT, jsonldContextAsMap);\n \n         // read the jsonld, replacing its \"@context\"\n-        Dataset ds = jsonld2dataset(jsonld, jenaCtx);\n+        Model m = jsonld2model(jsonld, jenaCtx);\n \n         // check ds is correct\n-        assertJohnDoeIsOK(ds.getDefaultModel());\n+        assertJohnDoeIsOK(m);\n     }\n \n-    /** Not really useful, but one can replace the @context by a URI: in this case, this URI is used when expanding the json\n-     * (letting JSON-LD java API taking care of downloading the context. */\n-    // well, as of this writing, it doesn't work, as we get a \"loading remote context failed\"\n-    // But it is about the replacing URI, not the replaced one, showing that the mechanism does work\n-    @Test public final void overrideAtContextByURITest() throws JsonGenerationException, IOException {\n+    /**\n+     * Not really useful, but one can replace the @context by a URI: in this case, this URI is used when expanding the json\n+     * (letting JSON-LD java API taking care of downloading the context.\n+     */\n+    @Test\n+    public final void overrideJsonLdOptionsAndContextUri() throws JsonGenerationException, IOException {\n         // some jsonld using a (fake) pseudo.schema.org's URI as \"@context\"\n         String jsonld = \"{\\\"@id\\\":\\\"_:b0\\\",\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"John Doe\\\",\\\"@context\\\":\\\"http://pseudo.schema.org/\\\"}\";\n \n         // a subset of schema.org that can be used as @context for jsonld\n         String jsonldContext = \"\\\"http://schema.org\\\"\";\n \n-        // pass the jsonldContext to the read using a jena Context\n-        Context jenaCtx = new Context();\n-        Object jsonldContextAsObject = JsonUtils.fromInputStream(new ByteArrayInputStream(jsonldContext.getBytes(StandardCharsets.UTF_8)));\n-        jenaCtx.set(RIOT.JSONLD_CONTEXT, jsonldContextAsObject);\n-\n-        try {\n-            // read the jsonld, replacing its \"@context\"\n-            Dataset ds = jsonld2dataset(jsonld, jenaCtx);\n-\n-            // check ds is correct\n-            assertJohnDoeIsOK(ds.getDefaultModel());\n-        } catch (RiotException e) {\n-            // cf. org.apache.jena.riot.RiotException: loading remote context failed: http://schema.org/\n-            // There's a line printed anyway\n-            // e.printStackTrace();\n-        }\n+        JsonLdOptions options = new JsonLdOptions();\n+        DocumentLoader dl = new DocumentLoader();\n+        dl.addInjectedDoc(\"http://schema.org\", String.format(\"{%s}\", schemaOrgContext()));\n+        options.setDocumentLoader(dl);\n+\n+        // pass the jsonldContext and JsonLdOptions to the read using a jena Context\n+        JsonLDReadContext jenaCtx = new JsonLDReadContext();\n+        jenaCtx.setJsonLDContext(jsonldContext);\n+        jenaCtx.setOptions(options);\n+\n+        // read the jsonld, replacing its \"@context\"\n+        Model m = jsonld2model(jsonld, jenaCtx);\n+\n+        // check ds is correct\n+        assertJohnDoeIsOK(m);\n     }\n \n     //\n     //\n     //\n \n-    /**\n-     * Reading some jsonld String, using a Context\n-     * @return a new Dataset\n-     * @throws IOException\n-     */\n-    private Dataset jsonld2dataset(String jsonld, Context jenaCtx) throws IOException {", "originalCommit": "f34fe628234994dd14084a6d4c640aaaa484a788", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3002f489ed8a439f4083814a9e8bfe35a3bd4a07", "url": "https://github.com/apache/jena/commit/3002f489ed8a439f4083814a9e8bfe35a3bd4a07", "message": "Fixed license", "committedDate": "2020-09-04T19:59:54Z", "type": "commit"}, {"oid": "9bd873f0b1c2b0e47d79297c216c6a10c02348db", "url": "https://github.com/apache/jena/commit/9bd873f0b1c2b0e47d79297c216c6a10c02348db", "message": "Supress warnings", "committedDate": "2020-09-04T20:23:09Z", "type": "commit"}, {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7", "url": "https://github.com/apache/jena/commit/6e16f2025434ecc639fdba60c126ceca5500c2d7", "message": "Addressed PR feedback", "committedDate": "2020-09-05T05:47:58Z", "type": "commit"}, {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7", "url": "https://github.com/apache/jena/commit/6e16f2025434ecc639fdba60c126ceca5500c2d7", "message": "Addressed PR feedback", "committedDate": "2020-09-05T05:47:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNTA1OA==", "url": "https://github.com/apache/jena/pull/792#discussion_r486425058", "bodyText": "Please remove the  and indent the URL so that the text is exactly the same as other files.\nBecause this is a new file, it is better that the contributor does this and not the project. License/copyright notices are sacrosanct!", "author": "afs", "createdAt": "2020-09-10T15:15:11Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDReadContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>", "originalCommit": "6e16f2025434ecc639fdba60c126ceca5500c2d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTQyNQ==", "url": "https://github.com/apache/jena/pull/792#discussion_r486429425", "bodyText": "Ditto.", "author": "afs", "createdAt": "2020-09-10T15:20:45Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDWriteContext.java", "diffHunk": "@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>", "originalCommit": "6e16f2025434ecc639fdba60c126ceca5500c2d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af3f33d40d8356f0fb5ea0ec82e4894dedc19555", "url": "https://github.com/apache/jena/commit/af3f33d40d8356f0fb5ea0ec82e4894dedc19555", "message": "Fixed licensing formatting", "committedDate": "2020-09-11T06:16:02Z", "type": "commit"}]}