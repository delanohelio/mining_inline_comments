{"pr_number": 720, "pr_title": "JENA-1875: Context for Turtle related stream writers.", "pr_createdAt": "2020-03-31T08:46:39Z", "pr_url": "https://github.com/apache/jena/pull/720", "timeline": [{"oid": "4385801ebc7e6924ede47b39ca520528e4cec897", "url": "https://github.com/apache/jena/commit/4385801ebc7e6924ede47b39ca520528e4cec897", "message": "JENA-1875: Context argument for stream writers", "committedDate": "2020-03-31T07:40:55Z", "type": "commit"}, {"oid": "c30990f878f8e2dfbb9f12e31248a6d2c27752de", "url": "https://github.com/apache/jena/commit/c30990f878f8e2dfbb9f12e31248a6d2c27752de", "message": "JENA-1761: Switchable writing of @base/BASE", "committedDate": "2020-03-31T08:27:51Z", "type": "commit"}, {"oid": "75da71c33637844ae459450ddf9c55aaf931d8a8", "url": "https://github.com/apache/jena/commit/75da71c33637844ae459450ddf9c55aaf931d8a8", "message": "JENA-1875: Context argument for stream writers (Elephas)", "committedDate": "2020-03-31T12:45:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNDc5OA==", "url": "https://github.com/apache/jena/pull/720#discussion_r401234798", "bodyText": "Should we use try-with-resources here to close it later? Test only so I think it may not matter much.", "author": "kinow", "createdAt": "2020-03-31T21:46:49Z", "path": "jena-arq/src/test/java/org/apache/jena/riot/writer/TestTurtleWriter.java", "diffHunk": "@@ -55,70 +60,110 @@ static void blankNodeLang(String testdata, RDFFormat lang) {\n         Model m = ModelFactory.createDefaultModel() ;\n         RDFDataMgr.read(m, r, null, RDFLanguages.NTRIPLES) ;\n         Assert.assertTrue(m.size() > 0);\n-        \n+\n         ByteArrayOutputStream output = new ByteArrayOutputStream();\n         RDFDataMgr.write(output, m, lang);\n-        \n+\n         ByteArrayInputStream input = new ByteArrayInputStream(output.toByteArray());\n         Model m2 = ModelFactory.createDefaultModel();\n         RDFDataMgr.read(m2, input, lang.getLang());\n-        \n+\n         Assert.assertTrue(m2.size() > 0);\n         Assert.assertTrue(m.isIsomorphicWith(m2));\n     }\n-    \n-    // Tests from JENA-908 \n+\n+    // Tests from JENA-908\n     @Test\n     public void bnode_cycles_01() { blankNodeLang(cycle1, RDFFormat.TURTLE) ; }\n-    \n+\n     @Test\n     public void bnode_cycles_02() { blankNodeLang(cycle1, RDFFormat.TURTLE_BLOCKS) ; }\n-    \n+\n     @Test\n     public void bnode_cycles_03() { blankNodeLang(cycle1, RDFFormat.TURTLE_FLAT) ; }\n-    \n+\n     @Test\n     public void bnode_cycles_04() { blankNodeLang(cycle1, RDFFormat.TURTLE_PRETTY) ; }\n \n     @Test\n     public void bnode_cycles_05() { blankNodeLang(cycle2, RDFFormat.TURTLE) ; }\n-    \n+\n     @Test\n     public void bnode_cycles_06() { blankNodeLang(cycle2, RDFFormat.TURTLE_BLOCKS) ; }\n-    \n+\n     @Test\n     public void bnode_cycles_07() { blankNodeLang(cycle2, RDFFormat.TURTLE_FLAT) ; }\n-    \n+\n     @Test\n     public void bnode_cycles_08() { blankNodeLang(cycle2, RDFFormat.TURTLE_PRETTY) ; }\n \n     @Test\n     public void bnode_cycles() {\n         Model m = RDFDataMgr.loadModel(\"testing/DAWG-Final/construct/data-ident.ttl\");\n         Assert.assertTrue(m.size() > 0);\n-        \n+\n         ByteArrayOutputStream output = new ByteArrayOutputStream();\n         RDFDataMgr.write(output, m, Lang.TURTLE);\n-        \n+\n         ByteArrayInputStream input = new ByteArrayInputStream(output.toByteArray());\n         Model m2 = ModelFactory.createDefaultModel();\n         RDFDataMgr.read(m2, input, Lang.TURTLE);\n         Assert.assertTrue(m2.size() > 0);\n-        \n+\n         Assert.assertTrue(m.isIsomorphicWith(m2));\n     }\n-    \n+\n+    // @base\n     @Test\n-    public void test_base() {\n-        InputStream r = new ByteArrayInputStream(TestTurtleWriter.basetester.getBytes()) ;\n-        String b = \"http://example.org/\" ;\n-        Model m = ModelFactory.createDefaultModel() ;\n-        m.read(r, b, \"TTL\") ;\n+    public void test_base_1() {\n+        // Default base style\n+        String result = modelToString(baseTestData, RDFFormat.TURTLE_FLAT, null);\n+        int count1 = StringUtils.countMatches(result, \"@base\");\n+        Assert.assertEquals(1, count1);\n+        int count2 = StringUtils.countMatches(result, \"BASE\");\n+        Assert.assertEquals(0, count2);\n+    }\n+\n+    @Test\n+    public void test_base_2() {\n+        Context cxt = RIOT.getContext().copy();\n+        cxt.set(RIOT.symTurtleDirectiveStyle, DirectiveStyle.AT);\n+        String result = modelToString(baseTestData, RDFFormat.TURTLE_BLOCKS, null);\n+        int count1 = StringUtils.countMatches(result, \"@base\");\n+        Assert.assertEquals(1, count1);\n+        int count2 = StringUtils.countMatches(result, \"BASE\");\n+        Assert.assertEquals(0, count2);\n+    }\n+\n+\n+    // BASE\n+    @Test\n+    public void test_base_3() {\n+        Context cxt = RIOT.getContext().copy();\n+        cxt.set(RIOT.symTurtleDirectiveStyle, DirectiveStyle.SPARQL);\n+        String result = modelToString(baseTestData, RDFFormat.TURTLE_FLAT, cxt);\n+        int count1 = StringUtils.countMatches(result, \"BASE\");\n+        Assert.assertEquals(1, count1);\n+        int count2 = StringUtils.countMatches(result, \"@base\");\n+        Assert.assertEquals(0, count2);\n+    }\n+\n+    @Test\n+    public void test_base_4() {\n+        Context cxt = RIOT.getContext().copy();\n+        cxt.set(RIOT.symTurtleDirectiveStyle, DirectiveStyle.SPARQL);\n+        String result = modelToString(baseTestData, RDFFormat.TURTLE_BLOCKS, cxt);\n+        int count1 = StringUtils.countMatches(result, \"BASE\");\n+        Assert.assertEquals(1, count1);\n+        int count2 = StringUtils.countMatches(result, \"@base\");\n+        Assert.assertEquals(0, count2);\n+    }\n \n-        OutputStream o = new ByteArrayOutputStream() ;\n-        RDFWriter.create().source(m).format(RDFFormat.TURTLE_BLOCKS).base(b).output(o) ;\n-        String k = o.toString() ;\n-        Assert.assertTrue(k.contains(\"@base\")) ;\n+    private String modelToString(Model model, RDFFormat format, Context context) {\n+        ByteArrayOutputStream o = new ByteArrayOutputStream();", "originalCommit": "75da71c33637844ae459450ddf9c55aaf931d8a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0Mjg4NA==", "url": "https://github.com/apache/jena/pull/720#discussion_r401742884", "bodyText": "It's a ByteArrayOutputStream so no external resources.\nChange made.\n(Hmm - now we need to handle IOException!)", "author": "afs", "createdAt": "2020-04-01T16:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNDc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjMwOQ==", "url": "https://github.com/apache/jena/pull/720#discussion_r401236309", "bodyText": "If it's not changed elsewhere, maybe it could be final too? Otherwise it could lead to inconsistent results if multiple thread access directiveStyle I think? (as it returns its value there)", "author": "kinow", "createdAt": "2020-03-31T21:49:52Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/writer/WriterLib.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot.writer;\n+\n+import org.apache.jena.riot.RIOT;\n+import org.apache.jena.sparql.util.Context;\n+\n+/** Package-scoped utilities */\n+/*package*/ class WriterLib {\n+\n+    static DirectiveStyle dftDirectiveStyle = DirectiveStyle.AT;", "originalCommit": "75da71c33637844ae459450ddf9c55aaf931d8a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0Mjg2OQ==", "url": "https://github.com/apache/jena/pull/720#discussion_r401742869", "bodyText": "Yes. Done.", "author": "afs", "createdAt": "2020-04-01T16:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjUwMQ==", "url": "https://github.com/apache/jena/pull/720#discussion_r401236501", "bodyText": "Nice \ud83d\udc4d", "author": "kinow", "createdAt": "2020-03-31T21:50:17Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/writer/TurtleShell.java", "diffHunk": "@@ -82,21 +67,7 @@ protected TurtleShell(IndentedWriter out, PrefixMap pmap, String baseURI, NodeFo\n         this.baseURI = baseURI ;\n         this.nodeFmt = nodeFmt ;\n         this.context = context;\n-        this.prefixStyle = prefixStyle(context) ;\n-    }\n-\n-    // Determine the prefix style (applies to BASE as well).\n-    private static PrefixStyle prefixStyle(Context context) {\n-        Object x = context.get(RIOT.symTurtlePrefixStyle) ;\n-        if ( x instanceof String ) {\n-            String s = (String)x ;\n-            PrefixStyle style = PrefixStyle.create(s);\n-            return style == null ? dftPrefixStyle : style;\n-        }\n-        if ( x instanceof PrefixStyle )\n-            return (PrefixStyle)x ;\n-        // Default choice; includes null in context.\n-        return dftPrefixStyle;\n+        this.prefixStyle = WriterLib.directiveStyle(context) ;", "originalCommit": "75da71c33637844ae459450ddf9c55aaf931d8a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjY3OA==", "url": "https://github.com/apache/jena/pull/720#discussion_r401236678", "bodyText": "Missing newline at the end of the file? Important for git I think...", "author": "kinow", "createdAt": "2020-03-31T21:50:38Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/writer/DirectiveStyle.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot.writer;\n+\n+enum DirectiveStyle {\n+    AT, SPARQL ;\n+    public static DirectiveStyle create(String label) {\n+        String s = label.toLowerCase() ;\n+        switch(s) {\n+            case \"rdf_10\": case \"rdf10\": case \"n3\": case \"at\":\n+                return DirectiveStyle.AT ;\n+            case \"rdf_11\": case \"rdf11\": case \"sparql\":\n+                return DirectiveStyle.SPARQL ;\n+        }\n+        return null;\n+    }\n+}", "originalCommit": "75da71c33637844ae459450ddf9c55aaf931d8a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MjgyNA==", "url": "https://github.com/apache/jena/pull/720#discussion_r401742824", "bodyText": "OK - done.", "author": "afs", "createdAt": "2020-04-01T16:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNjY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNzgzNg==", "url": "https://github.com/apache/jena/pull/720#discussion_r401237836", "bodyText": "Just checking, the other one looks like Turtle with a . at the end. This new style doesn't need that right?", "author": "kinow", "createdAt": "2020-03-31T21:53:17Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/system/RiotLib.java", "diffHunk": "@@ -342,45 +342,51 @@ private static void writeBaseOldStyle(IndentedWriter out, String base) {\n         }\n     }\n \n-    /** Write prefixes, using {@code PREFIX} */ \n+    /** Write prefixes */ \n     public static void writePrefixes(IndentedWriter out, PrefixMap prefixMap, boolean newStyle) {\n-        if ( newStyle )\n-            writePrefixesNewStyle(out, prefixMap);\n-        else\n-            writePrefixesOldStyle(out, prefixMap);\n-    }\n-    \n-    /** Write prefixes, using {@code PREFIX} */ \n-    private static void writePrefixesNewStyle(IndentedWriter out, PrefixMap prefixMap) {\n         if ( prefixMap != null && !prefixMap.isEmpty() ) {\n             for ( Map.Entry<String, String> e : prefixMap.getMapping().entrySet() ) {\n-                out.print(\"PREFIX \");\n-                out.print(e.getKey());\n-                out.print(\": \");\n-                out.pad(PREFIX_IRI);\n-                out.print(\"<\");\n-                out.print(e.getValue());\n-                out.print(\">\");\n-                out.println();\n+                if ( newStyle )\n+                    writePrefixNewStyle(out, e.getKey(), e.getValue());\n+                else\n+                    writePrefixOldStyle(out, e.getKey(), e.getValue());\n             }\n         }\n     }\n+    \n+    /** Write a prefix.\n+     * Write using {@code @prefix} or {@code PREFIX}.\n+     */ \n+    public static void writePrefix(IndentedWriter out, String prefix, String uri, boolean newStyle) {\n+        if ( newStyle )\n+            writePrefixNewStyle(out, prefix, uri);\n+        else\n+            writePrefixOldStyle(out, prefix, uri);\n+    }\n+\n+    /** Write prefix, using {@code PREFIX} */ \n+    private static void writePrefixNewStyle(IndentedWriter out, String prefix, String uri) {\n+        out.print(\"PREFIX \");\n+        out.print(prefix);\n+        out.print(\": \");\n+        out.pad(PREFIX_IRI);\n+        out.print(\"<\");\n+        out.print(uri);\n+        out.print(\">\");\n+        out.println();", "originalCommit": "75da71c33637844ae459450ddf9c55aaf931d8a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzODA1Mw==", "url": "https://github.com/apache/jena/pull/720#discussion_r401238053", "bodyText": "\ud83d\udc4d", "author": "kinow", "createdAt": "2020-03-31T21:53:43Z", "path": "jena-arq/src/main/java/org/apache/jena/riot/system/StreamRDFOps.java", "diffHunk": "@@ -103,8 +107,18 @@ public static void sendGraphToStream(Graph graph, StreamRDF stream) {\n         sendGraphToStream(graph, stream, prefixMap) ;\n     }\n     \n-    /** Send the triples of graph and an explicitly given prefix mapping, to a StreamRDF */\n+    /**\n+     * @deprecated prefer {@link #sendGraphToStream(Graph, StreamRDF, String, PrefixMap)} with a null base URI.", "originalCommit": "75da71c33637844ae459450ddf9c55aaf931d8a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "096411efec61dc4bc76c149d1d3ec0a1527a349c", "url": "https://github.com/apache/jena/commit/096411efec61dc4bc76c149d1d3ec0a1527a349c", "message": "JENA-1875: Context argument for stream writers (Elephas)", "committedDate": "2020-04-01T16:49:08Z", "type": "commit"}, {"oid": "096411efec61dc4bc76c149d1d3ec0a1527a349c", "url": "https://github.com/apache/jena/commit/096411efec61dc4bc76c149d1d3ec0a1527a349c", "message": "JENA-1875: Context argument for stream writers (Elephas)", "committedDate": "2020-04-01T16:49:08Z", "type": "forcePushed"}]}