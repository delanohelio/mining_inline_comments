{"pr_number": 8818, "pr_title": "MULE-18335: Mule is waiting for inflight events to close idle connections during shutdown", "pr_createdAt": "2020-04-22T12:58:05Z", "pr_url": "https://github.com/mulesoft/mule/pull/8818", "timeline": [{"oid": "69be51cc42c615cf25bb9909a2f2dc18c7700d03", "url": "https://github.com/mulesoft/mule/commit/69be51cc42c615cf25bb9909a2f2dc18c7700d03", "message": "Moving stop before workManager dispose", "committedDate": "2020-04-23T13:48:36Z", "type": "commit"}, {"oid": "e222fad4a3b1856864cd75252b694a6bd34146f8", "url": "https://github.com/mulesoft/mule/commit/e222fad4a3b1856864cd75252b694a6bd34146f8", "message": "Remove first wait because it causes a delay between stop signal and closing idle connections", "committedDate": "2020-04-23T13:48:36Z", "type": "commit"}, {"oid": "016b0c2e869521ffc23421cb73ce624748b1e594", "url": "https://github.com/mulesoft/mule/commit/016b0c2e869521ffc23421cb73ce624748b1e594", "message": "first version of test; update grizzly", "committedDate": "2020-04-23T13:48:37Z", "type": "commit"}, {"oid": "8e752acd9873bdccafc577b1393182dee0aa1170", "url": "https://github.com/mulesoft/mule/commit/8e752acd9873bdccafc577b1393182dee0aa1170", "message": "Improving tests", "committedDate": "2020-04-23T17:47:27Z", "type": "commit"}, {"oid": "8e752acd9873bdccafc577b1393182dee0aa1170", "url": "https://github.com/mulesoft/mule/commit/8e752acd9873bdccafc577b1393182dee0aa1170", "message": "Improving tests", "committedDate": "2020-04-23T17:47:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0ODU4Ng==", "url": "https://github.com/mulesoft/mule/pull/8818#discussion_r414548586", "bodyText": "use constants.", "author": "fsgonz", "createdAt": "2020-04-24T12:47:04Z", "path": "transports/http/src/test/java/org/mule/transport/http/functional/HttpServerStopTestCase.java", "diffHunk": "@@ -35,31 +41,93 @@ protected String getConfigFile()\n         return \"http-listener-stop.xml\";\n     }\n \n+    @After\n+    public void startMuleContextIfStopped() throws MuleException\n+    {\n+        if (muleContext.isStopped())\n+        {\n+            muleContext.start();\n+        }\n+    }\n+\n     @Test\n     public void closeClientConnectionsWhenServerIsStopped() throws IOException, MuleException\n     {\n-        try (Socket clientSocket = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n         {\n-            assertThat(clientSocket.isConnected(), is(true));\n+            muleContext.stop();\n+            muleContext.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            sendRequest(idlePersistentConnection, \"/path\");\n+            assertResponse(getResponse(idlePersistentConnection), false);\n+        }\n+    }\n+\n+    @Test\n+    public void requestInflightDuringShutdownIsRespondedIncludingConnectionCloseHeader() throws IOException, InterruptedException, MuleException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        {\n+            sendRequest(slowRequestConnection, \"/slow\");\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+            sleep(100);\n+            stopper.start();\n \n-            muleContext.stop();\n-            muleContext.start();\n+            // Response is ok, but connection close header is added.\n+            String slowRequestResponse = getResponse(slowRequestConnection);\n+            assertResponse(slowRequestResponse, true);\n+            assertThat(slowRequestResponse, containsString(\"Connection: close\"));\n+        }\n+        finally\n+        {\n+            stopper.join();\n+        }\n+    }\n+\n+    @Test\n+    public void closeIdleConnectionsWhenServerIsStoppedWhileThereIsAnInflightRequest() throws IOException, MuleException, InterruptedException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n+        {\n+            try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+            {\n+                sendRequest(slowRequestConnection, \"/slow\");\n+\n+                // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+                sleep(100);\n+                stopper.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), false);\n+                // The first connection is closed before the second finishes processing.\n+                new PollingProber(300, 50).check(new ConnectionClosedProbe(idlePersistentConnection));", "originalCommit": "8e752acd9873bdccafc577b1393182dee0aa1170", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0ODgwNA==", "url": "https://github.com/mulesoft/mule/pull/8818#discussion_r414548804", "bodyText": "use constants for the path.", "author": "fsgonz", "createdAt": "2020-04-24T12:47:26Z", "path": "transports/http/src/test/java/org/mule/transport/http/functional/HttpServerStopTestCase.java", "diffHunk": "@@ -35,31 +41,93 @@ protected String getConfigFile()\n         return \"http-listener-stop.xml\";\n     }\n \n+    @After\n+    public void startMuleContextIfStopped() throws MuleException\n+    {\n+        if (muleContext.isStopped())\n+        {\n+            muleContext.start();\n+        }\n+    }\n+\n     @Test\n     public void closeClientConnectionsWhenServerIsStopped() throws IOException, MuleException\n     {\n-        try (Socket clientSocket = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n         {\n-            assertThat(clientSocket.isConnected(), is(true));\n+            muleContext.stop();\n+            muleContext.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            sendRequest(idlePersistentConnection, \"/path\");\n+            assertResponse(getResponse(idlePersistentConnection), false);\n+        }\n+    }\n+\n+    @Test\n+    public void requestInflightDuringShutdownIsRespondedIncludingConnectionCloseHeader() throws IOException, InterruptedException, MuleException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        {\n+            sendRequest(slowRequestConnection, \"/slow\");\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+            sleep(100);\n+            stopper.start();\n \n-            muleContext.stop();\n-            muleContext.start();\n+            // Response is ok, but connection close header is added.\n+            String slowRequestResponse = getResponse(slowRequestConnection);\n+            assertResponse(slowRequestResponse, true);\n+            assertThat(slowRequestResponse, containsString(\"Connection: close\"));\n+        }\n+        finally\n+        {\n+            stopper.join();\n+        }\n+    }\n+\n+    @Test\n+    public void closeIdleConnectionsWhenServerIsStoppedWhileThereIsAnInflightRequest() throws IOException, MuleException, InterruptedException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n+        {\n+            try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+            {\n+                sendRequest(slowRequestConnection, \"/slow\");\n+\n+                // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+                sleep(100);\n+                stopper.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), false);\n+                // The first connection is closed before the second finishes processing.\n+                new PollingProber(300, 50).check(new ConnectionClosedProbe(idlePersistentConnection));\n+            }\n+        }\n+        finally\n+        {\n+            stopper.join();\n         }\n     }\n \n-    private void sendRequest(Socket socket) throws IOException\n+    private Socket generateIdlePersistentConnection() throws IOException\n+    {\n+        Socket socket = new Socket(\"localhost\", dynamicPort.getNumber());\n+        assertThat(socket.isConnected(), is(true));\n+\n+        sendRequest(socket, \"/path\");", "originalCommit": "8e752acd9873bdccafc577b1393182dee0aa1170", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5f210180db2ab4f5d2983fdcb6551538899395aa", "url": "https://github.com/mulesoft/mule/commit/5f210180db2ab4f5d2983fdcb6551538899395aa", "message": "Extract constatns", "committedDate": "2020-04-24T13:00:00Z", "type": "commit"}]}