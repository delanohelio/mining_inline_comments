{"pr_number": 9368, "pr_title": "CMTS-35: Support invalidate caches (types/values) for a configuration", "pr_createdAt": "2020-09-08T12:21:34Z", "pr_url": "https://github.com/mulesoft/mule/pull/9368", "timeline": [{"oid": "8e74fe9a24517a5806c125c22d17d68afe391012", "url": "https://github.com/mulesoft/mule/commit/8e74fe9a24517a5806c125c22d17d68afe391012", "message": "added new ways to declare operations", "committedDate": "2020-09-07T17:48:35Z", "type": "commit"}, {"oid": "523469066a72f016dc69517f6719cc7d40b6a95e", "url": "https://github.com/mulesoft/mule/commit/523469066a72f016dc69517f6719cc7d40b6a95e", "message": "hack for valueproviders", "committedDate": "2020-09-09T09:47:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NTM3OA==", "url": "https://github.com/mulesoft/mule/pull/9368#discussion_r485645378", "bodyText": "How about another interface that extends ValueProviderCacheIdGenerator and provides this capability?", "author": "gsfernandes", "createdAt": "2020-09-09T14:13:37Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/DeclarationBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -25,13 +25,26 @@ public DeclarationBasedValueProviderCacheIdGenerator(DslResolvingContext context\n                                                        ComponentLocator<ElementDeclaration> locator) {\n     this.elementModelFactory = DslElementModelFactory.getDefault(context);\n     this.delegate = new DslElementBasedValueProviderCacheIdGenerator(\n-                                                                     l -> locator.get(l)\n-                                                                         .map(e -> elementModelFactory.create(e).orElse(null)));\n+            l -> locator.get(l)\n+                    .map(e -> elementModelFactory.create(e).orElse(null)));\n   }\n \n   @Override\n   public Optional<ValueProviderCacheId> getIdForResolvedValues(ElementDeclaration containerComponent, String parameterName) {\n     checkArgument(containerComponent != null, \"Cannot generate a Cache Key for a 'null' component\");\n     return elementModelFactory.create(containerComponent).flatMap(dsl -> delegate.getIdForResolvedValues(dsl, parameterName));\n   }\n+\n+  //This method was added so that it can be called by reflection and we can keep the logic on how\n+  //the ValueProviderCacheId is generated for configs and connections in one place, without changing the\n+  //ValueProviderCacheIdGenerator API.\n+  //I could not come with a better solution that does not involve refactoring of the whole API. Having\n+  //said that, we have encountered multiple scenarios where we are needing more information than the\n+  //currently provided by the ValueProviderCacheId (Hierarchical info for example). Meaning that we should\n+  //consider refactoring this in the future to make things simpler. MULE-18743\n+  private Optional<ValueProviderCacheId> getIdForDependency(ElementDeclaration elementDeclaration) {\n+    return elementModelFactory.create(elementDeclaration).flatMap(delegate::resolveIdForInjectedElement);", "originalCommit": "523469066a72f016dc69517f6719cc7d40b6a95e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjkzNQ==", "url": "https://github.com/mulesoft/mule/pull/9368#discussion_r485646935", "bodyText": "I thought about that, but all this is in a .api. package and we need it to be api in order to access it from Tooling. Would that be ok?", "author": "lucianoRM", "createdAt": "2020-09-09T14:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NTM3OA=="}], "type": "inlineReview"}, {"oid": "9ad2cd4254e4ef0bf063460b781d53115c6f806d", "url": "https://github.com/mulesoft/mule/commit/9ad2cd4254e4ef0bf063460b781d53115c6f806d", "message": "rolled back", "committedDate": "2020-09-09T17:08:10Z", "type": "commit"}]}