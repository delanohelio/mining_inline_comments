{"pr_number": 8852, "pr_title": "MULE-17419: XML SDK: macroexpansion while keeping AST immutable", "pr_createdAt": "2020-05-12T13:30:07Z", "pr_url": "https://github.com/mulesoft/mule/pull/8852", "timeline": [{"oid": "577507d3d53ce0c288d04256e324054e5dd8a463", "url": "https://github.com/mulesoft/mule/commit/577507d3d53ce0c288d04256e324054e5dd8a463", "message": "MULE-17419: XML SDK: macroexpansion while keeping AST immutable", "committedDate": "2020-05-12T13:06:39Z", "type": "commit"}, {"oid": "37da04f95d4340320d6c2ad4a5f6226547bad2c8", "url": "https://github.com/mulesoft/mule/commit/37da04f95d4340320d6c2ad4a5f6226547bad2c8", "message": "self-review", "committedDate": "2020-05-12T13:28:04Z", "type": "commit"}, {"oid": "26705202ab390d8e7ac08ddd80d072ba64229277", "url": "https://github.com/mulesoft/mule/commit/26705202ab390d8e7ac08ddd80d072ba64229277", "message": "format", "committedDate": "2020-05-12T15:58:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMjkzNw==", "url": "https://github.com/mulesoft/mule/pull/8852#discussion_r423912937", "bodyText": "Meantime, would this break anything? I guess it was just a matter of performance to have them indexed, right?", "author": "gsfernandes", "createdAt": "2020-05-12T17:35:12Z", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "diffHunk": "@@ -331,35 +323,67 @@ public ApplicationModel(ArtifactConfig artifactConfig, ArtifactDeclaration artif\n     this.componentBuildingDefinitionRegistry = componentBuildingDefinitionRegistry;\n     this.externalResourceProvider = externalResourceProvider;\n     createConfigurationAttributeResolver(artifactConfig, parentConfigurationProperties, deploymentProperties);\n-    convertConfigFileToComponentModel(artifactConfig);\n-    convertArtifactDeclarationToComponentModel(extensionModels, artifactDeclaration);\n+\n+    List<ComponentAst> muleComponentModels = new LinkedList<>();\n+    convertConfigFileToComponentModel(artifactConfig, muleComponentModels);\n+    convertArtifactDeclarationToComponentModel(extensionModels, artifactDeclaration, muleComponentModels);\n+    this.muleComponentModels = muleComponentModels;\n+    this.ast = new ArtifactAst() {\n+\n+      @Override\n+      public Stream<ComponentAst> recursiveStream() {\n+        return topLevelComponentsStream()\n+            .flatMap(cm -> cm.recursiveStream());\n+      }\n+\n+      @Override\n+      public Spliterator<ComponentAst> recursiveSpliterator() {\n+        return recursiveStream().spliterator();\n+      }\n+\n+      @Override\n+      public Stream<ComponentAst> topLevelComponentsStream() {\n+        return muleComponentModels.stream();\n+      }\n+\n+      @Override\n+      public Spliterator<ComponentAst> topLevelComponentsSpliterator() {\n+        return topLevelComponentsStream().spliterator();\n+      }\n+    };\n+\n     createEffectiveModel();\n     indexComponentModels();\n     validateModel(componentBuildingDefinitionRegistry);\n     extensionModelHelper = new ExtensionModelHelper(extensionModels);\n     // TODO MULE-13894 do this only on runtimeMode=true once unified extensionModel names to use camelCase (see smart connectors\n     // and crafted declared extension models)\n     resolveComponentTypes();\n+    resolveMetadataTypes(extensionModelHelper, recursiveStream());\n     topLevelComponentsStream()\n         .forEach(componentModel -> ((ComponentModel) componentModel).resolveTypedComponentIdentifier(extensionModelHelper,\n                                                                                                      runtimeMode));\n     recursiveStreamWithHierarchy(this).forEach(new ComponentLocationVisitor());\n   }\n \n+  /**\n+   * We force the current instance of {@link ApplicationModel} to be highly cohesive with {@link MacroExpansionModulesModel} as\n+   * it's responsibility of this object to properly initialize and expand every global element/operation into the concrete set of\n+   * message processors\n+   *\n+   * @param extensionModels Set of {@link ExtensionModel extensionModels} that will be used to check if the element has to be\n+   *        expanded.\n+   * @param postProcess a closure to be executed after the macroexpansion of an extension.\n+   */\n   public void macroExpandXmlSdkComponents(Set<ExtensionModel> extensionModels) {\n-    expandModules(extensionModels, () -> {\n-      // TODO MULE-13894 do this only on runtimeMode=true once unified extensionModel names to use camelCase (see smart connectors\n-      // connectors and crafted declared extension models)\n-\n-      // TODO MULE-17419 (AST) Remove these 2 actions\n-      resolveComponentTypes();\n-      topLevelComponentsStream()\n-          .forEach(componentModel -> ((ComponentModel) componentModel).resolveTypedComponentIdentifier(extensionModelHelper,\n-                                                                                                       runtimeMode));\n+    final ArtifactAst previousAst = ast;\n+    ast = new MacroExpansionModulesModel(previousAst, extensionModels).expand();\n \n+    if (ast != previousAst) {\n       // Have to index again the component models with macro expanded ones\n-      indexComponentModels();\n-    });\n+      // TODO MULE-17197 (AST) uncomment this\n+      // indexComponentModels();", "originalCommit": "26705202ab390d8e7ac08ddd80d072ba64229277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTI5NA==", "url": "https://github.com/mulesoft/mule/pull/8852#discussion_r423915294", "bodyText": "from what i've seen, the maps populated by this method is used in the dsl processing. Now, there is another question: why does the dsl processing of an app care about its macroexpanded components? Maybe this method did something else once and now it makes no sense to call it here?", "author": "elrodro83", "createdAt": "2020-05-12T17:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMjkzNw=="}], "type": "inlineReview"}, {"oid": "9c5e9f057e64d47f01373edb15976c4441febb0b", "url": "https://github.com/mulesoft/mule/commit/9c5e9f057e64d47f01373edb15976c4441febb0b", "message": "review", "committedDate": "2020-05-12T18:37:29Z", "type": "commit"}]}