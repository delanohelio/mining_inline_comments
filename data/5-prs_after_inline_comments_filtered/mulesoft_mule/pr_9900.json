{"pr_number": 9900, "pr_title": "MULE-18559: Support @RuntimeVersion annotation", "pr_createdAt": "2020-12-30T14:52:25Z", "pr_url": "https://github.com/mulesoft/mule/pull/9900", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzNDQxNg==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r550234416", "bodyText": "Should it be MuleVersion instead of String?", "author": "gabrieldalborgo", "createdAt": "2020-12-30T15:34:23Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/RuntimeVersionDeclarationEnricher.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.loader.enricher;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.mule.runtime.extension.api.loader.DeclarationEnricherPhase.POST_STRUCTURE;\n+import static org.reflections.ReflectionUtils.getAllFields;\n+import static org.reflections.ReflectionUtils.withAnnotation;\n+\n+import org.mule.runtime.api.meta.MuleVersion;\n+import org.mule.runtime.api.meta.model.declaration.fluent.BaseDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.ConfigurationDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.ConnectionProviderDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.SourceDeclaration;\n+import org.mule.runtime.extension.api.declaration.fluent.util.IdempotentDeclarationWalker;\n+import org.mule.runtime.extension.api.exception.IllegalConfigurationModelDefinitionException;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricherPhase;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.module.extension.internal.loader.java.property.ImplementingTypeModelProperty;\n+import org.mule.runtime.module.extension.internal.loader.java.property.RuntimeVersionModelProperty;\n+import org.mule.sdk.api.annotation.param.RuntimeVersion;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collection;\n+\n+import com.google.common.base.Joiner;\n+\n+/**\n+ * {@link DeclarationEnricher} which looks at classes with fields annotated with {@link RuntimeVersion}. It validates\n+ * that the annotations is used properly and if so it adds a {@link RuntimeVersionModelProperty}.\n+ * <p>\n+ * If the {@link RuntimeVersion} annotation is used in a way which breaks the rules set on its javadoc, an\n+ * {@link IllegalConfigurationModelDefinitionException} will be thrown.\n+ *\n+ * @since 4.4\n+ */\n+public class RuntimeVersionDeclarationEnricher implements DeclarationEnricher {\n+\n+  @Override\n+  public DeclarationEnricherPhase getExecutionPhase() {\n+    return POST_STRUCTURE;\n+  }\n+\n+  @Override\n+  public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+    new IdempotentDeclarationWalker() {\n+\n+      @Override\n+      public void onConfiguration(ConfigurationDeclaration declaration) {\n+        doEnrich(declaration);\n+      }\n+\n+      @Override\n+      protected void onConnectionProvider(ConnectionProviderDeclaration declaration) {\n+        doEnrich(declaration);\n+      }\n+\n+      @Override\n+      protected void onSource(SourceDeclaration declaration) {\n+        doEnrich(declaration);\n+      }\n+\n+    }.walk(extensionLoadingContext.getExtensionDeclarer().getDeclaration());\n+  }\n+\n+  private void doEnrich(BaseDeclaration declaration) {\n+    declaration.getModelProperty(ImplementingTypeModelProperty.class).ifPresent(p -> {\n+      ImplementingTypeModelProperty typeProperty = (ImplementingTypeModelProperty) p;\n+      Collection<Field> fields = getAllFields(typeProperty.getType(), withAnnotation(RuntimeVersion.class));\n+      if (isEmpty(fields)) {\n+        return;\n+      }\n+\n+      if (fields.size() > 1) {\n+        throw new IllegalConfigurationModelDefinitionException(String\n+            .format(\"Only one field is allowed to be annotated with @%s, but class '%s' has %d fields \"\n+                + \"with such annotation. Offending fields are: [%s]\", RuntimeVersion.class.getSimpleName(),\n+                    typeProperty.getType().getName(),\n+                    fields.size(), Joiner.on(\", \").join(fields.stream().map(Field::getName).collect(toList()))));\n+      }\n+\n+      final Field runtimeVersionField = fields.iterator().next();\n+      if (!MuleVersion.class.equals(runtimeVersionField.getType())) {\n+        throw new IllegalConfigurationModelDefinitionException(String\n+            .format(\"Class '%s' declares the field '%s' which is annotated with @%s and is of type '%s'. Only \"\n+                + \"fields of type String are allowed to carry such annotation\", typeProperty.getType().getName(),", "originalCommit": "7c1589f9394228b77a858f12a5db9e9c934e1383", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMjQwNg==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r550232406", "bodyText": "static import", "author": "marianogonzalez", "createdAt": "2020-12-30T15:28:08Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/RuntimeVersionDeclarationEnricher.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.loader.enricher;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.mule.runtime.extension.api.loader.DeclarationEnricherPhase.POST_STRUCTURE;\n+import static org.reflections.ReflectionUtils.getAllFields;\n+import static org.reflections.ReflectionUtils.withAnnotation;\n+\n+import org.mule.runtime.api.meta.MuleVersion;\n+import org.mule.runtime.api.meta.model.declaration.fluent.BaseDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.ConfigurationDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.ConnectionProviderDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.SourceDeclaration;\n+import org.mule.runtime.extension.api.declaration.fluent.util.IdempotentDeclarationWalker;\n+import org.mule.runtime.extension.api.exception.IllegalConfigurationModelDefinitionException;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricherPhase;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.module.extension.internal.loader.java.property.ImplementingTypeModelProperty;\n+import org.mule.runtime.module.extension.internal.loader.java.property.RuntimeVersionModelProperty;\n+import org.mule.sdk.api.annotation.param.RuntimeVersion;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collection;\n+\n+import com.google.common.base.Joiner;\n+\n+/**\n+ * {@link DeclarationEnricher} which looks at classes with fields annotated with {@link RuntimeVersion}. It validates\n+ * that the annotations is used properly and if so it adds a {@link RuntimeVersionModelProperty}.\n+ * <p>\n+ * If the {@link RuntimeVersion} annotation is used in a way which breaks the rules set on its javadoc, an\n+ * {@link IllegalConfigurationModelDefinitionException} will be thrown.\n+ *\n+ * @since 4.4\n+ */\n+public class RuntimeVersionDeclarationEnricher implements DeclarationEnricher {\n+\n+  @Override\n+  public DeclarationEnricherPhase getExecutionPhase() {\n+    return POST_STRUCTURE;\n+  }\n+\n+  @Override\n+  public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+    new IdempotentDeclarationWalker() {\n+\n+      @Override\n+      public void onConfiguration(ConfigurationDeclaration declaration) {\n+        doEnrich(declaration);\n+      }\n+\n+      @Override\n+      protected void onConnectionProvider(ConnectionProviderDeclaration declaration) {\n+        doEnrich(declaration);\n+      }\n+\n+      @Override\n+      protected void onSource(SourceDeclaration declaration) {\n+        doEnrich(declaration);\n+      }\n+\n+    }.walk(extensionLoadingContext.getExtensionDeclarer().getDeclaration());\n+  }\n+\n+  private void doEnrich(BaseDeclaration declaration) {\n+    declaration.getModelProperty(ImplementingTypeModelProperty.class).ifPresent(p -> {\n+      ImplementingTypeModelProperty typeProperty = (ImplementingTypeModelProperty) p;\n+      Collection<Field> fields = getAllFields(typeProperty.getType(), withAnnotation(RuntimeVersion.class));\n+      if (isEmpty(fields)) {\n+        return;\n+      }\n+\n+      if (fields.size() > 1) {\n+        throw new IllegalConfigurationModelDefinitionException(String\n+            .format(\"Only one field is allowed to be annotated with @%s, but class '%s' has %d fields \"", "originalCommit": "7c1589f9394228b77a858f12a5db9e9c934e1383", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMjY3MQ==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r550232671", "bodyText": "what is a custom model property? Did you mean private?", "author": "marianogonzalez", "createdAt": "2020-12-30T15:28:54Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/java/property/RuntimeVersionModelProperty.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.loader.java.property;\n+\n+import org.mule.runtime.api.meta.model.config.ConfigurationModel;\n+import org.mule.sdk.api.annotation.param.RuntimeVersion;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * A custom model property used to indicate that the class implementing a {@link ConfigurationModel} has a {@link Field}", "originalCommit": "7c1589f9394228b77a858f12a5db9e9c934e1383", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMzE2Mw==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r550233163", "bodyText": "instead of calling this method 3 times, shouldn't it be refactored so that all the annotations and types are passed together and the list of fields is iterated only once?", "author": "marianogonzalez", "createdAt": "2020-12-30T15:30:24Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/InjectedFieldsModelValidator.java", "diffHunk": "@@ -92,8 +96,10 @@ protected void onOperation(HasOperationModels owner, OperationModel model) {\n \n           @Override\n           protected void onConnectionProvider(HasConnectionProviderModels owner, ConnectionProviderModel model) {\n-            validateFields(model, getImplementingType(model), DefaultEncoding.class);\n-            validateFields(model, getImplementingType(model), RefName.class);\n+            Optional<Class> implementingType = getImplementingType(model);\n+            validateFields(model, implementingType, DefaultEncoding.class, String.class);", "originalCommit": "7c1589f9394228b77a858f12a5db9e9c934e1383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk1NDE3Mw==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r552954173", "bodyText": "can you explain this change? this doesn't provide the proposed optimization", "author": "marianogonzalez", "createdAt": "2021-01-06T20:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMzE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQwNzY0OA==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r553407648", "bodyText": "I will have to pass the ConnectionProviderModel, the implementingType, and a list or map with the types and annotations. It looks quite ugly to me. Is there any benefit between calling three times a  method and a foreach that requires creating the list and map?\nOn the other hand it's not exactly the same of parameters, so I'll end up with code duplication anyway", "author": "Bardammu", "createdAt": "2021-01-07T15:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMzE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMzM5NQ==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r550233395", "bodyText": "Static import", "author": "marianogonzalez", "createdAt": "2020-12-30T15:31:15Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java", "diffHunk": "@@ -114,7 +117,9 @@ protected Object instantiateObject() {\n           @Override\n           public Object build(ValueResolvingContext context) throws MuleException {\n             Object source = build(resolverSet.resolve(context));\n+            MuleVersion muleVersion = new MuleVersion(MuleExtensionModelProvider.MULE_VERSION);", "originalCommit": "7c1589f9394228b77a858f12a5db9e9c934e1383", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzNDUyMQ==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r550234521", "bodyText": "this is basically a copy paste from RefNameDeclarationEnricher. Create a base class for both and avoid code duplication", "author": "marianogonzalez", "createdAt": "2020-12-30T15:34:46Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/RuntimeVersionDeclarationEnricher.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.loader.enricher;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+import static org.mule.runtime.extension.api.loader.DeclarationEnricherPhase.POST_STRUCTURE;\n+import static org.reflections.ReflectionUtils.getAllFields;\n+import static org.reflections.ReflectionUtils.withAnnotation;\n+\n+import org.mule.runtime.api.meta.MuleVersion;\n+import org.mule.runtime.api.meta.model.declaration.fluent.BaseDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.ConfigurationDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.ConnectionProviderDeclaration;\n+import org.mule.runtime.api.meta.model.declaration.fluent.SourceDeclaration;\n+import org.mule.runtime.extension.api.declaration.fluent.util.IdempotentDeclarationWalker;\n+import org.mule.runtime.extension.api.exception.IllegalConfigurationModelDefinitionException;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricherPhase;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.module.extension.internal.loader.java.property.ImplementingTypeModelProperty;\n+import org.mule.runtime.module.extension.internal.loader.java.property.RuntimeVersionModelProperty;\n+import org.mule.sdk.api.annotation.param.RuntimeVersion;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collection;\n+\n+import com.google.common.base.Joiner;\n+\n+/**\n+ * {@link DeclarationEnricher} which looks at classes with fields annotated with {@link RuntimeVersion}. It validates\n+ * that the annotations is used properly and if so it adds a {@link RuntimeVersionModelProperty}.\n+ * <p>\n+ * If the {@link RuntimeVersion} annotation is used in a way which breaks the rules set on its javadoc, an\n+ * {@link IllegalConfigurationModelDefinitionException} will be thrown.\n+ *\n+ * @since 4.4\n+ */\n+public class RuntimeVersionDeclarationEnricher implements DeclarationEnricher {", "originalCommit": "7c1589f9394228b77a858f12a5db9e9c934e1383", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1eba4b0e2f5161a9870c119393f92d07b3ff4275", "url": "https://github.com/mulesoft/mule/commit/1eba4b0e2f5161a9870c119393f92d07b3ff4275", "message": "More changes requested in PR review", "committedDate": "2021-01-04T19:04:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk1MzYyNw==", "url": "https://github.com/mulesoft/mule/pull/9900#discussion_r552953627", "bodyText": "there's still a lot of duplicated code. Can't the part of fetching the ImplementType and extracting the fields also be reused by simply passing the Annotation class to filter upon?", "author": "marianogonzalez", "createdAt": "2021-01-06T20:47:27Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/RefNameDeclarationEnricher.java", "diffHunk": "@@ -60,33 +51,21 @@ public void onConfiguration(ConfigurationDeclaration declaration) {\n       protected void onConnectionProvider(ConnectionProviderDeclaration declaration) {\n         doEnrich(declaration);\n       }\n+\n     }.walk(extensionLoadingContext.getExtensionDeclarer().getDeclaration());\n   }\n \n-  private void doEnrich(BaseDeclaration<?> declaration) {\n-\n+  @Override\n+  protected void doEnrich(BaseDeclaration<?> declaration) {\n     declaration.getModelProperty(ImplementingTypeModelProperty.class).ifPresent(typeProperty -> {\n       Collection<Field> fields = getAllFields(typeProperty.getType(), withAnnotation(RefName.class));", "originalCommit": "1eba4b0e2f5161a9870c119393f92d07b3ff4275", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90aaf49e2b7ce2b5523e50d75460bde48b149064", "url": "https://github.com/mulesoft/mule/commit/90aaf49e2b7ce2b5523e50d75460bde48b149064", "message": "MULE-18559: Support @RuntimeVersion annotation\n\nThis commit makes it possible to inject a instance of MuleVersion on fields annotated with\n@RuntimeVersion", "committedDate": "2021-01-06T22:05:09Z", "type": "commit"}, {"oid": "ec1ce087ecc9ff4f67aa60a577ce3e4947fb03f7", "url": "https://github.com/mulesoft/mule/commit/ec1ce087ecc9ff4f67aa60a577ce3e4947fb03f7", "message": "Easy changes requested in PR review", "committedDate": "2021-01-06T22:05:10Z", "type": "commit"}, {"oid": "64c791e000feaf68cd37894e71c4a9b66fbdeed8", "url": "https://github.com/mulesoft/mule/commit/64c791e000feaf68cd37894e71c4a9b66fbdeed8", "message": "Fix test", "committedDate": "2021-01-06T22:05:11Z", "type": "commit"}, {"oid": "0e85305337fae30e3fb07492816fff8d2fde6174", "url": "https://github.com/mulesoft/mule/commit/0e85305337fae30e3fb07492816fff8d2fde6174", "message": "Add missing capability of inject the MuleVersion into fields of operation classes", "committedDate": "2021-01-06T22:05:11Z", "type": "commit"}, {"oid": "b62759c1e4005df78c19097790cc04c11d7cdf0c", "url": "https://github.com/mulesoft/mule/commit/b62759c1e4005df78c19097790cc04c11d7cdf0c", "message": "More changes requested in PR review", "committedDate": "2021-01-06T22:05:11Z", "type": "commit"}, {"oid": "06da40924687b88059a5a8ceeab26e73182e8911", "url": "https://github.com/mulesoft/mule/commit/06da40924687b88059a5a8ceeab26e73182e8911", "message": "More changes", "committedDate": "2021-01-07T15:06:07Z", "type": "forcePushed"}, {"oid": "774779af9b45eff579e5b63879bb4867b66ff821", "url": "https://github.com/mulesoft/mule/commit/774779af9b45eff579e5b63879bb4867b66ff821", "message": "More changes", "committedDate": "2021-01-07T15:07:22Z", "type": "commit"}, {"oid": "774779af9b45eff579e5b63879bb4867b66ff821", "url": "https://github.com/mulesoft/mule/commit/774779af9b45eff579e5b63879bb4867b66ff821", "message": "More changes", "committedDate": "2021-01-07T15:07:22Z", "type": "forcePushed"}]}