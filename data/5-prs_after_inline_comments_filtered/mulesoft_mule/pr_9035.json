{"pr_number": 9035, "pr_title": "MULE-18546: Change lookup policy for plugin classloaders regarding org.mule.sdk package", "pr_createdAt": "2020-07-08T15:14:41Z", "pr_url": "https://github.com/mulesoft/mule/pull/9035", "timeline": [{"oid": "608f208b49906cecc72d98c3b57b4605436057a5", "url": "https://github.com/mulesoft/mule/commit/608f208b49906cecc72d98c3b57b4605436057a5", "message": "MULE-18546: Change lookup policy for plugin classloaders regarding org.mule.sdk package", "committedDate": "2020-07-22T18:00:14Z", "type": "commit"}, {"oid": "edc53ade83ac1359006c36a9d0c41b79e72521ae", "url": "https://github.com/mulesoft/mule/commit/edc53ade83ac1359006c36a9d0c41b79e72521ae", "message": "progress", "committedDate": "2020-07-22T18:01:21Z", "type": "commit"}, {"oid": "edc53ade83ac1359006c36a9d0c41b79e72521ae", "url": "https://github.com/mulesoft/mule/commit/edc53ade83ac1359006c36a9d0c41b79e72521ae", "message": "progress", "committedDate": "2020-07-22T18:01:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MTQ0NA==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r461751444", "bodyText": "Usage of Optional is overkill here. Just return the policy to be used", "author": "marianogonzalez", "createdAt": "2020-07-28T17:29:52Z", "path": "modules/container/src/main/java/org/mule/runtime/container/internal/ContainerClassLoaderFactory.java", "diffHunk": "@@ -174,16 +179,31 @@ protected ArtifactClassLoader createArtifactClassLoader(final ClassLoader parent\n     final Map<String, LookupStrategy> result = new HashMap<>();\n     for (MuleModule muleModule : modules) {\n       for (String exportedPackage : muleModule.getExportedPackages()) {\n-        // Let artifacts extend non \"java.\" JRE packages\n-        result.put(exportedPackage, ALLOW_JRE_EXTENSION && stream(JRE_EXTENDABLE_PACKAGES).anyMatch(exportedPackage::startsWith)\n-            ? PARENT_FIRST\n-            : containerOnlyLookupStrategy);\n+        result.put(exportedPackage, getSpecialLookupStrategy(exportedPackage).orElse(containerOnlyLookupStrategy));\n       }\n     }\n \n     return result;\n   }\n \n+  /**\n+   * Returns an {@link Optional} with the {@link LookupStrategy} if the one to use for the exportedPackage is other than\n+   * a {@link ContainerOnlyLookupStrategy}\n+   *\n+   * @param exportedPackage name of the package\n+   * @return\n+   */\n+  private Optional<LookupStrategy> getSpecialLookupStrategy(String exportedPackage) {", "originalCommit": "edc53ade83ac1359006c36a9d0c41b79e72521ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08", "url": "https://github.com/mulesoft/mule/commit/d93e02f9a6c1cf81f680cf3a35d6961c879c6f08", "message": "Adds requested changes.", "committedDate": "2020-07-28T20:18:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4NzkwMA==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462387900", "bodyText": "how is this related tho this pr?", "author": "elrodro83", "createdAt": "2020-07-29T15:27:39Z", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.sdk.api.runtime.connectivity;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+\n+public interface ReconnectionCallback {", "originalCommit": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODE4MA==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462478180", "bodyText": "This is asociated with a test added in mule-integration-tests to check that this is the class used in the extension classloader.", "author": "ndinu", "createdAt": "2020-07-29T17:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4NzkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4Nzk4Mw==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462387983", "bodyText": "javadocs", "author": "elrodro83", "createdAt": "2020-07-29T15:27:46Z", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.sdk.api.runtime.connectivity;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+\n+public interface ReconnectionCallback {", "originalCommit": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NzcxOQ==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462477719", "bodyText": "This is just a test class that colides with one that the runtime has whose package begins with org.mule.sdk.api.", "author": "ndinu", "createdAt": "2020-07-29T17:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4Nzk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4ODE2MA==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462388160", "bodyText": "static imports", "author": "elrodro83", "createdAt": "2020-07-29T15:28:00Z", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLOperations.java", "diffHunk": "@@ -6,9 +6,25 @@\n  */\n package org.mule.test.classloading;\n \n+import static java.util.stream.Collectors.toList;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.runtime.extension.api.annotation.param.Connection;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n public class CLOperations {\n \n   public void someOperation(@Connection String connection) {}\n+\n+  public List<String> getMethods(String clazzName) {\n+    try {\n+      return Arrays.stream(Thread.currentThread().getContextClassLoader().loadClass(clazzName).getMethods())", "originalCommit": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MDMxNg==", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462390316", "bodyText": "add a comment explaining quickly why this is needed.", "author": "elrodro83", "createdAt": "2020-07-29T15:30:52Z", "path": "modules/container/src/main/java/org/mule/runtime/container/internal/ContainerClassLoaderFactory.java", "diffHunk": "@@ -174,16 +179,32 @@ protected ArtifactClassLoader createArtifactClassLoader(final ClassLoader parent\n     final Map<String, LookupStrategy> result = new HashMap<>();\n     for (MuleModule muleModule : modules) {\n       for (String exportedPackage : muleModule.getExportedPackages()) {\n-        // Let artifacts extend non \"java.\" JRE packages\n-        result.put(exportedPackage, ALLOW_JRE_EXTENSION && stream(JRE_EXTENDABLE_PACKAGES).anyMatch(exportedPackage::startsWith)\n-            ? PARENT_FIRST\n-            : containerOnlyLookupStrategy);\n+        LookupStrategy specialLookupStrategy = getSpecialLookupStrategy(exportedPackage);\n+        result.put(exportedPackage, specialLookupStrategy == null ? containerOnlyLookupStrategy : specialLookupStrategy);\n       }\n     }\n \n     return result;\n   }\n \n+  /**\n+   * Returns  the {@link LookupStrategy} if the one to use for the exportedPackage is other than\n+   * a {@link ContainerOnlyLookupStrategy} or null.\n+   *\n+   * @param exportedPackage name of the package\n+   * @return\n+   */\n+  private LookupStrategy getSpecialLookupStrategy(String exportedPackage) {\n+    if (exportedPackage.startsWith(MULE_SDK_API_PACKAGE)) {\n+      return CHILD_FIRST;", "originalCommit": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d733697ce07098bff64ca65ac15c0f6ccd87de4", "url": "https://github.com/mulesoft/mule/commit/9d733697ce07098bff64ca65ac15c0f6ccd87de4", "message": "Adds requested changes", "committedDate": "2020-07-29T19:00:25Z", "type": "commit"}]}