{"pr_number": 9893, "pr_title": "MULE-19090: SampleDataModelValidator yields false negatives when operation is paginated", "pr_createdAt": "2020-12-28T19:23:43Z", "pr_url": "https://github.com/mulesoft/mule/pull/9893", "timeline": [{"oid": "124386fb42e92f7e05218320e5685b37de004492", "url": "https://github.com/mulesoft/mule/commit/124386fb42e92f7e05218320e5685b37de004492", "message": "doodling", "committedDate": "2020-12-28T19:52:54Z", "type": "commit"}, {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57", "url": "https://github.com/mulesoft/mule/commit/4e162c1d8c2526adf89efadea4c5fc17776c4a57", "message": "passing test", "committedDate": "2020-12-28T19:52:54Z", "type": "commit"}, {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57", "url": "https://github.com/mulesoft/mule/commit/4e162c1d8c2526adf89efadea4c5fc17776c4a57", "message": "passing test", "committedDate": "2020-12-28T19:52:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4NzUzNQ==", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549487535", "bodyText": "Will this always be a ParameterizedType?", "author": "ndinu", "createdAt": "2020-12-28T21:09:01Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();", "originalCommit": "4e162c1d8c2526adf89efadea4c5fc17776c4a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyOTM5Ng==", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549729396", "bodyText": "yes. At this point you already now that the type will be a PagingProvider which is parameterized", "author": "marianogonzalez", "createdAt": "2020-12-29T14:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4NzUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4Nzc4OA==", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549487788", "bodyText": "Should we check the size of the array?", "author": "ndinu", "createdAt": "2020-12-28T21:10:01Z", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();\n+          return new Pair<>(type.getActualTypeArguments()[0], type.getActualTypeArguments()[1]);", "originalCommit": "4e162c1d8c2526adf89efadea4c5fc17776c4a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyOTQ5MA==", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549729490", "bodyText": "you already know this will be a PagingProvider, thus you already know the array will have two positions.", "author": "marianogonzalez", "createdAt": "2020-12-29T14:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4Nzc4OA=="}], "type": "inlineReview"}]}