{"pr_number": 9221, "pr_title": "CMTS-30: Support for multi-level resolution on values, changed contra\u2026", "pr_createdAt": "2020-08-19T17:59:21Z", "pr_url": "https://github.com/mulesoft/mule/pull/9221", "timeline": [{"oid": "9148a7adc15dbb4652ea712c6fb98357701af82d", "url": "https://github.com/mulesoft/mule/commit/9148a7adc15dbb4652ea712c6fb98357701af82d", "message": "CMTS-30: Support for multi-level resolution on values, changed contract to receive providerName instead of parameterName", "committedDate": "2020-08-19T18:18:13Z", "type": "forcePushed"}, {"oid": "b8696287f569cde6c66c7328d3a20e601f889835", "url": "https://github.com/mulesoft/mule/commit/b8696287f569cde6c66c7328d3a20e601f889835", "message": "CMTS-30: Support for multi-level resolution on values, changed contract to receive providerName instead of parameterName", "committedDate": "2020-08-19T19:05:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0OTc4Nw==", "url": "https://github.com/mulesoft/mule/pull/9221#discussion_r474249787", "bodyText": "just to understand, if the value provider returned more than one continent then the valueResult would contain a tree for each continent, right?", "author": "svacas", "createdAt": "2020-08-20T20:20:16Z", "path": "modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ComponentValueProviderTestCase.java", "diffHunk": "@@ -167,4 +173,15 @@ public void getValuesOnParameterWithNoValueProvider() {\n                           INVALID_VALUE_RESOLVER_NAME);\n   }\n \n+  @Test\n+  public void multiLevelSourceValue() {\n+    ComponentElementDeclaration elementDeclaration = sourceWithMultiLevelValue(CONFIG_NAME, \"America\", \"USA\");\n+    // ProviderName is groupName\n+    ValueResult valueResult = getValueResult(session, elementDeclaration, \"values\");\n+    // ValueResult for multi level no matter if previous levels are set it would always return the whole tree\n+    assertThat(valueResult.getValues(), hasSize(1));", "originalCommit": "b8696287f569cde6c66c7328d3a20e601f889835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI2NTg3NA==", "url": "https://github.com/mulesoft/mule/pull/9221#discussion_r474265874", "bodyText": "Yes, it will have a ValueResult with N Values for each continent, each instance its children with countries and so on. Exactly as MetadataKeys but without partial fetch.\nValueProvider doesn't support partialFetch so, it will always return the whole tree as the resolution is not for the parameter but for the \"resolverName\"... which is not the providerId but it would be the parameterGroup.name instead of parameter.name.\nLet me try to clarify this with an example:\nOperation(name=pin, parameterGroup(name=locationGroup, parameters[continent, country, city]).\nThe Java code for the operation is\nvoid pin(@ ParameterGroup(name=locationGroup) @ OfValue(LocationValueProvider) Location location)\nSo, the user when configuring this operation in the GUI would have three parameters as the Location class has three fields, continent, country, city.\nThe ValueProvider always return the whole tree as it doesn't support \"partial fetch\".\nSo, the extension model says in all the parameters, continent, country, city that the valueProviderModel has a providerName=locationGroup...meaning that when the valueProvider is invoked it would say: providerName=locationGroup. The value provider mediator is expecting to be invoked with the providerName instead of the parameter name.\nAt the same time each parameter in addition to have the same providerName has a partOrder which defines it in which level of the tree should go its values.\nSo, we didn't want to \"break\" this contract from SDK and ValueProvider per se... and changed the values endpoint for MTS to be aligned with ValueProviderService and its mediator. So, it is up to MTS to do the matching for each level and value to filter out the result and have a dialect that works in terms of \"parameter\" instead of \"providerName\".", "author": "gsfernandes", "createdAt": "2020-08-20T20:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0OTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NTgxMA==", "url": "https://github.com/mulesoft/mule/pull/9221#discussion_r474655810", "bodyText": "Was this supposed to be renamed here? I see that the old multiLevelOPDeclaration still exists.", "author": "lucianoRM", "createdAt": "2020-08-21T12:08:09Z", "path": "modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/MetadataTypesTestCase.java", "diffHunk": "@@ -20,9 +20,8 @@\n import static org.mule.runtime.module.tooling.TestExtensionDeclarationUtils.configLessOPDeclaration;\n import static org.mule.runtime.module.tooling.TestExtensionDeclarationUtils.invalidComponentDeclaration;\n import static org.mule.runtime.module.tooling.TestExtensionDeclarationUtils.multiLevelCompleteOPDeclaration;\n-import static org.mule.runtime.module.tooling.TestExtensionDeclarationUtils.multiLevelOPDeclaration;\n+import static org.mule.runtime.module.tooling.TestExtensionDeclarationUtils.multiLevelOPDeclarationPartialTypeKeys;", "originalCommit": "b8696287f569cde6c66c7328d3a20e601f889835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5OTg4Mg==", "url": "https://github.com/mulesoft/mule/pull/9221#discussion_r474699882", "bodyText": "The new operation has a partialTypeKey resolver for keys and previous one has a typeKey resolve which is not partial.", "author": "gsfernandes", "createdAt": "2020-08-21T13:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NTgxMA=="}], "type": "inlineReview"}, {"oid": "2af39228fb25dc6f7157d76ec5c1e33932ec212e", "url": "https://github.com/mulesoft/mule/commit/2af39228fb25dc6f7157d76ec5c1e33932ec212e", "message": "CMTS-30: Support for multi-level resolution on values, changed contract to receive providerName instead of parameterName", "committedDate": "2020-08-24T03:34:45Z", "type": "commit"}, {"oid": "2af39228fb25dc6f7157d76ec5c1e33932ec212e", "url": "https://github.com/mulesoft/mule/commit/2af39228fb25dc6f7157d76ec5c1e33932ec212e", "message": "CMTS-30: Support for multi-level resolution on values, changed contract to receive providerName instead of parameterName", "committedDate": "2020-08-24T03:34:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NzI3NA==", "url": "https://github.com/mulesoft/mule/pull/9221#discussion_r474667274", "bodyText": "Is the mediator supposed to receive the providerName?\nI think it only knows. how to handle parameterNames", "author": "lucianoRM", "createdAt": "2020-08-21T12:32:34Z", "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -241,16 +241,16 @@ public void dispose() {\n     //do nothing\n   }\n \n-  private <T extends ParameterizedModel & EnrichableModel> ValueResult discoverValues(T componentModel,\n-                                                                                      String parameterName,\n+  private <T extends ParameterizedModel & EnrichableModel> ValueResult discoverValues(T containerModel,\n+                                                                                      String providerName,\n                                                                                       ParameterValueResolver parameterValueResolver,\n                                                                                       Optional<String> configName) {\n-    ValueProviderMediator<T> valueProviderMediator = createValueProviderMediator(componentModel);\n+    ValueProviderMediator<T> valueProviderMediator = createValueProviderMediator(containerModel);\n     ExtensionResolvingContext context =\n         new ExtensionResolvingContext(() -> configName.flatMap(name -> artifactHelper().getConfigurationInstance(name)),\n                                       connectionManager);\n     try {\n-      return resultFrom(valueProviderMediator.getValues(parameterName,\n+      return resultFrom(valueProviderMediator.getValues(providerName,", "originalCommit": "b8696287f569cde6c66c7328d3a20e601f889835", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0NzQwNg==", "url": "https://github.com/mulesoft/mule/pull/9221#discussion_r475547406", "bodyText": "No, it is expecting to receive the providerName as it does:\norg.mule.runtime.module.extension.internal.value.ValueProviderMediator#getParameters.", "author": "gsfernandes", "createdAt": "2020-08-24T11:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NzI3NA=="}], "type": "inlineReview"}]}