{"pr_number": 8884, "pr_title": "Send Issue Report to GitHub (was 8852)", "pr_createdAt": "2020-08-01T06:11:37Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8884", "timeline": [{"oid": "fefa4bef87e0c523cdcdc9c6fbff1ca9e793cac4", "url": "https://github.com/JMRI/JMRI/commit/fefa4bef87e0c523cdcdc9c6fbff1ca9e793cac4", "message": "fix: Send Issue Report to GitHub\n\nThe current mail report is (and has been) broken and is fragile as MTA operators are increasingly locking their systems down to prevent unauthenticated mail from being sent through them. This fix replaces the mail report with a direct submission of an issue to GitHub with the following benefits:\r\n\r\n- The JMRI project no longer needs to gather the email addresses of users\r\n- The JMRI project no longer needs to maintain an intermediary between JMRI applications and reports from the application\r\n- The JMRI project may get more direct involvement from users, since the issue submittal process directly involves them in the project's maintenance workflow", "committedDate": "2020-07-19T23:34:37Z", "type": "commit"}, {"oid": "3bb0c01e896dbc8fe6f7db201c0cbf6cf47202f4", "url": "https://github.com/JMRI/JMRI/commit/3bb0c01e896dbc8fe6f7db201c0cbf6cf47202f4", "message": "chore: delete file accidentally included in fefa4bef87", "committedDate": "2020-07-19T23:37:22Z", "type": "commit"}, {"oid": "0c161e32d754a8ef7e6aaf40725e39b127f07d48", "url": "https://github.com/JMRI/JMRI/commit/0c161e32d754a8ef7e6aaf40725e39b127f07d48", "message": "chore: maven runs without local.properties", "committedDate": "2020-07-20T00:33:46Z", "type": "commit"}, {"oid": "12c24cff4f49c5e3c258abd9372e575cee8b77ac", "url": "https://github.com/JMRI/JMRI/commit/12c24cff4f49c5e3c258abd9372e575cee8b77ac", "message": "Merge remote-tracking branch 'upstream/master' into issue-reporter", "committedDate": "2020-07-26T14:06:08Z", "type": "commit"}, {"oid": "70a0fefda9e0b3bca37ecc1216071f7f4ae461bb", "url": "https://github.com/JMRI/JMRI/commit/70a0fefda9e0b3bca37ecc1216071f7f4ae461bb", "message": "fix: more consistent handling of attachments", "committedDate": "2020-07-26T15:31:55Z", "type": "commit"}, {"oid": "69ed6c7378f2a567af57e99e71030c7e1dd2c459", "url": "https://github.com/JMRI/JMRI/commit/69ed6c7378f2a567af57e99e71030c7e1dd2c459", "message": "fix: can't attach markdown files to issue", "committedDate": "2020-07-26T15:45:52Z", "type": "commit"}, {"oid": "234543fcfd4ebb571d767a57373fa900a65d5e30", "url": "https://github.com/JMRI/JMRI/commit/234543fcfd4ebb571d767a57373fa900a65d5e30", "message": "fix: remove unused fields", "committedDate": "2020-07-26T15:46:21Z", "type": "commit"}, {"oid": "92f87c9c42aaeeaeab1f47015846ea9a16488759", "url": "https://github.com/JMRI/JMRI/commit/92f87c9c42aaeeaeab1f47015846ea9a16488759", "message": "fix: use try-with-resources to avoid open streams", "committedDate": "2020-07-26T19:59:56Z", "type": "commit"}, {"oid": "7488347df7edabe6f2a420425ed26463418c313f", "url": "https://github.com/JMRI/JMRI/commit/7488347df7edabe6f2a420425ed26463418c313f", "message": "fix: use Static method from class that defines it", "committedDate": "2020-07-26T20:00:18Z", "type": "commit"}, {"oid": "622b485be4099606631ee55e90c0e4422c859dd7", "url": "https://github.com/JMRI/JMRI/commit/622b485be4099606631ee55e90c0e4422c859dd7", "message": "fix: Remove \"Don't Know\" reporting target", "committedDate": "2020-07-26T20:01:01Z", "type": "commit"}, {"oid": "d0d174796d802f1373159d1399b93c634eb07ec3", "url": "https://github.com/JMRI/JMRI/commit/d0d174796d802f1373159d1399b93c634eb07ec3", "message": "minimal test skeleton", "committedDate": "2020-08-03T00:23:13Z", "type": "commit"}, {"oid": "6f47c0f20201f7d61aae2cad549c840ad8b65a2f", "url": "https://github.com/JMRI/JMRI/commit/6f47c0f20201f7d61aae2cad549c840ad8b65a2f", "message": "add intro help", "committedDate": "2020-08-03T04:35:42Z", "type": "commit"}, {"oid": "bbf0187801d39480fac47a833ba59b2816998353", "url": "https://github.com/JMRI/JMRI/commit/bbf0187801d39480fac47a833ba59b2816998353", "message": "headless test", "committedDate": "2020-08-03T04:35:56Z", "type": "commit"}, {"oid": "119dc74a3bc757e3f1c08232dc34b9cd9d9cd76f", "url": "https://github.com/JMRI/JMRI/commit/119dc74a3bc757e3f1c08232dc34b9cd9d9cd76f", "message": "release note", "committedDate": "2020-08-03T04:36:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465086883", "bodyText": "This line throws an UnsupportedOperationException on Debian Linux for me.\nUnsupportedOperationException - if the current platform does not support the Desktop.Action.BROWSE action\nThis seems to be a problem with Java unable to open the browser, so I don't know if it can be fixed, but the exception needs to be handled.\n@pabender Can you test this on your Linux computer?", "author": "danielb987", "createdAt": "2020-08-04T14:20:31Z", "path": "java/src/apps/util/issuereporter/swing/IssueReporter.java", "diffHunk": "@@ -0,0 +1,388 @@\n+package apps.util.issuereporter.swing;\n+\n+import java.awt.*;\n+import java.awt.datatransfer.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.WindowEvent;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+import apps.util.issuereporter.*;\n+\n+import javax.swing.*;\n+import javax.swing.GroupLayout.Alignment;\n+import static javax.swing.GroupLayout.DEFAULT_SIZE;\n+import static javax.swing.GroupLayout.PREFERRED_SIZE;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+\n+import jmri.Application;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * User interface for generating an issue report on the JMRI GitHub project.\n+ *\n+ * @author Randall Wood Copyright 2020\n+ */\n+@API(status = API.Status.INTERNAL)\n+public class IssueReporter extends JFrame implements ClipboardOwner, DocumentListener {\n+\n+    private static final int BUG = 0; // index in type combo box\n+    private static final int RFE = 1; // index in type combo box\n+    private JComboBox<String> typeCB;\n+    private JComboBox<GitHubRepository> repoCB;\n+    private JTextArea bodyTA;\n+    private JToggleButton submitBtn;\n+    private JTextField titleText;\n+    private JLabel descriptionLabel;\n+    private JLabel instructionsLabel;\n+    private JPanel typeOptionsPanel;\n+    private JPanel bugReportPanel;\n+    private JCheckBox profileCB;\n+    private JCheckBox sysInfoCB;\n+    private JCheckBox logsCB;\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(IssueReporter.class);\n+\n+    /**\n+     * Creates new form IssueReporterUI\n+     */\n+    public IssueReporter() {\n+        initComponents();\n+    }\n+\n+    private void initComponents() {\n+\n+        titleText = new JTextField();\n+        bodyTA = new JTextArea();\n+        submitBtn = new JToggleButton();\n+        typeCB = new JComboBox<>();\n+        repoCB = new JComboBox<>();\n+        typeOptionsPanel = new JPanel();\n+        bugReportPanel = new JPanel();\n+        descriptionLabel = new JLabel();\n+        instructionsLabel = new JLabel();\n+        JLabel titleLabel = new JLabel();\n+        JScrollPane bodySP = new JScrollPane();\n+        JLabel typeLabel = new JLabel();\n+        JLabel repoLabel = new JLabel();\n+        profileCB = new JCheckBox();\n+        sysInfoCB = new JCheckBox();\n+        logsCB = new JCheckBox();\n+\n+        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        setTitle(Bundle.getMessage(\"IssueReporterAction.title\"));\n+        setPreferredSize(new java.awt.Dimension(400, 600));\n+\n+        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD));\n+        titleLabel.setText(Bundle.getMessage(\"IssueReporter.titleLabel.text\"));\n+\n+        bodyTA.setColumns(20);\n+        bodyTA.setLineWrap(true);\n+        bodyTA.setRows(5);\n+        bodyTA.setWrapStyleWord(true);\n+        bodySP.setViewportView(bodyTA);\n+\n+        submitBtn.setText(Bundle.getMessage(\"IssueReporter.submitBtn.text\"));\n+        submitBtn.setEnabled(false);\n+        submitBtn.addActionListener(this::submitBtnActionListener);\n+\n+        descriptionLabel.setFont(descriptionLabel.getFont().deriveFont(descriptionLabel.getFont().getStyle() | java.awt.Font.BOLD));\n+        descriptionLabel.setText(Bundle.getMessage(\"IssueReporter.descriptionLabel.bug\"));\n+\n+        instructionsLabel.setText(Bundle.getMessage(\"IssueReporter.instructionsLabel.bug\"));\n+\n+        typeLabel.setFont(typeLabel.getFont().deriveFont(typeLabel.getFont().getStyle() | java.awt.Font.BOLD));\n+        typeLabel.setText(Bundle.getMessage(\"IssueReporter.typeLabel.text\"));\n+\n+        typeCB.setModel(new DefaultComboBoxModel<>(new String[]{Bundle.getMessage(\"IssueReporterType.bug\"), Bundle.getMessage(\"IssueReporterType.feature\")}));\n+        typeCB.addActionListener(this::typeCBActionListener);\n+\n+        repoLabel.setFont(repoLabel.getFont().deriveFont(repoLabel.getFont().getStyle() | java.awt.Font.BOLD));\n+        repoLabel.setText(Bundle.getMessage(\"IssueReporter.repoLabel.text\"));\n+\n+        repoCB.setModel(new GitHubRepositoryComboBoxModel());\n+        repoCB.setRenderer(new GitHubRepositoryListCellRenderer());\n+\n+        profileCB.setText(Bundle.getMessage(\"IssueReporter.profileCB.text\"));\n+\n+        sysInfoCB.setText(Bundle.getMessage(\"IssueReporter.sysInfoCB.text\"));\n+\n+        logsCB.setText(Bundle.getMessage(\"IssueReporter.logsCB.text\"));\n+\n+        titleText.getDocument().addDocumentListener(this);\n+\n+        bodyTA.getDocument().addDocumentListener(this);\n+\n+        GroupLayout bugReportPanelLayout = new GroupLayout(bugReportPanel);\n+        bugReportPanel.setLayout(bugReportPanelLayout);\n+        bugReportPanelLayout.setHorizontalGroup(\n+                bugReportPanelLayout.createParallelGroup(Alignment.LEADING)\n+                        .addGroup(bugReportPanelLayout.createSequentialGroup()\n+                                .addContainerGap()\n+                                .addGroup(bugReportPanelLayout.createParallelGroup(Alignment.LEADING)\n+                                        .addComponent(sysInfoCB)\n+                                        .addComponent(logsCB)\n+                                        .addComponent(profileCB))\n+                                .addContainerGap(DEFAULT_SIZE, Short.MAX_VALUE))\n+        );\n+        bugReportPanelLayout.setVerticalGroup(\n+                bugReportPanelLayout.createParallelGroup(Alignment.LEADING)\n+                        .addGroup(bugReportPanelLayout.createSequentialGroup()\n+                                .addContainerGap()\n+                                .addComponent(sysInfoCB)\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(logsCB)\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(profileCB)\n+                                .addContainerGap(DEFAULT_SIZE, Short.MAX_VALUE))\n+        );\n+\n+        GroupLayout typeOptionsPanelLayout = new GroupLayout(typeOptionsPanel);\n+        typeOptionsPanel.setLayout(typeOptionsPanelLayout);\n+        typeOptionsPanelLayout.setHorizontalGroup(\n+                typeOptionsPanelLayout.createParallelGroup(Alignment.LEADING)\n+                        .addComponent(bugReportPanel, Alignment.TRAILING, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE)\n+        );\n+        typeOptionsPanelLayout.setVerticalGroup(\n+                typeOptionsPanelLayout.createParallelGroup(Alignment.LEADING)\n+                        .addComponent(bugReportPanel, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)\n+        );\n+\n+        GroupLayout layout = new GroupLayout(getContentPane());\n+        getContentPane().setLayout(layout);\n+        layout.setHorizontalGroup(\n+                layout.createParallelGroup(Alignment.LEADING)\n+                        .addGroup(layout.createSequentialGroup()\n+                                .addContainerGap()\n+                                .addGroup(layout.createParallelGroup(Alignment.LEADING)\n+                                        .addComponent(bodySP, DEFAULT_SIZE, 376, Short.MAX_VALUE)\n+                                        .addComponent(instructionsLabel, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE)\n+                                        .addComponent(descriptionLabel, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE)\n+                                        .addGroup(Alignment.TRAILING, layout.createSequentialGroup()\n+                                                .addGap(0, 0, Short.MAX_VALUE)\n+                                                .addComponent(submitBtn))\n+                                        .addGroup(layout.createSequentialGroup()\n+                                                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)\n+                                                        .addComponent(typeLabel, PREFERRED_SIZE, 70, Short.MAX_VALUE)\n+                                                        .addComponent(repoLabel, PREFERRED_SIZE, 70, Short.MAX_VALUE)\n+                                                        .addComponent(titleLabel, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE))\n+                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                                .addGroup(layout.createParallelGroup(Alignment.LEADING)\n+                                                        .addComponent(typeCB, 0, DEFAULT_SIZE, Short.MAX_VALUE)\n+                                                        .addComponent(repoCB, 0, DEFAULT_SIZE, Short.MAX_VALUE)\n+                                                        .addComponent(titleText)))\n+                                        .addComponent(typeOptionsPanel, Alignment.TRAILING, DEFAULT_SIZE, DEFAULT_SIZE, Short.MAX_VALUE))\n+                                .addContainerGap())\n+        );\n+\n+        layout.linkSize(SwingConstants.HORIZONTAL, titleLabel, typeLabel, repoLabel);\n+\n+        layout.setVerticalGroup(\n+                layout.createParallelGroup(Alignment.LEADING)\n+                        .addGroup(layout.createSequentialGroup()\n+                                .addContainerGap()\n+                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)\n+                                        .addComponent(typeCB, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)\n+                                        .addComponent(typeLabel))\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)\n+                                        .addComponent(repoCB, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)\n+                                        .addComponent(repoLabel))\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)\n+                                        .addComponent(titleLabel)\n+                                        .addComponent(titleText, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE))\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(descriptionLabel)\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(instructionsLabel)\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(bodySP, DEFAULT_SIZE, 109, Short.MAX_VALUE)\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(typeOptionsPanel, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)\n+                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)\n+                                .addComponent(submitBtn)\n+                                .addContainerGap())\n+        );\n+\n+        pack();\n+    }\n+\n+    @Override\n+    public void insertUpdate(DocumentEvent e) {\n+        changedUpdate(e);\n+    }\n+\n+    @Override\n+    public void removeUpdate(DocumentEvent e) {\n+        changedUpdate(e);\n+    }\n+\n+    @Override\n+    public void changedUpdate(DocumentEvent e) {\n+        submitBtn.setEnabled(!bodyTA.getText().isEmpty() && !titleText.getText().isEmpty());\n+    }\n+\n+    private void typeCBActionListener(ActionEvent e) {\n+        switch (typeCB.getSelectedIndex()) {\n+            case BUG:\n+                descriptionLabel.setText(Bundle.getMessage(\"IssueReporter.descriptionLabel.bug\"));\n+                instructionsLabel.setText(Bundle.getMessage(\"IssueReporter.instructionsLabel.bug\"));\n+                if (!typeOptionsPanel.equals(bugReportPanel.getParent())) {\n+                    typeOptionsPanel.add(bugReportPanel);\n+                    typeOptionsPanel.setPreferredSize(bugReportPanel.getPreferredSize());\n+                    bugReportPanel.revalidate();\n+                    bugReportPanel.repaint();\n+                }\n+                break;\n+            case RFE:\n+                descriptionLabel.setText(Bundle.getMessage(\"IssueReporter.descriptionLabel.feature\"));\n+                instructionsLabel.setText(Bundle.getMessage(\"IssueReporter.instructionsLabel.feature\"));\n+                typeOptionsPanel.remove(bugReportPanel);\n+                break;\n+            default:\n+                log.error(\"Unexpected selected index {} for issue type\", typeCB.getSelectedIndex(), new IllegalArgumentException());\n+        }\n+    }\n+\n+    private void submitBtnActionListener(ActionEvent e) {\n+        IssueReport report = null;\n+        switch (typeCB.getSelectedIndex()) {\n+            case BUG:\n+                report = new BugReport(titleText.getText(), bodyTA.getText(), profileCB.isSelected(), sysInfoCB.isSelected(), logsCB.isSelected());\n+                break;\n+            case RFE:\n+                report = new EnhancementRequest(titleText.getText(), bodyTA.getText());\n+                break;\n+            default:\n+                log.error(\"Unexpected selected index {} for issue type\", typeCB.getSelectedIndex(), new IllegalArgumentException());\n+        }\n+        if (report != null) {\n+            submitReport(report);\n+        }\n+    }\n+\n+    // package private\n+    private void submitReport(IssueReport report) {\n+        try {\n+            URI uri = report.submit(repoCB.getItemAt(repoCB.getSelectedIndex()));\n+            List<File> attachments = report.getAttachments();\n+            if (!attachments.isEmpty()) {\n+                JOptionPane.showMessageDialog(this,\n+                        Bundle.getMessage(\"IssueReporter.attachments.message\"),\n+                        Bundle.getMessage(\"IssueReporter.attachments.title\"),\n+                        JOptionPane.INFORMATION_MESSAGE);\n+                Desktop.getDesktop().open(attachments.get(0).getParentFile());\n+            }\n+            Desktop.getDesktop().browse(uri);", "originalCommit": "119dc74a3bc757e3f1c08232dc34b9cd9d9cd76f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5MzYxNA==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465093614", "bodyText": "I'm not sure, but it seems that Desktop.isSupported( Desktop.Action.BROWSE ) can tell if web browsing is available.", "author": "danielb987", "createdAt": "2020-08-04T14:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzMDkzOA==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465130938", "bodyText": "Thanks!\nWe can check/catch that. What's the best way to handle it?  Open a Dialog box with the URL for somebody to manually open it?\nAny idea why it's not working? Perhaps no default browser set?", "author": "bobjacobsen", "createdAt": "2020-08-04T15:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0OTMxMA==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465149310", "bodyText": "We can check/catch that. What's the best way to handle it? Open a Dialog box with the URL for somebody to manually open it?\n\nYes, that seems to be a good solution. And to have a button \"Copy link to clipboard\".", "author": "danielb987", "createdAt": "2020-08-04T15:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MTM4Ng==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465151386", "bodyText": "Any idea why it's not working? Perhaps no default browser set?\n\nThis page says:\nOn the Solaris Operating System and the Linux platform, this API is dependent on Gnome libraries. If those libraries are unavailable, this method will return false.\nI have Gnome installed, but maybe not all Gnome. I use the Xfce desktop environment. I could try to install all Gnome to make it work, but on the other hand, it's useful that I have a computer there Java cannot open the browser so I can test that JMRI handles that.", "author": "danielb987", "createdAt": "2020-08-04T15:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MTY2Mw==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465181663", "bodyText": "I think we need to come up with a different plan.  The URL is too long to really display:\n\n(It would be even longer if I'd put a lot of text in the boxes)", "author": "bobjacobsen", "createdAt": "2020-08-04T16:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NzI0OQ==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465187249", "bodyText": "I've been looking at a couple of other options that might help us which would get around the need for a GitHub account. But I am on a limited connection until early next week so might not be able to do too much until then.", "author": "mattharris", "createdAt": "2020-08-04T16:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5Njc1NA==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465196754", "bodyText": "I think we need to come up with a different plan. The URL is too long to really display:\n\nI don't think you need to show the URL. It would probably be enough to have a button \"Copy to clipboard\".\nhttps://stackoverflow.com/questions/3591945/copying-to-the-clipboard-in-java", "author": "danielb987", "createdAt": "2020-08-04T17:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjE0NA==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465202144", "bodyText": "I've push a copy-to-clipboard approach just now.  it asks first, just in case the clipboard contents shouldn't be changed.", "author": "bobjacobsen", "createdAt": "2020-08-04T17:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MzI3Mw==", "url": "https://github.com/JMRI/JMRI/pull/8884#discussion_r465243273", "bodyText": "I've push a copy-to-clipboard approach just now. it asks first, just in case the clipboard contents shouldn't be changed.\n\nTested on Debian Linux and it works fine. The only thing I'm thinking of is that the \"Copy to clipboard\" dialog has the button \"Skip\" which I find somewhat confusing, since almost always that button is \"Cancel\". And I think it would be better to only close that dialog box and not the \"Report Issue\" dialog box when clicking on Skip/Cancel. The reason is that when that dialog comes up, the user may be confused and click on Skip/Cancel without really understanding what he is doing, and with the current solution, everything he has written in the \"Report Issue\" dialog is lost.\nIf the button is Cancel and only closes the \"Copy to clipboard\" dialog, the user will come back to the \"Report Issue\" dialog and can try again. I have been in this situation many times, confused with dialog boxes that I don't really understand.\nBut except this small comment, it now works fine on Debian Linux.", "author": "danielb987", "createdAt": "2020-08-04T18:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4Njg4Mw=="}], "type": "inlineReview"}, {"oid": "2d84357b9063c4281489085babc184c56a7c3725", "url": "https://github.com/JMRI/JMRI/commit/2d84357b9063c4281489085babc184c56a7c3725", "message": "handle no auto open browser", "committedDate": "2020-08-04T17:09:00Z", "type": "commit"}, {"oid": "5670d8fddfed7131fe0e13e34df810e33831b61f", "url": "https://github.com/JMRI/JMRI/commit/5670d8fddfed7131fe0e13e34df810e33831b61f", "message": "don't close on skip", "committedDate": "2020-08-04T20:40:06Z", "type": "commit"}, {"oid": "48068e893e1aa6f26bc52f56f7e0eddb7a63b900", "url": "https://github.com/JMRI/JMRI/commit/48068e893e1aa6f26bc52f56f7e0eddb7a63b900", "message": "user doc", "committedDate": "2020-08-04T22:40:45Z", "type": "commit"}, {"oid": "f7e6e1f0150dc90db4da3e63e473c9bcaac948a2", "url": "https://github.com/JMRI/JMRI/commit/f7e6e1f0150dc90db4da3e63e473c9bcaac948a2", "message": "help", "committedDate": "2020-08-04T22:44:37Z", "type": "commit"}]}