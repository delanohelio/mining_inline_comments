{"pr_number": 8746, "pr_title": "Webthrottle get loco session by roster", "pr_createdAt": "2020-06-28T20:54:08Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8746", "timeline": [{"oid": "d444a50649b314343d09981622d216aa74182959", "url": "https://github.com/JMRI/JMRI/commit/d444a50649b314343d09981622d216aa74182959", "message": "update JsonThrottle get Throttle by rosterEntry", "committedDate": "2020-06-28T20:14:34Z", "type": "commit"}, {"oid": "3555e24a40a354fe2a31cf3a1af37dbed4d43163", "url": "https://github.com/JMRI/JMRI/commit/3555e24a40a354fe2a31cf3a1af37dbed4d43163", "message": "update javascript throttle to name, request via roster", "committedDate": "2020-06-28T20:15:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzE3OQ==", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446703179", "bodyText": "the else should not be on a line by itself, but should be on the same line as the closing brace of prior block.", "author": "rhwood", "createdAt": "2020-06-28T21:57:19Z", "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);\n+                    throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n+                            .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n+                            id);\n+                }\n+            }", "originalCommit": "3555e24a40a354fe2a31cf3a1af37dbed4d43163", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxODk5MA==", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446718990", "bodyText": "Fair enough but a bit of a shame, it's no longer collapsible in notepad++ !", "author": "icklesteve", "createdAt": "2020-06-29T00:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzI4Mw==", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446703283", "bodyText": "Replace this address with the entry id.", "author": "rhwood", "createdAt": "2020-06-28T21:58:27Z", "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);", "originalCommit": "3555e24a40a354fe2a31cf3a1af37dbed4d43163", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzMwNw==", "url": "https://github.com/JMRI/JMRI/pull/8746#discussion_r446703307", "bodyText": "Replace this address with the entry id.", "author": "rhwood", "createdAt": "2020-06-28T21:58:54Z", "path": "java/src/jmri/server/json/throttle/JsonThrottle.java", "diffHunk": "@@ -139,18 +139,26 @@ public static JsonThrottle getThrottle(String throttleId, JsonNode data, JsonThr\n                     manager.getServers(throttle).size()));\n         } else {\n             throttle = new JsonThrottle(address, server);\n-            if (!manager.requestThrottle(address, throttle)) {\n-                log.error(\"Unable to get throttle for \\\"{}\\\".\", address);\n-                throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n-                        .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),\n-                        id);\n+            if (entry!=null) {\n+                if (!manager.requestThrottle(entry, throttle)) {\n+                    log.error(\"Unable to get rostered throttle for \\\"{}\\\".\", address);\n+                    throw new JsonException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Bundle\n+                            .getMessage(server.getConnection().getLocale(), \"ErrorThrottleUnableToGetThrottle\", address),", "originalCommit": "3555e24a40a354fe2a31cf3a1af37dbed4d43163", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f557b16c5537b69df261cd76dd4ce37d07f46dfb", "url": "https://github.com/JMRI/JMRI/commit/f557b16c5537b69df261cd76dd4ce37d07f46dfb", "message": "formatting / entry id", "committedDate": "2020-06-29T00:35:34Z", "type": "commit"}]}