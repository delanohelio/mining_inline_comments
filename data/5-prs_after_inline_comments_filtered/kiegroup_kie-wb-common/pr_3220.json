{"pr_number": 3220, "pr_title": "DROOLS-5131: [DMN Designer] Boxed List support", "pr_createdAt": "2020-03-16T14:41:01Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3220", "timeline": [{"oid": "a4f96b270830059b6ebdad87f207dda6c297f549", "url": "https://github.com/kiegroup/kie-wb-common/commit/a4f96b270830059b6ebdad87f207dda6c297f549", "message": "DROOLS-5131: [DMN Designer] Boxed List support", "committedDate": "2020-03-17T19:31:42Z", "type": "commit"}, {"oid": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "url": "https://github.com/kiegroup/kie-wb-common/commit/19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "message": "Updates following peer review.", "committedDate": "2020-03-18T12:52:45Z", "type": "commit"}, {"oid": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "url": "https://github.com/kiegroup/kie-wb-common/commit/19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "message": "Updates following peer review.", "committedDate": "2020-03-18T12:52:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MjkxNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r394882915", "bodyText": "Question, can we use some private static final new List()? In other words, is result of this used juts to determine what UI is shown or is it use in runtime, accessing, changing its vales.", "author": "jomarko", "createdAt": "2020-03-19T09:13:14Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/list/ListEditorDefinition.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.client.editors.expressions.types.list;\n+\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.ui.client.local.spi.TranslationService;\n+import org.kie.workbench.common.dmn.api.definition.HasExpression;\n+import org.kie.workbench.common.dmn.api.definition.HasName;\n+import org.kie.workbench.common.dmn.api.definition.model.Expression;\n+import org.kie.workbench.common.dmn.api.definition.model.List;\n+import org.kie.workbench.common.dmn.api.definition.model.LiteralExpression;\n+import org.kie.workbench.common.dmn.api.qualifiers.DMNEditor;\n+import org.kie.workbench.common.dmn.client.commands.factory.DefaultCanvasCommandFactory;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.BaseEditorDefinition;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.ExpressionEditorDefinitions;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.ExpressionType;\n+import org.kie.workbench.common.dmn.client.editors.types.ValueAndDataTypePopoverView;\n+import org.kie.workbench.common.dmn.client.resources.i18n.DMNEditorConstants;\n+import org.kie.workbench.common.dmn.client.widgets.grid.BaseExpressionGrid;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.ListSelectorView;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.BaseUIModelMapper;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.DMNGridData;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.ExpressionEditorChanged;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.GridCellTuple;\n+import org.kie.workbench.common.stunner.core.client.api.SessionManager;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.event.selection.DomainObjectSelectionEvent;\n+import org.kie.workbench.common.stunner.core.client.command.SessionCommandManager;\n+import org.kie.workbench.common.stunner.core.util.DefinitionUtils;\n+import org.kie.workbench.common.stunner.forms.client.event.RefreshFormPropertiesEvent;\n+import org.uberfire.ext.wires.core.grids.client.model.GridData;\n+\n+@ApplicationScoped\n+public class ListEditorDefinition extends BaseEditorDefinition<List, ListGridData> {\n+\n+    private Supplier<ExpressionEditorDefinitions> expressionEditorDefinitionsSupplier;\n+    private ValueAndDataTypePopoverView.Presenter headerEditor;\n+\n+    public ListEditorDefinition() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public ListEditorDefinition(final DefinitionUtils definitionUtils,\n+                                final SessionManager sessionManager,\n+                                final SessionCommandManager<AbstractCanvasHandler> sessionCommandManager,\n+                                final @DMNEditor DefaultCanvasCommandFactory canvasCommandFactory,\n+                                final Event<ExpressionEditorChanged> editorSelectedEvent,\n+                                final Event<RefreshFormPropertiesEvent> refreshFormPropertiesEvent,\n+                                final Event<DomainObjectSelectionEvent> domainObjectSelectionEvent,\n+                                final ListSelectorView.Presenter listSelector,\n+                                final TranslationService translationService,\n+                                final @DMNEditor Supplier<ExpressionEditorDefinitions> expressionEditorDefinitionsSupplier,\n+                                final ValueAndDataTypePopoverView.Presenter headerEditor) {\n+        super(definitionUtils,\n+              sessionManager,\n+              sessionCommandManager,\n+              canvasCommandFactory,\n+              editorSelectedEvent,\n+              refreshFormPropertiesEvent,\n+              domainObjectSelectionEvent,\n+              listSelector,\n+              translationService);\n+        this.expressionEditorDefinitionsSupplier = expressionEditorDefinitionsSupplier;\n+        this.headerEditor = headerEditor;\n+    }\n+\n+    @Override\n+    public ExpressionType getType() {\n+        return ExpressionType.LIST;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return translationService.format(DMNEditorConstants.ExpressionEditor_ListType);\n+    }\n+\n+    @Override\n+    public Optional<List> getModelClass() {\n+        return Optional.of(new List());", "originalCommit": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMDAyOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r395110028", "bodyText": "Good question... it is used as the expression instance behind the grid and hence needs to be a new instance each time... BUT the class is also used to lookup an editor for the expression instance. See ExpressionEditorDefinitions. I guess these two concerns should be separated and ExpressionEditorDefinition have two methods; one to return a Class used to lookup editors; and another to provide a new instance of an expression for editors.\nWDYT? Adding it to https://issues.redhat.com/browse/DROOLS-2974 would be best.\nIf you agree I can do the necessary admin.", "author": "manstis", "createdAt": "2020-03-19T15:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MjkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NDI2NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r394884264", "bodyText": "please remove comment", "author": "jomarko", "createdAt": "2020-03-19T09:15:38Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/list/ListGrid.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.client.editors.expressions.types.list;\n+\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import javax.enterprise.event.Event;\n+\n+import com.ait.lienzo.shared.core.types.EventPropagationMode;\n+import org.jboss.errai.ui.client.local.spi.TranslationService;\n+import org.kie.workbench.common.dmn.api.definition.HasExpression;\n+import org.kie.workbench.common.dmn.api.definition.HasName;\n+import org.kie.workbench.common.dmn.api.definition.model.DMNModelInstrumentedBase;\n+import org.kie.workbench.common.dmn.api.definition.model.Expression;\n+import org.kie.workbench.common.dmn.api.definition.model.List;\n+import org.kie.workbench.common.dmn.api.definition.model.LiteralExpression;\n+import org.kie.workbench.common.dmn.api.property.dmn.Name;\n+import org.kie.workbench.common.dmn.client.commands.expressions.types.list.AddListRowCommand;\n+import org.kie.workbench.common.dmn.client.commands.expressions.types.list.ClearExpressionTypeCommand;\n+import org.kie.workbench.common.dmn.client.commands.expressions.types.list.DeleteListRowCommand;\n+import org.kie.workbench.common.dmn.client.commands.factory.DefaultCanvasCommandFactory;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.ExpressionEditorDefinitions;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.context.ContextGridRowNumberColumn;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.context.ExpressionCellValue;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.context.ExpressionEditorColumn;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.undefined.UndefinedExpressionGrid;\n+import org.kie.workbench.common.dmn.client.editors.expressions.util.SelectionUtils;\n+import org.kie.workbench.common.dmn.client.editors.types.ValueAndDataTypePopoverView;\n+import org.kie.workbench.common.dmn.client.resources.i18n.DMNEditorConstants;\n+import org.kie.workbench.common.dmn.client.widgets.grid.BaseExpressionGrid;\n+import org.kie.workbench.common.dmn.client.widgets.grid.BaseExpressionGridRenderer;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.container.CellEditorControlsView;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.ListSelectorView;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.ExpressionEditorChanged;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.ExpressionEditorGridRow;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.GridCellTuple;\n+import org.kie.workbench.common.dmn.client.widgets.layer.DMNGridLayer;\n+import org.kie.workbench.common.dmn.client.widgets.panel.DMNGridPanel;\n+import org.kie.workbench.common.stunner.core.client.api.SessionManager;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.event.selection.DomainObjectSelectionEvent;\n+import org.kie.workbench.common.stunner.core.client.command.SessionCommandManager;\n+import org.kie.workbench.common.stunner.core.domainobject.DomainObject;\n+import org.kie.workbench.common.stunner.core.util.DefinitionUtils;\n+import org.kie.workbench.common.stunner.forms.client.event.RefreshFormPropertiesEvent;\n+import org.uberfire.ext.wires.core.grids.client.model.GridCell;\n+import org.uberfire.ext.wires.core.grids.client.model.GridColumn;\n+import org.uberfire.ext.wires.core.grids.client.model.GridRow;\n+import org.uberfire.ext.wires.core.grids.client.model.impl.BaseHeaderMetaData;\n+\n+public class ListGrid extends BaseExpressionGrid<List, ListGridData, ListUIModelMapper> implements HasListSelectorControl {\n+\n+    private final ValueAndDataTypePopoverView.Presenter headerEditor;\n+\n+    private final Supplier<ExpressionEditorDefinitions> expressionEditorDefinitionsSupplier;\n+\n+    public ListGrid(final GridCellTuple parent,\n+                    final Optional<String> nodeUUID,\n+                    final HasExpression hasExpression,\n+                    final Optional<HasName> hasName,\n+                    final DMNGridPanel gridPanel,\n+                    final DMNGridLayer gridLayer,\n+                    final ListGridData gridData,\n+                    final DefinitionUtils definitionUtils,\n+                    final SessionManager sessionManager,\n+                    final SessionCommandManager<AbstractCanvasHandler> sessionCommandManager,\n+                    final DefaultCanvasCommandFactory canvasCommandFactory,\n+                    final Event<ExpressionEditorChanged> editorSelectedEvent,\n+                    final Event<RefreshFormPropertiesEvent> refreshFormPropertiesEvent,\n+                    final Event<DomainObjectSelectionEvent> domainObjectSelectionEvent,\n+                    final CellEditorControlsView.Presenter cellEditorControls,\n+                    final ListSelectorView.Presenter listSelector,\n+                    final TranslationService translationService,\n+                    final boolean isOnlyVisualChangeAllowed,\n+                    final int nesting,\n+                    final Supplier<ExpressionEditorDefinitions> expressionEditorDefinitionsSupplier,\n+                    final ValueAndDataTypePopoverView.Presenter headerEditor) {\n+        super(parent,\n+              nodeUUID,\n+              hasExpression,\n+              hasName,\n+              gridPanel,\n+              gridLayer,\n+              gridData,\n+              new BaseExpressionGridRenderer(gridData),\n+              definitionUtils,\n+              sessionManager,\n+              sessionCommandManager,\n+              canvasCommandFactory,\n+              editorSelectedEvent,\n+              refreshFormPropertiesEvent,\n+              domainObjectSelectionEvent,\n+              cellEditorControls,\n+              listSelector,\n+              translationService,\n+              isOnlyVisualChangeAllowed,\n+              nesting);\n+        this.expressionEditorDefinitionsSupplier = expressionEditorDefinitionsSupplier;\n+        this.headerEditor = headerEditor;\n+\n+        setEventPropagationMode(EventPropagationMode.NO_ANCESTORS);\n+\n+        super.doInitialisation();\n+    }\n+\n+    @Override\n+    protected void doInitialisation() {\n+        // Defer initialisation until after the constructor completes as\n+        // makeUiModelMapper needs expressionEditorDefinitionsSupplier to have been set\n+    }\n+\n+    @Override\n+    public ListUIModelMapper makeUiModelMapper() {\n+        return new ListUIModelMapper(this,\n+                                     this::getModel,/**/", "originalCommit": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5MzY5OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r395093699", "bodyText": "Done.", "author": "manstis", "createdAt": "2020-03-19T15:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NDI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTA5MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r394905090", "bodyText": "In getItems we create also ListSelectorHeaderItem is this cast safe?", "author": "jomarko", "createdAt": "2020-03-19T09:51:35Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/list/ListGrid.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.client.editors.expressions.types.list;\n+\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import javax.enterprise.event.Event;\n+\n+import com.ait.lienzo.shared.core.types.EventPropagationMode;\n+import org.jboss.errai.ui.client.local.spi.TranslationService;\n+import org.kie.workbench.common.dmn.api.definition.HasExpression;\n+import org.kie.workbench.common.dmn.api.definition.HasName;\n+import org.kie.workbench.common.dmn.api.definition.model.DMNModelInstrumentedBase;\n+import org.kie.workbench.common.dmn.api.definition.model.Expression;\n+import org.kie.workbench.common.dmn.api.definition.model.List;\n+import org.kie.workbench.common.dmn.api.definition.model.LiteralExpression;\n+import org.kie.workbench.common.dmn.api.property.dmn.Name;\n+import org.kie.workbench.common.dmn.client.commands.expressions.types.list.AddListRowCommand;\n+import org.kie.workbench.common.dmn.client.commands.expressions.types.list.ClearExpressionTypeCommand;\n+import org.kie.workbench.common.dmn.client.commands.expressions.types.list.DeleteListRowCommand;\n+import org.kie.workbench.common.dmn.client.commands.factory.DefaultCanvasCommandFactory;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.ExpressionEditorDefinitions;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.context.ContextGridRowNumberColumn;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.context.ExpressionCellValue;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.context.ExpressionEditorColumn;\n+import org.kie.workbench.common.dmn.client.editors.expressions.types.undefined.UndefinedExpressionGrid;\n+import org.kie.workbench.common.dmn.client.editors.expressions.util.SelectionUtils;\n+import org.kie.workbench.common.dmn.client.editors.types.ValueAndDataTypePopoverView;\n+import org.kie.workbench.common.dmn.client.resources.i18n.DMNEditorConstants;\n+import org.kie.workbench.common.dmn.client.widgets.grid.BaseExpressionGrid;\n+import org.kie.workbench.common.dmn.client.widgets.grid.BaseExpressionGridRenderer;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.container.CellEditorControlsView;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.ListSelectorView;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.ExpressionEditorChanged;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.ExpressionEditorGridRow;\n+import org.kie.workbench.common.dmn.client.widgets.grid.model.GridCellTuple;\n+import org.kie.workbench.common.dmn.client.widgets.layer.DMNGridLayer;\n+import org.kie.workbench.common.dmn.client.widgets.panel.DMNGridPanel;\n+import org.kie.workbench.common.stunner.core.client.api.SessionManager;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.event.selection.DomainObjectSelectionEvent;\n+import org.kie.workbench.common.stunner.core.client.command.SessionCommandManager;\n+import org.kie.workbench.common.stunner.core.domainobject.DomainObject;\n+import org.kie.workbench.common.stunner.core.util.DefinitionUtils;\n+import org.kie.workbench.common.stunner.forms.client.event.RefreshFormPropertiesEvent;\n+import org.uberfire.ext.wires.core.grids.client.model.GridCell;\n+import org.uberfire.ext.wires.core.grids.client.model.GridColumn;\n+import org.uberfire.ext.wires.core.grids.client.model.GridRow;\n+import org.uberfire.ext.wires.core.grids.client.model.impl.BaseHeaderMetaData;\n+\n+public class ListGrid extends BaseExpressionGrid<List, ListGridData, ListUIModelMapper> implements HasListSelectorControl {\n+\n+    private final ValueAndDataTypePopoverView.Presenter headerEditor;\n+\n+    private final Supplier<ExpressionEditorDefinitions> expressionEditorDefinitionsSupplier;\n+\n+    public ListGrid(final GridCellTuple parent,\n+                    final Optional<String> nodeUUID,\n+                    final HasExpression hasExpression,\n+                    final Optional<HasName> hasName,\n+                    final DMNGridPanel gridPanel,\n+                    final DMNGridLayer gridLayer,\n+                    final ListGridData gridData,\n+                    final DefinitionUtils definitionUtils,\n+                    final SessionManager sessionManager,\n+                    final SessionCommandManager<AbstractCanvasHandler> sessionCommandManager,\n+                    final DefaultCanvasCommandFactory canvasCommandFactory,\n+                    final Event<ExpressionEditorChanged> editorSelectedEvent,\n+                    final Event<RefreshFormPropertiesEvent> refreshFormPropertiesEvent,\n+                    final Event<DomainObjectSelectionEvent> domainObjectSelectionEvent,\n+                    final CellEditorControlsView.Presenter cellEditorControls,\n+                    final ListSelectorView.Presenter listSelector,\n+                    final TranslationService translationService,\n+                    final boolean isOnlyVisualChangeAllowed,\n+                    final int nesting,\n+                    final Supplier<ExpressionEditorDefinitions> expressionEditorDefinitionsSupplier,\n+                    final ValueAndDataTypePopoverView.Presenter headerEditor) {\n+        super(parent,\n+              nodeUUID,\n+              hasExpression,\n+              hasName,\n+              gridPanel,\n+              gridLayer,\n+              gridData,\n+              new BaseExpressionGridRenderer(gridData),\n+              definitionUtils,\n+              sessionManager,\n+              sessionCommandManager,\n+              canvasCommandFactory,\n+              editorSelectedEvent,\n+              refreshFormPropertiesEvent,\n+              domainObjectSelectionEvent,\n+              cellEditorControls,\n+              listSelector,\n+              translationService,\n+              isOnlyVisualChangeAllowed,\n+              nesting);\n+        this.expressionEditorDefinitionsSupplier = expressionEditorDefinitionsSupplier;\n+        this.headerEditor = headerEditor;\n+\n+        setEventPropagationMode(EventPropagationMode.NO_ANCESTORS);\n+\n+        super.doInitialisation();\n+    }\n+\n+    @Override\n+    protected void doInitialisation() {\n+        // Defer initialisation until after the constructor completes as\n+        // makeUiModelMapper needs expressionEditorDefinitionsSupplier to have been set\n+    }\n+\n+    @Override\n+    public ListUIModelMapper makeUiModelMapper() {\n+        return new ListUIModelMapper(this,\n+                                     this::getModel,/**/\n+                                     getExpression(),\n+                                     () -> isOnlyVisualChangeAllowed,\n+                                     expressionEditorDefinitionsSupplier,\n+                                     listSelector,\n+                                     nesting);\n+    }\n+\n+    @Override\n+    public void initialiseUiColumns() {\n+        final java.util.List<GridColumn.HeaderMetaData> headerMetaData = new ArrayList<>();\n+        final ContextGridRowNumberColumn rowNumberColumn = new ContextGridRowNumberColumn(headerMetaData,\n+                                                                                          getAndSetInitialWidth(ListUIModelMapperHelper.ROW_COLUMN_INDEX,\n+                                                                                                                ContextGridRowNumberColumn.DEFAULT_WIDTH));\n+\n+        if (nesting == 0) {\n+            rowNumberColumn.getHeaderMetaData().add(new BaseHeaderMetaData(\"#\"));\n+            headerMetaData.add(new ListExpressionColumnHeaderMetaData(hasExpression,\n+                                                                      hasName,\n+                                                                      clearValueConsumer(true, new Name()),\n+                                                                      setValueConsumer(true),\n+                                                                      setTypeRefConsumer(),\n+                                                                      translationService,\n+                                                                      cellEditorControls,\n+                                                                      headerEditor));\n+        }\n+\n+        final GridColumn listColumn = new ListExpressionEditorColumn(gridLayer,\n+                                                                     headerMetaData,\n+                                                                     getAndSetInitialWidth(ListUIModelMapperHelper.EXPRESSION_COLUMN_INDEX,\n+                                                                                           ExpressionEditorColumn.DEFAULT_WIDTH),\n+                                                                     this);\n+        model.appendColumn(rowNumberColumn);\n+        model.appendColumn(listColumn);\n+\n+        getRenderer().setColumnRenderConstraint((isSelectionLayer, gridColumn) -> true);\n+    }\n+\n+    @Override\n+    public void initialiseUiRows() {\n+        getExpression().get().ifPresent(list -> {\n+            list.getExpression().forEach(e -> model.appendRow(new ExpressionEditorGridRow()));\n+        });\n+    }\n+\n+    @Override\n+    public void initialiseUiCells() {\n+        getExpression().get().ifPresent(list -> {\n+            for (int rowIndex = 0; rowIndex < list.getExpression().size(); rowIndex++) {\n+                uiModelMapper.fromDMNModel(rowIndex,\n+                                           0);\n+                uiModelMapper.fromDMNModel(rowIndex,\n+                                           1);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public java.util.List<ListSelectorItem> getItems(final int uiRowIndex,\n+                                                     final int uiColumnIndex) {\n+        final java.util.List<ListSelectorItem> items = new ArrayList<>();\n+        final boolean isMultiRow = SelectionUtils.isMultiRow(model);\n+        final boolean isMultiSelect = SelectionUtils.isMultiSelect(model);\n+\n+        items.add(ListSelectorHeaderItem.build(translationService.format(DMNEditorConstants.ListEditor_HeaderRows)));\n+        items.add(ListSelectorTextItem.build(translationService.format(DMNEditorConstants.ListEditor_InsertRowAbove),\n+                                             !isMultiRow,\n+                                             () -> {\n+                                                 cellEditorControls.hide();\n+                                                 getExpression().get().ifPresent(e -> addRow(uiRowIndex));\n+                                             }));\n+        items.add(ListSelectorTextItem.build(translationService.format(DMNEditorConstants.ListEditor_InsertRowBelow),\n+                                             !isMultiRow,\n+                                             () -> {\n+                                                 cellEditorControls.hide();\n+                                                 getExpression().get().ifPresent(e -> addRow(uiRowIndex + 1));\n+                                             }));\n+        items.add(ListSelectorTextItem.build(translationService.format(DMNEditorConstants.ListEditor_DeleteRow),\n+                                             !isMultiRow && model.getRowCount() > 1,\n+                                             () -> {\n+                                                 cellEditorControls.hide();\n+                                                 getExpression().get().ifPresent(e -> deleteRow(uiRowIndex));\n+                                             }));\n+\n+        //If not ExpressionEditor column don't add extra items\n+        if (ListUIModelMapperHelper.getSection(uiColumnIndex) != ListUIModelMapperHelper.ListSection.EXPRESSION) {\n+            return items;\n+        }\n+\n+        //If cell editor is UndefinedExpressionGrid don't add extra items\n+        final GridCell<?> cell = model.getCell(uiRowIndex, uiColumnIndex);\n+        final ExpressionCellValue ecv = (ExpressionCellValue) cell.getValue();\n+        if (!ecv.getValue().isPresent()) {\n+            return items;\n+        }\n+        final BaseExpressionGrid grid = ecv.getValue().get();\n+        if (grid instanceof UndefinedExpressionGrid) {\n+            return items;\n+        }\n+\n+        if (items.size() > 0) {\n+            items.add(new ListSelectorDividerItem());\n+        }\n+        items.add(ListSelectorTextItem.build(translationService.format(DMNEditorConstants.ExpressionEditor_Clear),\n+                                             !isMultiSelect,\n+                                             () -> {\n+                                                 cellEditorControls.hide();\n+                                                 clearExpressionType(uiRowIndex);\n+                                             }));\n+\n+        return items;\n+    }\n+\n+    @Override\n+    public void onItemSelected(final ListSelectorItem item) {\n+        final ListSelectorTextItem li = (ListSelectorTextItem) item;", "originalCommit": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NjA4OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r395096088", "bodyText": "Yes, as the clickable items added to it are all ListSelectorTextItem\nSee these lines.", "author": "manstis", "createdAt": "2020-03-19T15:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyMjM4OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r394922389", "bodyText": "2020", "author": "jomarko", "createdAt": "2020-03-19T10:20:33Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/expressions/types/list/MoveListRowsCommandTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "originalCommit": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NzAyMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r395097020", "bodyText": "Done.", "author": "manstis", "createdAt": "2020-03-19T15:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyMjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyMjY4Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r394922686", "bodyText": "2020", "author": "jomarko", "createdAt": "2020-03-19T10:21:05Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/editors/expressions/types/list/ListExpressionColumnHeaderMetaDataTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "19205611aeb71a020ddcc44bbecc4dcc7a7ee2c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwNjY1MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3220#discussion_r395106651", "bodyText": "Done.", "author": "manstis", "createdAt": "2020-03-19T15:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyMjY4Ng=="}], "type": "inlineReview"}, {"oid": "0c0be69bbf2af2321b69be3ba1d936e8e6d81f02", "url": "https://github.com/kiegroup/kie-wb-common/commit/0c0be69bbf2af2321b69be3ba1d936e8e6d81f02", "message": "Updates following peer review. Integration test for List client-side marshalling added too.", "committedDate": "2020-03-19T15:28:13Z", "type": "forcePushed"}, {"oid": "bd15b9a06f88d93dffe909ef84135f1f369cd80f", "url": "https://github.com/kiegroup/kie-wb-common/commit/bd15b9a06f88d93dffe909ef84135f1f369cd80f", "message": "Updates following peer review. Integration test for List client-side marshalling added too.", "committedDate": "2020-03-19T15:35:39Z", "type": "commit"}, {"oid": "bd15b9a06f88d93dffe909ef84135f1f369cd80f", "url": "https://github.com/kiegroup/kie-wb-common/commit/bd15b9a06f88d93dffe909ef84135f1f369cd80f", "message": "Updates following peer review. Integration test for List client-side marshalling added too.", "committedDate": "2020-03-19T15:35:39Z", "type": "forcePushed"}]}