{"pr_number": 3248, "pr_title": "Kogito 1020 : VSCode - BPMN modeler support variables tagging", "pr_createdAt": "2020-03-26T02:25:37Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3248", "timeline": [{"oid": "2749545715e8774a70bbf907cbf4237af4d9b9ea", "url": "https://github.com/kiegroup/kie-wb-common/commit/2749545715e8774a70bbf907cbf4237af4d9b9ea", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging - Added tests for Sonar Cloud", "committedDate": "2020-03-28T01:23:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTU4MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399855581", "bodyText": "not sure if makes sense, but shouldn't it be a replaceAll instead of a replace?", "author": "romartin", "createdAt": "2020-03-29T21:20:22Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/CustomElement.java", "diffHunk": "@@ -31,7 +31,20 @@\n     public static final MetadataTypeDefinition<Boolean> autoStart = new BooleanElement(\"customAutoStart\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionSource = new BooleanElement(\"isAutoConnection.source\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionTarget = new BooleanElement(\"isAutoConnection.target\", false);\n-    public static final MetadataTypeDefinition<Boolean> customKPI = new BooleanElement(\"customKPI\", false);\n+    public static final MetadataTypeDefinition<String> customTags = new StringElement(\"customTags\", \"[]\") {\n+        // Need to use an intermediary character since Variables depend on comma separators\n+        @Override\n+        public String getValue(BaseElement element) {\n+            return getStringValue(element)\n+                    .orElse(getDefaultValue()).replace(\",\", \";\");", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3OTU1Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401279553", "bodyText": "Hi @romartin, I am pretty sure replace works by replacing all strings, replaceAll as per the documentation replaces all as well but working using a Regex, let me know if I should change", "author": "inodeman", "createdAt": "2020-03-31T23:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMTE1MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r404411150", "bodyText": "Hey @inodeman\nNo worries, maybe I'm also wrong hehe, let's try to figure it out together :)\nAs far as I remember it's replacling all occurrences but in case you're using a regular expression, but here you're NOT using a regexp. So instead, you have to move this string to a regexp or use the replaceAll. Also think that even using the Java API, we're using same code for the client side marshallers, and that means that it will be transpiled to Javascript, where the  String API differs a bit. See for example this post for the Javascript API, it mentions that String arguments are not considered regexp, so not replaccing all occurrences.\nSooo I think the best way to do this is by really testing both backend and server side implementations (around that replace method usages) by both unit testing and also testing the runtimes (BC and kogito). This way we'll be really sure about how each implementation works and if we're properly replacing ALL occurrences too.\nCan you please do this quick exercice and try to ensure it at 100%? You think it makes sense?", "author": "romartin", "createdAt": "2020-04-06T21:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTU5OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399855598", "bodyText": "not sure if makes sense, but shouldn't it be a replaceAll instead of a replace?", "author": "romartin", "createdAt": "2020-03-29T21:20:26Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/CustomElement.java", "diffHunk": "@@ -31,7 +31,20 @@\n     public static final MetadataTypeDefinition<Boolean> autoStart = new BooleanElement(\"customAutoStart\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionSource = new BooleanElement(\"isAutoConnection.source\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionTarget = new BooleanElement(\"isAutoConnection.target\", false);\n-    public static final MetadataTypeDefinition<Boolean> customKPI = new BooleanElement(\"customKPI\", false);\n+    public static final MetadataTypeDefinition<String> customTags = new StringElement(\"customTags\", \"[]\") {\n+        // Need to use an intermediary character since Variables depend on comma separators\n+        @Override\n+        public String getValue(BaseElement element) {\n+            return getStringValue(element)\n+                    .orElse(getDefaultValue()).replace(\",\", \";\");\n+        }\n+\n+        @Override\n+        public void setValue(BaseElement element, String value) {\n+            value = value.replace(\";\", \",\");", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3OTYxOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401279618", "bodyText": "Same as above @romartin", "author": "inodeman", "createdAt": "2020-03-31T23:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMTM3NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r404411375", "bodyText": "same as above too :)", "author": "romartin", "createdAt": "2020-04-06T21:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjQwNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399856406", "bodyText": "could it be private access?", "author": "romartin", "createdAt": "2020-03-29T21:28:11Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java", "diffHunk": "@@ -78,13 +78,13 @@\n     private DataTypeNamesService clientDataTypesService;\n \n     @DataField\n-    protected TableCellElement kpith = Document.get().createTHElement();\n+    protected TableCellElement tagsth = Document.get().createTHElement();", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjM2MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401336361", "bodyText": "Fixed @romartin", "author": "inodeman", "createdAt": "2020-04-01T03:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjQxNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399856414", "bodyText": "could it be private access?", "author": "romartin", "createdAt": "2020-03-29T21:28:15Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java", "diffHunk": "@@ -78,13 +78,13 @@\n     private DataTypeNamesService clientDataTypesService;\n \n     @DataField\n-    protected TableCellElement kpith = Document.get().createTHElement();\n+    protected TableCellElement tagsth = Document.get().createTHElement();\n \n     List<String> dataTypes;\n     List<String> dataTypeDisplayNames;\n     boolean readOnly = false;\n \n-    private boolean kpiDisabled = false;\n+    protected boolean tagsDisabled = false;", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjU5Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401336593", "bodyText": "Fixed @romartin", "author": "inodeman", "createdAt": "2020-04-01T03:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjU2NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399856565", "bodyText": "replace or replaceAll here too?'", "author": "romartin", "createdAt": "2020-03-29T21:29:29Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/customproperties/CustomElement.java", "diffHunk": "@@ -30,7 +30,21 @@\n     public static final MetadataTypeDefinition<Boolean> autoStart = new BooleanElement(\"customAutoStart\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionSource = new BooleanElement(\"isAutoConnection.source\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionTarget = new BooleanElement(\"isAutoConnection.target\", false);\n-    public static final MetadataTypeDefinition<Boolean> customKPI = new BooleanElement(\"customKPI\", false);\n+    public static final MetadataTypeDefinition<String> customTags = new StringElement(\"customTags\", \"[]\") {\n+        // Need to use an intermediary character since Variables depend on comma separators\n+        @Override\n+        public String getValue(BaseElement element) {\n+            return getStringValue(element)\n+                    .orElse(getDefaultValue()).replace(\",\", \";\");", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjY2OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401336668", "bodyText": "Hi @romartin comment from above", "author": "inodeman", "createdAt": "2020-04-01T03:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjYxMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399856612", "bodyText": "replace or replaceAll here too?'", "author": "romartin", "createdAt": "2020-03-29T21:29:51Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/customproperties/CustomElement.java", "diffHunk": "@@ -30,7 +30,21 @@\n     public static final MetadataTypeDefinition<Boolean> autoStart = new BooleanElement(\"customAutoStart\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionSource = new BooleanElement(\"isAutoConnection.source\", false);\n     public static final MetadataTypeDefinition<Boolean> autoConnectionTarget = new BooleanElement(\"isAutoConnection.target\", false);\n-    public static final MetadataTypeDefinition<Boolean> customKPI = new BooleanElement(\"customKPI\", false);\n+    public static final MetadataTypeDefinition<String> customTags = new StringElement(\"customTags\", \"[]\") {\n+        // Need to use an intermediary character since Variables depend on comma separators\n+        @Override\n+        public String getValue(BaseElement element) {\n+            return getStringValue(element)\n+                    .orElse(getDefaultValue()).replace(\",\", \";\");\n+        }\n+\n+        @Override\n+        public void setValue(BaseElement element, String value) {\n+            value = value.replace(\";\", \",\");", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjcwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401336701", "bodyText": "Hi @romartin comment from above", "author": "inodeman", "createdAt": "2020-04-01T03:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMTYwMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r404411603", "bodyText": "same as above too but here we're talking about Javascript, not as in the backend marshallers", "author": "romartin", "createdAt": "2020-04-06T21:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NjYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NzQxMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r399857410", "bodyText": "In general I see this VariableListItemWidgetViewImpl class, which is a view implementation, plenty of logic. Not sure in the already existing stuff, but at least looking at all below new methods.\nThe ideal should be having no logic on the view implementations, this way the classes are easier to test and most important, it results easy to manage the code and move to other (future ) implementation of a view, by reusing the same presenter classes and unit tests.\nSo it does not worth adding a comment for each of the conditional or looping expressions below in this class, just give it a second look now, try to see wihch logics can be moved to presenter, and then we can do second review iteration for this class. So please, could you try to refactor this a bit and try to decouple the logic as much as possible from the view?\nPS: Also could you please use private access modifier for the fields in the class? mostly are protected, not sure if for some reaon...\nThanks!", "author": "romartin", "createdAt": "2020-03-29T21:37:27Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariableListItemWidgetViewImpl.java", "diffHunk": "@@ -58,7 +77,7 @@\n  * they use a combination of ListBox and TextBox to implement a drop-down combo\n  * to hold the values.\n  */\n-@Templated(\"VariablesEditorWidget.html#variableRow\")\n+@Templated(value = \"VariablesEditorWidget.html#variableRow\", stylesheet = \"VariablesEditorWidget.css\")\n public class VariableListItemWidgetViewImpl implements VariableListItemWidgetView,", "originalCommit": "19666db4213ffeccddce968ef2eb1cfe0a564209", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjc4MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3248#discussion_r401336781", "bodyText": "Hi @romartin refactored some things, let me know if ok", "author": "inodeman", "createdAt": "2020-04-01T03:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NzQxMA=="}], "type": "inlineReview"}, {"oid": "d06b0234ca081c4e36f54889bd8636c9baca1532", "url": "https://github.com/kiegroup/kie-wb-common/commit/d06b0234ca081c4e36f54889bd8636c9baca1532", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging - Added tests for Sonar Cloud", "committedDate": "2020-03-31T00:15:59Z", "type": "forcePushed"}, {"oid": "737f662ed0527715dd8c20c1557852f2b1a5bc9a", "url": "https://github.com/kiegroup/kie-wb-common/commit/737f662ed0527715dd8c20c1557852f2b1a5bc9a", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging - Fixed Sonarcloud issues / Reviews", "committedDate": "2020-04-01T03:45:17Z", "type": "forcePushed"}, {"oid": "2a7cd7309cfd34618c2135801375c19f9f0fea7e", "url": "https://github.com/kiegroup/kie-wb-common/commit/2a7cd7309cfd34618c2135801375c19f9f0fea7e", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging - Fixed Sonarcloud issues / Reviews", "committedDate": "2020-04-02T17:49:09Z", "type": "forcePushed"}, {"oid": "02ea5d7de770a5db8e26840de49721e978d105d1", "url": "https://github.com/kiegroup/kie-wb-common/commit/02ea5d7de770a5db8e26840de49721e978d105d1", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging", "committedDate": "2020-04-08T18:14:17Z", "type": "forcePushed"}, {"oid": "bf13c6c859c033f298cfc7a90f33d5d93109780e", "url": "https://github.com/kiegroup/kie-wb-common/commit/bf13c6c859c033f298cfc7a90f33d5d93109780e", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging", "committedDate": "2020-04-08T23:10:01Z", "type": "commit"}, {"oid": "c01ba1558a0a1e6a6754246189e6f8993bb332b8", "url": "https://github.com/kiegroup/kie-wb-common/commit/c01ba1558a0a1e6a6754246189e6f8993bb332b8", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging - Fixed Test Failures / Conflicts", "committedDate": "2020-04-09T02:19:48Z", "type": "commit"}, {"oid": "c01ba1558a0a1e6a6754246189e6f8993bb332b8", "url": "https://github.com/kiegroup/kie-wb-common/commit/c01ba1558a0a1e6a6754246189e6f8993bb332b8", "message": "KOGITO-1020 : VSCode - BPMN modeler support variables tagging - Fixed Test Failures / Conflicts", "committedDate": "2020-04-09T02:19:48Z", "type": "forcePushed"}]}