{"pr_number": 71, "pr_title": "Add ShapeOps Enhancement to work with org.tensorflow.op.core.Shape", "pr_createdAt": "2020-06-14T16:04:35Z", "pr_url": "https://github.com/tensorflow/java/pull/71", "timeline": [{"oid": "9da3b9e9d52d917d4b30381a3bed0afba1b99014", "url": "https://github.com/tensorflow/java/commit/9da3b9e9d52d917d4b30381a3bed0afba1b99014", "message": "Add ShapeOps Enhancement to work with org.tensorflow.op.core.Shape directly", "committedDate": "2020-06-14T15:53:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMTc4Mw==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r440431783", "bodyText": "Please add the right license header (i.e. the non-Oracle one that references Tensorflow authors).", "author": "Craigacp", "createdAt": "2020-06-15T20:36:05Z", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/ShapeOps.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*", "originalCommit": "9da3b9e9d52d917d4b30381a3bed0afba1b99014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzOTgzOA==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r440439838", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-06-15T20:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMTc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMjM3MQ==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r440432371", "bodyText": "What's this test trying to do?", "author": "Craigacp", "createdAt": "2020-06-15T20:37:14Z", "path": "tensorflow-core/tensorflow-core-api/src/test/java/org/tensorflow/op/core/ShapeOpsTest.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package org.tensorflow.keras.utils;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/***\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+****/\n+\n+\n+import org.tensorflow.Graph;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Session;\n+import org.tensorflow.Tensor;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.core.Constant;\n+import org.tensorflow.op.core.Reshape;\n+import org.tensorflow.op.core.Shape;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+\n+/**\n+ *\n+ * @author jbclarke\n+ */\n+@RunWith(JUnit4.class)\n+public class ShapeOpsTest {\n+    \n+    public ShapeOpsTest() {\n+    }\n+    \n+\n+    /**\n+     * Test of create method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testCreate_Scope() {\n+        try (Graph g = new Graph();\n+                Session sess = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps stf = ShapeOps.create(scope);\n+            assertEquals(scope, stf.scope());\n+            assertEquals(TInt32.DTYPE, stf.datatype());\n+        }\n+    }\n+\n+    /**\n+     * Test of create method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testCreate_Scope_DataType() {\n+        System.out.println(\"create DataType\");\n+        try (Graph g = new Graph();\n+                Session sess = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps stf = ShapeOps.create(scope, TInt64.DTYPE);\n+            assertEquals(scope, stf.scope());\n+            assertEquals(TInt64.DTYPE, stf.datatype());\n+        }\n+    }\n+\n+    /**\n+     * Test of flatten method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testFlatten_Operand() {\n+        System.out.println(\"flatten operand\");\n+        try (Graph g = new Graph();\n+                Session session = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps instance = ShapeOps.create(scope, TInt64.DTYPE);\n+            Operand<TFloat32> operand = Constant.arrayOf(scope, new float[]{1, 2, 3, 4, 5, 6, 7, 8});\n+            Shape<TInt64> expResult = Shape.create(scope, operand, TInt64.DTYPE);\n+            Operand<TFloat32> reshaped = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[]{4, 2, 1}));\n+            Operand actual = instance.flatten(reshaped);\n+            Shape<TInt64> tfshape = Shape.create(scope, actual, TInt64.DTYPE);\n+\n+            AtomicInteger index = new AtomicInteger();\n+            try (Tensor<TInt64> result1 = session.runner().fetch(tfshape.asOutput()).run().get(0).expect(TInt64.DTYPE);\n+                    Tensor<TInt64> result2 = session.runner().fetch(expResult.asOutput()).run().get(0).expect(TInt64.DTYPE)) {\n+                result1.data().scalars().forEach(s -> assertEquals(\n+                        result2.data().getLong(index.getAndIncrement()), s.getLong()));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test of flatten method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testFlatten_Shape() {\n+        System.out.println(\"flatten shape\");\n+        try (Graph g = new Graph();\n+                Session session = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps instance = ShapeOps.create(scope, TInt64.DTYPE);\n+            Operand operand = Constant.arrayOf(scope, new float[] {1, 2, 3, 4, 5, 6, 7, 8} );\n+            Shape<TInt64> expShape = Shape.create(scope, operand, TInt64.DTYPE);\n+            Operand actual = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[] { 4,2,1} ));\n+            Shape<TInt64> tfshape = Shape.create(scope, actual, TInt64.DTYPE);\n+            Operand<TInt64> flattened = instance.flatten(tfshape);\n+            \n+            \n+            AtomicInteger index = new AtomicInteger();\n+            try (Tensor<TInt64> result1 = session.runner().fetch(flattened.asOutput()).run().get(0).expect(TInt64.DTYPE);\n+                    Tensor<TInt64> result2 = session.runner().fetch(expShape.asOutput()).run().get(0).expect(TInt64.DTYPE)) {\n+                result1.data().scalars().forEach(s -> assertEquals(\n+                        result2.data().getLong(index.getAndIncrement()), s.getLong()));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test of size method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testSize_Shape() {\n+        System.out.println(\"size\");\n+        try (Graph g = new Graph();\n+                Session session = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps instance = ShapeOps.create(scope, TInt64.DTYPE);\n+            Operand operand = Constant.arrayOf(scope, new float[] {1, 2, 3, 4, 5, 6, 7, 8} );\n+            Operand actual = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[] { 4,2,1} ));\n+            Shape<TInt64> tfshape = Shape.create(scope, actual, TInt64.DTYPE);\n+            Operand<TInt64> size = instance.size(tfshape);\n+            \n+            \n+            AtomicInteger index = new AtomicInteger();\n+            try (Tensor<TInt64> result1 = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt64.DTYPE)) {\n+                result1.data().scalars().forEach(s -> assertEquals(8, s.getLong()));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test of size method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testSize_Shape_Operand() {\n+        System.out.println(\"size\");\n+        try (Graph g = new Graph();\n+                Session session = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps instance = ShapeOps.create(scope);\n+            Operand operand = Constant.arrayOf(scope, new float[] {1, 2, 3, 4, 5, 6, 7, 8} );\n+            Operand actual = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[] { 4,2,1} ));\n+            Shape<TInt32> tfshape = Shape.create(scope, actual);\n+            \n+            Operand<TInt32> size = instance.size(tfshape, Constant.scalarOf(scope, 0));\n+            try (Tensor<TInt32> result = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(4, s.getInt()));\n+            }\n+            \n+            size = instance.size(tfshape, Constant.scalarOf(scope, 1));\n+            try (Tensor<TInt32> result = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(2, s.getInt()));\n+            }\n+            \n+            size = instance.size(tfshape, Constant.scalarOf(scope, 2));\n+            try (Tensor<TInt32> result = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(1, s.getInt()));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test of size method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testSize_Operand_Operand() {\n+        System.out.println(\"size\");\n+         try (Graph g = new Graph();\n+                Session session = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps instance = ShapeOps.create(scope);\n+            Operand operand = Constant.arrayOf(scope, new float[] {1, 2, 3, 4, 5, 6, 7, 8} );\n+            Operand actual = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[] { 4,2,1} ));\n+            \n+            Operand<TInt32> size = instance.size(actual, Constant.scalarOf(scope, 0));\n+            try (Tensor<TInt32> result = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(4, s.getInt()));\n+            }\n+            \n+            size = instance.size(actual, Constant.scalarOf(scope, 1));\n+            try (Tensor<TInt32> result = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(2, s.getInt()));\n+            }\n+            \n+            size = instance.size(actual, Constant.scalarOf(scope, 2));\n+            try (Tensor<TInt32> result = session.runner().fetch(size.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(1, s.getInt()));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test of numDimensions method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testNumDimensions() {\n+        System.out.println(\"numDimensions\");\n+        try (Graph g = new Graph();\n+                Session session = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps instance = ShapeOps.create(scope);\n+            Operand operand = Constant.arrayOf(scope, new float[] {1, 2, 3, 4, 5, 6, 7, 8} );\n+            Operand actual = Reshape.create(scope, operand, Constant.vectorOf(scope, new long[] { 4,2,1} ));\n+            Shape<TInt32> tfshape = Shape.create(scope, actual);\n+            \n+            Operand<TInt32> nDims = instance.numDimensions(tfshape);\n+            try (Tensor<TInt32> result = session.runner().fetch(nDims.asOutput()).run().get(0).expect(TInt32.DTYPE)) {\n+                result.data().scalars().forEach(s -> assertEquals(3, s.getInt()));\n+            }\n+            \n+        }\n+    }\n+\n+    /**\n+     * Test of reduceDims method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testReduceDims_Operand_Operand() {\n+        System.out.println(\"reduceDims\");", "originalCommit": "9da3b9e9d52d917d4b30381a3bed0afba1b99014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNTM5MA==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r440435390", "bodyText": "My mistake, It was intended to be the same as testReduceDims_Shape_Operand, but based on passing the operand rather than the shape directly. It may be a redundant, unless you think we need to test it both ways.", "author": "JimClarke5", "createdAt": "2020-06-15T20:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMjM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMjgxOQ==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r440432819", "bodyText": "Given the number of tests that are in TF at the moment, having it print out the name of each one is a little much.", "author": "Craigacp", "createdAt": "2020-06-15T20:38:09Z", "path": "tensorflow-core/tensorflow-core-api/src/test/java/org/tensorflow/op/core/ShapeOpsTest.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package org.tensorflow.keras.utils;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/***\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+****/\n+\n+\n+import org.tensorflow.Graph;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Session;\n+import org.tensorflow.Tensor;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.core.Constant;\n+import org.tensorflow.op.core.Reshape;\n+import org.tensorflow.op.core.Shape;\n+import org.tensorflow.types.TFloat32;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.TInt64;\n+\n+/**\n+ *\n+ * @author jbclarke\n+ */\n+@RunWith(JUnit4.class)\n+public class ShapeOpsTest {\n+    \n+    public ShapeOpsTest() {\n+    }\n+    \n+\n+    /**\n+     * Test of create method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testCreate_Scope() {\n+        try (Graph g = new Graph();\n+                Session sess = new Session(g)) {\n+            Scope scope = new Scope(g);\n+            ShapeOps stf = ShapeOps.create(scope);\n+            assertEquals(scope, stf.scope());\n+            assertEquals(TInt32.DTYPE, stf.datatype());\n+        }\n+    }\n+\n+    /**\n+     * Test of create method, of class ShapeOps.\n+     */\n+    @Test\n+    public void testCreate_Scope_DataType() {\n+        System.out.println(\"create DataType\");", "originalCommit": "9da3b9e9d52d917d4b30381a3bed0afba1b99014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNDIwMQ==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r440434201", "bodyText": "Ok I will remove the println's", "author": "JimClarke5", "createdAt": "2020-06-15T20:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMjgxOQ=="}], "type": "inlineReview"}, {"oid": "488779c09da22ff5646c5ea0d2051e7b3111e30a", "url": "https://github.com/tensorflow/java/commit/488779c09da22ff5646c5ea0d2051e7b3111e30a", "message": "Changed to match @Operator style", "committedDate": "2020-06-16T13:49:29Z", "type": "commit"}, {"oid": "a734f53f85bbf0415cd105d580d730798c08d35b", "url": "https://github.com/tensorflow/java/commit/a734f53f85bbf0415cd105d580d730798c08d35b", "message": "Removed println's on TestCases, removed unused testcase, changed calls to match new ShapeOps @operator style", "committedDate": "2020-06-16T13:50:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDYzNQ==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r441914635", "bodyText": "For consistency with other classes, please start the doc summary with a capital letter.", "author": "karllessard", "createdAt": "2020-06-18T01:14:16Z", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/ShapeOps.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package org.tensorflow.op.core;\n+\n+import java.util.Arrays;\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.op.core.Concat;\n+import org.tensorflow.op.core.ExpandDims;\n+import org.tensorflow.op.core.Reshape;\n+import org.tensorflow.op.core.Shape;\n+import org.tensorflow.op.core.Size;\n+import org.tensorflow.op.core.Slice;\n+import org.tensorflow.op.math.FloorMod;\n+import org.tensorflow.op.core.Constant;\n+import org.tensorflow.op.core.Gather;\n+import org.tensorflow.op.core.OnesLike;\n+import org.tensorflow.op.core.ReduceProd;\n+import org.tensorflow.op.core.Where;\n+import org.tensorflow.op.dtypes.Cast;\n+import org.tensorflow.op.math.NotEqual;\n+import org.tensorflow.op.math.Sub;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * An operator working with org.tensorflow.op.core.Shape tensors\n+ */\n+@Operator\n+public abstract class ShapeOps {\n+\n+    /**\n+     * flatten the shape to 1 dimension", "originalCommit": "a734f53f85bbf0415cd105d580d730798c08d35b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NjA1OQ==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r442246059", "bodyText": "Ok", "author": "JimClarke5", "createdAt": "2020-06-18T13:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNDYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNTc2Nw==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r441915767", "bodyText": "Parentheses not required around the array instantiation", "author": "karllessard", "createdAt": "2020-06-18T01:18:44Z", "path": "tensorflow-core/tensorflow-core-api/src/main/java/org/tensorflow/op/core/ShapeOps.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * To change this license header, choose License Headers in Project Properties.\n+ * To change this template file, choose Tools | Templates\n+ * and open the template in the editor.\n+ */\n+package org.tensorflow.op.core;\n+\n+import java.util.Arrays;\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Endpoint;\n+import org.tensorflow.op.annotation.Operator;\n+import org.tensorflow.op.core.Concat;\n+import org.tensorflow.op.core.ExpandDims;\n+import org.tensorflow.op.core.Reshape;\n+import org.tensorflow.op.core.Shape;\n+import org.tensorflow.op.core.Size;\n+import org.tensorflow.op.core.Slice;\n+import org.tensorflow.op.math.FloorMod;\n+import org.tensorflow.op.core.Constant;\n+import org.tensorflow.op.core.Gather;\n+import org.tensorflow.op.core.OnesLike;\n+import org.tensorflow.op.core.ReduceProd;\n+import org.tensorflow.op.core.Where;\n+import org.tensorflow.op.dtypes.Cast;\n+import org.tensorflow.op.math.NotEqual;\n+import org.tensorflow.op.math.Sub;\n+import org.tensorflow.types.TBool;\n+import org.tensorflow.types.TInt32;\n+import org.tensorflow.types.family.TNumber;\n+import org.tensorflow.types.family.TType;\n+\n+/**\n+ * An operator working with org.tensorflow.op.core.Shape tensors\n+ */\n+@Operator\n+public abstract class ShapeOps {\n+\n+    /**\n+     * flatten the shape to 1 dimension\n+     *\n+     * @param <T> the type of operand\n+     * @param scope current scope\n+     * @param operand the operand to flatten\n+     * @return the reshaped operand\n+     */\n+    @Endpoint(name = \"flatten\")\n+    public static <T extends TType> Operand<T> flatten(Scope scope, Operand<T> operand) {\n+        return flatten(scope, operand, TInt32.DTYPE);\n+    }\n+\n+    /**\n+     * flatten the shape to 1 dimension\n+     *\n+     * @param <T> the type of operand\n+     * @param <U> the shape datatype.\n+     * @param scope current scope\n+     * @param operand the operand to flatten\n+     * @param dType the shape datatype.\n+     * @return the reshaped operand\n+     */\n+    @Endpoint(name = \"flatten\")\n+    public static <T extends TType, U extends TNumber> Operand<T> flatten(Scope scope, Operand<T> operand, DataType<U> dType) {\n+        Operand<U> flatShape = flatten(scope, Shape.create(scope, operand, dType), dType);\n+        return Reshape.create(scope, operand, flatShape);\n+    }\n+\n+    /**\n+     * flatten the shape to 1 dimension\n+     *\n+     * @param scope current scope\n+     * @param shape the TensorFlow shape\n+     * @return the flattened shape\n+     * @see reduceDims\n+     */\n+    @Endpoint(name = \"flatten\")\n+    public static Operand<TInt32> flatten(Scope scope, Shape<TInt32> shape) {\n+        return flatten(scope, shape, TInt32.DTYPE);\n+    }\n+\n+    /**\n+     * flatten the shape to 1 dimension\n+     *\n+     * @param <U> the shape datatype.\n+     * @param scope current scope\n+     * @param shape the TensorFlow shape\n+     * @param dType the shape datatype.\n+     * @return the flattened shape\n+     * @see reduceDims\n+     */\n+    @Endpoint(name = \"flatten\")\n+    public static <U extends TNumber> Operand<U> flatten(Scope scope, Shape<U> shape, DataType<U> dType) {\n+        return ExpandDims.create(scope,\n+                size(scope, shape, dType),\n+                Cast.create(scope, Constant.scalarOf(scope, -1), TInt32.DTYPE));\n+    }\n+\n+    /**\n+     * get the size represented by the TensorFlow shape\n+     *\n+     * @param scope current scope\n+     * @param shape the TensorFlow shape\n+     * @return the size\n+     */\n+    @Endpoint(name = \"size\")\n+    public static Operand<TInt32> size(Scope scope, Shape<TInt32> shape) {\n+        return size(scope, shape, TInt32.DTYPE);\n+    }\n+\n+    /**\n+     * get the size represented by the TensorFlow shape\n+     *\n+     * @param <U> the shape datatype. the type of the shape\n+     * @param scope current scope\n+     * @param shape the TensorFlow shape\n+     * @param dType the shape datatype.\n+     * @return the size\n+     */\n+    @Endpoint(name = \"size\")\n+    public static <U extends TNumber> Operand<U> size(Scope scope, Shape<U> shape, DataType<U> dType) {\n+        Slice<U> dims = Slice.create(scope, shape,\n+                Cast.create(scope, Constant.arrayOf(scope, (new int[]{0})), dType),", "originalCommit": "a734f53f85bbf0415cd105d580d730798c08d35b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NjE5Nw==", "url": "https://github.com/tensorflow/java/pull/71#discussion_r442246197", "bodyText": "OK", "author": "JimClarke5", "createdAt": "2020-06-18T13:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNTc2Nw=="}], "type": "inlineReview"}, {"oid": "2c079e51395e7520ccf4cf523203b2070873dfb4", "url": "https://github.com/tensorflow/java/commit/2c079e51395e7520ccf4cf523203b2070873dfb4", "message": "Fixed Java Doc to capitalize start of summary, remove unnecessary parens aroune new int[], fixed license", "committedDate": "2020-06-18T18:41:40Z", "type": "commit"}]}