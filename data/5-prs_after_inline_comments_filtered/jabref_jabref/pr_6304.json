{"pr_number": 6304, "pr_title": "Rework journal abbreviation caching", "pr_createdAt": "2020-04-17T15:51:52Z", "pr_url": "https://github.com/JabRef/jabref/pull/6304", "timeline": [{"oid": "efa5b1aa37f84be772888d23547cd69bcd946859", "url": "https://github.com/JabRef/jabref/commit/efa5b1aa37f84be772888d23547cd69bcd946859", "message": "Rework journal abbreviation caching", "committedDate": "2020-04-17T14:36:21Z", "type": "commit"}, {"oid": "7fc293f9179a90a5d7edd04d898df5d421af53d5", "url": "https://github.com/JabRef/jabref/commit/7fc293f9179a90a5d7edd04d898df5d421af53d5", "message": "Add ADR-0010", "committedDate": "2020-04-23T20:17:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTYyMg==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414095622", "bodyText": "Why is this disabled?", "author": "koppor", "createdAt": "2020-04-23T20:18:27Z", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -32,52 +35,75 @@\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static void writeDefaultDatabase(Path targetDirectory) {\n+        try (MVStore store = MVStore.open(targetDirectory.resolve(\"journalList.mv\").getParent().toString())) {\n+            MVMap<String, String> fullToAbbreviation = store.openMap(\"FullToAbbreviation\");\n+\n+            // Add all standard abbreviations\n+            fullToAbbreviation.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            fullToAbbreviation.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getName, Abbreviation::getAbbreviation))\n+            );\n+\n+            MVMap<String, String> abbreviationToFull = store.openMap(\"AbbreviationToFull\");\n+\n+            // Add all standard abbreviations\n+            abbreviationToFull.putAll(\n+                    getBuiltInAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+\n+            // Add all IEEE abbreviations\n+            abbreviationToFull.putAll(\n+                    getStandardIEEEAbbreviations()\n+                            .stream()\n+                            .collect(Collectors.toMap(Abbreviation::getAbbreviation, Abbreviation::getName))\n+            );\n+            //store.commit();", "originalCommit": "efa5b1aa37f84be772888d23547cd69bcd946859", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTM5MA==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414529390", "bodyText": "It's not need apparently (happens automatically if the store is closed).", "author": "tobiasdiez", "createdAt": "2020-04-24T12:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzA4OQ==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414097089", "bodyText": "Just stumbled over this - can we get rid of true and false somehow? - enums maybe?", "author": "koppor", "createdAt": "2020-04-23T20:20:59Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -368,7 +367,7 @@ void testEntryIsUnchangedAfterChecks() {\n         new IntegrityCheck(context,\n                 mock(FilePreferences.class),\n                 createBibtexKeyPatternPreferences(),\n-                           new JournalAbbreviationRepository(new Abbreviation(\"IEEE Software\", \"IEEE SW\")), true, false)\n+                new JournalAbbreviationRepository(), true, false)", "originalCommit": "efa5b1aa37f84be772888d23547cd69bcd946859", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTkxMQ==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r414529911", "bodyText": "I don't see anything wrong with these booleans (and it's not related to this PR anyway)", "author": "tobiasdiez", "createdAt": "2020-04-24T12:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzA4OQ=="}], "type": "inlineReview"}, {"oid": "0d613f85a57f38df79901acc581d855aff92c83d", "url": "https://github.com/JabRef/jabref/commit/0d613f85a57f38df79901acc581d855aff92c83d", "message": "Merge branch 'master' of https://github.com/JabRef/jabref into journalAbbFile", "committedDate": "2020-04-24T11:37:26Z", "type": "commit"}, {"oid": "384747ecdc1e5fa869a69ed5a9646b9e1d203ced", "url": "https://github.com/JabRef/jabref/commit/384747ecdc1e5fa869a69ed5a9646b9e1d203ced", "message": "Remove IEEE abbreviations", "committedDate": "2020-04-24T12:14:50Z", "type": "commit"}, {"oid": "a647ef83e2c40e2ad4393ed3467e5fea82622f6f", "url": "https://github.com/JabRef/jabref/commit/a647ef83e2c40e2ad4393ed3467e5fea82622f6f", "message": "Convert abbreviations as part of build process", "committedDate": "2020-04-24T15:51:28Z", "type": "commit"}, {"oid": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "url": "https://github.com/JabRef/jabref/commit/2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "message": "Fix tests", "committedDate": "2020-04-24T16:30:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTUzMA==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415345530", "bodyText": "Use Objects.equals(...) to make it more consistent with other implementations", "author": "Siedlerchr", "createdAt": "2020-04-26T16:18:34Z", "path": "src/main/java/org/jabref/gui/journals/AbbreviationViewModel.java", "diffHunk": "@@ -80,16 +78,20 @@ public BooleanProperty isPseudoAbbreviationProperty() {\n     }\n \n     @Override\n-    public int hashCode() {\n-        return Objects.hash(abbreviationObject);\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        AbbreviationViewModel that = (AbbreviationViewModel) o;\n+        return getName().equals(that.getName()) &&", "originalCommit": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTczNg==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415345736", "bodyText": "I do not really understand this line. Why is this necessary?", "author": "Siedlerchr", "createdAt": "2020-04-26T16:19:34Z", "path": "src/main/java/org/jabref/gui/journals/ManageJournalAbbreviationsView.java", "diffHunk": "@@ -145,7 +147,11 @@ private void removeAbbreviation() {\n \n     @FXML\n     private void saveAbbreviationsAndCloseDialog() {\n-        viewModel.saveEverythingAndUpdateAutoCompleter();\n+        viewModel.save();\n+\n+        // Update journal abbreviation loader\n+        Globals.journalAbbreviationRepository = JournalAbbreviationLoader.loadRepository(preferences.getJournalAbbreviationPreferences());", "originalCommit": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM3NDM5MQ==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415374391", "bodyText": "If the user changes the abbreviations, these changes must be reflected in the global repository.", "author": "tobiasdiez", "createdAt": "2020-04-26T18:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NjIzNw==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346237", "bodyText": "Possible resource leak? I don't see where the reader is closed.", "author": "Siedlerchr", "createdAt": "2020-04-26T16:21:59Z", "path": "src/main/java/org/jabref/logic/journals/AbbreviationParser.java", "diffHunk": "@@ -33,32 +30,20 @@\n \n     public void readJournalListFromResource(String resourceFileName) {\n         try {\n-            URL url = Objects.requireNonNull(JournalAbbreviationRepository.class.getResource(Objects.requireNonNull(resourceFileName)));\n-            readJournalList(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8));\n+            InputStream stream = JournalAbbreviationRepository.class.getResourceAsStream(resourceFileName);\n+            readJournalList(new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8)));", "originalCommit": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NjQyNA==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346424", "bodyText": "We have to check if this also works in the jlink/jpackage version.", "author": "Siedlerchr", "createdAt": "2020-04-26T16:23:09Z", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationLoader.java", "diffHunk": "@@ -14,58 +16,42 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(JournalAbbreviationLoader.class);\n \n-    // Journal initialization\n     private static final String JOURNALS_FILE_BUILTIN = \"/journals/journalList.csv\";\n-    private static final String JOURNALS_IEEE_ABBREVIATION_LIST_WITH_CODE = \"/journals/IEEEJournalListCode.csv\";\n-    private static final String JOURNALS_IEEE_ABBREVIATION_LIST_WITH_TEXT = \"/journals/IEEEJournalListText.csv\";\n-    private JournalAbbreviationRepository journalAbbrev;\n-\n-    public static List<Abbreviation> getOfficialIEEEAbbreviations() {\n-        return readJournalListFromResource(JOURNALS_IEEE_ABBREVIATION_LIST_WITH_CODE);\n-    }\n-\n-    public static List<Abbreviation> getStandardIEEEAbbreviations() {\n-        return readJournalListFromResource(JOURNALS_IEEE_ABBREVIATION_LIST_WITH_TEXT);\n-    }\n \n     public static List<Abbreviation> getBuiltInAbbreviations() {\n         return readJournalListFromResource(JOURNALS_FILE_BUILTIN);\n     }\n \n-    public static List<Abbreviation> readJournalListFromResource(String resource) {\n+    private static List<Abbreviation> readJournalListFromResource(String resource) {\n         AbbreviationParser parser = new AbbreviationParser();\n         parser.readJournalListFromResource(Objects.requireNonNull(resource));\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file) throws FileNotFoundException {\n+    public static List<Abbreviation> readJournalListFromFile(Path file) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file));\n+        parser.readJournalListFromFile(file);\n         return parser.getAbbreviations();\n     }\n \n-    public static List<Abbreviation> readJournalListFromFile(File file, Charset encoding) throws FileNotFoundException {\n+    private static List<Abbreviation> readJournalListFromFile(Path file, Charset encoding) throws IOException {\n         LOGGER.debug(String.format(\"Reading journal list from file %s\", file));\n         AbbreviationParser parser = new AbbreviationParser();\n-        parser.readJournalListFromFile(Objects.requireNonNull(file), Objects.requireNonNull(encoding));\n+        parser.readJournalListFromFile(file, Objects.requireNonNull(encoding));\n         return parser.getAbbreviations();\n     }\n \n-    public void update(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n-        journalAbbrev = new JournalAbbreviationRepository();\n-\n-        // The order of reading the journal lists is important: last added abbreviation wins\n-        // For instance, in the personal list one can overwrite abbreviations in the built in list\n-\n-        // Read builtin list\n-        journalAbbrev.addEntries(readJournalListFromResource(JOURNALS_FILE_BUILTIN));\n-\n-        // Read IEEE list\n-        if (journalAbbreviationPreferences.useIEEEAbbreviations()) {\n-            journalAbbrev.addEntries(getOfficialIEEEAbbreviations());\n-        } else {\n-            journalAbbrev.addEntries(getStandardIEEEAbbreviations());\n+    public static JournalAbbreviationRepository loadRepository(JournalAbbreviationPreferences journalAbbreviationPreferences) {\n+        JournalAbbreviationRepository repository;\n+        // Initialize with built-in list\n+        try {\n+            Path tempJournalList = Files.createTempDirectory(\"journal\").resolve(\"journalList.mv\");\n+            Files.copy(JournalAbbreviationRepository.class.getResourceAsStream(\"/journals/journalList.mv\"), tempJournalList);", "originalCommit": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0Njc2MA==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r415346760", "bodyText": "Combine both returns with an OR?", "author": "Siedlerchr", "createdAt": "2020-04-26T16:24:56Z", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "diffHunk": "@@ -36,65 +42,89 @@ private static boolean isMatchedAbbreviated(String name, Abbreviation abbreviati\n         return isAbbreviated && !isExpanded;\n     }\n \n-    public int size() {\n-        return abbreviations.size();\n-    }\n-\n     /**\n      * Returns true if the given journal name is contained in the list either in its full form (e.g Physical Review\n      * Letters) or its abbreviated form (e.g. Phys. Rev. Lett.).\n      */\n     public boolean isKnownName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatched(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isKnown = customAbbreviations.stream().anyMatch(abbreviation -> isMatched(journal, abbreviation));\n+        if (isKnown) {\n+            return true;\n+        }\n+\n+        return fullToAbbreviation.containsKey(journal) || abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n      * Returns true if the given journal name is in its abbreviated form (e.g. Phys. Rev. Lett.). The test is strict,\n      * i.e. journals whose abbreviation is the same as the full name are not considered\n      */\n     public boolean isAbbreviatedName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isAbbreviated = customAbbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journal, abbreviation));", "originalCommit": "2f89e25c2786f982e721c0eb1f3910e391a2f6aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "230c0090ddf973d0b38410f96d4f0bada9d51b15", "url": "https://github.com/JabRef/jabref/commit/230c0090ddf973d0b38410f96d4f0bada9d51b15", "message": "Update according to review feedback", "committedDate": "2020-04-26T19:00:35Z", "type": "commit"}, {"oid": "e4ea1ccdd11512da4e2cb1f0d3abb9f73a92c30f", "url": "https://github.com/JabRef/jabref/commit/e4ea1ccdd11512da4e2cb1f0d3abb9f73a92c30f", "message": "Merge branch 'master' into journalAbbFile", "committedDate": "2020-04-26T19:03:55Z", "type": "commit"}, {"oid": "c0d028796ff70e5a6757fad2fb02d06038367859", "url": "https://github.com/JabRef/jabref/commit/c0d028796ff70e5a6757fad2fb02d06038367859", "message": "Fix bug", "committedDate": "2020-04-29T14:50:16Z", "type": "commit"}, {"oid": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "url": "https://github.com/JabRef/jabref/commit/e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "message": "Merge branch 'journalAbbFile' of https://github.com/JabRef/jabref into journalAbbFile", "committedDate": "2020-04-29T14:51:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyNzQzMA==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417827430", "bodyText": "@Inject does not seem right, as DialogService and PreferencesService are injected by the constructor in this class too...", "author": "calixtus", "createdAt": "2020-04-30T08:01:32Z", "path": "src/main/java/org/jabref/gui/exporter/CreateModifyExporterDialogView.java", "diffHunk": "@@ -10,30 +10,29 @@\n \n import org.jabref.gui.DialogService;\n import org.jabref.gui.util.BaseDialog;\n-import org.jabref.logic.journals.JournalAbbreviationLoader;\n+import org.jabref.logic.journals.JournalAbbreviationRepository;\n import org.jabref.logic.l10n.Localization;\n import org.jabref.preferences.PreferencesService;\n \n import com.airhacks.afterburner.views.ViewLoader;\n \n public class CreateModifyExporterDialogView extends BaseDialog<ExporterViewModel> {\n \n-    @Inject private final JournalAbbreviationLoader loader;\n+    @Inject private JournalAbbreviationRepository repository;\n     private final ExporterViewModel exporter;\n     @FXML private Button browseButton;\n     @FXML private TextField name;\n     @FXML private TextField fileName;\n     @FXML private TextField extension;\n     @FXML private ButtonType saveExporter;\n-    @Inject private DialogService dialogService;\n-    @Inject private PreferencesService preferences;\n+    @Inject private final DialogService dialogService;", "originalCommit": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyODM3OQ==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417828379", "bodyText": "Accidental line break?", "author": "calixtus", "createdAt": "2020-04-30T08:03:24Z", "path": "src/main/java/org/jabref/gui/exporter/ExportCustomizationDialogViewModel.java", "diffHunk": "@@ -21,25 +21,25 @@\n \n     private final PreferencesService preferences;\n     private final DialogService dialogService;\n-    private final JournalAbbreviationLoader loader;\n+    private final JournalAbbreviationRepository repository;\n \n-    public ExportCustomizationDialogViewModel(PreferencesService preferences, DialogService dialogService, JournalAbbreviationLoader loader) {\n+    public ExportCustomizationDialogViewModel(PreferencesService preferences, DialogService dialogService, JournalAbbreviationRepository repository) {\n         this.preferences = preferences;\n         this.dialogService = dialogService;\n-        this.loader = loader;\n+        this.repository = repository;\n         loadExporters();\n     }\n \n     private void loadExporters() {\n-        List<TemplateExporter> exportersLogic = preferences.getCustomExportFormats(loader);\n+        List<TemplateExporter> exportersLogic = preferences.getCustomExportFormats(repository);\n         for (TemplateExporter exporter : exportersLogic) {\n             exporters.add(new ExporterViewModel(exporter));\n         }\n     }\n \n     public void addExporter() {\n-        CreateModifyExporterDialogView dialog = new CreateModifyExporterDialogView(null, dialogService, preferences,\n-                loader);\n+        CreateModifyExporterDialogView dialog = new CreateModifyExporterDialogView(null, dialogService, preferences\n+        );", "originalCommit": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzNzg2MQ==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r417837861", "bodyText": "Indentation seems off", "author": "calixtus", "createdAt": "2020-04-30T08:20:44Z", "path": "src/main/java/org/jabref/preferences/JabRefPreferences.java", "diffHunk": "@@ -1300,10 +1296,10 @@ public BibtexKeyPatternPreferences getBibtexKeyPatternPreferences() {\n     }\n \n     @Override\n-    public LayoutFormatterPreferences getLayoutFormatterPreferences(JournalAbbreviationLoader journalAbbreviationLoader) {\n-        Objects.requireNonNull(journalAbbreviationLoader);\n-        return new LayoutFormatterPreferences(getNameFormatterPreferences(), getJournalAbbreviationPreferences(),\n-                                              getFileLinkPreferences(), journalAbbreviationLoader);\n+    public LayoutFormatterPreferences getLayoutFormatterPreferences(JournalAbbreviationRepository repository) {\n+        return new LayoutFormatterPreferences(getNameFormatterPreferences(),\n+                                              getFileLinkPreferences(),\n+                repository);", "originalCommit": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODI0OQ==", "url": "https://github.com/JabRef/jabref/pull/6304#discussion_r418428249", "bodyText": "The following two lines are a bit irritating for Java beginners, so I would suggest to keep the old comment on them.", "author": "calixtus", "createdAt": "2020-05-01T05:58:47Z", "path": "src/main/java/org/jabref/logic/journals/JournalAbbreviationRepository.java", "diffHunk": "@@ -36,65 +42,86 @@ private static boolean isMatchedAbbreviated(String name, Abbreviation abbreviati\n         return isAbbreviated && !isExpanded;\n     }\n \n-    public int size() {\n-        return abbreviations.size();\n-    }\n-\n     /**\n      * Returns true if the given journal name is contained in the list either in its full form (e.g Physical Review\n      * Letters) or its abbreviated form (e.g. Phys. Rev. Lett.).\n      */\n     public boolean isKnownName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatched(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        boolean isKnown = customAbbreviations.stream().anyMatch(abbreviation -> isMatched(journal, abbreviation));\n+        if (isKnown) {\n+            return true;\n+        }\n+\n+        return fullToAbbreviation.containsKey(journal) || abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n      * Returns true if the given journal name is in its abbreviated form (e.g. Phys. Rev. Lett.). The test is strict,\n      * i.e. journals whose abbreviation is the same as the full name are not considered\n      */\n     public boolean isAbbreviatedName(String journalName) {\n-        return abbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journalName.trim(), abbreviation));\n+        String journal = journalName.trim();\n+\n+        return customAbbreviations.stream().anyMatch(abbreviation -> isMatchedAbbreviated(journal, abbreviation))\n+                ||\n+                abbreviationToFull.containsKey(journal);\n     }\n \n     /**\n-     * Attempts to get the abbreviated name of the journal given. May contain dots.\n+     * Attempts to get the abbreviation of the journal given.\n      *\n-     * @param journalName The journal name to abbreviate.\n-     * @return The abbreviated name\n+     * @param input The journal name (either abbreviated or full name).\n      */\n-    public Optional<Abbreviation> getAbbreviation(String journalName) {\n-        return abbreviations.stream().filter(abbreviation -> isMatched(journalName.trim(), abbreviation)).findFirst();\n+    public Optional<Abbreviation> get(String input) {\n+        String journal = input.trim();\n+\n+        Optional<Abbreviation> customAbbreviation = customAbbreviations.stream()\n+                                                                       .filter(abbreviation -> isMatched(journal, abbreviation))\n+                                                                       .findAny();\n+        if (customAbbreviation.isPresent()) {\n+            return customAbbreviation;\n+        }\n+\n+        return Optional.ofNullable(fullToAbbreviation.get(journal))\n+                       .map(abbreviation -> new Abbreviation(journal, abbreviation))\n+                       .or(() -> Optional.ofNullable(abbreviationToFull.get(journal)).map(fullName -> new Abbreviation(fullName, journal)));\n     }\n \n-    public void addEntry(Abbreviation abbreviation) {\n+    public void addCustomAbbreviation(Abbreviation abbreviation) {\n         Objects.requireNonNull(abbreviation);\n \n-        // Abbreviation equality is tested on name only, so we might have to remove an old abbreviation\n-        abbreviations.remove(abbreviation);\n-        abbreviations.add(abbreviation);\n+        // We do not want to keep duplicates, thus remove the old abbreviation", "originalCommit": "e3804fd0fd63c3d60d9f584013a2e7cc279a506a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "456b9abd1ee70e5b212925321eabfff236745f7f", "url": "https://github.com/JabRef/jabref/commit/456b9abd1ee70e5b212925321eabfff236745f7f", "message": "Include feedback", "committedDate": "2020-05-01T11:36:07Z", "type": "commit"}, {"oid": "2c4062a3689b3faf2cd92c264cbedb4b47904295", "url": "https://github.com/JabRef/jabref/commit/2c4062a3689b3faf2cd92c264cbedb4b47904295", "message": "Fix test", "committedDate": "2020-05-01T11:36:29Z", "type": "commit"}, {"oid": "72ccf99ac888e0e26dbf51b04ba823a08bf7145f", "url": "https://github.com/JabRef/jabref/commit/72ccf99ac888e0e26dbf51b04ba823a08bf7145f", "message": "Fix localization", "committedDate": "2020-05-01T11:50:56Z", "type": "commit"}]}