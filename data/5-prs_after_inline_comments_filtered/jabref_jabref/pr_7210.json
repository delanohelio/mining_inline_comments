{"pr_number": 7210, "pr_title": "Updates to institution citation keys", "pr_createdAt": "2020-12-20T20:29:31Z", "pr_url": "https://github.com/JabRef/jabref/pull/7210", "timeline": [{"oid": "3dd0b28017b08f4bc553966713a5dcd757afcb17", "url": "https://github.com/JabRef/jabref/commit/3dd0b28017b08f4bc553966713a5dcd757afcb17", "message": "Add test cases", "committedDate": "2020-12-18T20:13:12Z", "type": "commit"}, {"oid": "6b26d0c276b5792fd5315b73e24183e9cd47e7f8", "url": "https://github.com/JabRef/jabref/commit/6b26d0c276b5792fd5315b73e24183e9cd47e7f8", "message": "Fix overly broad regexp\n\nThe regexp is still broad, but unless there are further complaints\n perhaps it is enough.", "committedDate": "2020-12-18T20:21:50Z", "type": "commit"}, {"oid": "1d6d393148455682603fcbc7a5c2992e3ea18f9c", "url": "https://github.com/JabRef/jabref/commit/1d6d393148455682603fcbc7a5c2992e3ea18f9c", "message": "Fix case-sensitivity in test case", "committedDate": "2020-12-18T20:29:05Z", "type": "commit"}, {"oid": "5d61a44fc4db0cbea5f01e505a4d366e5277156f", "url": "https://github.com/JabRef/jabref/commit/5d61a44fc4db0cbea5f01e505a4d366e5277156f", "message": "Fix inline abbreviation for institutes", "committedDate": "2020-12-18T20:41:25Z", "type": "commit"}, {"oid": "c76bb2820eaff2714caa46c50d9a24bf647ea0de", "url": "https://github.com/JabRef/jabref/commit/c76bb2820eaff2714caa46c50d9a24bf647ea0de", "message": "Drop test for short author", "committedDate": "2020-12-18T20:48:09Z", "type": "commit"}, {"oid": "df0144c284e62e0127dfed29423f8afe9feef667", "url": "https://github.com/JabRef/jabref/commit/df0144c284e62e0127dfed29423f8afe9feef667", "message": "Add test case", "committedDate": "2020-12-20T20:26:41Z", "type": "commit"}, {"oid": "e5b5874bb679acc91779ccacb4b0830f109c62e4", "url": "https://github.com/JabRef/jabref/commit/e5b5874bb679acc91779ccacb4b0830f109c62e4", "message": "Add test case", "committedDate": "2020-12-20T21:38:37Z", "type": "commit"}, {"oid": "95dbc21d47da579b811efdd9f98a1a5fd2cf6b51", "url": "https://github.com/JabRef/jabref/commit/95dbc21d47da579b811efdd9f98a1a5fd2cf6b51", "message": "Fix test case for single word author", "committedDate": "2020-12-20T21:48:37Z", "type": "commit"}, {"oid": "e635759949fe62f6026866968789d7629371d327", "url": "https://github.com/JabRef/jabref/commit/e635759949fe62f6026866968789d7629371d327", "message": "Fix un-escaped backslash in test case", "committedDate": "2020-12-20T22:20:51Z", "type": "commit"}, {"oid": "f6e41cc9095b8e3c59f4f8f188cfb83e4b1b243f", "url": "https://github.com/JabRef/jabref/commit/f6e41cc9095b8e3c59f4f8f188cfb83e4b1b243f", "message": "Fix unbalanced brackets in text cases", "committedDate": "2020-12-21T13:11:53Z", "type": "commit"}, {"oid": "d531b8871a5b214dfc71ba095595966d70ba4061", "url": "https://github.com/JabRef/jabref/commit/d531b8871a5b214dfc71ba095595966d70ba4061", "message": "Fix institute author abbreviations", "committedDate": "2020-12-21T13:14:25Z", "type": "commit"}, {"oid": "bcfa8da78892cde95971f7b2b725f7aaed61f61a", "url": "https://github.com/JabRef/jabref/commit/bcfa8da78892cde95971f7b2b725f7aaed61f61a", "message": "Readability modifications", "committedDate": "2020-12-21T13:25:10Z", "type": "commit"}, {"oid": "b55c4136e6f8c2a427712b639dba2e0fdc2f2e86", "url": "https://github.com/JabRef/jabref/commit/b55c4136e6f8c2a427712b639dba2e0fdc2f2e86", "message": "Add log output for generating university key\n\nWhen generating a key from a university name it should contain at least\ntwo parts, \"university\" and the university's name. If it does not it is\nlikely that the name contained latex that could not be resolved\ncorrectly.", "committedDate": "2020-12-21T14:20:26Z", "type": "commit"}, {"oid": "a787acc13c6cd1182643828f4c326b55b7033fbf", "url": "https://github.com/JabRef/jabref/commit/a787acc13c6cd1182643828f4c326b55b7033fbf", "message": "Fix JavaDoc", "committedDate": "2020-12-21T14:32:14Z", "type": "commit"}, {"oid": "5b6454f7e2deb79167ca8371a7d47ae9432f4833", "url": "https://github.com/JabRef/jabref/commit/5b6454f7e2deb79167ca8371a7d47ae9432f4833", "message": "Update CHANGELOG.md", "committedDate": "2020-12-21T14:41:04Z", "type": "commit"}, {"oid": "7b5271db6b4d64c377ff3ad74a78902c31923420", "url": "https://github.com/JabRef/jabref/commit/7b5271db6b4d64c377ff3ad74a78902c31923420", "message": "Merge branch 'master' into fix-for-issue-6942", "committedDate": "2020-12-21T14:42:16Z", "type": "commit"}, {"oid": "df66902f4b820642a19a7a4e6499e5256e818dc7", "url": "https://github.com/JabRef/jabref/commit/df66902f4b820642a19a7a4e6499e5256e818dc7", "message": "Add log message on miss-parsed LaTeX", "committedDate": "2020-12-21T17:03:42Z", "type": "commit"}, {"oid": "1a41af7a55e26d38c57036a7b9a13879248547f5", "url": "https://github.com/JabRef/jabref/commit/1a41af7a55e26d38c57036a7b9a13879248547f5", "message": "Merge remote-tracking branch 'origin/fix-for-issue-6942' into fix-for-issue-6942", "committedDate": "2020-12-21T17:04:47Z", "type": "commit"}, {"oid": "a3e17d4d1cf9239b83ef40ae013a80279238eff5", "url": "https://github.com/JabRef/jabref/commit/a3e17d4d1cf9239b83ef40ae013a80279238eff5", "message": "Change fields to final", "committedDate": "2020-12-21T19:32:12Z", "type": "commit"}, {"oid": "eb10e4b38fb89aaf9a8995a4f5c4d0c23be20e8b", "url": "https://github.com/JabRef/jabref/commit/eb10e4b38fb89aaf9a8995a4f5c4d0c23be20e8b", "message": "Fix institute abbreviation with special characters\n\nSome characters will be converted into a more BibTeX friendly during\ncitation key generation. \u00d8resund Science Region should be abbreviated to\n OSR but instead becomes OeSR.", "committedDate": "2020-12-21T21:06:17Z", "type": "commit"}, {"oid": "ece416a116132cf835f984fee2bdc519e8c6b945", "url": "https://github.com/JabRef/jabref/commit/ece416a116132cf835f984fee2bdc519e8c6b945", "message": "Drop out-of-scope test case", "committedDate": "2020-12-21T21:07:13Z", "type": "commit"}, {"oid": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "url": "https://github.com/JabRef/jabref/commit/b7986b3bdf3beb4856eb6dd7405b356f212d141a", "message": "Codestyle change", "committedDate": "2020-12-21T21:31:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547514625", "bodyText": "I think it makes more sense to use  Optional instead of exception handling for control flows (that is a bad idea).", "author": "Siedlerchr", "createdAt": "2020-12-22T21:25:57Z", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");\n+            }\n+        } catch (Throwable throwable) {", "originalCommit": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxOTMwOQ==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547519309", "bodyText": "Essentially just replacing the throw ... with return Optional.empty()?", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-22T21:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMjU1Mw==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547532553", "bodyText": "Yes, and Optional.of..(...) in the if block. I added some code suggestions", "author": "Siedlerchr", "createdAt": "2020-12-22T22:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNDMwNA==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547534304", "bodyText": "Sure, I'll take a look at it. Thank you for the suggestion!\nIn theory, I like exceptions, but it does not make the as readable \ud83d\ude04", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-22T22:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzQ3NA==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547537474", "bodyText": "Effective Java, Item 69:\nhttps://ahdak.github.io/blog/effective-java-part-9/\n\nExceptions are, as their name implies, to be used only for exceptional conditions; they should never be used for ordinary control flow. A well designed API must not force its clients to use exceptions for ordinary control flow.", "author": "Siedlerchr", "createdAt": "2020-12-22T22:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTIxOA==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531218", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n          \n          \n            \n                            return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));", "author": "Siedlerchr", "createdAt": "2020-12-22T22:10:38Z", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");", "originalCommit": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTM4NQ==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Parsing of latex failed.\");\n          \n          \n            \n             return Optional.empty()", "author": "Siedlerchr", "createdAt": "2020-12-22T22:11:10Z", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\");\n+            } else {\n+                throw new IllegalArgumentException(\"Parsing of latex failed.\");", "originalCommit": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTQ5Ng==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static String parse(String inField) throws IllegalArgumentException {\n          \n          \n            \n                public static Optional<String> parse(String inField) throws IllegalArgumentException {", "author": "Siedlerchr", "createdAt": "2020-12-22T22:11:26Z", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static String parse(String inField) throws IllegalArgumentException {", "originalCommit": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzMTk4MQ==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547531981", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return parse(inField);\n          \n          \n            \n                        return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n          \n      \n    \n    \n  \n\nthat should work\nAnd you can also then get rid of the try catch block here", "author": "Siedlerchr", "createdAt": "2020-12-22T22:12:27Z", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField);", "originalCommit": "b7986b3bdf3beb4856eb6dd7405b356f212d141a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3eac89d506d1c7c88f30897c99b0b91a49709e7b", "url": "https://github.com/JabRef/jabref/commit/3eac89d506d1c7c88f30897c99b0b91a49709e7b", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>", "committedDate": "2020-12-22T22:16:49Z", "type": "commit"}, {"oid": "e90f9cac9bae9bf40a1a33398f05c56ee42034fb", "url": "https://github.com/JabRef/jabref/commit/e90f9cac9bae9bf40a1a33398f05c56ee42034fb", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>", "committedDate": "2020-12-22T22:16:59Z", "type": "commit"}, {"oid": "f6165cb75d597ad2226630988136ebe0769eb31a", "url": "https://github.com/JabRef/jabref/commit/f6165cb75d597ad2226630988136ebe0769eb31a", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>", "committedDate": "2020-12-22T22:17:15Z", "type": "commit"}, {"oid": "e78e8b924ee72a919c4dfd27133260967cbf95f8", "url": "https://github.com/JabRef/jabref/commit/e78e8b924ee72a919c4dfd27133260967cbf95f8", "message": "Update src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java\n\nCo-authored-by: Christoph <siedlerkiller@gmail.com>", "committedDate": "2020-12-22T22:17:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547537724", "bodyText": "the try and catch can now be removed", "author": "Siedlerchr", "createdAt": "2020-12-22T22:28:53Z", "path": "src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java", "diffHunk": "@@ -5,23 +5,56 @@\n import java.util.regex.Pattern;\n \n import com.github.tomtung.latex2unicode.LaTeX2Unicode;\n+import fastparse.core.Parsed;\n \n /**\n  * Adapter class for the latex2unicode lib. This is an alternative to our LatexToUnicode class\n  */\n public class LatexToUnicodeAdapter {\n \n-    private static Pattern underscoreMatcher = Pattern.compile(\"_(?!\\\\{)\");\n+    private static final Pattern UNDERSCORE_MATCHER = Pattern.compile(\"_(?!\\\\{)\");\n \n-    private static String replacementChar = \"\\uFFFD\";\n+    private static final String REPLACEMENT_CHAR = \"\\uFFFD\";\n \n-    private static Pattern underscorePlaceholderMatcher = Pattern.compile(replacementChar);\n+    private static final Pattern UNDERSCORE_PLACEHOLDER_MATCHER = Pattern.compile(REPLACEMENT_CHAR);\n \n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode, or the original String if the LaTeX could not be parsed\n+     */\n     public static String format(String inField) {\n         Objects.requireNonNull(inField);\n \n-        String toFormat = underscoreMatcher.matcher(inField).replaceAll(replacementChar);\n-        toFormat = Normalizer.normalize(LaTeX2Unicode.convert(toFormat), Normalizer.Form.NFC);\n-        return underscorePlaceholderMatcher.matcher(toFormat).replaceAll(\"_\");\n+        try {\n+            return parse(inField).orElse(Normalizer.normalize(inField, Normalizer.Form.NFC));\n+        } catch (IllegalArgumentException ignored) {\n+            return Normalizer.normalize(inField, Normalizer.Form.NFC);\n+        }\n+    }\n+\n+    /**\n+     * Attempts to resolve all LaTeX in the String.\n+     *\n+     * @param inField a String containing LaTeX\n+     * @return a String with LaTeX resolved into Unicode\n+     * @throws IllegalArgumentException if the LaTeX could not be parsed\n+     */\n+    public static Optional<String> parse(String inField) throws IllegalArgumentException {\n+        Objects.requireNonNull(inField);\n+        String toFormat = UNDERSCORE_MATCHER.matcher(inField).replaceAll(REPLACEMENT_CHAR);\n+        try {\n+            var parsingResult = LaTeX2Unicode.parse(toFormat);\n+            if (parsingResult instanceof Parsed.Success) {\n+                String text = parsingResult.get().value();\n+                toFormat = Normalizer.normalize(text, Normalizer.Form.NFC);\n+                return Optional.of(UNDERSCORE_PLACEHOLDER_MATCHER.matcher(toFormat).replaceAll(\"_\"));\n+            } else {\n+ return Optional.empty()\n+            }\n+        } catch (Throwable throwable) {", "originalCommit": "e78e8b924ee72a919c4dfd27133260967cbf95f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NTQ2NQ==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547575465", "bodyText": "Wow, it literally took me 20 min to figure out what you meant \ud83e\udd21\nSure, I added the try-catch part based on https://github.com/tomtung/latex2unicode/blob/71979d6904fcf7efade786297983b881a1b019d4/src/main/scala/com/github/tomtung/latex2unicode/LaTeX2Unicode.scala#L143-L146\nand assumed it needed to be there #scala-scared \ud83d\ude2c", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-23T00:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjM5Mw==", "url": "https://github.com/JabRef/jabref/pull/7210#discussion_r547576393", "bodyText": "So much prettier \u2728 \ud83d\ude0d", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-23T00:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzNzcyNA=="}], "type": "inlineReview"}, {"oid": "3e3deae8646c9d98b466bb7586c803066bf295fd", "url": "https://github.com/JabRef/jabref/commit/3e3deae8646c9d98b466bb7586c803066bf295fd", "message": "Removes unnecessary checked exception", "committedDate": "2020-12-23T00:42:02Z", "type": "commit"}, {"oid": "ad4dab99d62e0486eba5c17b3aba4d3bbf72a079", "url": "https://github.com/JabRef/jabref/commit/ad4dab99d62e0486eba5c17b3aba4d3bbf72a079", "message": "Fix missed NFC normalization", "committedDate": "2020-12-23T00:43:45Z", "type": "commit"}, {"oid": "1fc991e5f9ad8668e7eaaa7f3206ac3101a456b9", "url": "https://github.com/JabRef/jabref/commit/1fc991e5f9ad8668e7eaaa7f3206ac3101a456b9", "message": "Add test case", "committedDate": "2020-12-28T11:29:46Z", "type": "commit"}]}