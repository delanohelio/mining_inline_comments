{"pr_number": 6018, "pr_title": "Add ShortScience integration", "pr_createdAt": "2020-02-25T20:23:03Z", "pr_url": "https://github.com/JabRef/jabref/pull/6018", "timeline": [{"oid": "531b7f33e620ba4eb3a96a6eae86f9f64e3fe9ff", "url": "https://github.com/JabRef/jabref/commit/531b7f33e620ba4eb3a96a6eae86f9f64e3fe9ff", "message": "[feat] Implement mockup of ShortScience integration\n\nThis commit adds a simple integration of ShortScience.org\nin the form of an additional context menu action when an\nentry is selected. This action opens the user's web browser\nto the search page of ShortScience with the title of the\npaper entered. Essentially, this is our MVP for the\nintegration towards ShortScience bar some testing.\n\n[Issue: #3]", "committedDate": "2020-02-25T12:48:24Z", "type": "commit"}, {"oid": "f949a008725c7d885949ab5fe00b8ecd0a00cc75", "url": "https://github.com/JabRef/jabref/commit/f949a008725c7d885949ab5fe00b8ecd0a00cc75", "message": "[fix] Rename menu item for searching ShortScience", "committedDate": "2020-02-25T15:54:50Z", "type": "commit"}, {"oid": "7303b233d681c7941e0738ee5ba3943e93a06fe7", "url": "https://github.com/JabRef/jabref/commit/7303b233d681c7941e0738ee5ba3943e93a06fe7", "message": "[refactor] Use URIBuilder for constructing URI", "committedDate": "2020-02-25T19:59:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyOTk0MA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384129940", "bodyText": "Please implement a Fetcher (as the DOIFetcher or other fetchers do). --> Then, you can easily write test cases for the different shortscience urls etc.", "author": "koppor", "createdAt": "2020-02-25T21:14:48Z", "path": "src/main/java/org/jabref/gui/BasePanel.java", "diffHunk": "@@ -1200,6 +1204,37 @@ public void action() {\n         }\n     }\n \n+    private class OpenShortScienceAction implements BaseAction {\n+        private static final String BASIC_SEARCH_URL = \"https://www.shortscience.org/internalsearch\";\n+\n+        @Override\n+        public void action() {\n+            final List<BibEntry> bes = mainTable.getSelectedEntries();", "originalCommit": "7303b233d681c7941e0738ee5ba3943e93a06fe7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4MDIwNQ==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384180205", "bodyText": "But this is not a fetcher, or I'm mistaken?", "author": "tobiasdiez", "createdAt": "2020-02-25T23:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyOTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMDQ1Mw==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384310453", "bodyText": "This isn't really a fetcher as I've understood things, as it is essentially the same as a OpenURLAction with the exception that the link has to be generated. It doesn't fetch any information from the web, but instead opens the user's web browser.", "author": "stevensdavid", "createdAt": "2020-02-26T07:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyOTk0MA=="}], "type": "inlineReview"}, {"oid": "617d853ad05aedfe91a27185493f2183b934f716", "url": "https://github.com/JabRef/jabref/commit/617d853ad05aedfe91a27185493f2183b934f716", "message": "[refactor] Use new JavaFX style", "committedDate": "2020-02-26T08:33:49Z", "type": "commit"}, {"oid": "3c42c5c3335e46b94fb08cb33f7b8f253fa6d353", "url": "https://github.com/JabRef/jabref/commit/3c42c5c3335e46b94fb08cb33f7b8f253fa6d353", "message": "Merge branch 'replace_deprecated' of github.com:calixtus/jabref into issue/3-new-style", "committedDate": "2020-02-26T09:59:06Z", "type": "commit"}, {"oid": "31a0f0f0a8000236af948deae4c2968e82a78a11", "url": "https://github.com/JabRef/jabref/commit/31a0f0f0a8000236af948deae4c2968e82a78a11", "message": "Add localization strings", "committedDate": "2020-02-26T13:12:04Z", "type": "commit"}, {"oid": "172e0ef15f633bcdc7e08d70041b0b861ada1ea9", "url": "https://github.com/JabRef/jabref/commit/172e0ef15f633bcdc7e08d70041b0b861ada1ea9", "message": "Port to new context menu style\n\nThe new context menu style that is proposed in #5958 is now used for\nthe ShortScience integration.", "committedDate": "2020-02-26T13:12:31Z", "type": "commit"}, {"oid": "fbe8ce6dbdadb6e1f93a29312a2860b52c031c68", "url": "https://github.com/JabRef/jabref/commit/fbe8ce6dbdadb6e1f93a29312a2860b52c031c68", "message": "Remove unused import", "committedDate": "2020-02-26T13:26:08Z", "type": "commit"}, {"oid": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "url": "https://github.com/JabRef/jabref/commit/a4363b22f33e6fd3609ce4223b85e83bb688d43f", "message": "Fix checkstyle compliance", "committedDate": "2020-02-26T16:04:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMTU0Mg==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384931542", "bodyText": "Use\nreturn entry.getField(StandardField.TITLE).map(title -> {\n  ...\n  return uriBuilder.toString();\n});", "author": "koppor", "createdAt": "2020-02-27T06:17:13Z", "path": "src/main/java/org/jabref/gui/maintable/OpenShortScienceAction.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.jabref.gui.maintable;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javafx.beans.binding.BooleanExpression;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.desktop.JabRefDesktop;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import static org.jabref.gui.actions.ActionHelper.isFieldSetForSelectedEntry;\n+import static org.jabref.gui.actions.ActionHelper.needsEntriesSelected;\n+\n+public class OpenShortScienceAction extends SimpleCommand {\n+    private static final String BASIC_SEARCH_URL = \"https://www.shortscience.org/internalsearch\";\n+    private final DialogService dialogService;\n+    private final StateManager stateManager;\n+\n+    public OpenShortScienceAction(DialogService dialogService, StateManager stateManager) {\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+\n+        BooleanExpression fieldIsSet = isFieldSetForSelectedEntry(StandardField.TITLE, stateManager);\n+        this.executable.bind(needsEntriesSelected(1, stateManager).and(fieldIsSet));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        stateManager.getActiveDatabase().ifPresent(databaseContext -> {\n+            final List<BibEntry> bibEntries = stateManager.getSelectedEntries();\n+\n+            if (bibEntries.size() != 1) {\n+                dialogService.notify(Localization.lang(\"This operation requires exactly one item to be selected.\"));\n+                return;\n+            }\n+            getShortScienceSearchURL(bibEntries.get(0)).ifPresent(url -> {\n+                try {\n+                    JabRefDesktop.openExternalViewer(databaseContext, url, StandardField.URL);\n+                } catch (IOException ex) {\n+                    dialogService.showErrorDialogAndWait(Localization.lang(\"Unable to open ShortScience.\"), ex);\n+                }\n+            });\n+        });\n+    }\n+\n+    /**\n+     * Get a URL to the search results of ShortScience for the BibEntry's title\n+     * @param entry The entry to search for. Expects TITLE to be set for successful return.\n+     * @return The URL if it was successfully created\n+     */\n+    public static Optional<String> getShortScienceSearchURL(BibEntry entry) {\n+        Optional<String> title = entry.getField(StandardField.TITLE);\n+        if (!title.isPresent()) {", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjAxMQ==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384932011", "bodyText": "This code should reside in the logic package somewhere - this is not user interaction, but some functionality. - it should also be tested in JUnit.", "author": "koppor", "createdAt": "2020-02-27T06:19:07Z", "path": "src/main/java/org/jabref/gui/maintable/OpenShortScienceAction.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.jabref.gui.maintable;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javafx.beans.binding.BooleanExpression;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.desktop.JabRefDesktop;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import static org.jabref.gui.actions.ActionHelper.isFieldSetForSelectedEntry;\n+import static org.jabref.gui.actions.ActionHelper.needsEntriesSelected;\n+\n+public class OpenShortScienceAction extends SimpleCommand {\n+    private static final String BASIC_SEARCH_URL = \"https://www.shortscience.org/internalsearch\";\n+    private final DialogService dialogService;\n+    private final StateManager stateManager;\n+\n+    public OpenShortScienceAction(DialogService dialogService, StateManager stateManager) {\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+\n+        BooleanExpression fieldIsSet = isFieldSetForSelectedEntry(StandardField.TITLE, stateManager);\n+        this.executable.bind(needsEntriesSelected(1, stateManager).and(fieldIsSet));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        stateManager.getActiveDatabase().ifPresent(databaseContext -> {\n+            final List<BibEntry> bibEntries = stateManager.getSelectedEntries();\n+\n+            if (bibEntries.size() != 1) {\n+                dialogService.notify(Localization.lang(\"This operation requires exactly one item to be selected.\"));\n+                return;\n+            }\n+            getShortScienceSearchURL(bibEntries.get(0)).ifPresent(url -> {\n+                try {\n+                    JabRefDesktop.openExternalViewer(databaseContext, url, StandardField.URL);\n+                } catch (IOException ex) {\n+                    dialogService.showErrorDialogAndWait(Localization.lang(\"Unable to open ShortScience.\"), ex);\n+                }\n+            });\n+        });\n+    }\n+\n+    /**\n+     * Get a URL to the search results of ShortScience for the BibEntry's title\n+     * @param entry The entry to search for. Expects TITLE to be set for successful return.\n+     * @return The URL if it was successfully created\n+     */\n+    public static Optional<String> getShortScienceSearchURL(BibEntry entry) {", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTgxNA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384935814", "bodyText": "Place it into org.jabref.logic.util (as new class). I did not find a petter place.\norg.jabref.logic.importer could also fit, but not that well.", "author": "koppor", "createdAt": "2020-02-27T06:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjAxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NTQxMA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r385055410", "bodyText": "I moved it to org.jabref.logic.util.ExternalLinkCreator.", "author": "stevensdavid", "createdAt": "2020-02-27T10:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjE2OQ==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384932169", "bodyText": "Good to have test caes. They should also reside in th elogic package.", "author": "koppor", "createdAt": "2020-02-27T06:19:41Z", "path": "src/test/java/org/jabref/gui/maintable/OpenShortScienceActionTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.gui.maintable;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import static org.jabref.gui.maintable.OpenShortScienceAction.getShortScienceSearchURL;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class OpenShortScienceActionTest {", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjQ2Ng==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384932466", "bodyText": "Can't we use assertEquals(Optional.empty(), getShortScienceSearchURL(entry));? In a case of a failure, IntelliJ can show the diff between the returned URL and the empty one. -- Not that important in that place, but this is a general testing style", "author": "koppor", "createdAt": "2020-02-27T06:20:49Z", "path": "src/test/java/org/jabref/gui/maintable/OpenShortScienceActionTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.gui.maintable;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import static org.jabref.gui.maintable.OpenShortScienceAction.getShortScienceSearchURL;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class OpenShortScienceActionTest {\n+\n+    /**\n+     * Validates URL conformance to RFC2396. Does not perform complex checks such as opening connections.\n+     */\n+    private boolean urlIsValid(String url) {\n+        try {\n+            // This will throw on non-compliance to RFC2396.\n+            new URL(url).toURI();\n+            return true;\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return false;\n+        }\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLEncodesSpecialCharacters() {\n+        BibEntry entry = new BibEntry();\n+        String rfc3986ReservedCharacters = \"!*'();:@&=+$,/?#[]\";\n+        entry.setField(StandardField.TITLE, rfc3986ReservedCharacters);\n+        Optional<String> url = getShortScienceSearchURL(entry);\n+        assertTrue(url.isPresent() && urlIsValid(url.get()));\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLReturnsEmptyOnMissingTitle() {\n+        BibEntry entry = new BibEntry();\n+        assertTrue(getShortScienceSearchURL(entry).isEmpty());", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjY2NA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384932664", "bodyText": "&& is an indicator of strange test clauses. Maybe split up into two asserts.", "author": "koppor", "createdAt": "2020-02-27T06:21:36Z", "path": "src/test/java/org/jabref/gui/maintable/OpenShortScienceActionTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.gui.maintable;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import static org.jabref.gui.maintable.OpenShortScienceAction.getShortScienceSearchURL;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class OpenShortScienceActionTest {\n+\n+    /**\n+     * Validates URL conformance to RFC2396. Does not perform complex checks such as opening connections.\n+     */\n+    private boolean urlIsValid(String url) {\n+        try {\n+            // This will throw on non-compliance to RFC2396.\n+            new URL(url).toURI();\n+            return true;\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return false;\n+        }\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLEncodesSpecialCharacters() {\n+        BibEntry entry = new BibEntry();\n+        String rfc3986ReservedCharacters = \"!*'();:@&=+$,/?#[]\";\n+        entry.setField(StandardField.TITLE, rfc3986ReservedCharacters);\n+        Optional<String> url = getShortScienceSearchURL(entry);\n+        assertTrue(url.isPresent() && urlIsValid(url.get()));", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDQ1MA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384934450", "bodyText": "You can use\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BibEntry entry = new BibEntry();\n          \n          \n            \n                    BibEntry entry = new BibEntry()\n          \n          \n            \n                      .withField(tandardField.TITLE, \"JabRef bibliography management\");", "author": "koppor", "createdAt": "2020-02-27T06:28:39Z", "path": "src/test/java/org/jabref/gui/maintable/OpenShortScienceActionTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.gui.maintable;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import static org.jabref.gui.maintable.OpenShortScienceAction.getShortScienceSearchURL;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class OpenShortScienceActionTest {\n+\n+    /**\n+     * Validates URL conformance to RFC2396. Does not perform complex checks such as opening connections.\n+     */\n+    private boolean urlIsValid(String url) {\n+        try {\n+            // This will throw on non-compliance to RFC2396.\n+            new URL(url).toURI();\n+            return true;\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return false;\n+        }\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLEncodesSpecialCharacters() {\n+        BibEntry entry = new BibEntry();\n+        String rfc3986ReservedCharacters = \"!*'();:@&=+$,/?#[]\";\n+        entry.setField(StandardField.TITLE, rfc3986ReservedCharacters);\n+        Optional<String> url = getShortScienceSearchURL(entry);\n+        assertTrue(url.isPresent() && urlIsValid(url.get()));\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLReturnsEmptyOnMissingTitle() {\n+        BibEntry entry = new BibEntry();\n+        assertTrue(getShortScienceSearchURL(entry).isEmpty());\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLLinksToSearchResults() {\n+        BibEntry entry = new BibEntry();", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDY0Mg==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384934642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(url.isPresent() && url.get().equals(\"https://www.shortscience.org/internalsearch?q=JabRef+bibliography+management\"));\n          \n          \n            \n                    assertEquals(Optional.of(\"https://www.shortscience.org/internalsearch?q=JabRef+bibliography+management\"), url);", "author": "koppor", "createdAt": "2020-02-27T06:29:27Z", "path": "src/test/java/org/jabref/gui/maintable/OpenShortScienceActionTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jabref.gui.maintable;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import static org.jabref.gui.maintable.OpenShortScienceAction.getShortScienceSearchURL;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class OpenShortScienceActionTest {\n+\n+    /**\n+     * Validates URL conformance to RFC2396. Does not perform complex checks such as opening connections.\n+     */\n+    private boolean urlIsValid(String url) {\n+        try {\n+            // This will throw on non-compliance to RFC2396.\n+            new URL(url).toURI();\n+            return true;\n+        } catch (MalformedURLException | URISyntaxException e) {\n+            return false;\n+        }\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLEncodesSpecialCharacters() {\n+        BibEntry entry = new BibEntry();\n+        String rfc3986ReservedCharacters = \"!*'();:@&=+$,/?#[]\";\n+        entry.setField(StandardField.TITLE, rfc3986ReservedCharacters);\n+        Optional<String> url = getShortScienceSearchURL(entry);\n+        assertTrue(url.isPresent() && urlIsValid(url.get()));\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLReturnsEmptyOnMissingTitle() {\n+        BibEntry entry = new BibEntry();\n+        assertTrue(getShortScienceSearchURL(entry).isEmpty());\n+    }\n+\n+    @Test\n+    void getShortScienceSearchURLLinksToSearchResults() {\n+        BibEntry entry = new BibEntry();\n+        // Take an arbitrary article name\n+        String title = \"JabRef bibliography management\";\n+        entry.setField(StandardField.TITLE, title);\n+        Optional<String> url = getShortScienceSearchURL(entry);\n+        // Expected behaviour is to link to the search results page, /internalsearch\n+        assertTrue(url.isPresent() && url.get().equals(\"https://www.shortscience.org/internalsearch?q=JabRef+bibliography+management\"));", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjE3NA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r384936174", "bodyText": "Please add an empty line above.\nPlease use BibEntry's title in both lines (title vs. TITLE) - or use StandardFields.TITLE here.", "author": "koppor", "createdAt": "2020-02-27T06:35:03Z", "path": "src/main/java/org/jabref/gui/maintable/OpenShortScienceAction.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.jabref.gui.maintable;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javafx.beans.binding.BooleanExpression;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.actions.SimpleCommand;\n+import org.jabref.gui.desktop.JabRefDesktop;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+\n+import static org.jabref.gui.actions.ActionHelper.isFieldSetForSelectedEntry;\n+import static org.jabref.gui.actions.ActionHelper.needsEntriesSelected;\n+\n+public class OpenShortScienceAction extends SimpleCommand {\n+    private static final String BASIC_SEARCH_URL = \"https://www.shortscience.org/internalsearch\";\n+    private final DialogService dialogService;\n+    private final StateManager stateManager;\n+\n+    public OpenShortScienceAction(DialogService dialogService, StateManager stateManager) {\n+        this.dialogService = dialogService;\n+        this.stateManager = stateManager;\n+\n+        BooleanExpression fieldIsSet = isFieldSetForSelectedEntry(StandardField.TITLE, stateManager);\n+        this.executable.bind(needsEntriesSelected(1, stateManager).and(fieldIsSet));\n+    }\n+\n+    @Override\n+    public void execute() {\n+        stateManager.getActiveDatabase().ifPresent(databaseContext -> {\n+            final List<BibEntry> bibEntries = stateManager.getSelectedEntries();\n+\n+            if (bibEntries.size() != 1) {\n+                dialogService.notify(Localization.lang(\"This operation requires exactly one item to be selected.\"));\n+                return;\n+            }\n+            getShortScienceSearchURL(bibEntries.get(0)).ifPresent(url -> {\n+                try {\n+                    JabRefDesktop.openExternalViewer(databaseContext, url, StandardField.URL);\n+                } catch (IOException ex) {\n+                    dialogService.showErrorDialogAndWait(Localization.lang(\"Unable to open ShortScience.\"), ex);\n+                }\n+            });\n+        });\n+    }\n+\n+    /**\n+     * Get a URL to the search results of ShortScience for the BibEntry's title\n+     * @param entry The entry to search for. Expects TITLE to be set for successful return.", "originalCommit": "a4363b22f33e6fd3609ce4223b85e83bb688d43f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "436a1766bb7c2d13dee5f3855f2f9aa7a0e7163c", "url": "https://github.com/JabRef/jabref/commit/436a1766bb7c2d13dee5f3855f2f9aa7a0e7163c", "message": "[refactor] Adjust code according to feedback", "committedDate": "2020-02-27T08:40:44Z", "type": "commit"}, {"oid": "b21b543f3f79c36fd94d8cfb30faeda367bfed3e", "url": "https://github.com/JabRef/jabref/commit/b21b543f3f79c36fd94d8cfb30faeda367bfed3e", "message": "Add changelog note about shortscience", "committedDate": "2020-02-27T08:51:28Z", "type": "commit"}, {"oid": "d9d305383b431aa06b7d8bc7f022df3cbda7de0b", "url": "https://github.com/JabRef/jabref/commit/d9d305383b431aa06b7d8bc7f022df3cbda7de0b", "message": "Fix import order", "committedDate": "2020-02-27T08:56:20Z", "type": "commit"}, {"oid": "a68d38b63ca27dd8e664b0176fa2f200da89b19a", "url": "https://github.com/JabRef/jabref/commit/a68d38b63ca27dd8e664b0176fa2f200da89b19a", "message": "Rename ExternalLinkGenerator to ExternalLinkCreator", "committedDate": "2020-02-27T10:58:47Z", "type": "commit"}, {"oid": "1240cd104e203c685fb379cdf416db9d76adafa6", "url": "https://github.com/JabRef/jabref/commit/1240cd104e203c685fb379cdf416db9d76adafa6", "message": "Merge branch 'replace_deprecated' into issue/3", "committedDate": "2020-02-27T12:59:11Z", "type": "commit"}, {"oid": "eb90e80dcf2f84a756d198b25640d34c898c8c74", "url": "https://github.com/JabRef/jabref/commit/eb90e80dcf2f84a756d198b25640d34c898c8c74", "message": "Move test to proper location and file name", "committedDate": "2020-02-27T14:57:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4ODczNg==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r385288736", "bodyText": "Rename the key? Is it open or Search?", "author": "Siedlerchr", "createdAt": "2020-02-27T18:23:08Z", "path": "src/main/java/org/jabref/gui/actions/StandardActions.java", "diffHunk": "@@ -33,6 +33,7 @@\n     SEND_AS_EMAIL(Localization.lang(\"Send as email\"), IconTheme.JabRefIcons.EMAIL),\n     OPEN_EXTERNAL_FILE(Localization.lang(\"Open file\"), IconTheme.JabRefIcons.FILE, KeyBinding.OPEN_FILE),\n     OPEN_URL(Localization.lang(\"Open URL or DOI\"), IconTheme.JabRefIcons.WWW, KeyBinding.OPEN_URL_OR_DOI),\n+    OPEN_SHORTSCIENCE(Localization.lang(\"Search ShortScience\")),", "originalCommit": "eb90e80dcf2f84a756d198b25640d34c898c8c74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NjM2OA==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r385346368", "bodyText": "I renamed it now, good catch!", "author": "stevensdavid", "createdAt": "2020-02-27T20:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4ODczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4OTMwMg==", "url": "https://github.com/JabRef/jabref/pull/6018#discussion_r385289302", "bodyText": "Please also pass the original exception as parameter. Just in case", "author": "Siedlerchr", "createdAt": "2020-02-27T18:24:05Z", "path": "src/main/java/org/jabref/logic/util/ExternalLinkCreator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.jabref.logic.util;\n+\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+\n+public class ExternalLinkCreator {\n+    private static final String SHORTSCIENCE_SEARCH_URL = \"https://www.shortscience.org/internalsearch\";\n+\n+    /**\n+     * Get a URL to the search results of ShortScience for the BibEntry's title\n+     *\n+     * @param entry The entry to search for. Expects the BibEntry's title to be set for successful return.\n+     * @return The URL if it was successfully created\n+     */\n+    public static Optional<String> getShortScienceSearchURL(BibEntry entry) {\n+        return entry.getField(StandardField.TITLE).map(title -> {\n+            URIBuilder uriBuilder;\n+            try {\n+                uriBuilder = new URIBuilder(SHORTSCIENCE_SEARCH_URL);\n+            } catch (URISyntaxException e) {\n+                // This should never be able to happen as it would require the field to be misconfigured.\n+                throw new AssertionError(\"ShortScience URL is invalid.\");", "originalCommit": "eb90e80dcf2f84a756d198b25640d34c898c8c74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9abcb14ae3946fa0d75f3860313a7ccd91276e3e", "url": "https://github.com/JabRef/jabref/commit/9abcb14ae3946fa0d75f3860313a7ccd91276e3e", "message": "Fix inconsistent naming and add exception cause", "committedDate": "2020-02-27T20:11:36Z", "type": "commit"}, {"oid": "742dc5eb77f7f5d345f978ad42bd225301205b08", "url": "https://github.com/JabRef/jabref/commit/742dc5eb77f7f5d345f978ad42bd225301205b08", "message": "Rename missed references to Search Shortscience", "committedDate": "2020-02-27T20:15:59Z", "type": "commit"}, {"oid": "48882eab258ef949cbfce1d8a27c78dc7ecb0451", "url": "https://github.com/JabRef/jabref/commit/48882eab258ef949cbfce1d8a27c78dc7ecb0451", "message": "Merge branch 'replace_deprecated' into issue/3", "committedDate": "2020-03-06T09:48:22Z", "type": "commit"}]}