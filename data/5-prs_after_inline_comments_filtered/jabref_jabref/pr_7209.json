{"pr_number": 7209, "pr_title": "Refactor unlinked files", "pr_createdAt": "2020-12-20T17:53:09Z", "pr_url": "https://github.com/JabRef/jabref/pull/7209", "timeline": [{"oid": "57f210eea1b2d765fe96829a6ecc9f59988f7767", "url": "https://github.com/JabRef/jabref/commit/57f210eea1b2d765fe96829a6ecc9f59988f7767", "message": "[WIP] Refactor unlinked files\n\ncreate dialog in fxml and use a background task for import", "committedDate": "2020-12-20T17:52:48Z", "type": "commit"}, {"oid": "803c56eef25563688a0c0c6285803631105a0754", "url": "https://github.com/JabRef/jabref/commit/803c56eef25563688a0c0c6285803631105a0754", "message": "add controller", "committedDate": "2020-12-20T18:47:02Z", "type": "commit"}, {"oid": "3685516eefda43194a1c654c366bf31cb05d6792", "url": "https://github.com/JabRef/jabref/commit/3685516eefda43194a1c654c366bf31cb05d6792", "message": "inject stuff", "committedDate": "2020-12-20T19:24:09Z", "type": "commit"}, {"oid": "2cb8a2d92724e605c90a601319a831125d10652c", "url": "https://github.com/JabRef/jabref/commit/2cb8a2d92724e605c90a601319a831125d10652c", "message": "empty line", "committedDate": "2020-12-20T20:10:14Z", "type": "commit"}, {"oid": "8d429cd9f832cfb7f7ba3b2301495ca6de2a7e36", "url": "https://github.com/JabRef/jabref/commit/8d429cd9f832cfb7f7ba3b2301495ca6de2a7e36", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Bump pdfbox from 2.0.21 to 2.0.22 (#7213)\n  Bump fontbox from 2.0.21 to 2.0.22 (#7219)\n  Bump archunit-junit5-api from 0.14.1 to 0.15.0 (#7220)\n  Bump unoloader from 7.0.3 to 7.0.4 (#7214)\n  Bump guava from 30.0-jre to 30.1-jre (#7218)\n  Bump xmpbox from 2.0.21 to 2.0.22 (#7217)\n  Bump classgraph from 4.8.94 to 4.8.97 (#7211)\n  Bump byte-buddy-parent from 1.10.18 to 1.10.19 (#7216)\n  Bump archunit-junit5-engine from 0.14.1 to 0.15.0 (#7215)\n  Bump org.beryx.jlink from 2.22.3 to 2.23.0 (#7212)\n  Add missing author\n  Remove field check for journal abbrev in entry editor (#7208)", "committedDate": "2020-12-21T10:42:11Z", "type": "commit"}, {"oid": "6bdb2c691e0796fad105e9f33dba7d8613c7a57b", "url": "https://github.com/JabRef/jabref/commit/6bdb2c691e0796fad105e9f33dba7d8613c7a57b", "message": "add progreess indicator\ncopy over some methods", "committedDate": "2020-12-21T12:05:03Z", "type": "commit"}, {"oid": "98770bbe45a666aca639d915c9b2494fba37ab5a", "url": "https://github.com/JabRef/jabref/commit/98770bbe45a666aca639d915c9b2494fba37ab5a", "message": "finish export implementation\nTODO: Import Button does not yet work, always null", "committedDate": "2020-12-21T17:07:15Z", "type": "commit"}, {"oid": "f3d2cca7957c59bdaa771df1f3413c00581b8da4", "url": "https://github.com/JabRef/jabref/commit/f3d2cca7957c59bdaa771df1f3413c00581b8da4", "message": "prepare background task for import", "committedDate": "2020-12-21T17:55:05Z", "type": "commit"}, {"oid": "10db39a1ab29f440a001cdb00ea56e9747c08f3f", "url": "https://github.com/JabRef/jabref/commit/10db39a1ab29f440a001cdb00ea56e9747c08f3f", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Output java error on console, too (#7222)\n  Speedup processResources (#7221)\n  Fix ClipboardManager <-> Prefs ordering (#7224)", "committedDate": "2020-12-22T07:22:37Z", "type": "commit"}, {"oid": "9e89c91e7c23f253d720dee33c37ec7d794d8564", "url": "https://github.com/JabRef/jabref/commit/9e89c91e7c23f253d720dee33c37ec7d794d8564", "message": "prepare eception handling", "committedDate": "2020-12-22T08:02:01Z", "type": "commit"}, {"oid": "eb4446958bc56e6446e1ce31c402084b0eb33ef6", "url": "https://github.com/JabRef/jabref/commit/eb4446958bc56e6446e1ce31c402084b0eb33ef6", "message": "add further logging", "committedDate": "2020-12-22T09:26:22Z", "type": "commit"}, {"oid": "1a732cbcd0fad7150c15953df34ff5d0162217fd", "url": "https://github.com/JabRef/jabref/commit/1a732cbcd0fad7150c15953df34ff5d0162217fd", "message": "add progrees indicator linkage\n\nTODO: Progress not yet shown", "committedDate": "2020-12-22T11:33:17Z", "type": "commit"}, {"oid": "f0b3f79cbda2be146215e3950d321d77b681fee8", "url": "https://github.com/JabRef/jabref/commit/f0b3f79cbda2be146215e3950d321d77b681fee8", "message": "Fix threading issues, report progress", "committedDate": "2020-12-22T16:29:30Z", "type": "commit"}, {"oid": "a05ba1fb76981cc1960c7ce12f43ac7f23adeea1", "url": "https://github.com/JabRef/jabref/commit/a05ba1fb76981cc1960c7ce12f43ac7f23adeea1", "message": "remove useless undo stuff", "committedDate": "2020-12-22T16:33:03Z", "type": "commit"}, {"oid": "1d25e30d1095a19b9c7b77666333c8dec43f70fe", "url": "https://github.com/JabRef/jabref/commit/1d25e30d1095a19b9c7b77666333c8dec43f70fe", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  fxdocs changed their URL (#7230)\n  New Crowdin updates (#7227)\n  Fix some fetcher test (#7225)", "committedDate": "2020-12-23T14:59:40Z", "type": "commit"}, {"oid": "3f93cef657f1e77812f3e8f7705d9810f90fa8fc", "url": "https://github.com/JabRef/jabref/commit/3f93cef657f1e77812f3e8f7705d9810f90fa8fc", "message": "wire buttons to the viewModel\nadjust dialog", "committedDate": "2020-12-23T16:22:32Z", "type": "commit"}, {"oid": "e7dddd4c1e217244d16bb2f2afb360e524e52019", "url": "https://github.com/JabRef/jabref/commit/e7dddd4c1e217244d16bb2f2afb360e524e52019", "message": "show import results dialog view", "committedDate": "2020-12-23T17:14:19Z", "type": "commit"}, {"oid": "b7fcd2f16eb433a54f55375d20bbfea63e6d42aa", "url": "https://github.com/JabRef/jabref/commit/b7fcd2f16eb433a54f55375d20bbfea63e6d42aa", "message": "better error messages", "committedDate": "2020-12-23T17:25:54Z", "type": "commit"}, {"oid": "ad50cc9faa6f4debb73c72668c828644e1fda454", "url": "https://github.com/JabRef/jabref/commit/ad50cc9faa6f4debb73c72668c828644e1fda454", "message": "Rename files, fix cancel, fix gui", "committedDate": "2020-12-24T13:55:37Z", "type": "commit"}, {"oid": "082580cb188011774cfe2ccc9b9e29b6d7a48907", "url": "https://github.com/JabRef/jabref/commit/082580cb188011774cfe2ccc9b9e29b6d7a48907", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  add language mapping for chinese\n  remove chinese content\n  fix hamcrest link\n  Add Traditional Chinese (#7240)\n  Show development information\n  Allow manual trigger of the deployment workflow\n  Release v5.2\n  Adapt changelog for 5.2 release\n  Update external-libraries.md\n  checkstyle\n  L10n master (#7235)\n  fix fetcher architecture test\n  Add missing author\n  Add error dialog \"Problem finding files\" (#6842)\n  Disable ACM, Google Scholar, JSTOR (#7229)", "committedDate": "2020-12-25T17:22:20Z", "type": "commit"}, {"oid": "4e37d447197a85d9aedcd050295dbafa099bba09", "url": "https://github.com/JabRef/jabref/commit/4e37d447197a85d9aedcd050295dbafa099bba09", "message": "Cleanup\ncheckstyle", "committedDate": "2020-12-26T14:11:12Z", "type": "commit"}, {"oid": "6f61e8e308a2c888b3c75111a05b9c2484701b0e", "url": "https://github.com/JabRef/jabref/commit/6f61e8e308a2c888b3c75111a05b9c2484701b0e", "message": "checkstyle", "committedDate": "2020-12-26T14:19:54Z", "type": "commit"}, {"oid": "2ae183dc6b94362d9aa06c6d3d6af38971da4f0a", "url": "https://github.com/JabRef/jabref/commit/2ae183dc6b94362d9aa06c6d3d6af38971da4f0a", "message": "fix checkstyle in md", "committedDate": "2020-12-26T15:54:43Z", "type": "commit"}, {"oid": "27cf98db11aa5f3f584cc5429096cb02d47305aa", "url": "https://github.com/JabRef/jabref/commit/27cf98db11aa5f3f584cc5429096cb02d47305aa", "message": "Make table columns more wider\ndisable import button", "committedDate": "2020-12-26T16:53:17Z", "type": "commit"}, {"oid": "98c6a7f71e2fab3dfa2d4b138e3d11244eacf740", "url": "https://github.com/JabRef/jabref/commit/98c6a7f71e2fab3dfa2d4b138e3d11244eacf740", "message": "preapre localization", "committedDate": "2020-12-26T17:10:54Z", "type": "commit"}, {"oid": "6219364665caf03f81a39b02572c26679b5d0d54", "url": "https://github.com/JabRef/jabref/commit/6219364665caf03f81a39b02572c26679b5d0d54", "message": "fix typo", "committedDate": "2020-12-26T17:19:14Z", "type": "commit"}, {"oid": "ebd045724ac2a68cd629bcc759e7bf63d3d89fe5", "url": "https://github.com/JabRef/jabref/commit/ebd045724ac2a68cd629bcc759e7bf63d3d89fe5", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  GitBook: [master] 5 pages and 25 assets modified\n  New Crowdin updates (#7246)", "committedDate": "2020-12-26T17:19:16Z", "type": "commit"}, {"oid": "f7222863c7b6dc6eaccf705c32a84453ab6c380e", "url": "https://github.com/JabRef/jabref/commit/f7222863c7b6dc6eaccf705c32a84453ab6c380e", "message": "fix md errors", "committedDate": "2020-12-26T17:20:32Z", "type": "commit"}, {"oid": "a1da3921a8ba7fbbc093abc9c99cda0ecb545024", "url": "https://github.com/JabRef/jabref/commit/a1da3921a8ba7fbbc093abc9c99cda0ecb545024", "message": "fix l10n key", "committedDate": "2020-12-26T17:22:16Z", "type": "commit"}, {"oid": "e2fd3ba93a6a5ec2dc503adbb56373d3b4385181", "url": "https://github.com/JabRef/jabref/commit/e2fd3ba93a6a5ec2dc503adbb56373d3b4385181", "message": "add l10n", "committedDate": "2020-12-26T17:36:06Z", "type": "commit"}, {"oid": "bee42c6be6b188e560b306606470a5c585e49c8a", "url": "https://github.com/JabRef/jabref/commit/bee42c6be6b188e560b306606470a5c585e49c8a", "message": "further l10n fixes", "committedDate": "2020-12-26T17:48:37Z", "type": "commit"}, {"oid": "5cdfa696ebc6b13c0e3b184f40aac02cd96e92f3", "url": "https://github.com/JabRef/jabref/commit/5cdfa696ebc6b13c0e3b184f40aac02cd96e92f3", "message": "further l10n fixs to reuse", "committedDate": "2020-12-26T17:55:01Z", "type": "commit"}, {"oid": "15bbee1fcb48e97daf279f4b3367598923a48c67", "url": "https://github.com/JabRef/jabref/commit/15bbee1fcb48e97daf279f4b3367598923a48c67", "message": "remove one dot", "committedDate": "2020-12-26T18:00:14Z", "type": "commit"}, {"oid": "a6d17f9a91a1c2b5f4b210b3d22a6b0962cc6074", "url": "https://github.com/JabRef/jabref/commit/a6d17f9a91a1c2b5f4b210b3d22a6b0962cc6074", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Bump xmlunit-core from 2.8.1 to 2.8.2 (#7251)\n  Bump classgraph from 4.8.97 to 4.8.98 (#7250)\n  Bump bcprov-jdk15on from 1.67 to 1.68 (#7249)\n  Bump xmlunit-matchers from 2.8.1 to 2.8.2 (#7252)\n  Bump unirest-java from 3.11.06 to 3.11.09 (#7254)\n  Bump org.beryx.jlink from 2.23.0 to 2.23.1 (#7253)\n  Bump pascalgn/automerge-action from v0.12.0 to v0.13.0 (#7255)\n  Added a check to integrate with the flatpak package (#7248)\n  New translations JabRef_en.properties (Chinese Traditional) (#7247)\n  Update code-howtos.md", "committedDate": "2020-12-28T10:44:42Z", "type": "commit"}, {"oid": "191889354fc42a0539b60177e367fb1ddfb099d9", "url": "https://github.com/JabRef/jabref/commit/191889354fc42a0539b60177e367fb1ddfb099d9", "message": "idea extend filenode wrapper", "committedDate": "2020-12-28T15:02:12Z", "type": "commit"}, {"oid": "37f6b5b2dd83399fbc94c20655e05aa460aaa30d", "url": "https://github.com/JabRef/jabref/commit/37f6b5b2dd83399fbc94c20655e05aa460aaa30d", "message": "Remove extra dialog", "committedDate": "2020-12-28T17:35:03Z", "type": "commit"}, {"oid": "6b6946511e7377886cd5eb08143610953be31dcd", "url": "https://github.com/JabRef/jabref/commit/6b6946511e7377886cd5eb08143610953be31dcd", "message": "fix progressIndicator still visible", "committedDate": "2020-12-28T17:41:46Z", "type": "commit"}, {"oid": "babad73222e1f00fd452f58ac84c150830ea41da", "url": "https://github.com/JabRef/jabref/commit/babad73222e1f00fd452f58ac84c150830ea41da", "message": "replace with spaces", "committedDate": "2020-12-28T17:46:10Z", "type": "commit"}, {"oid": "1d9bf7c91d249cbe890c257c3d68fa7b41b27a36", "url": "https://github.com/JabRef/jabref/commit/1d9bf7c91d249cbe890c257c3d68fa7b41b27a36", "message": "fix checkstyle", "committedDate": "2020-12-28T17:53:45Z", "type": "commit"}, {"oid": "a1dc05771c4a3fc019657a8c3478da5e6fdceaf5", "url": "https://github.com/JabRef/jabref/commit/a1dc05771c4a3fc019657a8c3478da5e6fdceaf5", "message": "add titled pane", "committedDate": "2020-12-29T11:52:42Z", "type": "commit"}, {"oid": "3683a2ceced9e296635bcc4bf9448c3fb011e80c", "url": "https://github.com/JabRef/jabref/commit/3683a2ceced9e296635bcc4bf9448c3fb011e80c", "message": "fix checkstyle", "committedDate": "2020-12-29T11:58:43Z", "type": "commit"}, {"oid": "ce21003a9991279ef293ac62bb96145a92dfa36b", "url": "https://github.com/JabRef/jabref/commit/ce21003a9991279ef293ac62bb96145a92dfa36b", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Improved detection of long DOI's within text (#7260)\n  Add missing author and fix name\n  Fix style of highlighted checkboxes while searching in preferences (#7258)\n  Updates to institution citation keys (#7210)", "committedDate": "2020-12-29T12:44:21Z", "type": "commit"}, {"oid": "78cf06ba89433586a93bc5fe0eb13973a6888bd8", "url": "https://github.com/JabRef/jabref/commit/78cf06ba89433586a93bc5fe0eb13973a6888bd8", "message": "fix duplicate method", "committedDate": "2020-12-29T12:46:08Z", "type": "commit"}, {"oid": "7f776b2a4e3b357f2f9db7312effdeba0a5c11b4", "url": "https://github.com/JabRef/jabref/commit/7f776b2a4e3b357f2f9db7312effdeba0a5c11b4", "message": "Merge and remove unceessary dependencies", "committedDate": "2021-01-02T16:49:42Z", "type": "commit"}, {"oid": "b036f11b91709410bcb47fb553a64822c462edbe", "url": "https://github.com/JabRef/jabref/commit/b036f11b91709410bcb47fb553a64822c462edbe", "message": "align browse button", "committedDate": "2021-01-02T17:14:47Z", "type": "commit"}, {"oid": "82ae9eab133543d660f89e1527bc281c5eca2af4", "url": "https://github.com/JabRef/jabref/commit/82ae9eab133543d660f89e1527bc281c5eca2af4", "message": "adjust combobox display", "committedDate": "2021-01-02T17:31:00Z", "type": "commit"}, {"oid": "380f4d1765adf270da5f1d3d29e388dda9dcf28b", "url": "https://github.com/JabRef/jabref/commit/380f4d1765adf270da5f1d3d29e388dda9dcf28b", "message": "Fixed whitespaces, fxml and refactored for some readability", "committedDate": "2021-01-03T19:22:45Z", "type": "commit"}, {"oid": "fe59fb97dd979c4944cffb082007de08b0b403bd", "url": "https://github.com/JabRef/jabref/commit/fe59fb97dd979c4944cffb082007de08b0b403bd", "message": "Fixed accordion and l10n", "committedDate": "2021-01-03T21:13:38Z", "type": "commit"}, {"oid": "4b3a9224f6198b4cda537d5dd0f6220dd8c1c98b", "url": "https://github.com/JabRef/jabref/commit/4b3a9224f6198b4cda537d5dd0f6220dd8c1c98b", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Added eye candy in entry editor context menus (#7268)\n  Bump WyriHaximus/github-action-wait-for-status from v1.2 to v1.3 (#7285)", "committedDate": "2021-01-04T10:34:36Z", "type": "commit"}, {"oid": "e9b38ab450589a1a3d3a00d0f1aa2dea83736265", "url": "https://github.com/JabRef/jabref/commit/e9b38ab450589a1a3d3a00d0f1aa2dea83736265", "message": "Add changelog", "committedDate": "2021-01-04T10:46:17Z", "type": "commit"}, {"oid": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "url": "https://github.com/JabRef/jabref/commit/e0466377c7ea3dce53d753f7fd60d7c0ada99279", "message": "fix link in changelog", "committedDate": "2021-01-04T10:56:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551271470", "bodyText": "This wrapping is not necessarily:\n\nCalls to updateMessage are coalesced and run later on the FX application thread, so calls to updateMessage, even from the FX Application thread, may not necessarily result in immediate updates to this property, and intermediate message values may be coalesced to save on event notifications.", "author": "tobiasdiez", "createdAt": "2021-01-04T11:50:15Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDU5NQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551324595", "bodyText": "Nope as our BackgroundTask does not perform updates on the FX Task and the bindings will then throw an error", "author": "Siedlerchr", "createdAt": "2021-01-04T13:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5NTU3NA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551395574", "bodyText": "Oh, then the background task class should be changed instead!", "author": "tobiasdiez", "createdAt": "2021-01-04T15:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2OTEyMQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552069121", "bodyText": "This may have side effects and is out of scope for this PR.", "author": "Siedlerchr", "createdAt": "2021-01-05T17:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551272115", "bodyText": "I think these variables should be local to the BackgroundTask constructed below.", "author": "tobiasdiez", "createdAt": "2021-01-04T11:51:45Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -27,16 +32,22 @@\n import org.jabref.model.util.FileUpdateMonitor;\n import org.jabref.preferences.PreferencesService;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class ImportHandler {\n \n-    private final BibDatabaseContext database;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ImportHandler.class);\n+    private final BibDatabaseContext bibdatabasecontext;\n     private final PreferencesService preferencesService;\n-    private final DialogService dialogService;\n     private final FileUpdateMonitor fileUpdateMonitor;\n     private final ExternalFilesEntryLinker linker;\n     private final ExternalFilesContentImporter contentImporter;\n     private final UndoManager undoManager;\n     private final StateManager stateManager;\n+    private List<ImportFilesResultItemViewModel> results;", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNDA5Mw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562534093", "bodyText": "Still think this, why did you marked it as \"resolved\"?", "author": "tobiasdiez", "createdAt": "2021-01-22T10:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU4MDY5NA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562580694", "bodyText": "As I told you before, it's not possible because they have to be effictively final and also they are used by another method in the class", "author": "Siedlerchr", "createdAt": "2021-01-22T11:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkwOTg1Ng==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562909856", "bodyText": "The effectively final shouldn't be a problem if they are moved after new BackgroundTask<>() {\nsimilarly the method can be moved there.", "author": "tobiasdiez", "createdAt": "2021-01-22T21:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MjQyMA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551272420", "bodyText": "bibDatabaseContext? But actually database is totally fine in my opinion", "author": "tobiasdiez", "createdAt": "2021-01-04T11:52:26Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -46,9 +57,7 @@ public ImportHandler(DialogService dialogService,\n                          UndoManager undoManager,\n                          StateManager stateManager) {\n \n-        this.dialogService = dialogService;\n-        this.database = database;\n-\n+        this.bibdatabasecontext = database;", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Mjc2Mw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551272763", "bodyText": "Why use counter here instead of i?", "author": "tobiasdiez", "createdAt": "2021-01-04T11:53:20Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MjUzMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551342532", "bodyText": "Because variables in a lambda have to be effectively final", "author": "Siedlerchr", "createdAt": "2021-01-04T14:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Mjc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzM2Mg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551273362", "bodyText": "What about showing the name of the file instead? The other information is already included in the pogressbar", "author": "tobiasdiez", "createdAt": "2021-01-04T11:54:35Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNDgyNg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562534826", "bodyText": "Still applies.", "author": "tobiasdiez", "createdAt": "2021-01-22T10:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzYyOQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551273629", "bodyText": "get(i)?", "author": "tobiasdiez", "createdAt": "2021-01-04T11:55:16Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NDkwMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551274902", "bodyText": "Doesn't this may show an error message, even though later only the xmp information is used anyway? I would resort the code here to call only the import pdf if there is no xmp info", "author": "tobiasdiez", "createdAt": "2021-01-04T11:58:08Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Njc3OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551276779", "bodyText": "Really? I thought that should actually work. Where do you get deadlocks otherwise?", "author": "tobiasdiez", "createdAt": "2021-01-04T12:02:30Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));\n                     }\n+\n+                    // We need to run the actual import on the FX Thread, otherwise we will get some deadlocks with the UIThreadList", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0MzM4OA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551343388", "bodyText": "I think the deadlock came from the database.insertEntries or so which fires the changed listeners", "author": "Siedlerchr", "createdAt": "2021-01-04T14:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Njc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Njg1NQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551276855", "bodyText": "runinJavafxthread not necessary", "author": "tobiasdiez", "createdAt": "2021-01-04T12:02:44Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzE5Ng==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551277196", "bodyText": "with what?", "author": "tobiasdiez", "createdAt": "2021-01-04T12:03:33Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));\n+                            } else {\n+                                    entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                                    addResultToList(file, false, Localization.lang(\"No metadata found. Creating empty entry with file link\"));\n+                            }\n+                        } else if (FileUtil.isBibFile(file)) {\n+                            var bibtexParserResult = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n+                            if (bibtexParserResult.hasWarnings()) {\n+                                addResultToList(file, false, bibtexParserResult.getErrorMessage());\n+                            }\n+\n+                            entriesToAdd = bibtexParserResult.getDatabaseContext().getEntries();\n+                            addResultToList(file, false, Localization.lang(\"Importing bib entry\"));\n+                        } else {\n+                            entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                            addResultToList(file, false, Localization.lang(\"No bibtex data found. Creating empty entry with file link\"));\n+                        }\n+\n+                    } catch (IOException ex) {\n+                        LOGGER.error(\"Error importing\", ex);\n+                        addResultToList(file, false, Localization.lang(\"Error from import: %0\", ex.getLocalizedMessage()));\n+\n+                        DefaultTaskExecutor.runInJavaFXThread(() -> updateMessage(Localization.lang(\"Error\")));\n                     }\n+\n+                    // We need to run the actual import on the FX Thread, otherwise we will get some deadlocks with the UIThreadList\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> importEntries(entriesToAdd));\n+\n+                    ce.addEdit(new UndoableInsertEntries(bibdatabasecontext.getDatabase(), entriesToAdd));\n+                    ce.end();\n+                    undoManager.addEdit(ce);\n+\n+                    counter++;\n                 }\n-            } else if (FileUtil.isBibFile(file)) {\n-                entriesToAdd = contentImporter.importFromBibFile(file, fileUpdateMonitor);\n-            } else {\n-                entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                return results;\n             }\n+        };\n+    }\n \n-            importEntries(entriesToAdd);\n-            ce.addEdit(new UndoableInsertEntries(database.getDatabase(), entriesToAdd));\n-        }\n-        ce.end();\n-        undoManager.addEdit(ce);\n+    private void addResultToList(Path newFile, boolean success, String logMessage) {\n+        var result = new ImportFilesResultItemViewModel(newFile, success, logMessage);\n+        results.add(result);\n+    }\n+\n+    public void importAsNewEntries(List<Path> files) {\n+        // Will be replaced", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzcwMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551277702", "bodyText": "wouldn't it be good to have a result variable, and then add it at the end of the import? Otherwise you might end up with multiple messages for one file nad that can be confusing", "author": "tobiasdiez", "createdAt": "2021-01-04T12:04:43Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +71,96 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    var file = files.get(0);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n+\n+                            var pdfImporterResult = contentImporter.importPDFContent(file);\n+                            List<BibEntry> pdfEntriesInFile = pdfImporterResult.getDatabase().getEntries();\n+\n+                            if (pdfImporterResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading PDF content: %0\", pdfImporterResult.getErrorMessage()));\n+                            }\n+\n+                            var xmpParserResult = contentImporter.importXMPContent(file);\n+                            List<BibEntry> xmpEntriesInFile = xmpParserResult.getDatabase().getEntries();\n+\n+                            if (xmpParserResult.hasWarnings()) {\n+                                addResultToList(file, false, Localization.lang(\"Error reading XMP content: %0\", xmpParserResult.getErrorMessage()));\n+                            }\n+\n+                            // First try xmp import, if empty try pdf import, otherwise create empty entry\n+                            if (!xmpEntriesInFile.isEmpty()) {\n+                                entriesToAdd = xmpEntriesInFile;\n+                                addResultToList(file, true, Localization.lang(\"Importing using XMP data...\"));\n+                            } else if (!pdfEntriesInFile.isEmpty()) {\n+                                    entriesToAdd = pdfEntriesInFile;\n+                                    addResultToList(file, true, Localization.lang(\"Importing using extracted PDF data\"));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3ODM2OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551278369", "bodyText": "If you add a new constructor to the ImportFilesResultItemViewModel class, this could be simply result = new ImportFilesResultItemViewModel(file, xmpParserResult).", "author": "tobiasdiez", "createdAt": "2021-01-04T12:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg0Mzk2NA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562843964", "bodyText": "But I still would need to distinguish each parser result and check if empry or if it  has failed or not. That would be simply duplicating the loop", "author": "Siedlerchr", "createdAt": "2021-01-22T18:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NzcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3ODk3Ng==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551278976", "bodyText": "wrap also not necessary", "author": "tobiasdiez", "createdAt": "2021-01-04T12:07:34Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesCrawler.java", "diffHunk": "@@ -95,11 +98,14 @@ public UnlinkedFilesCrawler(Path directory, FileFilter fileFilter, BibDatabaseCo\n             root.getChildren().add(new CheckBoxTreeItem<>(new FileNodeWrapper(file.toPath())));\n \n             counter++;\n-            if (counter == 1) {\n-                updateMessage(Localization.lang(\"One file found\"));\n-            } else {\n-                updateMessage(Localization.lang(\"%0 files found\", Integer.toString(counter)));\n-            }\n+            DefaultTaskExecutor.runInJavaFXThread(() -> {", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTIxOA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279218", "bodyText": "remove empty line", "author": "tobiasdiez", "createdAt": "2021-01-04T12:08:07Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTU0MQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279541", "bodyText": "Make getFileFilters already return an observable list", "author": "tobiasdiez", "createdAt": "2021-01-04T12:08:49Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTYwNw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279607", "bodyText": "indent", "author": "tobiasdiez", "createdAt": "2021-01-04T12:09:00Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3OTk0Mw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551279943", "bodyText": "move this lambda to fileFilter.getIcon", "author": "tobiasdiez", "createdAt": "2021-01-04T12:09:45Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDIxOA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280218", "bodyText": "Rename FileNodeWrapper to `FileNodeViewModel", "author": "tobiasdiez", "createdAt": "2021-01-04T12:10:20Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDM5MQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280391", "bodyText": "move lambda to node.getDisplayText", "author": "tobiasdiez", "createdAt": "2021-01-04T12:10:47Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDYyNA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280624", "bodyText": "file/files should be localized", "author": "tobiasdiez", "createdAt": "2021-01-04T12:11:22Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDgxMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280812", "bodyText": "indent", "author": "tobiasdiez", "createdAt": "2021-01-04T12:11:47Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";\n+                    }\n+                })\n+                .install(tree);\n+\n+       tree.setPrefWidth(Double.POSITIVE_INFINITY);\n+       viewModel.treeRoot().bindBidirectional(tree.rootProperty());\n+       viewModel.scanButtonDisabled().bindBidirectional(buttonScan.disableProperty());\n+       viewModel.scanButtonDefaultButton().bindBidirectional(buttonScan.defaultButtonProperty());\n+       viewModel.exportButtonDisabled().bindBidirectional(buttonExport.disableProperty());\n+       viewModel.selectedExtension().bind(fileTypeSelection.valueProperty());\n+\n+       tvResult.setItems(viewModel.resultTableItems());\n+\n+       progressDisplay.progressProperty().bind(viewModel.progress());\n+       progressText.textProperty().bind(viewModel.progressText());\n+\n+       progressPane.managedProperty().bind(viewModel.searchProgressVisible());\n+       progressPane.visibleProperty().bind(viewModel.searchProgressVisible());\n+       accordion.disableProperty().bind(viewModel.searchProgressVisible());\n+       tree.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+\n+       viewModel.filePaneExpanded().bindBidirectional(filePane.expandedProperty());\n+       viewModel.resultPaneExpanded().bindBidirectional(resultPane.expandedProperty());\n+\n+       viewModel.scanButtonDefaultButton().setValue(true);\n+       viewModel.scanButtonDisabled().setValue(true);\n+       viewModel.applyButtonDisabled().setValue(true);\n+       fileTypeSelection.getSelectionModel().selectFirst();\n+\n+       setupResultTable();\n+    }\n+\n+    private void setupResultTable() {\n+\n+        colFile.setCellValueFactory(cellData -> cellData.getValue().file());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+        .withText(item -> item).withTooltip(item -> item)", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MDg3OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551280879", "bodyText": "remove empty line", "author": "tobiasdiez", "createdAt": "2021-01-04T12:11:52Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";\n+                    }\n+                })\n+                .install(tree);\n+\n+       tree.setPrefWidth(Double.POSITIVE_INFINITY);\n+       viewModel.treeRoot().bindBidirectional(tree.rootProperty());\n+       viewModel.scanButtonDisabled().bindBidirectional(buttonScan.disableProperty());\n+       viewModel.scanButtonDefaultButton().bindBidirectional(buttonScan.defaultButtonProperty());\n+       viewModel.exportButtonDisabled().bindBidirectional(buttonExport.disableProperty());\n+       viewModel.selectedExtension().bind(fileTypeSelection.valueProperty());\n+\n+       tvResult.setItems(viewModel.resultTableItems());\n+\n+       progressDisplay.progressProperty().bind(viewModel.progress());\n+       progressText.textProperty().bind(viewModel.progressText());\n+\n+       progressPane.managedProperty().bind(viewModel.searchProgressVisible());\n+       progressPane.visibleProperty().bind(viewModel.searchProgressVisible());\n+       accordion.disableProperty().bind(viewModel.searchProgressVisible());\n+       tree.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+\n+       viewModel.filePaneExpanded().bindBidirectional(filePane.expandedProperty());\n+       viewModel.resultPaneExpanded().bindBidirectional(resultPane.expandedProperty());\n+\n+       viewModel.scanButtonDefaultButton().setValue(true);\n+       viewModel.scanButtonDisabled().setValue(true);\n+       viewModel.applyButtonDisabled().setValue(true);\n+       fileTypeSelection.getSelectionModel().selectFirst();\n+\n+       setupResultTable();\n+    }\n+\n+    private void setupResultTable() {\n+", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MTE3MQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551281171", "bodyText": "move this logic to getIcon", "author": "tobiasdiez", "createdAt": "2021-01-04T12:12:35Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Files;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.collections.FXCollections;\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileType;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.ControlHelper;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileChooser.ExtensionFilter> fileTypeSelection;\n+    @FXML private TreeView<FileNodeWrapper> tree;\n+    @FXML private Button buttonScan;\n+    @FXML private ButtonType importButton;\n+    @FXML private Button buttonExport;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> tvResult;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        Button btnImport = (Button) this.getDialogPane().lookupButton(importButton);\n+        ControlHelper.setAction(importButton, getDialogPane(), evt-> viewModel.startImport());\n+        btnImport.disableProperty().bindBidirectional(viewModel.applyButtonDisabled());\n+        btnImport.setTooltip(new Tooltip(Localization.lang(\"Starts the import of BibTeX entries.\")));\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+        viewModel.directoryPath().bindBidirectional(directoryPathField.textProperty());\n+\n+        fileTypeSelection.setItems(FXCollections.observableArrayList(viewModel.getFileFilters()));\n+        new ViewModelListCellFactory<FileChooser.ExtensionFilter>()\n+        .withText(fileFilter -> fileFilter.getDescription() + fileFilter.getExtensions().stream().collect(Collectors.joining(\", \", \" (\", \")\")))\n+        .withIcon(fileFilter -> ExternalFileTypes.getInstance().getExternalFileTypeByExt(fileFilter.getExtensions().get(0))\n+                                                 .map(ExternalFileType::getIcon)\n+                                                 .orElse(null))\n+        .install(fileTypeSelection);\n+\n+        new ViewModelTreeCellFactory<FileNodeWrapper>()\n+                .withText(node -> {\n+                    if (Files.isRegularFile(node.path)) {\n+                        // File\n+                        return node.path.getFileName().toString();\n+                    } else {\n+                        // Directory\n+                        return node.path.getFileName() + \" (\" + node.fileCount + \" file\" + (node.fileCount > 1 ? \"s\" : \"\") + \")\";\n+                    }\n+                })\n+                .install(tree);\n+\n+       tree.setPrefWidth(Double.POSITIVE_INFINITY);\n+       viewModel.treeRoot().bindBidirectional(tree.rootProperty());\n+       viewModel.scanButtonDisabled().bindBidirectional(buttonScan.disableProperty());\n+       viewModel.scanButtonDefaultButton().bindBidirectional(buttonScan.defaultButtonProperty());\n+       viewModel.exportButtonDisabled().bindBidirectional(buttonExport.disableProperty());\n+       viewModel.selectedExtension().bind(fileTypeSelection.valueProperty());\n+\n+       tvResult.setItems(viewModel.resultTableItems());\n+\n+       progressDisplay.progressProperty().bind(viewModel.progress());\n+       progressText.textProperty().bind(viewModel.progressText());\n+\n+       progressPane.managedProperty().bind(viewModel.searchProgressVisible());\n+       progressPane.visibleProperty().bind(viewModel.searchProgressVisible());\n+       accordion.disableProperty().bind(viewModel.searchProgressVisible());\n+       tree.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+\n+       viewModel.filePaneExpanded().bindBidirectional(filePane.expandedProperty());\n+       viewModel.resultPaneExpanded().bindBidirectional(resultPane.expandedProperty());\n+\n+       viewModel.scanButtonDefaultButton().setValue(true);\n+       viewModel.scanButtonDisabled().setValue(true);\n+       viewModel.applyButtonDisabled().setValue(true);\n+       fileTypeSelection.getSelectionModel().selectFirst();\n+\n+       setupResultTable();\n+    }\n+\n+    private void setupResultTable() {\n+\n+        colFile.setCellValueFactory(cellData -> cellData.getValue().file());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+        .withText(item -> item).withTooltip(item -> item)\n+        .install(colFile);\n+\n+        colMessage.setCellValueFactory(cellData -> cellData.getValue().message());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+        .withText(item->item).withTooltip(item->item)\n+        .install(colMessage);\n+\n+        colStatus.setCellValueFactory(cellData -> cellData.getValue().getIcon());\n+\n+        colStatus.setCellFactory(new ValueTableCellFactory<ImportFilesResultItemViewModel, JabRefIcon>().withGraphic(item -> {\n+            if (item == IconTheme.JabRefIcons.CHECK) {", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjA4NA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282084", "bodyText": "rename variable", "author": "tobiasdiez", "createdAt": "2021-01-04T12:14:54Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileFilterConverter;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileChooser.ExtensionFilter> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final BooleanProperty searchProgressVisible = new SimpleBooleanProperty(false);\n+    private final BooleanProperty applyButtonDisabled = new SimpleBooleanProperty();\n+    private final BooleanProperty scanButtonDisabled = new SimpleBooleanProperty(true);\n+    private final BooleanProperty exportButtonDisabled = new SimpleBooleanProperty();\n+    private final ObjectProperty<TreeItem<FileNodeWrapper>> treeRoot = new SimpleObjectProperty<>();\n+    private final BooleanProperty scanButtonDefaultButton = new SimpleBooleanProperty();\n+    private final DoubleProperty progress = new SimpleDoubleProperty(0);\n+    private final StringProperty progressText = new SimpleStringProperty();\n+    private final BooleanProperty filePaneExpanded = new SimpleBooleanProperty();\n+    private final BooleanProperty resultPaneExpanded = new SimpleBooleanProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+\n+    private final List<FileChooser.ExtensionFilter> fileFilterList = List.of(\n+                                                                             FileFilterConverter.ANY_FILE,\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.PDF),\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.BIBTEX_DB));\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabasecontext;\n+    private final TaskExecutor taskExecutor;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabasecontext = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjQ4NQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282485", "bodyText": "The viewmodel should be free of any javafx controls, i.e. no javafx.scene  imports", "author": "tobiasdiez", "createdAt": "2021-01-04T12:15:45Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NjE3Mg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552066172", "bodyText": "Hmm, this is a bit more complicated then. Seems like I can maybe reuse the idea  from the ParseLatexViewModel", "author": "Siedlerchr", "createdAt": "2021-01-05T17:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjYyOA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282628", "bodyText": "indent", "author": "tobiasdiez", "createdAt": "2021-01-04T12:16:02Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileFilterConverter;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileChooser.ExtensionFilter> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final BooleanProperty searchProgressVisible = new SimpleBooleanProperty(false);\n+    private final BooleanProperty applyButtonDisabled = new SimpleBooleanProperty();\n+    private final BooleanProperty scanButtonDisabled = new SimpleBooleanProperty(true);\n+    private final BooleanProperty exportButtonDisabled = new SimpleBooleanProperty();\n+    private final ObjectProperty<TreeItem<FileNodeWrapper>> treeRoot = new SimpleObjectProperty<>();\n+    private final BooleanProperty scanButtonDefaultButton = new SimpleBooleanProperty();\n+    private final DoubleProperty progress = new SimpleDoubleProperty(0);\n+    private final StringProperty progressText = new SimpleStringProperty();\n+    private final BooleanProperty filePaneExpanded = new SimpleBooleanProperty();\n+    private final BooleanProperty resultPaneExpanded = new SimpleBooleanProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+\n+    private final List<FileChooser.ExtensionFilter> fileFilterList = List.of(\n+                                                                             FileFilterConverter.ANY_FILE,\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.PDF),\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.BIBTEX_DB));\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabasecontext;\n+    private final TaskExecutor taskExecutor;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabasecontext = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                                          dialogService,\n+                                          bibDatabasecontext,\n+                                          externalFileTypes,\n+                                          preferences,\n+                                          fileUpdateMonitor,\n+                                          undoManager,\n+                                          stateManager);\n+    }\n+\n+    public void startImport() {\n+\n+        CheckBoxTreeItem<FileNodeWrapper> root = (CheckBoxTreeItem<FileNodeWrapper>) treeRoot.getValue();\n+        final List<Path> fileList = getFileListFromNode(root);\n+\n+        resultList.clear();\n+\n+        if (fileList.isEmpty()) {\n+            return;\n+        }\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+        .onRunning(() -> {", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MjkzMQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551282931", "bodyText": "remove empty lines...a lot", "author": "tobiasdiez", "createdAt": "2021-01-04T12:16:42Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+import javafx.stage.FileChooser;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileFilterConverter;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileChooser.ExtensionFilter> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final BooleanProperty searchProgressVisible = new SimpleBooleanProperty(false);\n+    private final BooleanProperty applyButtonDisabled = new SimpleBooleanProperty();\n+    private final BooleanProperty scanButtonDisabled = new SimpleBooleanProperty(true);\n+    private final BooleanProperty exportButtonDisabled = new SimpleBooleanProperty();\n+    private final ObjectProperty<TreeItem<FileNodeWrapper>> treeRoot = new SimpleObjectProperty<>();\n+    private final BooleanProperty scanButtonDefaultButton = new SimpleBooleanProperty();\n+    private final DoubleProperty progress = new SimpleDoubleProperty(0);\n+    private final StringProperty progressText = new SimpleStringProperty();\n+    private final BooleanProperty filePaneExpanded = new SimpleBooleanProperty();\n+    private final BooleanProperty resultPaneExpanded = new SimpleBooleanProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+\n+    private final List<FileChooser.ExtensionFilter> fileFilterList = List.of(\n+                                                                             FileFilterConverter.ANY_FILE,\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.PDF),\n+                                                                             FileFilterConverter.toExtensionFilter(StandardFileType.BIBTEX_DB));\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<CheckBoxTreeItem<FileNodeWrapper>> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabasecontext;\n+    private final TaskExecutor taskExecutor;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabasecontext = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                                          dialogService,\n+                                          bibDatabasecontext,\n+                                          externalFileTypes,\n+                                          preferences,\n+                                          fileUpdateMonitor,\n+                                          undoManager,\n+                                          stateManager);\n+    }\n+\n+    public void startImport() {\n+\n+        CheckBoxTreeItem<FileNodeWrapper> root = (CheckBoxTreeItem<FileNodeWrapper>) treeRoot.getValue();\n+        final List<Path> fileList = getFileListFromNode(root);\n+\n+        resultList.clear();\n+\n+        if (fileList.isEmpty()) {\n+            return;\n+        }\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+        .onRunning(() -> {\n+            progress.bind(importFilesBackgroundTask.workDonePercentageProperty());\n+            progressText.bind(importFilesBackgroundTask.messageProperty());\n+\n+            searchProgressVisible.setValue(true);\n+            scanButtonDisabled.setValue(true);\n+            applyButtonDisabled.setValue(true);\n+         })\n+        .onFinished(() -> {\n+            progress.unbind();\n+            progressText.unbind();\n+            searchProgressVisible.setValue(false);\n+            scanButtonDisabled.setValue(false);\n+\n+        })\n+        .onSuccess(results -> {\n+           applyButtonDisabled.setValue(false);\n+           exportButtonDisabled.setValue(false);\n+           scanButtonDefaultButton.setValue(false);\n+\n+           progress.unbind();\n+           progressText.unbind();\n+           searchProgressVisible.setValue(false);\n+\n+           filePaneExpanded.setValue(false);\n+           resultPaneExpanded.setValue(true);\n+           resultList.addAll(results);\n+\n+        });\n+        importFilesBackgroundTask.executeWith(taskExecutor);\n+", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4NDQxMw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r551284413", "bodyText": "Isn't Object better here instead of T? Otherwise all params need to have the same type, don't they?", "author": "tobiasdiez", "createdAt": "2021-01-04T12:19:52Z", "path": "src/main/java/org/jabref/logic/l10n/Localization.java", "diffHunk": "@@ -48,13 +49,15 @@ private Localization() {\n      * @param params Replacement strings for parameters %0, %1, etc.\n      * @return The message with replaced parameters\n      */\n-    public static String lang(String key, String... params) {\n+    public static <T> String lang(String key, T... params) {", "originalCommit": "e0466377c7ea3dce53d753f7fd60d7c0ada99279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5NjM2Nw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r554596367", "bodyText": "Still possible to pass the second parameter as string like we did before", "author": "Siedlerchr", "createdAt": "2021-01-10T17:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4NDQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0ODkxNw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562548917", "bodyText": "But lang(\"...\", file, path) is not possible since file and path are not of the same type T", "author": "tobiasdiez", "createdAt": "2021-01-22T10:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4NDQxMw=="}], "type": "inlineReview"}, {"oid": "0d439a863f0eed2c2ffca5ff64e723e54bc41bcd", "url": "https://github.com/JabRef/jabref/commit/0d439a863f0eed2c2ffca5ff64e723e54bc41bcd", "message": "fix changelog", "committedDate": "2021-01-04T13:54:53Z", "type": "commit"}, {"oid": "408f6e6ff715da6719b8b1143a7eefe98f0540c9", "url": "https://github.com/JabRef/jabref/commit/408f6e6ff715da6719b8b1143a7eefe98f0540c9", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  fix compiler error\n  workaround for eclipse compile error\n  Fix link\n  Bump checkstyle from 8.38 to 8.39 (#7284)", "committedDate": "2021-01-04T14:16:05Z", "type": "commit"}, {"oid": "6bc4acb77c258dff9aa6138dd6499fcf93ecc7e7", "url": "https://github.com/JabRef/jabref/commit/6bc4acb77c258dff9aa6138dd6499fcf93ecc7e7", "message": "fix wrong loop var\nfix dnd", "committedDate": "2021-01-04T14:28:53Z", "type": "commit"}, {"oid": "9e7544a3ce7f8e1f947c668a60517ae7959e5130", "url": "https://github.com/JabRef/jabref/commit/9e7544a3ce7f8e1f947c668a60517ae7959e5130", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Fix typo for small pi (#7296)\n  Fix Normalize pages formatter not replacing dashes (#7243)\n  Simplify LO connection and fix threading errors (#7271)\n  Fix for issue 7287 (#7290)\n\n# Conflicts:\n#\tsrc/main/resources/l10n/JabRef_en.properties", "committedDate": "2021-01-05T16:02:43Z", "type": "commit"}, {"oid": "e059988d76900bf08cae11854ed70dcaf7ddfa44", "url": "https://github.com/JabRef/jabref/commit/e059988d76900bf08cae11854ed70dcaf7ddfa44", "message": "refactor\nonly call pdf import when xmp did not find a result", "committedDate": "2021-01-05T16:42:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyNDMwMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552524302", "bodyText": "The view class shouldn't contain any logic, so all these 3 methods here should go to appropriate view model classes (probably a ExtensionFilterViewModel needs to be introduced for this).", "author": "tobiasdiez", "createdAt": "2021-01-06T11:38:43Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -210,4 +188,33 @@ void exportSelected(ActionEvent event) {\n        viewModel.startExport();\n     }\n \n+    private JabRefIcon getFileFilterIcon(FileChooser.ExtensionFilter fileFilter) {", "originalCommit": "e059988d76900bf08cae11854ed70dcaf7ddfa44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NzIwMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552647202", "bodyText": "Hm. I don't see any reason for creating a viewModel for this, seems a bit overblown", "author": "Siedlerchr", "createdAt": "2021-01-06T14:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyNDMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk2ODAyNg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r552968026", "bodyText": "It's similar to the FileNodeViewModel. It's a bit of an advantage of the MVVM pattern that one usually has wrappers for many logic classes.\nHow would you write a test for the getFileFilterIcon method otherwise?", "author": "tobiasdiez", "createdAt": "2021-01-06T21:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyNDMwMg=="}], "type": "inlineReview"}, {"oid": "179c3498e21fae5249d83aebcc63310a8a7dd365", "url": "https://github.com/JabRef/jabref/commit/179c3498e21fae5249d83aebcc63310a8a7dd365", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Adjust zbmath fetcher (#7298)\n  Add \"acm-siggraph.csl\" required by CitationStyle.java\n  Added Keyboard shortcuts (clear/set read status) (#7302)\n  Add special fields ADR (#7300)\n  Overwrite local copies\n  Squashed 'buildres/csl/csl-locales/' content from commit ecb8e70233\n  Squashed 'buildres/csl/csl-styles/' content from commit 737ffa1505\n  Adapt workflow and build.gradle\n  Move CSL to buildres/csl to speedup \"processResources\" during development", "committedDate": "2021-01-07T14:39:34Z", "type": "commit"}, {"oid": "c52f0d76235a7fd2d7eb41e3b7e5b8e41de8703b", "url": "https://github.com/JabRef/jabref/commit/c52f0d76235a7fd2d7eb41e3b7e5b8e41de8703b", "message": "create viewModel for filter model", "committedDate": "2021-01-07T15:40:45Z", "type": "commit"}, {"oid": "266a8c378243ef3756573bf01aa1d6c7d205b824", "url": "https://github.com/JabRef/jabref/commit/266a8c378243ef3756573bf01aa1d6c7d205b824", "message": "wip refactor like in parse latex", "committedDate": "2021-01-07T19:03:03Z", "type": "commit"}, {"oid": "81e7b449eb79eecc6d79dfab5ce08c8eb3f5561f", "url": "https://github.com/JabRef/jabref/commit/81e7b449eb79eecc6d79dfab5ce08c8eb3f5561f", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Remove obsolete registry patch file (#7316)\n  Fix AUTHORS\n  GitBook: [master] one page modified\n  Remove broken Sonarqube integration (#7315)\n  GitBook: [master] 5 pages and 32 assets modified\n  docs: update license year (#7314)\n  Add javafx version number + update javafx (#7312)\n  Add missing authors", "committedDate": "2021-01-08T14:57:44Z", "type": "commit"}, {"oid": "b5b21f2f6a2881547575325c46f3dd785c666a10", "url": "https://github.com/JabRef/jabref/commit/b5b21f2f6a2881547575325c46f3dd785c666a10", "message": "fix view model stuff\nadapt to check View model", "committedDate": "2021-01-10T16:16:52Z", "type": "commit"}, {"oid": "d50a9d6fd669e67c256386ffa99463b89d477306", "url": "https://github.com/JabRef/jabref/commit/d50a9d6fd669e67c256386ffa99463b89d477306", "message": "add validator", "committedDate": "2021-01-10T16:24:54Z", "type": "commit"}, {"oid": "0cd75e57a188b1fdb8d1aa078431f83e1572c51c", "url": "https://github.com/JabRef/jabref/commit/0cd75e57a188b1fdb8d1aa078431f83e1572c51c", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Fixed exception about missing custom css file (#7292)\n  Update the templates for opening a new issue (#7321)\n  Entitlements file Mac (#7317)\n  Make CONTRIBUTING.md much shorter. Move long text to docs/contributing.md (#7293)\n  Include Github-optimized screenshot into repository (#7318)", "committedDate": "2021-01-10T16:29:02Z", "type": "commit"}, {"oid": "aebd602c22270175713642b499bb976da3d1d470", "url": "https://github.com/JabRef/jabref/commit/aebd602c22270175713642b499bb976da3d1d470", "message": "fix selection and export\nmove file node view model", "committedDate": "2021-01-10T17:00:41Z", "type": "commit"}, {"oid": "0e8cfbb556b4645e098ad1ca91c93c1cd431763a", "url": "https://github.com/JabRef/jabref/commit/0e8cfbb556b4645e098ad1ca91c93c1cd431763a", "message": "fix bug using wrong parameter\nremove l10n keys", "committedDate": "2021-01-10T17:12:26Z", "type": "commit"}, {"oid": "950655ca0f9ae2327e145b85e21677f535edf135", "url": "https://github.com/JabRef/jabref/commit/950655ca0f9ae2327e145b85e21677f535edf135", "message": "Refactored some style issues and a minor suggestions of IntelliJ", "committedDate": "2021-01-10T18:05:44Z", "type": "commit"}, {"oid": "4503d1e39ea8f6e51f8e1b446074708f75d89631", "url": "https://github.com/JabRef/jabref/commit/4503d1e39ea8f6e51f8e1b446074708f75d89631", "message": "l10n", "committedDate": "2021-01-10T18:18:21Z", "type": "commit"}, {"oid": "0426fd260f8b082751539b33909c26ed70e89856", "url": "https://github.com/JabRef/jabref/commit/0426fd260f8b082751539b33909c26ed70e89856", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Update guidelines-for-setting-up-a-local-workspace.md (#7339)\n  Updates to colored group indicator for cited entries (#7173)\n  Add some special fields as default columns (#7286)\n  Add a more descriptive path when Directory cannot be found (#7232)\n  Bump antlr4 from 4.9 to 4.9.1 (#7327)\n  Bump unirest-java from 3.11.09 to 3.11.10 (#7329)\n  Bump mockito-core from 3.6.28 to 3.7.0 (#7328)\n  Bump antlr4-runtime from 4.9 to 4.9.1 (#7330)\n  Bump gittools/actions from v0.9.7 to v0.9.8 (#7331)\n  Update to gradle 6.8 (#7324)\n  Link to GitHub contributors in about dialog (#7319)\n  Fix snapcraft upload (#7263)", "committedDate": "2021-01-13T17:15:10Z", "type": "commit"}, {"oid": "3d1dd9041064f9ec353ec42c0d858376ab3dacc3", "url": "https://github.com/JabRef/jabref/commit/3d1dd9041064f9ec353ec42c0d858376ab3dacc3", "message": "only show results after import", "committedDate": "2021-01-13T17:34:50Z", "type": "commit"}, {"oid": "2bc1ddcdd552e611f67a39f671bb5ec389445f2d", "url": "https://github.com/JabRef/jabref/commit/2bc1ddcdd552e611f67a39f671bb5ec389445f2d", "message": "Merge branch 'importerbackgroundtask' of github.com:JabRef/jabref into importerbackgroundtask\n\n* 'importerbackgroundtask' of github.com:JabRef/jabref:\n  l10n\n  Refactored some style issues and a minor suggestions of IntelliJ\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "committedDate": "2021-01-13T17:40:32Z", "type": "commit"}, {"oid": "b8e4e35786fd1b396893377d79acef2df3d8b789", "url": "https://github.com/JabRef/jabref/commit/b8e4e35786fd1b396893377d79acef2df3d8b789", "message": "Add custom skin for putting arrow to the right", "committedDate": "2021-01-14T17:39:34Z", "type": "commit"}, {"oid": "9778d0197fd27dbc49554c883eba9e4376b34e80", "url": "https://github.com/JabRef/jabref/commit/9778d0197fd27dbc49554c883eba9e4376b34e80", "message": "add checkstyle exception", "committedDate": "2021-01-14T17:57:23Z", "type": "commit"}, {"oid": "c3acb2b3bb32ca535627102ed8613f175c37a6dc", "url": "https://github.com/JabRef/jabref/commit/c3acb2b3bb32ca535627102ed8613f175c37a6dc", "message": "only change import order", "committedDate": "2021-01-14T17:58:45Z", "type": "commit"}, {"oid": "473aac77aa5fff4b07b928c7ad89ab7d41e51da8", "url": "https://github.com/JabRef/jabref/commit/473aac77aa5fff4b07b928c7ad89ab7d41e51da8", "message": "checkstyle", "committedDate": "2021-01-14T18:16:53Z", "type": "commit"}, {"oid": "bbe221019da8e083a93e55a63e5b6de320627d58", "url": "https://github.com/JabRef/jabref/commit/bbe221019da8e083a93e55a63e5b6de320627d58", "message": "load custom skin only on accordion", "committedDate": "2021-01-14T18:22:59Z", "type": "commit"}, {"oid": "35fcac955d727f276c3d8cf2e279913cf1b2d2ba", "url": "https://github.com/JabRef/jabref/commit/35fcac955d727f276c3d8cf2e279913cf1b2d2ba", "message": "Add arrow rotation hack", "committedDate": "2021-01-15T20:30:41Z", "type": "commit"}, {"oid": "e21a060167682e5148ffbb0755ed94968c2e9e08", "url": "https://github.com/JabRef/jabref/commit/e21a060167682e5148ffbb0755ed94968c2e9e08", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Fix regex (#7352)\n  Disable certain fetcher tests on CI (#7348)\n  Add date fields (#7334)\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/logic/externalfiles/ExternalFilesContentImporter.java", "committedDate": "2021-01-15T20:32:07Z", "type": "commit"}, {"oid": "7ec265162cab3d3da7092d71104acf2764b0ba5d", "url": "https://github.com/JabRef/jabref/commit/7ec265162cab3d3da7092d71104acf2764b0ba5d", "message": "Fix merge conflict", "committedDate": "2021-01-15T20:34:10Z", "type": "commit"}, {"oid": "c11d0c310d4c89faf4df3b7cb0921cd77d71e082", "url": "https://github.com/JabRef/jabref/commit/c11d0c310d4c89faf4df3b7cb0921cd77d71e082", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Export urldate to MSOffice (#7357)\n  Fix DOI fetcher and add documentation on fetcher trust levels (#6990)", "committedDate": "2021-01-17T12:58:28Z", "type": "commit"}, {"oid": "686af8f0c7ce8e5e0bff83460fe2cebd022d8be8", "url": "https://github.com/JabRef/jabref/commit/686af8f0c7ce8e5e0bff83460fe2cebd022d8be8", "message": "Set disable instead of visible", "committedDate": "2021-01-17T13:05:18Z", "type": "commit"}, {"oid": "ef0cc31ebd9278314206e34163e47fd3fc87260a", "url": "https://github.com/JabRef/jabref/commit/ef0cc31ebd9278314206e34163e47fd3fc87260a", "message": "Fixed jumping arrow", "committedDate": "2021-01-17T16:54:15Z", "type": "commit"}, {"oid": "b1ef47460e3065730e5f87ff040afed0ec60d927", "url": "https://github.com/JabRef/jabref/commit/b1ef47460e3065730e5f87ff040afed0ec60d927", "message": "Refactored for mvvm pattern and optics", "committedDate": "2021-01-18T19:00:35Z", "type": "commit"}, {"oid": "9b28692563bdec847ea814f9d1063373df4b806c", "url": "https://github.com/JabRef/jabref/commit/9b28692563bdec847ea814f9d1063373df4b806c", "message": "Remove obsolete language key", "committedDate": "2021-01-20T22:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzMzY4MQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562533681", "bodyText": "this should be called icon()", "author": "tobiasdiez", "createdAt": "2021-01-22T10:24:15Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportFilesResultItemViewModel.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.nio.file.Path;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+\n+public class ImportFilesResultItemViewModel {\n+\n+    private final StringProperty file = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<JabRefIcon> icon = new SimpleObjectProperty<>(IconTheme.JabRefIcons.WARNING);\n+    private final StringProperty message = new SimpleStringProperty(\"\");\n+\n+    public ImportFilesResultItemViewModel(Path file, boolean success, String message) {\n+        this.file.setValue(file.toString());\n+        this.message.setValue(message);\n+        if (success) {\n+            this.icon.setValue(IconTheme.JabRefIcons.CHECK);\n+        }\n+    }\n+\n+    public ObjectProperty<JabRefIcon> getIcon() {", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNTQ1OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562535459", "bodyText": "Why don't you use a nice foreach loop (I don't think i is used and you have the counter variable anyway)", "author": "tobiasdiez", "createdAt": "2021-01-22T10:27:05Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +70,93 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    var file = files.get(i);", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNjUzMQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562536531", "bodyText": "I think it would make sense to introduce a FileUtil.isPdfFile similar to the isbibfile method.", "author": "tobiasdiez", "createdAt": "2021-01-22T10:28:37Z", "path": "src/main/java/org/jabref/gui/externalfiles/ImportHandler.java", "diffHunk": "@@ -62,40 +70,93 @@ public ExternalFilesEntryLinker getLinker() {\n         return linker;\n     }\n \n-    public void importAsNewEntries(List<Path> files) {\n-        CompoundEdit ce = new CompoundEdit();\n-        for (Path file : files) {\n-            List<BibEntry> entriesToAdd;\n-            if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {\n-                List<BibEntry> pdfResult = contentImporter.importPDFContent(file);\n-                List<BibEntry> xmpEntriesInFile = contentImporter.importXMPContent(file);\n-\n-                // First try xmp import, if empty try pdf import, otherwise create empty entry\n-                if (!xmpEntriesInFile.isEmpty()) {\n-                    if (!pdfResult.isEmpty()) {\n-                        // FIXME: Show merge dialog?\n-                        entriesToAdd = xmpEntriesInFile;\n-                    } else {\n-                        entriesToAdd = xmpEntriesInFile;\n+    public BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesInBackground(List<Path> files) {\n+        return new BackgroundTask<>() {\n+\n+            @Override\n+            protected List<ImportFilesResultItemViewModel> call() {\n+                results = new ArrayList<>();\n+                counter = 1;\n+                CompoundEdit ce = new CompoundEdit();\n+                for (int i = 0; i < files.size(); i++) {\n+\n+                    var file = files.get(i);\n+                    entriesToAdd = Collections.emptyList();\n+\n+                    if (isCanceled()) {\n+                        break;\n                     }\n-                } else {\n-                    if (!pdfResult.isEmpty()) {\n-                        entriesToAdd = pdfResult;\n-                    } else {\n-                        entriesToAdd = Collections.singletonList(createEmptyEntryWithLink(file));\n+                    DefaultTaskExecutor.runInJavaFXThread(() -> {\n+                        updateMessage(Localization.lang(\"Processing file %0 of %1\", counter, files.size()));\n+                        updateProgress(counter, files.size() - 1);\n+                    });\n+\n+                    try {\n+                        if (FileUtil.getFileExtension(file).filter(\"pdf\"::equals).isPresent()) {", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MTIwMw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562541203", "bodyText": "A bit cleaner: bind to hasNoResults = EasyBind.isEmpty(viewModel.resultTableItems()) (similar for the treeRoot listener above)", "author": "tobiasdiez", "createdAt": "2021-01-22T10:36:23Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.IconValidationDecorator;\n+import org.jabref.gui.util.RecursiveTreeItem;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+import com.tobiasdiez.easybind.EasyBind;\n+import de.saxsys.mvvmfx.utils.validation.visualization.ControlsFxVisualizer;\n+import org.controlsfx.control.CheckTreeView;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileExtensionViewModel> fileTypeCombo;\n+    @FXML private CheckTreeView<FileNodeViewModel> unlinkedFilesList;\n+    @FXML private Button scanButton;\n+    @FXML private Button exportButton;\n+    @FXML private Button importButton;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> importResultTable;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private final ControlsFxVisualizer validationVisualizer;\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.validationVisualizer = new ControlsFxVisualizer();\n+\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+\n+        progressDisplay.progressProperty().bind(viewModel.progressValueProperty());\n+        progressText.textProperty().bind(viewModel.progressTextProperty());\n+        progressPane.managedProperty().bind(viewModel.taskActiveProperty());\n+        progressPane.visibleProperty().bind(viewModel.taskActiveProperty());\n+        accordion.disableProperty().bind(viewModel.taskActiveProperty());\n+\n+        viewModel.treeRootProperty().addListener(observable -> {\n+            scanButton.setDefaultButton(false);\n+            importButton.setDefaultButton(true);\n+            scanButton.setDefaultButton(false);\n+            filePane.setExpanded(true);\n+            resultPane.setExpanded(false);\n+        });\n+\n+        viewModel.resultTableItems().addListener((InvalidationListener) observable -> {", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg2Mzc2OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562863769", "bodyText": "I tried with Easybind.subscribe and Bindings.isEmpty, but that did not trigger correctly", "author": "Siedlerchr", "createdAt": "2021-01-22T19:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MTIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3MjUyOA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r563272528", "bodyText": "Idea was always to open the pane if a change happens.", "author": "calixtus", "createdAt": "2021-01-24T10:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzA2Nw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562543067", "bodyText": "This should be moved to ImportFilesResultItemViewModel", "author": "tobiasdiez", "createdAt": "2021-01-22T10:39:34Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.util.Objects;\n+\n+import javax.inject.Inject;\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.icon.IconTheme;\n+import org.jabref.gui.icon.JabRefIcon;\n+import org.jabref.gui.util.BaseDialog;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.IconValidationDecorator;\n+import org.jabref.gui.util.RecursiveTreeItem;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.gui.util.ValueTableCellFactory;\n+import org.jabref.gui.util.ViewModelListCellFactory;\n+import org.jabref.gui.util.ViewModelTreeCellFactory;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import com.airhacks.afterburner.views.ViewLoader;\n+import com.tobiasdiez.easybind.EasyBind;\n+import de.saxsys.mvvmfx.utils.validation.visualization.ControlsFxVisualizer;\n+import org.controlsfx.control.CheckTreeView;\n+\n+public class UnlinkedFilesDialogView extends BaseDialog<Void> {\n+\n+    @FXML private TextField directoryPathField;\n+    @FXML private ComboBox<FileExtensionViewModel> fileTypeCombo;\n+    @FXML private CheckTreeView<FileNodeViewModel> unlinkedFilesList;\n+    @FXML private Button scanButton;\n+    @FXML private Button exportButton;\n+    @FXML private Button importButton;\n+    @FXML private Label progressText;\n+    @FXML private Accordion accordion;\n+    @FXML private ProgressIndicator progressDisplay;\n+    @FXML private VBox progressPane;\n+\n+    @FXML private TableView<ImportFilesResultItemViewModel> importResultTable;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, JabRefIcon> colStatus;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colMessage;\n+    @FXML private TableColumn<ImportFilesResultItemViewModel, String> colFile;\n+\n+    @FXML private TitledPane filePane;\n+    @FXML private TitledPane resultPane;\n+\n+    @Inject private PreferencesService preferencesService;\n+    @Inject private DialogService dialogService;\n+    @Inject private StateManager stateManager;\n+    @Inject private UndoManager undoManager;\n+    @Inject private TaskExecutor taskExecutor;\n+    @Inject private FileUpdateMonitor fileUpdateMonitor;\n+\n+    private final ControlsFxVisualizer validationVisualizer;\n+    private UnlinkedFilesDialogViewModel viewModel;\n+\n+    public UnlinkedFilesDialogView() {\n+        this.validationVisualizer = new ControlsFxVisualizer();\n+\n+        this.setTitle(Localization.lang(\"Search for unlinked local files\"));\n+\n+        ViewLoader.view(this)\n+                  .load()\n+                  .setAsDialogPane(this);\n+\n+        setResultConverter(button -> {\n+            if (button == ButtonType.CANCEL) {\n+                viewModel.cancelTasks();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @FXML\n+    private void initialize() {\n+        viewModel = new UnlinkedFilesDialogViewModel(dialogService, ExternalFileTypes.getInstance(), undoManager, fileUpdateMonitor, preferencesService, stateManager, taskExecutor);\n+\n+        progressDisplay.progressProperty().bind(viewModel.progressValueProperty());\n+        progressText.textProperty().bind(viewModel.progressTextProperty());\n+        progressPane.managedProperty().bind(viewModel.taskActiveProperty());\n+        progressPane.visibleProperty().bind(viewModel.taskActiveProperty());\n+        accordion.disableProperty().bind(viewModel.taskActiveProperty());\n+\n+        viewModel.treeRootProperty().addListener(observable -> {\n+            scanButton.setDefaultButton(false);\n+            importButton.setDefaultButton(true);\n+            scanButton.setDefaultButton(false);\n+            filePane.setExpanded(true);\n+            resultPane.setExpanded(false);\n+        });\n+\n+        viewModel.resultTableItems().addListener((InvalidationListener) observable -> {\n+            filePane.setExpanded(false);\n+            resultPane.setExpanded(true);\n+            resultPane.setDisable(false);\n+        });\n+\n+        initDirectorySelection();\n+        initUnlinkedFilesList();\n+        initResultTable();\n+        initButtons();\n+    }\n+\n+    private void initDirectorySelection() {\n+        validationVisualizer.setDecoration(new IconValidationDecorator());\n+\n+        directoryPathField.textProperty().bindBidirectional(viewModel.directoryPathProperty());\n+        Platform.runLater(() -> validationVisualizer.initVisualization(viewModel.directoryPathValidationStatus(), directoryPathField));\n+\n+        new ViewModelListCellFactory<FileExtensionViewModel>()\n+                .withText(FileExtensionViewModel::getDescription)\n+                .withIcon(FileExtensionViewModel::getIcon)\n+                .install(fileTypeCombo);\n+        fileTypeCombo.setItems(viewModel.getFileFilters());\n+        fileTypeCombo.valueProperty().bindBidirectional(viewModel.selectedExtensionProperty());\n+        fileTypeCombo.getSelectionModel().selectFirst();\n+    }\n+\n+    private void initUnlinkedFilesList() {\n+        new ViewModelTreeCellFactory<FileNodeViewModel>()\n+                .withText(FileNodeViewModel::getDisplayText)\n+                .install(unlinkedFilesList);\n+\n+        unlinkedFilesList.maxHeightProperty().bind(((Control) filePane.contentProperty().get()).heightProperty());\n+        unlinkedFilesList.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+\n+        unlinkedFilesList.rootProperty().bind(EasyBind.map(viewModel.treeRootProperty(),\n+                fileNode -> {\n+                    if (!Objects.isNull(fileNode)) {\n+                        return new RecursiveTreeItem<>(fileNode, FileNodeViewModel::getChildren);\n+                    } else {\n+                        return null;\n+                    }\n+                }));\n+\n+        EasyBind.subscribe(unlinkedFilesList.rootProperty(), root -> {\n+            if (root != null) {\n+                ((CheckBoxTreeItem<FileNodeViewModel>) root).setSelected(true);\n+                root.setExpanded(true);\n+                EasyBind.bindContent(viewModel.checkedFileListProperty(), unlinkedFilesList.getCheckModel().getCheckedItems());\n+            } else {\n+                EasyBind.bindContent(viewModel.checkedFileListProperty(), FXCollections.observableArrayList());\n+            }\n+        });\n+    }\n+\n+    private void initResultTable() {\n+        colFile.setCellValueFactory(cellData -> cellData.getValue().file());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+                .withText(item -> item).withTooltip(item -> item)\n+                .install(colFile);\n+\n+        colMessage.setCellValueFactory(cellData -> cellData.getValue().message());\n+        new ValueTableCellFactory<ImportFilesResultItemViewModel, String>()\n+                .withText(item -> item).withTooltip(item -> item)\n+                .install(colMessage);\n+\n+        colStatus.setCellValueFactory(cellData -> cellData.getValue().getIcon());\n+        colStatus.setCellFactory(new ValueTableCellFactory<ImportFilesResultItemViewModel, JabRefIcon>().withGraphic(this::getIcon));\n+        importResultTable.setColumnResizePolicy((param) -> true);\n+\n+        importResultTable.setItems(viewModel.resultTableItems());\n+    }\n+\n+    private void initButtons() {\n+        BooleanBinding noItemsChecked = Bindings.isNull(unlinkedFilesList.rootProperty())\n+                                                .or(Bindings.isEmpty(viewModel.checkedFileListProperty()));\n+        exportButton.disableProperty().bind(noItemsChecked);\n+        importButton.disableProperty().bind(noItemsChecked);\n+\n+        scanButton.setDefaultButton(true);\n+        scanButton.disableProperty().bind(viewModel.taskActiveProperty().or(viewModel.directoryPathValidationStatus().validProperty().not()));\n+    }\n+\n+    @FXML\n+    void browseFileDirectory() {\n+        viewModel.browseFileDirectory();\n+    }\n+\n+    @FXML\n+    void collapseAll() {\n+        expandTree(unlinkedFilesList.getRoot(), false);\n+    }\n+\n+    @FXML\n+    void expandAll() {\n+        expandTree(unlinkedFilesList.getRoot(), true);\n+    }\n+\n+    @FXML\n+    void scanFiles() {\n+        viewModel.startSearch();\n+    }\n+\n+    @FXML\n+    void startImport() {\n+        viewModel.startImport();\n+    }\n+\n+    @FXML\n+    void selectAll() {\n+        unlinkedFilesList.getCheckModel().checkAll();\n+    }\n+\n+    @FXML\n+    void unselectAll() {\n+        unlinkedFilesList.getCheckModel().clearChecks();\n+    }\n+\n+    @FXML\n+    void exportSelected() {\n+        viewModel.startExport();\n+    }\n+\n+    private Node getIcon(JabRefIcon icon) {", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562543551", "bodyText": "You can use the EasyBind.OptionalProperty instead of handling with null values.", "author": "tobiasdiez", "createdAt": "2021-01-22T10:40:26Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg1MTUzNA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562851534", "bodyText": "No, I think it's necessary to prevent showing any empty things", "author": "Siedlerchr", "createdAt": "2021-01-22T19:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkwNzk4OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562907989", "bodyText": "The optional property is similar to Optional. Just a nice wrapper so that you don't need null but have an isEmpty etc.", "author": "tobiasdiez", "createdAt": "2021-01-22T20:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI3MjUzMg==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r563272532", "bodyText": "I took a closer look into the EasyBind package, although there is an OptionalBinding, there seems to be no OptionalProperty. I took the liberty to make this an ObjectProperty<Optional<FileNodeViewModel>>.", "author": "calixtus", "createdAt": "2021-01-24T10:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0MzU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NDI0MQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562544241", "bodyText": "There is some code dup with the onFinished handler, is still really needed?", "author": "tobiasdiez", "createdAt": "2021-01-22T10:41:44Z", "path": "src/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package org.jabref.gui.externalfiles;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream.Filter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.undo.UndoManager;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleListProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.TreeItem;\n+\n+import org.jabref.gui.DialogService;\n+import org.jabref.gui.StateManager;\n+import org.jabref.gui.externalfiletype.ExternalFileTypes;\n+import org.jabref.gui.util.BackgroundTask;\n+import org.jabref.gui.util.DirectoryDialogConfiguration;\n+import org.jabref.gui.util.FileDialogConfiguration;\n+import org.jabref.gui.util.FileNodeViewModel;\n+import org.jabref.gui.util.TaskExecutor;\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.logic.util.StandardFileType;\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.util.FileUpdateMonitor;\n+import org.jabref.preferences.PreferencesService;\n+\n+import de.saxsys.mvvmfx.utils.validation.FunctionBasedValidator;\n+import de.saxsys.mvvmfx.utils.validation.ValidationMessage;\n+import de.saxsys.mvvmfx.utils.validation.ValidationStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnlinkedFilesDialogViewModel {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UnlinkedFilesDialogViewModel.class);\n+\n+    private final ImportHandler importHandler;\n+    private final StringProperty directoryPath = new SimpleStringProperty(\"\");\n+    private final ObjectProperty<FileExtensionViewModel> selectedExtension = new SimpleObjectProperty<>();\n+\n+    private final ObjectProperty<FileNodeViewModel> treeRootProperty = new SimpleObjectProperty<>();\n+    private final SimpleListProperty<TreeItem<FileNodeViewModel>> checkedFileListProperty = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+    private final BooleanProperty taskActiveProperty = new SimpleBooleanProperty(false);\n+    private final DoubleProperty progressValueProperty = new SimpleDoubleProperty(0);\n+    private final StringProperty progressTextProperty = new SimpleStringProperty();\n+\n+    private final ObservableList<ImportFilesResultItemViewModel> resultList = FXCollections.observableArrayList();\n+    private final ObservableList<FileExtensionViewModel> fileFilterList;\n+    private final DialogService dialogService;\n+    private final PreferencesService preferences;\n+    private BackgroundTask<FileNodeViewModel> findUnlinkedFilesTask;\n+    private BackgroundTask<List<ImportFilesResultItemViewModel>> importFilesBackgroundTask;\n+\n+    private final BibDatabaseContext bibDatabase;\n+    private final TaskExecutor taskExecutor;\n+\n+    private final FunctionBasedValidator<String> scanDirectoryValidator;\n+\n+    public UnlinkedFilesDialogViewModel(DialogService dialogService, ExternalFileTypes externalFileTypes, UndoManager undoManager,\n+                                        FileUpdateMonitor fileUpdateMonitor, PreferencesService preferences, StateManager stateManager, TaskExecutor taskExecutor) {\n+        this.preferences = preferences;\n+        this.dialogService = dialogService;\n+        this.taskExecutor = taskExecutor;\n+        this.bibDatabase = stateManager.getActiveDatabase().orElseThrow(() -> new NullPointerException(\"Database null\"));\n+        importHandler = new ImportHandler(\n+                dialogService,\n+                bibDatabase,\n+                externalFileTypes,\n+                preferences,\n+                fileUpdateMonitor,\n+                undoManager,\n+                stateManager);\n+\n+        this.fileFilterList = FXCollections.observableArrayList(\n+                new FileExtensionViewModel(StandardFileType.ANY_FILE, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.BIBTEX_DB, externalFileTypes),\n+                new FileExtensionViewModel(StandardFileType.PDF, externalFileTypes));\n+\n+        Predicate<String> isDirectory = path -> Files.isDirectory(Path.of(path));\n+        scanDirectoryValidator = new FunctionBasedValidator<>(directoryPath, isDirectory,\n+                ValidationMessage.error(Localization.lang(\"Please enter a valid file path.\")));\n+\n+        treeRootProperty.setValue(null);\n+    }\n+\n+    public void startSearch() {\n+        Path directory = this.getSearchDirectory();\n+        Filter<Path> selectedFileFilter = selectedExtension.getValue().dirFilter();\n+\n+        progressValueProperty.unbind();\n+        progressTextProperty.unbind();\n+\n+        findUnlinkedFilesTask = new UnlinkedFilesCrawler(directory, selectedFileFilter, bibDatabase, preferences.getFilePreferences())\n+                .onRunning(() -> {\n+                    progressValueProperty.set(ProgressIndicator.INDETERMINATE_PROGRESS);\n+                    progressTextProperty.setValue(Localization.lang(\"Searching file system...\"));\n+                    progressTextProperty.bind(findUnlinkedFilesTask.messageProperty());\n+                    taskActiveProperty.setValue(true);\n+                    treeRootProperty.setValue(null);\n+                })\n+                .onFinished(() -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                })\n+                .onSuccess(root -> {\n+                    progressValueProperty.set(0);\n+                    taskActiveProperty.setValue(false);\n+                    treeRootProperty.setValue(root);\n+                });\n+        findUnlinkedFilesTask.executeWith(taskExecutor);\n+    }\n+\n+    public void startImport() {\n+        List<Path> fileList = checkedFileListProperty.stream()\n+                                                     .map(item -> item.getValue().getPath())\n+                                                     .filter(path -> path.toFile().isFile())\n+                                                     .collect(Collectors.toList());\n+        if (fileList.isEmpty()) {\n+            LOGGER.warn(\"There are no valid files checked\");\n+            return;\n+        }\n+        resultList.clear();\n+\n+        importFilesBackgroundTask = importHandler.importFilesInBackground(fileList)\n+                                                 .onRunning(() -> {\n+                                                     progressValueProperty.bind(importFilesBackgroundTask.workDonePercentageProperty());\n+                                                     progressTextProperty.bind(importFilesBackgroundTask.messageProperty());\n+                                                     taskActiveProperty.setValue(true);\n+                                                 })\n+                                                 .onFinished(() -> {\n+                                                     progressValueProperty.unbind();\n+                                                     progressTextProperty.unbind();\n+                                                     taskActiveProperty.setValue(false);\n+                                                 })\n+                                                 .onSuccess(results -> {\n+                                                     progressValueProperty.unbind();", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU4MjA5NA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562582094", "bodyText": "onFinished is called when the task exited but with not sucesss", "author": "Siedlerchr", "createdAt": "2021-01-22T11:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjYzMjI1Nw==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562632257", "bodyText": "If I understand \n  \n    \n      jabref/src/main/java/org/jabref/gui/util/BackgroundTask.java\n    \n    \n        Lines 156 to 162\n      in\n      c8f7be8\n    \n    \n    \n    \n\n        \n          \n           Consumer<V> getOnSuccess() { \n        \n\n        \n          \n               return chain(onFinished, onSuccess); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           Consumer<Exception> getOnException() { \n        \n\n        \n          \n               return chain(onFinished, onException); \n        \n\n        \n          \n           } \n        \n    \n  \n\n correctly, then onFinished is always called regardless of if it was a success or an error.", "author": "tobiasdiez", "createdAt": "2021-01-22T13:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NDI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NjcyMA==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562546720", "bodyText": "pathname rename to path", "author": "tobiasdiez", "createdAt": "2021-01-22T10:46:16Z", "path": "src/main/java/org/jabref/gui/util/FileFilterConverter.java", "diffHunk": "@@ -76,4 +83,19 @@ public static FileFilter toFileFilter(FileChooser.ExtensionFilter extensionFilte\n                                        .orElse(false);\n         }\n     }\n+\n+    public static Filter<Path> toDirFilter(List<String> extensions) {\n+        List<String> extensionsCleaned = extensions.stream()\n+                                                   .map(extension -> extension.replace(\".\", \"\").replace(\"*\", \"\"))\n+                                                   .filter(StringUtil::isNotBlank)\n+                                                   .collect(Collectors.toList());\n+        if (extensionsCleaned.isEmpty()) {\n+            // Except every file\n+            return pathname -> true;", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NzA0OQ==", "url": "https://github.com/JabRef/jabref/pull/7209#discussion_r562547049", "bodyText": "Is it not possible to reuse the toDirFilter here? They are almost the same code. Something like\nfilter = toDirFilter(extensions);\nreturn file -> filter.apply(file.toPath())", "author": "tobiasdiez", "createdAt": "2021-01-22T10:46:58Z", "path": "src/main/java/org/jabref/gui/util/FileFilterConverter.java", "diffHunk": "@@ -62,11 +64,16 @@ private FileFilterConverter() {\n     }\n \n     public static FileFilter toFileFilter(FileChooser.ExtensionFilter extensionFilter) {\n-        List<String> extensionsCleaned = extensionFilter.getExtensions()\n-                                                        .stream()\n-                                                        .map(extension -> extension.replace(\".\", \"\").replace(\"*\", \"\"))\n-                                                        .filter(StringUtil::isNotBlank)\n-                                                        .collect(Collectors.toList());\n+        return toFileFilter(extensionFilter.getExtensions());\n+    }\n+\n+    // Implement as DirectoryStream https://docs.oracle.com/javase/9/docs/api/java/nio/file/DirectoryStream.Filter.html\n+\n+    public static FileFilter toFileFilter(List<String> extensions) {\n+        List<String> extensionsCleaned = extensions.stream()", "originalCommit": "9b28692563bdec847ea814f9d1063373df4b806c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2fec815c7d8e3b5740a4e354d8bea0ba7a5c8fa8", "url": "https://github.com/JabRef/jabref/commit/2fec815c7d8e3b5740a4e354d8bea0ba7a5c8fa8", "message": "Merge remote-tracking branch 'upstream/master' into importerbackgroundtask\n\n* upstream/master:\n  Upgrade citeproc to 3.x snapshot without graal (#7370)\n  Fix Exception if no AzureInstrumentationKey is available (#7373)\n  Update snapcraft source url (#7372)\n  Fix checkstyle and adjust language\n  GitBook: [master] 3 pages and 32 assets modified\n  Add migration to special field (#7368)\n  GitBook: [master] 5 pages and 29 assets modified\n  Modify message at the duplicates found dialog (#7231)\n  Fixes miss-parsed names in `AutomaticPersonsGroup` (#7228)\n  Fix an issue where the password for a shared SQL database was only remembered if it was the same as the username (#7364)\n  Fix harvard exporter by changing AuthorsFormatter (#7355)\n  Bump styfle/cancel-workflow-action from 0.6.0 to 0.7.0 (#7363)\n  Bump mockito-core from 3.7.0 to 3.7.7 (#7360)\n  Bump org.beryx.jlink from 2.23.1 to 2.23.2 (#7361)\n  Bump libreoffice from 7.0.3 to 7.0.4 (#7362)\n  Export full month name instead of number in ms office (#7358)", "committedDate": "2021-01-22T18:17:37Z", "type": "commit"}, {"oid": "4efa5b94d7556d4a32fc4f5c9ef9812faf851b04", "url": "https://github.com/JabRef/jabref/commit/4efa5b94d7556d4a32fc4f5c9ef9812faf851b04", "message": "refactor", "committedDate": "2021-01-22T19:01:11Z", "type": "commit"}, {"oid": "7ec8e38c76f5a6748b72476e5ffc4cf8c9561450", "url": "https://github.com/JabRef/jabref/commit/7ec8e38c76f5a6748b72476e5ffc4cf8c9561450", "message": "Merge remote-tracking branch 'upstream/importerbackgroundtask' into importerbackgroundtask\n\n* upstream/importerbackgroundtask:\n  Remove obsolete language key\n  Refactored for mvvm pattern and optics\n\n# Conflicts:\n#\tsrc/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogView.java\n#\tsrc/main/java/org/jabref/gui/externalfiles/UnlinkedFilesDialogViewModel.java", "committedDate": "2021-01-22T19:04:33Z", "type": "commit"}, {"oid": "7c41e9a5768675edd0c7bc667e5ab71724bf9bb0", "url": "https://github.com/JabRef/jabref/commit/7c41e9a5768675edd0c7bc667e5ab71724bf9bb0", "message": "cleanup", "committedDate": "2021-01-22T19:18:33Z", "type": "commit"}, {"oid": "bc6c9e1cc366b1518b5417aac62c1d0af20ca60b", "url": "https://github.com/JabRef/jabref/commit/bc6c9e1cc366b1518b5417aac62c1d0af20ca60b", "message": "fix checkstyle\nand l10n", "committedDate": "2021-01-22T19:40:25Z", "type": "commit"}, {"oid": "443c14ccbb89dd778107b1ff3089ca3aef70cbfa", "url": "https://github.com/JabRef/jabref/commit/443c14ccbb89dd778107b1ff3089ca3aef70cbfa", "message": "move vars down to background task\nadd explaination to checkstyle", "committedDate": "2021-01-23T16:18:31Z", "type": "commit"}, {"oid": "ecaa23ad05a87ccf2b1066e469517a93901546c2", "url": "https://github.com/JabRef/jabref/commit/ecaa23ad05a87ccf2b1066e469517a93901546c2", "message": "Made treeRootProperty a property of Optional", "committedDate": "2021-01-24T10:36:01Z", "type": "commit"}, {"oid": "6362584759c720d223b1ab55fe4fb1eba1943ccd", "url": "https://github.com/JabRef/jabref/commit/6362584759c720d223b1ab55fe4fb1eba1943ccd", "message": "l10n", "committedDate": "2021-01-24T10:48:03Z", "type": "commit"}]}