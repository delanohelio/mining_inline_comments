{"pr_number": 7228, "pr_title": "Fixes miss-parsed names in `AutomaticPersonsGroup`", "pr_createdAt": "2020-12-22T20:26:44Z", "pr_url": "https://github.com/JabRef/jabref/pull/7228", "timeline": [{"oid": "e82f01e90b6d2d9530cd3f01d6ec5fe668b0d232", "url": "https://github.com/JabRef/jabref/commit/e82f01e90b6d2d9530cd3f01d6ec5fe668b0d232", "message": "Add SearchStrategy injection", "committedDate": "2020-12-22T20:02:12Z", "type": "commit"}, {"oid": "0117f9dc44ebd7f7d16f9addf77552cae7483e62", "url": "https://github.com/JabRef/jabref/commit/0117f9dc44ebd7f7d16f9addf77552cae7483e62", "message": "Fix caching, parsing and matching last names", "committedDate": "2020-12-22T20:03:13Z", "type": "commit"}, {"oid": "cc187ee8ba7e708b6fbbff99e9c01d12e60d91c0", "url": "https://github.com/JabRef/jabref/commit/cc187ee8ba7e708b6fbbff99e9c01d12e60d91c0", "message": "Add test cases", "committedDate": "2020-12-29T14:27:12Z", "type": "commit"}, {"oid": "f87503ac3a9baa88a8ef02cec3ecbe20da608d39", "url": "https://github.com/JabRef/jabref/commit/f87503ac3a9baa88a8ef02cec3ecbe20da608d39", "message": "Update CHANGELOG.md", "committedDate": "2020-12-29T17:30:02Z", "type": "commit"}, {"oid": "7d749e626373562ff7f8310b856feb0e6ac37295", "url": "https://github.com/JabRef/jabref/commit/7d749e626373562ff7f8310b856feb0e6ac37295", "message": "Merge branch 'master' into fix-for-issue-5833", "committedDate": "2020-12-29T17:30:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0NDIwNg==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550244206", "bodyText": "It's better to construct a list of expected elements by hand and compare to that. For example, if the code happens to return 3 elements, you now only get a message saying \"expected 2 but got 3\" - not very helpful. But if you do\nexpected = Arrays.asList(new Keywordgroup(...), ...); assertEquals(expected, subgroups) you get a nice message, showing you which additional group is there.", "author": "tobiasdiez", "createdAt": "2020-12-30T16:04:30Z", "path": "src/test/java/org/jabref/model/groups/AutomaticPersonsGroupTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.model.groups;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class AutomaticPersonsGroupTest {\n+    @Test\n+    void createSubgroupsFromCommaSeparatedLastNames() {\n+        BibEntry bibEntry = new BibEntry().withField(StandardField.AUTHOR, \"Turing, Alan and Hopper, Grace\");\n+        var subgroups = new AutomaticPersonsGroup(\"\", GroupHierarchyType.INDEPENDENT, StandardField.AUTHOR).createSubgroups(bibEntry);\n+        assertEquals(2, subgroups.size());", "originalCommit": "7d749e626373562ff7f8310b856feb0e6ac37295", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0NzgzNA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550247834", "bodyText": "It's better to construct a list of expected elements by hand and compare to that. For example, if the code happens to return 3 elements, you now only get a message saying \"expected 2 but got 3\" - not very helpful. But if you do\nexpected = Arrays.asList(new Keywordgroup(...), ...); assertEquals(expected, subgroups) you get a nice message, showing you which additional group is there.", "author": "tobiasdiez", "createdAt": "2020-12-30T16:15:57Z", "path": "src/test/java/org/jabref/model/groups/AutomaticPersonsGroupTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.model.groups;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class AutomaticPersonsGroupTest {\n+    @Test\n+    void createSubgroupsFromCommaSeparatedLastNames() {\n+        BibEntry bibEntry = new BibEntry().withField(StandardField.AUTHOR, \"Turing, Alan and Hopper, Grace\");\n+        var subgroups = new AutomaticPersonsGroup(\"\", GroupHierarchyType.INDEPENDENT, StandardField.AUTHOR).createSubgroups(bibEntry);\n+        assertEquals(2, subgroups.size());", "originalCommit": "7d749e626373562ff7f8310b856feb0e6ac37295", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de08b356fe19698f4cb29825ae8bd298eae893d5", "url": "https://github.com/JabRef/jabref/commit/de08b356fe19698f4cb29825ae8bd298eae893d5", "message": "Add LastNameGroup as a standalone group", "committedDate": "2020-12-30T19:02:34Z", "type": "commit"}, {"oid": "b2a9fe92c03b81741767756707af1e32306bade6", "url": "https://github.com/JabRef/jabref/commit/b2a9fe92c03b81741767756707af1e32306bade6", "message": "Fix test cases", "committedDate": "2020-12-30T19:21:31Z", "type": "commit"}, {"oid": "7566fa48cc2d88a2c318fea3dac4b63e1dd95fbe", "url": "https://github.com/JabRef/jabref/commit/7566fa48cc2d88a2c318fea3dac4b63e1dd95fbe", "message": "Fix checkstyle", "committedDate": "2020-12-30T19:43:40Z", "type": "commit"}, {"oid": "8a77d4ebc01d89bf8bb6aaaca7911889079b553b", "url": "https://github.com/JabRef/jabref/commit/8a77d4ebc01d89bf8bb6aaaca7911889079b553b", "message": "Add caching of last name", "committedDate": "2020-12-30T19:44:10Z", "type": "commit"}, {"oid": "5a907243a07b8a8847b808b2f7fedcb6a84de7db", "url": "https://github.com/JabRef/jabref/commit/5a907243a07b8a8847b808b2f7fedcb6a84de7db", "message": "Fix usage of latex free last names", "committedDate": "2020-12-30T19:45:45Z", "type": "commit"}, {"oid": "8e185f92b20fde786a0e408d517115e700d78f89", "url": "https://github.com/JabRef/jabref/commit/8e185f92b20fde786a0e408d517115e700d78f89", "message": "Fix mistake in latex free caching", "committedDate": "2020-12-30T19:57:11Z", "type": "commit"}, {"oid": "0d7f5cd740b4c72b8eb636d1885cdee7e0328aca", "url": "https://github.com/JabRef/jabref/commit/0d7f5cd740b4c72b8eb636d1885cdee7e0328aca", "message": "Fix tests", "committedDate": "2020-12-30T22:26:04Z", "type": "commit"}, {"oid": "d13452160d1468db75ce0f677f17c5ce00dc7c10", "url": "https://github.com/JabRef/jabref/commit/d13452160d1468db75ce0f677f17c5ce00dc7c10", "message": "Fix LastNameGroup for last name containing latex", "committedDate": "2020-12-30T22:27:30Z", "type": "commit"}, {"oid": "2ccb3ae23264eb8e20dbdae2b12bf75b9230ca29", "url": "https://github.com/JabRef/jabref/commit/2ccb3ae23264eb8e20dbdae2b12bf75b9230ca29", "message": "Readability and JavaDoc", "committedDate": "2020-12-30T22:27:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODU0NA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550478544", "bodyText": "if you add flatmap already here, it allows to chain everything nicely I think", "author": "tobiasdiez", "createdAt": "2020-12-31T12:59:30Z", "path": "src/main/java/org/jabref/model/groups/LastNameGroup.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.model.groups;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.entry.Author;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+\n+/**\n+ * Matches based on a latex free last name in a specified field. The field is parsed as an author list and the last names are resolved of latex.\n+ */\n+public class LastNameGroup extends KeywordGroup {\n+    public LastNameGroup(String groupName, GroupHierarchyType context, Field searchField, String lastName) {\n+        super(groupName, context, searchField, LatexToUnicodeAdapter.format(lastName), true);\n+    }\n+\n+    static List<String> getAsLastNamesLatexFree(Field field, BibEntry bibEntry) {\n+        return bibEntry.getField(field)\n+                       .map(AuthorList::parse)\n+                       .map(AuthorList::getAuthors)\n+                       .map(authors ->", "originalCommit": "2ccb3ae23264eb8e20dbdae2b12bf75b9230ca29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwMDA4Mw==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550500083", "bodyText": "... I forgot that Optional.stream existed as a method, not just a method reference... \ud83e\udd2f", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-31T15:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODkxMQ==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550478911", "bodyText": "please remove distinct and the latextounicode part here. The tests should be a as stupid as possible, e.g. if you want to test that the code transforms latex to unicode, you better do it by hand.", "author": "tobiasdiez", "createdAt": "2020-12-31T13:01:58Z", "path": "src/test/java/org/jabref/model/groups/AutomaticPersonsGroupTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.model.groups;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class AutomaticPersonsGroupTest {\n+    private static Set<GroupTreeNode> createPersonSubGroupFrom(String... lastNames) {\n+        return Arrays.stream(lastNames)\n+                     .distinct()", "originalCommit": "2ccb3ae23264eb8e20dbdae2b12bf75b9230ca29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MDU1MA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550490550", "bodyText": "This is what I use to generate the expected result.\n\nI am using latextounicode part here because I use the last name both as group name and search expression. As it is the expected subgroup they must be the same. (and without latex)\nThe distinct is implied from the set. Given that this is used to generate the expected result, if something messes up in the equality/hashing of the group, it is likelier to be caught by using distinct Strings to create the groups.\n\nThat said, if you don't agree I'll change both.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-31T14:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3OTI4OA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550779288", "bodyText": "I think createPersonSubGroupFrom(A, A) should create two groups. It's the responsible of the caller to make sure she passes distinct values. Similar, one should pass R\u00f6mer instead of R\\\"omer if one expect that latex is resolved.\nThe current test passes if latex2unicode is changed to return always the same string that was put into it. That's not desired.", "author": "tobiasdiez", "createdAt": "2021-01-01T15:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAxNDgzMg==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r551014832", "bodyText": "Unless I have missed something, the tests should now be as stupid as they can be ^^", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2021-01-03T14:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3ODkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3OTA4OQ==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550479089", "bodyText": "godelEntry is not used, right? (here and in the following test)", "author": "tobiasdiez", "createdAt": "2020-12-31T13:03:13Z", "path": "src/test/java/org/jabref/model/groups/AutomaticPersonsGroupTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.model.groups;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class AutomaticPersonsGroupTest {\n+    private static Set<GroupTreeNode> createPersonSubGroupFrom(String... lastNames) {\n+        return Arrays.stream(lastNames)\n+                     .distinct()\n+                     .map(LatexToUnicodeAdapter::format)\n+                     .map(lastName ->\n+                             new LastNameGroup(lastName, GroupHierarchyType.INDEPENDENT, StandardField.AUTHOR, lastName))\n+                     .map(GroupTreeNode::new)\n+                     .collect(Collectors.toSet());\n+    }\n+\n+    @Test\n+    void createSubgroupsFromCommaSeparatedLastNames() {\n+        BibEntry bibEntry = new BibEntry().withField(StandardField.AUTHOR, \"Turing, Alan and Hopper, Grace\");\n+        var subgroups = new AutomaticPersonsGroup(\"\", GroupHierarchyType.INDEPENDENT, StandardField.AUTHOR).createSubgroups(bibEntry);\n+        var expectedSubgroups = createPersonSubGroupFrom(\"Turing\", \"Hopper\");\n+        assertEquals(expectedSubgroups, subgroups);\n+    }\n+\n+    @Test\n+    void createSubgroupsContainingCommaSeparatedLastNames() {\n+        BibEntry bibEntry = new BibEntry().withField(StandardField.AUTHOR, \"Turing, Alan and Hopper, Grace\");\n+        var subgroups = new AutomaticPersonsGroup(\"\", GroupHierarchyType.INDEPENDENT, StandardField.AUTHOR).createSubgroups(bibEntry);\n+        var expectedSubgroups = createPersonSubGroupFrom(\"Turing\", \"Hopper\");\n+        assertEquals(expectedSubgroups, subgroups);\n+    }\n+\n+    @Test\n+    void createSubgroupFromLatexAndCheckForUnicodeLastName() {\n+        BibEntry bibEntry = new BibEntry().withField(StandardField.AUTHOR, \"Kurt G{\\\\\\\"{o}}del\");\n+        BibEntry godelEntry = new BibEntry().withField(StandardField.AUTHOR, \"Kurt G\u00f6del\");", "originalCommit": "2ccb3ae23264eb8e20dbdae2b12bf75b9230ca29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4OTg2Mw==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r550489863", "bodyText": "Nope. I really need to stop ignoring my IDE warnings, at least in code I have written myself. Sorry about that.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-12-31T14:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3OTA4OQ=="}], "type": "inlineReview"}, {"oid": "fbe3325ea24f3a9b3ff63280bd1a2fc453530b0c", "url": "https://github.com/JabRef/jabref/commit/fbe3325ea24f3a9b3ff63280bd1a2fc453530b0c", "message": "Remove unused BibEntry", "committedDate": "2020-12-31T15:01:36Z", "type": "commit"}, {"oid": "56cca39113f326c9a8693c971c579f0842005e0c", "url": "https://github.com/JabRef/jabref/commit/56cca39113f326c9a8693c971c579f0842005e0c", "message": "Flatten Stream", "committedDate": "2020-12-31T15:02:29Z", "type": "commit"}, {"oid": "6315c61b840027a0363948fa36fafc18197e1e82", "url": "https://github.com/JabRef/jabref/commit/6315c61b840027a0363948fa36fafc18197e1e82", "message": "Fix test cases", "committedDate": "2021-01-03T14:40:36Z", "type": "commit"}, {"oid": "30282373fe039365f809b8878cc7a52061de2641", "url": "https://github.com/JabRef/jabref/commit/30282373fe039365f809b8878cc7a52061de2641", "message": "Remove duplicated test case", "committedDate": "2021-01-03T14:43:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyOTA5Mw==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r551229093", "bodyText": "You can easily use instanceof here that should also check for supertypes.\nhttp://www.angelikalanger.com/Articles/JavaSolutions/SecretsOfEquals/Equals.html\nAnd tip: Use Objects.equals(getSearchField, otherGroup.getSearchField)", "author": "Siedlerchr", "createdAt": "2021-01-04T10:22:31Z", "path": "src/main/java/org/jabref/model/groups/LastNameGroup.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jabref.model.groups;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.jabref.model.entry.Author;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.Field;\n+import org.jabref.model.strings.LatexToUnicodeAdapter;\n+\n+/**\n+ * Matches based on a latex free last name in a specified field. The field is parsed as an author list and the last names are resolved of latex.\n+ */\n+public class LastNameGroup extends KeywordGroup {\n+    public LastNameGroup(String groupName, GroupHierarchyType context, Field searchField, String lastName) {\n+        super(groupName, context, searchField, LatexToUnicodeAdapter.format(lastName), true);\n+    }\n+\n+    static List<String> getAsLastNamesLatexFree(Field field, BibEntry bibEntry) {\n+        return bibEntry.getField(field).stream()\n+                       .map(AuthorList::parse)\n+                       .map(AuthorList::getAuthors)\n+                       .flatMap(Collection::stream)\n+                       .map(Author::getLastLatexFree)\n+                       .flatMap(Optional::stream)\n+                       .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public boolean contains(BibEntry entry) {\n+        return getAsLastNamesLatexFree(getSearchField(), entry).stream().anyMatch(name -> name.equals(getSearchExpression()));\n+    }\n+\n+    @Override\n+    public AbstractGroup deepCopy() {\n+        return new LastNameGroup(getName(), getHierarchicalContext(), getSearchField(), getSearchExpression());\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (super.equals(other)) {", "originalCommit": "30282373fe039365f809b8878cc7a52061de2641", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDY4OA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r551324688", "bodyText": "Objects.equals, good catch, I am not sure why I didn't use it.\n\n\nIf I understand you correctly, you'd like a specific check for LastNameGroup rather than relying on the .getClass() from AbstractGroup.equals\n\n  \n    \n      jabref/src/main/java/org/jabref/model/groups/AbstractGroup.java\n    \n    \n        Lines 52 to 57\n      in\n      10180ed\n    \n    \n    \n    \n\n        \n          \n           if (this == other) { \n        \n\n        \n          \n               return true; \n        \n\n        \n          \n           } \n        \n\n        \n          \n           if ((other == null) || (getClass() != other.getClass())) { \n        \n\n        \n          \n               return false; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n?", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2021-01-04T13:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyOTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzOTE2OA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r551339168", "bodyText": "if (this instanceof other) was the approach I thought of", "author": "Siedlerchr", "createdAt": "2021-01-04T14:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyOTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MjE0NA==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r551562144", "bodyText": "There were a few things in the article I had not encountered before, and I have made the changes I believe are necessary for a \"class hierarchies of value types\". (The code is now almost identical to \"Listing 4\" in the article)", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2021-01-04T20:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyOTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2NDE3Mw==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r554464173", "bodyText": "@Siedlerchr are you ok with the current approach?", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2021-01-09T19:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyOTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2Nzg1NQ==", "url": "https://github.com/JabRef/jabref/pull/7228#discussion_r554467855", "bodyText": "(By the way, Intellj can also auto-generate these equals/hash/tostring methods)", "author": "tobiasdiez", "createdAt": "2021-01-09T20:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyOTA5Mw=="}], "type": "inlineReview"}, {"oid": "990fb34021cd0a03e7d3b190dd540e51cb59ac17", "url": "https://github.com/JabRef/jabref/commit/990fb34021cd0a03e7d3b190dd540e51cb59ac17", "message": "Fix use of Objects.equals", "committedDate": "2021-01-04T13:25:52Z", "type": "commit"}, {"oid": "88dea226c663f3b4c70382e1fd933fff5423ee13", "url": "https://github.com/JabRef/jabref/commit/88dea226c663f3b4c70382e1fd933fff5423ee13", "message": "Merge branch 'master' into fix-for-issue-5833", "committedDate": "2021-01-04T13:46:05Z", "type": "commit"}, {"oid": "c43da991c0c094d183064c0b6bf52b9dd4d849af", "url": "https://github.com/JabRef/jabref/commit/c43da991c0c094d183064c0b6bf52b9dd4d849af", "message": "Fix equality check", "committedDate": "2021-01-04T20:52:08Z", "type": "commit"}, {"oid": "450ba106cb833cf4e8e044914102a4cb79e0dfa0", "url": "https://github.com/JabRef/jabref/commit/450ba106cb833cf4e8e044914102a4cb79e0dfa0", "message": "Optimized imports", "committedDate": "2021-01-04T21:04:11Z", "type": "commit"}, {"oid": "edd24bdb004f3447fba938eab3318dbb6c0b8e83", "url": "https://github.com/JabRef/jabref/commit/edd24bdb004f3447fba938eab3318dbb6c0b8e83", "message": "Add intellij generated equal and hashCode", "committedDate": "2021-01-12T22:28:04Z", "type": "commit"}, {"oid": "ba3ac4359190b490561e233ec6427fa92c0d7b03", "url": "https://github.com/JabRef/jabref/commit/ba3ac4359190b490561e233ec6427fa92c0d7b03", "message": "Merge branch 'master' into fix-for-issue-5833", "committedDate": "2021-01-18T19:46:24Z", "type": "commit"}, {"oid": "805187c54b00e36ca5bc6b7683676b063f9b2f3e", "url": "https://github.com/JabRef/jabref/commit/805187c54b00e36ca5bc6b7683676b063f9b2f3e", "message": "Fixed merge error", "committedDate": "2021-01-18T19:47:28Z", "type": "commit"}]}