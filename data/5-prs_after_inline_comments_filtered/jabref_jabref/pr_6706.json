{"pr_number": 6706, "pr_title": "Readability for citation key patterns", "pr_createdAt": "2020-07-23T16:29:05Z", "pr_url": "https://github.com/JabRef/jabref/pull/6706", "timeline": [{"oid": "360cfda2052353fa680ce2104282511004389437", "url": "https://github.com/JabRef/jabref/commit/360cfda2052353fa680ce2104282511004389437", "message": "Drop `authEtal` dependence on alphabetization", "committedDate": "2020-07-10T14:47:28Z", "type": "commit"}, {"oid": "aa309309e4bbb07ed13346ff56fdcfaa4b04f90d", "url": "https://github.com/JabRef/jabref/commit/aa309309e4bbb07ed13346ff56fdcfaa4b04f90d", "message": "Drop use of deprecated method\n\nInlining the deprecated method.", "committedDate": "2020-07-14T15:28:03Z", "type": "commit"}, {"oid": "41261638ca4b8061149970efb513eb9b1c0bbb93", "url": "https://github.com/JabRef/jabref/commit/41261638ca4b8061149970efb513eb9b1c0bbb93", "message": "Drop unnecessary method call\n\nAny references in the `String` should already have been resolved by\n`getResolvedFieldOrAlias`.", "committedDate": "2020-07-14T15:54:20Z", "type": "commit"}, {"oid": "09f3ca2229505db4d5cb2c84a9aa8f7a48a4ea00", "url": "https://github.com/JabRef/jabref/commit/09f3ca2229505db4d5cb2c84a9aa8f7a48a4ea00", "message": "Fix test using `nio.file.Path`\n\nOn Mac OS X this test case generates an error. The changes should\nreflect the intent of the test (i.e., are the lists referring to the\nsame files).", "committedDate": "2020-07-14T20:21:25Z", "type": "commit"}, {"oid": "facada6cf723914340a7a867a2b54b4bd91cf23a", "url": "https://github.com/JabRef/jabref/commit/facada6cf723914340a7a867a2b54b4bd91cf23a", "message": "Refactor if-else block to switch", "committedDate": "2020-07-17T15:22:40Z", "type": "commit"}, {"oid": "9e93fe972e6e18da0235c726936741b1dfe6dd5c", "url": "https://github.com/JabRef/jabref/commit/9e93fe972e6e18da0235c726936741b1dfe6dd5c", "message": "Add parsing of authors as an AuthorList", "committedDate": "2020-07-17T17:08:23Z", "type": "commit"}, {"oid": "ddf3c6f96cf09f68dfe486e71950692941b97f11", "url": "https://github.com/JabRef/jabref/commit/ddf3c6f96cf09f68dfe486e71950692941b97f11", "message": "Merge branch 'master' into fix-for-issue-3920", "committedDate": "2020-07-17T17:33:15Z", "type": "commit"}, {"oid": "812b9ac5ded8d35f0e10aeb7a4e80498631b8888", "url": "https://github.com/JabRef/jabref/commit/812b9ac5ded8d35f0e10aeb7a4e80498631b8888", "message": "Fix handling of list of authors", "committedDate": "2020-07-21T18:41:33Z", "type": "commit"}, {"oid": "15770de90738f20e4f345b86cb7f4ad7d12eaa60", "url": "https://github.com/JabRef/jabref/commit/15770de90738f20e4f345b86cb7f4ad7d12eaa60", "message": "Refactor variable name", "committedDate": "2020-07-21T18:49:02Z", "type": "commit"}, {"oid": "d456d1ec56b734889dfae152cd911be7d17002cc", "url": "https://github.com/JabRef/jabref/commit/d456d1ec56b734889dfae152cd911be7d17002cc", "message": "Fix adding institutions twice", "committedDate": "2020-07-21T20:31:14Z", "type": "commit"}, {"oid": "53f705c6711e1d5cfd9c11efde6b5adaa07c878f", "url": "https://github.com/JabRef/jabref/commit/53f705c6711e1d5cfd9c11efde6b5adaa07c878f", "message": "Fix attempting to improve readability", "committedDate": "2020-07-21T23:54:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4Mzc0OA==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r459583748", "bodyText": "Can probably be a list instead of an array", "author": "Siedlerchr", "createdAt": "2020-07-23T16:40:37Z", "path": "src/main/java/org/jabref/logic/citationkeypattern/BracketedPattern.java", "diffHunk": "@@ -707,102 +707,97 @@ public static String lastAuthorForenameInitials(String authorField) {\n     /**\n      * Gets the last name of all authors/editors\n      *\n-     * @param authorField a <code>String</code>\n+     * @param authorList an {@link AuthorList}\n      * @return the sur name of all authors/editors\n      */\n-    public static String allAuthors(String authorField) {\n-        // Quick hack to use NAuthors to avoid code duplication\n-        return nAuthors(authorField, Integer.MAX_VALUE);\n+    public static String allAuthors(AuthorList authorList) {\n+        return joinAuthorsOnLastName(authorList, authorList.getNumberOfAuthors(), \"\", \"\");\n     }\n \n     /**\n      * Returns the authors according to the BibTeX-alpha-Style\n      *\n-     * @param authorField string containing the value of the author field\n-     * @return the initials of all authornames\n+     * @param authorList an {@link AuthorList}\n+     * @return the initials of all authors' names\n      */\n-    public static String authorsAlpha(String authorField) {\n-        String authors = \"\";\n+    public static String authorsAlpha(AuthorList authorList) {\n+        StringBuilder authors = new StringBuilder();\n \n-        String fixedAuthors = AuthorList.fixAuthorLastNameOnlyCommas(authorField, false);\n+        String[] tokens = authorList.getAuthors().stream().map(Author::getLastOnly).toArray(String[]::new);", "originalCommit": "53f705c6711e1d5cfd9c11efde6b5adaa07c878f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MDY2OA==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r459640668", "bodyText": "Good point. I tried adding what is hopefully some readability improvements as well.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-07-23T18:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4Mzc0OA=="}], "type": "inlineReview"}, {"oid": "e62481a0c45c95db0ca05feb45e149288ca09ca4", "url": "https://github.com/JabRef/jabref/commit/e62481a0c45c95db0ca05feb45e149288ca09ca4", "message": "Fix types and readability\n\nString[] changed to List<String> and some refactoring", "committedDate": "2020-07-23T18:17:22Z", "type": "commit"}, {"oid": "e0c7507fec246be277e6777355aa4ea696dcf85d", "url": "https://github.com/JabRef/jabref/commit/e0c7507fec246be277e6777355aa4ea696dcf85d", "message": "Refactor `firstAuthorVonAndLast`", "committedDate": "2020-07-23T20:28:42Z", "type": "commit"}, {"oid": "a86ce949d1f34b923a488c5b09bd0b13019de408", "url": "https://github.com/JabRef/jabref/commit/a86ce949d1f34b923a488c5b09bd0b13019de408", "message": "Fix access modifiers", "committedDate": "2020-08-07T14:51:32Z", "type": "commit"}, {"oid": "6a836f2b8b011ddeb5a49955cb7fa2d228bf53e9", "url": "https://github.com/JabRef/jabref/commit/6a836f2b8b011ddeb5a49955cb7fa2d228bf53e9", "message": "Merge branch 'master' into fix-for-issue-3920", "committedDate": "2020-08-07T17:02:55Z", "type": "commit"}, {"oid": "8d1774b09f02465aea94c4b743185a16eedb3658", "url": "https://github.com/JabRef/jabref/commit/8d1774b09f02465aea94c4b743185a16eedb3658", "message": "Add test case", "committedDate": "2020-08-07T17:58:17Z", "type": "commit"}, {"oid": "cf203c9f964668610f7b532db3160c3338e30ad0", "url": "https://github.com/JabRef/jabref/commit/cf203c9f964668610f7b532db3160c3338e30ad0", "message": "Drop unused methods", "committedDate": "2020-08-07T18:08:57Z", "type": "commit"}, {"oid": "715364d1662c4ed5441fa45b4292be96e660fd58", "url": "https://github.com/JabRef/jabref/commit/715364d1662c4ed5441fa45b4292be96e660fd58", "message": "Add tests for truncated Unicode\n\nThe tests check if authors with names containing Unicode returns the\ncorrect number of characters in the citation key.", "committedDate": "2020-08-18T18:54:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5NTM0Mw==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r472495343", "bodyText": "Is there a missing bracket at the end?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(2, generateKey(bibEntry, \"[auth:truncate2\").length());\n          \n          \n            \n                    assertEquals(2, generateKey(bibEntry, \"[auth:truncate2]\").length());", "author": "koppor", "createdAt": "2020-08-18T21:11:09Z", "path": "src/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java", "diffHunk": "@@ -1094,4 +1094,20 @@ void generateKeyWithWithFirstNCharacters() {\n \n         assertEquals(\"newt-2019\", generateKey(entry, \"[auth4:lower]-[year]\"));\n     }\n+\n+    @Test\n+    void generateKeyCorrectKeyLengthWithTruncateModifierAndUnicode() {\n+        BibEntry bibEntry = new BibEntry();\n+        bibEntry.setField(StandardField.AUTHOR, \"G\u00f6del, Kurt\");\n+\n+        assertEquals(2, generateKey(bibEntry, \"[auth:truncate2\").length());", "originalCommit": "715364d1662c4ed5441fa45b4292be96e660fd58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwNjAwNQ==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r472506005", "bodyText": "There is indeed. Should the missing bracket generate an error or should I leave it alone?", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-08-18T21:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5NTM0Mw=="}], "type": "inlineReview"}, {"oid": "ee94869e0bd77eb6d1023a35bf5f2daa915985a1", "url": "https://github.com/JabRef/jabref/commit/ee94869e0bd77eb6d1023a35bf5f2daa915985a1", "message": "Fix missing bracket in test case\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-08-18T21:31:16Z", "type": "commit"}, {"oid": "ed66bb23ae7c4f3ad3656a8c5b294027317ba635", "url": "https://github.com/JabRef/jabref/commit/ed66bb23ae7c4f3ad3656a8c5b294027317ba635", "message": "Add convenience method for cleaning cite keys", "committedDate": "2020-08-27T16:17:39Z", "type": "commit"}, {"oid": "5b1312f216755e0c2bd4fc9b471a82796e80eda5", "url": "https://github.com/JabRef/jabref/commit/5b1312f216755e0c2bd4fc9b471a82796e80eda5", "message": "Fix incorrect number of characters in cite key\n\nThe result of expanding a bracket must be cleaned before applying\nmodifiers that depends on the number of characters in the result.\n(truncate)", "committedDate": "2020-08-27T16:29:50Z", "type": "commit"}, {"oid": "864c0ba8625381f5efd42cd58635f39a9aacd921", "url": "https://github.com/JabRef/jabref/commit/864c0ba8625381f5efd42cd58635f39a9aacd921", "message": "Fix incorrect number of characters in cite key\n\nThis fix extends a previous workaround in BracketedPattern.authN. It\ndoes not solve the underlying issue.", "committedDate": "2020-08-27T16:54:27Z", "type": "commit"}, {"oid": "9cac2dbe4c36ba7ea5d6ad1ddb0bcde9aceb8724", "url": "https://github.com/JabRef/jabref/commit/9cac2dbe4c36ba7ea5d6ad1ddb0bcde9aceb8724", "message": "Merge remote-tracking branch 'origin/fix-for-issue-3920' into fix-for-issue-3920", "committedDate": "2020-08-27T16:55:27Z", "type": "commit"}, {"oid": "25de361f50336912b9456e8989c8a6d6958102ee", "url": "https://github.com/JabRef/jabref/commit/25de361f50336912b9456e8989c8a6d6958102ee", "message": "Merge branch 'master' into fix-for-issue-3920", "committedDate": "2020-08-27T18:53:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NDQ2MA==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r478594460", "bodyText": "Can you add a comment why the number 4 is chosen. Maybe also what the constant means? Is it the maximum number of authors used when expanded something? Maybe, it's a dumb question, because I am looking at the diff only.", "author": "koppor", "createdAt": "2020-08-27T17:51:44Z", "path": "src/main/java/org/jabref/logic/citationkeypattern/BracketedPattern.java", "diffHunk": "@@ -44,6 +45,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(BracketedPattern.class);\n \n     private static final int CHARS_OF_FIRST = 5;\n+    private static final int MAX_ALPHA_AUTHORS = 4;", "originalCommit": "9cac2dbe4c36ba7ea5d6ad1ddb0bcde9aceb8724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NjA4MA==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r478676080", "bodyText": "I will look into it! I am sure having the comment will make someone's life easier in the future so it should be there in either case, I just weren't paying enough attention.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-08-27T20:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NDQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NjU4MQ==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r478666581", "bodyText": "A reformat of the file should add an empty line before, shouldn't it?", "author": "koppor", "createdAt": "2020-08-27T20:08:06Z", "path": "src/main/java/org/jabref/logic/citationkeypattern/BracketedPattern.java", "diffHunk": "@@ -420,14 +396,50 @@ public static String getFieldValue(BibEntry entry, String value, Character keywo\n                 return sb.toString();\n             } else {\n                 // we haven't seen any special demands\n-                return entry.getResolvedFieldOrAlias(FieldFactory.parseField(val), database).orElse(\"\");\n+                return entry.getResolvedFieldOrAlias(FieldFactory.parseField(pattern), database).orElse(\"\");\n             }\n         } catch (NullPointerException ex) {\n             LOGGER.debug(\"Problem making expanding bracketed expression\", ex);\n             return \"\";\n         }\n     }\n \n+    /**\n+     * Parses the provided string to an {@link AuthorList}, which are then formatted by {@link LatexToUnicodeAdapter}.\n+     * Afterward, any institutions are formatted into an institution key.\n+     * @param unparsedAuthors a string representation of authors or editors\n+     * @return an {@link AuthorList} consisting of authors and institution keys with resolved latex.\n+     */\n+    private static AuthorList createAuthorList(String unparsedAuthors) {\n+        AuthorList authorList = new AuthorList();\n+        for (Author author : AuthorList.parse(unparsedAuthors).getAuthors()) {\n+            // If the author is an institution, use an institution key instead of the full name\n+            String lastName = author.getLast()\n+                                    .map(LatexToUnicodeAdapter::format)\n+                                    .map(isInstitution(author) ?\n+                                            BracketedPattern::generateInstitutionKey : Function.identity())\n+                                    .orElse(null);\n+            authorList.addAuthor(\n+                    author.getFirst().map(LatexToUnicodeAdapter::format).orElse(null),\n+                    author.getFirstAbbr().map(LatexToUnicodeAdapter::format).orElse(null),\n+                    author.getVon().map(LatexToUnicodeAdapter::format).orElse(null),\n+                    lastName,\n+                    author.getJr().map(LatexToUnicodeAdapter::format).orElse(null)\n+            );\n+        }\n+        return authorList;\n+    }\n+\n+    /**\n+     * Checks if an author is an institution by verifying that only the last name is present.\n+     * @param author the checked author", "originalCommit": "9cac2dbe4c36ba7ea5d6ad1ddb0bcde9aceb8724", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxODk5OA==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r480418998", "bodyText": "Yes. I had not reformatted the file. I have now done so and tried to address the points where the reformatting is wrong (e.g., use ordered/unordered lists where appropriate instead of the auto-generated <p>). I tried fixing some of the additional warnings the file were giving as well.", "author": "k3KAW8Pnf7mkmdSMPHz27", "createdAt": "2020-08-31T21:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2OTA4OQ==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r478669089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BibEntry bibEntry = new BibEntry();\n          \n          \n            \n                    bibEntry.setField(StandardField.AUTHOR, author);\n          \n          \n            \n                    return new BibEntry()\n          \n          \n            \n                      .withField(StandardField.AUTHOR, author);", "author": "koppor", "createdAt": "2020-08-27T20:12:45Z", "path": "src/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java", "diffHunk": "@@ -54,6 +72,12 @@ void setUp() {\n         importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n     }\n \n+    private static BibEntry createABibEntryAuthor(String author) {\n+        BibEntry bibEntry = new BibEntry();\n+        bibEntry.setField(StandardField.AUTHOR, author);", "originalCommit": "9cac2dbe4c36ba7ea5d6ad1ddb0bcde9aceb8724", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "472537c6b6b5eb87a2d5f45cfe3f94df175b72d1", "url": "https://github.com/JabRef/jabref/commit/472537c6b6b5eb87a2d5f45cfe3f94df175b72d1", "message": "Fix readability in BracketedPattern.expandBrackets", "committedDate": "2020-08-28T20:35:00Z", "type": "commit"}, {"oid": "0b3a58c26a424a687664f913e59475a1241a4a9a", "url": "https://github.com/JabRef/jabref/commit/0b3a58c26a424a687664f913e59475a1241a4a9a", "message": "Fix names in BracketedPattern.expandBrackets", "committedDate": "2020-08-31T14:25:22Z", "type": "commit"}, {"oid": "4fe97747980eab77b82cd64d4179f2fba1a19c03", "url": "https://github.com/JabRef/jabref/commit/4fe97747980eab77b82cd64d4179f2fba1a19c03", "message": "Add JavaDoc to constants", "committedDate": "2020-08-31T15:18:10Z", "type": "commit"}, {"oid": "a1a737b8abcc45e0d000240b1dc0b20bcb04dcda", "url": "https://github.com/JabRef/jabref/commit/a1a737b8abcc45e0d000240b1dc0b20bcb04dcda", "message": "Fix readability in BracketedPattern#authorsAlpha", "committedDate": "2020-08-31T20:38:49Z", "type": "commit"}, {"oid": "4d19a519356bf1dc983ac0cb5141531eb10d05bb", "url": "https://github.com/JabRef/jabref/commit/4d19a519356bf1dc983ac0cb5141531eb10d05bb", "message": "Fix reformatting of file and readability", "committedDate": "2020-08-31T21:28:30Z", "type": "commit"}, {"oid": "70a9fdebca3c9442d7fb085a622533a7d5740804", "url": "https://github.com/JabRef/jabref/commit/70a9fdebca3c9442d7fb085a622533a7d5740804", "message": "Fix simplifying camelizeSignificantWordsInTitle", "committedDate": "2020-08-31T21:46:57Z", "type": "commit"}, {"oid": "663a8362c0738b095e8a61019023b1e2140b785c", "url": "https://github.com/JabRef/jabref/commit/663a8362c0738b095e8a61019023b1e2140b785c", "message": "Fix construction of BibEntry\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-08-31T21:51:48Z", "type": "commit"}, {"oid": "4cba99c24ed12384a73ec5d638261b2fc7eaa974", "url": "https://github.com/JabRef/jabref/commit/4cba99c24ed12384a73ec5d638261b2fc7eaa974", "message": "Fix removing a null variable", "committedDate": "2020-08-31T22:01:15Z", "type": "commit"}, {"oid": "bde630394b942fe896c2e7eb8ba7e64d3fd449dc", "url": "https://github.com/JabRef/jabref/commit/bde630394b942fe896c2e7eb8ba7e64d3fd449dc", "message": "Add test for parsing of brackets in regex", "committedDate": "2020-09-03T13:53:51Z", "type": "commit"}, {"oid": "4f72ef5fe0b7c1e1f799bcfc5b1c84f1c10c90e2", "url": "https://github.com/JabRef/jabref/commit/4f72ef5fe0b7c1e1f799bcfc5b1c84f1c10c90e2", "message": "Merge branch 'fix-for-issue-3920' of https://github.com/k3KAW8Pnf7mkmdSMPHz27/jabref into fix-for-issue-3920", "committedDate": "2020-09-03T13:55:11Z", "type": "commit"}, {"oid": "11cbc145a6f96b49b99401335bd828c3363187da", "url": "https://github.com/JabRef/jabref/commit/11cbc145a6f96b49b99401335bd828c3363187da", "message": "Fix construction of BibEntries", "committedDate": "2020-09-03T14:11:48Z", "type": "commit"}, {"oid": "7c2bcd0eab946b2756cd5e560f4a5b36fb4ad1f4", "url": "https://github.com/JabRef/jabref/commit/7c2bcd0eab946b2756cd5e560f4a5b36fb4ad1f4", "message": "Fix new line in JavaDoc", "committedDate": "2020-09-03T14:12:29Z", "type": "commit"}, {"oid": "9b686878f6fa709abfa118cea0e3781bdab1b21e", "url": "https://github.com/JabRef/jabref/commit/9b686878f6fa709abfa118cea0e3781bdab1b21e", "message": "Fix inconsistent bracket use in test patterns", "committedDate": "2020-09-03T14:27:29Z", "type": "commit"}, {"oid": "de93751dfdef78594fa255d768830eb328772500", "url": "https://github.com/JabRef/jabref/commit/de93751dfdef78594fa255d768830eb328772500", "message": "Fix more BibEntries constructions", "committedDate": "2020-09-03T14:39:50Z", "type": "commit"}, {"oid": "609caa70de1a8f221ea6fb79f4d59e7cf6e8452b", "url": "https://github.com/JabRef/jabref/commit/609caa70de1a8f221ea6fb79f4d59e7cf6e8452b", "message": "Merge branch 'master' into fix-for-issue-3920\n\n# Conflicts:\n#\tsrc/test/java/org/jabref/logic/citationkeypattern/BracketedPatternTest.java\n#\tsrc/test/java/org/jabref/logic/citationkeypattern/CitationKeyGeneratorTest.java", "committedDate": "2020-09-14T19:56:47Z", "type": "commit"}, {"oid": "2c73301ff51b784cbc331e0dacd4046a44ac75c3", "url": "https://github.com/JabRef/jabref/commit/2c73301ff51b784cbc331e0dacd4046a44ac75c3", "message": "Fix mistake in merge", "committedDate": "2020-09-14T20:00:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczMTc0Mg==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r491731742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"Missing closing bracket ']' in '\" + pattern + \"'\");\n          \n          \n            \n                        LOGGER.warn(\"Missing closing bracket ']' in '{}'\", pattern);", "author": "koppor", "createdAt": "2020-09-20T20:37:36Z", "path": "src/main/java/org/jabref/logic/citationkeypattern/BracketedPattern.java", "diffHunk": "@@ -150,229 +172,231 @@ public String expand(BibEntry bibentry, Character keywordDelimiter, BibDatabase\n     public static String expandBrackets(String pattern, Character keywordDelimiter, BibEntry entry, BibDatabase database) {\n         Objects.requireNonNull(pattern);\n         Objects.requireNonNull(entry);\n-        StringBuilder sb = new StringBuilder();\n-        StringTokenizer st = new StringTokenizer(pattern, \"\\\\[]\\\"\", true);\n-\n-        while (st.hasMoreTokens()) {\n-            String token = st.nextToken();\n-            if (\"\\\"\".equals(token)) {\n-                sb.append(token);\n-                while (st.hasMoreTokens()) {\n-                    token = st.nextToken();\n-                    sb.append(token);\n-                    if (\"\\\"\".equals(token)) {\n-                        break;\n+        StringBuilder expandedPattern = new StringBuilder();\n+        StringTokenizer parsedPattern = new StringTokenizer(pattern, \"\\\\[]\\\"\", true);\n+\n+        while (parsedPattern.hasMoreTokens()) {\n+            String token = parsedPattern.nextToken();\n+            switch (token) {\n+                case \"\\\"\" -> appendQuote(expandedPattern, parsedPattern);\n+                case \"[\" -> {\n+                    String fieldMarker = contentBetweenBrackets(parsedPattern, pattern);\n+\n+                    List<String> fieldParts = parseFieldMarker(fieldMarker);\n+                    // check whether there is a modifier on the end such as\n+                    // \":lower\":\n+                    if (fieldParts.size() <= 1) {\n+                        expandedPattern.append(getFieldValue(entry, fieldMarker, keywordDelimiter, database));\n+                    } else {\n+                        // apply modifiers:\n+                        String fieldValue = getFieldValue(entry, fieldParts.get(0), keywordDelimiter, database);\n+                        expandedPattern.append(applyModifiers(fieldValue, fieldParts, 1));\n                     }\n                 }\n-            } else {\n-                if (\"\\\\\".equals(token)) {\n-                    if (st.hasMoreTokens()) {\n-                        sb.append(st.nextToken());\n+                case \"\\\\\" -> {\n+                    if (parsedPattern.hasMoreTokens()) {\n+                        expandedPattern.append(parsedPattern.nextToken());\n                     }\n                     // FIXME: else -> raise exception or log? (S.G.)\n-                } else {\n-                    if (\"[\".equals(token)) {\n-                        Boolean foundClosingBracket = false;\n-                        // Fetch the next token after the '[':\n-                        token = st.nextToken();\n-                        if (\"]\".equals(token)) {\n-                            LOGGER.warn(\"Found empty brackets \\\"[]\\\" in '\" + pattern + \"'\");\n-                            foundClosingBracket = true;\n-                        }\n-                        // make sure to read until the next ']'\n-                        while (st.hasMoreTokens() && !foundClosingBracket) {\n-                            String subtoken = st.nextToken();\n-                            // I the beginning of a quote is found, include the content in the original token\n-                            if (\"\\\"\".equals(subtoken)) {\n-                                token = token + subtoken;\n-                                while (st.hasMoreTokens()) {\n-                                    subtoken = st.nextToken();\n-                                    token = token + subtoken;\n-                                    if (\"\\\"\".equals(subtoken)) {\n-                                        break;\n-                                    }\n-                                }\n-                            } else {\n-                                if (\"]\".equals(subtoken)) {\n-                                    foundClosingBracket = true;\n-                                    break;\n-                                } else {\n-                                    token = token + subtoken;\n-                                }\n-                            }\n-                        }\n-                        if (!foundClosingBracket) {\n-                            LOGGER.warn(\"Missing closing bracket ']' in '\" + pattern + \"'\");\n-                        }\n-                        List<String> fieldParts = parseFieldMarker(token);\n-                        // check whether there is a modifier on the end such as\n-                        // \":lower\":\n-                        if (fieldParts.size() <= 1) {\n-                            sb.append(getFieldValue(entry, token, keywordDelimiter, database));\n-                        } else {\n-                            // apply modifiers:\n-                            String fieldValue = getFieldValue(entry, fieldParts.get(0), keywordDelimiter, database);\n-                            sb.append(applyModifiers(fieldValue, fieldParts, 1));\n-                        }\n-                    } else {\n-                        sb.append(token);\n-                    }\n                 }\n+                default -> expandedPattern.append(token);\n             }\n         }\n \n-        return sb.toString();\n+        return expandedPattern.toString();\n     }\n \n     /**\n-     * Evaluates the given pattern (\"value\") to the given bibentry and database\n+     * Returns the content enclosed between brackets, including enclosed quotes, and excluding the enclosing brackets.\n+     * Intended to be used by {@link BracketedPattern#expandBrackets(String, Character, BibEntry, BibDatabase)} when a [\n+     * is encountered, and has been consumed, by the {@code StringTokenizer}.\n+     *\n+     * @param pattern   pattern used by {@code expandBrackets}, used for logging\n+     * @param tokenizer the tokenizer producing the tokens\n+     * @return the content enclosed by brackets\n+     */\n+    private static String contentBetweenBrackets(StringTokenizer tokenizer, final String pattern) {\n+        StringBuilder bracketContent = new StringBuilder();\n+        boolean foundClosingBracket = false;\n+        // make sure to read until the next ']'\n+        while (tokenizer.hasMoreTokens() && !foundClosingBracket) {\n+            String token = tokenizer.nextToken();\n+            // If the beginning of a quote is found, append the content\n+            switch (token) {\n+                case \"\\\"\" -> appendQuote(bracketContent, tokenizer);\n+                case \"]\" -> foundClosingBracket = true;\n+                default -> bracketContent.append(token);\n+            }\n+        }\n+\n+        if (!foundClosingBracket) {\n+            LOGGER.warn(\"Missing closing bracket ']' in '\" + pattern + \"'\");", "originalCommit": "2c73301ff51b784cbc331e0dacd4046a44ac75c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczMTc3NQ==", "url": "https://github.com/JabRef/jabref/pull/6706#discussion_r491731775", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"Found empty brackets \\\"[]\\\" in '\" + pattern + \"'\");\n          \n          \n            \n                        LOGGER.warn(\"Found empty brackets \\\"[]\\\" in '{}'\", pattern);", "author": "koppor", "createdAt": "2020-09-20T20:37:56Z", "path": "src/main/java/org/jabref/logic/citationkeypattern/BracketedPattern.java", "diffHunk": "@@ -150,229 +172,231 @@ public String expand(BibEntry bibentry, Character keywordDelimiter, BibDatabase\n     public static String expandBrackets(String pattern, Character keywordDelimiter, BibEntry entry, BibDatabase database) {\n         Objects.requireNonNull(pattern);\n         Objects.requireNonNull(entry);\n-        StringBuilder sb = new StringBuilder();\n-        StringTokenizer st = new StringTokenizer(pattern, \"\\\\[]\\\"\", true);\n-\n-        while (st.hasMoreTokens()) {\n-            String token = st.nextToken();\n-            if (\"\\\"\".equals(token)) {\n-                sb.append(token);\n-                while (st.hasMoreTokens()) {\n-                    token = st.nextToken();\n-                    sb.append(token);\n-                    if (\"\\\"\".equals(token)) {\n-                        break;\n+        StringBuilder expandedPattern = new StringBuilder();\n+        StringTokenizer parsedPattern = new StringTokenizer(pattern, \"\\\\[]\\\"\", true);\n+\n+        while (parsedPattern.hasMoreTokens()) {\n+            String token = parsedPattern.nextToken();\n+            switch (token) {\n+                case \"\\\"\" -> appendQuote(expandedPattern, parsedPattern);\n+                case \"[\" -> {\n+                    String fieldMarker = contentBetweenBrackets(parsedPattern, pattern);\n+\n+                    List<String> fieldParts = parseFieldMarker(fieldMarker);\n+                    // check whether there is a modifier on the end such as\n+                    // \":lower\":\n+                    if (fieldParts.size() <= 1) {\n+                        expandedPattern.append(getFieldValue(entry, fieldMarker, keywordDelimiter, database));\n+                    } else {\n+                        // apply modifiers:\n+                        String fieldValue = getFieldValue(entry, fieldParts.get(0), keywordDelimiter, database);\n+                        expandedPattern.append(applyModifiers(fieldValue, fieldParts, 1));\n                     }\n                 }\n-            } else {\n-                if (\"\\\\\".equals(token)) {\n-                    if (st.hasMoreTokens()) {\n-                        sb.append(st.nextToken());\n+                case \"\\\\\" -> {\n+                    if (parsedPattern.hasMoreTokens()) {\n+                        expandedPattern.append(parsedPattern.nextToken());\n                     }\n                     // FIXME: else -> raise exception or log? (S.G.)\n-                } else {\n-                    if (\"[\".equals(token)) {\n-                        Boolean foundClosingBracket = false;\n-                        // Fetch the next token after the '[':\n-                        token = st.nextToken();\n-                        if (\"]\".equals(token)) {\n-                            LOGGER.warn(\"Found empty brackets \\\"[]\\\" in '\" + pattern + \"'\");\n-                            foundClosingBracket = true;\n-                        }\n-                        // make sure to read until the next ']'\n-                        while (st.hasMoreTokens() && !foundClosingBracket) {\n-                            String subtoken = st.nextToken();\n-                            // I the beginning of a quote is found, include the content in the original token\n-                            if (\"\\\"\".equals(subtoken)) {\n-                                token = token + subtoken;\n-                                while (st.hasMoreTokens()) {\n-                                    subtoken = st.nextToken();\n-                                    token = token + subtoken;\n-                                    if (\"\\\"\".equals(subtoken)) {\n-                                        break;\n-                                    }\n-                                }\n-                            } else {\n-                                if (\"]\".equals(subtoken)) {\n-                                    foundClosingBracket = true;\n-                                    break;\n-                                } else {\n-                                    token = token + subtoken;\n-                                }\n-                            }\n-                        }\n-                        if (!foundClosingBracket) {\n-                            LOGGER.warn(\"Missing closing bracket ']' in '\" + pattern + \"'\");\n-                        }\n-                        List<String> fieldParts = parseFieldMarker(token);\n-                        // check whether there is a modifier on the end such as\n-                        // \":lower\":\n-                        if (fieldParts.size() <= 1) {\n-                            sb.append(getFieldValue(entry, token, keywordDelimiter, database));\n-                        } else {\n-                            // apply modifiers:\n-                            String fieldValue = getFieldValue(entry, fieldParts.get(0), keywordDelimiter, database);\n-                            sb.append(applyModifiers(fieldValue, fieldParts, 1));\n-                        }\n-                    } else {\n-                        sb.append(token);\n-                    }\n                 }\n+                default -> expandedPattern.append(token);\n             }\n         }\n \n-        return sb.toString();\n+        return expandedPattern.toString();\n     }\n \n     /**\n-     * Evaluates the given pattern (\"value\") to the given bibentry and database\n+     * Returns the content enclosed between brackets, including enclosed quotes, and excluding the enclosing brackets.\n+     * Intended to be used by {@link BracketedPattern#expandBrackets(String, Character, BibEntry, BibDatabase)} when a [\n+     * is encountered, and has been consumed, by the {@code StringTokenizer}.\n+     *\n+     * @param pattern   pattern used by {@code expandBrackets}, used for logging\n+     * @param tokenizer the tokenizer producing the tokens\n+     * @return the content enclosed by brackets\n+     */\n+    private static String contentBetweenBrackets(StringTokenizer tokenizer, final String pattern) {\n+        StringBuilder bracketContent = new StringBuilder();\n+        boolean foundClosingBracket = false;\n+        // make sure to read until the next ']'\n+        while (tokenizer.hasMoreTokens() && !foundClosingBracket) {\n+            String token = tokenizer.nextToken();\n+            // If the beginning of a quote is found, append the content\n+            switch (token) {\n+                case \"\\\"\" -> appendQuote(bracketContent, tokenizer);\n+                case \"]\" -> foundClosingBracket = true;\n+                default -> bracketContent.append(token);\n+            }\n+        }\n+\n+        if (!foundClosingBracket) {\n+            LOGGER.warn(\"Missing closing bracket ']' in '\" + pattern + \"'\");\n+        } else if (bracketContent.length() == 0) {\n+            LOGGER.warn(\"Found empty brackets \\\"[]\\\" in '\" + pattern + \"'\");", "originalCommit": "2c73301ff51b784cbc331e0dacd4046a44ac75c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "23764b46e01b51794958c82d29e8c15441c999d5", "url": "https://github.com/JabRef/jabref/commit/23764b46e01b51794958c82d29e8c15441c999d5", "message": "Fix use of withCiteKey", "committedDate": "2020-09-21T16:41:43Z", "type": "commit"}, {"oid": "aca6fb1842d44915d7c564a4cb8be6848081825c", "url": "https://github.com/JabRef/jabref/commit/aca6fb1842d44915d7c564a4cb8be6848081825c", "message": "Fix logger output\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-09-21T16:53:09Z", "type": "commit"}, {"oid": "7b896538edd887d7d0c83d2195a160d518ff77a8", "url": "https://github.com/JabRef/jabref/commit/7b896538edd887d7d0c83d2195a160d518ff77a8", "message": "Fix logger output\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-09-21T16:53:29Z", "type": "commit"}, {"oid": "eac7293242fa42798e37b15eb461c3688c2a37f4", "url": "https://github.com/JabRef/jabref/commit/eac7293242fa42798e37b15eb461c3688c2a37f4", "message": "Fix logger output", "committedDate": "2020-09-21T17:02:22Z", "type": "commit"}, {"oid": "d598f41aae140471fa387f4af16e215c8b985ece", "url": "https://github.com/JabRef/jabref/commit/d598f41aae140471fa387f4af16e215c8b985ece", "message": "Drop test-case outside of PR scope", "committedDate": "2020-09-21T17:03:11Z", "type": "commit"}]}