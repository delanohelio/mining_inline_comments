{"pr_number": 1024, "pr_title": "Updating Trace Context headers implementation", "pr_createdAt": "2020-02-06T09:34:13Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1024", "timeline": [{"oid": "83d524830f65f4fb56e8444553f64b766c4827c5", "url": "https://github.com/elastic/apm-agent-java/commit/83d524830f65f4fb56e8444553f64b766c4827c5", "message": "Refactoring- adding header set and get APIs", "committedDate": "2020-02-06T09:28:36Z", "type": "commit"}, {"oid": "e19351ac216da46d69c0f2d797d65316eaf27436", "url": "https://github.com/elastic/apm-agent-java/commit/e19351ac216da46d69c0f2d797d65316eaf27436", "message": "Merge remote-tracking branch 'upstream/master' into tracestate-implementation", "committedDate": "2020-02-06T10:03:21Z", "type": "commit"}, {"oid": "519a2c62e94281fbe47b57c3f21ee5dc076bdc23", "url": "https://github.com/elastic/apm-agent-java/commit/519a2c62e94281fbe47b57c3f21ee5dc076bdc23", "message": "Merging AsyncHttpClient", "committedDate": "2020-02-06T10:06:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyODkzMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r375728931", "bodyText": "Maybe disable the checks in the IDE rather than suppress the warnings on every usage?", "author": "felixbarny", "createdAt": "2020-02-06T09:39:54Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java", "diffHunk": "@@ -96,13 +99,15 @@\n     // Maintains a stack of all the activated spans\n     // This way its easy to retrieve the bottom of the stack (the transaction)\n     // Also, the caller does not have to keep a reference to the previously active span, as that is maintained by the stack\n+    @SuppressWarnings({\"Convert2Diamond\", \"AnonymousHasLambdaAlternative\"})", "originalCommit": "83d524830f65f4fb56e8444553f64b766c4827c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjAwNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376762006", "bodyText": "You mean for these specific ones? Sure, no problem.", "author": "eyalkoren", "createdAt": "2020-02-09T07:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyODkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MDk0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r375740942", "bodyText": "I don't have a strong opinion on naming, but I've seen this referenced as header extractor/injector in other projects.", "author": "felixbarny", "createdAt": "2020-02-06T10:02:36Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/HeaderGetter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.transaction;\n+\n+import javax.annotation.Nullable;\n+\n+public interface HeaderGetter<T, C> {", "originalCommit": "83d524830f65f4fb56e8444553f64b766c4827c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjA3NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376762075", "bodyText": "If you don't have a strong opinion, let's leave it this way \ud83d\ude42", "author": "eyalkoren", "createdAt": "2020-02-09T07:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MDk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NTMyNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r375745324", "bodyText": "why allow the carrier to be nullable?", "author": "felixbarny", "createdAt": "2020-02-06T10:11:28Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -428,10 +464,51 @@ String getIncomingTraceParentHeader() {\n         return sb.toString();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public <C> void setOutgoingTraceContextHeaders(@Nullable C carrier, TextHeaderSetter<C> headerSetter) {", "originalCommit": "83d524830f65f4fb56e8444553f64b766c4827c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjgwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376762800", "bodyText": "I figured that in many cases this is not expected, so I thought of centrally logging this. However, I assume that the handling code will encounter that sooner and won't even get to call this API, so maybe makes sense to enforce non-null.", "author": "eyalkoren", "createdAt": "2020-02-09T07:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NjgzNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r375746835", "bodyText": "There's a chance that this will be logged very frequently. Do any of the existing implementations return null?", "author": "felixbarny", "createdAt": "2020-02-06T10:14:20Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -428,10 +464,51 @@ String getIncomingTraceParentHeader() {\n         return sb.toString();\n     }\n \n+    /**\n+     * Sets Trace context text headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the text headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - an HTTP request\n+     */\n+    public <C> void setOutgoingTraceContextHeaders(@Nullable C carrier, TextHeaderSetter<C> headerSetter) {\n+        if (carrier == null) {\n+            logger.warn(\"Attempted to set a text header to a null carrier through {}. Distributed tracing cannot be supported.\", headerSetter.getClass().getName());\n+            return;\n+        }\n+        headerSetter.setHeader(TRACE_PARENT_TEXTUAL_HEADER_NAME, getOutgoingTraceParentTextHeader().toString(), carrier);\n+    }\n+\n+    /**\n+     * Sets Trace context binary headers, using this context as parent, on the provided carrier using the provided setter\n+     *\n+     * @param carrier      the binary headers carrier\n+     * @param headerSetter a setter implementing the actual addition of headers to the headers carrier\n+     * @param <C>          the header carrier type, for example - a Kafka record\n+     * @return true if Trace Context headers were set; false otherwise\n+     */\n+    public <C> boolean setOutgoingTraceContextHeaders(@Nullable C carrier, BinaryHeaderSetter<C> headerSetter) {\n+        if (carrier == null) {\n+            logger.warn(\"Attempted to set a binary header to a null carrier through {}. Distributed tracing cannot be supported.\", headerSetter.getClass().getName());\n+            return false;\n+        }\n+        byte[] buffer = headerSetter.getFixedLengthByteArray(TRACE_PARENT_BINARY_HEADER_NAME, BINARY_FORMAT_EXPECTED_LENGTH);\n+        if (buffer == null || buffer.length != BINARY_FORMAT_EXPECTED_LENGTH) {\n+            logger.warn(\"Header setter {} failed to provide a byte buffer with the proper length. Allocating a buffer for each header.\",", "originalCommit": "83d524830f65f4fb56e8444553f64b766c4827c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2MjU3Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376762577", "bodyText": "There is a single implementation (Kafka) that returns null if the current assumption (of same thread setting and serializing the headers) becomes invalid. If and when that happens, I don't mind the first user encountering it will get lots of errors. I made it so that distributed tracing will continue to work, but will start allocating more than before, so it can be easily overlooked if not logged clearly.", "author": "eyalkoren", "createdAt": "2020-02-09T07:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxMTE0Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376911143", "bodyText": "We should track https://issues.apache.org/jira/browse/KAFKA-3539", "author": "felixbarny", "createdAt": "2020-02-10T08:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NjgzNQ=="}], "type": "inlineReview"}, {"oid": "2bf09df30ffee17f9f0c928d9a389244f26a58d6", "url": "https://github.com/elastic/apm-agent-java/commit/2bf09df30ffee17f9f0c928d9a389244f26a58d6", "message": "Generics enhancements", "committedDate": "2020-02-06T11:14:00Z", "type": "commit"}, {"oid": "66058db930abc247c7031d4f7329eb25d41708ac", "url": "https://github.com/elastic/apm-agent-java/commit/66058db930abc247c7031d4f7329eb25d41708ac", "message": "More generics", "committedDate": "2020-02-07T09:20:40Z", "type": "commit"}, {"oid": "66bc6a2cf62c9018526fb2bdd7d05a87aaa929a5", "url": "https://github.com/elastic/apm-agent-java/commit/66bc6a2cf62c9018526fb2bdd7d05a87aaa929a5", "message": "Suggestion to improve Header*Bridge\n\nImprovements\n- MethodHandles are not @Nullable\n- Both getFirstHeader and getAllHeaders method handles are used in HeadersExtractorBridge", "committedDate": "2020-02-07T09:39:14Z", "type": "commit"}, {"oid": "0433c7b167ec8b17bc3e377c49550d695c0fdce8", "url": "https://github.com/elastic/apm-agent-java/commit/0433c7b167ec8b17bc3e377c49550d695c0fdce8", "message": "Remove HeaderGetter#getHeaders in favor of HeaderGetter#forEach\n\nAllows for internal iteration which can be more efficient\n- No forced Iterator allocations\n- No conversion from Header to String/byte[] necessary\n- Consumer is stateless and can be re-used, due to state method argument", "committedDate": "2020-02-07T12:43:18Z", "type": "commit"}, {"oid": "d90e10b8c5f993751e53b74820fc44d53bcf5fbb", "url": "https://github.com/elastic/apm-agent-java/commit/d90e10b8c5f993751e53b74820fc44d53bcf5fbb", "message": "Apply review suggestions", "committedDate": "2020-02-09T08:44:58Z", "type": "commit"}, {"oid": "a0a86f951ccb05c3d45f82b3fd8ef97ccdfb9821", "url": "https://github.com/elastic/apm-agent-java/commit/a0a86f951ccb05c3d45f82b3fd8ef97ccdfb9821", "message": "Merge branch 'pull/1024' of git://github.com/felixbarny/apm-agent-java into felixbarny-pull/1024", "committedDate": "2020-02-09T08:47:01Z", "type": "commit"}, {"oid": "31e7b841e4f0f4d65e260eaa4a2d1fd2578454fd", "url": "https://github.com/elastic/apm-agent-java/commit/31e7b841e4f0f4d65e260eaa4a2d1fd2578454fd", "message": "minor adjustments", "committedDate": "2020-02-09T09:23:02Z", "type": "commit"}, {"oid": "32bfb628a331e074ea109238e01657f792e05014", "url": "https://github.com/elastic/apm-agent-java/commit/32bfb628a331e074ea109238e01657f792e05014", "message": "Merge branch 'felixbarny-pull/1024' into tracestate-implementation", "committedDate": "2020-02-09T09:23:19Z", "type": "commit"}, {"oid": "c7439326e91f8c13203093ef348ec7f0d661854a", "url": "https://github.com/elastic/apm-agent-java/commit/c7439326e91f8c13203093ef348ec7f0d661854a", "message": "Implement usage of the W3C traceparent header", "committedDate": "2020-02-09T12:27:06Z", "type": "commit"}, {"oid": "2629e094abbcb122354f79760c02bd2dc928c9da", "url": "https://github.com/elastic/apm-agent-java/commit/2629e094abbcb122354f79760c02bd2dc928c9da", "message": "Update docs", "committedDate": "2020-02-09T13:12:31Z", "type": "commit"}, {"oid": "95719a6a41b8ee2863640437b21d6e7b51066f06", "url": "https://github.com/elastic/apm-agent-java/commit/95719a6a41b8ee2863640437b21d6e7b51066f06", "message": "Implement tracestate header", "committedDate": "2020-02-09T20:48:22Z", "type": "commit"}, {"oid": "63275083d3b0cd3973636c13082d2211cb718675", "url": "https://github.com/elastic/apm-agent-java/commit/63275083d3b0cd3973636c13082d2211cb718675", "message": "Remove binary header when requested", "committedDate": "2020-02-10T07:52:20Z", "type": "commit"}, {"oid": "e11b568b9986db7823c0494afdad9b4b3be819d7", "url": "https://github.com/elastic/apm-agent-java/commit/e11b568b9986db7823c0494afdad9b4b3be819d7", "message": "Remove debug prints", "committedDate": "2020-02-10T08:09:48Z", "type": "commit"}, {"oid": "c284fc44e5c1682032603e44c5f8ae91945833df", "url": "https://github.com/elastic/apm-agent-java/commit/c284fc44e5c1682032603e44c5f8ae91945833df", "message": "Merge remote-tracking branch 'upstream/master' into tracestate-implementation", "committedDate": "2020-02-10T08:47:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxMDE4OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376910189", "bodyText": "Did we align on this config across agents?", "author": "felixbarny", "createdAt": "2020-02-10T08:03:19Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -485,6 +485,32 @@\n             \"NOTE: this option can only be set via system properties, environment variables or the attacher options.\")\n         .buildWithDefault(DEFAULT_CONFIG_FILE);\n \n+    private final ConfigurationOption<Boolean> useElasticTraceparentHeader = ConfigurationOption.booleanOption()\n+        .key(\"use_elastic_traceparent_header\")\n+        .tags(\"added[1.13.0]\")\n+        .configurationCategory(CORE_CATEGORY)\n+        .description(\"To enable {apm-overview-ref-v}/distributed-tracing.html[distributed tracing], the agent\\n\" +\n+            \"adds trace context headers to outgoing requests (like HTTP requests, Kafka records, gRPC requests etc.).\\n\" +\n+            \"These headers (`traceparent` and `tracestate`) are defined in the\\n\" +\n+            \"https://www.w3.org/TR/trace-context-1/[W3C Trace Context] specification.\\n\" +\n+            \"\\n\" +\n+            \"When this setting is `true`, the agent will also add the header `elastic-apm-traceparent`\\n\" +\n+            \"for backwards compatibility with older versions of Elastic APM agents.\")\n+        .dynamic(true)\n+        .buildWithDefault(true);\n+\n+    private final ConfigurationOption<Integer> tracestateHeaderSizeLimit = ConfigurationOption.integerOption()\n+        .key(\"tracestate_header_size_limit\")", "originalCommit": "63275083d3b0cd3973636c13082d2211cb718675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MzA3OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376973079", "bodyText": "No need, it's internal, just instead of hard coded. We are aligned on the W3C spec that says there is no number to align on, each implementation can do what it choses, only declare so. I feel this is declarative enough, I don't expect it to be used often", "author": "eyalkoren", "createdAt": "2020-02-10T10:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxMDE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxMDUyMQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376910521", "bodyText": "Why is null allowed here?", "author": "felixbarny", "createdAt": "2020-02-10T08:04:32Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/HeaderGetter.java", "diffHunk": "@@ -31,6 +31,23 @@\n     @Nullable\n     T getFirstHeader(String headerName, C carrier);\n \n-    @Nullable\n-    Iterable<T> getHeaders(String headerName, C carrier);\n+    /**\n+     * Calls the consumer for each header value with the given key\n+     * until all entries have been processed or the action throws an exception.\n+     * <p>\n+     * The third parameter lets callers pass in a stateful object to be modified with header values,\n+     * so the {@link HeaderConsumer} implementation itself can be stateless and potentially reusable.\n+     * </p>\n+     *\n+     * @param headerName the name of the header\n+     * @param carrier    the object containing the headers\n+     * @param state      the object to be passed as the second parameter to each invocation on the specified consumer\n+     * @param consumer   the action to be performed for each header value\n+     * @param <S>        the type of the state object\n+     */\n+    <S> void forEach(String headerName, C carrier, S state, HeaderConsumer<T, S> consumer);\n+\n+    interface HeaderConsumer<T, S> {\n+        void accept(@Nullable T headerValue, S state);", "originalCommit": "63275083d3b0cd3973636c13082d2211cb718675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyMzIwOA==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376923208", "bodyText": "I think I get it. This allows us to do the null check only once, instead of trying to ensure it in every implementation - makes sense.", "author": "felixbarny", "createdAt": "2020-02-10T08:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxMDUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxODU1Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376918552", "bodyText": "I think it's going to be more efficient to just store all headers in a new ArrayList(2). Most of the time, there will only be and more than two seems rather unlikely. Just storing them in a list seems more efficient than pooling a StringBuilder, especially because when setting the header, there needs to be an allocation anyways (StringBuilder#toString). I'd do the truncation lazily when setting and use a thread-local StringBuilder for that.\nThis optimizes for the likely case that there's only one header that does not exceed the size limit.", "author": "felixbarny", "createdAt": "2020-02-10T08:26:43Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TextTracestateAppender.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.impl.transaction;\n+\n+import javax.annotation.Nullable;\n+\n+class TextTracestateAppender implements HeaderGetter.HeaderConsumer<String, TraceContext> {\n+\n+    private static TextTracestateAppender INSTANCE = new TextTracestateAppender();\n+\n+    static TextTracestateAppender instance() {\n+        return INSTANCE;\n+    }\n+\n+    TextTracestateAppender() {\n+    }\n+\n+    @Override\n+    public void accept(@Nullable String headerValue, TraceContext traceContext) {\n+        if (headerValue == null) {\n+            return;\n+        }\n+        // This means that the tracestate buffer will be allocated from pool only if tracestate headers exist\n+        StringBuilder tracestateBuffer = traceContext.getTracestateBuffer();", "originalCommit": "63275083d3b0cd3973636c13082d2211cb718675", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNDgwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376924800", "bodyText": "I wonder if multi-headers is even a thing for binary. When implementing binary tracestate it could make things more complicated. But we don't have to decide now.", "author": "felixbarny", "createdAt": "2020-02-10T08:42:28Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/impl/BinaryHeaderMapAccessor.java", "diffHunk": "@@ -48,10 +49,12 @@ private BinaryHeaderMapAccessor() {\n         return headerMap.get(headerName);\n     }\n \n-    @Nullable\n     @Override\n-    public Iterable<byte[]> getHeaders(String headerName, Map<String, byte[]> headerMap) {\n-        return List.of(headerMap.get(headerName));\n+    public <S> void forEach(String headerName, Map<String, byte[]> carrier, S state, HeaderConsumer<byte[], S> consumer) {", "originalCommit": "63275083d3b0cd3973636c13082d2211cb718675", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNjg5Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376926897", "bodyText": "This assumes that the source is guaranteed to only have one tracestate header, which might not be true.\nWhy not iterate over all values and call setHeader for each value?", "author": "felixbarny", "createdAt": "2020-02-10T08:47:16Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java", "diffHunk": "@@ -161,17 +188,29 @@ public boolean asChildOf(TraceContext child, Object ignore) {\n     };\n \n     public static <C> boolean containsTraceContextTextHeaders(C carrier, TextHeaderGetter<C> headerGetter) {\n-        return headerGetter.getFirstHeader(TRACE_PARENT_TEXTUAL_HEADER_NAME, carrier) != null;\n+        return headerGetter.getFirstHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, carrier) != null;\n     }\n \n     public static <C> void removeTraceContextHeaders(C carrier, HeaderRemover<C> headerRemover) {\n-        headerRemover.remove(TRACE_PARENT_TEXTUAL_HEADER_NAME, carrier);\n+        headerRemover.remove(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, carrier);\n+        headerRemover.remove(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, carrier);\n+        headerRemover.remove(TRACESTATE_HEADER_NAME, carrier);\n+        headerRemover.remove(TRACE_PARENT_BINARY_HEADER_NAME, carrier);\n     }\n \n-    public static <S, D> void copyTextHeaders(S source, TextHeaderGetter<S> headerGetter, D destination, TextHeaderSetter<D> headerSetter) {\n-        String elasticApmTraceParent = headerGetter.getFirstHeader(TRACE_PARENT_TEXTUAL_HEADER_NAME, source);\n+    public static <S, D> void copyTraceContextTextHeaders(S source, TextHeaderGetter<S> headerGetter, D destination, TextHeaderSetter<D> headerSetter) {\n+        String w3cApmTraceParent = headerGetter.getFirstHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, source);\n+        if (w3cApmTraceParent != null) {\n+            headerSetter.setHeader(W3C_TRACE_PARENT_TEXTUAL_HEADER_NAME, w3cApmTraceParent, destination);\n+        }\n+        String elasticApmTraceParent = headerGetter.getFirstHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, source);\n         if (elasticApmTraceParent != null) {\n-            headerSetter.setHeader(TRACE_PARENT_TEXTUAL_HEADER_NAME, elasticApmTraceParent, destination);\n+            headerSetter.setHeader(ELASTIC_TRACE_PARENT_TEXTUAL_HEADER_NAME, elasticApmTraceParent, destination);\n+        }\n+        // copying only the first tracestate header\n+        String tracestate = headerGetter.getFirstHeader(TRACESTATE_HEADER_NAME, source);", "originalCommit": "63275083d3b0cd3973636c13082d2211cb718675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3NDI0Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376974242", "bodyText": "This is what I wrote in the comment above. I don't really want to spend resources on that, it is only used for a very specific scenario at the moment.\n\nWhy not iterate over all values and call setHeader for each value?\n\nIt is not conforming to the tracestate definition anyway. Let's leave that as is", "author": "eyalkoren", "createdAt": "2020-02-10T10:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNjg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTI4MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376929281", "bodyText": "This does not work, unfortunately. There can be multiple implementations passed to the API. Even for the same technology, the headerExtractor will be specific to a particular instance of a request object.", "author": "felixbarny", "createdAt": "2020-02-10T08:52:42Z", "path": "apm-agent-plugins/apm-api-plugin/src/main/java/co/elastic/apm/agent/plugin/api/HeadersExtractorBridge.java", "diffHunk": "@@ -34,65 +34,83 @@\n import java.util.Iterator;\n \n @VisibleForAdvice\n-public class HeadersExtractorBridge implements TextHeaderGetter<Object> {\n+public class HeadersExtractorBridge implements TextHeaderGetter<HeadersExtractorBridge.Extractor> {\n \n     private static final Logger logger = LoggerFactory.getLogger(HeadersExtractorBridge.class);\n+    @Nullable\n+    private static HeadersExtractorBridge INSTANCE;\n \n-    private static final HeadersExtractorBridge INSTANCE = new HeadersExtractorBridge();\n+    public static class Extractor {\n \n-    @VisibleForAdvice\n-    public static HeadersExtractorBridge instance() {\n-        return INSTANCE;\n-    }\n+        private static final Extractor INSTANCE = new Extractor();\n+        @Nullable\n+        private Object headerExtractor;\n+        private Object headersExtractor;\n \n-    @Nullable\n-    private MethodHandle getAllHeadersMethod;\n+        private Extractor() {}\n \n-    private HeadersExtractorBridge() {\n+        public static Extractor of(@Nullable Object headerExtractor, Object headersExtractor) {", "originalCommit": "63275083d3b0cd3973636c13082d2211cb718675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3NDk3MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r376974970", "bodyText": "Of course \ud83e\udd26\u200d\u2642\nI can make it ThreadLocal, or cache per extractor. Since it's our API implementation, I want to make sure it is in accordance to the rest of the stuff we do", "author": "eyalkoren", "createdAt": "2020-02-10T10:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTA0Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1024#discussion_r378985046", "bodyText": "let's just allocate in this case. There will be allocations anyway for a capturing lambda (like request::getHeaders) and the header iterator. Allocations are fine and inevitable in the public API.", "author": "felixbarny", "createdAt": "2020-02-13T16:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyOTI4MQ=="}], "type": "inlineReview"}, {"oid": "d62f17c19e8fb3fd4af07783950c094c7354feb2", "url": "https://github.com/elastic/apm-agent-java/commit/d62f17c19e8fb3fd4af07783950c094c7354feb2", "message": "Add tracestate to ArrayList(1) instead of appending to pooled StringBuilder", "committedDate": "2020-02-13T16:37:03Z", "type": "commit"}, {"oid": "568c15dbedc77200389f3d0e588ba969e375d4ac", "url": "https://github.com/elastic/apm-agent-java/commit/568c15dbedc77200389f3d0e588ba969e375d4ac", "message": "Fix HeadersExtractorBridge.Extractor", "committedDate": "2020-02-14T09:06:19Z", "type": "commit"}, {"oid": "c509c3e384155d1f8d826d6041d66032b2f48620", "url": "https://github.com/elastic/apm-agent-java/commit/c509c3e384155d1f8d826d6041d66032b2f48620", "message": "Merge remote-tracking branch 'origin/master' into tracestate-implementation", "committedDate": "2020-02-14T13:55:35Z", "type": "commit"}, {"oid": "756ad0754e0f07f049cee8da516ee4d20249b370", "url": "https://github.com/elastic/apm-agent-java/commit/756ad0754e0f07f049cee8da516ee4d20249b370", "message": "Add changelog, adjust added version to 1.14.0", "committedDate": "2020-02-14T14:08:40Z", "type": "commit"}]}