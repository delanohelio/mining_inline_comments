{"pr_number": 1594, "pr_title": "Adding ability to delay agent initialization on startup", "pr_createdAt": "2020-12-28T16:39:59Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1594", "timeline": [{"oid": "b7c2f16828f66ce45133253deda5ec255a0c34e3", "url": "https://github.com/elastic/apm-agent-java/commit/b7c2f16828f66ce45133253deda5ec255a0c34e3", "message": "Adding ability to delay instrumentation on startup", "committedDate": "2020-12-28T16:29:51Z", "type": "commit"}, {"oid": "f655c2123e45befaedb8e47798769e5e7f96e4a5", "url": "https://github.com/elastic/apm-agent-java/commit/f655c2123e45befaedb8e47798769e5e7f96e4a5", "message": "Fix typo", "committedDate": "2020-12-28T16:50:27Z", "type": "commit"}, {"oid": "0622fa488b3b366f54ffe481e07e73ccf7965045", "url": "https://github.com/elastic/apm-agent-java/commit/0622fa488b3b366f54ffe481e07e73ccf7965045", "message": "Set GlobalTracer before getting a logger", "committedDate": "2020-12-29T03:26:48Z", "type": "commit"}, {"oid": "e9a256974a953bfeaddeb74d1b40629d244ddd2e", "url": "https://github.com/elastic/apm-agent-java/commit/e9a256974a953bfeaddeb74d1b40629d244ddd2e", "message": "Merge remote-tracking branch 'upstream/master' into delay-instrumentation-in-java-7", "committedDate": "2021-01-21T06:36:15Z", "type": "commit"}, {"oid": "83efe64fddca54585dab0ee1424dfe9cc792d96a", "url": "https://github.com/elastic/apm-agent-java/commit/83efe64fddca54585dab0ee1424dfe9cc792d96a", "message": "Merge remote-tracking branch 'upstream/master' into delay-instrumentation-in-java-7", "committedDate": "2021-01-24T05:20:25Z", "type": "commit"}, {"oid": "a5b57ff642cd2c5a6dd54917ca34166342f6c020", "url": "https://github.com/elastic/apm-agent-java/commit/a5b57ff642cd2c5a6dd54917ca34166342f6c020", "message": "Separating AgenMain from agent", "committedDate": "2021-01-24T09:05:41Z", "type": "commit"}, {"oid": "3317a253766f541cea1e54b593d674f4ee00c03f", "url": "https://github.com/elastic/apm-agent-java/commit/3317a253766f541cea1e54b593d674f4ee00c03f", "message": "Delaying by default for early HotSpot VMs", "committedDate": "2021-01-24T12:48:31Z", "type": "commit"}, {"oid": "70e968136aeee0f502ac13d948305d5d0ec2bb25", "url": "https://github.com/elastic/apm-agent-java/commit/70e968136aeee0f502ac13d948305d5d0ec2bb25", "message": "Small update version fix", "committedDate": "2021-01-25T06:20:36Z", "type": "commit"}, {"oid": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf", "url": "https://github.com/elastic/apm-agent-java/commit/fbbead9fa018cb75fea9be7de9ae2ed00207fbcf", "message": "Updating troubleshooting.asciidoc", "committedDate": "2021-01-25T07:12:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMyOTc4OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564329788", "bodyText": "Is that on purpose that we have two distinct properties ? I'm not sure to get why we would need to split delay for tracer init and the premain execution.\n\ndelay_tracer_start with alias delay_tracer_start_ms which is internal but documented in CoreConfiguration\ndelay_agent_premain_ms property which does not rely on configuration to avoid any dependency.", "author": "SylvainJuge", "createdAt": "2021-01-26T08:33:34Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/CoreConfiguration.java", "diffHunk": "@@ -129,12 +129,13 @@\n         .tags(\"added[1.11.0]\")\n         .build();\n \n-    private final ConfigurationOption<TimeDuration> delayInit = TimeDurationValueConverter.durationOption(\"ms\")", "originalCommit": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUwNjQwMw==", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564506403", "bodyText": "Yes, it is intentional, not saying it is the right thing \ud83d\ude42\nIdeally, we wouldn't recommend anyone using the premain delay, unless we really have to. This is the absolute delay in all agent stuff, including all class loading and linkage. The disadvantages of using it are the need to reinstrument loaded classes (instead of applying instrumentation during class loading), which may have more side effects, as well as the more restricted configuration option (only as System property). We just had a customer lately getting strange JMX behaviour with specific WebLogic MBeans that was overcome through the delay in tracer start. For a large deployment, it might be less user-friendly to enforce changes in the startup scripts all across instead of applying the change through the agent config file.\nI see your concern with having multiple properties dealing with delays, but since they are both hidden, it will mainly be our burden and not our users', so not as bad.\nHowever, it got me thinking I will now break it for this user. Do you think we should:\n\njust keep the old name?\nuse the new name and aliases for the old ones?\nkeep this change and notify this user, as it is internal and not likely widely used?", "author": "eyalkoren", "createdAt": "2021-01-26T13:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMyOTc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzMzU3Nw==", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564333577", "bodyText": "Removing that constraint on early Java 8 early versions would be really nice !! Do we need to make load-testing able to run tests with forks to validate this ? We could use a temporary branch on the project itself as a work-around.", "author": "SylvainJuge", "createdAt": "2021-01-26T08:39:41Z", "path": "apm-agent-premain/src/main/java/co/elastic/apm/agent/premain/AgentMain.java", "diffHunk": "@@ -101,13 +99,72 @@ public synchronized static void init(String agentArguments, Instrumentation inst\n             if (doDisable) {\n                 return;\n             }\n+        }\n \n+        // workaround for classloader deadlock https://bugs.openjdk.java.net/browse/JDK-8194653\n+        FileSystems.getDefault();\n+\n+        long delayAgentInitMs = -1L;\n+        String delayAgentInitMsProperty = System.getProperty(\"elastic.apm.delay_agent_premain_ms\");\n+        if (delayAgentInitMsProperty != null) {\n+            try {\n+                delayAgentInitMs = Long.parseLong(delayAgentInitMsProperty.trim());\n+            } catch (NumberFormatException numberFormatException) {\n+                System.err.println(\"The value of the \\\"elastic.apm.delay_agent_premain_ms\\\" System property must be a number\");\n+            }\n         }\n+        if (premain && shouldDelayOnPremain()) {\n+            delayAgentInitMs = Math.max(delayAgentInitMs, 3000L);\n+        }\n+        if (delayAgentInitMs > 0) {\n+            delayAndInitAgentAsync(agentArguments, instrumentation, premain, delayAgentInitMs);\n+        } else {\n+            loadAndInitializeAgent(agentArguments, instrumentation, premain);\n+        }\n+    }\n \n-        try {\n-            // workaround for classloader deadlock https://bugs.openjdk.java.net/browse/JDK-8194653\n-            FileSystems.getDefault();\n+    /**\n+     * Returns whether agent initialization should be delayed when occurring through the {@code premain} route.\n+     * This works around a JVM bug (https://bugs.openjdk.java.net/browse/JDK-8041920) causing JIT fatal error if\n+     * agent code causes the loading of MethodHandles prior to JIT compiler initialization.\n+     * @return {@code true} for any Java 7 and early Java 8 HotSpot JVMs, {@code false} for all others", "originalCommit": "fbbead9fa018cb75fea9be7de9ae2ed00207fbcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUwOTQ3Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1594#discussion_r564509476", "bodyText": "Indeed, I thought so too, but @felixbarny pointed out to me that we already had this restriction before moving to invokedynamic (although we used MethodHandles before). I think that using so old Java 8 updates is less common than using Java 7, so let's keep this restriction and this handles cases where someone IS trying to use our agent on these old JVMs and disables the bootstrap checks", "author": "eyalkoren", "createdAt": "2021-01-26T13:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzMzU3Nw=="}], "type": "inlineReview"}, {"oid": "f44cfb4bda299266da7149883a1a7ab01d4fd9dd", "url": "https://github.com/elastic/apm-agent-java/commit/f44cfb4bda299266da7149883a1a7ab01d4fd9dd", "message": "Merge remote-tracking branch 'upstream/master' into delay-instrumentation-in-java-7", "committedDate": "2021-01-26T15:48:19Z", "type": "commit"}, {"oid": "e216b984a25c8ff0c16a674e2f9562fc7548732f", "url": "https://github.com/elastic/apm-agent-java/commit/e216b984a25c8ff0c16a674e2f9562fc7548732f", "message": "Adding to CHANGELOG and being backward compatible", "committedDate": "2021-01-26T15:58:20Z", "type": "commit"}]}