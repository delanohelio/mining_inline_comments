{"pr_number": 1081, "pr_title": "Test that SQLExceptions are rethrown", "pr_createdAt": "2020-03-11T11:27:45Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1081", "timeline": [{"oid": "9bd914396a13798f54c0fff6b3ce10c0e93311dd", "url": "https://github.com/elastic/apm-agent-java/commit/9bd914396a13798f54c0fff6b3ce10c0e93311dd", "message": "Test that SQLExceptions are rethrown", "committedDate": "2020-03-11T11:20:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NDgwMA==", "url": "https://github.com/elastic/apm-agent-java/pull/1081#discussion_r394354800", "bodyText": "Nice", "author": "eyalkoren", "createdAt": "2020-03-18T13:43:13Z", "path": "apm-agent-plugins/apm-jdbc-plugin/src/test/java/co/elastic/apm/agent/jdbc/AbstractJdbcInstrumentationTest.java", "diffHunk": "@@ -270,42 +278,46 @@ private void testBatch(boolean isLargeBatch) throws SQLException {\n         assertSpanRecorded(insert, false, 2);\n     }\n \n-    private void testUpdate(boolean isLargeUpdate) throws SQLException {\n-        final String insert = \"INSERT INTO ELASTIC_APM (FOO, BAR) VALUES (42, 'TEST')\";\n+    private interface StatementExecutor<T> {\n+        T withStatement(Statement s, String sql) throws SQLException;\n+    }\n \n+    private void testUpdate(StatementExecutor<Number> statementConsumer) throws SQLException {\n         Statement statement = connection.createStatement();\n+        String insert = \"INSERT INTO ELASTIC_APM (FOO, BAR) VALUES (42, 'TEST')\";\n \n-        if (isLargeUpdate) {\n-            boolean supported = executePotentiallyUnsupportedFeature(() -> statement.executeLargeUpdate(insert));\n-            if (!supported) {\n-                // feature not supported, just ignore test\n-                return;\n-            }\n-\n-        } else {\n-            statement.executeUpdate(insert);\n+        boolean supported = executePotentiallyUnsupportedFeature(() -> assertThat(statementConsumer.withStatement(statement, insert).intValue()).isEqualTo(1));\n+        if (!supported) {\n+            // feature not supported, just ignore test\n+            return;\n         }\n-\n         assertSpanRecorded(insert, false, 1);\n+        reporter.reset();\n+        // unique key violation\n+        assertThatThrownBy(() -> statementConsumer.withStatement(statement, insert)).isInstanceOf(SQLException.class);", "originalCommit": "9bd914396a13798f54c0fff6b3ce10c0e93311dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}