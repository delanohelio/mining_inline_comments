{"pr_number": 1271, "pr_title": "First step towards enabling external plugins", "pr_createdAt": "2020-07-06T14:00:17Z", "pr_url": "https://github.com/elastic/apm-agent-java/pull/1271", "timeline": [{"oid": "c0e6a1533a339adff96f662e9d5e53cb77cb3001", "url": "https://github.com/elastic/apm-agent-java/commit/c0e6a1533a339adff96f662e9d5e53cb77cb3001", "message": "First step towards loading external plugins", "committedDate": "2020-07-06T13:41:48Z", "type": "commit"}, {"oid": "5ab46402c96fa874093de3489f2cc9ed7adc5b21", "url": "https://github.com/elastic/apm-agent-java/commit/5ab46402c96fa874093de3489f2cc9ed7adc5b21", "message": "Move indyPlugin() from ElasticApmInstrumentation to TracerAwareInstrumentation\n\nso that we don't have to do a breaking change in the SDK.\nExternal plugins are always indy-dispatched without an opt-out.", "committedDate": "2020-07-07T09:51:07Z", "type": "commit"}, {"oid": "b57c31c244d5d348ca55f6bd6d2cb7b8a2a6f812", "url": "https://github.com/elastic/apm-agent-java/commit/b57c31c244d5d348ca55f6bd6d2cb7b8a2a6f812", "message": "Fix InstrumentationTest", "committedDate": "2020-07-07T10:08:10Z", "type": "commit"}, {"oid": "bce3c39a009e46330611d782f8e131b7637d2422", "url": "https://github.com/elastic/apm-agent-java/commit/bce3c39a009e46330611d782f8e131b7637d2422", "message": "Add missing license headers", "committedDate": "2020-07-08T08:54:36Z", "type": "commit"}, {"oid": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "url": "https://github.com/elastic/apm-agent-java/commit/cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "message": "Merge remote-tracking branch 'origin/master' into plugin-sdk", "committedDate": "2020-07-08T15:04:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTIzOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453641239", "bodyText": "[question] Do we enforce/ensure that an instrumentation class is always loaded from the same classloader ? For example if we need to deal with plugin dependencies we might have to deal with cross-plugin classloader visibility instead of having classes loaded in multiple plugin classloaders.", "author": "SylvainJuge", "createdAt": "2020-07-13T13:16:58Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -161,6 +204,9 @@ private static synchronized void initInstrumentation(final ElasticApmTracer trac\n         if (!tracer.getConfig(CoreConfiguration.class).isEnabled()) {\n             return;\n         }\n+        for (ElasticApmInstrumentation apmInstrumentation : instrumentations) {\n+            pluginClassLoaderByAdviceClass.put(apmInstrumentation.getAdviceClass().getName(), apmInstrumentation.getClass().getClassLoader());", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4NzgyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454287822", "bodyText": "Not sure I understand. External plugins never depend on any other plugins. All internal plugins are loaded from the same classloader (currently the bootstrap CL). They may only depend on plugins that are always loaded from the bootstrap CL, such as the concurrent plugin, or on plugins that have the same package name (for example apm-kafka-headers-plugin and apm-kafka-base-plugin).", "author": "felixbarny", "createdAt": "2020-07-14T11:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTk5MA==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453641990", "bodyText": "[minor] might be relevant to throw/log an error if it's not the case.", "author": "SylvainJuge", "createdAt": "2020-07-13T13:18:08Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -325,8 +371,10 @@ public boolean matches(TypeDescription typeDescription, ClassLoader classLoader,\n         if (offsetMapping != null) {\n             withCustomMapping = withCustomMapping.bind(offsetMapping);\n         }\n-        if (instrumentation.indyPlugin()) {\n-            validateAdvice(instrumentation.getAdviceClass().getName());\n+        // external plugins are always indy plugins\n+        if (!(instrumentation instanceof TracerAwareInstrumentation)", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzOTU0OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454339549", "bodyText": "The instrumentation might be an instance of ElasticApmInstrumentation, indicating that it's an external plugin and thus and indy plugin by default.", "author": "felixbarny", "createdAt": "2020-07-14T13:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NTQxNw==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453645417", "bodyText": "[question] do we have to deal with concurrent access to this map and list of classloaders ?", "author": "SylvainJuge", "createdAt": "2020-07-13T13:23:16Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java", "diffHunk": "@@ -114,6 +119,8 @@\n     private static final WeakConcurrentMap<Class<?>, Set<Collection<Class<? extends ElasticApmInstrumentation>>>> dynamicallyInstrumentedClasses = WeakMapSupplier.createMap();\n     @Nullable\n     private static File agentJarFile;\n+    private static final List<ClassLoader> pluginClassLoaders = new ArrayList<>();\n+    private static final Map<String, ClassLoader> pluginClassLoaderByAdviceClass = new HashMap<>();", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4NDg2OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454284869", "bodyText": "Yes, we do, good catch! Seems we can also replace pluginClassLoaders with a local variable.", "author": "felixbarny", "createdAt": "2020-07-14T11:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NTQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MzQxNg==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453653416", "bodyText": "[minor] probably missing some tests with an isolated classloader to cover usage for external plugins.", "author": "SylvainJuge", "createdAt": "2020-07-13T13:35:11Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/util/PackageScannerTest.java", "diffHunk": "@@ -33,21 +34,21 @@\n ", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5NjQyMg==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454296422", "bodyText": "External plugins are not package scanned. We're scanning for class files via java.util.jar.JarFile#entries in the constructor of ExternalPluginClassLoader.", "author": "felixbarny", "createdAt": "2020-07-14T11:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MzQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NzE3Mw==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453657173", "bodyText": "[minor] missing some Javadoc", "author": "SylvainJuge", "createdAt": "2020-07-13T13:40:44Z", "path": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/DynamicTransformer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.sdk;\n+\n+import java.util.Collection;\n+import java.util.ServiceLoader;\n+\n+public interface DynamicTransformer {\n+\n+    void ensureInstrumented(Class<?> classToInstrument, Collection<Class<? extends ElasticApmInstrumentation>> instrumentationClasses);", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1ODU3NA==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453658574", "bodyText": "[minor] probably worth adding some details what this class provides and why we have a ServiceLoader indirection.", "author": "SylvainJuge", "createdAt": "2020-07-13T13:42:44Z", "path": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/DynamicTransformer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.sdk;\n+\n+import java.util.Collection;\n+import java.util.ServiceLoader;\n+\n+public interface DynamicTransformer {", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MDc5Mg==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453660792", "bodyText": "[minor] do we expect to have more than one implementation here ?", "author": "SylvainJuge", "createdAt": "2020-07-13T13:45:47Z", "path": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/DynamicTransformer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.agent.sdk;\n+\n+import java.util.Collection;\n+import java.util.ServiceLoader;\n+\n+public interface DynamicTransformer {\n+\n+    void ensureInstrumented(Class<?> classToInstrument, Collection<Class<? extends ElasticApmInstrumentation>> instrumentationClasses);\n+\n+    class Accessor {\n+        private static final DynamicTransformer transformer;\n+\n+        static {\n+            ClassLoader classLoader = Accessor.class.getClassLoader();\n+            if (classLoader == null) {\n+                classLoader = ClassLoader.getSystemClassLoader();\n+            }\n+            transformer = ServiceLoader.load(DynamicTransformer.class, classLoader).iterator().next();", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5ODkwNA==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454298904", "bodyText": "No, just one but we want to reverse the dependency: This class should not have to know the implementation as it's part of the SDK.", "author": "felixbarny", "createdAt": "2020-07-14T11:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MDc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzE0NQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453663145", "bodyText": "[question] why override with return false when it's already what parent class implementation does ?", "author": "SylvainJuge", "createdAt": "2020-07-13T13:49:10Z", "path": "apm-agent-core/src/test/java/co/elastic/apm/agent/bci/InstrumentationTest.java", "diffHunk": "@@ -487,9 +511,14 @@ public static String onMethodExit() {\n         public Collection<String> getInstrumentationGroupNames() {\n             return List.of(\"test\", \"experimental\");\n         }\n+\n+        @Override\n+        public boolean indyPlugin() {\n+            return false;\n+        }", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4OTgwNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454289805", "bodyText": "idk tbh. Might have been caused by an automatic refactoring or an oversight", "author": "felixbarny", "createdAt": "2020-07-14T11:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NjMyNQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453666325", "bodyText": "[minor] final modifier might be avoided for consistency in method signature", "author": "SylvainJuge", "createdAt": "2020-07-13T13:53:42Z", "path": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/HelperClassManager.java", "diffHunk": "@@ -286,7 +285,7 @@ private synchronized T loadAndReferenceHelper(Class<?> classOfTargetClassLoader)\n          * Creates an isolated CL that has two parents: the target class loader and the agent CL.\n          * The agent class loader is currently the bootstrap CL but in the future it will be an isolated CL that is a child of the bootstrap CL.\n          */\n-        public synchronized static ClassLoader getOrCreatePluginClassLoader(@Nullable ClassLoader targetClassLoader, List<String> classesToInject, ElementMatcher<? super TypeDescription> exclusionMatcher) throws Exception {\n+        public synchronized static ClassLoader getOrCreatePluginClassLoader(@Nullable ClassLoader targetClassLoader, List<String> classesToInject, final ClassLoader parent, ElementMatcher<? super TypeDescription> exclusionMatcher) throws Exception {", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NTgzOQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453675839", "bodyText": "[minor] might also be interesting to have an example that extends TracerAwareInstrumentation as relying on API is not the only option.", "author": "SylvainJuge", "createdAt": "2020-07-13T14:07:09Z", "path": "integration-tests/external-plugin-test/src/main/java/co/elastic/apm/plugin/PluginInstrumentation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.plugin;\n+\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.api.ElasticApm;\n+import co.elastic.apm.api.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class PluginInstrumentation extends ElasticApmInstrumentation {", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMxODI1OQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454318259", "bodyText": "We explicitly don't want external plugins to depend on internal APIs. While it's not strictly enforced or forbidden, I think we shouldn't promote it and also not list plugins depending on the internal API in the plugin registry/supported technologies page.", "author": "felixbarny", "createdAt": "2020-07-14T12:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NTgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NzA2Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453677066", "bodyText": "[minor] if we use this plugin as an example, that's not the canonical way to deal with configuration as it does not provides proper documentation. A comment to explain it's a shortcut might be relevant.", "author": "SylvainJuge", "createdAt": "2020-07-13T14:08:59Z", "path": "integration-tests/external-plugin-test/src/main/java/co/elastic/apm/plugin/PluginInstrumentation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.plugin;\n+\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.api.ElasticApm;\n+import co.elastic.apm.api.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class PluginInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(System.getProperty(\"elastic.apm.plugin.instrumented_class\", \"co.elastic.apm.plugin.PluginInstrumentationTest\"));", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyMDM5OA==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454320398", "bodyText": "External plugins currently can't plug into the configuration mechanism.\nAllowing that would make stagemonitor-configuration part of our public API which I don't feel confident to do as it's not maintained anymore and the latest version is not Java 7 compatible. So we might consider forking it in the future.\n\nas it does not provides proper documentation\n\nas the plugins are external, we wouldn't have documentation for that on our page anyways", "author": "felixbarny", "createdAt": "2020-07-14T12:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NzA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3ODY2MQ==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r453678661", "bodyText": "[question] why can't we have Transaction directly in the advice signature ? is that to avoid leaking an extra type in the instrumented class stack frames ?", "author": "SylvainJuge", "createdAt": "2020-07-13T14:11:16Z", "path": "integration-tests/external-plugin-test/src/main/java/co/elastic/apm/plugin/PluginInstrumentation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*-\n+ * #%L\n+ * Elastic APM Java agent\n+ * %%\n+ * Copyright (C) 2018 - 2020 Elastic and contributors\n+ * %%\n+ * Licensed to Elasticsearch B.V. under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch B.V. licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * #L%\n+ */\n+package co.elastic.apm.plugin;\n+\n+import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;\n+import co.elastic.apm.api.ElasticApm;\n+import co.elastic.apm.api.Transaction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class PluginInstrumentation extends ElasticApmInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<? super TypeDescription> getTypeMatcher() {\n+        return named(System.getProperty(\"elastic.apm.plugin.instrumented_class\", \"co.elastic.apm.plugin.PluginInstrumentationTest\"));\n+    }\n+\n+    @Override\n+    public ElementMatcher<? super MethodDescription> getMethodMatcher() {\n+        return named(System.getProperty(\"elastic.apm.plugin.instrumented_method\", \"traceMe\"));\n+    }\n+\n+    @Override\n+    public Collection<String> getInstrumentationGroupNames() {\n+        return Collections.singletonList(\"test-plugin\");\n+    }\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class, inline = false)\n+    public static Object onEnter(@Advice.Origin(value = \"#m\") String methodName) {\n+        return ElasticApm.startTransaction().setName(methodName);\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class, inline = false)\n+    public static void onExit(@Advice.Thrown Throwable thrown, @Advice.Enter Object transactionObject) {\n+        Transaction transaction = (Transaction) transactionObject;", "originalCommit": "cfe73eec0ea28a6604b42f9da60b15d0ed39b8e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyMTc0Ng==", "url": "https://github.com/elastic/apm-agent-java/pull/1271#discussion_r454321746", "bodyText": "That's correct. The Transaction type is not available form the context of the instrumented class and would throw a NoClassDefFoundError if the signature contained agent types. Not referencing agent types is enforced in co.elastic.apm.agent.bci.ElasticApmAgent#validateAdviceReturnAndParameterTypes.", "author": "felixbarny", "createdAt": "2020-07-14T12:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3ODY2MQ=="}], "type": "inlineReview"}, {"oid": "ab7f103e49ec1ee95187c1cf4fb6c44830cbf9da", "url": "https://github.com/elastic/apm-agent-java/commit/ab7f103e49ec1ee95187c1cf4fb6c44830cbf9da", "message": "Apply suggestions from review", "committedDate": "2020-07-14T13:00:12Z", "type": "commit"}, {"oid": "28395e5685350c076857e1d426c224c7ec937d22", "url": "https://github.com/elastic/apm-agent-java/commit/28395e5685350c076857e1d426c224c7ec937d22", "message": "Fix npe", "committedDate": "2020-07-17T09:08:59Z", "type": "commit"}, {"oid": "d618da4ab0a2bd33ebafcf8c826324b741beea16", "url": "https://github.com/elastic/apm-agent-java/commit/d618da4ab0a2bd33ebafcf8c826324b741beea16", "message": "Merge remote-tracking branch 'origin/master' into plugin-sdk", "committedDate": "2020-07-17T09:12:07Z", "type": "commit"}, {"oid": "899142fe53f469b80a1af444e02ffbe8b4a90a86", "url": "https://github.com/elastic/apm-agent-java/commit/899142fe53f469b80a1af444e02ffbe8b4a90a86", "message": "Merge remote-tracking branch 'origin/master' into plugin-sdk", "committedDate": "2020-07-17T09:13:48Z", "type": "commit"}]}