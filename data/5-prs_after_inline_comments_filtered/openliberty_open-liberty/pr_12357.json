{"pr_number": 12357, "pr_title": "code implementation LG-286 write json to system.out without wrapping", "pr_createdAt": "2020-05-25T13:55:52Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12357", "timeline": [{"oid": "dbd56f60e0a1cbb5274fb15e522c130a3f701a35", "url": "https://github.com/OpenLiberty/open-liberty/commit/dbd56f60e0a1cbb5274fb15e522c130a3f701a35", "message": "add appsWriteJson attribute for loggin", "committedDate": "2020-05-25T21:47:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA4NjI4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r430086289", "bodyText": "should start with the cheapest check... which is to see if appsWriteJson is true.  would also be better to put the content of the second if block inside the first if block since it only applies when the first if condition is true.", "author": "donbourne", "createdAt": "2020-05-25T22:16:11Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/ConsoleLogHandler.java", "diffHunk": "@@ -105,7 +108,16 @@ public void synchronousWrite(Object event) {\n \n             //First retrieve a cached JSON  message if possible, if not, format it and store it.\n             if (genData.getJsonMessage() == null) {\n-                genData.setJsonMessage((String) formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH));\n+                //check if it's in JSON format\n+                String json = null;\n+                if (event instanceof LogTraceData) {\n+                    json = ((LogTraceData) event).getMessage();\n+                }\n+                if (isJSON(json) && appsWriteJson) {\n+                    genData.setJsonMessage(json);\n+                } else {", "originalCommit": "dbd56f60e0a1cbb5274fb15e522c130a3f701a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5MDA1MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r430090050", "bodyText": "see comments for ConsoleLogHandler", "author": "donbourne", "createdAt": "2020-05-25T22:40:25Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/MessageLogHandler.java", "diffHunk": "@@ -63,7 +66,15 @@ public void synchronousWrite(Object event) {\n         String messageOutput = null;\n         if (currFormat.equals(LoggingConstants.JSON_FORMAT) || !eventSourceName.equals(CollectorConstants.MESSAGES_SOURCE)) {\n             if (genData.getJsonMessage() == null) {\n-                genData.setJsonMessage((String) formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH));\n+                String json = null;\n+                if (event instanceof LogTraceData) {", "originalCommit": "dbd56f60e0a1cbb5274fb15e522c130a3f701a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExMzM5Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r430113397", "bodyText": "maybe could refactor further...\n            String jsonMessage = null;\n            if (appsWriteJson && event instanceof LogTraceData) {\n                jsonMessage = ((LogTraceData) event).getMessage();\n                if (!isJSON(jsonMessage)) {\n                    jsonMessage = null;\n                }\n            }\n            \n            if (jsonMessage == null) {\n                jsonMessage = (String)formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH);\n            }\n            \n            genData.setJsonMessage(jsonMessage);", "author": "donbourne", "createdAt": "2020-05-26T01:23:04Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/ConsoleLogHandler.java", "diffHunk": "@@ -105,7 +108,21 @@ public void synchronousWrite(Object event) {\n \n             //First retrieve a cached JSON  message if possible, if not, format it and store it.\n             if (genData.getJsonMessage() == null) {\n-                genData.setJsonMessage((String) formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH));\n+                //check if it's in JSON format\n+\n+                if (appsWriteJson) {\n+                    String json = null;\n+                    if (event instanceof LogTraceData) {\n+                        json = ((LogTraceData) event).getMessage();\n+                    }\n+                    if (isJSON(json)) {\n+                        genData.setJsonMessage(json);\n+                    } else {\n+                        genData.setJsonMessage((String) formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH));\n+                    }\n+                } else {\n+                    genData.setJsonMessage((String) formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH));\n+                }", "originalCommit": "36356bd76ee7a3c2a3fec126ee5a7c86cf34af13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExNDg3NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r430114874", "bodyText": "oh, even more...\n        String jsonMessage = null;\n        if (appsWriteJson && event instanceof LogTraceData)\n            jsonMessage = ((LogTraceData) event).getMessage();\n\n        if (!isJSON(jsonMessage))\n            jsonMessage = (String)formatEvent(eventSourceName, CollectorConstants.MEMORY, event, null, MAXFIELDLENGTH);\n        \n        genData.setJsonMessage(jsonMessage);", "author": "donbourne", "createdAt": "2020-05-26T01:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExMzM5Nw=="}], "type": "inlineReview"}, {"oid": "d102c49e5b7bdeb36e5e5630ae37c233e631f8fa", "url": "https://github.com/OpenLiberty/open-liberty/commit/d102c49e5b7bdeb36e5e5630ae37c233e631f8fa", "message": "add appsWriteJson to logging attribute", "committedDate": "2020-06-04T15:04:10Z", "type": "forcePushed"}, {"oid": "cb429d7263a9a32fcb30ea22ebbd3fd4e8e734cd", "url": "https://github.com/OpenLiberty/open-liberty/commit/cb429d7263a9a32fcb30ea22ebbd3fd4e8e734cd", "message": "add FAT for appsWriteJson", "committedDate": "2020-06-08T13:55:20Z", "type": "forcePushed"}, {"oid": "2f3526b8be8a8c21ffe75c9ab50f37b1b711ad29", "url": "https://github.com/OpenLiberty/open-liberty/commit/2f3526b8be8a8c21ffe75c9ab50f37b1b711ad29", "message": "add FAT tests to test server.env and bootstrap.properties config of appsWriteJson", "committedDate": "2020-06-11T19:17:39Z", "type": "forcePushed"}, {"oid": "0e751ce8ac0b5fade6da804578fb060afadde722", "url": "https://github.com/OpenLiberty/open-liberty/commit/0e751ce8ac0b5fade6da804578fb060afadde722", "message": "add FAT tests to test server.env and bootstrap.properties config of appsWriteJson", "committedDate": "2020-06-11T19:59:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MTQ4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r439151489", "bodyText": "add a comment above this to say what this is for", "author": "donbourne", "createdAt": "2020-06-12T00:54:09Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/LogProviderConfigImpl.java", "diffHunk": "@@ -132,6 +132,8 @@\n     /** The wlp user dir name. */\n     private final String wlpUsrDir;\n \n+    protected volatile boolean appsWriteJson = false;", "originalCommit": "0e751ce8ac0b5fade6da804578fb060afadde722", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MTYyNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r439151624", "bodyText": "add blank line above (just to keep consistent with rest of spacing in the method)", "author": "donbourne", "createdAt": "2020-06-12T00:54:43Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/LogProviderConfigImpl.java", "diffHunk": "@@ -171,6 +173,8 @@ public LogProviderConfigImpl(Map<String, String> config, File logLocation, TextF\n \n         consoleLogLevel = LoggingConfigUtils.getLogLevel(LoggingConfigUtils.getEnvValue(LoggingConstants.ENV_WLP_LOGGING_CONSOLE_LOGLEVEL),\n                                                          consoleLogLevel);\n+        appsWriteJson = LoggingConfigUtils.getBooleanValue(LoggingConfigUtils.getEnvValue(LoggingConstants.ENV_WLP_LOGGING_APPS_WRITE_JSON),", "originalCommit": "0e751ce8ac0b5fade6da804578fb060afadde722", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MTk0OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r439151949", "bodyText": "remove empty javadoc", "author": "donbourne", "createdAt": "2020-06-12T00:55:55Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/LogProviderConfigImpl.java", "diffHunk": "@@ -425,6 +430,13 @@ public boolean getNewLogsOnStart() {\n         return newLogsOnStart;\n     }\n \n+    /**\n+     * @return\n+     */", "originalCommit": "0e751ce8ac0b5fade6da804578fb060afadde722", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1NDgzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r439154834", "bodyText": "comment doesn't match code", "author": "donbourne", "createdAt": "2020-06-12T01:07:36Z", "path": "dev/com.ibm.ws.logging.json_fat/fat/src/com/ibm/ws/logging/json/fat/JsonConfigBootstrapTest.java", "diffHunk": "@@ -281,6 +286,60 @@ public void testMaxFileSizeLevelInPropertiesXML() throws Exception {\n         }\n     }\n \n+    /*\n+     * Test enabling com.ibm.ws.logging.apps.write.json in bootstrap.properties\n+     */\n+    @Test\n+    public void testEnableAppsWriteJsonInProperties() throws Exception {\n+\n+        // Get the bootstrap.properties file and store the original content\n+        RemoteFile bootstrapFile = server.getServerBootstrapPropertiesFile();\n+        FileInputStream in = getFileInputStreamForRemoteFile(bootstrapFile);\n+        Properties initialBootstrapProps = loadProperties(in);\n+\n+        try {\n+            // Set maxFileSize to 100 in bootstrap.properties", "originalCommit": "0e751ce8ac0b5fade6da804578fb060afadde722", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1NDg1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r439154855", "bodyText": "comment doesn't match code", "author": "donbourne", "createdAt": "2020-06-12T01:07:41Z", "path": "dev/com.ibm.ws.logging.json_fat/fat/src/com/ibm/ws/logging/json/fat/JsonConfigBootstrapTest.java", "diffHunk": "@@ -281,6 +286,60 @@ public void testMaxFileSizeLevelInPropertiesXML() throws Exception {\n         }\n     }\n \n+    /*\n+     * Test enabling com.ibm.ws.logging.apps.write.json in bootstrap.properties\n+     */\n+    @Test\n+    public void testEnableAppsWriteJsonInProperties() throws Exception {\n+\n+        // Get the bootstrap.properties file and store the original content\n+        RemoteFile bootstrapFile = server.getServerBootstrapPropertiesFile();\n+        FileInputStream in = getFileInputStreamForRemoteFile(bootstrapFile);\n+        Properties initialBootstrapProps = loadProperties(in);\n+\n+        try {\n+            // Set maxFileSize to 100 in bootstrap.properties\n+            setInBootstrapPropertiesFile(bootstrapFile, \"com.ibm.ws.logging.apps.write.json\", \"true\");\n+            server.startServer();\n+            // Set maxFileSize to 1 in server.xml", "originalCommit": "0e751ce8ac0b5fade6da804578fb060afadde722", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d34ca67f416b982620ecd761d22f91ad84c9fec1", "url": "https://github.com/OpenLiberty/open-liberty/commit/d34ca67f416b982620ecd761d22f91ad84c9fec1", "message": "add FAT tests to test server.env and bootstrap.properties config of appsWriteJson", "committedDate": "2020-06-12T16:01:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzOTE4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r440239189", "bodyText": "this should be a static method", "author": "donbourne", "createdAt": "2020-06-15T14:59:08Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/JsonLogHandler.java", "diffHunk": "@@ -230,4 +230,9 @@ protected String getSourceNameFromDataObject(Object event) {\n         }\n     }\n \n+    protected boolean isJSON(String message) {", "originalCommit": "36cc28ebb64b0d298cc3da73afef4f8a9850edff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0MDM4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r440240385", "bodyText": "should this method be moved to JsonLogHandler?", "author": "donbourne", "createdAt": "2020-06-15T15:00:50Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/ConsoleLogHandler.java", "diffHunk": "@@ -234,6 +246,15 @@ public void setFormat(String format) {\n         this.format = format;\n     }\n \n+    /**\n+     * Set apps that write json to wrap or unwrap\n+     *\n+     * @param format the format to set (i.e. wrap, unwrap)\n+     */\n+    public void setAppsWriteJson(boolean appsWriteJson) {", "originalCommit": "36cc28ebb64b0d298cc3da73afef4f8a9850edff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0MDc3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r440240771", "bodyText": "should this be moved to JsonLogHandler?", "author": "donbourne", "createdAt": "2020-06-15T15:01:22Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/ConsoleLogHandler.java", "diffHunk": "@@ -39,6 +39,8 @@\n \n     private BaseTraceService baseTraceService = null;\n \n+    private boolean appsWriteJson = false;", "originalCommit": "36cc28ebb64b0d298cc3da73afef4f8a9850edff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3MjQ3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12357#discussion_r440272471", "bodyText": "was this file added by accident?", "author": "donbourne", "createdAt": "2020-06-15T15:46:43Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/JSONObject.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.collector;\n+\n+/**\n+ *\n+ */\n+public class JSONObject {\n+    private final boolean hasAnyFields = false;\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    // s - name:value, name:value, ...\n+//    public JSONObject() {\n+//\n+//    }\n+\n+    /**\n+     * Constructor for JSONObject\n+     * Initialize hasAnyFields to false\n+     * Initialize StringBuilder\n+     *\n+     */\n+\n+//    public void addField(String s) {\n+//        if (s == null) {\n+//            return;\n+//        }\n+//        setHasAnyFields();\n+//\n+//        //add the field to the JSON\n+//\n+//    }\n+//\n+//    //\n+//    public void addField(String name, String value, boolean jsonEscapeValue, boolean trim) {\n+//        if (name == null || value == null) {\n+//            return;\n+//        }\n+//        setHasAnyFields();\n+//    }\n+//\n+//    public void addField(String name, int value) {\n+//        if (name == null || value == null) {\n+//            return;\n+//        }\n+//        setHasAnyFields();\n+//        return;\n+//    }\n+//\n+//    public boolean addField(String name, boolean value) {\n+//        if (name == null || value == null) {\n+//            return;\n+//        }\n+//        setHasAnyFields();\n+//        return true;\n+//\n+//    }\n+//\n+//    public void addField(String name, long value) {\n+//        if (name == null || value == null) {\n+//            return;\n+//        }\n+//        setHasAnyFields();\n+//        return true;\n+//\n+//    }\n+//\n+//    //get current JSON log string\n+//    public StringBuilder getJSONString() {\n+//        return JSONBuilder;\n+//    }\n+//\n+//    private void setHasAnyFields() {\n+//        if (hasAnyFields) {\n+//            JSONBuilder.append(\",\");\n+//            hasAnyFields = true;\n+//        } else {\n+//            hasAnyFields = true;\n+//        }\n+//\n+//    }\n+\n+}", "originalCommit": "688cd38d242b3cc4beab4a0a81b8530ab45adb3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "68677f9b7e831c4d194c5e28f1ebee022c457e76", "url": "https://github.com/OpenLiberty/open-liberty/commit/68677f9b7e831c4d194c5e28f1ebee022c457e76", "message": "resolve merge conflicts", "committedDate": "2020-06-18T13:47:02Z", "type": "commit"}, {"oid": "174e58466aaae63df2158a1ca5c2fffbe45e8047", "url": "https://github.com/OpenLiberty/open-liberty/commit/174e58466aaae63df2158a1ca5c2fffbe45e8047", "message": "update appsWriteJson test", "committedDate": "2020-06-18T13:47:12Z", "type": "commit"}, {"oid": "ddf6531b2b616f9d18b846fbf1e8a812aa39017d", "url": "https://github.com/OpenLiberty/open-liberty/commit/ddf6531b2b616f9d18b846fbf1e8a812aa39017d", "message": "add FAT tests to test server.env and bootstrap.properties config of appsWriteJson", "committedDate": "2020-06-18T13:47:12Z", "type": "commit"}, {"oid": "8496d2ecccd0c5f52073ef6f115b5c137841caed", "url": "https://github.com/OpenLiberty/open-liberty/commit/8496d2ecccd0c5f52073ef6f115b5c137841caed", "message": "update comments for appsWriteJson", "committedDate": "2020-06-18T13:47:13Z", "type": "commit"}, {"oid": "b0496bf25d8d8bb626fe3aaba3a7d8669c8cde37", "url": "https://github.com/OpenLiberty/open-liberty/commit/b0496bf25d8d8bb626fe3aaba3a7d8669c8cde37", "message": "move setAppsWriteJson to JsonLogHandler", "committedDate": "2020-06-18T13:47:13Z", "type": "commit"}, {"oid": "1804b680e6bf0dbbe5bc4c2e235c3c9ca3f1ae27", "url": "https://github.com/OpenLiberty/open-liberty/commit/1804b680e6bf0dbbe5bc4c2e235c3c9ca3f1ae27", "message": "remove JSONObject.java", "committedDate": "2020-06-18T13:47:14Z", "type": "commit"}, {"oid": "1804b680e6bf0dbbe5bc4c2e235c3c9ca3f1ae27", "url": "https://github.com/OpenLiberty/open-liberty/commit/1804b680e6bf0dbbe5bc4c2e235c3c9ca3f1ae27", "message": "remove JSONObject.java", "committedDate": "2020-06-18T13:47:14Z", "type": "forcePushed"}]}