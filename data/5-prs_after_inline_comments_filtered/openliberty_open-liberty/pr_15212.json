{"pr_number": 15212, "pr_title": "Port batch test.dbservlet and jbatch_fat projects to open-liberty", "pr_createdAt": "2020-12-08T05:33:39Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/15212", "timeline": [{"oid": "6aaf0b20fa8add1b5ef2868ef8015a70e7f531ca", "url": "https://github.com/OpenLiberty/open-liberty/commit/6aaf0b20fa8add1b5ef2868ef8015a70e7f531ca", "message": "Port batch test.dbservlet and jbatch_fat projects to open-liberty\n  -Moves com.ibm.ws.jbatch.test.dbservlet project to com.ibm.ws.jbatch.common_fat\n  -Moves com.ibm.ws.jbatch_fat to com.ibm.ws.jbatch.open_fat\n  -Adds gradle targets to common_fat that build app archives\n  -Adds app utility class to common_util that shrinkwraps and hot-deploy app archives\n  -Adds gradle targets to open_fat to import sources and app archives from common_fat\n  -Modifies all open_fat tests to hot-deploy app archives\n  -Repeats jbatch.open_fat for ee9, only", "committedDate": "2020-12-08T20:37:47Z", "type": "forcePushed"}, {"oid": "96be571bde5970c369c50bbb9d7dc3fc71eae67e", "url": "https://github.com/OpenLiberty/open-liberty/commit/96be571bde5970c369c50bbb9d7dc3fc71eae67e", "message": "Port batch test.dbservlet and jbatch_fat projects to open-liberty\n  -Moves com.ibm.ws.jbatch.test.dbservlet project to com.ibm.ws.jbatch.common_fat\n  -Moves com.ibm.ws.jbatch_fat to com.ibm.ws.jbatch.open_fat\n  -Adds gradle targets to common_fat that build app archives\n  -Adds app utility class to common_util that shrinkwraps and hot-deploy app archives\n  -Adds gradle targets to open_fat to import sources and app archives from common_fat\n  -Modifies all open_fat tests to hot-deploy app archives\n  -Repeats jbatch.open_fat for ee9, only", "committedDate": "2020-12-09T00:33:42Z", "type": "forcePushed"}, {"oid": "3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "url": "https://github.com/OpenLiberty/open-liberty/commit/3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "message": "Port batch test.dbservlet and jbatch_fat projects to open-liberty\n  -Moves com.ibm.ws.jbatch.test.dbservlet project to com.ibm.ws.jbatch.common_fat\n  -Moves com.ibm.ws.jbatch_fat to com.ibm.ws.jbatch.open_fat\n  -Adds gradle targets to common_fat that build app archives\n  -Adds app utility class to common_util that shrinkwraps and hot-deploy app archives\n  -Adds gradle targets to open_fat to import sources and app archives from common_fat\n  -Modifies all open_fat tests to hot-deploy app archives\n  -Repeats jbatch.open_fat for ee9, only", "committedDate": "2020-12-09T16:40:18Z", "type": "commit"}, {"oid": "3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "url": "https://github.com/OpenLiberty/open-liberty/commit/3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "message": "Port batch test.dbservlet and jbatch_fat projects to open-liberty\n  -Moves com.ibm.ws.jbatch.test.dbservlet project to com.ibm.ws.jbatch.common_fat\n  -Moves com.ibm.ws.jbatch_fat to com.ibm.ws.jbatch.open_fat\n  -Adds gradle targets to common_fat that build app archives\n  -Adds app utility class to common_util that shrinkwraps and hot-deploy app archives\n  -Adds gradle targets to open_fat to import sources and app archives from common_fat\n  -Modifies all open_fat tests to hot-deploy app archives\n  -Repeats jbatch.open_fat for ee9, only", "committedDate": "2020-12-09T16:40:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNDg2Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15212#discussion_r539424863", "bodyText": "I'll need to go over this with you just so I fully understand it. The ShrinkHelper path is what I assumed we'd be using, but I'm not sure when you'd use a prebuilt app instead (and where it would be pre-built from).", "author": "cgianfra", "createdAt": "2020-12-09T15:53:43Z", "path": "dev/com.ibm.ws.jbatch.common_fat/src/com/ibm/ws/jbatch/test/BatchAppUtils.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *   IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jbatch.test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.Filters;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+\n+public class BatchAppUtils {\n+\n+    //////////\n+    // Methods to build application archives at runtime\n+\n+    static JavaArchive testUtilJar = null;\n+\n+    static JavaArchive getTestUtilJar() throws Exception {\n+        if (testUtilJar == null) {\n+            testUtilJar = ShrinkHelper.buildJavaArchiveNoResources(\"testutil.jar\",\n+                                               \"batch.fat.util\");\n+        }\n+        return testUtilJar;\n+    }\n+\n+    static JavaArchive commonUtilJar = null;\n+\n+    static JavaArchive getCommonUtilJar() throws Exception {\n+        if (commonUtilJar == null) {\n+            commonUtilJar = ShrinkHelper.buildJavaArchiveNoResources(\"commonUtil.jar\",\n+                                                 \"batch.fat.common.util\", \n+                                                 \"com.ibm.ws.jbatch.test\",\n+                                                 \"com.ibm.ws.jbatch.test.dbservlet\");\n+        }\n+        return commonUtilJar;\n+    }\n+\n+    static JavaArchive clientJar = null;\n+\n+    static JavaArchive getClientJar() throws Exception {\n+        if (clientJar == null) {\n+            clientJar = ShrinkHelper.buildJavaArchiveNoResources(\"com.ibm.ws.jbatch.test.dbservlet.client.jar\",\n+                                             \"com.ibm.ws.jbatch.test\",\n+                                             \"com.ibm.ws.jbatch.test.dbservlet\");\n+        }\n+        return clientJar;\n+    }\n+\n+    static WebArchive dbServletApp = null;\n+\n+    static WebArchive getDbServletAppWar() {\n+        if (dbServletApp == null) {\n+            dbServletApp = buildBatchWar(\"DbServletApp.war\",\n+                                   \"(.*)(DbServlet|ServerKillerServlet|StringUtils)(.*)\",  // include regex\n+                                   \"batch.fat.web\");\n+        }\n+        return dbServletApp;\n+    }\n+\n+    static WebArchive batchSecurityWar = null;\n+\n+    static WebArchive getBatchSecurityWar() {\n+        if (batchSecurityWar == null) {\n+            batchSecurityWar = buildBatchWar(\"batchSecurity.war\", \n+                                       null, \n+                                       \"batch.fat.artifacts\", \"batch.security\");\n+        }\n+        return batchSecurityWar;\n+    }\n+\n+    static WebArchive batchFATWar = null;\n+\n+    static WebArchive getBatchFATWar() throws Exception {\n+        if (batchFATWar == null) {\n+            batchFATWar = buildBatchWar(\"batchFAT.war\",\n+                                  null, \n+                                  \"batch.fat.artifacts\", \"batch.fat.cdi\", \"batch.fat.common\", \"batch.fat.web\", \"batch.fat.web.customlogic\",\n+                                  \"chunktests.artifacts\",\n+                                  \"processitem.artifacts\");\n+            batchFATWar.addAsLibrary(getTestUtilJar());\n+            batchFATWar.addAsLibrary(getCommonUtilJar());\n+        }\n+        return batchFATWar;\n+    }\n+\n+    static WebArchive bonusPayoutWar = null;\n+\n+    static WebArchive getBonusPayoutWar() throws Exception {\n+        if (bonusPayoutWar == null) {\n+            bonusPayoutWar = buildBatchWar(\"BonusPayout.war\", \n+                                     null,\n+                                     \"com.ibm.websphere.samples.batch.artifacts\",\n+                                     \"com.ibm.websphere.samples.batch.beans\",\n+                                     \"com.ibm.websphere.samples.batch.fat\",\n+                                     \"com.ibm.websphere.samples.batch.util\");\n+            bonusPayoutWar.addAsLibrary(getCommonUtilJar());\n+        }\n+        return bonusPayoutWar;\n+    }\n+\n+    static EnterpriseArchive bonusPayoutEAREar = null;\n+\n+    static EnterpriseArchive getBonusPayoutEAREar() throws Exception {\n+        if (bonusPayoutEAREar == null) {\n+            final String appName = \"BonusPayoutEAR.ear\";\n+            bonusPayoutEAREar = ShrinkWrap.create(EnterpriseArchive.class, appName);\n+            File appXml = new File(\"test-applications/\" + appName + \"/resources/META-INF/application.xml\");\n+            bonusPayoutEAREar.setApplicationXML(appXml);\n+            bonusPayoutEAREar.addAsModule(getBonusPayoutWar());\n+        }\n+        return bonusPayoutEAREar;\n+    }\n+\n+    /**\n+     * Build a Batch Web Application Archive.\n+     * @param appName The name of a web application archive file, including the .war extension\n+     * @param regex A regex pattern to precisely match paths names in packages to include in the web application.\n+     * @param packageNames A comma-delimited list of package paths to include in the web application.  \n+     *  All path names in each packages will be included unless further filtered by the regex pattern.\n+     */\n+    static WebArchive buildBatchWar(String appName,\n+                                     String regex,\n+                                     String... packageNames) {\n+\n+        WebArchive webApp = ShrinkWrap.create(WebArchive.class, appName);\n+        final boolean INCLUDE_SUBPKGS = false;  // Exclude subpackages\n+        if (regex == null) {\n+            webApp.addPackages(INCLUDE_SUBPKGS, packageNames); // Include all pkg paths\n+        } else {\n+            webApp.addPackages(INCLUDE_SUBPKGS, Filters.include(regex), packageNames);  // Include only pkg paths matching regex \n+        }\n+        // Web-inf resources\n+        File webInf = new File(\"test-applications/\" + appName + \"/resources/WEB-INF\");\n+        if (webInf.exists()) {\n+            for (File webInfElement : webInf.listFiles()) {\n+                if (!!!webInfElement.isDirectory()) { // Ignore classes subdir\n+                    webApp.addAsWebInfResource(webInfElement);\n+                }\n+            }\n+        }\n+        // Batch job definition files\n+        File webInfBatchJobs = new File(\"test-applications/\" + appName + \"/resources/WEB-INF/classes/META-INF/batch-jobs\");\n+        if (webInfBatchJobs.exists()) {\n+            for (File batchJob : webInfBatchJobs.listFiles()) {\n+                String target = \"classes/META-INF/batch-jobs/\" + batchJob.getName();\n+                webApp.addAsWebInfResource(batchJob, target);\n+            }\n+        }\n+        // Package properties\n+        File pkgProps = new File(\"test-applications/\" + appName + \"/package.properties\");\n+        if (pkgProps.exists()) {\n+            webApp.addAsWebResource(pkgProps);\n+        }\n+        // Readme\n+        File readme = new File(\"test-applications/\" + appName + \"/README.txt\");\n+        if (readme.exists()) {\n+            webApp.addAsWebResource(readme);\n+        }\n+\n+        return webApp;\n+    }\n+\n+    //////////\n+    // Methods to deploy applications\n+\n+    final static String PrebuiltAppArtifactPath = \"build/lib/test-application/\";  // Relative to autoFVT dir\n+\n+    public static final String USE_PREBUILT = \"USE_PREBUILT\";\n+\n+    static boolean usePrebuilt(String[] options) {\n+        return Arrays.asList(options).contains(USE_PREBUILT);\n+    }\n+\n+    static void addDropinPrebuilt(LibertyServer targetServer, String appName) throws Exception{\n+        targetServer.copyFileToLibertyServerRoot(PrebuiltAppArtifactPath, \"dropins\", appName);\n+        if (JakartaEE9Action.isActive()) {\n+            JakartaEE9Action.transformApp(Paths.get(targetServer.getServerRoot(), \"dropins\", appName));\n+        }\n+    }\n+\n+    public static void addDropinsDbServletAppWar(LibertyServer targetServer, String... options) throws Exception {\n+        if (usePrebuilt(options)) {\n+            addDropinPrebuilt(targetServer, \"DbServletApp.war\");\n+        } else {\n+            ShrinkHelper.exportToServer(targetServer, \"dropins\", getDbServletAppWar());\n+        }", "originalCommit": "96be571bde5970c369c50bbb9d7dc3fc71eae67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0ODgzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15212#discussion_r539448836", "bodyText": "Can remove these now or later", "author": "cgianfra", "createdAt": "2020-12-09T16:21:54Z", "path": "dev/com.ibm.ws.jbatch.open_fat/fat/src/batch/fat/junit/BatchNoSecurityTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package batch.fat.junit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.net.HttpURLConnection;\n+import java.nio.file.Paths;\n+\n+import javax.json.Json;\n+import javax.json.JsonObject;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import batch.fat.util.BatchFatUtils;\n+import batch.fat.util.JobServletClient;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import com.ibm.ws.jbatch.test.BatchAppUtils;\n+import com.ibm.ws.jbatch.test.FatUtils;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * \n+ * Test dynamic updates to JDBC config using various schemas and tablePrefixes.\n+ * \n+ */\n+@RunWith(FATRunner.class)\n+public class BatchNoSecurityTest {\n+\n+    protected static final LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.jbatch.nosecurity.fat\");\n+\n+    /**\n+     * Start the server and setup the DB.\n+     */\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+\n+        log(\"setup\", \"start server and execute DDLs\");\n+\n+        FatUtils.checkJava7();\n+\n+        BatchAppUtils.addDropinsBatchSecurityWar(server);\n+        BatchAppUtils.addDropinsDbServletAppWar(server);\n+        // TODO: Remove the following lines, which are obviated by addDropinsXxx()\n+        //if (JakartaEE9Action.isActive()) {\n+        //    JakartaEE9Action.transformApp(Paths.get(server.getServerRoot(), \"dropins\", \"batchSecurity.war\"));\n+        //    JakartaEE9Action.transformApp(Paths.get(server.getServerRoot(), \"dropins\", \"DbServletApp.war\"));\n+        //}", "originalCommit": "96be571bde5970c369c50bbb9d7dc3fc71eae67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1MTM0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15212#discussion_r539451347", "bodyText": "I had disabled this wait because when I was running the standard features and EE9 back to back, the second time around, the keys already existed so we didn't get the \"keys created\" message in the logs. Now that we're only running EE9, we should probably re-enable this.", "author": "cgianfra", "createdAt": "2020-12-09T16:24:51Z", "path": "dev/com.ibm.ws.jbatch.open_fat/fat/src/batch/fat/junit/BatchSecurityTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package batch.fat.junit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.BufferedReader;\n+import java.net.HttpURLConnection;\n+\n+import javax.json.Json;\n+import javax.json.JsonObject;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.ws.jbatch.test.BatchAppUtils;\n+import com.ibm.ws.jbatch.test.FatUtils;\n+\n+import batch.fat.util.BatchFATHelper;\n+import batch.fat.util.BatchFatUtils;\n+import batch.fat.util.JobServletClient;\n+import com.ibm.websphere.simplicity.log.Log;\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.HttpUtils;\n+import componenttest.topology.utils.HttpUtils.HTTPRequestMethod;\n+\n+/**\n+ *\n+ * Test dynamic updates to JDBC config using various schemas and tablePrefixes.\n+ *\n+ */\n+@RunWith(FATRunner.class)\n+public class BatchSecurityTest {\n+\n+    private static final Class testClass = BatchSecurityTest.class;\n+\n+    protected static final LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.jbatch.fat\");\n+\n+    /**\n+     * Start the server and setup the DB.\n+     */\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+\n+        log(\"setup\", \"start server and execute DDLs\");\n+\n+        FatUtils.checkJava7();\n+\n+        BatchAppUtils.addDropinsBatchSecurityWar(server);\n+\n+        // Start server\n+        BatchFATHelper.setConfig(\"BatchSecurity/server.xml\", testClass);\n+        server.startServer(\"BatchSecurityTest.log\");\n+        FatUtils.waitForSmarterPlanet(server);\n+        //FatUtils.waitForSSLKeyAndLTPAKey(server);", "originalCommit": "96be571bde5970c369c50bbb9d7dc3fc71eae67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1OTM1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15212#discussion_r539459353", "bodyText": "This test is pretty different from its CD-Open version, I'll have to figure out if it was a recent change that was missed based on when we started the port.", "author": "cgianfra", "createdAt": "2020-12-09T16:34:16Z", "path": "dev/com.ibm.ws.jbatch.open_fat/fat/src/batch/fat/junit/JPAPersistenceManagerImplTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *   IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package batch.fat.junit;\n+\n+import java.io.IOException;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.ws.jbatch.test.BatchAppUtils;\n+import com.ibm.ws.jbatch.test.FatUtils;\n+\n+import batch.fat.util.BatchFATHelper;\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JPAPersistenceManagerImplTest extends BatchFATHelper {", "originalCommit": "96be571bde5970c369c50bbb9d7dc3fc71eae67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTAzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15212#discussion_r539465035", "bodyText": "I don't think this is actually needed, but I'd have to test to be certain. I recall trying to solve an issue with this that turned out to be something else entirely. But this could be a future todo if it's working as-is.", "author": "cgianfra", "createdAt": "2020-12-09T16:40:53Z", "path": "dev/com.ibm.ws.jbatch.open_fat/fat/src/batch/fat/util/BatchFATHelper.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *   IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package batch.fat.util;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.rules.TestName;\n+\n+import com.ibm.websphere.simplicity.Machine;\n+import com.ibm.websphere.simplicity.OperatingSystem;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.common.internal.encoder.Base64Coder;\n+import com.ibm.ws.jbatch.test.dbservlet.DbServletClient;\n+\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.HttpUtils;\n+import componenttest.topology.utils.HttpUtils.HTTPRequestMethod;\n+\n+/**\n+ *\n+ */\n+public abstract class BatchFATHelper {\n+\n+    protected final String DFLT_CTX_ROOT = \"batchFAT\";\n+    public final static String DFLT_PERSISTENCE_DDL = \"common/batch-derby.ddl\";\n+    public final static String DFLT_SERVER_XML = \"common/server.xml\";\n+    public final static String DFLT_PERSISTENCE_JNDI = \"jdbc/batch\";\n+    public final static String DFLT_PERSISTENCE_SCHEMA = \"JBATCH\";\n+    public final static String DFLT_TABLE_PREFIX = \"\";\n+\n+    public static final String APP_OUT1 = \"APP.OUT1\";\n+\n+    public static final String SUCCESS_MESSAGE = \"TEST PASSED\";\n+    public static final String FAILED_MESSAGE = \"FAILED\";\n+    protected static final int TIMEOUT = 10;\n+\n+    private static String tmpDir = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+\n+    protected static final LibertyServer server = LibertyServerFactory.getLibertyServer(\"batchFAT\");\n+\n+    public String _testName = \"\";\n+\n+    protected final static String ADMIN_NAME = \"bob\";\n+    protected final static String ADMIN_PASSWORD = \"bobpwd\";\n+\n+    //Instance fields\n+    private final Map<String, String> adminHeaderMap = Collections.singletonMap(\"Authorization\", \"Basic \" + Base64Coder.base64Encode(ADMIN_NAME + \":\" + ADMIN_PASSWORD));\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @BeforeClass\n+    public static void setupForSyntheticJava6Test() {\n+    }\n+\n+    @Before\n+    public void setTestName() throws Exception {\n+        _testName = name.getMethodName();\n+        Log.info(this.getClass(), _testName, \"===== Starting test \" + _testName + \" =====\");\n+        if (_testName.endsWith(\"_EE9_FEATURES\")) {\n+            _testName = _testName.substring(0, _testName.indexOf(\"_EE9_FEATURES\"));\n+        }", "originalCommit": "96be571bde5970c369c50bbb9d7dc3fc71eae67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMzUxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15212#discussion_r539503515", "bodyText": "Another old change from my branch that can be reverted", "author": "cgianfra", "createdAt": "2020-12-09T17:30:07Z", "path": "dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java", "diffHunk": "@@ -282,8 +282,8 @@ public static void transformApp(Path appPath, Path newAppPath) {\n             args[0] = appPath.toAbsolutePath().toString(); // input\n             args[1] = outputPath.toAbsolutePath().toString(); // output\n \n-            args[2] = \"-q\"; // quiet output\n-\n+            //args[2] = \"-q\"; // quiet output\n+            args[2] = \"-v\";", "originalCommit": "3b496a59b2a667cb0c8d6bd862fe184b0525b79e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}