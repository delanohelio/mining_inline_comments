{"pr_number": 12714, "pr_title": "Rebalance MP Config FAT buckets", "pr_createdAt": "2020-06-19T16:41:28Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12714", "timeline": [{"oid": "a57a56190cf3c5eec04667f1796d3c97629c14ce", "url": "https://github.com/OpenLiberty/open-liberty/commit/a57a56190cf3c5eec04667f1796d3c97629c14ce", "message": "Rebalance MP Config FAT buckets", "committedDate": "2020-06-22T10:58:42Z", "type": "commit"}, {"oid": "11896a1351d22d7e17401d81019a7cc37f9e4d46", "url": "https://github.com/OpenLiberty/open-liberty/commit/11896a1351d22d7e17401d81019a7cc37f9e4d46", "message": "Fix server.xml", "committedDate": "2020-06-22T10:58:42Z", "type": "commit"}, {"oid": "11896a1351d22d7e17401d81019a7cc37f9e4d46", "url": "https://github.com/OpenLiberty/open-liberty/commit/11896a1351d22d7e17401d81019a7cc37f9e4d46", "message": "Fix server.xml", "committedDate": "2020-06-22T10:58:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODk0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12714#discussion_r443488942", "bodyText": "For consistency with other FatSuite classes, this could be commented with //LITE", "author": "Joseph-Cass", "createdAt": "2020-06-22T11:19:59Z", "path": "dev/com.ibm.ws.microprofile.config.1.2_fat/fat/src/com/ibm/ws/microprofile/config12/test/FATSuite.java", "diffHunk": "@@ -16,9 +16,7 @@\n \n @RunWith(Suite.class)\n @SuiteClasses({\n-                ConverterPriorityTest.class,\n-                TypeConverterTest.class,\n-                ImplicitConverterTest.class,\n+                Config12ConverterTests.class", "originalCommit": "11896a1351d22d7e17401d81019a7cc37f9e4d46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4OTQ0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12714#discussion_r443489442", "bodyText": "This is very picky, but there could be a space between the comment here", "author": "Joseph-Cass", "createdAt": "2020-06-22T11:21:05Z", "path": "dev/com.ibm.ws.microprofile.config.1.4_fat/fat/src/com/ibm/ws/microprofile/config14/test/FATSuite.java", "diffHunk": "@@ -16,9 +16,7 @@\n \n @RunWith(Suite.class)\n @SuiteClasses({\n-                CharacterInjectionTest.class, //LITE\n-                BadObserverTest.class, //FULL\n-                OptionalObserverTest.class //FULL\n+                Config14Tests.class//FULL", "originalCommit": "11896a1351d22d7e17401d81019a7cc37f9e4d46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDM3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12714#discussion_r443490371", "bodyText": "A space here would also be nice", "author": "Joseph-Cass", "createdAt": "2020-06-22T11:23:05Z", "path": "dev/com.ibm.ws.microprofile.config.1.4_fat/fat/src/com/ibm/ws/microprofile/config14/test/Config14Tests.java", "diffHunk": "@@ -22,40 +22,60 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n+import com.ibm.websphere.simplicity.PropertiesAsset;\n import com.ibm.websphere.simplicity.ShrinkHelper;\n import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n import com.ibm.ws.microprofile.config.fat.repeat.RepeatConfigActions;\n+import com.ibm.ws.microprofile.config.fat.repeat.RepeatConfigActions.Version;\n import com.ibm.ws.microprofile.config14.test.apps.badobserver.BadObserverServlet;\n+import com.ibm.ws.microprofile.config14.test.apps.characterInjection.CharacterInjectionServlet;\n+import com.ibm.ws.microprofile.config14.test.apps.optional_observer.OptionalObserverServlet;\n \n import componenttest.annotation.Server;\n import componenttest.annotation.TestServlet;\n+import componenttest.annotation.TestServlets;\n import componenttest.custom.junit.runner.FATRunner;\n-import componenttest.custom.junit.runner.Mode;\n-import componenttest.custom.junit.runner.Mode.TestMode;\n import componenttest.rules.repeater.RepeatTests;\n import componenttest.topology.impl.LibertyServer;\n import componenttest.topology.utils.FATServletClient;\n \n @RunWith(FATRunner.class)\n-@Mode(TestMode.FULL)\n-public class BadObserverTest extends FATServletClient {\n+public class Config14Tests extends FATServletClient {\n \n-    public static final String APP_NAME = \"badObserverApp\";\n+    public static final String BAD_OBSERVER_APP_NAME = \"badObserverApp\";\n+    public static final String CHAR_INJECTION_APP_NAME = \"characterInjectionApp\";\n+    public static final String OPTIONAL_OBSERVER_APP_NAME = \"optionalObserverApp\";\n     public static final String SERVER_NAME = \"Config14Server\";\n \n     @ClassRule\n-    public static RepeatTests r = RepeatConfigActions.repeatConfig14(SERVER_NAME);\n+    public static RepeatTests r = RepeatConfigActions.repeat(SERVER_NAME, Version.LATEST);\n \n     @Server(SERVER_NAME)\n-    @TestServlet(servlet = BadObserverServlet.class, contextRoot = APP_NAME)\n+    @TestServlets({\n+                    @TestServlet(servlet = BadObserverServlet.class, contextRoot = BAD_OBSERVER_APP_NAME),\n+                    @TestServlet(servlet = CharacterInjectionServlet.class, contextRoot = CHAR_INJECTION_APP_NAME),\n+                    @TestServlet(servlet = OptionalObserverServlet.class, contextRoot = OPTIONAL_OBSERVER_APP_NAME) })\n     public static LibertyServer server;\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n-        WebArchive war = ShrinkWrap.create(WebArchive.class, APP_NAME + \".war\")\n+        WebArchive war1 = ShrinkWrap.create(WebArchive.class, BAD_OBSERVER_APP_NAME + \".war\")\n                         .addPackages(true, BadObserverServlet.class.getPackage());\n \n-        ShrinkHelper.exportDropinAppToServer(server, war, DeployOptions.SERVER_ONLY);\n+        ShrinkHelper.exportDropinAppToServer(server, war1, DeployOptions.SERVER_ONLY);\n+\n+        PropertiesAsset config = new PropertiesAsset().addProperty(\"char1\", \"a\");\n+\n+        WebArchive war2 = ShrinkWrap.create(WebArchive.class, CHAR_INJECTION_APP_NAME + \".war\")\n+                        .addPackages(true, CharacterInjectionServlet.class.getPackage())\n+                        .addAsResource(config, \"META-INF/microprofile-config.properties\");\n+\n+        ShrinkHelper.exportDropinAppToServer(server, war2, DeployOptions.SERVER_ONLY);\n+\n+        WebArchive war3 = ShrinkWrap.create(WebArchive.class, OPTIONAL_OBSERVER_APP_NAME + \".war\")\n+                        .addPackages(true, OptionalObserverServlet.class.getPackage());\n+\n+        ShrinkHelper.exportDropinAppToServer(server, war3, DeployOptions.SERVER_ONLY);\n \n         server.startServer(true, false);//Don't validate, the app is going to throw a DeploymentException", "originalCommit": "11896a1351d22d7e17401d81019a7cc37f9e4d46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTA2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12714#discussion_r443491064", "bodyText": "Is this correct? I know LATEST covers this option, but should CONFIG14_EE8 be defined if it does nothing?", "author": "Joseph-Cass", "createdAt": "2020-06-22T11:24:42Z", "path": "dev/com.ibm.ws.microprofile.config_repeat_tests/src/com/ibm/ws/microprofile/config/fat/repeat/RepeatConfigActions.java", "diffHunk": "@@ -10,121 +10,53 @@\n  *******************************************************************************/\n package com.ibm.ws.microprofile.config.fat.repeat;\n \n-import componenttest.custom.junit.runner.Mode.TestMode;\n-import componenttest.custom.junit.runner.TestModeFilter;\n+import componenttest.rules.repeater.FeatureReplacementAction;\n import componenttest.rules.repeater.RepeatTests;\n \n /**\n  *\n  */\n public class RepeatConfigActions {\n \n-    /**\n-     * Get the RepeatTests actions for Config 1.1 tests. This is the same as for Config 1.2 tests but\n-     * if the test mode is FULL then it also adds Config 1.1 + EE7 and Config 1.1 + EE8.\n-     *\n-     * @param server The name of the test server\n-     * @return The RepeatTests for Config 1.1 tests\n-     */\n-    public static RepeatTests repeatConfig11(String server) {\n-        RepeatTests r = repeatConfig12(server);\n-        if (TestModeFilter.shouldRun(TestMode.FULL)) {\n-            r = r.andWith(new RepeatConfig11EE7(server));\n-            r = r.andWith(new RepeatConfig11EE8(server));\n+    public enum Version {\n+        CONFIG11_EE7, CONFIG11_EE8, CONFIG12_EE7, CONFIG12_EE8, CONFIG13_EE7, CONFIG13_EE8, CONFIG14_EE7, CONFIG14_EE8, CONFIG20_EE8, LATEST\n+    };\n+\n+    public static FeatureReplacementAction getAction(Version version, String server) {\n+        switch (version) {\n+            case CONFIG11_EE7:\n+                return new RepeatConfig11EE7(server);\n+            case CONFIG11_EE8:\n+                return new RepeatConfig11EE8(server);\n+            case CONFIG12_EE7:\n+                return new RepeatConfig12EE7(server);\n+            case CONFIG12_EE8:\n+                return new RepeatConfig12EE8(server);\n+            case CONFIG13_EE7:\n+                return new RepeatConfig13EE7(server);\n+            case CONFIG13_EE8:\n+                return new RepeatConfig13EE8(server);\n+            case CONFIG14_EE7:\n+                return new RepeatConfig14EE7(server);\n+            case CONFIG14_EE8:", "originalCommit": "11896a1351d22d7e17401d81019a7cc37f9e4d46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMDAyMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12714#discussion_r443500022", "bodyText": "Okay, I see CONFIG14_EE8  will just do whatever LATEST does, but I think CONFIG14_EE8 should have return new RepeatConfig14EE8(server); for readability and maintainability", "author": "Joseph-Cass", "createdAt": "2020-06-22T11:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTA2NA=="}], "type": "inlineReview"}, {"oid": "af9aa3a535dde5b569480d855f931ee927ef2907", "url": "https://github.com/OpenLiberty/open-liberty/commit/af9aa3a535dde5b569480d855f931ee927ef2907", "message": "Review updates", "committedDate": "2020-06-22T11:58:27Z", "type": "commit"}]}