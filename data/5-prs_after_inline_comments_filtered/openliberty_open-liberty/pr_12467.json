{"pr_number": 12467, "pr_title": "Response header configuration", "pr_createdAt": "2020-06-03T11:16:33Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12467", "timeline": [{"oid": "bbcb0dcd21e0de24e39d63066a40630322fd5185", "url": "https://github.com/OpenLiberty/open-liberty/commit/bbcb0dcd21e0de24e39d63066a40630322fd5185", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-06-05T18:25:51Z", "type": "forcePushed"}, {"oid": "d5fac1091042295d1cc4628c9aae1f204e59ffbf", "url": "https://github.com/OpenLiberty/open-liberty/commit/d5fac1091042295d1cc4628c9aae1f204e59ffbf", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-06T10:15:21Z", "type": "forcePushed"}, {"oid": "aa902b0ca812b533122f8c35256e6ae349de27d8", "url": "https://github.com/OpenLiberty/open-liberty/commit/aa902b0ca812b533122f8c35256e6ae349de27d8", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-06T10:22:22Z", "type": "forcePushed"}, {"oid": "94143b71599619cf825e8fa8c7562d40e2acfb38", "url": "https://github.com/OpenLiberty/open-liberty/commit/94143b71599619cf825e8fa8c7562d40e2acfb38", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-06T10:25:38Z", "type": "forcePushed"}, {"oid": "355b110f7b0575593f36d64267c87af16f296622", "url": "https://github.com/OpenLiberty/open-liberty/commit/355b110f7b0575593f36d64267c87af16f296622", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-07T11:57:48Z", "type": "forcePushed"}, {"oid": "133520c79396ac963cc21568fa42f4dba8f705fd", "url": "https://github.com/OpenLiberty/open-liberty/commit/133520c79396ac963cc21568fa42f4dba8f705fd", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-07T12:01:37Z", "type": "forcePushed"}, {"oid": "4befd76f8769f59366df508297245b4eaabc5c8c", "url": "https://github.com/OpenLiberty/open-liberty/commit/4befd76f8769f59366df508297245b4eaabc5c8c", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-09T17:01:19Z", "type": "forcePushed"}, {"oid": "a23b523d02af8bb8f519de3cc21b66f7d81d0df0", "url": "https://github.com/OpenLiberty/open-liberty/commit/a23b523d02af8bb8f519de3cc21b66f7d81d0df0", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-09T17:05:18Z", "type": "forcePushed"}, {"oid": "6c1b196c2d13057988d3057e72add0a7da2e2424", "url": "https://github.com/OpenLiberty/open-liberty/commit/6c1b196c2d13057988d3057e72add0a7da2e2424", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-09T17:08:21Z", "type": "forcePushed"}, {"oid": "1cc7c44ccab74302b414ad722ba1b1635563a244", "url": "https://github.com/OpenLiberty/open-liberty/commit/1cc7c44ccab74302b414ad722ba1b1635563a244", "message": "Initial commit: response header configuration support core code", "committedDate": "2020-10-09T17:11:44Z", "type": "forcePushed"}, {"oid": "d3d5ab5c68e97fe5a049d6af68b6cb1e2051b385", "url": "https://github.com/OpenLiberty/open-liberty/commit/d3d5ab5c68e97fe5a049d6af68b6cb1e2051b385", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-04-08T17:12:09Z", "type": "forcePushed"}, {"oid": "268a181f4078570cfe90dc99bbd46834f436895f", "url": "https://github.com/OpenLiberty/open-liberty/commit/268a181f4078570cfe90dc99bbd46834f436895f", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-04T01:25:17Z", "type": "forcePushed"}, {"oid": "e6e593984cf1f6c83a683cc76ea29edc3703a359", "url": "https://github.com/OpenLiberty/open-liberty/commit/e6e593984cf1f6c83a683cc76ea29edc3703a359", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-04T04:49:26Z", "type": "forcePushed"}, {"oid": "8b718b109aa7bcac7fe471a9c98ad6f493b32144", "url": "https://github.com/OpenLiberty/open-liberty/commit/8b718b109aa7bcac7fe471a9c98ad6f493b32144", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-04T06:20:26Z", "type": "forcePushed"}, {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "url": "https://github.com/OpenLiberty/open-liberty/commit/b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-04T06:26:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxNzAzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r682717033", "bodyText": "I'm not a huge fan of having the word feature in this naming convention. Can you work to come up with a better name here?", "author": "pnicolucci", "createdAt": "2021-08-04T15:18:50Z", "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpConfigConstants.java", "diffHunk": "@@ -437,6 +437,16 @@ private HttpConfigConstants() {\n \n     public static final String WILDCARD_CHAR = \"*\";\n \n+    public static final String PROPNAME_HEADERS_FEATURE = \"headersInternal\";\n+", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTExNjgyOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685116828", "bodyText": "Changed to PROPNAME_RESPONSE_HEADERS", "author": "mrsaldana", "createdAt": "2021-08-09T11:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxNzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2NzU4Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684867582", "bodyText": "Any reason you use append here rather than add?", "author": "pnicolucci", "createdAt": "2021-08-09T01:59:52Z", "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpResponseMessageImpl.java", "diffHunk": "@@ -711,6 +712,36 @@ public void headerComplianceCheck() throws MessageSentException {\n             updateCacheControl();\n         }\n \n+        if (getServiceContext().getHttpConfig().useHeadersConfiguration()) {\n+            //Add all headers configured through the ADD configuration option\n+            for (List<Map.Entry<String, String>> headers : getServiceContext().getHttpConfig().getConfiguredHeadersToAppend().values()) {", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTExODgyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685118829", "bodyText": "The idea was to match the appendHeader() API, but I have no objection for it to be inline with the configuration add format.", "author": "mrsaldana", "createdAt": "2021-08-09T11:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2NzU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2Nzc2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684867764", "bodyText": "Please fix the formatting here.", "author": "pnicolucci", "createdAt": "2021-08-09T02:00:55Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/FATSuite.java", "diffHunk": "@@ -87,7 +88,8 @@\n                 WCSendRedirectRelativeURLTrue.class,\n                 WCSendRedirectRelativeURLDefault.class,\n                 WC5GetContextPath.class,\n-                WCSCIHandlesTypesTest.class\n+                WCSCIHandlesTypesTest.class,\n+\t\t WCResponseHeadersTest.class", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MjYzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685182633", "bodyText": "Done", "author": "mrsaldana", "createdAt": "2021-08-09T13:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2Nzc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODEwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868102", "bodyText": "Add check to ensure savedConfig isn't null? What happens if it is null?", "author": "pnicolucci", "createdAt": "2021-08-09T02:02:28Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEzOTc3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685139777", "bodyText": "savedConfig is initialized by the @BeforeClass , where the server object is presumed to had already been initialized by the  runtime @Server annotation . I don't believe this should ever be null since it remains unchanged throughout the lifecycle of the test. If it were null, then each test would likely fail due to whatever configuration the server had on the previous test run. The sample documentation on the git wiki didn't suggest adding null checks on the @BeforeClass for the server, but it is a simple/quick check that. I'll add them, but I almost prefer the test fail and we find an exception that says that the setup failed, than it fail later on using a bad configuration and we end up having to debug to find that the issue wasn't in the test but on the configuration.\nIt probably will be fairly obvious with how the tracing is setup, but some additional thoughts to consider.", "author": "mrsaldana", "createdAt": "2021-08-09T12:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTM2MzMxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685363310", "bodyText": "If you think you're better off without the null check I don't have any objection given the details you've provided.", "author": "pnicolucci", "createdAt": "2021-08-09T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODI4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868287", "bodyText": "Perhaps use a methodName variable here to ensure the correct name. We should update this at the very least to actually match the method name we're in setUpBeforeEachTest.", "author": "pnicolucci", "createdAt": "2021-08-09T02:03:33Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MDAyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685180029", "bodyText": "Done, thanks for catching that one", "author": "mrsaldana", "createdAt": "2021-08-09T13:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODM5Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868392", "bodyText": "Can we add comments here to detail what these warnings are? It makes it easier in the future to know why we're allowing these.", "author": "pnicolucci", "createdAt": "2021-08-09T02:04:10Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MDE4Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685180183", "bodyText": "Done", "author": "mrsaldana", "createdAt": "2021-08-09T13:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODc4NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868784", "bodyText": "In these start server calls do we need to ensure we're waiting for the config updates to complete? Something like:  server.waitForConfigUpdateInLogUsingMark(Collections.singleton(appName), false/true, \"CWWKT0016I:.*myAppName.*\");", "author": "pnicolucci", "createdAt": "2021-08-09T02:06:53Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE1NzUzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685157538", "bodyText": "I don't believe this would work since it is not updating the config on a running server, rather starting one up that is shutdown. The application is verified to be started through the startServer API, which does a startServerAndValidate with validateApps set to true by default. As such, I don't think we need to wait additional time after the startServer call returns.", "author": "mrsaldana", "createdAt": "2021-08-09T12:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2OTExMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684869110", "bodyText": "Usually we add a server != null check here as well.", "author": "pnicolucci", "createdAt": "2021-08-09T02:08:29Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);\n+        }\n+        restoreSavedConfig = true;\n+        if(failure !=null)\n+            throw failure;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+\n+         //Update the bootstrap to include symbolic default variables for\n+        //the <header> attributes. Will be used in testHeaderBootstrapping()\n+        writeBootstrapProperty(server, \"add.header\", \"bootstrappedAddHeader:addHeaderValue\");\n+        writeBootstrapProperty(server, \"set.header\", \"bootstrappedSetHeader:setHeaderValue\");\n+        writeBootstrapProperty(server, \"set.if.missing.header\", \"bootstrappedSetIfMissingHeader:setIfMissingValue\");\n+        writeBootstrapProperty(server, \"remove.header\", \"customHeader\");\n+\n+\n+        //Create the ResponseHeadersTest.war application\n+        ShrinkHelper.defaultDropinApp(server, APP_NAME + \".war\", \"headers.servlets\");\n+        savedConfig = server.getServerConfiguration().clone(); \n+        server.setConfigUpdateTimeout(30*1000); \n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        //Stop the server\n+        if (server != null ) {\n+\n+            //Allow the warning messages we may have generated on purpose\n+            //\n+            // W CWWKT0042W: An empty header name was found when the {0} configuration was parsed. This value is ignored.\n+            //\n+            // W CWWKT0043W: A duplicate header name was found in the [{0}] header using the {1} configuration. All configurations\n+            // for the [{0}] header are ignored. Any header that is defined by the remove, add, set, or setIfMissing configurations\n+            //must be unique across all configurations.\n+            //\n+            // W CWWKT0044W: The [{0}] header, which is marked as a duplicate header name, was found in the {1} configuration.\n+            // The [{0}] header is ignored. Any header that is defined by the {1} configuration must contain unique header names.\n+            if(server.isStarted())\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEyNzIzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685127237", "bodyText": "These lines are already wrapped by a if (server !=null) block, around line 123 (give or take a few lines since it might be adjusted due to the other suggested changes.", "author": "mrsaldana", "createdAt": "2021-08-09T11:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2OTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg3MDI1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684870251", "bodyText": "Can this be removed?", "author": "pnicolucci", "createdAt": "2021-08-09T02:14:34Z", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);\n+        }\n+        restoreSavedConfig = true;\n+        if(failure !=null)\n+            throw failure;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+\n+         //Update the bootstrap to include symbolic default variables for\n+        //the <header> attributes. Will be used in testHeaderBootstrapping()\n+        writeBootstrapProperty(server, \"add.header\", \"bootstrappedAddHeader:addHeaderValue\");\n+        writeBootstrapProperty(server, \"set.header\", \"bootstrappedSetHeader:setHeaderValue\");\n+        writeBootstrapProperty(server, \"set.if.missing.header\", \"bootstrappedSetIfMissingHeader:setIfMissingValue\");\n+        writeBootstrapProperty(server, \"remove.header\", \"customHeader\");\n+\n+\n+        //Create the ResponseHeadersTest.war application\n+        ShrinkHelper.defaultDropinApp(server, APP_NAME + \".war\", \"headers.servlets\");\n+        savedConfig = server.getServerConfiguration().clone(); \n+        server.setConfigUpdateTimeout(30*1000); \n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        //Stop the server\n+        if (server != null ) {\n+\n+            //Allow the warning messages we may have generated on purpose\n+            //\n+            // W CWWKT0042W: An empty header name was found when the {0} configuration was parsed. This value is ignored.\n+            //\n+            // W CWWKT0043W: A duplicate header name was found in the [{0}] header using the {1} configuration. All configurations\n+            // for the [{0}] header are ignored. Any header that is defined by the remove, add, set, or setIfMissing configurations\n+            //must be unique across all configurations.\n+            //\n+            // W CWWKT0044W: The [{0}] header, which is marked as a duplicate header name, was found in the {1} configuration.\n+            // The [{0}] header is ignored. Any header that is defined by the {1} configuration must contain unique header names.\n+            if(server.isStarted())\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            server.updateServerConfiguration(savedConfig);\n+        }\n+        \n+    }\n+\n+    /**\n+     * Execute a request/response exchange to the given URL. If the status code is OK (200), return\n+     * all headers in the response so that the tests can evaluate that all conditions are met.\n+     *\n+     * @param url\n+     * @return\n+     */\n+    private static Header[] executeExchangeAndGetHeaders(String url, String testName) throws Exception {\n+\n+        Log.info(ME, testName, \"url: \" + url);\n+\n+        CloseableHttpClient client = null;\n+        CloseableHttpResponse response = null;\n+        HttpGet getMethod = new HttpGet(url);\n+        Header[] headers = null;\n+\n+        try {\n+            client = HttpClientBuilder.create().build();\n+            response = client.execute(getMethod);\n+            String responseText = EntityUtils.toString(response.getEntity());\n+\n+            Log.info(ME, testName, \"\\n\" + \"Response Text:\");\n+            Log.info(ME, testName, \"\\n\" + responseText);\n+\n+            assertEquals(\"The expected status code [200] was not returned\",\n+                                 200, response.getCode());\n+\n+            headers = response.getHeaders();\n+\n+        } finally {\n+            if (client != null)\n+                client.close();\n+            if (response != null)\n+                response.close();\n+            \n+            \n+        \n+        }\n+\n+        return headers;\n+\n+    }\n+\n+    /**\n+     * Utility method to format the various URLs used during the tests\n+     *\n+     * @param path\n+     * @return\n+     */\n+    private String generateURL(String path) {\n+        if (!path.startsWith(\"/\")) {\n+            path = \"/\" + path;\n+        }\n+        return \"http://\" + server.getHostname() + \":\" + server.getHttpDefaultPort() + \"/\" + APP_NAME + path;\n+    }\n+\n+    /**\n+     * Utility method to write a key-value propery to the server's boostrap.properties file\n+     * \n+     *  @param server - server instance\n+     *  @param property - name of the property to add\n+     *  @param value - value of the property to add\n+     */\n+    private static void writeBootstrapProperty(LibertyServer server, String property, String value) throws Exception{\n+\n+        if (property == null || value== null) return;\n+\n+        String bootstrapFilePath = serverFileUtils.getServerFileLoc(server)+\"/bootstrap.properties\";\n+        FileWriter writer = new FileWriter(bootstrapFilePath, true);\n+\n+        writer.append(System.getProperty(\"line.separator\"));\n+        writer.append(property+\"=\"+value);\n+        writer.append(System.getProperty(\"line.separator\"));\n+        \n+        writer.close();\n+    }\n+\n+\n+\n+\n+\n+    /**\n+    *  Header Symbolic Configuration\n+    * \n+    *  Test that the <headers> element can be configured symbolically.\n+    *  A single bootstrap property for each of the <headers> attributes is \n+    *  writen to the boostrap.properties file when the setUp method is first\n+    *  ran. This test will use those property names within each attribute \n+    *  configuration and test that the response contains all values. \n+    * \n+    *  To test the \"remove\" option, ${remove.header} will map to the header\n+    *  [customHeader], which is added by the application by means of the\n+    *  \"testCondition=singleHeader\" parameter. \n+    * \n+    *  The application will also add the header [appVerificationHeader]\n+    * \n+    *  Expectations: \n+    *    Present headers - [bootstrappedAddHeader:addHeaderValue], \n+    *       [bootstrappedSetHeader:setHeaderValue],\n+    *       [bootstrappedSetIfMissingHeader:setIfMissingValue], \n+    *       [appVerificationHeader]\n+    *    Missing headers - [customHeader]\n+  \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderBootstrapping() throws Exception {\n+\n+        String testName = \"testHeaderBootstrapping\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"${add.header}\");\n+        httpEndpoint.getHeaders().setSet(\"${set.header}\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"${set.if.missing.header}\");\n+        httpEndpoint.getHeaders().setRemove(\"${remove.header}\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"bootstrappedAddHeader\", \"addHeaderValue\");\n+        expectations.expectPresent(\"bootstrappedSetHeader\", \"setHeaderValue\");\n+        expectations.expectPresent(\"bootstrappedSetIfMissingHeader\", \"setIfMissingValue\");\n+        expectations.expectPresent(\"appVerificationHeader\", null);\n+        expectations.expectMissing(\"customHeader\");\n+        \n+        expectations.evaluate(headers);\n+\n+    }\n+\n+\n+  \n+\n+    /**\n+    *  Header Misconfiguration Series Test 1/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing empty header names. It is expected that the 'empty header name'\n+    *  CWWKT0042W message will logged on all four configurations. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader].\n+    * \n+    *  Expected present headers: [addHeader: addValue], [addHeader: addValue2], [setHeader], [setIfMissingHeader], \n+    *       [appVerificationHeader]\n+    *  Expected removed header - [customHeader]  \n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_EmptyHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_EmptyHeaderName\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0042W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\":testValue, addHeader:addValue, addHeader:addValue2\");\n+        httpEndpoint.getHeaders().setSet(\":testValue, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\":testValue, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"customHeader, \");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected four occurances of the empty header string but found: \" + logs.size(), logs.size()==4);\n+\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\", \"addValue\");\n+        expectations.expectPresent(\"addHeader\", \"addValue2\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *  Header Misconfiguration Series Test 2/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing duplicate header names. It is expected that the 'duplicate header \n+    *  name' CWWKT0043W message will logged three times. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader]. \n+    * \n+    *  Expected bad headers: [badHeader, anotherBadHeader, yetAnotherBadHeader]\n+    *  Expected headers: [addHeader:addValue, addHeader:addValue2 setHeader, \n+    *       setIfMissingHeader, appVerificationHeader]\n+    *  Expected removed header - [customHeader] - from servlet. \n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_DuplicateHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_DuplicateHeaderName\";\n+        restoreSavedConfig = true;\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String stringToSearchFor = \"CWWKT0043W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+\n+        httpEndpoint.getHeaders().setAdd(\"addHeader: addValue, addHeader:addValue2, badHeader\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, anotherBadHeader, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"anotherBadHeader, yetAnotherBadHeader, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"yetAnotherBadHeader, customHeader\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected three occurances of the duplicate header name string but found: \" + logs.size(), logs.size()==3);\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\", \"addValue\");\n+        expectations.expectPresent(\"addHeader\", \"addValue2\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *  Header Misconfiguration Series Test 3/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing previously duplicated header names. That is, it will provide \n+    *  three times the same header name. It is expected that the 'previously duplicated \n+    *  header name' CWWKT0044W message will logged two times. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader].\n+    * \n+    *  Bad Headers: [badHeader, anotherBadHeader]\n+    *  Expected present headers: [addHeader, setHeader, setIfMissingHeader]\n+    *  Expected removed header - [customHeader]\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_PreviouslyDuplicatedHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_PreviouslyDuplicatedHeaderName\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0044W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"badHeader, addHeader\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, badHeader, anotherBadHeader, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"anotherBadHeader, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"anotherBadHeader, customHeader\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected two occurances of the previously duplicated header string but found: \" + logs.size(), logs.size()==2);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+  \n+    }\n+\n+    /**\n+    * \n+    * Header Misconfiguration Series Test 4/4\n+    * \n+    *  Tests that the configurations of the <headers> element are case insensitive.\n+    * \n+    *  The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    *  This will also add a verification header, \"appVerificationHeader\". \n+    * \n+    *  The \"add\" configuration can add multiple of the same name header, so will be ignored\n+    *  for the purpose of this test, as casing is irrelevant.\n+    * \n+    *  Test Phase 1: Misconfiguration case-insensitive detection\n+    * \n+    *       This test will misconfigure the \"set\", \"setIfMissing\", and \"remove\" attributes with\n+    *       the same header name with different casing. It expected that this will result with \n+    *       the CWWKT0044W \"previously detected duplicate header\" message.  \n+    * \n+    * \n+    *  Test Phase 2: Case Insensitivity when <headers> configuration is consumed by transport\n+    * \n+    *       The configuration will test the \"set\" attribute by configuring the servlet header in all \n+    *       capital letters: \"CUSTOMHEADER: testValue\". It is expected that the resulting response\n+    *       header that is written will be configured \"set\" header. \n+    * \n+    *       The \"setIfMissing\" attribute will be tested by setting the verification header in all \n+    *       capital letters: \"APPVERIFICATIONHEADER: badValue\". This header is added by the application\n+    *       with no value, so it is expected that no value is found for it.\n+    * \n+    *       The \"remove\" attribute will be tested by configuring the date header in all capital \n+    *       letters: \"DATE\". The response is expected to not contain a \"Date\" header.  \n+    * \n+    *  Expected bad headers: [badHeader]\n+    *  Expected headers: [CUSTOMHEADER: testValue, appVerificationHeader]\n+    *  Expected removed header - [Date]\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_CaseInsensitivity() throws Exception{\n+        String testName = \"testHeaderCaseInsensitivity\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0044W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, CUSTOMHEADER: testValue\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"BaDHeAdEr, APPVERIFICATIONHEADER: testValue\");\n+        httpEndpoint.getHeaders().setRemove(\"BADHEADER, DATE\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected one occurances of the previously duplicated header string but found: \" + logs.size(), logs.size()==1);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"date\");\n+\n+        expectations.evaluate(headers);\n+\n+    }\n+\n+    \n+\n+    /**\n+    * \n+    * Simple Configuration Series 1/4: \"add\" header\n+    * \n+    * Tests that the \"add\" configuration of the <headers> element is able \n+    * to properly append multiple headers to the response that are configured\n+    * with the same name.   \n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [customHeader:testValue2]\n+    *       [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testAddHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testAddHeader\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"customHeader:testValue, customHeader:testValue2\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"customHeader\", \"testValue2\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers); \n+    }\n+\n+\n+    /**\n+    * \n+    * Simple Configuration Series 2/4: \"set\" attribute\n+    * \n+    * Tests that the \"set\" configuration of the <headers> element is able \n+    * to properly set the configured header on a response\n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */    \n+    @Test\n+    public void testSetHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testSetHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSet(\"customHeader:testValue\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);   \n+ \n+    }\n+\n+    /**\n+    * \n+    * Simple Configuration Series 3/4: \"setIfMissing\" attribute\n+    * \n+    * Tests that the \"setIfMissing\" configuration of the <headers> element is able \n+    * to properly set the configured header on a response when no other header \n+    * of the same name is present.\n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */  \n+    @Test\n+    public void testSetIfMissingHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testSetIfMissingHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSetIfMissing(\"customHeader:testValue\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);     \n+ \n+    }\n+\n+    /**\n+    * \n+    * Simple Configuration Series 4/4: \"remove\" attribute\n+    * \n+    * Tests that the \"remove\" configuration of the <headers> element is able \n+    * to properly remove the configured header from a response. \n+    * \n+    * The configuration will be set to remove any header whose name is [customHeader].\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * Expected headers: [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */  \n+     @Test\n+    public void testRemoveHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testRemoveHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setRemove(\"customHeader\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            \n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"appVerificationHeader\");\n+            expectations.expectMissing(\"customHeader\");\n+\n+            expectations.evaluate(headers);    \n+ \n+    }\n+\n+    /**\n+    * \n+    * Tests that the \"add\" configuration of the <headers> element is able \n+    * to properly append headers to the response without overwritting \n+    * existing headers that share the same name. \n+    * \n+    * The \"testCondition=singleHeader\" request parameter will result in the \n+    * application adding the header [customHeader:appValue]. \n+    * \n+    * The application will also add the [appVerificationHeader] header to \n+    * the response. \n+    * \n+    * Expected headers: [customHeader:testValue], [customHeader:appValue]\n+    *       [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testAddHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testAddHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+        boolean conditionMet2 = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"customHeader\", \"appValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *\n+    * Tests that the \"set\" configuration of the <headers> element is able \n+    * to properly overwrite an exisiting header that shares its name with a configured\n+    * \"set\" header. \n+    * \n+    * \n+    * The configuration will define the header [customHeader:testValue] on the \n+    * on the \"set\" attribute.\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * It is expected that the the app [customHeader] be overwritten by the configuration.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testSetHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testSetHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSet(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\", \"appValue\");\n+\n+        expectations.evaluate(headers); \n+    \n+    }\n+\n+\n+    \n+    /**\n+    *\n+    * Tests that the \"setIfMissing\" configuration of the <headers> element does not \n+    * overwrite an exisiting header that shares its name with a configured\n+    * \"setIfMissing\" header. \n+    * \n+    * \n+    * The configuration will define the header [customHeader:testValue] on the \n+    * on the \"setIfMissing\" attribute.\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * It is expected that the the app [customHeader] will not be overwritten by the configuration.\n+    * \n+    * Expected headers: [customHeader:appValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testSetIfMissingHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testSetIfMissingHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"appValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\", \"testValue\");\n+\n+        expectations.evaluate(headers); \n+    \n+    \n+    }\n+\n+\n+    /**\n+    *\n+    * Tests that the \"remove\" configuration of the <headers> element removes\n+    * multiple all instances of the defined header name.\n+    * \n+    * The configuration will use the \"add\" attribute to define two headers with the same name:\n+    * [customConfigHeader: testValue] and [customConfigHeader: testValue2]. \n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=multipleHeaders], \n+    * which will add the response headers: \"customHeader:appValue\" and \"customHeader:appValue2\". \n+    * The application will also add the [appVerificationHeader] header to the response. No further \n+    * application interaction is expected.\n+    * \n+    * \n+    * Expected present headers: [appVerificationHeader]\n+    * Expected missing headers: [customConfigHeader], [customHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testRemoveMultipleAppHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=multipleHeaders\");\n+            String testName = \"testRemoveMultipleAppHeaders\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"customConfigHeader:testValue, customConfigHeader:testValue2\");\n+            httpEndpoint.getHeaders().setRemove(\"customHeader, customConfigHeader\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"appVerificationHeader\");\n+            expectations.expectMissing(\"customConfigHeader\");\n+            expectations.expectMissing(\"customHeader\");\n+\n+            expectations.evaluate(headers); \n+    }\n+\n+    /**\n+    * \n+    * Cookie Header Test Series Test 1/4 : \"add\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader]. \n+    *  \n+    *  This test specifically tests the \"add\" configuration with a \"set-cookie: oatmeal\" header. \n+    *  It expected that the response will write out all three chocolate, vanilla, and oatmeal cookies in the \n+    *  form of \"set-cookie\" headers. \n+    * \n+    *  Expected headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar], \n+    *       [set-cookie: oatmeal], [appVerificationHeader]\n+    * \n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Add() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Add\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+            boolean appVerified = false;\n+\n+            boolean vanillaFound = false; \n+            boolean chocolateFound = false; \n+            boolean oatmealFound = false;\n+\n+\n+            //FIRST REQUEST - <add> configuration\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectPresent(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectPresent(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);   \n+\n+            \n+    }\n+\n+    /**\n+    *  Cookie Header Test Series Test 2/4 - \"set\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader]. \n+    *  \n+    *  This test specifically tests the \"set\" configuration with the \"set-cookie: oatmeal\" header. It is expected\n+    *  that the servlet chocolate and vanilla values be overwriten.\n+    * \n+    *  Expected present headers: [set-cookie: oatmeal], [appVerificationHeader]\n+    *  Expected missing headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar]\n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Set() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Set\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSet(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectMissing(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectMissing(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectPresent(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);    \n+    }\n+    \n+\n+    /**\n+    *  Cookie Header Test Series Test 3/4 - \"setIfMissing\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader].\n+    *  \n+    * \n+    *  This test specifically tests the \"setIfMissing\" configuration with the \"set-cookie: oatmeal\" header. It is \n+    *  expected that the response will be written out with both chocolate and vanilla \"set-cookie\" headers.\n+    * \n+    *  Expected present headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar],\n+    *       [appVerificationHeader]\n+    *  Expected missing headers: [set-cookie: oatmeal]\n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_SetIfMissing() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_SetIfMissing\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSetIfMissing(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+           //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectPresent(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectMissing(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);  \n+\n+    }\n+\n+    /**\n+    *  Cookie Header Test Series Test 4/4 - \"remove\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader].\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    * \n+    *  Expected present headers: [appVerificationHeader]    \n+    *  Expected missing headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar],\n+    *       [set-cookie: oatmeal]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Remove() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Remove\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setRemove(\"set-cookie\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectMissing(\"set-cookie\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers); \n+\n+    }\n+\n+\n+    @Test\n+    public void testHeadersDuringLogin() throws Exception {\n+\n+        boolean headerFound = false;\n+        String testName = \"testHeadersDuringLogin\";\n+        restoreSavedConfig = true;\n+        String expectedResponse = \"Welcome to the SameSiteSecurityServlet!\";\n+        Header expectedHeader = null;\n+\n+        //server.saveServerConfiguration();\n+", "originalCommit": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MDU0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685180544", "bodyText": "Done", "author": "mrsaldana", "createdAt": "2021-08-09T13:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg3MDI1MQ=="}], "type": "inlineReview"}, {"oid": "d30c0e7932df86bbea126e4f00429a8f43a6fa1e", "url": "https://github.com/OpenLiberty/open-liberty/commit/d30c0e7932df86bbea126e4f00429a8f43a6fa1e", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-09T12:49:04Z", "type": "forcePushed"}, {"oid": "f2e7b3a491bf3710db6f7eba65ce9add4f41ce25", "url": "https://github.com/OpenLiberty/open-liberty/commit/f2e7b3a491bf3710db6f7eba65ce9add4f41ce25", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-09T12:52:58Z", "type": "forcePushed"}, {"oid": "e30e30204ff18998fdcffd05c70267fa7ddeb23d", "url": "https://github.com/OpenLiberty/open-liberty/commit/e30e30204ff18998fdcffd05c70267fa7ddeb23d", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-09T12:55:17Z", "type": "forcePushed"}, {"oid": "1e9fa1e3ca049c9daeb2127a44d7d014811359b7", "url": "https://github.com/OpenLiberty/open-liberty/commit/1e9fa1e3ca049c9daeb2127a44d7d014811359b7", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-09T13:02:32Z", "type": "forcePushed"}, {"oid": "58f2f8f2c7f2b68b496ecf4a32de621fbd8e429e", "url": "https://github.com/OpenLiberty/open-liberty/commit/58f2f8f2c7f2b68b496ecf4a32de621fbd8e429e", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-09T16:48:22Z", "type": "forcePushed"}, {"oid": "67b8eb929678bf2b77ad22b5e9b511956c2723db", "url": "https://github.com/OpenLiberty/open-liberty/commit/67b8eb929678bf2b77ad22b5e9b511956c2723db", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-10T02:08:37Z", "type": "forcePushed"}, {"oid": "6f093fe2e111614ae5e18e57ce6952a9050eff72", "url": "https://github.com/OpenLiberty/open-liberty/commit/6f093fe2e111614ae5e18e57ce6952a9050eff72", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-24T22:16:20Z", "type": "commit"}, {"oid": "6f093fe2e111614ae5e18e57ce6952a9050eff72", "url": "https://github.com/OpenLiberty/open-liberty/commit/6f093fe2e111614ae5e18e57ce6952a9050eff72", "message": "Initial commit: response header configuration support core code", "committedDate": "2021-08-24T22:16:20Z", "type": "forcePushed"}, {"oid": "439977e56c4e7431e32c94a7cdd28b814844f446", "url": "https://github.com/OpenLiberty/open-liberty/commit/439977e56c4e7431e32c94a7cdd28b814844f446", "message": "Merge branch 'integration' into Config_Header_Support", "committedDate": "2021-08-30T06:10:43Z", "type": "commit"}]}