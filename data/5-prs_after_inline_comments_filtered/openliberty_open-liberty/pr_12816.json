{"pr_number": 12816, "pr_title": "Create application start barrier", "pr_createdAt": "2020-06-29T12:03:56Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12816", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzE1Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r448483152", "bodyText": "It is not clear to me how this component does anything other than provide some additional trace points.  It is fine if that is all this component does, but if so please add a comment to the class itself.", "author": "tjwatson", "createdAt": "2020-07-01T16:32:52Z", "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {", "originalCommit": "656084dcc79159c6af7bd200a249ae28e1ee4fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NjE3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r499686179", "bodyText": "The test case and #11152\nare (going to be)  ApplicationPrereqs", "author": "AndrewDJBanks", "createdAt": "2020-10-05T15:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzkwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r448483906", "bodyText": "Why always sort even when trace is not enabled.  I only see realisedPrereqs getting used within trace blocks.", "author": "tjwatson", "createdAt": "2020-07-01T16:34:19Z", "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {\n+        private final ConfigurationAdmin configurationAdmin;\n+        private final ArrayList<String> realisedPrereqs = new ArrayList<>();\n+\n+        /**\n+         * Use constructor parameter references to ensure that mandatory references are supplied first.\n+         *\n+         * @param configurationAdmin must be supplied before any calls to setApplicationPrereq\n+         */\n+        @Activate\n+        public PrereqWatcher(@Reference ConfigurationAdmin configurationAdmin) {\n+            this.configurationAdmin = configurationAdmin;\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"Known configured application prereqs:\" + listConfiguredPrereqs());\n+            }\n+        }\n+\n+        private String listConfiguredPrereqs() {\n+            Configuration[] configs;\n+            try {\n+                configs = this.configurationAdmin.listConfigurations(\"(service.factoryPid=\" + ApplicationPrereq.class.getName() + \")\");\n+            } catch (IOException | InvalidSyntaxException e) {\n+                StringWriter sw = new StringWriter();\n+                e.printStackTrace(new PrintWriter(sw));\n+                return \"Error listing prereqs:\" + sw;\n+            }\n+            if (configs == null)\n+                return null;\n+\n+            String[] prereqClassNames = new String[configs.length];\n+            for (int i = 0; i < configs.length; i++) {\n+                prereqClassNames[i] = (String) configs[i].getProperties().get(\"className\");\n+            }\n+\n+            Arrays.sort(prereqClassNames);\n+            return Arrays.toString(prereqClassNames);\n+        }\n+\n+        @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY)\n+        void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+            realisedPrereqs.add(applicationPrereq.getClass().getName());\n+            Collections.sort(realisedPrereqs);", "originalCommit": "656084dcc79159c6af7bd200a249ae28e1ee4fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzMDk4Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r461430983", "bodyText": "Very good question. Would it be acceptable to use a sorted set instead, or should we simply defer sorting until we know it needs to be used?", "author": "joe-chacko", "createdAt": "2020-07-28T09:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxNDc4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r461714787", "bodyText": "I suppose a sorted set would be the most simple.  The number of prereqs likely is not high so sorting as you add likely should not show any measurable performance difference.", "author": "tjwatson", "createdAt": "2020-07-28T16:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNTEzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r448505135", "bodyText": "@tjwatson makes a good point, you can't expose this as a SPI straight away. You need a Feature and UFO to expose a new SPI. Please change the package name.", "author": "tevans78", "createdAt": "2020-07-01T17:13:53Z", "path": "dev/com.ibm.ws.app.manager.lifecycle/src/com/ibm/wsspi/application/lifecycle/ApplicationPrereq.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.wsspi.application.lifecycle;", "originalCommit": "656084dcc79159c6af7bd200a249ae28e1ee4fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4Nzc0NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r499687745", "bodyText": "we're not making it an SPI. (Yet)", "author": "AndrewDJBanks", "createdAt": "2020-10-05T15:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNTEzNQ=="}], "type": "inlineReview"}, {"oid": "3754c7e7bd0b7ed8f38cf456d59ee9c2565e5ff2", "url": "https://github.com/OpenLiberty/open-liberty/commit/3754c7e7bd0b7ed8f38cf456d59ee9c2565e5ff2", "message": "Make _fat depend on known ApplicationPrereqs", "committedDate": "2020-07-08T15:01:30Z", "type": "forcePushed"}, {"oid": "d8e90cccc728a701eed1a3ab55957baac6352f8d", "url": "https://github.com/OpenLiberty/open-liberty/commit/d8e90cccc728a701eed1a3ab55957baac6352f8d", "message": "Add fat AppPreqTest", "committedDate": "2020-07-29T11:48:00Z", "type": "forcePushed"}, {"oid": "cab31b004e4698cf5b1cc7f1976ff217bafe394f", "url": "https://github.com/OpenLiberty/open-liberty/commit/cab31b004e4698cf5b1cc7f1976ff217bafe394f", "message": "Add fat AppPreqTest", "committedDate": "2020-07-30T16:10:37Z", "type": "forcePushed"}, {"oid": "3fa6959bacd360c5637f501327fa268211144a87", "url": "https://github.com/OpenLiberty/open-liberty/commit/3fa6959bacd360c5637f501327fa268211144a87", "message": "Add config listener trace point and use metatype id AD instead of className", "committedDate": "2020-08-04T16:59:19Z", "type": "forcePushed"}, {"oid": "f2e89cb2e2b8c8db3a2293e6e3bc73555b1d7ad1", "url": "https://github.com/OpenLiberty/open-liberty/commit/f2e89cb2e2b8c8db3a2293e6e3bc73555b1d7ad1", "message": "Use method to get app prereq ID from service at runtime", "committedDate": "2020-08-18T09:37:45Z", "type": "forcePushed"}, {"oid": "1ad7a01e8648c94e4eeacaf5b9c205a742f1e884", "url": "https://github.com/OpenLiberty/open-liberty/commit/1ad7a01e8648c94e4eeacaf5b9c205a742f1e884", "message": "Created ApplicationPrereq and ApplicationStartBarrier to control component startup.", "committedDate": "2020-09-23T16:02:00Z", "type": "commit"}, {"oid": "f1f0ec2637d5ecc6b2a438be4abda6fb9e6034b0", "url": "https://github.com/OpenLiberty/open-liberty/commit/f1f0ec2637d5ecc6b2a438be4abda6fb9e6034b0", "message": "Make WARs depend on known ApplicationPrereqs", "committedDate": "2020-09-23T16:02:01Z", "type": "commit"}, {"oid": "2349bd09a8255c04cdb5c28b8930e4e1c5e1d372", "url": "https://github.com/OpenLiberty/open-liberty/commit/2349bd09a8255c04cdb5c28b8930e4e1c5e1d372", "message": "Make EARs depend on known ApplicationPrereqs", "committedDate": "2020-09-23T16:02:02Z", "type": "commit"}, {"oid": "a9ddb75e83049a9319a47984cffa2fef7eead641", "url": "https://github.com/OpenLiberty/open-liberty/commit/a9ddb75e83049a9319a47984cffa2fef7eead641", "message": "Make EJBs depend on known ApplicationPrereqs", "committedDate": "2020-09-23T16:02:02Z", "type": "commit"}, {"oid": "393eb689b9d52a1ef3888cbfbcde645df394a5bf", "url": "https://github.com/OpenLiberty/open-liberty/commit/393eb689b9d52a1ef3888cbfbcde645df394a5bf", "message": "Make RARs depend on known ApplicationPrereqs", "committedDate": "2020-09-23T16:02:02Z", "type": "commit"}, {"oid": "942f2b9f011bbbbb3cdade7e6fe7cc102b7788d5", "url": "https://github.com/OpenLiberty/open-liberty/commit/942f2b9f011bbbbb3cdade7e6fe7cc102b7788d5", "message": "Make springboot depend on known ApplicationPrereqs", "committedDate": "2020-09-23T16:02:04Z", "type": "commit"}, {"oid": "2b6e7fb2bae9832556d60603c334971dd3b7eb7d", "url": "https://github.com/OpenLiberty/open-liberty/commit/2b6e7fb2bae9832556d60603c334971dd3b7eb7d", "message": "Make _fat depend on known ApplicationPrereqs", "committedDate": "2020-09-23T16:02:04Z", "type": "commit"}, {"oid": "445425600747a263e8fb8ca6b48afd7b3c74c7a9", "url": "https://github.com/OpenLiberty/open-liberty/commit/445425600747a263e8fb8ca6b48afd7b3c74c7a9", "message": "Add fat AppPreqTest", "committedDate": "2020-09-23T16:02:04Z", "type": "commit"}, {"oid": "a2d53e53cf7f64ff75805fc27f32c39019e73efb", "url": "https://github.com/OpenLiberty/open-liberty/commit/a2d53e53cf7f64ff75805fc27f32c39019e73efb", "message": "Improve trace and add id attribute to app prereq config entry", "committedDate": "2020-09-23T16:02:04Z", "type": "commit"}, {"oid": "013b22c1406c9b012a23277a60dc5a30dae1be36", "url": "https://github.com/OpenLiberty/open-liberty/commit/013b22c1406c9b012a23277a60dc5a30dae1be36", "message": "Add config listener trace point and use metatype id AD instead of className", "committedDate": "2020-09-23T16:02:05Z", "type": "commit"}, {"oid": "91ebb05b327d9dcc55ee139843965c3c37594b28", "url": "https://github.com/OpenLiberty/open-liberty/commit/91ebb05b327d9dcc55ee139843965c3c37594b28", "message": "Use pre-written configuration files", "committedDate": "2020-09-23T16:02:05Z", "type": "commit"}, {"oid": "c9a2f8a577a86a3c14070ab29140025852cee581", "url": "https://github.com/OpenLiberty/open-liberty/commit/c9a2f8a577a86a3c14070ab29140025852cee581", "message": "Test app starts immediately when prereq\nsatisfied", "committedDate": "2020-09-23T16:02:05Z", "type": "commit"}, {"oid": "3942652ae30765d4630936cfa57f6750faa8cffe", "url": "https://github.com/OpenLiberty/open-liberty/commit/3942652ae30765d4630936cfa57f6750faa8cffe", "message": "Add more config changes to tests", "committedDate": "2020-09-23T16:02:05Z", "type": "commit"}, {"oid": "8118b83ae5153cea9a6d7631706c1c25479ea99f", "url": "https://github.com/OpenLiberty/open-liberty/commit/8118b83ae5153cea9a6d7631706c1c25479ea99f", "message": "Test that undeclared prereq causes an FFDC", "committedDate": "2020-09-23T16:08:33Z", "type": "commit"}, {"oid": "f03e446a3baffabc46f6c51712bec3c569aafece", "url": "https://github.com/OpenLiberty/open-liberty/commit/f03e446a3baffabc46f6c51712bec3c569aafece", "message": "Trivial formatting change", "committedDate": "2020-09-23T16:08:33Z", "type": "commit"}, {"oid": "98f327800257b34be7d5ed50884226ff7c0049a0", "url": "https://github.com/OpenLiberty/open-liberty/commit/98f327800257b34be7d5ed50884226ff7c0049a0", "message": "Refactor prereq monitor to use config processing", "committedDate": "2020-09-23T16:08:34Z", "type": "commit"}, {"oid": "7591260a9b1e643d2ba4310959c7a864b342eb1a", "url": "https://github.com/OpenLiberty/open-liberty/commit/7591260a9b1e643d2ba4310959c7a864b342eb1a", "message": "Throw IllegalStateException in case of Prereq mismatch", "committedDate": "2020-09-23T16:08:34Z", "type": "commit"}, {"oid": "39b911ab8d5cbb383049674437ec2e71ff8528ea", "url": "https://github.com/OpenLiberty/open-liberty/commit/39b911ab8d5cbb383049674437ec2e71ff8528ea", "message": "Track ApplicationPrereq declaration Ids", "committedDate": "2020-09-23T16:08:34Z", "type": "commit"}, {"oid": "0f3e45fb8b19b99cf21a232b19624dd11db10fcd", "url": "https://github.com/OpenLiberty/open-liberty/commit/0f3e45fb8b19b99cf21a232b19624dd11db10fcd", "message": "Use method to get app prereq ID from service at runtime", "committedDate": "2020-09-23T16:08:34Z", "type": "commit"}, {"oid": "6afe4f0004cf885dcf69bab7353a80b014dfc48e", "url": "https://github.com/OpenLiberty/open-liberty/commit/6afe4f0004cf885dcf69bab7353a80b014dfc48e", "message": "Add Widget to test DS and Metatype prereqs", "committedDate": "2020-09-23T16:08:35Z", "type": "commit"}, {"oid": "e8c09bd95bcbb7403e08439a4298da7a358f7aac", "url": "https://github.com/OpenLiberty/open-liberty/commit/e8c09bd95bcbb7403e08439a4298da7a358f7aac", "message": "Don't remove Widget configuration when removing PreReq feature\nAdd deactivate methods to display Widget state.", "committedDate": "2020-09-23T16:11:07Z", "type": "commit"}, {"oid": "e8c09bd95bcbb7403e08439a4298da7a358f7aac", "url": "https://github.com/OpenLiberty/open-liberty/commit/e8c09bd95bcbb7403e08439a4298da7a358f7aac", "message": "Don't remove Widget configuration when removing PreReq feature\nAdd deactivate methods to display Widget state.", "committedDate": "2020-09-23T16:11:07Z", "type": "forcePushed"}]}