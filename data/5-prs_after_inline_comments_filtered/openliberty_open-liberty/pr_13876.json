{"pr_number": 13876, "pr_title": "Issue #13345: Update scope attribute in membershipAttribute and member\u2026", "pr_createdAt": "2020-09-10T18:00:47Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13876", "timeline": [{"oid": "679a6f447854c195ba898b9aeae11a9a3b280a20", "url": "https://github.com/OpenLiberty/open-liberty/commit/679a6f447854c195ba898b9aeae11a9a3b280a20", "message": "Issue #13345: Updte scope attribute in membershipAttribute and memberAttribute to be an enum. Add FAT that tests the scopes. Update LDAPUtils to handle issue with older LDAP servers not negotiating the TLS connection from TLSv1.2/3 to TLSv1.", "committedDate": "2020-09-21T16:52:18Z", "type": "forcePushed"}, {"oid": "0437c390f3be1fc6411945f6c814ed718f3cb6c0", "url": "https://github.com/OpenLiberty/open-liberty/commit/0437c390f3be1fc6411945f6c814ed718f3cb6c0", "message": "Issue #13345: Updte scope attribute in membershipAttribute and memberAttribute to be an enum. Add FAT that tests the scopes. Update LDAPUtils to handle issue with older LDAP servers not negotiating the TLS connection from TLSv1.2/3 to TLSv1.", "committedDate": "2020-09-22T21:34:50Z", "type": "forcePushed"}, {"oid": "58909478afbf5bad4bbfa1a78eb7c1b1b30bb3e2", "url": "https://github.com/OpenLiberty/open-liberty/commit/58909478afbf5bad4bbfa1a78eb7c1b1b30bb3e2", "message": "Issue #13345: Updte scope attribute in membershipAttribute and memberAttribute to be an enum. Add FAT that tests the scopes. Update LDAPUtils to handle issue with older LDAP servers not negotiating the TLS connection from TLSv1.2/3 to TLSv1.", "committedDate": "2020-09-28T15:45:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1Njk2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13876#discussion_r496856960", "bodyText": "The dynamic user should be a member of the level 1 group, but the LdapAdapter.getMembersByMember() method does not consider nested dynamic groups.", "author": "jvanhill", "createdAt": "2020-09-29T16:08:19Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LDAPMemberAttributeScopeTest.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.DynamicMemberAttribute;\n+import com.ibm.websphere.simplicity.config.wim.GroupProperties;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapEntityType;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.MemberAttribute;\n+import com.ibm.websphere.simplicity.config.wim.MembershipAttribute;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.ibm.ws.security.wim.adapter.ldap.LdapConstants;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPFatUtils;\n+\n+/**\n+ * Test the member and membership attribute scope settings..\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LDAPMemberAttributeScopeTest {\n+    private static final Class<?> c = LDAPMemberAttributeScopeTest.class;\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.registry.ldap.fat.scope\");\n+    private static UserRegistryServletConnection urServlet;\n+    private static ServerConfiguration baseConfiguration = null;\n+    private static InMemoryLDAPServer ds;\n+    private static final String MEMBER_BASE_DN = \"o=member\";\n+    private static final String MEMBERSHIP_BASE_DN = \"o=membership\";\n+\n+    // Users\n+    private static final String LEVEL1_USER_NAME = \"user_level1\";\n+    private static final String MEMBER_LEVEL1_USER_DN = \"uid=\" + LEVEL1_USER_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL1_USER_DN = \"uid=\" + LEVEL1_USER_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String LEVEL2_USER_NAME = \"user_level2\";\n+    private static final String MEMBER_LEVEL2_USER_DN = \"uid=\" + LEVEL2_USER_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL2_USER_DN = \"uid=\" + LEVEL2_USER_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String DYNAMIC_USER_NAME = \"user_dynamic\";\n+    private static final String MEMBER_DYNAMIC_USER_DN = \"uid=\" + DYNAMIC_USER_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_DYNAMIC_USER_DN = \"uid=\" + DYNAMIC_USER_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+\n+    // Groups\n+    private static final String LEVEL1_GROUP_NAME = \"group_level1\";\n+    private static final String MEMBER_LEVEL1_GROUP_DN = \"cn=\" + LEVEL1_GROUP_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL1_GROUP_DN = \"cn=\" + LEVEL1_GROUP_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String LEVEL2_GROUP_NAME = \"group_level2\";\n+    private static final String MEMBER_LEVEL2_GROUP_DN = \"cn=\" + LEVEL2_GROUP_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL2_GROUP_DN = \"cn=\" + LEVEL2_GROUP_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String DYNAMIC_GROUP_NAME = \"group_dynamic\";\n+    private static final String MEMBER_DYNAMIC_GROUP_DN = \"cn=\" + DYNAMIC_GROUP_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_DYNAMIC_GROUP_DN = \"cn=\" + DYNAMIC_GROUP_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            if (ds != null) {\n+                try {\n+                    ds.shutDown(true);\n+                } catch (Exception e) {\n+                    Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+                }\n+            }\n+\n+            libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating UserRegistry servlet connection the server\");\n+        urServlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (urServlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            urServlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        baseConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(MEMBER_BASE_DN, MEMBERSHIP_BASE_DN);\n+\n+        /*\n+         * Add the partition entries.\n+         */\n+        Entry entry = new Entry(MEMBER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organization\");\n+        entry.addAttribute(\"o\", \"member\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organization\");\n+        entry.addAttribute(\"o\", \"membership\");\n+        ds.add(entry);\n+\n+        /**\n+         * Create the following users and groups for both MEMBER and MEMBERSHIP attribute tests. We\n+         * create two separate sets of groups for MEMBER and MEMBERSHIP tests because when a MEMBERSHIP\n+         * attribute is configured, if the membership attribute is not found on the group it will fall\n+         * back to the member attribute, which leads to unclear results.\n+         *\n+         * <pre>\n+         * group_level1\n+         *   user_level1\n+         *   group_level2\n+         *     user_level2\n+         *   group_dynamic\n+         *     user_dynamic\n+         * </pre>\n+         */\n+\n+        /*\n+         * Users\n+         */\n+        entry = new Entry(MEMBER_LEVEL1_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_LEVEL2_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL1_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"memberof\", MEMBERSHIP_LEVEL1_GROUP_DN);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL2_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"memberof\", MEMBERSHIP_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_DYNAMIC_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"sn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"cn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_DYNAMIC_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"sn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"cn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        /*\n+         * Groups\n+         */\n+        entry = new Entry(MEMBER_LEVEL1_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL1_GROUP_NAME);\n+        entry.addAttribute(\"member\", MEMBER_LEVEL1_USER_DN);\n+        entry.addAttribute(\"member\", MEMBER_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"member\", MEMBER_DYNAMIC_GROUP_DN);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL2_GROUP_NAME);\n+        entry.addAttribute(\"member\", MEMBER_LEVEL2_USER_DN);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL1_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL1_GROUP_NAME);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL2_GROUP_NAME);\n+        entry.addAttribute(\"memberof\", MEMBERSHIP_LEVEL1_GROUP_DN);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_DYNAMIC_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"groupofurls\");\n+        entry.addAttribute(\"cn\", DYNAMIC_GROUP_NAME);\n+        entry.addAttribute(\"memberurl\", \"ldap:///\" + MEMBER_BASE_DN + \"??sub?(uid=*dynamic*)\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_DYNAMIC_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"groupofurls\");\n+        entry.addAttribute(\"cn\", DYNAMIC_GROUP_NAME);\n+        entry.addAttribute(\"memberurl\", \"ldap:///\" + MEMBERSHIP_BASE_DN + \"??sub?(uid=*dynamic*)\");\n+        ds.add(entry);\n+    }\n+\n+    /**\n+     * Create a basic LDAP registry configuration element for the specified server configuration.\n+     * The registry will be added to the configuration.\n+     *\n+     * @param serverConfig The server configuration to add the LDAP registry to.\n+     * @param baseDN The base DN to use for the LDAP registry.\n+     * @param memberAttrs The memberAttribute configurations to use, if any.\n+     * @param membershipAttr The membershipAttr to use, if any.\n+     * @return The new LDAP registry configuration element.\n+     */\n+    private static LdapRegistry createLdapRegistry(ServerConfiguration serverConfig, String baseDN, MemberAttribute[] memberAttrs, MembershipAttribute membershipAttr) {\n+        /*\n+         * Create and add the new LDAP registry to the server configuration.\n+         */\n+        LdapRegistry ldapRegistry = new LdapRegistry();\n+        serverConfig.getLdapRegistries().add(ldapRegistry);\n+\n+        /*\n+         * Configure the LDAP registry.\n+         */\n+        ldapRegistry.setBaseDN(baseDN);\n+        ldapRegistry.setLdapType(\"Custom\");\n+        ldapRegistry.setRealm(\"LdapRealm\");\n+        ldapRegistry.setHost(\"localhost\");\n+        ldapRegistry.setPort(String.valueOf(ds.getLdapPort()));\n+        ldapRegistry.setBindDN(ds.getBindDN());\n+        ldapRegistry.setBindPassword(ds.getBindPassword());\n+        ldapRegistry.setCustomFilters(new LdapFilters(\"(&(uid=%v)(objectclass=inetorgperson))\", \"(&(cn=%v)(|(objectclass=groupofnames)(objectclass=groupofurls)))\", null, null, null));\n+        ldapRegistry.setLdapCache(new LdapCache(new AttributesCache(false, null, null, null), new SearchResultsCache(false, null, null, null)));\n+        ldapRegistry.getLdapEntityTypes().add(new LdapEntityType(\"Group\", null, new String[] { \"groupofnames\", \"groupofurls\" }, null));\n+        ldapRegistry.getLdapEntityTypes().add(new LdapEntityType(\"PersonAccount\", null, new String[] { \"inetorgperson\" }, null));\n+\n+        GroupProperties groupProperties = new GroupProperties();\n+        ldapRegistry.setGroupProperties(groupProperties);\n+        groupProperties.setDynamicMemberAttribute(new DynamicMemberAttribute(\"memberurl\", \"groupofurls\"));\n+\n+        if (memberAttrs != null && memberAttrs.length > 0) {\n+            ldapRegistry.setRecursiveSearch(true); // TODO This should happen automatically.\n+            for (MemberAttribute memberAttr : memberAttrs) {\n+                groupProperties.getMemberAttributes().add(memberAttr);\n+            }\n+        }\n+\n+        if (membershipAttr != null) {\n+            ldapRegistry.setRecursiveSearch(true); // TODO This should happen automatically.\n+            groupProperties.setMembershipAttribute(membershipAttr);\n+        }\n+\n+        return ldapRegistry;\n+    }\n+\n+    /**\n+     * Test a memberAttribute whose scope is set to \"direct\". Direct scoped member attributes\n+     * only return their direct members, thus this will require nested calls to derive\n+     * group membership.\n+     *\n+     * @throws Exception if the test failed for some unforeseen reason.\n+     */\n+    @Test\n+    public void memberAttribute_scope_direct() throws Exception {\n+\n+        ServerConfiguration clone = baseConfiguration.clone();\n+        MemberAttribute[] memberAttrs = new MemberAttribute[1];\n+        memberAttrs[0] = new MemberAttribute(null, \"member\", \"groupofnames\", LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING);\n+        createLdapRegistry(clone, MEMBER_BASE_DN, memberAttrs, null);\n+        LDAPFatUtils.updateConfigDynamically(libertyServer, clone);\n+\n+        List<String> results = urServlet.getGroupsForUser(MEMBER_LEVEL1_USER_DN);\n+        assertMembershipResults(\"With direct scope, the direct member should only be a member of the root group.\", results, MEMBER_LEVEL1_GROUP_DN);\n+\n+        results = urServlet.getGroupsForUser(MEMBER_LEVEL2_USER_DN);\n+        assertMembershipResults(\"With direct scope, the nested member should be a member of the root and nested group.\", results, MEMBER_LEVEL1_GROUP_DN, MEMBER_LEVEL2_GROUP_DN);\n+\n+        results = urServlet.getGroupsForUser(MEMBER_DYNAMIC_USER_DN);\n+        assertMembershipResults(\"With direct scope, the dynamic member should be a member of the root and dynamic group.\", results, MEMBER_LEVEL1_GROUP_DN,\n+                                MEMBER_DYNAMIC_GROUP_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL1_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With direct scope, the root group should have both the direct and nested members.\", results, MEMBER_LEVEL1_USER_DN, MEMBER_LEVEL2_USER_DN);", "originalCommit": "58909478afbf5bad4bbfa1a78eb7c1b1b30bb3e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NDc4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13876#discussion_r497754781", "bodyText": "Opened issue #14249.", "author": "jvanhill", "createdAt": "2020-09-30T19:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1Njk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2MzE1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13876#discussion_r496863153", "bodyText": "The dynamic user should be a member of the level 1 group, but the LdapAdapter.getMembersByMembership() method does not consider nested dynamic groups.", "author": "jvanhill", "createdAt": "2020-09-29T16:14:17Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LDAPMemberAttributeScopeTest.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.DynamicMemberAttribute;\n+import com.ibm.websphere.simplicity.config.wim.GroupProperties;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapEntityType;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.MemberAttribute;\n+import com.ibm.websphere.simplicity.config.wim.MembershipAttribute;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.ibm.ws.security.wim.adapter.ldap.LdapConstants;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPFatUtils;\n+\n+/**\n+ * Test the member and membership attribute scope settings..\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LDAPMemberAttributeScopeTest {\n+    private static final Class<?> c = LDAPMemberAttributeScopeTest.class;\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.registry.ldap.fat.scope\");\n+    private static UserRegistryServletConnection urServlet;\n+    private static ServerConfiguration baseConfiguration = null;\n+    private static InMemoryLDAPServer ds;\n+    private static final String MEMBER_BASE_DN = \"o=member\";\n+    private static final String MEMBERSHIP_BASE_DN = \"o=membership\";\n+\n+    // Users\n+    private static final String LEVEL1_USER_NAME = \"user_level1\";\n+    private static final String MEMBER_LEVEL1_USER_DN = \"uid=\" + LEVEL1_USER_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL1_USER_DN = \"uid=\" + LEVEL1_USER_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String LEVEL2_USER_NAME = \"user_level2\";\n+    private static final String MEMBER_LEVEL2_USER_DN = \"uid=\" + LEVEL2_USER_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL2_USER_DN = \"uid=\" + LEVEL2_USER_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String DYNAMIC_USER_NAME = \"user_dynamic\";\n+    private static final String MEMBER_DYNAMIC_USER_DN = \"uid=\" + DYNAMIC_USER_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_DYNAMIC_USER_DN = \"uid=\" + DYNAMIC_USER_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+\n+    // Groups\n+    private static final String LEVEL1_GROUP_NAME = \"group_level1\";\n+    private static final String MEMBER_LEVEL1_GROUP_DN = \"cn=\" + LEVEL1_GROUP_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL1_GROUP_DN = \"cn=\" + LEVEL1_GROUP_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String LEVEL2_GROUP_NAME = \"group_level2\";\n+    private static final String MEMBER_LEVEL2_GROUP_DN = \"cn=\" + LEVEL2_GROUP_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_LEVEL2_GROUP_DN = \"cn=\" + LEVEL2_GROUP_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+    private static final String DYNAMIC_GROUP_NAME = \"group_dynamic\";\n+    private static final String MEMBER_DYNAMIC_GROUP_DN = \"cn=\" + DYNAMIC_GROUP_NAME + \",\" + MEMBER_BASE_DN;\n+    private static final String MEMBERSHIP_DYNAMIC_GROUP_DN = \"cn=\" + DYNAMIC_GROUP_NAME + \",\" + MEMBERSHIP_BASE_DN;\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            if (ds != null) {\n+                try {\n+                    ds.shutDown(true);\n+                } catch (Exception e) {\n+                    Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+                }\n+            }\n+\n+            libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating UserRegistry servlet connection the server\");\n+        urServlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (urServlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            urServlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        baseConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(MEMBER_BASE_DN, MEMBERSHIP_BASE_DN);\n+\n+        /*\n+         * Add the partition entries.\n+         */\n+        Entry entry = new Entry(MEMBER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organization\");\n+        entry.addAttribute(\"o\", \"member\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organization\");\n+        entry.addAttribute(\"o\", \"membership\");\n+        ds.add(entry);\n+\n+        /**\n+         * Create the following users and groups for both MEMBER and MEMBERSHIP attribute tests. We\n+         * create two separate sets of groups for MEMBER and MEMBERSHIP tests because when a MEMBERSHIP\n+         * attribute is configured, if the membership attribute is not found on the group it will fall\n+         * back to the member attribute, which leads to unclear results.\n+         *\n+         * <pre>\n+         * group_level1\n+         *   user_level1\n+         *   group_level2\n+         *     user_level2\n+         *   group_dynamic\n+         *     user_dynamic\n+         * </pre>\n+         */\n+\n+        /*\n+         * Users\n+         */\n+        entry = new Entry(MEMBER_LEVEL1_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_LEVEL2_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL1_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL1_USER_NAME);\n+        entry.addAttribute(\"memberof\", MEMBERSHIP_LEVEL1_GROUP_DN);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL2_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"sn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"cn\", LEVEL2_USER_NAME);\n+        entry.addAttribute(\"memberof\", MEMBERSHIP_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_DYNAMIC_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"sn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"cn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_DYNAMIC_USER_DN);\n+        entry.addAttribute(\"objectclass\", \"wiminetorgperson\");\n+        entry.addAttribute(\"uid\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"sn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"cn\", DYNAMIC_USER_NAME);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+        /*\n+         * Groups\n+         */\n+        entry = new Entry(MEMBER_LEVEL1_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL1_GROUP_NAME);\n+        entry.addAttribute(\"member\", MEMBER_LEVEL1_USER_DN);\n+        entry.addAttribute(\"member\", MEMBER_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"member\", MEMBER_DYNAMIC_GROUP_DN);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL2_GROUP_NAME);\n+        entry.addAttribute(\"member\", MEMBER_LEVEL2_USER_DN);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL1_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL1_GROUP_NAME);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_LEVEL2_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"wimgroupofnames\");\n+        entry.addAttribute(\"cn\", LEVEL2_GROUP_NAME);\n+        entry.addAttribute(\"memberof\", MEMBERSHIP_LEVEL1_GROUP_DN);\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBER_DYNAMIC_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"groupofurls\");\n+        entry.addAttribute(\"cn\", DYNAMIC_GROUP_NAME);\n+        entry.addAttribute(\"memberurl\", \"ldap:///\" + MEMBER_BASE_DN + \"??sub?(uid=*dynamic*)\");\n+        ds.add(entry);\n+\n+        entry = new Entry(MEMBERSHIP_DYNAMIC_GROUP_DN);\n+        entry.addAttribute(\"objectclass\", \"groupofurls\");\n+        entry.addAttribute(\"cn\", DYNAMIC_GROUP_NAME);\n+        entry.addAttribute(\"memberurl\", \"ldap:///\" + MEMBERSHIP_BASE_DN + \"??sub?(uid=*dynamic*)\");\n+        ds.add(entry);\n+    }\n+\n+    /**\n+     * Create a basic LDAP registry configuration element for the specified server configuration.\n+     * The registry will be added to the configuration.\n+     *\n+     * @param serverConfig The server configuration to add the LDAP registry to.\n+     * @param baseDN The base DN to use for the LDAP registry.\n+     * @param memberAttrs The memberAttribute configurations to use, if any.\n+     * @param membershipAttr The membershipAttr to use, if any.\n+     * @return The new LDAP registry configuration element.\n+     */\n+    private static LdapRegistry createLdapRegistry(ServerConfiguration serverConfig, String baseDN, MemberAttribute[] memberAttrs, MembershipAttribute membershipAttr) {\n+        /*\n+         * Create and add the new LDAP registry to the server configuration.\n+         */\n+        LdapRegistry ldapRegistry = new LdapRegistry();\n+        serverConfig.getLdapRegistries().add(ldapRegistry);\n+\n+        /*\n+         * Configure the LDAP registry.\n+         */\n+        ldapRegistry.setBaseDN(baseDN);\n+        ldapRegistry.setLdapType(\"Custom\");\n+        ldapRegistry.setRealm(\"LdapRealm\");\n+        ldapRegistry.setHost(\"localhost\");\n+        ldapRegistry.setPort(String.valueOf(ds.getLdapPort()));\n+        ldapRegistry.setBindDN(ds.getBindDN());\n+        ldapRegistry.setBindPassword(ds.getBindPassword());\n+        ldapRegistry.setCustomFilters(new LdapFilters(\"(&(uid=%v)(objectclass=inetorgperson))\", \"(&(cn=%v)(|(objectclass=groupofnames)(objectclass=groupofurls)))\", null, null, null));\n+        ldapRegistry.setLdapCache(new LdapCache(new AttributesCache(false, null, null, null), new SearchResultsCache(false, null, null, null)));\n+        ldapRegistry.getLdapEntityTypes().add(new LdapEntityType(\"Group\", null, new String[] { \"groupofnames\", \"groupofurls\" }, null));\n+        ldapRegistry.getLdapEntityTypes().add(new LdapEntityType(\"PersonAccount\", null, new String[] { \"inetorgperson\" }, null));\n+\n+        GroupProperties groupProperties = new GroupProperties();\n+        ldapRegistry.setGroupProperties(groupProperties);\n+        groupProperties.setDynamicMemberAttribute(new DynamicMemberAttribute(\"memberurl\", \"groupofurls\"));\n+\n+        if (memberAttrs != null && memberAttrs.length > 0) {\n+            ldapRegistry.setRecursiveSearch(true); // TODO This should happen automatically.\n+            for (MemberAttribute memberAttr : memberAttrs) {\n+                groupProperties.getMemberAttributes().add(memberAttr);\n+            }\n+        }\n+\n+        if (membershipAttr != null) {\n+            ldapRegistry.setRecursiveSearch(true); // TODO This should happen automatically.\n+            groupProperties.setMembershipAttribute(membershipAttr);\n+        }\n+\n+        return ldapRegistry;\n+    }\n+\n+    /**\n+     * Test a memberAttribute whose scope is set to \"direct\". Direct scoped member attributes\n+     * only return their direct members, thus this will require nested calls to derive\n+     * group membership.\n+     *\n+     * @throws Exception if the test failed for some unforeseen reason.\n+     */\n+    @Test\n+    public void memberAttribute_scope_direct() throws Exception {\n+\n+        ServerConfiguration clone = baseConfiguration.clone();\n+        MemberAttribute[] memberAttrs = new MemberAttribute[1];\n+        memberAttrs[0] = new MemberAttribute(null, \"member\", \"groupofnames\", LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING);\n+        createLdapRegistry(clone, MEMBER_BASE_DN, memberAttrs, null);\n+        LDAPFatUtils.updateConfigDynamically(libertyServer, clone);\n+\n+        List<String> results = urServlet.getGroupsForUser(MEMBER_LEVEL1_USER_DN);\n+        assertMembershipResults(\"With direct scope, the direct member should only be a member of the root group.\", results, MEMBER_LEVEL1_GROUP_DN);\n+\n+        results = urServlet.getGroupsForUser(MEMBER_LEVEL2_USER_DN);\n+        assertMembershipResults(\"With direct scope, the nested member should be a member of the root and nested group.\", results, MEMBER_LEVEL1_GROUP_DN, MEMBER_LEVEL2_GROUP_DN);\n+\n+        results = urServlet.getGroupsForUser(MEMBER_DYNAMIC_USER_DN);\n+        assertMembershipResults(\"With direct scope, the dynamic member should be a member of the root and dynamic group.\", results, MEMBER_LEVEL1_GROUP_DN,\n+                                MEMBER_DYNAMIC_GROUP_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL1_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With direct scope, the root group should have both the direct and nested members.\", results, MEMBER_LEVEL1_USER_DN, MEMBER_LEVEL2_USER_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL2_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With direct scope, the nested group should have only the nested member.\", results, MEMBER_LEVEL2_USER_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_DYNAMIC_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With direct scope, the dynamic group should have only the dynamic member.\", results, MEMBER_DYNAMIC_USER_DN);\n+    }\n+\n+    /**\n+     * Test a memberAttribute whose scope is set to \"nested\". Nested scoped member attributes\n+     * return their direct members and nested members, thus this will NOT require nested calls\n+     * to derive group membership.\n+     *\n+     * @throws Exception if the test failed for some unforeseen reason.\n+     */\n+    @Test\n+    public void memberAttribute_scope_nested() throws Exception {\n+\n+        ServerConfiguration clone = baseConfiguration.clone();\n+        MemberAttribute[] memberAttrs = new MemberAttribute[1];\n+        memberAttrs[0] = new MemberAttribute(null, \"member\", \"groupofnames\", LdapConstants.LDAP_NESTED_GROUP_MEMBERSHIP_STRING);\n+        createLdapRegistry(clone, MEMBER_BASE_DN, memberAttrs, null);\n+        LDAPFatUtils.updateConfigDynamically(libertyServer, clone);\n+\n+        List<String> results = urServlet.getGroupsForUser(MEMBER_LEVEL1_USER_DN);\n+        assertMembershipResults(\"With nested scope, the direct member should only be a member of the root group.\", results, MEMBER_LEVEL1_GROUP_DN);\n+\n+        // TODO group_level1 is returned b/c recursiveSearch=true overrides search scope in LdapAdapter.getGroupsByMember()\n+        results = urServlet.getGroupsForUser(MEMBER_LEVEL2_USER_DN);\n+        assertMembershipResults(\"With nested scope, the nested member should only be a member of the nested group.\", results, MEMBER_LEVEL1_GROUP_DN, MEMBER_LEVEL2_GROUP_DN);\n+\n+        // TODO group_level1 is returned b/c recursiveSearch=true overrides search scope in LdapAdapter.getGroupsByMember()\n+        results = urServlet.getGroupsForUser(MEMBER_DYNAMIC_USER_DN);\n+        assertMembershipResults(\"With nested scope, the dynamic member should be a member of the dynamic group.\", results, MEMBER_LEVEL1_GROUP_DN, MEMBER_DYNAMIC_GROUP_DN);\n+\n+        // TODO user_level1 is returned b/c recursiveSearch=true overrides search scope in LdapAdapter.getMembersByMember()\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL1_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With nested scope, the root group should have the direct member.\", results, MEMBER_LEVEL1_USER_DN, MEMBER_LEVEL2_USER_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL2_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With nested scope, the nested group should have only the nested member.\", results, MEMBER_LEVEL2_USER_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_DYNAMIC_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With nested scope, the dynamic group should have only the dynamic member.\", results, MEMBER_DYNAMIC_USER_DN);\n+    }\n+\n+    /**\n+     * Test a memberAttribute whose scope is set to \"all\". All scoped member attributes\n+     * return their direct, nested and dynamic members, thus this will NOT require nested calls\n+     * to derive group membership.\n+     *\n+     * @throws Exception if the test failed for some unforeseen reason.\n+     */\n+    @Test\n+    public void memberAttribute_scope_all() throws Exception {\n+\n+        ServerConfiguration clone = baseConfiguration.clone();\n+        MemberAttribute[] memberAttrs = new MemberAttribute[1];\n+        memberAttrs[0] = new MemberAttribute(null, \"member\", \"groupofnames\", LdapConstants.LDAP_ALL_GROUP_MEMBERSHIP_STRING);\n+        createLdapRegistry(clone, MEMBER_BASE_DN, memberAttrs, null);\n+        LDAPFatUtils.updateConfigDynamically(libertyServer, clone);\n+\n+        List<String> results = urServlet.getGroupsForUser(MEMBER_LEVEL1_USER_DN);\n+        assertMembershipResults(\"With all scope, the direct member should only be a member of the root group.\", results, MEMBER_LEVEL1_GROUP_DN);\n+\n+        // TODO group_level1 is returned b/c recursiveSearch=true overrides search scope in LdapAdapter.getGroupsByMember()\n+        results = urServlet.getGroupsForUser(MEMBER_LEVEL2_USER_DN);\n+        assertMembershipResults(\"With all scope, the nested member should only be a member of the nested group.\", results, MEMBER_LEVEL1_GROUP_DN, MEMBER_LEVEL2_GROUP_DN);\n+\n+        // TODO group_level1 is returned b/c recursiveSearch=true overrides search scope in LdapAdapter.getGroupsByMember()\n+        results = urServlet.getGroupsForUser(MEMBER_DYNAMIC_USER_DN);\n+        assertMembershipResults(\"With all scope, the dynamic member should be a member of the dynamic group.\", results, MEMBER_LEVEL1_GROUP_DN, MEMBER_DYNAMIC_GROUP_DN);\n+\n+        // TODO user_level1 is returned b/c recursiveSearch=true overrides search scope in LdapAdapter.getMembersByMember()\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL1_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With all scope, the root group should have the direct member.\", results, MEMBER_LEVEL1_USER_DN, MEMBER_LEVEL2_USER_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_LEVEL2_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With all scope, the nested group should have only the nested member.\", results, MEMBER_LEVEL2_USER_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBER_DYNAMIC_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With all scope, the dynamic group should have only the dynamic member.\", results, MEMBER_DYNAMIC_USER_DN);\n+    }\n+\n+    /**\n+     * Test a membershipAttribute whose scope is set to \"direct\". Direct scoped membership attributes\n+     * only return their direct memberships, thus this will require nested calls to derive\n+     * group membership.\n+     *\n+     * @throws Exception if the test failed for some unforeseen reason.\n+     */\n+    @Test\n+    public void membershipAttribute_scope_direct() throws Exception {\n+\n+        ServerConfiguration clone = baseConfiguration.clone();\n+        MembershipAttribute membershipAttr = new MembershipAttribute(\"memberof\", LdapConstants.LDAP_DIRECT_GROUP_MEMBERSHIP_STRING);\n+        createLdapRegistry(clone, MEMBERSHIP_BASE_DN, null, membershipAttr);\n+        LDAPFatUtils.updateConfigDynamically(libertyServer, clone);\n+\n+        List<String> results = urServlet.getGroupsForUser(MEMBERSHIP_LEVEL1_USER_DN);\n+        assertMembershipResults(\"With direct scope, the direct member should only be a member of the root group.\", results, MEMBERSHIP_LEVEL1_GROUP_DN);\n+\n+        results = urServlet.getGroupsForUser(MEMBERSHIP_LEVEL2_USER_DN);\n+        assertMembershipResults(\"With direct scope, the nested member should be a member of the root and nested group.\", results, MEMBERSHIP_LEVEL1_GROUP_DN,\n+                                MEMBERSHIP_LEVEL2_GROUP_DN);\n+\n+        results = urServlet.getGroupsForUser(MEMBERSHIP_DYNAMIC_USER_DN);\n+        assertMembershipResults(\"With direct scope, the dynamic member should be a member of the root and dynamic group.\", results, MEMBERSHIP_DYNAMIC_GROUP_DN);\n+\n+        results = urServlet.getUsersForGroup(MEMBERSHIP_LEVEL1_GROUP_DN, 0).getList();\n+        assertMembershipResults(\"With direct scope, the root group should have both the direct and nested members.\", results, MEMBERSHIP_LEVEL1_USER_DN, MEMBERSHIP_LEVEL2_USER_DN);", "originalCommit": "58909478afbf5bad4bbfa1a78eb7c1b1b30bb3e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NjA4Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13876#discussion_r497756086", "bodyText": "Opened issue #14249.", "author": "jvanhill", "createdAt": "2020-09-30T19:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2MzE1Mw=="}], "type": "inlineReview"}, {"oid": "e6561d18703c5526dab2928732f8339ad85dda33", "url": "https://github.com/OpenLiberty/open-liberty/commit/e6561d18703c5526dab2928732f8339ad85dda33", "message": "Issue #13345: Updte scope attribute in membershipAttribute and memberAttribute to be an enum. Add FAT that tests the scopes. Update LDAPUtils to handle issue with older LDAP servers not negotiating the TLS connection from TLSv1.2/3 to TLSv1.", "committedDate": "2020-09-30T19:42:17Z", "type": "commit"}, {"oid": "e6561d18703c5526dab2928732f8339ad85dda33", "url": "https://github.com/OpenLiberty/open-liberty/commit/e6561d18703c5526dab2928732f8339ad85dda33", "message": "Issue #13345: Updte scope attribute in membershipAttribute and memberAttribute to be an enum. Add FAT that tests the scopes. Update LDAPUtils to handle issue with older LDAP servers not negotiating the TLS connection from TLSv1.2/3 to TLSv1.", "committedDate": "2020-09-30T19:42:17Z", "type": "forcePushed"}]}