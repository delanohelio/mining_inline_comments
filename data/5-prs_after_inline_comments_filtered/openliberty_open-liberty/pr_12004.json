{"pr_number": 12004, "pr_title": "Adding a Config Element to enable JNDI trace", "pr_createdAt": "2020-04-30T16:26:25Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12004", "timeline": [{"oid": "74b150d93c8fe43fee88ba4bdd8a6ee63d5b28d4", "url": "https://github.com/OpenLiberty/open-liberty/commit/74b150d93c8fe43fee88ba4bdd8a6ee63d5b28d4", "message": "creating a JNDI output Config", "committedDate": "2020-05-01T18:38:19Z", "type": "forcePushed"}, {"oid": "8cd17369b7fde48b080a02018dd2803ebe8f5cc5", "url": "https://github.com/OpenLiberty/open-liberty/commit/8cd17369b7fde48b080a02018dd2803ebe8f5cc5", "message": "creating a JNDI output Config", "committedDate": "2020-05-01T19:11:58Z", "type": "forcePushed"}, {"oid": "a85d5f9e3908ad60511a2efffe2b509faa8a1951", "url": "https://github.com/OpenLiberty/open-liberty/commit/a85d5f9e3908ad60511a2efffe2b509faa8a1951", "message": "creating a JNDI output Config", "committedDate": "2020-05-02T18:17:29Z", "type": "forcePushed"}, {"oid": "ef66f5032e08e8e1e2ed8f7ee2aa7d2ef1d3c715", "url": "https://github.com/OpenLiberty/open-liberty/commit/ef66f5032e08e8e1e2ed8f7ee2aa7d2ef1d3c715", "message": "creating a JNDI output Config", "committedDate": "2020-05-06T04:47:20Z", "type": "forcePushed"}, {"oid": "77f508775ad6fc7ecff403f85d2450e2286790fd", "url": "https://github.com/OpenLiberty/open-liberty/commit/77f508775ad6fc7ecff403f85d2450e2286790fd", "message": "creating a JNDI output Config", "committedDate": "2020-05-11T05:29:22Z", "type": "forcePushed"}, {"oid": "58da5fa0fb9125850ef07a51252cf199ae24b1a5", "url": "https://github.com/OpenLiberty/open-liberty/commit/58da5fa0fb9125850ef07a51252cf199ae24b1a5", "message": "creating a JNDI output Config", "committedDate": "2020-05-11T05:33:12Z", "type": "forcePushed"}, {"oid": "b82607aa83b85b2d76eebf2abd5779ce76fe35d7", "url": "https://github.com/OpenLiberty/open-liberty/commit/b82607aa83b85b2d76eebf2abd5779ce76fe35d7", "message": "creating a JNDI output Config", "committedDate": "2020-05-11T19:28:54Z", "type": "forcePushed"}, {"oid": "568b711cfc5bacd334d45e468e5263e63dcf9bf0", "url": "https://github.com/OpenLiberty/open-liberty/commit/568b711cfc5bacd334d45e468e5263e63dcf9bf0", "message": "creating a JNDI output Config", "committedDate": "2020-05-11T20:31:03Z", "type": "forcePushed"}, {"oid": "43f6a76e87f16465ffb6419936046043b1fdea8f", "url": "https://github.com/OpenLiberty/open-liberty/commit/43f6a76e87f16465ffb6419936046043b1fdea8f", "message": "creating a JNDI output Config", "committedDate": "2020-05-11T21:32:29Z", "type": "forcePushed"}, {"oid": "3c845f3c56c219e6a81df3ea20658aded58e2386", "url": "https://github.com/OpenLiberty/open-liberty/commit/3c845f3c56c219e6a81df3ea20658aded58e2386", "message": "creating a JNDI output Config", "committedDate": "2020-05-11T21:34:42Z", "type": "forcePushed"}, {"oid": "942682783cddfbf1d6b4f4fc9ce1cca7fb436a13", "url": "https://github.com/OpenLiberty/open-liberty/commit/942682783cddfbf1d6b4f4fc9ce1cca7fb436a13", "message": "creating a JNDI output Config", "committedDate": "2020-05-12T02:08:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMjc3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423912771", "bodyText": "Update the name of the test, the test description and streamline it a bit -- does it really need a sleep?", "author": "kristip17", "createdAt": "2020-05-12T17:34:56Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're timing out the LDAP context pool when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testContextPoolOnTimeout() throws Exception {", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzAxOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913018", "bodyText": "Fix description", "author": "kristip17", "createdAt": "2020-05-12T17:35:18Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're timing out the LDAP context pool when expected.", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzA5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913099", "bodyText": "Copyright", "author": "kristip17", "createdAt": "2020-05-12T17:35:27Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzI5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913290", "bodyText": "Are we using this in this class?", "author": "kristip17", "createdAt": "2020-05-12T17:35:45Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/TimedDirContext.java", "diffHunk": "@@ -49,6 +50,8 @@\n     /** Constant for JNDI_CALL trace */\n     public static final String JNDI_CALL = \"JNDI_CALL \";\n \n+    public static ByteArrayPlusOutputStream baos;", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzU1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913559", "bodyText": "Remove or convert to trace.", "author": "kristip17", "createdAt": "2020-05-12T17:36:15Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1068,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            System.out.println(\"Setting print stream\");", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzk3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913976", "bodyText": "Fix copyright date", "author": "kristip17", "createdAt": "2020-05-12T17:36:57Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/ByteArrayPlusOutputStream.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 1997, 2004 IBM Corporation and others.", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNDYyMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423914622", "bodyText": "Fix all the e.printStackTrace -- we should trace it, but don't throw an exception. We don't want failing trace to interrupt an ldap reqeust.", "author": "kristip17", "createdAt": "2020-05-12T17:38:01Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/ByteArrayPlusOutputStream.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 1997, 2004 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+public class ByteArrayPlusOutputStream extends ByteArrayOutputStream {\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTM0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423915348", "bodyText": "Needs to be trace.", "author": "kristip17", "createdAt": "2020-05-12T17:39:09Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1232,6 +1254,16 @@ public TimedDirContext reCreateDirContext(TimedDirContext oldCtx, String errorMe\n     @FFDCIgnore(NamingException.class)\n     public void releaseDirContext(TimedDirContext ctx) throws WIMSystemException {\n         final String METHODNAME = \"releaseDirContext\";\n+        if (iJndiOutputEnabled) {\n+            try {\n+                if (tc.isDebugEnabled()) {\n+                    Tr.debug(tc, METHODNAME + \" Writing the rest of the packet capture\");\n+                }\n+                bapos.writeTo(System.out);\n+            } catch (IOException e) {\n+                e.printStackTrace();", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNzQ5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423917493", "bodyText": "\"Should not find\" ? You are making sure we don't log the trace, then enable it and we do find the trace?", "author": "kristip17", "createdAt": "2020-05-12T17:42:44Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're timing out the LDAP context pool when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testContextPoolOnTimeout() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should find: \" + trace, errMsgs.isEmpty());", "originalCommit": "50f45a83d640ab1ca8041f905e10469f24282c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43fe612be2f738c98ebb8ab8f2102d1248266b05", "url": "https://github.com/OpenLiberty/open-liberty/commit/43fe612be2f738c98ebb8ab8f2102d1248266b05", "message": "creating a JNDI output Config", "committedDate": "2020-05-13T19:27:18Z", "type": "forcePushed"}, {"oid": "c8b3ee5c249b527100b89e8888bda6eb6c78cec9", "url": "https://github.com/OpenLiberty/open-liberty/commit/c8b3ee5c249b527100b89e8888bda6eb6c78cec9", "message": "creating a JNDI output Config", "committedDate": "2020-05-13T20:06:38Z", "type": "forcePushed"}, {"oid": "3e576635352f9b76b29308a12627e1ac64f0df71", "url": "https://github.com/OpenLiberty/open-liberty/commit/3e576635352f9b76b29308a12627e1ac64f0df71", "message": "creating a JNDI output Config", "committedDate": "2020-05-13T20:16:19Z", "type": "forcePushed"}, {"oid": "34d9f96acd75b7f56ffbb7edc8b4f8ded2ae3b40", "url": "https://github.com/OpenLiberty/open-liberty/commit/34d9f96acd75b7f56ffbb7edc8b4f8ded2ae3b40", "message": "creating a JNDI output Config", "committedDate": "2020-05-13T20:46:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyODA3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424728075", "bodyText": "add white space after.", "author": "jvanhill", "createdAt": "2020-05-13T21:00:29Z", "path": "dev/com.ibm.websphere.security.wim.base/src/com/ibm/websphere/security/wim/ConfigConstants.java", "diffHunk": "@@ -402,6 +402,10 @@\n      */\n     String CONFIG_PROP_READ_TIMEOUT = \"readTimeout\";\n \n+    /**\n+     * Define whether JNDI BER packets will be written to the System.out\n+     */\n+    String CONFIG_PROP_JNDI_OUTPUT_ENABLED = \"jndiOutputEnabled\";", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyODUxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424728515", "bodyText": "remove\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //rename BER output stream", "author": "jvanhill", "createdAt": "2020-05-13T21:01:19Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTUzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424729533", "bodyText": "Use the method System.lineSeparator() instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final String eol = getSystemProperty(\"line.separator\");", "author": "jvanhill", "createdAt": "2020-05-13T21:03:17Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTc0Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424729743", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (this.toString(\"UTF-8\").contains(eol)) {\n          \n          \n            \n                        if (this.toString(\"UTF-8\").contains(System.lineSeparator())) {", "author": "jvanhill", "createdAt": "2020-05-13T21:03:45Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTg1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424729856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (this.toString(\"UTF-8\").contains(eol)) {\n          \n          \n            \n                        if (this.toString(\"UTF-8\").contains(System.lineSeparator())) {", "author": "jvanhill", "createdAt": "2020-05-13T21:04:00Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) {\n+        String METHODNAME = \"write(byte[] b, int off, int len)\";\n+        super.write(b, off, len);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMDk5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424730996", "bodyText": "I also wonder if the BER output uses different line separators on windows vs unix? Have you tested on both?", "author": "jvanhill", "createdAt": "2020-05-13T21:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMDIyNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424730225", "bodyText": "Delete this method. Use System.lineSeparator() instead.", "author": "jvanhill", "createdAt": "2020-05-13T21:04:50Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) {\n+        String METHODNAME = \"write(byte[] b, int off, int len)\";\n+        super.write(b, off, len);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b) {\n+        write(b, 0, b.length);\n+    }\n+\n+    /**\n+     * Convenience method to get a system property using\n+     * {@link AccessController#doPrivileged(PrivilegedAction)}.\n+     *\n+     * @param property The property to retrieve.\n+     * @return The value returned from {@link System#getProperty(String)}.\n+     */\n+    @Trivial\n+    public static String getSystemProperty(final String property) {", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMTI2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424731262", "bodyText": "Better Javadoc. Describe what the purpose of the class is.", "author": "jvanhill", "createdAt": "2020-05-13T21:07:00Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjAyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Set the LDAP read time out.\n          \n          \n            \n                     * Enabled JNDI BER output if required.", "author": "jvanhill", "createdAt": "2020-05-13T21:08:35Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1066,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjUzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732538", "bodyText": "Doesn't seem we should need this to be class level. Just add create it when you add it to the env.", "author": "jvanhill", "createdAt": "2020-05-13T21:09:40Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -227,6 +235,8 @@\n     /** Write to secondary server configuration. */\n     private boolean iWriteToSecondary = false;\n \n+    /** Buffer stream for catching JNDI output */\n+    BEROutputStream bapos = new BEROutputStream();", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjcwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732706", "bodyText": "Why do we need this in a PrintStream?", "author": "jvanhill", "createdAt": "2020-05-13T21:10:02Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1066,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                PrintStream Stdout = new PrintStream(bapos);", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjk0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732942", "bodyText": "bapos should not be class level, create it here.", "author": "jvanhill", "createdAt": "2020-05-13T21:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzEzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424733138", "bodyText": "We shouldn't need to do this here.", "author": "jvanhill", "createdAt": "2020-05-13T21:10:44Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1232,6 +1252,18 @@ public TimedDirContext reCreateDirContext(TimedDirContext oldCtx, String errorMe\n     @FFDCIgnore(NamingException.class)\n     public void releaseDirContext(TimedDirContext ctx) throws WIMSystemException {\n         final String METHODNAME = \"releaseDirContext\";\n+        if (iJndiOutputEnabled) {", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzkzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424733934", "bodyText": "probably don't need to setup a context pool.", "author": "jvanhill", "createdAt": "2020-05-13T21:12:23Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDM3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424734377", "bodyText": "probably should disable attributes cache as well. You want to hit your BEROutputStream as much as you can in the test.", "author": "jvanhill", "createdAt": "2020-05-13T21:13:12Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDQ5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424734499", "bodyText": "This javadoc comment is outdated.", "author": "jvanhill", "createdAt": "2020-05-13T21:13:31Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTMzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424735336", "bodyText": "maybe search for a few items from the BER output if possible.", "author": "jvanhill", "createdAt": "2020-05-13T21:15:08Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTc5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424735790", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Send in setting less than 1 second. Should run up to 1 second.\n          \n          \n            \n                    /*\n          \n          \n            \n                     * Enable JNDI BER trace output.\n          \n          \n            \n                     */", "author": "jvanhill", "createdAt": "2020-05-13T21:16:01Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should not find: \" + trace, errMsgs.isEmpty());\n+\n+        // Send in setting less than 1 second. Should run up to 1 second.", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNjAxMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424736012", "bodyText": "/*\n\nRun with JNDI BER trace disabled.\n*/", "author": "jvanhill", "createdAt": "2020-05-13T21:16:28Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);", "originalCommit": "c8eb410a7b9e39ca438e875a6c8f647157cb377c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28e46e47ce475f367d7da6812db76f9d44a0515b", "url": "https://github.com/OpenLiberty/open-liberty/commit/28e46e47ce475f367d7da6812db76f9d44a0515b", "message": "creating a JNDI output Config", "committedDate": "2020-05-14T14:27:13Z", "type": "forcePushed"}, {"oid": "c7e8c64f62bee6ec63fc3a57c902ebff4c3f5c58", "url": "https://github.com/OpenLiberty/open-liberty/commit/c7e8c64f62bee6ec63fc3a57c902ebff4c3f5c58", "message": "creating a JNDI output Config", "committedDate": "2020-05-14T14:33:21Z", "type": "forcePushed"}, {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8", "url": "https://github.com/OpenLiberty/open-liberty/commit/091db6247c2c693439950e45c397ce00f5dd47a8", "message": "creating a JNDI output Config", "committedDate": "2020-05-14T14:36:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MTg3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425241872", "bodyText": "Copyright date should be updated.", "author": "jvanhill", "createdAt": "2020-05-14T15:48:36Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -10,6 +10,7 @@\n  *******************************************************************************/\n package com.ibm.ws.security.wim.adapter.ldap.context;", "originalCommit": "091db6247c2c693439950e45c397ce00f5dd47a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MjYzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425242636", "bodyText": "Javadoc", "author": "jvanhill", "createdAt": "2020-05-14T15:49:42Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -176,6 +181,8 @@\n     /** The initial pool size for the DirContext pool. */\n     private int iInitPoolSize = DEFAULT_INIT_POOL_SIZE;\n \n+    private Boolean iJndiOutputEnabled = false;", "originalCommit": "091db6247c2c693439950e45c397ce00f5dd47a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NDgwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425244804", "bodyText": "Why do we need to wrap with a PrintStream? BEROutputStream is already an java.io.OutputStream.", "author": "jvanhill", "createdAt": "2020-05-14T15:52:36Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,17 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                PrintStream Stdout = new PrintStream(berOS);", "originalCommit": "091db6247c2c693439950e45c397ce00f5dd47a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTQ5Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425245497", "bodyText": "Comment?", "author": "jvanhill", "createdAt": "2020-05-14T15:53:33Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConnection.java", "diffHunk": "@@ -409,6 +410,8 @@ private void initializeContextManager(Map<String, Object> configProps) throws WI\n          */\n         iContextManager.setReadTimeout((Long) configProps.get(CONFIG_PROP_READ_TIMEOUT));\n \n+        iContextManager.setJndiOutputEnabled((Boolean) configProps.get(CONFIG_PROP_JNDI_OUTPUT_ENABLED));", "originalCommit": "091db6247c2c693439950e45c397ce00f5dd47a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NjMzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425246333", "bodyText": "Copyright date above should be 2020.", "author": "jvanhill", "createdAt": "2020-05-14T15:54:43Z", "path": "dev/fattest.simplicity/src/com/ibm/websphere/simplicity/config/wim/LdapRegistry.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private LdapFilters idsFilters;\n     private Boolean ignoreCase;\n     private LdapFilters iplanetFilters;\n+    private Boolean jndiOutputEnabled;", "originalCommit": "091db6247c2c693439950e45c397ce00f5dd47a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODI5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425248290", "bodyText": "I thought i put a comment about checking for more output, but I don't see it. Is there anything else we can check for? Maybe the incoming and  outgoing, maybe some data?", "author": "jvanhill", "createdAt": "2020-05-14T15:57:25Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the JNDI BER output\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\";\n+\n+        /*\n+         * Run with JNDI BER trace disabled\n+         */\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should not find: \" + trace, errMsgs.isEmpty());\n+\n+        /*\n+         * Enable JNDI BER trace output\n+         */\n+        ServerConfiguration config = libertyServer.getServerConfiguration();\n+        ConfigElementList<LdapRegistry> ldaps = config.getLdapRegistries();\n+        LdapRegistry ldap = null;\n+        if (!ldaps.isEmpty() && ldaps.size() == 1) {\n+            ldap = ldaps.get(0);\n+        }\n+        ldap.setJndiOutputEnabled(true);\n+        updateConfigDynamically(libertyServer, config);\n+        returnUser = servlet.checkPassword(USER_DN, PWD);\n+        errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertFalse(\"Should find: \" + trace, errMsgs.isEmpty());", "originalCommit": "091db6247c2c693439950e45c397ce00f5dd47a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODU1NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425248554", "bodyText": "Need to run with several JREs as well. the trace may be different.", "author": "jvanhill", "createdAt": "2020-05-14T15:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODI5MA=="}], "type": "inlineReview"}, {"oid": "0736c4073ad65d52d1303aede275ef1f0a1b44d3", "url": "https://github.com/OpenLiberty/open-liberty/commit/0736c4073ad65d52d1303aede275ef1f0a1b44d3", "message": "creating a JNDI output Config", "committedDate": "2020-05-14T21:53:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1Njg4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425456881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n          \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n          \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, new BEROutputStream());", "author": "jvanhill", "createdAt": "2020-05-14T22:04:22Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);", "originalCommit": "0736c4073ad65d52d1303aede275ef1f0a1b44d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NjkzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425456934", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            BEROutputStream berOS = new BEROutputStream();", "author": "jvanhill", "createdAt": "2020-05-14T22:04:30Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();", "originalCommit": "0736c4073ad65d52d1303aede275ef1f0a1b44d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzA4Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425457083", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //                PrintStream Stdout = new PrintStream(berOS);", "author": "jvanhill", "createdAt": "2020-05-14T22:04:50Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n+//                PrintStream Stdout = new PrintStream(berOS);", "originalCommit": "0736c4073ad65d52d1303aede275ef1f0a1b44d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzIwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425457206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, Stdout);", "author": "jvanhill", "createdAt": "2020-05-14T22:05:07Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n+//                PrintStream Stdout = new PrintStream(berOS);\n+//                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, Stdout);", "originalCommit": "0736c4073ad65d52d1303aede275ef1f0a1b44d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99dda7443d2ffb891a2ceebef8fc4f42051a4f4a", "url": "https://github.com/OpenLiberty/open-liberty/commit/99dda7443d2ffb891a2ceebef8fc4f42051a4f4a", "message": "creating a JNDI output Config", "committedDate": "2020-05-14T23:28:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwNzk5NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425507994", "bodyText": "Did I miss this synchronized block? I don't think we need this. We are adding a new instance of the output stream to the environment, so I don't think there are any race conditions here.", "author": "jvanhill", "createdAt": "2020-05-15T00:52:52Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,15 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {", "originalCommit": "3c6a752325dd013e36bcbb70a63b8143a1093473", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7149c732b679d5d96c0efa1872da335d2b83ca9f", "url": "https://github.com/OpenLiberty/open-liberty/commit/7149c732b679d5d96c0efa1872da335d2b83ca9f", "message": "creating a JNDI output Config", "committedDate": "2020-05-15T01:29:39Z", "type": "commit"}, {"oid": "7149c732b679d5d96c0efa1872da335d2b83ca9f", "url": "https://github.com/OpenLiberty/open-liberty/commit/7149c732b679d5d96c0efa1872da335d2b83ca9f", "message": "creating a JNDI output Config", "committedDate": "2020-05-15T01:29:39Z", "type": "forcePushed"}, {"oid": "5734e7c2567726f6d1c8f6e090ed145923c58fd3", "url": "https://github.com/OpenLiberty/open-liberty/commit/5734e7c2567726f6d1c8f6e090ed145923c58fd3", "message": "Merge branch 'integration' into OLGH9902-JNDItrace", "committedDate": "2020-05-15T13:51:44Z", "type": "commit"}]}