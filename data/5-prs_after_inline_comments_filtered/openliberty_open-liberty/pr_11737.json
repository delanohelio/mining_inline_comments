{"pr_number": 11737, "pr_title": "Issue 11185: Add renewal request time configuration", "pr_createdAt": "2020-04-10T21:48:37Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11737", "timeline": [{"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3", "url": "https://github.com/OpenLiberty/open-liberty/commit/98f66dd7094bef8a3f903587dd54e25aa74636a3", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-10T22:12:30Z", "type": "forcePushed"}, {"oid": "6004822d22e0617238d44f414aaa89525be61e6c", "url": "https://github.com/OpenLiberty/open-liberty/commit/6004822d22e0617238d44f414aaa89525be61e6c", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-15T22:06:18Z", "type": "forcePushed"}, {"oid": "4739522bbca3d0211ef5e538284ef62f1b2fe5da", "url": "https://github.com/OpenLiberty/open-liberty/commit/4739522bbca3d0211ef5e538284ef62f1b2fe5da", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-17T19:26:50Z", "type": "forcePushed"}, {"oid": "cf05591459dbaf8ea48a2935e291e1f22eb1088d", "url": "https://github.com/OpenLiberty/open-liberty/commit/cf05591459dbaf8ea48a2935e291e1f22eb1088d", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-23T22:51:13Z", "type": "forcePushed"}, {"oid": "361a7bfd595ec373ccbffdc5bf7615befa95ebe6", "url": "https://github.com/OpenLiberty/open-liberty/commit/361a7bfd595ec373ccbffdc5bf7615befa95ebe6", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-27T21:45:54Z", "type": "forcePushed"}, {"oid": "0b9f1f8d0a9cbd29b41f6c839d05054078270946", "url": "https://github.com/OpenLiberty/open-liberty/commit/0b9f1f8d0a9cbd29b41f6c839d05054078270946", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-27T22:44:44Z", "type": "forcePushed"}, {"oid": "069f1b62777cb38ab19c1e6caf024c302fcaafad", "url": "https://github.com/OpenLiberty/open-liberty/commit/069f1b62777cb38ab19c1e6caf024c302fcaafad", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-28T18:35:25Z", "type": "forcePushed"}, {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "url": "https://github.com/OpenLiberty/open-liberty/commit/29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-28T18:39:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1OTI0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417559241", "bodyText": "Ok. here it is. Probably should document in metatype.", "author": "jvanhill", "createdAt": "2020-04-29T19:30:18Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -438,6 +447,73 @@ private void processSubjectDN(String subjectDN) throws AcmeCaException {\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Set the amount of time before certificate expiration to renew the certificate\n+\t * \n+\t * @param retries\n+\t *            The number of time to try to update a challenge.\n+\t */\n+\t@Trivial\n+\tprivate void setRenewBeforeExpirationMs(Long ms) {\n+\t\tautoRenew = true;\n+\t\tif (ms != null) {\n+\t\t\tif (ms <= 0) { // disable auto renew", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMTczMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417631732", "bodyText": "added to the metatype.", "author": "kristip17", "createdAt": "2020-04-29T21:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1OTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MzgxOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417563819", "bodyText": "Good catch here. But I am wondering if we shouldn't check the whole certificate chain? What happens when the intermediate or root ca cert expires before our leaf cert?", "author": "jvanhill", "createdAt": "2020-04-29T19:38:48Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -515,12 +530,12 @@ private boolean hasWrongSubjectRDNs(List<X509Certificate> certificateChain) thro\n \t */\n \tprivate boolean isExpired(List<X509Certificate> certificateChain) {\n \t\tX509Certificate certificate = getLeafCertificate(certificateChain);\n-\t\tif (certificateChain == null) {\n+\t\tif (certificate == null) {", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2NDc1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417564753", "bodyText": "(FYI - we can consider that in another issue, since we probably have other areas we need to consider this in)", "author": "jvanhill", "createdAt": "2020-04-29T19:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MzgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MTk0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417641947", "bodyText": "I opened an issue.", "author": "kristip17", "createdAt": "2020-04-29T22:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MzgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2NTg4Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417565883", "bodyText": "Javadoc.\nThe autoRenew being turned on or off.. does this only govern expiration? I assume so, but it isn't clear by the name of this method.", "author": "jvanhill", "createdAt": "2020-04-29T19:42:36Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -506,6 +582,17 @@ private void setValidFor(Long validForMs) {\n \t\t\tthis.validForMs = validForMs;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * @return the renewBeforeExpirationMs\n+\t */\n+\tpublic Long getRenewBeforeExpirationMs() {\n+\t\treturn renewBeforeExpirationMs;\n+\t}\n+\t\n+\tpublic boolean isAutoRenew() {", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNDAyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417634020", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-04-29T21:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2NTg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2ODY2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417568662", "bodyText": "Why is this needed?", "author": "jvanhill", "createdAt": "2020-04-29T19:47:28Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNDU0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417634540", "bodyText": "Oops, it's not -- I was having problems on my box with the Pebble container not starting. Will remove.", "author": "kristip17", "createdAt": "2020-04-29T21:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2ODY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTQyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417569426", "bodyText": "These don't appear to be used.", "author": "jvanhill", "createdAt": "2020-04-29T19:48:47Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MDgxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417640814", "bodyText": "removed", "author": "kristip17", "createdAt": "2020-04-29T22:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTg4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417569888", "bodyText": "This description seems outdated.", "author": "jvanhill", "createdAt": "2020-04-29T19:49:37Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNTA3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417635072", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-04-29T21:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDEwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570105", "bodyText": "Outdated description.", "author": "jvanhill", "createdAt": "2020-04-29T19:49:57Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNTg0OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417635849", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-04-29T21:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDUxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570510", "bodyText": "probably don't care about this in this test, but i guess it doesn't hurt.", "author": "jvanhill", "createdAt": "2020-04-29T19:50:41Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNjIzMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417636230", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-04-29T21:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDY4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570681", "bodyText": "javadoc", "author": "jvanhill", "createdAt": "2020-04-29T19:50:56Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNjczMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417636731", "bodyText": "Added.", "author": "kristip17", "createdAt": "2020-04-29T21:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDg2NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570865", "bodyText": "Outdated description", "author": "jvanhill", "createdAt": "2020-04-29T19:51:16Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * ", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNzI4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417637285", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-04-29T21:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTEwNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571107", "bodyText": "javadoc / test description", "author": "jvanhill", "createdAt": "2020-04-29T19:51:41Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzODQ5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417638490", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-04-29T22:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTQ2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571467", "bodyText": "outdated description", "author": "jvanhill", "createdAt": "2020-04-29T19:52:21Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {\n+\t\tfinal String methodName = \"serverRenewLongerThanValidity\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(365 * 5 + 1 +\"d\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzODU0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417638546", "bodyText": "Udpated", "author": "kristip17", "createdAt": "2020-04-29T22:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTc1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571757", "bodyText": "javadoc / test description.", "author": "jvanhill", "createdAt": "2020-04-29T19:52:54Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {\n+\t\tfinal String methodName = \"serverRenewLongerThanValidity\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(365 * 5 + 1 +\"d\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set longer than the certificate validity period.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning that renewBeforeExpiration is too long compared to the cert validity period\", server.waitForStringInLog(\"CWPKI2048W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2048W\");\n+\t\t}\n+\n+\t}\n+\t\n+\t@Test", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MDY0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417640641", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-04-29T22:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTg2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571861", "bodyText": "outdated", "author": "jvanhill", "createdAt": "2020-04-29T19:53:05Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {\n+\t\tfinal String methodName = \"serverRenewLongerThanValidity\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(365 * 5 + 1 +\"d\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set longer than the certificate validity period.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning that renewBeforeExpiration is too long compared to the cert validity period\", server.waitForStringInLog(\"CWPKI2048W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2048W\");\n+\t\t}\n+\n+\t}\n+\t\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewOnRestart() throws Exception {\n+\t\tfinal String methodName = \"serverRenewOnRestart\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\t\t\n+\t\tlong serverTime = System.currentTimeMillis();\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the", "originalCommit": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MDczMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417640731", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-04-29T22:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTg2MQ=="}], "type": "inlineReview"}, {"oid": "75b2bb79e35b8635be40abf224a87d171d98149c", "url": "https://github.com/OpenLiberty/open-liberty/commit/75b2bb79e35b8635be40abf224a87d171d98149c", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-29T22:09:38Z", "type": "forcePushed"}, {"oid": "dc4499c7e27ae906afd13cd0bc37431cd2077311", "url": "https://github.com/OpenLiberty/open-liberty/commit/dc4499c7e27ae906afd13cd0bc37431cd2077311", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-29T22:14:59Z", "type": "forcePushed"}, {"oid": "40191687be135d881f3ff55137f4a58361665dce", "url": "https://github.com/OpenLiberty/open-liberty/commit/40191687be135d881f3ff55137f4a58361665dce", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-29T22:45:52Z", "type": "forcePushed"}, {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039", "url": "https://github.com/OpenLiberty/open-liberty/commit/f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-30T18:26:04Z", "type": "forcePushed"}, {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "url": "https://github.com/OpenLiberty/open-liberty/commit/82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-30T19:38:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MTU4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418251589", "bodyText": "This didn't get added to the toString(). Mind putting the methods by the other get / set methods?", "author": "jvanhill", "createdAt": "2020-04-30T19:52:39Z", "path": "dev/fattest.simplicity/src/com/ibm/websphere/simplicity/config/AcmeCA.java", "diffHunk": "@@ -45,6 +45,23 @@\n \n     private String validFor; // Duration\n \n+    private String renewBeforeExpiration;", "originalCommit": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NjU2Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418286563", "bodyText": "Done and done.", "author": "kristip17", "createdAt": "2020-04-30T21:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MTU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzE5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418253196", "bodyText": "Why was this message changed? Doesn't seem like it should have been.", "author": "jvanhill", "createdAt": "2020-04-30T19:55:55Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeClient.java", "diffHunk": "@@ -1013,7 +1018,7 @@ public void renewAccountKeyPair() throws AcmeCaException {\n \t\t\t\t\t\t */\n \t\t\t\t\t\tTr.error(tc, \"CWPKI2049E\", acmeConfig.getAccountKeyFile(), backupFile.getAbsolutePath());\n \t\t\t\t\t}\n-\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2047E\", e.getMessage()), e);\n+\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2053E\", e.getMessage()), e);", "originalCommit": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NzYxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418287614", "bodyText": "Fixed, I think I was careless when I was updating the my new message keys.", "author": "kristip17", "createdAt": "2020-04-30T21:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzI5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418253299", "bodyText": "Why was this message changed? Doesn't seem like it should have been.", "author": "jvanhill", "createdAt": "2020-04-30T19:56:10Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeClient.java", "diffHunk": "@@ -990,7 +995,7 @@ public void renewAccountKeyPair() throws AcmeCaException {\n \t\t\t\t\t * We failed to generate a new file. Remove the backup file.\n \t\t\t\t\t */\n \t\t\t\t\tdeleteFile(backupFile);\n-\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2047E\", e.getMessage()), e);\n+\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2053E\", e.getMessage()), e);", "originalCommit": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjc3OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418316778", "bodyText": "Fixed", "author": "kristip17", "createdAt": "2020-04-30T22:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDQwOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418254408", "bodyText": "Not sure this method belongs here. AcmeConfig is more of a place holder for configuration (and validation of configuration) more so then for holding the logic of ACME.", "author": "jvanhill", "createdAt": "2020-04-30T19:58:25Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -439,6 +448,73 @@ private void processSubjectDN(String subjectDN) throws AcmeCaException {\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Set the amount of time before certificate expiration to renew the certificate\n+\t * \n+\t * @param retries\n+\t *            The number of time to try to update a challenge.\n+\t */\n+\t@Trivial\n+\tprivate void setRenewBeforeExpirationMs(Long ms) {\n+\t\tautoRenewOnExpiration = true;\n+\t\tif (ms != null) {\n+\t\t\tif (ms <= 0) { // disable auto renew\n+\t\t\t\tthis.renewBeforeExpirationMs = 0L;\n+\t\t\t\tautoRenewOnExpiration = false;\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Auto renewal of the certificate is disabled, renewBeforeExpirationMs was configured to \" + ms);\n+\t\t\t\t}\n+\t\t\t} else if (ms < AcmeConstants.RENEW_CERT_MIN) { // too low of a timeout, reset to the min newew allowed\n+\t\t\t\tthis.renewBeforeExpirationMs = AcmeConstants.RENEW_CERT_MIN;\n+\t\t\t\tTr.warning(tc, \"CWPKI2051W\", ms  +\"ms\", AcmeConstants.RENEW_CERT_MIN +\"ms\");\n+\t\t\t} else { \n+\t\t\t\tthis.renewBeforeExpirationMs = ms;\n+\t\t\t\t\n+\t\t\t\tif (ms < AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL) { // we have a really low time configured. Allow it, but print a general warning.\n+\t\t\t\t\tTr.warning(tc, \"CWPKI2055W\", renewBeforeExpirationMs +\"ms\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Check that the valid period of the certificate works with the configured renewBeforeExpiration. Adjust the\n+\t * renew timing if necessary.\n+\t * \n+\t * @param notBefore\n+\t * @param notAfter\n+\t * @param serialNumber\n+\t */\n+\tpublic void checkRenewTimeAgainstCertValidityPeriod(Date notBefore, Date notAfter, String serialNumber) {", "originalCommit": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxODYyOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418318628", "bodyText": "Move to AcmeClient", "author": "kristip17", "createdAt": "2020-04-30T22:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjE2NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418256165", "bodyText": "Probably don't need this. We used this in AcmeSimpleTest so we could make it work for both Pebble (https and acme URIs) and Boulder.", "author": "jvanhill", "createdAt": "2020-04-30T20:01:54Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {", "originalCommit": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxOTEwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418319103", "bodyText": "Removed", "author": "kristip17", "createdAt": "2020-04-30T22:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjE2NQ=="}], "type": "inlineReview"}, {"oid": "8bad02ebc415d86c5c420f4228d11015958ccd83", "url": "https://github.com/OpenLiberty/open-liberty/commit/8bad02ebc415d86c5c420f4228d11015958ccd83", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-04-30T20:55:56Z", "type": "forcePushed"}, {"oid": "2ce41549841ed860fb7297878336309b9ee7c3d8", "url": "https://github.com/OpenLiberty/open-liberty/commit/2ce41549841ed860fb7297878336309b9ee7c3d8", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-05-01T02:07:51Z", "type": "forcePushed"}, {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "url": "https://github.com/OpenLiberty/open-liberty/commit/392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-05-01T02:26:35Z", "type": "commit"}, {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "url": "https://github.com/OpenLiberty/open-liberty/commit/392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "message": "Issue 11185: Add renewal request time configuration", "committedDate": "2020-05-01T02:26:35Z", "type": "forcePushed"}]}