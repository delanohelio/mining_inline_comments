{"pr_number": 14122, "pr_title": "Rework KerberosTicket refresh mechanism", "pr_createdAt": "2020-09-23T18:16:15Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14122", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxOTYyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14122#discussion_r494419620", "bodyText": "This remove/add code is what needed to be replaced, since sub.getPrivateCredentials(KerberosTicket.class) only returns a copy of the credential set, not the actual set of credentials", "author": "aguibert", "createdAt": "2020-09-24T15:39:20Z", "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/internal/LRUCache.java", "diffHunk": "@@ -84,37 +86,38 @@ public Subject get(KerberosPrincipal principal) {\n \n             // Ensure the KerberosTicket is current and attempt to renew if not\n             Set<KerberosTicket> kerbTickets = sub.getPrivateCredentials(KerberosTicket.class);\n-            KerberosTicket renewedTicket = null;\n-            KerberosTicket oldTicket = null;\n             for (KerberosTicket kerbTicket : kerbTickets) {\n-                if (!kerbTicket.isCurrent()) {\n-                    if (kerbTicket.isRenewable()) {\n-                        // If the ticket is not current but is renewable, try to renew the ticket if\n-                        // there is at least 10m remaining on the renewTill time\n-                        long renewTillMs = kerbTicket.getRenewTill().getTime();\n-                        long timeLeft = renewTillMs - System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(10);\n-                        if (timeLeft < 0) {\n+                if (kerbTicket.isCurrent()) {\n+                    // we have a valid ticket\n+                    break;\n+                }\n+\n+                if (kerbTicket.isRenewable()) {\n+                    // If the ticket is not current but is renewable, try to renew the ticket if\n+                    // there is at least 10m remaining on the renewTill time\n+                    Instant renewTill = kerbTicket.getRenewTill().toInstant().minus(10, ChronoUnit.MINUTES);\n+                    if (Instant.now().isAfter(renewTill)) {\n+                        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n+                            Tr.debug(tc, \"no match because is renewable but past the renewTill time. renewTill=\" + renewTill);\n+                        return null;\n+                    } else {\n+                        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n+                            Tr.debug(tc, \"found match for non-current ticket, but ticket is renewable. Attempting to renew now\");\n+                        try {\n+                            kerbTicket.refresh();\n+                        } catch (RefreshFailedException e) {\n                             if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n-                                Tr.debug(tc, \"no match because is renewable but past the renewTill time. timeLeft=\" + timeLeft);\n+                                Tr.debug(tc, \"unable to refresh kerberos ticket due to: \" + e);\n                             return null;\n-                        } else {\n-                            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n-                                Tr.debug(tc, \"found match for non-current ticket, but ticket is renewable. Attempting to renew now\");\n-                            oldTicket = kerbTicket;\n-                            renewedTicket = cloneTicket(kerbTicket);\n-                            break;\n                         }\n-                    } else {\n-                        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n-                            Tr.debug(tc, \"no match because ticket is not current and not renewable\");\n-                        return null;\n+                        break;\n                     }\n+                } else {\n+                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n+                        Tr.debug(tc, \"no match because ticket is not current and not renewable\");\n+                    return null;\n                 }\n             }\n-            if (oldTicket != null && renewedTicket != null) {\n-                kerbTickets.remove(oldTicket);", "originalCommit": "fba303f2fea9354125808933198a34c2b92b0e6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcyNDczMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14122#discussion_r494724732", "bodyText": "ok, so we need to clone the Kerberos ticket and refresh/renew as needed.", "author": "utle", "createdAt": "2020-09-25T03:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxOTYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzU4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14122#discussion_r495207581", "bodyText": "If we cloned the ticket and refreshed the cloned ticket then we would need to mutate the set of private credentials on the subject, which I hesitate to do because that could impact existing resources that are using this Subject.\nInstead, I think we should just call kerbTicket.refresh() and not clone/replace it. I verified in the JDK implementation of KerberosTicket.refresh() that the ticket does properly synchronize on itself and clone and re-init its internal state during the refresh operation.", "author": "aguibert", "createdAt": "2020-09-25T20:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxOTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcyMzE0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14122#discussion_r494723140", "bodyText": "If the kerberos ticket is current but almost expired, should we try to refresh it?", "author": "utle", "createdAt": "2020-09-25T03:13:48Z", "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/internal/LRUCache.java", "diffHunk": "@@ -84,37 +86,38 @@ public Subject get(KerberosPrincipal principal) {\n \n             // Ensure the KerberosTicket is current and attempt to renew if not\n             Set<KerberosTicket> kerbTickets = sub.getPrivateCredentials(KerberosTicket.class);\n-            KerberosTicket renewedTicket = null;\n-            KerberosTicket oldTicket = null;\n             for (KerberosTicket kerbTicket : kerbTickets) {\n-                if (!kerbTicket.isCurrent()) {\n-                    if (kerbTicket.isRenewable()) {\n-                        // If the ticket is not current but is renewable, try to renew the ticket if\n-                        // there is at least 10m remaining on the renewTill time\n-                        long renewTillMs = kerbTicket.getRenewTill().getTime();\n-                        long timeLeft = renewTillMs - System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(10);\n-                        if (timeLeft < 0) {\n+                if (kerbTicket.isCurrent()) {\n+                    // we have a valid ticket\n+                    break;", "originalCommit": "fba303f2fea9354125808933198a34c2b92b0e6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTA4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14122#discussion_r495205085", "bodyText": "yes good point, I'll fix this", "author": "aguibert", "createdAt": "2020-09-25T20:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcyMzE0MA=="}], "type": "inlineReview"}, {"oid": "898e8e4f1508022fadebe23153d0874dc02d374a", "url": "https://github.com/OpenLiberty/open-liberty/commit/898e8e4f1508022fadebe23153d0874dc02d374a", "message": "Rework KerberosTicket refresh mechanism", "committedDate": "2020-09-25T20:29:50Z", "type": "commit"}, {"oid": "898e8e4f1508022fadebe23153d0874dc02d374a", "url": "https://github.com/OpenLiberty/open-liberty/commit/898e8e4f1508022fadebe23153d0874dc02d374a", "message": "Rework KerberosTicket refresh mechanism", "committedDate": "2020-09-25T20:29:50Z", "type": "forcePushed"}]}