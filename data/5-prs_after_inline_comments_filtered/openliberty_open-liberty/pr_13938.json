{"pr_number": 13938, "pr_title": "First delivery of FATs for mpJwt-1.2", "pr_createdAt": "2020-09-15T01:03:26Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13938", "timeline": [{"oid": "9a285bfac781438db5ef12aebf00b4689807f4ea", "url": "https://github.com/OpenLiberty/open-liberty/commit/9a285bfac781438db5ef12aebf00b4689807f4ea", "message": "First delivery of FATs for mpJwt-1.2", "committedDate": "2020-09-14T23:38:21Z", "type": "commit"}, {"oid": "61495d48d42569c991f1e4ce07ab820f9da99306", "url": "https://github.com/OpenLiberty/open-liberty/commit/61495d48d42569c991f1e4ce07ab820f9da99306", "message": "add trace io.openliberty.security.* trace to test servers", "committedDate": "2020-09-16T15:12:53Z", "type": "commit"}, {"oid": "2cd2b68f797170ee5443c8d6d93c7e9a9b745d10", "url": "https://github.com/OpenLiberty/open-liberty/commit/2cd2b68f797170ee5443c8d6d93c7e9a9b745d10", "message": "Merge remote-tracking branch 'origin/integration' into mpJwt12Fats_firstDelivery", "committedDate": "2020-09-17T16:33:15Z", "type": "commit"}, {"oid": "eb57eb09672500b5442c40dd1917ebb8f112e16c", "url": "https://github.com/OpenLiberty/open-liberty/commit/eb57eb09672500b5442c40dd1917ebb8f112e16c", "message": "Updates for beta", "committedDate": "2020-09-21T16:28:34Z", "type": "commit"}, {"oid": "e8407e5110a84a6c97231c724e13dc960c974127", "url": "https://github.com/OpenLiberty/open-liberty/commit/e8407e5110a84a6c97231c724e13dc960c974127", "message": "Merge remote-tracking branch 'origin/integration' into mpJwt12Fats_firstDelivery", "committedDate": "2020-09-21T16:30:19Z", "type": "commit"}, {"oid": "4062888a258eb890de3f41c4dfc359cb5776b358", "url": "https://github.com/OpenLiberty/open-liberty/commit/4062888a258eb890de3f41c4dfc359cb5776b358", "message": "add wait for ssl inited during server startup", "committedDate": "2020-09-21T17:55:28Z", "type": "commit"}, {"oid": "993e36c54187e0a51a2748a04d4d7eb9eff92619", "url": "https://github.com/OpenLiberty/open-liberty/commit/993e36c54187e0a51a2748a04d4d7eb9eff92619", "message": "Merge remote-tracking branch 'origin/integration' into mpJwt12Fats_firstDelivery", "committedDate": "2020-09-23T14:30:26Z", "type": "commit"}, {"oid": "032c9bcab516ed71ab543437574b0f35a874f3cc", "url": "https://github.com/OpenLiberty/open-liberty/commit/032c9bcab516ed71ab543437574b0f35a874f3cc", "message": "Fix bad auto-merge", "committedDate": "2020-09-23T19:43:34Z", "type": "commit"}, {"oid": "eb28c0502ad9797dfdd68dac26d80179db62f333", "url": "https://github.com/OpenLiberty/open-liberty/commit/eb28c0502ad9797dfdd68dac26d80179db62f333", "message": "Merge remote-tracking branch 'origin/integration' into mpJwt12Fats_firstDelivery", "committedDate": "2020-09-24T22:35:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwOTc0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r494509740", "bodyText": "Would it be better to set these kinds of restores at the end of tests that are known to reconfigure the server? Then we may not need to do a just-in-case restore in these other tests.", "author": "ayoho", "createdAt": "2020-09-24T18:02:44Z", "path": "dev/com.ibm.ws.security.mp.jwt.1.1_fat/fat/src/com/ibm/ws/security/mp/jwt11/fat/MPJwtConfigUsingBuilderTests.java", "diffHunk": "@@ -411,7 +345,8 @@ public void MPJwtConfigUsingBuilderTests_authFilter_false() throws Exception {\n     @Test\n     public void MPJwtConfigUsingBuilderTests_Audience_Valid() throws Exception {\n \n-        super.restoreTestServers();\n+        // restore the server just in case a previous test changed the config (forcing a restore in tests that do NOT reconfig is quicker than having all tests restore when then finish)\n+        resourceServer.restoreServerConfigurationAndWaitForApps();", "originalCommit": "032c9bcab516ed71ab543437574b0f35a874f3cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NTE2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r496145161", "bodyText": "Just about every test in the class reconfigures the server when the test case starts.  There are very few tests that use the default config.  Skipping the restore at the end of each test (when the next test will reconfigure again) saves tons of time.  I'm saving 40-45 reconfigs in this one test class doing it this way.", "author": "c00crane", "createdAt": "2020-09-28T18:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwOTc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MzAyMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r494563023", "bodyText": "Would we be able to simplify and remove this test (and Feature11Enabled_ConfigInAppTests_HeaderIsAuthorizationInMPConfig_UnderWebInf_test)? There are other tests that pass the token in the Authorization header, and you have other tests that set a different value for mp.jwt.token.header that will verify that the 1.1 feature ignores the property as expected.", "author": "ayoho", "createdAt": "2020-09-24T19:33:23Z", "path": "dev/com.ibm.ws.security.mp.jwt.1.2_fat/fat/src/com/ibm/ws/security/mp/jwt12/fat/featureSupportTests/feature1_1/Feature11Enabled_ConfigInAppTests.java", "diffHunk": "@@ -0,0 +1,244 @@\n+\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.mp.jwt12.fat.featureSupportTests.feature1_1;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.ws.security.jwt.fat.mpjwt.MpJwt12FatConstants;\n+import com.ibm.ws.security.jwt.fat.mpjwt.MpJwtFatConstants;\n+import com.ibm.ws.security.mp.jwt11.fat.utils.MP11ConfigSettings;\n+import com.ibm.ws.security.mp.jwt12.fat.sharedTests.MPJwt12MPConfigTests;\n+import com.ibm.ws.security.mp.jwt12.fat.utils.MP12ConfigSettings;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * This test class that will test the placement of mp jwt config settings inside of an app. They can be found in multiple\n+ * places within the application. The server.xml will only specify the signature algorithm (to match each test case)\n+ * and audience (just so we can re-use the same builders) - everything else will come from the application.\n+ * * The tests will do one of the following:\n+ * - request use of app that has placement of config in \"resources/META-INF/microprofile-config.properties\"\n+ * - request use of app that has placement of config in \"resources/WEB-INF/classes/META-INF/microprofile-config.properties\"\n+ *\n+ **/\n+\n+@Mode(TestMode.FULL)\n+@RunWith(FATRunner.class)\n+public class Feature11Enabled_ConfigInAppTests extends MPJwt12MPConfigTests {\n+\n+    public static Class<?> thisClass = Feature11Enabled_ConfigInAppTests.class;\n+\n+    @Server(\"com.ibm.ws.security.mp.jwt.1.2.fat\")\n+    public static LibertyServer resourceServer;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+\n+        setUpAndStartBuilderServer(jwtBuilderServer, \"server_using_buildApp.xml\");\n+\n+        MP12ConfigSettings mpConfigSettings = new MP12ConfigSettings(MP12ConfigSettings.PublicKeyLocationNotSet, MP12ConfigSettings.PublicKeyNotSet, MP12ConfigSettings.IssuerNotSet, MpJwt12FatConstants.X509_CERT, MP12ConfigSettings.DefaultHeader, MP12ConfigSettings.DefaultCookieName, \"client01, client02\", MP12ConfigSettings.AlgorithmNotSet);\n+\n+        setupBootstrapPropertiesForMPTests(resourceServer, MP11ConfigSettings.jwksUri, mpConfigSettings.getCertType().equals(MpJwtFatConstants.JWK_CERT));\n+\n+        deployRSServerMPConfigInAppHeaderApps(resourceServer, mpConfigSettings);\n+\n+        startRSServerForMPTests(resourceServer, \"rs_server_orig_1_1_withOtherApps.xml\");\n+\n+    }\n+\n+    /******************************************** tests **************************************/\n+\n+    /********************************* End Header & Cookie tests *********************************/\n+    /**\n+     * Test sets the mp config property \"mp.jwt.token.header\" to \"Authorization\" in META-INF.\n+     * The mpJwt-1.1 feature does not support this property, so, we should see the runtime use the default behavior\n+     * which is to look for the token in the Auth Header.\n+     * The test will pass the token in the Auth header, so, we expect to successfully access our protected app.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Feature11Enabled_ConfigInAppTests_HeaderIsAuthorizationInMPConfig_InMetaInf_test() throws Exception {", "originalCommit": "032c9bcab516ed71ab543437574b0f35a874f3cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjU1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r495186555", "bodyText": "Doing app.get(0) and app.get(1) to get the app root context and app (name?) is pretty unclear. Could the test app array actually be something like a list or set of classes with getters for the actual elements that make up the app/app string?", "author": "ayoho", "createdAt": "2020-09-25T19:21:42Z", "path": "dev/com.ibm.ws.security.mp.jwt.1.2_fat/fat/src/com/ibm/ws/security/mp/jwt12/fat/sharedTests/MPJwt12MPConfigTests.java", "diffHunk": "@@ -0,0 +1,647 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.mp.jwt12.fat.sharedTests;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.Page;\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.fat.common.expectations.Expectations;\n+import com.ibm.ws.security.fat.common.expectations.ResponseStatusExpectation;\n+import com.ibm.ws.security.fat.common.expectations.ServerMessageExpectation;\n+import com.ibm.ws.security.fat.common.utils.CommonIOUtils;\n+import com.ibm.ws.security.jwt.fat.mpjwt.MpJwt12FatConstants;\n+import com.ibm.ws.security.jwt.fat.mpjwt.MpJwtFatConstants;\n+import com.ibm.ws.security.mp.jwt11.fat.sharedTests.MPJwt11MPConfigTests;\n+import com.ibm.ws.security.mp.jwt11.fat.sharedTests.MPJwtMPConfigTests;\n+import com.ibm.ws.security.mp.jwt11.fat.utils.MpJwtMessageConstants;\n+import com.ibm.ws.security.mp.jwt12.fat.utils.MP12ConfigSettings;\n+\n+import componenttest.annotation.MinimumJavaLevel;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * This is a common test class that will test the alternate placement of mp jwt\n+ * config settings. They can be found in multiple places within the application,\n+ * or can be set as system or environment variables. The extending test classes\n+ * will do one of the following: - request use of an app that has placement of\n+ * MPConfig in \"resources/META-INF/microprofile-config.properties\" - request use\n+ * of an app that has placement of MPConfig in\n+ * \"resources/WEB-INF/classes/META-INF/microprofile-config.properties\" - request\n+ * use of a server that has placement of MPConfig in jvm.options - setup\n+ * MPConfig as environment variables\n+ *\n+ **/\n+\n+@MinimumJavaLevel(javaLevel = 8)\n+@RunWith(FATRunner.class)\n+public class MPJwt12MPConfigTests extends MPJwtMPConfigTests {\n+\n+    public static Class<?> thisClass = MPJwt12MPConfigTests.class;\n+\n+    @Server(\"com.ibm.ws.security.mp.jwt.1.2.fat.builder\")\n+    public static LibertyServer jwtBuilderServer;\n+\n+    protected static final String BothHeaderGood = \"HeaderGood\";\n+    protected static final String BothCookieGood = \"CookieGood\";\n+\n+    /********************************************\n+     * helper methods\n+     **************************************/\n+\n+    /**\n+     * Setup apps, System properties or environment variables needed for the\n+     * tests. Return a list of apps that we need to wait for at startup.\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings\n+     *            - the settings values to use\n+     * @param mpConfigLocation\n+     *            - where to put the settings (system properties, env vars, or\n+     *            in apps)\n+     * @return\n+     * @throws Exception\n+     */\n+\n+    // Need to pass in the resource server reference as we can be using one\n+    // of several\n+    protected static void setUpAndStartRSServerForTests(LibertyServer server, String configFile, MP12ConfigSettings mpConfigSettings,\n+                                                        MPConfigLocation mpConfigLocation) throws Exception {\n+\n+        setupBootstrapPropertiesForMPTests(server, MP12ConfigSettings.jwksUri, mpConfigSettings.getCertType().equals(MpJwtFatConstants.JWK_CERT));\n+\n+        setupMPConfig(server, mpConfigSettings, mpConfigLocation);\n+\n+        startRSServerForMPTests(server, configFile);\n+\n+    }\n+\n+    /**\n+     * Setup the system properties, environment variables or\n+     * microprofile-config.properties in the test apps as appropriate. When\n+     * testing with System properties, we will update the jvm.options file and\n+     * install an app with no microprofile-config.properties file When testing\n+     * with env variables, we will set those in the server environment and\n+     * install an app with no microprofile-config.properties file When testing\n+     * with microprofile-config.properties in the app, we will create multiple\n+     * apps with a variety of settings within the microprofile-config.properties\n+     * file within the app. We'll also create apps with the\n+     * microprofile-config.properties in the META-INF directory and the\n+     * WEB-INF/classes/META-INF directory.\n+     *\n+     * @param theServer\n+     *            - the server to install the apps on and set the system\n+     *            properties or env variables for\n+     * @param mpConfigSettings\n+     *            - The microprofile settings to put into the various locations\n+     * @param mpConfigLocation\n+     *            - where this test instance would like the MPConfig settings\n+     *            (system properties, environment variables, or\n+     *            microprofile-config.properties in apps)\n+     * @throws Exception\n+     */\n+\n+    public static void setupMPConfig(LibertyServer theServer, MP12ConfigSettings mpConfigSettings, MPConfigLocation mpConfigLocation) throws Exception {\n+\n+        // build fully resolved issuer\n+        mpConfigSettings.setIssuer(buildIssuer(jwtBuilderServer, mpConfigSettings.getIssuer()));\n+        // remove variables/dollar signs/... (need the server defined before we\n+        // can do this...\n+        mpConfigSettings.setPublicKeyLocation(resolvedJwksUri(jwtBuilderServer, mpConfigSettings.getPublicKeyLocation()));\n+\n+        Log.info(thisClass, \"setupMP12Config\", \"mpConfigLocation is set to: \" + mpConfigLocation.toString());\n+        switch (mpConfigLocation) {\n+            case SYSTEM_PROP:\n+                // if we're testing system properties, we'll need to update the\n+                // values in the jvm.options file (if the file exists, update it)\n+                setAlternateMP_ConfigProperties_InJvmOptions(theServer, mpConfigSettings);\n+                setupUtils.deployRSServerNoMPConfigInAppApp(theServer);\n+                break;\n+            case ENV_VAR:\n+                // if we're testing env variables, we'll need to set environment\n+                // variables\n+                setAlternateMP_ConfigProperties_envVars(theServer, mpConfigSettings);\n+                setupUtils.deployRSServerNoMPConfigInAppApp(theServer);\n+                break;\n+            case IN_APP:\n+                deployRSServerMPConfigInAppApps(theServer, mpConfigSettings);\n+                break;\n+            default:\n+                throw new Exception(\"Invalid MP Config location passed to setupMP12Config - tests do NOT understand \" + mpConfigLocation);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sets system properties before the server is started\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings\n+     *            - the mp-config settings values\n+     * @throws Exception\n+     */\n+    public static void setAlternateMP_ConfigProperties_InJvmOptions(LibertyServer theServer, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        String jvmFile = theServer.getServerRoot() + \"/jvm.options\";\n+        updateJvmOptionsFile(jvmFile, mpConfigSettings);\n+\n+    }\n+\n+    /**\n+     * Update the values in the jvm.options file of the server\n+     *\n+     * @param jvmOptionsFile\n+     *            - the file to update\n+     * @param publicKey\n+     *            - the publicKey value to update\n+     * @param keyLoc\n+     *            - the keyLocation value to update\n+     * @param issuer\n+     *            - the issuer value to update\n+     */\n+    static void updateJvmOptionsFile(String jvmOptionsFile, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        MPJwt11MPConfigTests.updateJvmOptionsFile(jvmOptionsFile, mpConfigSettings);\n+\n+        HashMap<String, String> optionMap = new HashMap<String, String>();\n+        optionMap.put(\"xxx_header_xxx\", mpConfigSettings.getHeader());\n+        optionMap.put(\"xxx_cookie_xxx\", mpConfigSettings.getCookie());\n+        optionMap.put(\"xxx_audience_xxx\", mpConfigSettings.getAudience());\n+        optionMap.put(\"xxx_algorithm_xxx\", mpConfigSettings.getAlgorithm());\n+        Log.info(thisClass, \"updateJvmOptionsFiles\", \"ALG: \" + mpConfigSettings.getAlgorithm());\n+\n+        CommonIOUtils cioTools = new CommonIOUtils();\n+        if (cioTools.replaceStringsInFile(jvmOptionsFile, optionMap)) {\n+            return;\n+        }\n+        throw new Exception(\"Failure updating the jvm.options file - tests will NOT behave as expected - exiting\");\n+\n+    }\n+\n+    /**\n+     * Sets/creates environment variables\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings\n+     *            - the mp-config settings values\n+     * @throws Exception\n+     */\n+    public static void setAlternateMP_ConfigProperties_envVars(LibertyServer server, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        // some platforms do NOT support env vars with \".\", so, we'll use\n+        // underscores \"_\" (our runtime allows either)\n+        String HeaderName = \"mp_jwt_token_header\";\n+        String CookieName = \"mp_jwt_token_cookie\";\n+        String AudienceName = \"mp_jwt_verify_audiences\";\n+        String AlgorithmName = \"mp_jwt_verify_publickey_algorithm\";\n+\n+        HashMap<String, String> envVars = new HashMap<String, String>();\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", HeaderName + \"=\" + mpConfigSettings.getHeader());\n+        envVars.put(HeaderName, mpConfigSettings.getHeader());\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", CookieName + \"=\" + mpConfigSettings.getCookie());\n+        envVars.put(CookieName, mpConfigSettings.getCookie());\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", AudienceName + \"=\" + mpConfigSettings.getAudience());\n+        envVars.put(AudienceName, mpConfigSettings.getAudience());\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", AlgorithmName + \"=\" + mpConfigSettings.getAlgorithm());\n+        envVars.put(AlgorithmName, mpConfigSettings.getAlgorithm());\n+\n+        MPJwt11MPConfigTests.setAlternateMP_ConfigProperties_envVars(envVars, server, mpConfigSettings);\n+    }\n+\n+    /**\n+     * Sets the MPConfig content for the microprofile-config.properties file\n+     *\n+     * @param publicKey\n+     *            - public Key value to add to properties file\n+     * @param publicKeyLocation\n+     *            - public key location value to add to the properties file\n+     * @param issuer\n+     *            - issuer value to add to the properties file\n+     * @return - return the microprofile-config.properties file content\n+     */\n+    public static String buildMPConfigFileContent(MP12ConfigSettings mpConfigSettings, String header, String cookie, String audience, String algorithm) {\n+        Log.info(thisClass, \"\",\n+                 \"mp.jwt.token.header=\" + header + \" mp.jwt.token.cookie=\" + cookie + \" mp.jwt.verify.audiences=\" + audience + \" mp.jwt.verify.publickey.algorithm=\" + algorithm);\n+        return MPJwt11MPConfigTests.buildMPConfigFileContent(mpConfigSettings.getPublicKey(), mpConfigSettings.getPublicKeyLocation(), mpConfigSettings.getIssuer())\n+               + System.lineSeparator() + \"mp.jwt.token.header=\" + header + System.lineSeparator()\n+               + \"mp.jwt.token.cookie=\" + cookie + System.lineSeparator() + \"mp.jwt.verify.audiences=\" + audience + System.lineSeparator() + \"mp.jwt.verify.publickey.algorithm=\"\n+               + algorithm;\n+\n+    }\n+\n+    /**\n+     * Copy the master wars (one for META-INF and one for WEB-INF testing) and\n+     * create new wars that contain updated microprofile-config.properties\n+     * files. This method creates many wars that will be used later to test both\n+     * good and bad values within the microprofile-config.properties files.\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings-\n+     *            a master/default set of mp-config settings (the wars will be\n+     *            created with specific good or bad values)\n+     * @throws Exception\n+     */\n+    public static void deployRSServerMPConfigInAppApps(LibertyServer server, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        Log.info(thisClass, \"1.2 deployRSServerMPConfigInAppApps\", \"1.2\");\n+\n+        try {\n+\n+            // the microprofile-config.properties files will have xxx_<attr>_xxx\n+            // values that need to be replaced\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, mpConfigSettings.getHeader(), mpConfigSettings.getCookie(),\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, mpConfigSettings.getHeader(), mpConfigSettings.getCookie(),\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+\n+        } catch (Exception e) {\n+            Log.info(thisClass, \"MPJwtAltConfig\", \"Hit an exception updating the war file\" + e.getMessage());\n+            throw e;\n+        }\n+\n+    }\n+\n+    public static void deployRSServerMPConfigInAppHeaderApps(LibertyServer server, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        Log.info(thisClass, \"1.2 deployRSServerMPConfigInAppHeaderApps\", \"1.2\");\n+\n+        try {\n+            // Header and cookie test setup\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_AUTHORIZATION_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_AUTHORIZATION_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_COOKIENAME_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.DefaultCookieName,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_COOKIENAME_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.DefaultCookieName,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_OTHER_COOKIENAME_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, \"OtherCookieName\",\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_OTHER_COOKIENAME_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, \"OtherCookieName\",\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.BAD_HEADER_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, \"badHeader\", MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.BAD_HEADER_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, \"badHeader\", mpConfigSettings.getCookie(),\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+\n+            // audiences test setup\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_AUDIENCES_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_AUDIENCES_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.BAD_AUDIENCES_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        \"BadAudience\", mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.BAD_AUDIENCES_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          \"BadAudience\", mpConfigSettings.getAlgorithm()));\n+\n+            // algorithm test setup\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_ALGORITHM_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_RS256));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_ALGORITHM_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_RS256));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.BAD_ALGORITHM_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.BAD_ALGORITHM_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+            // let's create an app with mp config properties that over ride the 1.1 and 1.2 alg settings\n+            MP12ConfigSettings overrideMpConfigSettings = new MP12ConfigSettings(mpConfigSettings.getPublicKeyLocation(), MP12ConfigSettings\n+                            .getComplexKey(server, MP12ConfigSettings.es256PubKey), mpConfigSettings\n+                                            .getIssuer(), MpJwt12FatConstants.X509_CERT, mpConfigSettings\n+                                                            .getHeader(), mpConfigSettings.getCookie(), mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm());\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_KEY_AND_ALGORITHM_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(overrideMpConfigSettings, MpJwt12FatConstants.AUTHORIZATION,\n+                                                                                        MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_KEY_AND_ALGORITHM_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(overrideMpConfigSettings, MpJwt12FatConstants.AUTHORIZATION,\n+                                                                                          MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+\n+        } catch (Exception e) {\n+            Log.info(thisClass, \"MPJwtAltConfig\", \"Hit an exception updating the war file\" + e.getMessage());\n+            throw e;\n+        }\n+\n+    }\n+\n+    public Map<String, String> addToMap(Map<String, String> currentMap, String name, String value) throws Exception {\n+\n+        if (currentMap == null) {\n+            currentMap = new HashMap<String, String>();\n+        }\n+        currentMap.put(name, value);\n+        return currentMap;\n+    }\n+\n+    public Page invokeUrlWithOtherHeader(WebClient webClient, String url, String location, String name, String value) throws Exception {\n+\n+        Map<String, String> header = addToMap(null, location, name + \" \" + value);\n+\n+        return actions.invokeUrlWithParametersAndHeaders(_testName, webClient, url, null, header);\n+\n+    }\n+\n+    /**\n+     * All of the tests in this class follow the same flow. The differences between them are which builder they use to create a\n+     * token, the config they use in the resource server\n+     * and then whether they expect a failure (mainly due to a mis-match between the token and the servers config).\n+     * We'll put the common steps in this method so we're not duplicating steps/code over and over.\n+     *\n+     * @param builtToken\n+     *            - the token built to reflect the goal of the calling test\n+     * @param expectations\n+     *            - the expected behavior that we need to validate\n+     * @throws Exception\n+     */\n+    public void genericConfigTest(LibertyServer rs_server, String builder, String location, String name, Expectations expectations) throws Exception {\n+\n+        String thisMethod = \"genericConfigTest\";\n+        loggingUtils.printMethodName(thisMethod);\n+\n+        for (List<String> app : getTestAppArray(rs_server)) {\n+            standardTestFlow(builder, app.get(0), app.get(1), location, name, expectations);", "originalCommit": "eb28c0502ad9797dfdd68dac26d80179db62f333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NDIxMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r496194211", "bodyText": "Added a testApp class with getters, constructor...", "author": "c00crane", "createdAt": "2020-09-28T19:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4Nzg5NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r495187895", "bodyText": "Having a separate class kinda like we did with TestSettings would be useful for setting all of this information and avoiding nine overloaded standardTestFlow methods.", "author": "ayoho", "createdAt": "2020-09-25T19:24:44Z", "path": "dev/com.ibm.ws.security.mp.jwt.1.2_fat/fat/src/com/ibm/ws/security/mp/jwt12/fat/sharedTests/MPJwt12MPConfigTests.java", "diffHunk": "@@ -0,0 +1,647 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.mp.jwt12.fat.sharedTests;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.Page;\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.fat.common.expectations.Expectations;\n+import com.ibm.ws.security.fat.common.expectations.ResponseStatusExpectation;\n+import com.ibm.ws.security.fat.common.expectations.ServerMessageExpectation;\n+import com.ibm.ws.security.fat.common.utils.CommonIOUtils;\n+import com.ibm.ws.security.jwt.fat.mpjwt.MpJwt12FatConstants;\n+import com.ibm.ws.security.jwt.fat.mpjwt.MpJwtFatConstants;\n+import com.ibm.ws.security.mp.jwt11.fat.sharedTests.MPJwt11MPConfigTests;\n+import com.ibm.ws.security.mp.jwt11.fat.sharedTests.MPJwtMPConfigTests;\n+import com.ibm.ws.security.mp.jwt11.fat.utils.MpJwtMessageConstants;\n+import com.ibm.ws.security.mp.jwt12.fat.utils.MP12ConfigSettings;\n+\n+import componenttest.annotation.MinimumJavaLevel;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * This is a common test class that will test the alternate placement of mp jwt\n+ * config settings. They can be found in multiple places within the application,\n+ * or can be set as system or environment variables. The extending test classes\n+ * will do one of the following: - request use of an app that has placement of\n+ * MPConfig in \"resources/META-INF/microprofile-config.properties\" - request use\n+ * of an app that has placement of MPConfig in\n+ * \"resources/WEB-INF/classes/META-INF/microprofile-config.properties\" - request\n+ * use of a server that has placement of MPConfig in jvm.options - setup\n+ * MPConfig as environment variables\n+ *\n+ **/\n+\n+@MinimumJavaLevel(javaLevel = 8)\n+@RunWith(FATRunner.class)\n+public class MPJwt12MPConfigTests extends MPJwtMPConfigTests {\n+\n+    public static Class<?> thisClass = MPJwt12MPConfigTests.class;\n+\n+    @Server(\"com.ibm.ws.security.mp.jwt.1.2.fat.builder\")\n+    public static LibertyServer jwtBuilderServer;\n+\n+    protected static final String BothHeaderGood = \"HeaderGood\";\n+    protected static final String BothCookieGood = \"CookieGood\";\n+\n+    /********************************************\n+     * helper methods\n+     **************************************/\n+\n+    /**\n+     * Setup apps, System properties or environment variables needed for the\n+     * tests. Return a list of apps that we need to wait for at startup.\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings\n+     *            - the settings values to use\n+     * @param mpConfigLocation\n+     *            - where to put the settings (system properties, env vars, or\n+     *            in apps)\n+     * @return\n+     * @throws Exception\n+     */\n+\n+    // Need to pass in the resource server reference as we can be using one\n+    // of several\n+    protected static void setUpAndStartRSServerForTests(LibertyServer server, String configFile, MP12ConfigSettings mpConfigSettings,\n+                                                        MPConfigLocation mpConfigLocation) throws Exception {\n+\n+        setupBootstrapPropertiesForMPTests(server, MP12ConfigSettings.jwksUri, mpConfigSettings.getCertType().equals(MpJwtFatConstants.JWK_CERT));\n+\n+        setupMPConfig(server, mpConfigSettings, mpConfigLocation);\n+\n+        startRSServerForMPTests(server, configFile);\n+\n+    }\n+\n+    /**\n+     * Setup the system properties, environment variables or\n+     * microprofile-config.properties in the test apps as appropriate. When\n+     * testing with System properties, we will update the jvm.options file and\n+     * install an app with no microprofile-config.properties file When testing\n+     * with env variables, we will set those in the server environment and\n+     * install an app with no microprofile-config.properties file When testing\n+     * with microprofile-config.properties in the app, we will create multiple\n+     * apps with a variety of settings within the microprofile-config.properties\n+     * file within the app. We'll also create apps with the\n+     * microprofile-config.properties in the META-INF directory and the\n+     * WEB-INF/classes/META-INF directory.\n+     *\n+     * @param theServer\n+     *            - the server to install the apps on and set the system\n+     *            properties or env variables for\n+     * @param mpConfigSettings\n+     *            - The microprofile settings to put into the various locations\n+     * @param mpConfigLocation\n+     *            - where this test instance would like the MPConfig settings\n+     *            (system properties, environment variables, or\n+     *            microprofile-config.properties in apps)\n+     * @throws Exception\n+     */\n+\n+    public static void setupMPConfig(LibertyServer theServer, MP12ConfigSettings mpConfigSettings, MPConfigLocation mpConfigLocation) throws Exception {\n+\n+        // build fully resolved issuer\n+        mpConfigSettings.setIssuer(buildIssuer(jwtBuilderServer, mpConfigSettings.getIssuer()));\n+        // remove variables/dollar signs/... (need the server defined before we\n+        // can do this...\n+        mpConfigSettings.setPublicKeyLocation(resolvedJwksUri(jwtBuilderServer, mpConfigSettings.getPublicKeyLocation()));\n+\n+        Log.info(thisClass, \"setupMP12Config\", \"mpConfigLocation is set to: \" + mpConfigLocation.toString());\n+        switch (mpConfigLocation) {\n+            case SYSTEM_PROP:\n+                // if we're testing system properties, we'll need to update the\n+                // values in the jvm.options file (if the file exists, update it)\n+                setAlternateMP_ConfigProperties_InJvmOptions(theServer, mpConfigSettings);\n+                setupUtils.deployRSServerNoMPConfigInAppApp(theServer);\n+                break;\n+            case ENV_VAR:\n+                // if we're testing env variables, we'll need to set environment\n+                // variables\n+                setAlternateMP_ConfigProperties_envVars(theServer, mpConfigSettings);\n+                setupUtils.deployRSServerNoMPConfigInAppApp(theServer);\n+                break;\n+            case IN_APP:\n+                deployRSServerMPConfigInAppApps(theServer, mpConfigSettings);\n+                break;\n+            default:\n+                throw new Exception(\"Invalid MP Config location passed to setupMP12Config - tests do NOT understand \" + mpConfigLocation);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sets system properties before the server is started\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings\n+     *            - the mp-config settings values\n+     * @throws Exception\n+     */\n+    public static void setAlternateMP_ConfigProperties_InJvmOptions(LibertyServer theServer, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        String jvmFile = theServer.getServerRoot() + \"/jvm.options\";\n+        updateJvmOptionsFile(jvmFile, mpConfigSettings);\n+\n+    }\n+\n+    /**\n+     * Update the values in the jvm.options file of the server\n+     *\n+     * @param jvmOptionsFile\n+     *            - the file to update\n+     * @param publicKey\n+     *            - the publicKey value to update\n+     * @param keyLoc\n+     *            - the keyLocation value to update\n+     * @param issuer\n+     *            - the issuer value to update\n+     */\n+    static void updateJvmOptionsFile(String jvmOptionsFile, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        MPJwt11MPConfigTests.updateJvmOptionsFile(jvmOptionsFile, mpConfigSettings);\n+\n+        HashMap<String, String> optionMap = new HashMap<String, String>();\n+        optionMap.put(\"xxx_header_xxx\", mpConfigSettings.getHeader());\n+        optionMap.put(\"xxx_cookie_xxx\", mpConfigSettings.getCookie());\n+        optionMap.put(\"xxx_audience_xxx\", mpConfigSettings.getAudience());\n+        optionMap.put(\"xxx_algorithm_xxx\", mpConfigSettings.getAlgorithm());\n+        Log.info(thisClass, \"updateJvmOptionsFiles\", \"ALG: \" + mpConfigSettings.getAlgorithm());\n+\n+        CommonIOUtils cioTools = new CommonIOUtils();\n+        if (cioTools.replaceStringsInFile(jvmOptionsFile, optionMap)) {\n+            return;\n+        }\n+        throw new Exception(\"Failure updating the jvm.options file - tests will NOT behave as expected - exiting\");\n+\n+    }\n+\n+    /**\n+     * Sets/creates environment variables\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings\n+     *            - the mp-config settings values\n+     * @throws Exception\n+     */\n+    public static void setAlternateMP_ConfigProperties_envVars(LibertyServer server, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        // some platforms do NOT support env vars with \".\", so, we'll use\n+        // underscores \"_\" (our runtime allows either)\n+        String HeaderName = \"mp_jwt_token_header\";\n+        String CookieName = \"mp_jwt_token_cookie\";\n+        String AudienceName = \"mp_jwt_verify_audiences\";\n+        String AlgorithmName = \"mp_jwt_verify_publickey_algorithm\";\n+\n+        HashMap<String, String> envVars = new HashMap<String, String>();\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", HeaderName + \"=\" + mpConfigSettings.getHeader());\n+        envVars.put(HeaderName, mpConfigSettings.getHeader());\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", CookieName + \"=\" + mpConfigSettings.getCookie());\n+        envVars.put(CookieName, mpConfigSettings.getCookie());\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", AudienceName + \"=\" + mpConfigSettings.getAudience());\n+        envVars.put(AudienceName, mpConfigSettings.getAudience());\n+        Log.info(thisClass, \"setAlternateMP_ConfigProperties_envVars\", AlgorithmName + \"=\" + mpConfigSettings.getAlgorithm());\n+        envVars.put(AlgorithmName, mpConfigSettings.getAlgorithm());\n+\n+        MPJwt11MPConfigTests.setAlternateMP_ConfigProperties_envVars(envVars, server, mpConfigSettings);\n+    }\n+\n+    /**\n+     * Sets the MPConfig content for the microprofile-config.properties file\n+     *\n+     * @param publicKey\n+     *            - public Key value to add to properties file\n+     * @param publicKeyLocation\n+     *            - public key location value to add to the properties file\n+     * @param issuer\n+     *            - issuer value to add to the properties file\n+     * @return - return the microprofile-config.properties file content\n+     */\n+    public static String buildMPConfigFileContent(MP12ConfigSettings mpConfigSettings, String header, String cookie, String audience, String algorithm) {\n+        Log.info(thisClass, \"\",\n+                 \"mp.jwt.token.header=\" + header + \" mp.jwt.token.cookie=\" + cookie + \" mp.jwt.verify.audiences=\" + audience + \" mp.jwt.verify.publickey.algorithm=\" + algorithm);\n+        return MPJwt11MPConfigTests.buildMPConfigFileContent(mpConfigSettings.getPublicKey(), mpConfigSettings.getPublicKeyLocation(), mpConfigSettings.getIssuer())\n+               + System.lineSeparator() + \"mp.jwt.token.header=\" + header + System.lineSeparator()\n+               + \"mp.jwt.token.cookie=\" + cookie + System.lineSeparator() + \"mp.jwt.verify.audiences=\" + audience + System.lineSeparator() + \"mp.jwt.verify.publickey.algorithm=\"\n+               + algorithm;\n+\n+    }\n+\n+    /**\n+     * Copy the master wars (one for META-INF and one for WEB-INF testing) and\n+     * create new wars that contain updated microprofile-config.properties\n+     * files. This method creates many wars that will be used later to test both\n+     * good and bad values within the microprofile-config.properties files.\n+     *\n+     * @param theServer\n+     *            - the resource server\n+     * @param mpConfigSettings-\n+     *            a master/default set of mp-config settings (the wars will be\n+     *            created with specific good or bad values)\n+     * @throws Exception\n+     */\n+    public static void deployRSServerMPConfigInAppApps(LibertyServer server, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        Log.info(thisClass, \"1.2 deployRSServerMPConfigInAppApps\", \"1.2\");\n+\n+        try {\n+\n+            // the microprofile-config.properties files will have xxx_<attr>_xxx\n+            // values that need to be replaced\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, mpConfigSettings.getHeader(), mpConfigSettings.getCookie(),\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, mpConfigSettings.getHeader(), mpConfigSettings.getCookie(),\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+\n+        } catch (Exception e) {\n+            Log.info(thisClass, \"MPJwtAltConfig\", \"Hit an exception updating the war file\" + e.getMessage());\n+            throw e;\n+        }\n+\n+    }\n+\n+    public static void deployRSServerMPConfigInAppHeaderApps(LibertyServer server, MP12ConfigSettings mpConfigSettings) throws Exception {\n+\n+        Log.info(thisClass, \"1.2 deployRSServerMPConfigInAppHeaderApps\", \"1.2\");\n+\n+        try {\n+            // Header and cookie test setup\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_AUTHORIZATION_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_AUTHORIZATION_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_COOKIENAME_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.DefaultCookieName,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_COOKIENAME_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, MP12ConfigSettings.DefaultCookieName,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_OTHER_COOKIENAME_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, \"OtherCookieName\",\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_HEADER_COOKIE_IN_CONFIG_WITH_OTHER_COOKIENAME_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.COOKIE, \"OtherCookieName\",\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.BAD_HEADER_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, \"badHeader\", MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.BAD_HEADER_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, \"badHeader\", mpConfigSettings.getCookie(),\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+\n+            // audiences test setup\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_AUDIENCES_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_AUDIENCES_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.BAD_AUDIENCES_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        \"BadAudience\", mpConfigSettings.getAlgorithm()));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.BAD_AUDIENCES_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          \"BadAudience\", mpConfigSettings.getAlgorithm()));\n+\n+            // algorithm test setup\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_ALGORITHM_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_RS256));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_ALGORITHM_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_RS256));\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.BAD_ALGORITHM_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.BAD_ALGORITHM_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(mpConfigSettings, MpJwt12FatConstants.AUTHORIZATION, MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+            // let's create an app with mp config properties that over ride the 1.1 and 1.2 alg settings\n+            MP12ConfigSettings overrideMpConfigSettings = new MP12ConfigSettings(mpConfigSettings.getPublicKeyLocation(), MP12ConfigSettings\n+                            .getComplexKey(server, MP12ConfigSettings.es256PubKey), mpConfigSettings\n+                                            .getIssuer(), MpJwt12FatConstants.X509_CERT, mpConfigSettings\n+                                                            .getHeader(), mpConfigSettings.getCookie(), mpConfigSettings.getAudience(), mpConfigSettings.getAlgorithm());\n+            setupUtils.deployRSServerMPConfigInAppInMetaInfApp(server, MpJwt12FatConstants.GOOD_KEY_AND_ALGORITHM_IN_CONFIG_IN_META_INF_ROOT_CONTEXT,\n+                                                               buildMPConfigFileContent(overrideMpConfigSettings, MpJwt12FatConstants.AUTHORIZATION,\n+                                                                                        MP12ConfigSettings.CookieNotSet,\n+                                                                                        mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+            setupUtils.deployRSServerMPConfigInAppUnderWebInfApp(server, MpJwt12FatConstants.GOOD_KEY_AND_ALGORITHM_IN_CONFIG_UNDER_WEB_INF_ROOT_CONTEXT,\n+                                                                 buildMPConfigFileContent(overrideMpConfigSettings, MpJwt12FatConstants.AUTHORIZATION,\n+                                                                                          MP12ConfigSettings.CookieNotSet,\n+                                                                                          mpConfigSettings.getAudience(), MpJwt12FatConstants.SIGALG_ES256));\n+\n+        } catch (Exception e) {\n+            Log.info(thisClass, \"MPJwtAltConfig\", \"Hit an exception updating the war file\" + e.getMessage());\n+            throw e;\n+        }\n+\n+    }\n+\n+    public Map<String, String> addToMap(Map<String, String> currentMap, String name, String value) throws Exception {\n+\n+        if (currentMap == null) {\n+            currentMap = new HashMap<String, String>();\n+        }\n+        currentMap.put(name, value);\n+        return currentMap;\n+    }\n+\n+    public Page invokeUrlWithOtherHeader(WebClient webClient, String url, String location, String name, String value) throws Exception {\n+\n+        Map<String, String> header = addToMap(null, location, name + \" \" + value);\n+\n+        return actions.invokeUrlWithParametersAndHeaders(_testName, webClient, url, null, header);\n+\n+    }\n+\n+    /**\n+     * All of the tests in this class follow the same flow. The differences between them are which builder they use to create a\n+     * token, the config they use in the resource server\n+     * and then whether they expect a failure (mainly due to a mis-match between the token and the servers config).\n+     * We'll put the common steps in this method so we're not duplicating steps/code over and over.\n+     *\n+     * @param builtToken\n+     *            - the token built to reflect the goal of the calling test\n+     * @param expectations\n+     *            - the expected behavior that we need to validate\n+     * @throws Exception\n+     */\n+    public void genericConfigTest(LibertyServer rs_server, String builder, String location, String name, Expectations expectations) throws Exception {\n+\n+        String thisMethod = \"genericConfigTest\";\n+        loggingUtils.printMethodName(thisMethod);\n+\n+        for (List<String> app : getTestAppArray(rs_server)) {\n+            standardTestFlow(builder, app.get(0), app.get(1), location, name, expectations);\n+        }\n+\n+    }\n+\n+    /**\n+     * This method performs all of the steps needed for each test case. Good\n+     * flow and bad flow tests all follow the same steps. The good tests\n+     * expect\n+     * output from the test app. The bad tests expect bad status and error\n+     * messages. The actual steps are all the same.\n+     *\n+     * @param rootContext\n+     *            - root context of the app to invoke\n+     * @param theApp\n+     *            - the app name to invoke\n+     * @param className\n+     *            - the className to validate in the test output (how we check\n+     *            that we got where we should have gotten)\n+     * @param expectations\n+     *            - null when running a good test, the expectations to check in\n+     *            the case of a bad/negative test\n+     * @throws Exception\n+     */\n+\n+    public void standardTestFlow(LibertyServer server, String rootContext,\n+                                 String theApp, String className) throws Exception {\n+        standardTestFlow(MpJwt12FatConstants.SIGALG_RS256, server, rootContext, theApp, className, MpJwt12FatConstants.AUTHORIZATION, MpJwt12FatConstants.TOKEN_TYPE_BEARER, null);\n+\n+    }\n+\n+    public void standardTestFlow(LibertyServer server, String rootContext,\n+                                 String theApp, String className, Expectations expectations) throws Exception {\n+        standardTestFlow(MpJwt12FatConstants.SIGALG_RS256, server, rootContext, theApp, className, MpJwt12FatConstants.AUTHORIZATION, MpJwt12FatConstants.TOKEN_TYPE_BEARER,\n+                         expectations);\n+\n+    }\n+\n+    public void standardTestFlow(LibertyServer server, String rootContext, String theApp, String className, String location, String name,\n+                                 Expectations expectations) throws Exception {\n+        standardTestFlow(MpJwt12FatConstants.SIGALG_RS256, server, rootContext, theApp, className, location, name, expectations);\n+\n+    }\n+\n+    public void standardTestFlow(String builder, LibertyServer server, String rootContext,\n+                                 String theApp, String className) throws Exception {\n+        standardTestFlow(builder, server, rootContext, theApp, className, MpJwt12FatConstants.AUTHORIZATION, MpJwt12FatConstants.TOKEN_TYPE_BEARER, null);\n+\n+    }\n+\n+    public void standardTestFlow(LibertyServer server, String rootContext, String theApp, String className, String location, String name) throws Exception {\n+        standardTestFlow(MpJwt12FatConstants.SIGALG_RS256, server, rootContext, theApp, className, location, name, null);\n+    }\n+\n+    public void standardTestFlow(String builder, LibertyServer server, String rootContext, String theApp, String className, String location, String name) throws Exception {\n+        standardTestFlow(builder, server, rootContext, theApp, className, location, name, null);\n+    }\n+\n+    public void standardTestFlow(String builder, LibertyServer server, String rootContext, String theApp, String className, String location, String name,\n+                                 Expectations expectations) throws Exception {\n+        String testUrl = buildAppUrl(server, rootContext, theApp);\n+        standardTestFlow(builder, testUrl, className, location, name, expectations);\n+    }\n+\n+    public void standardTestFlow(String builder, String testUrl, String className, String location, String name) throws Exception {\n+        standardTestFlow(builder, testUrl, className, location, name, null);\n+    }\n+\n+    public void standardTestFlow(String builder, String testUrl, String className, String location, String name, Expectations expectations) throws Exception {", "originalCommit": "eb28c0502ad9797dfdd68dac26d80179db62f333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODAxMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13938#discussion_r496808011", "bodyText": "1.1 and 1.2 have their own standardTestFlow methods (they really do have to do different things).\nHave reduced the overloaded methods.", "author": "c00crane", "createdAt": "2020-09-29T15:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4Nzg5NQ=="}], "type": "inlineReview"}, {"oid": "b490f7b07a4e3f7f2fcc7ad782922c140d61220a", "url": "https://github.com/OpenLiberty/open-liberty/commit/b490f7b07a4e3f7f2fcc7ad782922c140d61220a", "message": "Merge remote-tracking branch 'origin/integration' into mpJwt12Fats_firstDelivery", "committedDate": "2020-09-28T16:17:45Z", "type": "commit"}, {"oid": "cbabb1343432112708a1ed7fa0521207be4cb479", "url": "https://github.com/OpenLiberty/open-liberty/commit/cbabb1343432112708a1ed7fa0521207be4cb479", "message": "Updates from code review and audiences support updates", "committedDate": "2020-09-29T23:07:11Z", "type": "commit"}, {"oid": "562816c2d6aaf213d8b30dd862eaa2847a33b74f", "url": "https://github.com/OpenLiberty/open-liberty/commit/562816c2d6aaf213d8b30dd862eaa2847a33b74f", "message": "Merge remote-tracking branch 'origin/integration' into mpJwt12Fats_firstDelivery", "committedDate": "2020-09-29T23:07:45Z", "type": "commit"}, {"oid": "aef1c3c3dc90df92b9e8c3f5fcca28eb247ca498", "url": "https://github.com/OpenLiberty/open-liberty/commit/aef1c3c3dc90df92b9e8c3f5fcca28eb247ca498", "message": "Fix error in MP JWT runtime calculation", "committedDate": "2020-09-29T23:08:18Z", "type": "commit"}]}