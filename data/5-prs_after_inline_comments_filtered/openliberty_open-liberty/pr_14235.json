{"pr_number": 14235, "pr_title": "Migrate JPA Locking Tests", "pr_createdAt": "2020-09-29T19:14:55Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14235", "timeline": [{"oid": "6752ec343b98923de0c368d438327fd0688e732c", "url": "https://github.com/OpenLiberty/open-liberty/commit/6752ec343b98923de0c368d438327fd0688e732c", "message": "Migrate JPA Locking Tests\n\nSigned-off-by: Joe Grassel <jgrassel@us.ibm.com>", "committedDate": "2020-09-30T15:04:24Z", "type": "commit"}, {"oid": "6752ec343b98923de0c368d438327fd0688e732c", "url": "https://github.com/OpenLiberty/open-liberty/commit/6752ec343b98923de0c368d438327fd0688e732c", "message": "Migrate JPA Locking Tests\n\nSigned-off-by: Joe Grassel <jgrassel@us.ibm.com>", "committedDate": "2020-09-30T15:04:24Z", "type": "forcePushed"}, {"oid": "0447d7429fe18361c1ea00d31352823f639d5601", "url": "https://github.com/OpenLiberty/open-liberty/commit/0447d7429fe18361c1ea00d31352823f639d5601", "message": "Fix copyright headers as per code review for #14235\n\nSigned-off-by: Joe Grassel <jgrassel@us.ibm.com>", "committedDate": "2020-10-01T15:52:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1MDU2NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14235#discussion_r498350565", "bodyText": "Why is it entitylocking20 if this is a jpa_spec10_locking FAT project?", "author": "dazey3", "createdAt": "2020-10-01T15:52:33Z", "path": "dev/com.ibm.ws.jpa_spec10_locking_fat/fat/src/com/ibm/ws/jpa/TestEntityLocking_Web.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jpa;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.jboss.shrinkwrap.api.ArchivePath;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+import org.testcontainers.containers.JdbcDatabaseContainer;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.Application;\n+import com.ibm.websphere.simplicity.config.ClassloaderElement;\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.ws.jpa.fvt.entitylocking20.tests.web.EntityLocking20WebTestServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.SkipForRepeat;\n+import componenttest.annotation.TestServlet;\n+import componenttest.annotation.TestServlets;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.database.container.DatabaseContainerType;\n+import componenttest.topology.database.container.DatabaseContainerUtil;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.PrivHelper;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+@SkipForRepeat(\"JPA20_FEATURES\")\n+public class TestEntityLocking_Web extends JPAFATServletClient {\n+    private final static String RESOURCE_ROOT = \"test-applications/EntityLocking/\";\n+    private final static String appFolder = \"web\";\n+    private final static String appName = \"EntityLockingWeb\";\n+    private final static String appNameEar = appName + \".ear\";\n+\n+    private final static Set<String> dropSet = new HashSet<String>();\n+    private final static Set<String> createSet = new HashSet<String>();\n+    private final static Set<String> populateSet = new HashSet<String>();\n+\n+    private static long timestart = 0;\n+\n+    static {\n+        dropSet.add(\"JPA_ENTITYLOCKING_DROP_${dbvendor}.ddl\");\n+        createSet.add(\"JPA_ENTITYLOCKING_CREATE_${dbvendor}.ddl\");\n+    }\n+\n+    @Server(\"EntityLocking\")\n+    @TestServlets({\n+                    @TestServlet(servlet = EntityLocking20WebTestServlet.class, path = \"EntityLockingWeb\" + \"/\" + \"EntityLocking20WebTestServlet\"),\n+    })\n+    public static LibertyServer server;\n+\n+    public static final JdbcDatabaseContainer<?> testContainer = FATSuite.testContainer;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        PrivHelper.generateCustomPolicy(server, FATSuite.JAXB_PERMS);\n+        bannerStart(TestEntityLocking_Web.class);\n+        timestart = System.currentTimeMillis();\n+\n+        int appStartTimeout = server.getAppStartTimeout();\n+        if (appStartTimeout < (120 * 1000)) {\n+            server.setAppStartTimeout(120 * 1000);\n+        }\n+\n+        int configUpdateTimeout = server.getConfigUpdateTimeout();\n+        if (configUpdateTimeout < (120 * 1000)) {\n+            server.setConfigUpdateTimeout(120 * 1000);\n+        }\n+\n+        //Get driver name\n+        server.addEnvVar(\"DB_DRIVER\", DatabaseContainerType.valueOf(testContainer).getDriverName());\n+\n+        //Setup server DataSource properties\n+        DatabaseContainerUtil.setupDataSourceProperties(server, testContainer);\n+\n+        server.startServer();\n+\n+        setupDatabaseApplication(server, RESOURCE_ROOT + \"ddl/\");\n+\n+        final Set<String> ddlSet = new HashSet<String>();\n+\n+        System.out.println(TestEntityLocking_Web.class.getName() + \" Setting up database tables...\");\n+\n+        ddlSet.clear();\n+        for (String ddlName : dropSet) {\n+            ddlSet.add(ddlName.replace(\"${dbvendor}\", getDbVendor().name()));\n+        }\n+        executeDDL(server, ddlSet, true);\n+\n+        ddlSet.clear();\n+        for (String ddlName : createSet) {\n+            ddlSet.add(ddlName.replace(\"${dbvendor}\", getDbVendor().name()));\n+        }\n+        executeDDL(server, ddlSet, false);\n+\n+        setupTestApplication();\n+    }\n+\n+    private static void setupTestApplication() throws Exception {\n+        WebArchive webApp = ShrinkWrap.create(WebArchive.class, appName + \".war\");\n+        webApp.addPackages(true, \"com.ibm.ws.jpa.fvt.entitylocking20.entities\");", "originalCommit": "6752ec343b98923de0c368d438327fd0688e732c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTAzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14235#discussion_r498405034", "bodyText": "Got rid of the numbering entirely.", "author": "jgrassel", "createdAt": "2020-10-01T17:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1MDU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1NzAwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14235#discussion_r498357001", "bodyText": "This test appears to be testing a JPA 2.0 API feature, is that correct? Should this test be moved to the jpa20 spec FAT?", "author": "dazey3", "createdAt": "2020-10-01T16:02:22Z", "path": "dev/com.ibm.ws.jpa_spec10_locking_fat/test-applications/EntityLocking/src/com/ibm/ws/jpa/fvt/entitylocking20/testlogic/EntityLocking20TestLogic.java", "diffHunk": "@@ -0,0 +1,1268 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jpa.fvt.entitylocking20.testlogic;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.LockModeType;\n+import javax.persistence.OptimisticLockException;\n+\n+import org.junit.Assert;\n+\n+import com.ibm.ws.jpa.fvt.entitylocking20.entities.LockEntityA;\n+import com.ibm.ws.testtooling.testinfo.TestExecutionContext;\n+import com.ibm.ws.testtooling.testlogic.AbstractTestLogic;\n+import com.ibm.ws.testtooling.vehicle.resources.JPAResource;\n+import com.ibm.ws.testtooling.vehicle.resources.TestExecutionResources;\n+\n+/**\n+ *\n+ */\n+public class EntityLocking20TestLogic extends AbstractTestLogic {\n+\n+    /**\n+     *\n+     *\n+     * @param testExecCtx\n+     * @param testExecResources\n+     * @param managedComponentObject\n+     */\n+    public void testReadLock001(\n+                                TestExecutionContext testExecCtx,\n+                                TestExecutionResources testExecResources,\n+                                Object managedComponentObject) throws Throwable {\n+        final String testName = getTestName();\n+\n+        // Verify parameters\n+        if (testExecCtx == null || testExecResources == null) {\n+            Assert.fail(testName + \": Missing context and/or resources.  Cannot execute the test.\");\n+            return;\n+        }\n+\n+        // Fetch JPA Resources\n+        JPAResource jpaResource = testExecResources.getJpaResourceMap().get(\"test-jpa-resource\");\n+        if (jpaResource == null) {\n+            Assert.fail(\"Missing JPAResource 'test-jpa-resource').  Cannot execute the test.\");\n+            return;\n+        }\n+\n+        AbstractClientB cliBTL = null;\n+        // Execute Test Case\n+        try {\n+            System.out.println(testName + \": Begin\");\n+\n+            EntityManager em = jpaResource.getEm();\n+            em.clear();\n+\n+            System.out.println(\"Beginning new transaction...\");\n+            jpaResource.getTj().beginTransaction();\n+\n+            if (jpaResource.getTj().isApplicationManaged()) {\n+                System.out.println(\"Joining entitymanager to JTA transaction...\");\n+                jpaResource.getEm().joinTransaction();\n+            }\n+\n+            System.out.println(\"Finding LockEntityA(id=1) with Optimistic Read locking...\");\n+            LockEntityA entityA = jpaResource.getEm().find(LockEntityA.class, 1, LockModeType.READ);", "originalCommit": "0447d7429fe18361c1ea00d31352823f639d5601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NTg4Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14235#discussion_r498395886", "bodyText": "Fixed the version umbers.", "author": "jgrassel", "createdAt": "2020-10-01T17:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1NzAwMQ=="}], "type": "inlineReview"}, {"oid": "c96c667509dc3e6ed334d134ed2c4af9696c0a79", "url": "https://github.com/OpenLiberty/open-liberty/commit/c96c667509dc3e6ed334d134ed2c4af9696c0a79", "message": "Changes as per code review for #14235\n\nSigned-off-by: Joe Grassel <jgrassel@us.ibm.com>", "committedDate": "2020-10-01T17:09:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxODM1Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14235#discussion_r498418352", "bodyText": "Is populateSet missing? I see there is a dev/com.ibm.ws.jpa_locking_fat/test-applications/EntityLocking/ddl/WEB-INF/classes/JPA_ENTITYLOCKING_POPULATE_DERBY.ddl. Is this needed to be run?", "author": "dazey3", "createdAt": "2020-10-01T17:51:10Z", "path": "dev/com.ibm.ws.jpa_locking_fat/fat/src/com/ibm/ws/jpa/TestEntityLocking_Web.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.jpa;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.jboss.shrinkwrap.api.ArchivePath;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+import org.testcontainers.containers.JdbcDatabaseContainer;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.Application;\n+import com.ibm.websphere.simplicity.config.ClassloaderElement;\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.ws.jpa.fvt.entitylocking.tests.web.EntityLocking20WebTestServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.SkipForRepeat;\n+import componenttest.annotation.TestServlet;\n+import componenttest.annotation.TestServlets;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.database.container.DatabaseContainerType;\n+import componenttest.topology.database.container.DatabaseContainerUtil;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.PrivHelper;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+@SkipForRepeat(\"JPA20_FEATURES\")\n+public class TestEntityLocking_Web extends JPAFATServletClient {\n+    private final static String RESOURCE_ROOT = \"test-applications/EntityLocking/\";\n+    private final static String appFolder = \"web\";\n+    private final static String appName = \"EntityLockingWeb\";\n+    private final static String appNameEar = appName + \".ear\";\n+\n+    private final static Set<String> dropSet = new HashSet<String>();\n+    private final static Set<String> createSet = new HashSet<String>();\n+    private final static Set<String> populateSet = new HashSet<String>();\n+\n+    private static long timestart = 0;\n+\n+    static {\n+        dropSet.add(\"JPA_ENTITYLOCKING_DROP_${dbvendor}.ddl\");\n+        createSet.add(\"JPA_ENTITYLOCKING_CREATE_${dbvendor}.ddl\");", "originalCommit": "c96c667509dc3e6ed334d134ed2c4af9696c0a79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2b2fefaca289e50fad5b638165c69630be5dd298", "url": "https://github.com/OpenLiberty/open-liberty/commit/2b2fefaca289e50fad5b638165c69630be5dd298", "message": "Remove unnecessary copy of test-framework from com.ibm.ws.jpa_locking_fat project.\n\nSigned-off-by: Joe Grassel <jgrassel@us.ibm.com>", "committedDate": "2020-10-01T19:30:39Z", "type": "commit"}]}