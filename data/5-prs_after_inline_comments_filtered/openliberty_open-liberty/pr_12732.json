{"pr_number": 12732, "pr_title": "MP-Metrics 3.0 [NoShip]: REST stat metrics to track unmapped exceptions", "pr_createdAt": "2020-06-22T15:24:42Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12732", "timeline": [{"oid": "96f39477df03a48589c406e7811f40f31a948714", "url": "https://github.com/OpenLiberty/open-liberty/commit/96f39477df03a48589c406e7811f40f31a948714", "message": "New jaxrsDefaultExceptionMapper autofeature\n\nThis autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\njaxrs-2.x have started. This starts the\n`com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\ncallback handler for osgi services that implement the\nDefaultExceptionMapperCallback service. The service contains the\ncallback that is to be called. In this PR the\n`MetricsJaxRsEMCallbackImpl` in\n`com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\nWhen an unmapped exception occurs we insert a specific exception header\nto the http response so tha the jaxrs filter can identify and deal with\nit accordingly.", "committedDate": "2020-06-22T15:28:33Z", "type": "forcePushed"}, {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65", "url": "https://github.com/OpenLiberty/open-liberty/commit/4e38a33c76122a54e3db1e0396b7a06491f90d65", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n    This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n    jaxrs-2.x have started. This starts the\n    `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n    callback handler for osgi services that implement the\n    DefaultExceptionMapperCallback service. The service contains the\n    callback that is to be called. In this PR the\n    `MetricsJaxRsEMCallbackImpl` in\n    `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n    When an unmapped exception occurs we insert a specific exception header\n    to the http response so tha the jaxrs filter can identify and deal with\n    it accordingly.", "committedDate": "2020-06-23T03:01:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5MzI1Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445193256", "bodyText": "Copyright is missing", "author": "fmhwong", "createdAt": "2020-06-24T21:53:28Z", "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;", "originalCommit": "4e38a33c76122a54e3db1e0396b7a06491f90d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNjkxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445736915", "bodyText": "fixed", "author": "Channyboy", "createdAt": "2020-06-25T17:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5MzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTE4MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445195180", "bodyText": "Irregular indentation", "author": "fmhwong", "createdAt": "2020-06-24T21:57:55Z", "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference", "originalCommit": "4e38a33c76122a54e3db1e0396b7a06491f90d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNjk2OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445736969", "bodyText": "fixed", "author": "Channyboy", "createdAt": "2020-06-25T17:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445195321", "bodyText": "Do you need a null check on resourceInfo?", "author": "fmhwong", "createdAt": "2020-06-24T21:58:19Z", "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference\n+    public void getSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+\t\tMetricsJaxRsEMCallbackImpl.sharedMetricRegistry = sharedMetricRegistry;\n+    }\n+\t\n+\t\n+\tprivate Map.Entry<String, String> resolveSimpleTimerClassMethodTags(ResourceInfo resourceInfo) {\n+\t\tClass<?> resourceClass = resourceInfo.getResourceClass();", "originalCommit": "4e38a33c76122a54e3db1e0396b7a06491f90d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNzc4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445737785", "bodyText": "Hm, this is called by the callback handler in response to a JAX-RS request that ended with an unmapped exception. I don't think the ResourceInfo would be null. @jim-krueger  what do you think?", "author": "Channyboy", "createdAt": "2020-06-25T17:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2OTI5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r447769296", "bodyText": "Correct @Channyboy , resourceInfo should never be null.", "author": "jim-krueger", "createdAt": "2020-06-30T15:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ=="}], "type": "inlineReview"}, {"oid": "97634f7b5aa1931d2c58a815d656a56d321380e3", "url": "https://github.com/OpenLiberty/open-liberty/commit/97634f7b5aa1931d2c58a815d656a56d321380e3", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n        This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n        jaxrs-2.x have started. This starts the\n        `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n        callback handler for osgi services that implement the\n        DefaultExceptionMapperCallback service. The service contains the\n        callback that is to be called. In this PR the\n        `MetricsJaxRsEMCallbackImpl` in\n        `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n        When an unmapped exception occurs we insert a specific exception header\n        to the http response so tha the jaxrs filter can identify and deal with\n        it accordingly.", "committedDate": "2020-06-25T17:54:42Z", "type": "commit"}, {"oid": "97634f7b5aa1931d2c58a815d656a56d321380e3", "url": "https://github.com/OpenLiberty/open-liberty/commit/97634f7b5aa1931d2c58a815d656a56d321380e3", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n        This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n        jaxrs-2.x have started. This starts the\n        `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n        callback handler for osgi services that implement the\n        DefaultExceptionMapperCallback service. The service contains the\n        callback that is to be called. In this PR the\n        `MetricsJaxRsEMCallbackImpl` in\n        `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n        When an unmapped exception occurs we insert a specific exception header\n        to the http response so tha the jaxrs filter can identify and deal with\n        it accordingly.", "committedDate": "2020-06-25T17:54:42Z", "type": "forcePushed"}]}