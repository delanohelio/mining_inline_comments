{"pr_number": 13214, "pr_title": "LRA participant feature and fat tests", "pr_createdAt": "2020-07-28T15:30:51Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13214", "timeline": [{"oid": "2d3dc60eeb9fc13a2a01c803c95a3f94773b6dd7", "url": "https://github.com/OpenLiberty/open-liberty/commit/2d3dc60eeb9fc13a2a01c803c95a3f94773b6dd7", "message": "LRA participant feature and fat tests", "committedDate": "2020-07-28T15:15:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MjAzMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r461692032", "bodyText": "I'm not sure that this error message is required since FFDC will automatically added. If it is needed then it should be NLS enabled.", "author": "tevans78", "createdAt": "2020-07-28T15:56:03Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.lra.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.jaxrs20.providers.api.JaxRsProviderRegister;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import io.narayana.lra.filter.ClientLRARequestFilter;\n+import io.narayana.lra.filter.ClientLRAResponseFilter;\n+import io.narayana.lra.filter.ServerLRAFilter;\n+\n+/**\n+ * A declarative services component can be completely POJO based\n+ * (no awareness/use of OSGi services).\n+ *\n+ * OSGi methods (activate/deactivate) should be protected.\n+ */\n+@Component(service = { JaxRsProviderRegister.class })\n+public class LraFilterComponent implements JaxRsProviderRegister {\n+\n+    private static final TraceComponent tc = Tr.register(LraFilterComponent.class);\n+\n+    @Reference\n+    private LraConfig config;\n+\n+    /**\n+     * DS method to activate this component.\n+     * Best practice: this should be a protected method, not public or private\n+     *\n+     * @param properties : Map containing service & config properties\n+     *            populated/provided by config admin\n+     */\n+    @Activate\n+    protected void activate(Map<String, Object> properties) throws LraException {\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+            Tr.event(tc, \"LraFilterComponent activated\", properties);\n+        }\n+        String coordString = \"http://\" + config.getHost() + \":\" + config.getPort() + \"/\" + config.getPath();\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isInfoEnabled()) {\n+            Tr.info(tc, \"Attempting to contact coordinator at \" + coordString);\n+        }\n+        try {\n+            URI coord = new URI(coordString);\n+            NarayanaLRAClient.setDefaultCoordinatorEndpoint(coord);\n+        } catch (URISyntaxException e) {\n+            Tr.error(tc, \"Invalid LRA coordinator URI: '\" + coordString + \"'\");\n+            throw new LraException(Tr.formatMessage(tc, \"LRA_INVALID_COORDINATOR_URI.CWMRX5000E\"), e);\n+        }\n+\n+    }\n+\n+    /**\n+     * DS method to deactivate this component.\n+     * Best practice: this should be a protected method, not public or private\n+     *\n+     * @param reason int representation of reason the component is stopping\n+     */\n+    protected void deactivate(int reason) {\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+            Tr.event(tc, \"SampleComponent deactivated, reason=\" + reason);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void installProvider(boolean clientSide, List<Object> providers, Set<String> features) {\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+            Tr.event(tc, \"Registering LRA filters\");\n+        }\n+\n+        if (clientSide) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+                Tr.event(tc, \"Registering client side filters\");\n+            }\n+            ClientLRARequestFilter requestFilter = new ClientLRARequestFilter();\n+            providers.add(requestFilter);\n+            ClientLRAResponseFilter responseFilter = new ClientLRAResponseFilter();\n+            providers.add(responseFilter);\n+        } else {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+                Tr.event(tc, \"Registering serverside side filters\");\n+            }\n+            try {\n+                // Rather unhelpfully, the ServerLRAFilter constructor throws 'Exception'. There isn't much we can do with\n+                // that. Re-throwing should prevent the servlet being initialized, which is probably better than swallowing\n+                // the exception\n+                providers.add(new ServerLRAFilter());\n+            } catch (Exception e) {\n+                Tr.error(tc, \"Exception during registration of LRA filters\", e);", "originalCommit": "2d3dc60eeb9fc13a2a01c803c95a3f94773b6dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MTM2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462271360", "bodyText": "Again, I don't think I'm adding anything useful, so I'll remove it", "author": "idlewis", "createdAt": "2020-07-29T12:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MjAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMzI0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462133242", "bodyText": "Is this a http or https?", "author": "Emily-Jiang", "createdAt": "2020-07-29T08:35:13Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.lra.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.jaxrs20.providers.api.JaxRsProviderRegister;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import io.narayana.lra.filter.ClientLRARequestFilter;\n+import io.narayana.lra.filter.ClientLRAResponseFilter;\n+import io.narayana.lra.filter.ServerLRAFilter;\n+\n+/**\n+ * A declarative services component can be completely POJO based\n+ * (no awareness/use of OSGi services).\n+ *\n+ * OSGi methods (activate/deactivate) should be protected.\n+ */\n+@Component(service = { JaxRsProviderRegister.class })\n+public class LraFilterComponent implements JaxRsProviderRegister {\n+\n+    private static final TraceComponent tc = Tr.register(LraFilterComponent.class);\n+\n+    @Reference\n+    private LraConfig config;\n+\n+    /**\n+     * DS method to activate this component.\n+     * Best practice: this should be a protected method, not public or private\n+     *\n+     * @param properties : Map containing service & config properties\n+     *            populated/provided by config admin\n+     */\n+    @Activate\n+    protected void activate(Map<String, Object> properties) throws LraException {\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+            Tr.event(tc, \"LraFilterComponent activated\", properties);\n+        }\n+        String coordString = \"http://\" + config.getHost() + \":\" + config.getPort() + \"/\" + config.getPath();", "originalCommit": "2d3dc60eeb9fc13a2a01c803c95a3f94773b6dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNDg4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462214889", "bodyText": "http\nhttps is unfortunately not yet supported in the implementation", "author": "idlewis", "createdAt": "2020-07-29T10:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMzI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzMTMxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462231310", "bodyText": "Should be configurable then?", "author": "tevans78", "createdAt": "2020-07-29T11:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMzI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2ODE2OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462268168", "bodyText": "It will almost certainly need to be configurable once narayana supports https. However, as I don't know what their implementation will look like yet, I didn't think it was correct to add in liberty config that might have to change to fit in with the implementation", "author": "idlewis", "createdAt": "2020-07-29T12:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMzI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyOTM3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462229377", "bodyText": "Again, there will be an FFDC automatically added here to log the URISyntaxException. You then rethrow with a NLS enabled message. I don't think you need the extra error trace ... which would need to be NLS enabled anyway.", "author": "tevans78", "createdAt": "2020-07-29T11:29:25Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.lra.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.jaxrs20.providers.api.JaxRsProviderRegister;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import io.narayana.lra.filter.ClientLRARequestFilter;\n+import io.narayana.lra.filter.ClientLRAResponseFilter;\n+import io.narayana.lra.filter.ServerLRAFilter;\n+\n+/**\n+ * A declarative services component can be completely POJO based\n+ * (no awareness/use of OSGi services).\n+ *\n+ * OSGi methods (activate/deactivate) should be protected.\n+ */\n+@Component(service = { JaxRsProviderRegister.class })\n+public class LraFilterComponent implements JaxRsProviderRegister {\n+\n+    private static final TraceComponent tc = Tr.register(LraFilterComponent.class);\n+\n+    @Reference\n+    private LraConfig config;\n+\n+    /**\n+     * DS method to activate this component.\n+     * Best practice: this should be a protected method, not public or private\n+     *\n+     * @param properties : Map containing service & config properties\n+     *            populated/provided by config admin\n+     */\n+    @Activate\n+    protected void activate(Map<String, Object> properties) throws LraException {\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+            Tr.event(tc, \"LraFilterComponent activated\", properties);\n+        }\n+        String coordString = \"http://\" + config.getHost() + \":\" + config.getPort() + \"/\" + config.getPath();\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isInfoEnabled()) {\n+            Tr.info(tc, \"Attempting to contact coordinator at \" + coordString);\n+        }\n+        try {\n+            URI coord = new URI(coordString);\n+            NarayanaLRAClient.setDefaultCoordinatorEndpoint(coord);\n+        } catch (URISyntaxException e) {\n+            Tr.error(tc, \"Invalid LRA coordinator URI: '\" + coordString + \"'\");", "originalCommit": "2d3dc60eeb9fc13a2a01c803c95a3f94773b6dd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MTAxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r462271010", "bodyText": "I don't think this is adding anything so I'll remove it", "author": "idlewis", "createdAt": "2020-07-29T12:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyOTM3Nw=="}], "type": "inlineReview"}, {"oid": "b937189d615eed9ed4759da32adbaab91cbd4d7d", "url": "https://github.com/OpenLiberty/open-liberty/commit/b937189d615eed9ed4759da32adbaab91cbd4d7d", "message": "Address review comments", "committedDate": "2020-07-29T15:14:08Z", "type": "commit"}, {"oid": "999cb1474dff0c9f63bd3a0c2c54092a930afe21", "url": "https://github.com/OpenLiberty/open-liberty/commit/999cb1474dff0c9f63bd3a0c2c54092a930afe21", "message": "Reduce name length in metatype.properties\n\nAs there was an error in the build otherwise", "committedDate": "2020-07-30T17:01:14Z", "type": "commit"}, {"oid": "999cb1474dff0c9f63bd3a0c2c54092a930afe21", "url": "https://github.com/OpenLiberty/open-liberty/commit/999cb1474dff0c9f63bd3a0c2c54092a930afe21", "message": "Reduce name length in metatype.properties\n\nAs there was an error in the build otherwise", "committedDate": "2020-07-30T17:01:14Z", "type": "forcePushed"}, {"oid": "c71661bc3cedb3c96fcb88cc7d6b909febb56509", "url": "https://github.com/OpenLiberty/open-liberty/commit/c71661bc3cedb3c96fcb88cc7d6b909febb56509", "message": "Add jboss.logging bundle to mpLRA-1.0.feature", "committedDate": "2020-08-05T15:16:04Z", "type": "commit"}, {"oid": "2f616edc6e4800f0f436ece858289443e7050ff4", "url": "https://github.com/OpenLiberty/open-liberty/commit/2f616edc6e4800f0f436ece858289443e7050ff4", "message": "Removing com.ibm.ws.require.java8 as no longer required", "committedDate": "2020-08-07T09:13:42Z", "type": "commit"}, {"oid": "a069497445b79e6f19da547c4458c4239350dfd9", "url": "https://github.com/OpenLiberty/open-liberty/commit/a069497445b79e6f19da547c4458c4239350dfd9", "message": "Add the always passes test\n\nAs the real tests are currently experimental, and you need\na passing test in every fat bucket", "committedDate": "2020-08-12T13:00:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1MDY0NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r469850645", "bodyText": "The info log level doesn't count as trace so it shouldn't be behind an isAnyTracingEnabled() guard and it needs to be translated.\nCan be done as a follow up action.", "author": "Azquelt", "createdAt": "2020-08-13T10:20:59Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal/src/io/openliberty/microprofile/lra/internal/LraFilterComponent.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.lra.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.jaxrs20.providers.api.JaxRsProviderRegister;\n+\n+import io.narayana.lra.client.NarayanaLRAClient;\n+import io.narayana.lra.filter.ClientLRARequestFilter;\n+import io.narayana.lra.filter.ClientLRAResponseFilter;\n+import io.narayana.lra.filter.ServerLRAFilter;\n+\n+/**\n+ * A declarative services component can be completely POJO based\n+ * (no awareness/use of OSGi services).\n+ *\n+ * OSGi methods (activate/deactivate) should be protected.\n+ */\n+@Component(service = { JaxRsProviderRegister.class })\n+public class LraFilterComponent implements JaxRsProviderRegister {\n+\n+    private static final TraceComponent tc = Tr.register(LraFilterComponent.class);\n+\n+    @Reference\n+    private LraConfig config;\n+\n+    /**\n+     * DS method to activate this component.\n+     * Best practice: this should be a protected method, not public or private\n+     *\n+     * @param properties : Map containing service & config properties\n+     *            populated/provided by config admin\n+     */\n+    @Activate\n+    protected void activate(Map<String, Object> properties) throws LraException {\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+            Tr.event(tc, \"LraFilterComponent activated\", properties);\n+        }\n+        String coordString = \"http://\" + config.getHost() + \":\" + config.getPort() + \"/\" + config.getPath();\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isInfoEnabled()) {\n+            Tr.info(tc, \"Attempting to contact coordinator at \" + coordString);\n+        }", "originalCommit": "a069497445b79e6f19da547c4458c4239350dfd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1NDA0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13214#discussion_r469854041", "bodyText": "Stray comment", "author": "Azquelt", "createdAt": "2020-08-13T10:27:48Z", "path": "dev/io.openliberty.microprofile.lra.1.0.internal_fat_tck/fat/src/io/openliberty/microprofile/lra/tck/LraTckLauncher.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.lra.tck;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+//import com.ibm.websphere.microprofile.faulttolerance_fat.suite.RepeatFaultTolerance;", "originalCommit": "a069497445b79e6f19da547c4458c4239350dfd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}