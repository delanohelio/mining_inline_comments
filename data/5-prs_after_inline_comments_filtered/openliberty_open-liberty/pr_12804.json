{"pr_number": 12804, "pr_title": "Modernise and repeat CDI Annotations tests", "pr_createdAt": "2020-06-26T15:51:24Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12804", "timeline": [{"oid": "d03b126f11e65c132d06aa662d8a285d528e912d", "url": "https://github.com/OpenLiberty/open-liberty/commit/d03b126f11e65c132d06aa662d8a285d528e912d", "message": "Modernise and repeat CDI Annotations tests", "committedDate": "2020-06-26T16:00:43Z", "type": "forcePushed"}, {"oid": "8688d83c1dccf6f96414053f34c8e7b9b765c333", "url": "https://github.com/OpenLiberty/open-liberty/commit/8688d83c1dccf6f96414053f34c8e7b9b765c333", "message": "Modernise and repeat CDI Annotations tests", "committedDate": "2020-07-01T17:04:53Z", "type": "commit"}, {"oid": "1540feb5186b665562b9433e4e6cf7951780cb19", "url": "https://github.com/OpenLiberty/open-liberty/commit/1540feb5186b665562b9433e4e6cf7951780cb19", "message": "Further updates to rebalance and repeat CDI FAT tests", "committedDate": "2020-07-01T17:04:53Z", "type": "commit"}, {"oid": "1540feb5186b665562b9433e4e6cf7951780cb19", "url": "https://github.com/OpenLiberty/open-liberty/commit/1540feb5186b665562b9433e4e6cf7951780cb19", "message": "Further updates to rebalance and repeat CDI FAT tests", "committedDate": "2020-07-01T17:04:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODU3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12804#discussion_r448918571", "bodyText": "These tests might be clearer if you build and deploy the failing app in the test method.\nYou can also use setMarkToEndOfLog before deploying to ensure that the expected message is actually emitted by that app.\nSee KafkaBadConfigTest for an example.", "author": "Azquelt", "createdAt": "2020-07-02T10:54:45Z", "path": "dev/com.ibm.ws.cdi.api_fat/fat/src/com/ibm/ws/cdi12/fat/tests/CDIAPITests.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.cdi12.fat.tests;\n+\n+import static componenttest.rules.repeater.EERepeatTests.EEVersion.EE7;\n+import static componenttest.rules.repeater.EERepeatTests.EEVersion.EE9;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n+import org.jboss.shrinkwrap.api.asset.FileAsset;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n+import com.ibm.ws.cdi12.alterablecontext.test.AlterableContextTestServlet;\n+import com.ibm.ws.cdi12.alterablecontext.test.extension.DirtySingleton;\n+import com.ibm.ws.cdi12.test.common.web.CDICurrentTestServlet;\n+import com.ibm.ws.cdi12.test.common.web.SimpleBean;\n+import com.ibm.ws.cdi12.test.current.extension.CDICurrentTestBean;\n+import com.ibm.ws.fat.cdi.injectInjectionPoint.InjectInjectionPointServlet;\n+import com.ibm.ws.fat.cdi.injectInjectionPointBeansXML.InjectInjectionPointBeansXMLServlet;\n+import com.ibm.ws.fat.cdi.injectInjectionPointParam.InjectInjectionPointAsParamServlet;\n+import com.ibm.ws.fat.cdi.injectInjectionPointXML.InjectInjectionPointXMLServlet;\n+import com.ibm.ws.fat.util.browser.WebBrowser;\n+import com.ibm.ws.fat.util.browser.WebBrowserFactory;\n+import com.ibm.ws.fat.util.browser.WebResponse;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.annotation.TestServlets;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.custom.junit.runner.TestModeFilter;\n+import componenttest.rules.repeater.EERepeatTests;\n+import componenttest.rules.repeater.RepeatTests;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+import componenttest.topology.utils.HttpUtils;\n+import test.conversation.filter.ConversationFilterServlet;\n+\n+@RunWith(FATRunner.class)\n+public class CDIAPITests extends FATServletClient {\n+\n+    public static final String SERVER_NAME = \"cdi12APIServer\";\n+\n+    public static final String CDI_CURRENT_APP_NAME = \"cdiCurrentTest\";\n+    public static final String ALTERABLE_CONTEXT_APP_NAME = \"alterableContextApp\";\n+    public static final String CONVERSATION_FILTER_APP_NAME = \"appConversationFilter\";\n+    public static final String INJECT_IP_AS_PARAM_APP_NAME = \"injectInjectionPointAsParam\";\n+    public static final String INJECT_IP_BEANS_XML_APP_NAME = \"injectInjectionPointBeansXML\";\n+    public static final String INJECT_IP_APP_NAME = \"injectInjectionPoint\";\n+    public static final String INJECT_IP_XML_APP_NAME = \"injectInjectionPointXML\";\n+\n+    @ClassRule\n+    public static RepeatTests r = EERepeatTests.with(SERVER_NAME, EE7, EE9); //not bothering to repeat with EE8 ... the EE9 version is mostly a transformed version of the EE8 code\n+\n+    @Server(SERVER_NAME)\n+    @TestServlets({\n+                    @TestServlet(servlet = AlterableContextTestServlet.class, contextRoot = ALTERABLE_CONTEXT_APP_NAME), //FULL\n+                    @TestServlet(servlet = InjectInjectionPointAsParamServlet.class, contextRoot = INJECT_IP_AS_PARAM_APP_NAME) }) //FULL\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+\n+        JavaArchive cdiCurrentTest = ShrinkWrap.create(JavaArchive.class, CDI_CURRENT_APP_NAME + \".jar\")\n+                                               .addPackage(CDICurrentTestBean.class.getPackage())\n+                                               .add(new FileAsset(new File(\"test-applications/cdiCurrentTest.jar/resources/META-INF/services/javax.enterprise.inject.spi.Extension\")),\n+                                                    \"/META-INF/services/javax.enterprise.inject.spi.Extension\");\n+\n+        WebArchive cdiCurrentWar = ShrinkWrap.create(WebArchive.class, CDI_CURRENT_APP_NAME + \".war\")\n+                                             .addClass(CDICurrentTestServlet.class.getName())\n+                                             .addClass(SimpleBean.class.getName())\n+                                             .addAsLibrary(cdiCurrentTest);\n+\n+        ShrinkHelper.exportDropinAppToServer(server, cdiCurrentWar, DeployOptions.SERVER_ONLY);\n+\n+        if (TestModeFilter.shouldRun(TestMode.FULL)) {\n+            JavaArchive alterableContextExtension = ShrinkWrap.create(JavaArchive.class, \"alterableContextExtension.jar\");\n+            alterableContextExtension.addPackage(DirtySingleton.class.getPackage());\n+            alterableContextExtension.add(new FileAsset(new File(\"test-applications/alterableContextExtension.jar/resources/META-INF/services/javax.enterprise.inject.spi.Extension\")),\n+                                          \"/META-INF/services/javax.enterprise.inject.spi.Extension\");\n+            alterableContextExtension.add(new FileAsset(new File(\"test-applications/alterableContextExtension.jar/resources/META-INF/beans.xml\")), \"/META-INF/beans.xml\");\n+\n+            WebArchive alterableContextApp = ShrinkWrap.create(WebArchive.class, ALTERABLE_CONTEXT_APP_NAME + \".war\");\n+            alterableContextApp.addClass(AlterableContextTestServlet.class);\n+            alterableContextApp.add(new FileAsset(new File(\"test-applications/alterableContextApp.war/resources/WEB-INF/beans.xml\")), \"/WEB-INF/beans.xml\");\n+            alterableContextApp.addAsLibrary(alterableContextExtension);\n+\n+            EnterpriseArchive alterableContextsEar = ShrinkWrap.create(EnterpriseArchive.class, \"alterableContextsApp.ear\");\n+            alterableContextsEar.add(new FileAsset(new File(\"test-applications/alterableContextsApp.ear/resources/META-INF/permissions.xml\")), \"/META-INF/permissions.xml\");\n+            alterableContextsEar.add(new FileAsset(new File(\"test-applications/alterableContextsApp.ear/resources/META-INF/application.xml\")), \"/META-INF/application.xml\");\n+            alterableContextsEar.addAsModule(alterableContextApp);\n+\n+            WebArchive appConversationFilter = ShrinkWrap.create(WebArchive.class, CONVERSATION_FILTER_APP_NAME + \".war\")\n+                                                         .addPackage(ConversationFilterServlet.class.getPackage())\n+                                                         .add(new FileAsset(new File(\"test-applications/appConversationFilter.war/resources/WEB-INF/web.xml\")), \"/WEB-INF/web.xml\");\n+\n+            WebArchive injectInjectionPointAsParamWar = ShrinkWrap.create(WebArchive.class, INJECT_IP_AS_PARAM_APP_NAME + \".war\")\n+                                                                  .addPackage(InjectInjectionPointAsParamServlet.class.getPackage())\n+                                                                  .add(new FileAsset(new File(\"test-applications/injectInjectionPointAsParam.war/resources/WEB-INF/beans.xml\")),\n+                                                                       \"/WEB-INF/beans.xml\");\n+\n+            WebArchive injectInjectionPointBeansXMLWar = ShrinkWrap.create(WebArchive.class, INJECT_IP_BEANS_XML_APP_NAME + \".war\")\n+                                                                   .addClass(InjectInjectionPointBeansXMLServlet.class)\n+                                                                   .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n+\n+            WebArchive injectInjectionPointWar = ShrinkWrap.create(WebArchive.class, INJECT_IP_APP_NAME + \".war\")\n+                                                           .addPackage(InjectInjectionPointServlet.class.getPackage());\n+\n+            WebArchive injectInjectionPointXMLWar = ShrinkWrap.create(WebArchive.class, INJECT_IP_XML_APP_NAME + \".war\")\n+                                                              .addClass(InjectInjectionPointXMLServlet.class)\n+                                                              .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n+                                                              .add(new FileAsset(new File(\"test-applications/injectInjectionPointXML.war/resources/WEB-INF/web.xml\")),\n+                                                                   \"/WEB-INF/web.xml\");\n+\n+            ShrinkHelper.exportDropinAppToServer(server, injectInjectionPointXMLWar, DeployOptions.SERVER_ONLY);\n+            ShrinkHelper.exportDropinAppToServer(server, injectInjectionPointWar, DeployOptions.SERVER_ONLY);\n+            ShrinkHelper.exportDropinAppToServer(server, injectInjectionPointBeansXMLWar, DeployOptions.SERVER_ONLY);\n+            ShrinkHelper.exportDropinAppToServer(server, injectInjectionPointAsParamWar, DeployOptions.SERVER_ONLY);\n+            ShrinkHelper.exportDropinAppToServer(server, appConversationFilter, DeployOptions.SERVER_ONLY);\n+            ShrinkHelper.exportDropinAppToServer(server, alterableContextsEar, DeployOptions.SERVER_ONLY);\n+        }\n+\n+        server.startServer(false, false);\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(\"CWWKZ0002E\");\n+    }\n+\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testCDICurrent() throws Exception {\n+        runTest(server, CDI_CURRENT_APP_NAME, \"testCDICurrent\");\n+\n+        server.restartApplication(CDI_CURRENT_APP_NAME);\n+\n+        runTest(server, CDI_CURRENT_APP_NAME, \"testCDICurrent\");\n+    }\n+\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testConversationFilter() throws Exception {\n+\n+        WebBrowser browser = WebBrowserFactory.getInstance().createWebBrowser((File) null);\n+\n+        WebResponse response = browser.request(HttpUtils.createURL(server, \"/appConversationFilter/test?op=begin\").toString());\n+        String cid = response.getResponseBody();\n+        assertTrue(\"No cid: \" + cid, cid != null && !!!cid.isEmpty());\n+\n+        response = browser.request(HttpUtils.createURL(server, \"/appConversationFilter/test?op=status&cid=\" + cid).toString());\n+        String status = response.getResponseBody();\n+        assertEquals(\"Wrong status\", Boolean.FALSE.toString(), status);\n+    }\n+\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testInjectInjectionPointBeansXML() throws Exception {\n+        List<String> logs = server.findStringsInLogs(\"CWWKZ0002E(?=.*injectInjectionPoint)(?=.*com.ibm.ws.container.service.state.StateChangeException)(?=.*org.jboss.weld.exceptions.DefinitionException)(?=.*WELD-001405)(?=.*BackedAnnotatedField)(?=.*com.ibm.ws.fat.cdi.injectInjectionPointBeansXML.InjectInjectionPointBeansXMLServlet.thisShouldFail)\");\n+        assertEquals(\"DefinitionException not found\", 1, logs.size());\n+    }\n+\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testInjectInjectionPoint() throws Exception {\n+        List<String> logs = server.findStringsInLogs(\"CWWKZ0002E(?=.*injectInjectionPoint)(?=.*com.ibm.ws.container.service.state.StateChangeException)(?=.*org.jboss.weld.exceptions.DefinitionException)(?=.*WELD-001405)(?=.*BackedAnnotatedField)(?=.*com.ibm.ws.fat.cdi.injectInjectionPoint.InjectInjectionPointServlet.thisShouldFail)\");\n+        assertEquals(\"DefinitionException not found\", 1, logs.size()); //Unlike the two sibling tests this only emits the message once.\n+    }\n+\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testInjectInjectionPointXML() throws Exception {\n+        List<String> logs = server.findStringsInLogs(\"CWWKZ0002E(?=.*injectInjectionPoint)(?=.*com.ibm.ws.container.service.state.StateChangeException)(?=.*org.jboss.weld.exceptions.DefinitionException)(?=.*WELD-001405)(?=.*BackedAnnotatedField)(?=.*com.ibm.ws.fat.cdi.injectInjectionPointXML.InjectInjectionPointXMLServlet.thisShouldFail)\");\n+        assertEquals(\"DefinitionException not found\", 1, logs.size());\n+    }", "originalCommit": "1540feb5186b665562b9433e4e6cf7951780cb19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxOTQxMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12804#discussion_r448919411", "bodyText": "It looks like your server.xml has the EE7 features in it, so I'd recommend putting EE9, EE7 so that the server.xml is left in the same state at the end of the test.\nShouldn't matter in this bucket because there are no other test classes, but I think it's good practise in general in case someone adds a new test later.", "author": "Azquelt", "createdAt": "2020-07-02T10:56:25Z", "path": "dev/com.ibm.ws.cdi.annotations_fat/fat/src/com/ibm/ws/cdi12/fat/tests/AnnotationsTests.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.cdi12.fat.tests;\n+\n+import static componenttest.rules.repeater.EERepeatTests.EEVersion.EE7;\n+import static componenttest.rules.repeater.EERepeatTests.EEVersion.EE9;\n+\n+import java.io.File;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.FileAsset;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n+import com.ibm.ws.cdi.test.dependentscopedproducer.DependentSterotype;\n+import com.ibm.ws.cdi.test.dependentscopedproducer.servlets.AppScopedMethodServlet;\n+import com.ibm.ws.cdi.test.dependentscopedproducer.servlets.AppScopedSteryotypedServlet;\n+import com.ibm.ws.cdi.test.dependentscopedproducer.servlets.NullProducerServlet;\n+import com.ibm.ws.cdi12.test.defaultdecorator.DefaultDecoratorServlet;\n+import com.ibm.ws.cdi12.test.priority.lib.JarBean;\n+import com.ibm.ws.cdi12.test.priority.web.GlobalPriorityTestServlet;\n+import com.ibm.ws.cdi12.test.priority.web.NoPriorityBean;\n+import com.ibm.ws.cdi12.test.utils.ChainableListImpl;\n+import com.ibm.ws.cdi12.test.withAnnotations.WithAnnotationsServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.annotation.TestServlets;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.custom.junit.runner.TestModeFilter;\n+import componenttest.rules.repeater.EERepeatTests;\n+import componenttest.rules.repeater.RepeatTests;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ * Tests for <code>@WithAnnotations</code> used in portable extensions for observing type discovery of beans with certain annotations.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AnnotationsTests extends FATServletClient {\n+\n+    public static final String SERVER_NAME = \"cdi12BasicServer\";\n+\n+    public static final String DEP_PRODUCER_APP_NAME = \"DepProducerApp\";\n+    public static final String DEFAULT_DECORATOR_APP_NAME = \"defaultDecoratorApp\";\n+    public static final String GLOBAL_PRIORITY_APP_NAME = \"globalPriorityWebApp\";\n+    public static final String WITH_ANNOTATIONS_APP_NAME = \"withAnnotationsApp\";\n+\n+    @ClassRule\n+    public static RepeatTests r = EERepeatTests.with(SERVER_NAME, EE7, EE9); //not bothering to repeat with EE8 ... the EE9 version is mostly a transformed version of the EE8 code", "originalCommit": "1540feb5186b665562b9433e4e6cf7951780cb19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMTQ1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12804#discussion_r448921453", "bodyText": "assertThat(strings, hasItem(containsString(FIRST)))\nThe current assertContains method does not appear to output the actual value.", "author": "Azquelt", "createdAt": "2020-07-02T11:00:52Z", "path": "dev/com.ibm.ws.cdi.api_fat/test-applications/alterableContextApp.war/src/com/ibm/ws/cdi12/alterablecontext/test/AlterableContextTestServlet.java", "diffHunk": "@@ -33,12 +33,14 @@\n     private static String SECOND = \"Now the command returns: null\";\n \n     @Test\n-    public void testBeanWasFound(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+    @Mode(TestMode.FULL)\n+    public void testBeanWasFound() throws Exception {\n         List<String> strings = DirtySingleton.getStrings();\n         assertContains(strings, FIRST);", "originalCommit": "1540feb5186b665562b9433e4e6cf7951780cb19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDcwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12804#discussion_r448924701", "bodyText": "Probably better to do asserts inside TestBean.test() so you have a better idea of what actually failed.", "author": "Azquelt", "createdAt": "2020-07-02T11:07:56Z", "path": "dev/com.ibm.ws.cdi.api_fat/test-applications/injectInjectionPointAsParam.war/src/com/ibm/ws/fat/cdi/injectInjectionPointParam/InjectInjectionPointAsParamServlet.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.cdi.injectInjectionPointParam;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.servlet.annotation.WebServlet;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+@WebServlet(\"/\")\n+public class InjectInjectionPointAsParamServlet extends FATServlet {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Inject\n+    TestBean bean;\n+\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testInjectInjectionPointAsParam() throws IOException {\n+        if (!bean.test()) {\n+            fail(\"Bean Manager and/or Injection Point not correctly injected into TestBean constructor\");\n+        }", "originalCommit": "1540feb5186b665562b9433e4e6cf7951780cb19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}