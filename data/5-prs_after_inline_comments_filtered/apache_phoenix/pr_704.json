{"pr_number": 704, "pr_title": "PHOENIX-5713: Incorrectly handled view and view indexes with/without \u2026", "pr_createdAt": "2020-02-04T02:11:21Z", "pr_url": "https://github.com/apache/phoenix/pull/704", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTAwMA==", "url": "https://github.com/apache/phoenix/pull/704#discussion_r374495000", "bodyText": "viewName and viewIndex don't seem to be used in the tests below - probably testGetSourceTableName_index() and testGetSourceTableName_viewIndex() ought to use these instead of tableName. If not, consider removing them.", "author": "priyankporwal", "createdAt": "2020-02-04T06:34:58Z", "path": "phoenix-core/src/test/java/org/apache/phoenix/index/IndexScrutinyMapperTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.apache.phoenix.index;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.query.BaseConnectionlessQueryTest;\n+import org.apache.phoenix.schema.PName;\n+import org.apache.phoenix.schema.PNameFactory;\n+import org.apache.phoenix.schema.PTable;\n+import org.apache.phoenix.schema.PTableType;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+@RunWith(Parameterized.class)\n+public class IndexScrutinyMapperTest extends BaseConnectionlessQueryTest {\n+    String schema, tableName, viewName, viewIndex, indexName;\n+    boolean isNamespaceEnabled;\n+    PTable inputTable;\n+\n+    @Before\n+    public void setup() {\n+        schema = \"S_\"+generateUniqueName();\n+        tableName = \"T_\"+generateUniqueName();\n+        viewName = \"V_\"+generateUniqueName();\n+        viewIndex = \"VI_\"+generateUniqueName();", "originalCommit": "60f575c88d1cc362fbf3f5b7f4525727b01d3340", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwOTQ3Mw==", "url": "https://github.com/apache/phoenix/pull/704#discussion_r374809473", "bodyText": "Nit: spacing between + and recommend adding it like \"V_\" +", "author": "gokceni", "createdAt": "2020-02-04T17:18:50Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/NonParameterizedIndexScrutinyToolIT.java", "diffHunk": "@@ -156,20 +159,63 @@ public void testScrutinyOnRowsNearExpiry() throws Exception {\n \n         try (Connection conn =\n                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n-            conn.createStatement().execute(String.format(dataTableDDL, dataTableName));\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n             conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n-                    dataTableName));\n+                    dataTableFullName));\n             // insert two rows\n             PreparedStatement\n                     upsertDataStmt = conn.prepareStatement(String.format(upsertData,\n-                    dataTableName));\n+                    dataTableFullName));\n \n             EnvironmentEdgeManager.injectEdge(testClock);\n             upsertRow(upsertDataStmt, 1, \"name-1\", 98051);\n             upsertRow(upsertDataStmt, 2, \"name-2\", 98052);\n             conn.commit();\n \n-            List<Job> completedJobs = runScrutiny(null, dataTableName, indexTableName);\n+            List<Job> completedJobs = runScrutiny(schema, dataTableName, indexTableName);\n+            Job job = completedJobs.get(0);\n+            assertTrue(job.isSuccessful());\n+            Counters counters = job.getCounters();\n+            assertEquals(2, getCounterValue(counters, EXPIRED_ROW_COUNT));\n+            assertEquals(0, getCounterValue(counters, VALID_ROW_COUNT));\n+            assertEquals(0, getCounterValue(counters, INVALID_ROW_COUNT));\n+        }\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsNearExpiry_viewIndex() throws Exception {\n+        String schemaName = \"S\"+generateUniqueName();\n+        String dataTableName = \"T\"+generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName,dataTableName);\n+        String viewIndexName = \"VI\"+generateUniqueName();\n+        String viewName = \"V\"+generateUniqueName();", "originalCommit": "60f575c88d1cc362fbf3f5b7f4525727b01d3340", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwOTkxNQ==", "url": "https://github.com/apache/phoenix/pull/704#discussion_r374809915", "bodyText": "Is test table ttl around 5 sec is that why initialDelta is 5 below? If yes, you can use this constant", "author": "gokceni", "createdAt": "2020-02-04T17:19:39Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/NonParameterizedIndexScrutinyToolIT.java", "diffHunk": "@@ -156,20 +159,63 @@ public void testScrutinyOnRowsNearExpiry() throws Exception {\n \n         try (Connection conn =\n                 DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES))) {\n-            conn.createStatement().execute(String.format(dataTableDDL, dataTableName));\n+            conn.createStatement().execute(String.format(dataTableDDL, dataTableFullName));\n             conn.createStatement().execute(String.format(indexTableDDL, indexTableName,\n-                    dataTableName));\n+                    dataTableFullName));\n             // insert two rows\n             PreparedStatement\n                     upsertDataStmt = conn.prepareStatement(String.format(upsertData,\n-                    dataTableName));\n+                    dataTableFullName));\n \n             EnvironmentEdgeManager.injectEdge(testClock);\n             upsertRow(upsertDataStmt, 1, \"name-1\", 98051);\n             upsertRow(upsertDataStmt, 2, \"name-2\", 98052);\n             conn.commit();\n \n-            List<Job> completedJobs = runScrutiny(null, dataTableName, indexTableName);\n+            List<Job> completedJobs = runScrutiny(schema, dataTableName, indexTableName);\n+            Job job = completedJobs.get(0);\n+            assertTrue(job.isSuccessful());\n+            Counters counters = job.getCounters();\n+            assertEquals(2, getCounterValue(counters, EXPIRED_ROW_COUNT));\n+            assertEquals(0, getCounterValue(counters, VALID_ROW_COUNT));\n+            assertEquals(0, getCounterValue(counters, INVALID_ROW_COUNT));\n+        }\n+    }\n+\n+    @Test\n+    public void testScrutinyOnRowsNearExpiry_viewIndex() throws Exception {\n+        String schemaName = \"S\"+generateUniqueName();\n+        String dataTableName = \"T\"+generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName,dataTableName);\n+        String viewIndexName = \"VI\"+generateUniqueName();\n+        String viewName = \"V\"+generateUniqueName();\n+        String viewFullName = SchemaUtil.getTableName(schemaName,viewName);\n+        String dataTableDDL = \"CREATE TABLE %s (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, \"\n+                + \"ZIP INTEGER) TTL=\"+TEST_TABLE_TTL;", "originalCommit": "60f575c88d1cc362fbf3f5b7f4525727b01d3340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDg3Ng==", "url": "https://github.com/apache/phoenix/pull/704#discussion_r374850876", "bodyText": "It was an unnecessary code. Removed it.", "author": "swaroopak", "createdAt": "2020-02-04T18:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwOTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMjAwMw==", "url": "https://github.com/apache/phoenix/pull/704#discussion_r374812003", "bodyText": "I would suggest creating actual views, indexes, etc rather than mocking so that we are sure there is no test bug and the name convention is indeed as we expect.", "author": "gokceni", "createdAt": "2020-02-04T17:23:23Z", "path": "phoenix-core/src/test/java/org/apache/phoenix/index/IndexScrutinyMapperTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package org.apache.phoenix.index;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.phoenix.mapreduce.index.IndexScrutinyMapper;\n+import org.apache.phoenix.query.BaseConnectionlessQueryTest;\n+import org.apache.phoenix.schema.PName;\n+import org.apache.phoenix.schema.PNameFactory;\n+import org.apache.phoenix.schema.PTable;\n+import org.apache.phoenix.schema.PTableType;\n+import org.apache.phoenix.util.MetaDataUtil;\n+import org.apache.phoenix.util.SchemaUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+@RunWith(Parameterized.class)\n+public class IndexScrutinyMapperTest extends BaseConnectionlessQueryTest {\n+    String schema, tableName, viewName, viewIndex, indexName;\n+    boolean isNamespaceEnabled;\n+    PTable inputTable;\n+\n+    @Before\n+    public void setup() {\n+        schema = \"S_\"+generateUniqueName();\n+        tableName = \"T_\"+generateUniqueName();\n+        viewName = \"V_\"+generateUniqueName();\n+        viewIndex = \"VI_\"+generateUniqueName();\n+        indexName = \"I_\"+generateUniqueName();\n+        inputTable = Mockito.mock(PTable.class);\n+\n+    }\n+\n+    @Parameterized.Parameters(name =\"IndexUpgradeToolTest_isNamespaceEnabled={0}\")\n+    public static synchronized Collection<Boolean> data() {\n+        return Arrays.asList( false, true);\n+    }\n+\n+    public IndexScrutinyMapperTest(boolean isNamespaceEnabled) {\n+        this.isNamespaceEnabled = isNamespaceEnabled;\n+    }\n+    @Test\n+    public void testGetSourceTableName_table() {\n+        String fullTableName = SchemaUtil.getQualifiedTableName(schema, tableName);\n+        PName sourcePhysicalName = SchemaUtil.getPhysicalHBaseTableName(schema, tableName,\n+                isNamespaceEnabled);\n+        String expectedName = SchemaUtil.getPhysicalTableName(Bytes.toBytes(fullTableName),\n+                isNamespaceEnabled).toString();\n+        //setup\n+        Mockito.when(inputTable.getType()).thenReturn(PTableType.TABLE);\n+        Mockito.when(inputTable.getPhysicalName()).thenReturn(sourcePhysicalName);\n+        Mockito.when(inputTable.getTableName()).thenReturn(PNameFactory.newName(tableName));\n+        Mockito.when(inputTable.getSchemaName()).thenReturn(PNameFactory.newName(schema));\n+        //test\n+        String output = IndexScrutinyMapper.getSourceTableName(inputTable, isNamespaceEnabled);\n+        //assert\n+        Assert.assertEquals(expectedName, output);\n+    }\n+\n+    @Test\n+    public void testGetSourceTableName_view() {\n+        String fullTableName = SchemaUtil.getQualifiedTableName(schema, tableName);\n+        PName sourcePhysicalName = SchemaUtil.getPhysicalHBaseTableName(schema, tableName,\n+                isNamespaceEnabled);\n+        String expectedName = SchemaUtil.getPhysicalTableName(Bytes.toBytes(fullTableName),\n+                isNamespaceEnabled).toString();\n+        //setup\n+        Mockito.when(inputTable.getType()).thenReturn(PTableType.VIEW);\n+        Mockito.when(inputTable.getPhysicalName()).thenReturn(sourcePhysicalName);\n+        //test\n+        String output = IndexScrutinyMapper.getSourceTableName(inputTable, isNamespaceEnabled);\n+        //assert\n+        Assert.assertEquals(expectedName, output);\n+    }\n+\n+    @Test\n+    public void testGetSourceTableName_index() {\n+        String fullTableName = SchemaUtil.getQualifiedTableName(schema, indexName);\n+        PName sourcePhysicalName = SchemaUtil.getPhysicalHBaseTableName(schema, indexName,\n+                isNamespaceEnabled);\n+        String expectedName = SchemaUtil.getPhysicalTableName(Bytes.toBytes(fullTableName),\n+                isNamespaceEnabled).toString();\n+\n+        //setup\n+        Mockito.when(inputTable.getType()).thenReturn(PTableType.INDEX);\n+        Mockito.when(inputTable.getPhysicalName()).thenReturn(sourcePhysicalName);\n+        Mockito.when(inputTable.getTableName()).thenReturn(PNameFactory.newName(indexName));\n+        Mockito.when(inputTable.getSchemaName()).thenReturn(PNameFactory.newName(schema));\n+\n+        //test\n+        String output = IndexScrutinyMapper.getSourceTableName(inputTable, isNamespaceEnabled);\n+        //assert\n+        Assert.assertEquals(expectedName, output);\n+    }\n+\n+    @Test\n+    public void testGetSourceTableName_viewIndex() {\n+        PName physicalTableName = SchemaUtil.getPhysicalHBaseTableName(schema, tableName,", "originalCommit": "60f575c88d1cc362fbf3f5b7f4525727b01d3340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MTQ0OQ==", "url": "https://github.com/apache/phoenix/pull/704#discussion_r374851449", "bodyText": "This is a unit test. Creating a view/table would involve setting up and tearing down mini-cluster which will lead to more time in build phase.", "author": "swaroopak", "createdAt": "2020-02-04T18:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMjAwMw=="}], "type": "inlineReview"}, {"oid": "9619c38d7d76eabfc01393dead6b285297cb1a21", "url": "https://github.com/apache/phoenix/commit/9619c38d7d76eabfc01393dead6b285297cb1a21", "message": "PHOENIX-5713: Incorrectly handled view and view indexes with/without namespace in IndexScrutinyMapper#getTtl()", "committedDate": "2020-02-04T18:41:20Z", "type": "commit"}, {"oid": "43c3fad9ae9e968e076a90c8d7b96876fad3c750", "url": "https://github.com/apache/phoenix/commit/43c3fad9ae9e968e076a90c8d7b96876fad3c750", "message": "Added apache license", "committedDate": "2020-02-04T20:34:52Z", "type": "commit"}, {"oid": "43c3fad9ae9e968e076a90c8d7b96876fad3c750", "url": "https://github.com/apache/phoenix/commit/43c3fad9ae9e968e076a90c8d7b96876fad3c750", "message": "Added apache license", "committedDate": "2020-02-04T20:34:52Z", "type": "forcePushed"}]}