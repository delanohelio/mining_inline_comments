{"pr_number": 3236, "pr_title": "Maintain ordering for GREL uniques() function", "pr_createdAt": "2020-09-30T21:46:14Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/3236", "timeline": [{"oid": "bb4fc50f17c6db6d52ecd6a29f16b108a04bee24", "url": "https://github.com/OpenRefine/OpenRefine/commit/bb4fc50f17c6db6d52ecd6a29f16b108a04bee24", "message": "Enable missed test", "committedDate": "2020-09-30T21:44:05Z", "type": "commit"}, {"oid": "959200d141e11020f9980dc8f5c45da026c584fa", "url": "https://github.com/OpenRefine/OpenRefine/commit/959200d141e11020f9980dc8f5c45da026c584fa", "message": "Maintain order for uniques() - fixes #3235\n\nAlso add tests", "committedDate": "2020-09-30T21:45:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNDYzMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r497834631", "bodyText": "Just in case, I think having a test5 for only nulls (thinking about that problem Owen had one time when updating the GREL null handling parts?)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                    String[] test5 = {\"[null,null,null].uniques().toString()\", \"[null]\"};\n          \n          \n            \n                    parseEval(bindings, test5);\n          \n          \n            \n                }", "author": "thadguidry", "createdAt": "2020-09-30T22:24:12Z", "path": "main/tests/server/src/com/google/refine/expr/functions/arrays/UniquesTests.java", "diffHunk": "@@ -28,13 +28,47 @@\n \n import org.testng.annotations.Test;\n \n+import com.google.refine.RefineTest;\n+import com.google.refine.expr.ParsingException;\n import com.google.refine.util.TestUtils;\n \n-public class UniquesTests {\n+public class UniquesTests extends RefineTest {\n     @Test\n     public void serializeUniques() {\n         String json = \"{\\\"description\\\":\\\"Returns array a with duplicates removed\\\",\\\"params\\\":\\\"array a\\\",\\\"returns\\\":\\\"array\\\"}\";\n         TestUtils.isSerializedTo(new Uniques(), json);\n     }\n+\n+    public void uniquesJsonArray() throws ParsingException {\n+        String[] test = {\"'[2,1,1,3]'.parseJson().uniques().toString()\", \"[2, 1, 3]\"};\n+        parseEval(bindings, test);\n+        String[] test1 = {\"'[2,2,null,null,3,3]'.parseJson().uniques().toString()\", \"[2, null, 3]\"};\n+        parseEval(bindings, test1);\n+    }\n+\n+    @Test\n+    public void uniquesArray() throws ParsingException {\n+        String[] test = {\"[2,1,1,3].uniques().toString()\", \"[2, 1, 3]\"};\n+        parseEval(bindings, test);\n+        String[] test1 = {\"[2,2,null,null,3,3,3].uniques().toString()\", \"[2, null, 3]\"};\n+        parseEval(bindings, test1);\n+\n+        String[] test2 = {\"['z','b','c','c','a'].uniques().toString()\", \"[z, b, c, a]\"};\n+        parseEval(bindings, test2);\n+        String[] test3 = {\"['z','z',null,'c','a'].uniques().toString()\", \"[z, null, c, a]\"};\n+        parseEval(bindings, test3);\n+\n+        String[] test4 = {\"[toDate(2020), '2018-03-02'.toDate(), toDate(2020)].uniques().toString()\", \"[2020-01-01T00:00Z, 2018-03-02T00:00Z]\"};\n+        parseEval(bindings, test4);\n+    }", "originalCommit": "959200d141e11020f9980dc8f5c45da026c584fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjkyOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r497896928", "bodyText": "I don't think I understand that risk that @ostephens identified, but I've added the test.\nAs an aside, OpenRefine has a deeply held ambivalence about the equivalency of nulls & empty strings, so it doesn't surprise me that problems were encountered when trying to change null handling.", "author": "tfmorris", "createdAt": "2020-10-01T00:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNDYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxNTc0MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r497915740", "bodyText": "@tfmorris Hi Tom, we changed that equivalency BECAUSE of the ambivalence documented in #820 and a few other issues, where a majority of the community wanted more precise handling and treating null/empty string separately, which I completely agreed with the majority of the community in that regard.  Hence, since Owen merged that work last year that all landed in 3.0 release along with the Database Importer/Exporter which also has null handling (and the metadata fiasco you're now aware of), so we now treat null and empty strings entirely separately (well, I hope we treat them separately in all areas of OpenRefine, but that's probably not been 100% verified because of probably a few tests lacking in places)\nLike in this issue #2265 on the SQL Exporter where @colognesdgs says when using the JSON importer, and then later using the SQL Exporter.\n\nThe data is interpreted as null, but stored by openrefine as empty strings.\n\nAt any rate, you get the idea... we still have some soft bugs floating around regarding null/empty string I think in regards to that previous ambivalence, and so testing around null and empty string is very dear to my heart still to finally fully address especially for scientific data being ingested through JSON or SQL importers/exporters (part of the reason we were liked by CZI for the grant).  (whew!)", "author": "thadguidry", "createdAt": "2020-10-01T01:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNDYzMQ=="}], "type": "inlineReview"}, {"oid": "d6e42bf5d9eb683b81d76bde908ddd2fe9a956be", "url": "https://github.com/OpenRefine/OpenRefine/commit/d6e42bf5d9eb683b81d76bde908ddd2fe9a956be", "message": "Annotate another missed test", "committedDate": "2020-10-01T00:00:08Z", "type": "commit"}, {"oid": "dbb8e530c8bddf573eace7f9b6f071a3206ab1f5", "url": "https://github.com/OpenRefine/OpenRefine/commit/dbb8e530c8bddf573eace7f9b6f071a3206ab1f5", "message": "Add tests for array reverse & join", "committedDate": "2020-10-01T00:24:05Z", "type": "commit"}, {"oid": "30d16c207787fe37ef7eb5b366cb0a4adea6783e", "url": "https://github.com/OpenRefine/OpenRefine/commit/30d16c207787fe37ef7eb5b366cb0a4adea6783e", "message": "Add Thad/Owen's test", "committedDate": "2020-10-01T00:57:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMDg2Ng==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r497920866", "bodyText": "Yes, they should return differently.  I think that was agreed in #820 and it's linked issues/pr's\nWe might even consider a combined test for null/empty?\nString[] test4 = {\"['z', '', null,'c','a'].join('-')\", \"z---c-a\"};", "author": "thadguidry", "createdAt": "2020-10-01T01:37:09Z", "path": "main/tests/server/src/com/google/refine/expr/functions/arrays/JoinTests.java", "diffHunk": "@@ -28,13 +28,35 @@\n \n import org.testng.annotations.Test;\n \n+import com.google.refine.RefineTest;\n+import com.google.refine.expr.ParsingException;\n import com.google.refine.util.TestUtils;\n \n-public class JoinTests {\n+public class JoinTests extends RefineTest {\n     @Test\n     public void serializeJoin() {\n         String json = \"{\\\"description\\\":\\\"Returns the string obtained by joining the array a with the separator sep\\\",\\\"params\\\":\\\"array a, string sep\\\",\\\"returns\\\":\\\"string\\\"}\";\n         TestUtils.isSerializedTo(new Join(), json);\n     }\n+\n+    @Test\n+    public void joinArray() throws ParsingException {\n+        String[] test = {\"[2,1,3].join('|')\", \"2|1|3\"};\n+        parseEval(bindings, test);\n+\n+        // TODO: This is current behavior, but is it what we want?\n+        String[] test1 = {\"[2,null,3].join(', ')\", \"2, 3\"};\n+        parseEval(bindings, test1);\n+\n+        String[] test2 = {\"['z','b','c','a'].join('-')\", \"z-b-c-a\"};\n+        parseEval(bindings, test2);\n+\n+        // TODO: Do we really want the following two tests to return different results?\n+        String[] test3 = {\"['z', null,'c','a'].join('-')\", \"z-c-a\"};\n+        parseEval(bindings, test3);\n+        String[] test4 = {\"['z', '','c','a'].join('-')\", \"z--c-a\"};", "originalCommit": "30d16c207787fe37ef7eb5b366cb0a4adea6783e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyNDMyNQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r497924325", "bodyText": "As I had mentioned before, other data tools have Null morpheme as a preference for the user for their data handling.  We might eventually want to do that.  I do feel somewhat disappointed that the whole thing felt rushed for everything in 3.0 release, and we really didn't get more opinions come in from the community on this...some just expected things to work well for null/empty strings no matter.  Others expected to have more control given to them and not less taken away.  We seemed to have taken some control away and saying \"We shall always treat them differently now, no matter what, because we're too lazy to change all the places in our code to deal with null/empty string to give the user a choice instead of the easier path and making that choice for him\".\nMaybe we can make that a goal for 2021/22 ... add a preference for null/empty string treated as equivalent?  But it feels backwards to even say that.", "author": "thadguidry", "createdAt": "2020-10-01T01:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzMjg1Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r497932852", "bodyText": "Hmm, Java8 has Optional? https://stackoverflow.com/questions/21936503/get-empty-string-when-null\nAnd Java9+ has Objects.requireNonNullElse ?\n(sorry for the segue)", "author": "thadguidry", "createdAt": "2020-10-01T01:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA2OTgyMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r498069821", "bodyText": "I'm afraid despite lots of effort and discussion we still don't have consistency in situations where a null is forced to a string. I think it's definitely worth another review and attempt to get to a reasonable approach but as a separate issue to this. So pending further discussion & agreement I feel its safer to keep the current behaviour for join", "author": "ostephens", "createdAt": "2020-10-01T08:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNzEzOQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r498607139", "bodyText": "@thadguidry Your proposed test would fail. The result would actually be z--c-a which is one of the weirdly inconsistent things about this.\nFor the record, I wasn't actually considering any unrelated changes to join() as part of this PR. I was just flagging the inconsistency for future review.\nI added the tests because I was working in the neighborhood of completely untested functions. I added the comments when I had to change the tests to match the inconsistent behavior of our current implementation.", "author": "tfmorris", "createdAt": "2020-10-02T03:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxMDkzNw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3236#discussion_r498610937", "bodyText": "@tfmorris Thanks Tom.  I see on other issue comments that you are diving into it all.  We'll let you work it all out :-)  Thanks so much!", "author": "thadguidry", "createdAt": "2020-10-02T04:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMDg2Ng=="}], "type": "inlineReview"}]}