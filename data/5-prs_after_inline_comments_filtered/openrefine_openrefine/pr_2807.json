{"pr_number": 2807, "pr_title": "New implementation for Multivalue Scrutinizer", "pr_createdAt": "2020-06-24T18:25:54Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2807", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMjI5Ng==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445112296", "bodyText": "I think the end goal is to remove any methods that are specific to a given constraint from the ConstraintFetcher interface. So I would rather mock a generic method (like getSingleConstraint) and make sure the scrunizer calls that.", "author": "wetneb", "createdAt": "2020-06-24T19:10:52Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizerTest.java", "diffHunk": "@@ -19,6 +24,9 @@ public void testNoIssue() {\n         ItemIdValue idB = TestingData.matchedId;\n         ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(TestingData.generateStatement(idA, idB))\n                 .addStatement(TestingData.generateStatement(idA, idB)).build();\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.hasMultiValue(anyObject())).thenReturn(true);", "originalCommit": "a525a00a123cfaed9279a152522eba44ded531a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMjkxMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445112911", "bodyText": "Is this inner class actually used in the scrutinizer?", "author": "wetneb", "createdAt": "2020-06-24T19:12:04Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -3,15 +3,36 @@\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n public class MultiValueScrutinizer extends EditScrutinizer {\n \n     public static final String new_type = \"multi-valued-property-is-required-for-new-item\";\n     public static final String existing_type = \"multi-valued-property-is-required-for-existing-item\";\n+    public static String MULTI_VALUE_CONSTRAINT_QID = \"Q21510857\";\n+    public static String MULTI_VALUE_CONSTRAINT_STATUS = \"P2316\";\n+\n+    class MultivalueConstraint {", "originalCommit": "a525a00a123cfaed9279a152522eba44ded531a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTY5Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445115692", "bodyText": "Actually, no. Because it has just one parameter as constraint status, which we are not currently using to raise warnings. Should we consider that? then only this class makes any sense.", "author": "darecoder", "createdAt": "2020-06-24T19:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMjkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExODA5OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445118098", "bodyText": "I think it the general structure of scrutinizers should be like this:\n\nfetch all constraint statements of a given type via the fetcher\nmap these to constraint definitions (.map(statement -> new MultivalueConstraint(statement)))\nfor each constraint definition, run the scrutinizing code\n\nSo in this case the inner class would still be \"used\": the scrutinizing code would just not rely on it to fetch parameters for now. In the future, when we add support for exceptions, this class will still be useful :) Or we could replace it simply by the base class that fetches generic constraint parameters, too.", "author": "wetneb", "createdAt": "2020-06-24T19:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMzQwOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445113408", "bodyText": "I would rather pass a Statement as parameter, and do the initial fetching externally. This ensures that an instance of this inner class corresponds to a constraint declaration.", "author": "wetneb", "createdAt": "2020-06-24T19:13:00Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -3,15 +3,36 @@\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n public class MultiValueScrutinizer extends EditScrutinizer {\n \n     public static final String new_type = \"multi-valued-property-is-required-for-new-item\";\n     public static final String existing_type = \"multi-valued-property-is-required-for-existing-item\";\n+    public static String MULTI_VALUE_CONSTRAINT_QID = \"Q21510857\";\n+    public static String MULTI_VALUE_CONSTRAINT_STATUS = \"P2316\";\n+\n+    class MultivalueConstraint {\n+        Value constraintStatus;\n+\n+        MultivalueConstraint(PropertyIdValue propertyIdValue) {", "originalCommit": "a525a00a123cfaed9279a152522eba44ded531a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNzMwNQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445627305", "bodyText": "When does it make sense for getConstraintsByType to return a null value in its stream? Intuitively I think these should be filtered out upstream, no?", "author": "wetneb", "createdAt": "2020-06-25T15:03:00Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -29,6 +51,7 @@ public void scrutinize(ItemUpdate update) {\n         if (update.isNew()) {\n             for (PropertyIdValue pid : propertyCount.keySet()) {\n                 if (propertyCount.get(pid) == 1) {\n+                    List<MultivalueConstraint> constraints = _fetcher.getConstraintsByType(pid, MULTI_VALUE_CONSTRAINT_QID).map(statement -> statement == null ? null : new MultivalueConstraint(statement)).collect(Collectors.toList());", "originalCommit": "d3472d25657c4e2ccf64ed8b147b8cc5bffaa595", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "baaad450039653176f6e1950f39f171a9704d831", "url": "https://github.com/OpenRefine/OpenRefine/commit/baaad450039653176f6e1950f39f171a9704d831", "message": "New implementation for Multivalue Scrutinizer\n\nCreated inner class for Multivalue & mocks for unit tests\n\nNew implementation for multivalue scrutinizer\n\ntests updated", "committedDate": "2020-06-26T07:48:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNTkzMA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r446035930", "bodyText": "This \"constraint status\" property is not specific to the multi value constraint, it is applicable to all other constraint definitions, so it should rather be defined in a generic location. We can leave this as it is right now, but in the future it really ought to be used by a class that all constraint definitions inherit from.", "author": "wetneb", "createdAt": "2020-06-26T08:13:48Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -3,15 +3,36 @@\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n public class MultiValueScrutinizer extends EditScrutinizer {\n \n     public static final String new_type = \"multi-valued-property-is-required-for-new-item\";\n     public static final String existing_type = \"multi-valued-property-is-required-for-existing-item\";\n+    public static String MULTI_VALUE_CONSTRAINT_QID = \"Q21510857\";\n+    public static String MULTI_VALUE_CONSTRAINT_STATUS = \"P2316\";", "originalCommit": "baaad450039653176f6e1950f39f171a9704d831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}