{"pr_number": 301, "pr_title": "create default ack_status node for moduleVersion. update portal view url", "pr_createdAt": "2020-05-29T16:10:31Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/301", "timeline": [{"oid": "62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "url": "https://github.com/redhataccess/pantheon/commit/62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "message": "create default ack_status node for moduleVersion. update portal view url", "committedDate": "2020-05-29T16:08:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzI3NA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r432617274", "bodyText": "I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.", "author": "carlosmunoz", "createdAt": "2020-05-29T16:59:35Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -300,6 +294,9 @@ private String buildModule(@Nonnull Module base, @Nonnull Locale locale, @Nonnul\n                         .jcrData().get());\n                 html = asciidoctor.convert(content.toString(), ob.get());\n                 cacheContent(moduleVersion, html);\n+\n+                // ack_status\n+                moduleVersion.ackStatus().getOrCreate();", "originalCommit": "62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMjY3MQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434202671", "bodyText": "comment added", "author": "xdavidson", "createdAt": "2020-06-02T22:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzI3NA=="}], "type": "inlineReview"}, {"oid": "dc5de92d26ed920ef46573905699c0fe3c685059", "url": "https://github.com/redhataccess/pantheon/commit/dc5de92d26ed920ef46573905699c0fe3c685059", "message": "add new variant-based api", "committedDate": "2020-06-02T22:05:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDYxNw==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434584617", "bodyText": "I would just get rid of the comment", "author": "carlosmunoz", "createdAt": "2020-06-03T13:53:53Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -102,6 +104,7 @@ protected String getQuery(SlingHttpServletRequest request) {\n                     .append(\"jcr:like(*/*/*/*/metadata/@jcr:title,'%\" + searchParam + \"%') \")\n                     .append(\"or jcr:like(*/*/*/*/metadata/@jcr:description,'%\" + searchParam + \"%')\")\n                     .append(\"or jcr:like(*/*/*/*/cached_html/jcr:content/@jcr:data,'%\" + searchParam + \"%')\")\n+//                    .append(\"or jcr:like(*/*/source/@jcr:created,'%\" + searchParam + \"%') \")", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTQ5MQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434799491", "bodyText": "done", "author": "xdavidson", "createdAt": "2020-06-03T19:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434587479", "bodyText": "instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.", "author": "carlosmunoz", "createdAt": "2020-06-03T13:57:42Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -183,11 +187,14 @@ protected String getQuery(SlingHttpServletRequest request) {\n     protected Map<String, Object> resourceToMap(Resource resource) {\n         Module module = resource.adaptTo(Module.class);\n \n-        String variantName = module.getWorkspace()\n+        String variantName = DEFAULT_VARIANT_NAME;\n+        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n                 .moduleVariantDefinitions().get()\n-                .getVariants()\n-                .findFirst().get()\n-                .getName();\n+                .getVariants();\n+\n+        if (mvd != null) {", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMjUzNA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434812534", "bodyText": "updated.", "author": "xdavidson", "createdAt": "2020-06-03T19:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTYxNA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434869614", "bodyText": "\ud83d\udc4d\n(you could keep traversing all the way down to the variant name and avoid that null check \ud83d\ude03 )", "author": "carlosmunoz", "createdAt": "2020-06-03T21:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4Nzg1NQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434587855", "bodyText": "love this url style! \ud83d\udc4d", "author": "carlosmunoz", "createdAt": "2020-06-03T13:58:14Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.google.common.base.Charsets;\n+import com.ibm.icu.util.ULocale;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.module.Metadata;\n+import com.redhat.pantheon.model.module.ModuleVariant;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.CONTENT_TYPE;\n+import static com.redhat.pantheon.model.api.util.ResourceTraversal.traverseFrom;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module/variant.json/${variantUuid}\";", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e452d65fef8afb5c15e49472411311d32e366466", "url": "https://github.com/redhataccess/pantheon/commit/e452d65fef8afb5c15e49472411311d32e366466", "message": "update hydra messages to use the variant api", "committedDate": "2020-06-03T18:08:54Z", "type": "commit"}, {"oid": "1ce99b0b382323511fcad0446dc7bff938f0647d", "url": "https://github.com/redhataccess/pantheon/commit/1ce99b0b382323511fcad0446dc7bff938f0647d", "message": "code review fixes", "committedDate": "2020-06-03T19:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2ODQwNg==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434868406", "bodyText": "Not a blocker, but we should add the uuid field to the ModuleVariant model so we can use it.", "author": "carlosmunoz", "createdAt": "2020-06-03T21:29:06Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java", "diffHunk": "@@ -241,32 +242,26 @@ public void checkServerTrusted(X509Certificate[] certs, String authType) {\n     private String buildModuleVersionUri(ModuleVersion moduleVersion) {\n         StringSubstitutor strSubs = new StringSubstitutor();\n         HashMap values = Maps.newHashMap();\n-        values.put(\"moduleUuid\", moduleVersion.getParent().getParent().getParent().getParent().uuid().get());\n-        values.put(\"localeId\", moduleVersion.getParent().getParent().getParent().getName());\n-        values.put(\"variantName\", moduleVersion.getParent().getName());\n+        values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?", "originalCommit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}