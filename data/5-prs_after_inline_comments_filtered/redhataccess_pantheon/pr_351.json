{"pr_number": 351, "pr_title": "Adds Assembly classes to our Sling Model for future development work", "pr_createdAt": "2020-07-23T20:00:43Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/351", "timeline": [{"oid": "c9c63e4bd6c7ca63822fdf38f96afc9d69f91004", "url": "https://github.com/redhataccess/pantheon/commit/c9c63e4bd6c7ca63822fdf38f96afc9d69f91004", "message": "intermediate checkin, code may not work", "committedDate": "2020-07-22T14:10:28Z", "type": "commit"}, {"oid": "c6611df4466cf3f9a4e5372d7938a712e4a57717", "url": "https://github.com/redhataccess/pantheon/commit/c6611df4466cf3f9a4e5372d7938a712e4a57717", "message": "Code works", "committedDate": "2020-07-23T19:28:17Z", "type": "commit"}, {"oid": "8e8ef9d2bba4017a622fa914e9d90ee3c1ccf241", "url": "https://github.com/redhataccess/pantheon/commit/8e8ef9d2bba4017a622fa914e9d90ee3c1ccf241", "message": "Adding assembly model classes", "committedDate": "2020-07-23T19:51:51Z", "type": "commit"}, {"oid": "f152721155b67d0faaa455b5d8f18c0190577323", "url": "https://github.com/redhataccess/pantheon/commit/f152721155b67d0faaa455b5d8f18c0190577323", "message": "Removing some imports", "committedDate": "2020-07-23T19:59:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDkzNg==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459700936", "bodyText": "I dislike instanceof \ud83d\ude22\nI wonder if extracting the module type is something we should externalize to a different asciidoctor extension. One that specializes in Modules. That way we build the extension set based on the type of document that we need to generate.", "author": "carlosmunoz", "createdAt": "2020-07-23T20:12:40Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/extension/MetadataExtractorTreeProcessor.java", "diffHunk": "@@ -136,18 +137,24 @@ private void extractAbstract(List<StructuralNode> allNodes) {\n      */\n     private void extractModuleType(Document document) {\n         Object attValue = document.getAttribute(MODULE_TYPE_ATT_NAME);\n+        ModuleMetadata mm = null;\n+        if (documentMetadata instanceof ModuleMetadata) {", "originalCommit": "f152721155b67d0faaa455b5d8f18c0190577323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MTE3MA==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460081170", "bodyText": "Per our gchat conversation, I feel that this is a strength of the code, not a weakness. I would like to leave it as-is for now. We could revisit the decision later if things get more complicated.", "author": "benradey", "createdAt": "2020-07-24T14:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTc4NA==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459701784", "bodyText": "I don't think we need this.", "author": "carlosmunoz", "createdAt": "2020-07-23T20:14:31Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {", "originalCommit": "f152721155b67d0faaa455b5d8f18c0190577323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjIxMw==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460082213", "bodyText": "Removed.", "author": "benradey", "createdAt": "2020-07-24T14:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTg5MA==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459701890", "bodyText": "I don't think we need this.", "author": "carlosmunoz", "createdAt": "2020-07-23T20:14:45Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariant.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.SlingModels;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariant;\n+\n+/**\n+ * A specific assembly variant node which houses all the versions for a specific language in the assembly.\n+ */\n+@JcrPrimaryType(\"pant:assemblyVariant\")\n+public interface AssemblyVariant extends DocumentVariant {\n+\n+    Child<AssemblyVersion> draft();\n+\n+    Child<AssemblyVersion> released();\n+\n+    @Override\n+    AssemblyVariants getParent();\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion getOrCreateVersion(String name) {\n+        return child(name, AssemblyVersion.class).get();\n+    }\n+\n+    // TODO Not sure we need this\n+    default AssemblyVersion createNextVersion() {", "originalCommit": "f152721155b67d0faaa455b5d8f18c0190577323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjIzOA==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460082238", "bodyText": "Removed.", "author": "benradey", "createdAt": "2020-07-24T14:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjIwNA==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r459702204", "bodyText": "this method is not needed either.", "author": "carlosmunoz", "createdAt": "2020-07-23T20:15:17Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/assembly/AssemblyVariants.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.redhat.pantheon.model.assembly;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.annotation.JcrPrimaryType;\n+import com.redhat.pantheon.model.document.DocumentVariants;\n+\n+import javax.inject.Named;\n+import java.util.stream.Stream;\n+\n+import static com.redhat.pantheon.model.document.DocumentVariant.DEFAULT_VARIANT_NAME;\n+\n+/**\n+ * @author Carlos Munoz\n+ */\n+@JcrPrimaryType(\"sling:OrderedFolder\")\n+public interface AssemblyVariants extends DocumentVariants {\n+\n+    // The default variant\n+    @Named(DEFAULT_VARIANT_NAME)\n+    Child<AssemblyVariant> defaultVariant();\n+\n+    default Stream<AssemblyVariant> getVariants() {\n+        return this.as(AssemblyVariant.class);\n+    }\n+\n+    default AssemblyVariant getOrCreateVariant(String name) {", "originalCommit": "f152721155b67d0faaa455b5d8f18c0190577323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjI2OQ==", "url": "https://github.com/redhataccess/pantheon/pull/351#discussion_r460082269", "bodyText": "Removed.", "author": "benradey", "createdAt": "2020-07-24T14:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjIwNA=="}], "type": "inlineReview"}, {"oid": "79fb281a3d8c768d4c567285de684f45d0b7feed", "url": "https://github.com/redhataccess/pantheon/commit/79fb281a3d8c768d4c567285de684f45d0b7feed", "message": "Removing unneeded methods due to PR feedback", "committedDate": "2020-07-24T14:04:53Z", "type": "commit"}]}