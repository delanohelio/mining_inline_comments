{"pr_number": 599, "pr_title": "Add support for explicit sparse lists and maps", "pr_createdAt": "2020-10-08T03:06:45Z", "pr_url": "https://github.com/awslabs/smithy/pull/599", "timeline": [{"oid": "c831eb25a1ed164d555d8e3b497abcaa05fb3b46", "url": "https://github.com/awslabs/smithy/commit/c831eb25a1ed164d555d8e3b497abcaa05fb3b46", "message": "Add support for explicit sparse lists and maps\n\nThe vast majority of all lists and maps in use today are dense, meaning\nthey cannot contain null values. However, we have historically had no\nway to indicate that a list or map (value) supports nulls, so we had to\nassume that all lists and maps are sparse. This change makes it so that\nall lists and maps are considered dense by default, but services can\nopt-in to sparse lists using the `sparse` trait. This matters because it\nnow allows languages that bake \"null\" into their type systems to provide\nbetter generated types.", "committedDate": "2020-10-12T19:10:46Z", "type": "forcePushed"}, {"oid": "ac17950bbb9d19b8478c163134c2fc6f93c47780", "url": "https://github.com/awslabs/smithy/commit/ac17950bbb9d19b8478c163134c2fc6f93c47780", "message": "Add support for explicit sparse lists and maps\n\nThe vast majority of all lists and maps in use today are dense, meaning\nthey cannot contain null values. However, we have historically had no\nway to indicate that a list or map (value) supports nulls, so we had to\nassume that all lists and maps are sparse. This change makes it so that\nall lists and maps are considered dense by default, but services can\nopt-in to sparse lists using the `sparse` trait. This matters because it\nnow allows languages that bake \"null\" into their type systems to provide\nbetter generated types.\n\nGiven that nullability is now more abstract than just the box trait, I\nthink that deprecating BoxIndex in favor of NullableIndex makes the\nconcept more clear. BoxIndex still exists and can be used, but extends\nfrom NullableIndex.", "committedDate": "2020-10-13T00:58:13Z", "type": "commit"}, {"oid": "ac17950bbb9d19b8478c163134c2fc6f93c47780", "url": "https://github.com/awslabs/smithy/commit/ac17950bbb9d19b8478c163134c2fc6f93c47780", "message": "Add support for explicit sparse lists and maps\n\nThe vast majority of all lists and maps in use today are dense, meaning\nthey cannot contain null values. However, we have historically had no\nway to indicate that a list or map (value) supports nulls, so we had to\nassume that all lists and maps are sparse. This change makes it so that\nall lists and maps are considered dense by default, but services can\nopt-in to sparse lists using the `sparse` trait. This matters because it\nnow allows languages that bake \"null\" into their type systems to provide\nbetter generated types.\n\nGiven that nullability is now more abstract than just the box trait, I\nthink that deprecating BoxIndex in favor of NullableIndex makes the\nconcept more clear. BoxIndex still exists and can be used, but extends\nfrom NullableIndex.", "committedDate": "2020-10-13T00:58:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzM2Nw==", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504107367", "bodyText": "Nit: use shape.isMemberShape() or store the optional.", "author": "kstich", "createdAt": "2020-10-13T16:45:28Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.knowledge;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.ShapeType;\n+import software.amazon.smithy.model.shapes.ToShapeId;\n+import software.amazon.smithy.model.traits.BoxTrait;\n+import software.amazon.smithy.model.traits.SparseTrait;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * An index that checks if a shape can be set to null.\n+ */\n+public class NullableIndex implements KnowledgeIndex {\n+\n+    private static final Set<ShapeType> INHERENTLY_BOXED = SetUtils.of(\n+            ShapeType.STRING,\n+            ShapeType.BLOB,\n+            ShapeType.TIMESTAMP,\n+            ShapeType.BIG_DECIMAL,\n+            ShapeType.BIG_INTEGER,\n+            ShapeType.LIST,\n+            ShapeType.SET,\n+            ShapeType.MAP,\n+            ShapeType.STRUCTURE,\n+            ShapeType.UNION);\n+\n+    private final Set<ShapeId> nullableShapes = new HashSet<>();\n+\n+    public NullableIndex(Model model) {\n+        for (Shape shape : model.toSet()) {\n+            if (shape.asMemberShape().isPresent()) {", "originalCommit": "ac17950bbb9d19b8478c163134c2fc6f93c47780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMzI0OQ==", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504123249", "bodyText": "I did it the way it is now because it doesn't warn in the IDE. Maybe we can add new expect methods going forward?", "author": "mtdowling", "createdAt": "2020-10-13T17:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODM4MQ==", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504118381", "bodyText": "This should state that it's the members of the sparse lists and maps.", "author": "kstich", "createdAt": "2020-10-13T17:03:28Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.knowledge;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.ShapeType;\n+import software.amazon.smithy.model.shapes.ToShapeId;\n+import software.amazon.smithy.model.traits.BoxTrait;\n+import software.amazon.smithy.model.traits.SparseTrait;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * An index that checks if a shape can be set to null.\n+ */\n+public class NullableIndex implements KnowledgeIndex {\n+\n+    private static final Set<ShapeType> INHERENTLY_BOXED = SetUtils.of(\n+            ShapeType.STRING,\n+            ShapeType.BLOB,\n+            ShapeType.TIMESTAMP,\n+            ShapeType.BIG_DECIMAL,\n+            ShapeType.BIG_INTEGER,\n+            ShapeType.LIST,\n+            ShapeType.SET,\n+            ShapeType.MAP,\n+            ShapeType.STRUCTURE,\n+            ShapeType.UNION);\n+\n+    private final Set<ShapeId> nullableShapes = new HashSet<>();\n+\n+    public NullableIndex(Model model) {\n+        for (Shape shape : model.toSet()) {\n+            if (shape.asMemberShape().isPresent()) {\n+                if (isMemberNullable(model, shape.asMemberShape().get())) {\n+                    nullableShapes.add(shape.getId());\n+                }\n+            } else if (isShapeBoxed(shape)) {\n+                nullableShapes.add(shape.getId());\n+            }\n+        }\n+    }\n+\n+    public static NullableIndex of(Model model) {\n+        return model.getKnowledge(NullableIndex.class, NullableIndex::new);\n+    }\n+\n+    private static boolean isMemberNullable(Model model, MemberShape member) {\n+        Shape container = model.getShape(member.getContainer()).orElse(null);\n+\n+        // Ignore broken models in this index. Other validators handle these checks.\n+        if (container == null) {\n+            return false;\n+        }\n+\n+        switch (container.getType()) {\n+            case STRUCTURE:\n+                // Only structure shapes look at the box trait.\n+                return member.hasTrait(BoxTrait.class)\n+                       || model.getShape(member.getTarget()).filter(NullableIndex::isShapeBoxed).isPresent();\n+            case MAP:\n+                // Map keys can never be null.\n+                if (member.getMemberName().equals(\"key\")) {\n+                    return false;\n+                } // fall-through\n+            case LIST:\n+                // Sparse lists and maps are considered nullable.", "originalCommit": "ac17950bbb9d19b8478c163134c2fc6f93c47780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMzAxOQ==", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504123019", "bodyText": "It does state both lists and maps are considered nullable in the comment. There's also a comment above stating the switch case falls through. Hope that works.", "author": "mtdowling", "createdAt": "2020-10-13T17:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODM4MQ=="}], "type": "inlineReview"}]}