{"pr_number": 263, "pr_title": "Use Gradle plugin to build protocol tests", "pr_createdAt": "2020-01-19T18:25:04Z", "pr_url": "https://github.com/awslabs/smithy/pull/263", "timeline": [{"oid": "6d2c51e3b2570df7e3ba4575f207a0615e9918e1", "url": "https://github.com/awslabs/smithy/commit/6d2c51e3b2570df7e3ba4575f207a0615e9918e1", "message": "Make various improvements geared towards Gradle/CLI\n\nAWS protocol tests:\n- Use the Gradle plugin to build the AWS protocol tests.\n\nSmithyBuild:\n- Only run parallel projections if there's more than one.\n\nSmithyCli (breaking CLI changes):\n- to allow the writing to stderr and stdout to be completely customized\n  using a Consumer<String>. This allows the Gradle plugin to log writes\n  to stdout rather than rely on the non-thread-safe default behavior of\n  intercepting calls.\n- Colors nows is used by calling out and err directly on an enum variant\n  rather than a static method.\n- Adding the --logging parameter to every command and removed the static\n  `configureLogging` method.\n- Adding `stdout` and `stderr` methods to the Cli. These are now called\n  by Colors when writing.\n- Enabling disabling ANSI colors is done on Cli and not on Colors now.\n  All of the methods used to influence the CLI globally is now all on\n  the Cli.\n- Logging is only configured when a logging option is passed in. A\n  custom logger is used that makes calls to the intercepted stderr\n  method.\n- Running `build` now shows validation results too.\n\nSmithyModel:\n- ValidationEvents are now sorted by filename, line number, column,\n  severity, shape ID, message, then finally the event ID.\n- Introducing the ValidationEventFormatter interface. There are\n  now implementations of the current display (showing the event on\n  a single line like CheckStyle), and a contextual formatter that\n  shows the line of the source file that has the error.", "committedDate": "2020-01-22T05:49:56Z", "type": "forcePushed"}, {"oid": "9dbae1ffebb259f60f0e225cf93499273ba0e7a6", "url": "https://github.com/awslabs/smithy/commit/9dbae1ffebb259f60f0e225cf93499273ba0e7a6", "message": "Make various improvements geared towards Gradle/CLI\n\nAWS protocol tests:\n- Use the Gradle plugin to build the AWS protocol tests.\n\nSmithyBuild:\n- Only run parallel projections if there's more than one.\n\nSmithyCli (breaking CLI changes):\n- to allow the writing to stderr and stdout to be completely customized\n  using a Consumer<String>. This allows the Gradle plugin to log writes\n  to stdout rather than rely on the non-thread-safe default behavior of\n  intercepting calls.\n- Colors nows is used by calling out and err directly on an enum variant\n  rather than a static method.\n- Adding the --logging parameter to every command and removed the static\n  `configureLogging` method.\n- Adding `stdout` and `stderr` methods to the Cli. These are now called\n  by Colors when writing.\n- Enabling disabling ANSI colors is done on Cli and not on Colors now.\n  All of the methods used to influence the CLI globally is now all on\n  the Cli.\n- Logging is only configured when a logging option is passed in. A\n  custom logger is used that makes calls to the intercepted stderr\n  method.\n- Running `build` now shows validation results too.\n\nSmithyModel:\n- ValidationEvents are now sorted by filename, line number, column,\n  severity, shape ID, message, then finally the event ID.\n- Introducing the ValidationEventFormatter interface. There are\n  now implementations of the current display (showing the event on\n  a single line like CheckStyle), and a contextual formatter that\n  shows the line of the source file that has the error.", "committedDate": "2020-01-22T22:45:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NzM4NA==", "url": "https://github.com/awslabs/smithy/pull/263#discussion_r369877384", "bodyText": "Nitpick, but this should be named something like ansiColorsSupported", "author": "JordonPhillips", "createdAt": "2020-01-23T00:24:33Z", "path": "smithy-cli/src/main/java/software/amazon/smithy/cli/Cli.java", "diffHunk": "@@ -148,37 +149,96 @@ public void run(String[] args) {\n         }\n     }\n \n-    private void configureLogging(String[] args) {\n-        if (configureLogging && !hasArgument(args, QUIET_LOGS)) {\n-            Handler handler = getConsoleHandler();\n-            if (hasArgument(args, DEBUG)) {\n-                handler.setFormatter(new DebugFormatter());\n-                handler.setLevel(Level.ALL);\n-                // Configure logging level of all loggers.\n-                Logger rootLogger = LogManager.getLogManager().getLogger(\"\");\n-                rootLogger.setLevel(Level.ALL);\n-                for (Handler h : rootLogger.getHandlers()) {\n-                    h.setLevel(Level.ALL);\n-                }\n-            } else {\n-                handler.setFormatter(new BasicFormatter());\n-                handler.setLevel(Level.WARNING);\n-            }\n-        }\n+    /**\n+     * Configures a custom STDOUT printer.\n+     *\n+     * @param printer Consumer responsible for writing to STDOUT.\n+     */\n+    public static void setStdout(Consumer<String> printer) {\n+        out = printer;\n+    }\n+\n+    /**\n+     * Configures a custom STDERR printer.\n+     *\n+     * @param printer Consumer responsible for writing to STDERR.\n+     */\n+    public static void setStderr(Consumer<String> printer) {\n+        err = printer;\n+    }\n+\n+    /**\n+     * Write a line of text to the configured STDOUT.\n+     *\n+     * @param message Message to write.\n+     */\n+    public static void stdout(Object message) {\n+        out.accept(String.valueOf(message));\n+    }\n+\n+    /**\n+     * Write a line of text to the configured STDERR.\n+     *\n+     * @param message Message to write.\n+     */\n+    public static void stderr(Object message) {\n+        err.accept(String.valueOf(message));\n     }\n \n-    private static Handler getConsoleHandler() {\n+    /**\n+     * Explicitly configures whether or not to use ANSI colors.\n+     *\n+     * @param useAnsiColors Set to true or false to enable/disable.\n+     */\n+    public static void setUseAnsiColors(boolean useAnsiColors) {\n+        Cli.useAnsiColors = useAnsiColors;\n+    }\n+\n+    /**\n+     * Does a really simple check to see if ANSI colors are supported.\n+     *\n+     * @return Returns true if ANSI probably works.\n+     */\n+    private static boolean useAnsi() {", "originalCommit": "9dbae1ffebb259f60f0e225cf93499273ba0e7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3ODgxNA==", "url": "https://github.com/awslabs/smithy/pull/263#discussion_r369878814", "bodyText": "This should probably be Cli.stderr(", "author": "JordonPhillips", "createdAt": "2020-01-23T00:30:17Z", "path": "smithy-cli/src/main/java/software/amazon/smithy/cli/Cli.java", "diffHunk": "@@ -309,4 +368,28 @@ public synchronized String format(LogRecord r) {\n                    + r.getMessage() + System.lineSeparator();\n         }\n     }\n+\n+    /**\n+     * Logs messages to the CLI's redirect stderr.\n+     */\n+    private static final class CliLogHandler extends Handler {\n+        private final Formatter formatter;\n+\n+        CliLogHandler(Formatter formatter) {\n+            this.formatter = formatter;\n+        }\n+\n+        @Override\n+        public void publish(LogRecord record) {\n+            if (isLoggable(record)) {\n+                Cli.err.accept(formatter.format(record));", "originalCommit": "9dbae1ffebb259f60f0e225cf93499273ba0e7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6df3f6c8ede1c7643b7aa3e37937fa58eb9e29b3", "url": "https://github.com/awslabs/smithy/commit/6df3f6c8ede1c7643b7aa3e37937fa58eb9e29b3", "message": "Make various improvements geared towards Gradle/CLI\n\nAWS protocol tests:\n- Use the Gradle plugin to build the AWS protocol tests.\n\nSmithyBuild:\n- Only run parallel projections if there's more than one.\n\nSmithyCli (breaking CLI changes):\n- to allow the writing to stderr and stdout to be completely customized\n  using a Consumer<String>. This allows the Gradle plugin to log writes\n  to stdout rather than rely on the non-thread-safe default behavior of\n  intercepting calls.\n- Colors nows is used by calling out and err directly on an enum variant\n  rather than a static method.\n- Adding the --logging parameter to every command and removed the static\n  `configureLogging` method.\n- Adding `stdout` and `stderr` methods to the Cli. These are now called\n  by Colors when writing.\n- Enabling disabling ANSI colors is done on Cli and not on Colors now.\n  All of the methods used to influence the CLI globally is now all on\n  the Cli.\n- Logging is only configured when a logging option is passed in. A\n  custom logger is used that makes calls to the intercepted stderr\n  method.\n- Running `build` now shows validation results too.\n\nSmithyModel:\n- ValidationEvents are now sorted by filename, line number, column,\n  severity, shape ID, message, then finally the event ID.\n- Introducing the ValidationEventFormatter interface. There are\n  now implementations of the current display (showing the event on\n  a single line like CheckStyle), and a contextual formatter that\n  shows the line of the source file that has the error.", "committedDate": "2020-01-23T01:23:10Z", "type": "forcePushed"}, {"oid": "2631fddff16b07e078fab9748419bc49598eb0d3", "url": "https://github.com/awslabs/smithy/commit/2631fddff16b07e078fab9748419bc49598eb0d3", "message": "Make various improvements geared towards Gradle/CLI\n\nAWS protocol tests:\n- Use the Gradle plugin to build the AWS protocol tests.\n\nSmithyBuild:\n- Only run parallel projections if there's more than one.\n\nSmithyCli (breaking CLI changes):\n- to allow the writing to stderr and stdout to be completely customized\n  using a Consumer<String>. This allows the Gradle plugin to log writes\n  to stdout rather than rely on the non-thread-safe default behavior of\n  intercepting calls.\n- Colors nows is used by calling out and err directly on an enum variant\n  rather than a static method.\n- Adding the --logging parameter to every command and removed the static\n  `configureLogging` method.\n- Adding `stdout` and `stderr` methods to the Cli. These are now called\n  by Colors when writing.\n- Enabling disabling ANSI colors is done on Cli and not on Colors now.\n  All of the methods used to influence the CLI globally is now all on\n  the Cli.\n- Logging is only configured when a logging option is passed in. A\n  custom logger is used that makes calls to the intercepted stderr\n  method.\n- Running `build` now shows validation results too.\n\nSmithyModel:\n- ValidationEvents are now sorted by filename, line number, column,\n  severity, shape ID, message, then finally the event ID.\n- Introducing the ValidationEventFormatter interface. There are\n  now implementations of the current display (showing the event on\n  a single line like CheckStyle), and a contextual formatter that\n  shows the line of the source file that has the error.", "committedDate": "2020-01-23T21:41:46Z", "type": "forcePushed"}, {"oid": "0fbc82ace134f9f193fb97c81b15c3cad2ff227e", "url": "https://github.com/awslabs/smithy/commit/0fbc82ace134f9f193fb97c81b15c3cad2ff227e", "message": "Make various improvements geared towards Gradle/CLI\n\nAWS protocol tests:\n- Use the Gradle plugin to build the AWS protocol tests.\n\nSmithyBuild:\n- Only run parallel projections if there's more than one.\n\nSmithyCli (breaking CLI changes):\n- to allow the writing to stderr and stdout to be completely customized\n  using a Consumer<String>. This allows the Gradle plugin to log writes\n  to stdout rather than rely on the non-thread-safe default behavior of\n  intercepting calls.\n- Colors nows is used by calling out and err directly on an enum variant\n  rather than a static method.\n- Adding the --logging parameter to every command and removed the static\n  `configureLogging` method.\n- Adding `stdout` and `stderr` methods to the Cli. These are now called\n  by Colors when writing.\n- Enabling disabling ANSI colors is done on Cli and not on Colors now.\n  All of the methods used to influence the CLI globally is now all on\n  the Cli.\n- Logging is only configured when a logging option is passed in. A\n  custom logger is used that makes calls to the intercepted stderr\n  method.\n- Running `build` now shows validation results too.\n\nSmithyModel:\n- ValidationEvents are now sorted by filename, line number, column,\n  severity, shape ID, message, then finally the event ID.\n- Introducing the ValidationEventFormatter interface. There are\n  now implementations of the current display (showing the event on\n  a single line like CheckStyle), and a contextual formatter that\n  shows the line of the source file that has the error.", "committedDate": "2020-01-24T22:48:46Z", "type": "commit"}, {"oid": "0fbc82ace134f9f193fb97c81b15c3cad2ff227e", "url": "https://github.com/awslabs/smithy/commit/0fbc82ace134f9f193fb97c81b15c3cad2ff227e", "message": "Make various improvements geared towards Gradle/CLI\n\nAWS protocol tests:\n- Use the Gradle plugin to build the AWS protocol tests.\n\nSmithyBuild:\n- Only run parallel projections if there's more than one.\n\nSmithyCli (breaking CLI changes):\n- to allow the writing to stderr and stdout to be completely customized\n  using a Consumer<String>. This allows the Gradle plugin to log writes\n  to stdout rather than rely on the non-thread-safe default behavior of\n  intercepting calls.\n- Colors nows is used by calling out and err directly on an enum variant\n  rather than a static method.\n- Adding the --logging parameter to every command and removed the static\n  `configureLogging` method.\n- Adding `stdout` and `stderr` methods to the Cli. These are now called\n  by Colors when writing.\n- Enabling disabling ANSI colors is done on Cli and not on Colors now.\n  All of the methods used to influence the CLI globally is now all on\n  the Cli.\n- Logging is only configured when a logging option is passed in. A\n  custom logger is used that makes calls to the intercepted stderr\n  method.\n- Running `build` now shows validation results too.\n\nSmithyModel:\n- ValidationEvents are now sorted by filename, line number, column,\n  severity, shape ID, message, then finally the event ID.\n- Introducing the ValidationEventFormatter interface. There are\n  now implementations of the current display (showing the event on\n  a single line like CheckStyle), and a contextual formatter that\n  shows the line of the source file that has the error.", "committedDate": "2020-01-24T22:48:46Z", "type": "forcePushed"}, {"oid": "9702f0179461ff07019fb99d3eaf391efee6589e", "url": "https://github.com/awslabs/smithy/commit/9702f0179461ff07019fb99d3eaf391efee6589e", "message": "Run Smithy test suites as parameterized tests\n\nThis commit updates SmithyTestSuite to support easily running test\nsuites as JUnit 5 ParameterizedTests. This allows JUnit to control how\ntests are executed and provides better error reporting. Tests seem to\nexecute more or less in the same amount of time as before.", "committedDate": "2020-01-27T18:23:14Z", "type": "commit"}]}