{"pr_number": 413, "pr_title": "Remove non-idiomatic ShapeVisitor builder", "pr_createdAt": "2020-05-03T03:19:36Z", "pr_url": "https://github.com/awslabs/smithy/pull/413", "timeline": [{"oid": "947aaa46df07c1a442c8bd6553ce65035d570df6", "url": "https://github.com/awslabs/smithy/commit/947aaa46df07c1a442c8bd6553ce65035d570df6", "message": "Remove non-idiomatic ShapeVisitor builder\n\nWe previously had a builder that could create a ShapeVisitor from a\nbunch of closures. This is actually not very idiomatic Java when\ncompared to just implementing an anonymous class that implements\nShapeVisitor.Default.", "committedDate": "2020-05-03T03:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjU1OQ==", "url": "https://github.com/awslabs/smithy/pull/413#discussion_r419536559", "bodyText": "The expansion on this to be NumberShape means a few more shape types will be validated: byte, double, and the Big* numbers. Seems like that would be intended but calling out in case.", "author": "kstich", "createdAt": "2020-05-04T15:48:27Z", "path": "smithy-linters/src/main/java/software/amazon/smithy/linters/ShouldHaveUsedTimestampValidator.java", "diffHunk": "@@ -111,15 +108,27 @@ private ShouldHaveUsedTimestampValidator(Config config) {\n \n     @Override\n     public List<ValidationEvent> validate(Model model) {\n-        ShapeVisitor<List<ValidationEvent>> visitor = Shape.<List<ValidationEvent>>visitor()\n-                .when(StringShape.class, s -> validateSimpleShape(s, patterns))\n-                .when(ShortShape.class, s -> validateSimpleShape(s, patterns))\n-                .when(IntegerShape.class, s -> validateSimpleShape(s, patterns))\n-                .when(LongShape.class, s -> validateSimpleShape(s, patterns))\n-                .when(FloatShape.class, s -> validateSimpleShape(s, patterns))\n-                .when(StructureShape.class, shape -> validateStructure(shape, model, patterns))\n-                .when(UnionShape.class, shape -> validateUnion(shape, model, patterns))\n-                .orElse(ListUtils.of());\n+        ShapeVisitor<List<ValidationEvent>> visitor = new ShapeVisitor.Default<List<ValidationEvent>>() {\n+            @Override\n+            protected List<ValidationEvent> getDefault(Shape shape) {\n+                if (shape.isStringShape() || shape instanceof NumberShape) {", "originalCommit": "947aaa46df07c1a442c8bd6553ce65035d570df6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}