{"pr_number": 623, "pr_title": "Add support for \"waiters\"", "pr_createdAt": "2020-11-04T00:05:22Z", "pr_url": "https://github.com/awslabs/smithy/pull/623", "timeline": [{"oid": "e3ca3ead2e57a06c0055fc13512c3ea022988e5a", "url": "https://github.com/awslabs/smithy/commit/e3ca3ead2e57a06c0055fc13512c3ea022988e5a", "message": "Add support for \"waiters\"\n\nWaiters are a client-side abstraction used to poll a resource until a\ndesired state is reached, or until it is determined that the resource\nwill never enter into the desired state.\n\nWaiters have been available in AWS SDKs since around 2012, and are now\npart of Smithy as an additional specification. Note that this PR relies\non smithy-jmespath.", "committedDate": "2020-11-04T04:44:21Z", "type": "forcePushed"}, {"oid": "1340cc91f37b3adc99ca46f920d930614a75b72b", "url": "https://github.com/awslabs/smithy/commit/1340cc91f37b3adc99ca46f920d930614a75b72b", "message": "Add support for \"waiters\"\n\nWaiters are a client-side abstraction used to poll a resource until a\ndesired state is reached, or until it is determined that the resource\nwill never enter into the desired state.\n\nWaiters have been available in AWS SDKs since around 2012, and are now\npart of Smithy as an additional specification. Note that this PR relies\non smithy-jmespath.", "committedDate": "2020-11-04T22:21:34Z", "type": "commit"}, {"oid": "1340cc91f37b3adc99ca46f920d930614a75b72b", "url": "https://github.com/awslabs/smithy/commit/1340cc91f37b3adc99ca46f920d930614a75b72b", "message": "Add support for \"waiters\"\n\nWaiters are a client-side abstraction used to poll a resource until a\ndesired state is reached, or until it is determined that the resource\nwill never enter into the desired state.\n\nWaiters have been available in AWS SDKs since around 2012, and are now\npart of Smithy as an additional specification. Note that this PR relies\non smithy-jmespath.", "committedDate": "2020-11-04T22:21:34Z", "type": "forcePushed"}, {"oid": "75058e88706292c20f675bfd5b2f86228e144e8d", "url": "https://github.com/awslabs/smithy/commit/75058e88706292c20f675bfd5b2f86228e144e8d", "message": "Refactor waiters\n\nThis commit makes a few changes to waiters:\n\n1. I removed and, or, and not. I couldn't think of a real use case for\n   these as I was documenting them, so I am erring on the side of\n   simplicity.\n2. I removed the emptyArray comparator. This need more work to properly\n   validate and specify it, and it can actually be acheived using a\n   booleanEquals comparator by checking if a returned length of a value\n   in JMESPath is equal to 0. No need for an extra comparator.\n3. I added a new matcher named `inputOutput` that has two top level\n   keys: input and output. This allows both input and output data to be\n   queried *together* for successful operations, solving a longstanding\n   use case we've had for things like making sure the number of\n   autoscaling groups on input matches the number returned on output.\n4. Given that and, or, and not was removed, there's no purpose for a\n   standalone \"input\" matcher, particularly since there's now an\n   \"inputOutput\" matcher.", "committedDate": "2020-11-06T07:20:14Z", "type": "commit"}, {"oid": "75058e88706292c20f675bfd5b2f86228e144e8d", "url": "https://github.com/awslabs/smithy/commit/75058e88706292c20f675bfd5b2f86228e144e8d", "message": "Refactor waiters\n\nThis commit makes a few changes to waiters:\n\n1. I removed and, or, and not. I couldn't think of a real use case for\n   these as I was documenting them, so I am erring on the side of\n   simplicity.\n2. I removed the emptyArray comparator. This need more work to properly\n   validate and specify it, and it can actually be acheived using a\n   booleanEquals comparator by checking if a returned length of a value\n   in JMESPath is equal to 0. No need for an extra comparator.\n3. I added a new matcher named `inputOutput` that has two top level\n   keys: input and output. This allows both input and output data to be\n   queried *together* for successful operations, solving a longstanding\n   use case we've had for things like making sure the number of\n   autoscaling groups on input matches the number returned on output.\n4. Given that and, or, and not was removed, there's no purpose for a\n   standalone \"input\" matcher, particularly since there's now an\n   \"inputOutput\" matcher.", "committedDate": "2020-11-06T07:20:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NTM5Nw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r518895397", "bodyText": "retry isn't a final state.", "author": "kstich", "createdAt": "2020-11-06T17:24:09Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/AcceptorState.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import java.util.Locale;\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.node.ToNode;\n+\n+/**\n+ * The transition state of a waiter.\n+ */\n+public enum AcceptorState implements ToNode {\n+\n+    /** Transition to a final success state. */\n+    SUCCESS,\n+\n+    /** Transition to a final failure state. */\n+    FAILURE,\n+\n+    /** Transition to a final retry state. */", "originalCommit": "75058e88706292c20f675bfd5b2f86228e144e8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzQ1Mw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r518913453", "bodyText": "Missing a word, \"allows\" looks likely.", "author": "kstich", "createdAt": "2020-11-06T17:57:27Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/ModelRuntimeTypeGenerator.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import software.amazon.smithy.jmespath.ast.LiteralExpression;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.BigDecimalShape;\n+import software.amazon.smithy.model.shapes.BigIntegerShape;\n+import software.amazon.smithy.model.shapes.BlobShape;\n+import software.amazon.smithy.model.shapes.BooleanShape;\n+import software.amazon.smithy.model.shapes.ByteShape;\n+import software.amazon.smithy.model.shapes.DocumentShape;\n+import software.amazon.smithy.model.shapes.DoubleShape;\n+import software.amazon.smithy.model.shapes.FloatShape;\n+import software.amazon.smithy.model.shapes.IntegerShape;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.LongShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.OperationShape;\n+import software.amazon.smithy.model.shapes.ResourceShape;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeVisitor;\n+import software.amazon.smithy.model.shapes.ShortShape;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.TimestampShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.LengthTrait;\n+import software.amazon.smithy.model.traits.RangeTrait;\n+\n+/**\n+ * Generates fake data from a modeled shape for static JMESPath analysis.\n+ */\n+final class ModelRuntimeTypeGenerator implements ShapeVisitor<Object> {\n+\n+    private final Model model;\n+    private Set<MemberShape> visited = new HashSet<>();\n+\n+    ModelRuntimeTypeGenerator(Model model) {\n+        this.model = model;\n+    }\n+\n+    @Override\n+    public Object blobShape(BlobShape shape) {\n+        return \"blob\";\n+    }\n+\n+    @Override\n+    public Object booleanShape(BooleanShape shape) {\n+        return true;\n+    }\n+\n+    @Override\n+    public Object byteShape(ByteShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object shortShape(ShortShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object integerShape(IntegerShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object longShape(LongShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object floatShape(FloatShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object doubleShape(DoubleShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object bigIntegerShape(BigIntegerShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object bigDecimalShape(BigDecimalShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object documentShape(DocumentShape shape) {\n+        return LiteralExpression.ANY;\n+    }\n+\n+    @Override\n+    public Object stringShape(StringShape shape) {\n+        // Create a random string that does not exceed or go under the length trait.\n+        int chars = computeLength(shape);\n+\n+        // Fill a string with \"a\"'s up to chars.\n+        return new String(new char[chars]).replace(\"\\0\", \"a\");\n+    }\n+\n+    @Override\n+    public Object listShape(ListShape shape) {\n+        return createListOrSet(shape, shape.getMember());\n+    }\n+\n+    @Override\n+    public Object setShape(SetShape shape) {\n+        return createListOrSet(shape, shape.getMember());\n+    }\n+\n+    private Object createListOrSet(Shape shape, MemberShape member) {\n+        return withCopiedVisitors(() -> {\n+            int size = computeLength(shape);\n+            List<Object> result = new ArrayList<>(size);\n+            Object memberValue = member.accept(this);\n+            if (memberValue != null) {\n+                for (int i = 0; i < size; i++) {\n+                    result.add(memberValue);\n+                }\n+            }\n+            return result;\n+        });\n+    }\n+\n+    // Visits members and mutates a copy of the current set of\n+    // visited shapes rather than a shared set. This a shape to", "originalCommit": "75058e88706292c20f675bfd5b2f86228e144e8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxNDk2Nw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r518914967", "bodyText": "assumed*", "author": "kstich", "createdAt": "2020-11-06T18:00:19Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/ModelRuntimeTypeGenerator.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import software.amazon.smithy.jmespath.ast.LiteralExpression;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.BigDecimalShape;\n+import software.amazon.smithy.model.shapes.BigIntegerShape;\n+import software.amazon.smithy.model.shapes.BlobShape;\n+import software.amazon.smithy.model.shapes.BooleanShape;\n+import software.amazon.smithy.model.shapes.ByteShape;\n+import software.amazon.smithy.model.shapes.DocumentShape;\n+import software.amazon.smithy.model.shapes.DoubleShape;\n+import software.amazon.smithy.model.shapes.FloatShape;\n+import software.amazon.smithy.model.shapes.IntegerShape;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.LongShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.OperationShape;\n+import software.amazon.smithy.model.shapes.ResourceShape;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeVisitor;\n+import software.amazon.smithy.model.shapes.ShortShape;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.TimestampShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.LengthTrait;\n+import software.amazon.smithy.model.traits.RangeTrait;\n+\n+/**\n+ * Generates fake data from a modeled shape for static JMESPath analysis.\n+ */\n+final class ModelRuntimeTypeGenerator implements ShapeVisitor<Object> {\n+\n+    private final Model model;\n+    private Set<MemberShape> visited = new HashSet<>();\n+\n+    ModelRuntimeTypeGenerator(Model model) {\n+        this.model = model;\n+    }\n+\n+    @Override\n+    public Object blobShape(BlobShape shape) {\n+        return \"blob\";\n+    }\n+\n+    @Override\n+    public Object booleanShape(BooleanShape shape) {\n+        return true;\n+    }\n+\n+    @Override\n+    public Object byteShape(ByteShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object shortShape(ShortShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object integerShape(IntegerShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object longShape(LongShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object floatShape(FloatShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object doubleShape(DoubleShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object bigIntegerShape(BigIntegerShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object bigDecimalShape(BigDecimalShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object documentShape(DocumentShape shape) {\n+        return LiteralExpression.ANY;\n+    }\n+\n+    @Override\n+    public Object stringShape(StringShape shape) {\n+        // Create a random string that does not exceed or go under the length trait.\n+        int chars = computeLength(shape);\n+\n+        // Fill a string with \"a\"'s up to chars.\n+        return new String(new char[chars]).replace(\"\\0\", \"a\");\n+    }\n+\n+    @Override\n+    public Object listShape(ListShape shape) {\n+        return createListOrSet(shape, shape.getMember());\n+    }\n+\n+    @Override\n+    public Object setShape(SetShape shape) {\n+        return createListOrSet(shape, shape.getMember());\n+    }\n+\n+    private Object createListOrSet(Shape shape, MemberShape member) {\n+        return withCopiedVisitors(() -> {\n+            int size = computeLength(shape);\n+            List<Object> result = new ArrayList<>(size);\n+            Object memberValue = member.accept(this);\n+            if (memberValue != null) {\n+                for (int i = 0; i < size; i++) {\n+                    result.add(memberValue);\n+                }\n+            }\n+            return result;\n+        });\n+    }\n+\n+    // Visits members and mutates a copy of the current set of\n+    // visited shapes rather than a shared set. This a shape to\n+    // be used multiple times in the closure of a single shape\n+    // without causing the reuse of the shape to always be\n+    // assume to be a recursive type.", "originalCommit": "75058e88706292c20f675bfd5b2f86228e144e8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxNjE1Mw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r518916153", "bodyText": "range trait*", "author": "kstich", "createdAt": "2020-11-06T18:02:29Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/ModelRuntimeTypeGenerator.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import software.amazon.smithy.jmespath.ast.LiteralExpression;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.BigDecimalShape;\n+import software.amazon.smithy.model.shapes.BigIntegerShape;\n+import software.amazon.smithy.model.shapes.BlobShape;\n+import software.amazon.smithy.model.shapes.BooleanShape;\n+import software.amazon.smithy.model.shapes.ByteShape;\n+import software.amazon.smithy.model.shapes.DocumentShape;\n+import software.amazon.smithy.model.shapes.DoubleShape;\n+import software.amazon.smithy.model.shapes.FloatShape;\n+import software.amazon.smithy.model.shapes.IntegerShape;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.LongShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.OperationShape;\n+import software.amazon.smithy.model.shapes.ResourceShape;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeVisitor;\n+import software.amazon.smithy.model.shapes.ShortShape;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.TimestampShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.LengthTrait;\n+import software.amazon.smithy.model.traits.RangeTrait;\n+\n+/**\n+ * Generates fake data from a modeled shape for static JMESPath analysis.\n+ */\n+final class ModelRuntimeTypeGenerator implements ShapeVisitor<Object> {\n+\n+    private final Model model;\n+    private Set<MemberShape> visited = new HashSet<>();\n+\n+    ModelRuntimeTypeGenerator(Model model) {\n+        this.model = model;\n+    }\n+\n+    @Override\n+    public Object blobShape(BlobShape shape) {\n+        return \"blob\";\n+    }\n+\n+    @Override\n+    public Object booleanShape(BooleanShape shape) {\n+        return true;\n+    }\n+\n+    @Override\n+    public Object byteShape(ByteShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object shortShape(ShortShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object integerShape(IntegerShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object longShape(LongShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object floatShape(FloatShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object doubleShape(DoubleShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object bigIntegerShape(BigIntegerShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object bigDecimalShape(BigDecimalShape shape) {\n+        return computeRange(shape);\n+    }\n+\n+    @Override\n+    public Object documentShape(DocumentShape shape) {\n+        return LiteralExpression.ANY;\n+    }\n+\n+    @Override\n+    public Object stringShape(StringShape shape) {\n+        // Create a random string that does not exceed or go under the length trait.\n+        int chars = computeLength(shape);\n+\n+        // Fill a string with \"a\"'s up to chars.\n+        return new String(new char[chars]).replace(\"\\0\", \"a\");\n+    }\n+\n+    @Override\n+    public Object listShape(ListShape shape) {\n+        return createListOrSet(shape, shape.getMember());\n+    }\n+\n+    @Override\n+    public Object setShape(SetShape shape) {\n+        return createListOrSet(shape, shape.getMember());\n+    }\n+\n+    private Object createListOrSet(Shape shape, MemberShape member) {\n+        return withCopiedVisitors(() -> {\n+            int size = computeLength(shape);\n+            List<Object> result = new ArrayList<>(size);\n+            Object memberValue = member.accept(this);\n+            if (memberValue != null) {\n+                for (int i = 0; i < size; i++) {\n+                    result.add(memberValue);\n+                }\n+            }\n+            return result;\n+        });\n+    }\n+\n+    // Visits members and mutates a copy of the current set of\n+    // visited shapes rather than a shared set. This a shape to\n+    // be used multiple times in the closure of a single shape\n+    // without causing the reuse of the shape to always be\n+    // assume to be a recursive type.\n+    private Object withCopiedVisitors(Supplier<Object> supplier) {\n+        // Account for recursive shapes at the current\n+        Set<MemberShape> visitedCopy = new HashSet<>(visited);\n+        Object result = supplier.get();\n+        visited = visitedCopy;\n+        return result;\n+    }\n+\n+    @Override\n+    public Object mapShape(MapShape shape) {\n+        return withCopiedVisitors(() -> {\n+            int size = computeLength(shape);\n+            Map<String, Object> result = new HashMap<>();\n+            String key = (String) shape.getKey().accept(this);\n+            Object memberValue = shape.getValue().accept(this);\n+            for (int i = 0; i < size; i++) {\n+                result.put(key + i, memberValue);\n+            }\n+            return result;\n+        });\n+    }\n+\n+    @Override\n+    public Object structureShape(StructureShape shape) {\n+        return structureOrUnion(shape);\n+    }\n+\n+    @Override\n+    public Object unionShape(UnionShape shape) {\n+        return structureOrUnion(shape);\n+    }\n+\n+    private Object structureOrUnion(Shape shape) {\n+        return withCopiedVisitors(() -> {\n+            Map<String, Object> result = new LinkedHashMap<>();\n+            for (MemberShape member : shape.members()) {\n+                Object memberValue = member.accept(this);\n+                result.put(member.getMemberName(), memberValue);\n+            }\n+            return result;\n+        });\n+    }\n+\n+    @Override\n+    public Object memberShape(MemberShape shape) {\n+        // Account for recursive shapes.\n+        // A false return value means it was in the set.\n+        if (!visited.add(shape)) {\n+            return LiteralExpression.ANY;\n+        }\n+\n+        return model.getShape(shape.getTarget())\n+                .map(target -> target.accept(this))\n+                // Rather than fail on broken models during waiter validation,\n+                // return an ANY to get *some* validation.\n+                .orElse(LiteralExpression.ANY);\n+    }\n+\n+    @Override\n+    public Object timestampShape(TimestampShape shape) {\n+        return LiteralExpression.NUMBER;\n+    }\n+\n+    @Override\n+    public Object operationShape(OperationShape shape) {\n+        throw new UnsupportedOperationException(shape.toString());\n+    }\n+\n+    @Override\n+    public Object resourceShape(ResourceShape shape) {\n+        throw new UnsupportedOperationException(shape.toString());\n+    }\n+\n+    @Override\n+    public Object serviceShape(ServiceShape shape) {\n+        throw new UnsupportedOperationException(shape.toString());\n+    }\n+\n+    private int computeLength(Shape shape) {\n+        // Create a random string that does not exceed or go under the length trait.\n+        int chars = 2;\n+\n+        if (shape.hasTrait(LengthTrait.class)) {\n+            LengthTrait trait = shape.expectTrait(LengthTrait.class);\n+            if (trait.getMin().isPresent()) {\n+                chars = Math.max(chars, trait.getMin().get().intValue());\n+            }\n+            if (trait.getMax().isPresent()) {\n+                chars = Math.min(chars, trait.getMax().get().intValue());\n+            }\n+        }\n+\n+        return chars;\n+    }\n+\n+    private double computeRange(Shape shape) {\n+        // Create a random string that does not exceed or go under the length trait.", "originalCommit": "75058e88706292c20f675bfd5b2f86228e144e8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMTMzNw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r518921337", "bodyText": "There are a chunk of ListPathMatcher and ListPathComparator references across a few files that don't map to any code, were these renamed and not updated? Are there any related pluralizations that got left behind?", "author": "kstich", "createdAt": "2020-11-06T18:12:45Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/PathComparator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ToNode;\n+\n+/**\n+ * Defines a comparison to perform in a ListPathMatcher.", "originalCommit": "75058e88706292c20f675bfd5b2f86228e144e8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxOTU5Ng==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r519019596", "bodyText": "Weird! IntelliJ got overzealous with it's refactoring. Good catch. I fixed em all.", "author": "mtdowling", "createdAt": "2020-11-06T21:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMTMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NTI4Nw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r518965287", "bodyText": "I think these checks are handled in model loading now.", "author": "kstich", "createdAt": "2020-11-06T19:41:52Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/Acceptor.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.ToNode;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * Represents an acceptor in a waiter's state machine.\n+ */\n+public final class Acceptor implements ToNode {\n+\n+    private static final String STATE = \"state\";\n+    private static final String MATCHER = \"matcher\";\n+    private static final Set<String> KEYS = SetUtils.of(STATE, MATCHER);\n+\n+    private final AcceptorState state;\n+    private final Matcher<?> matcher;\n+\n+    /**\n+     * @param state State the acceptor transitions to when matched.\n+     * @param matcher The matcher to match against.\n+     */\n+    public Acceptor(AcceptorState state, Matcher<?> matcher) {\n+        this.state = state;\n+        this.matcher = matcher;\n+    }\n+\n+    /**\n+     * Gets the state to transition to if matched.\n+     *\n+     * @return Acceptor state to transition to.\n+     */\n+    public AcceptorState getState() {\n+        return state;\n+    }\n+\n+    /**\n+     * Gets the matcher used to test if the acceptor.\n+     *\n+     * @return Returns the matcher.\n+     */\n+    public Matcher<?> getMatcher() {\n+        return matcher;\n+    }\n+\n+    /**\n+     * Creates an Acceptor from a {@link Node}.\n+     *\n+     * @param node Node to create the Acceptor from.\n+     * @return Returns the created Acceptor.\n+     * @throws ExpectationNotMetException if the given Node is invalid.\n+     */\n+    public static Acceptor fromNode(Node node) {\n+        ObjectNode value = node.expectObjectNode().warnIfAdditionalProperties(KEYS);", "originalCommit": "75058e88706292c20f675bfd5b2f86228e144e8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMDI3OA==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r519020278", "bodyText": "I don't think they are actually. In order for model loading to check these, the traits would need to retain all unknown properties, which most don't. That's because first the model is loaded and deserialized into traits, then the traits are converted into Nodes, and then those are checked against the model.", "author": "mtdowling", "createdAt": "2020-11-06T21:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2NTI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MDY4Mw==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r519050683", "bodyText": "Looks like some ListPathComparator entries were left behind.", "author": "kstich", "createdAt": "2020-11-06T23:15:08Z", "path": "smithy-waiters/src/main/java/software/amazon/smithy/waiters/PathComparator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.waiters;\n+\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ToNode;\n+\n+/**\n+ * Defines a comparison to perform in a PathMatcher.\n+ */\n+public enum PathComparator implements ToNode {\n+\n+    /** Matches if all values in the list matches the expected string. */\n+    ALL_STRING_EQUALS(\"allStringEquals\"),\n+\n+    /** Matches if any value in the list matches the expected string. */\n+    ANY_STRING_EQUALS(\"anyStringEquals\"),\n+\n+    /** Matches if the return value is a string that is equal to the expected string. */\n+    STRING_EQUALS(\"stringEquals\"),\n+\n+    /** Matches if the return value is a boolean that is equal to the string literal 'true' or 'false'. */\n+    BOOLEAN_EQUALS(\"booleanEquals\");\n+\n+    private final String asString;\n+\n+    PathComparator(String asString) {\n+        this.asString = asString;\n+    }\n+\n+    /**\n+     * Creates a {@code PathComparator} from a {@link Node}.\n+     * @param node Node to create the {@code ListPathComparator} from.\n+     * @return Returns the created {@code ListPathComparator}.", "originalCommit": "4bc3ec3e71f443c559e2aa56ee68eaad117f3f45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NDU4Ng==", "url": "https://github.com/awslabs/smithy/pull/623#discussion_r519064586", "bodyText": "doh!", "author": "mtdowling", "createdAt": "2020-11-07T00:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MDY4Mw=="}], "type": "inlineReview"}, {"oid": "06c1b6e8fbd296157896a48422c0a8be1a21b142", "url": "https://github.com/awslabs/smithy/commit/06c1b6e8fbd296157896a48422c0a8be1a21b142", "message": "Incorporate waiters PR feedback", "committedDate": "2020-11-07T00:13:49Z", "type": "forcePushed"}, {"oid": "02dfadb9999b232dbdd300f4679280a9070183c4", "url": "https://github.com/awslabs/smithy/commit/02dfadb9999b232dbdd300f4679280a9070183c4", "message": "Incorporate waiters PR feedback", "committedDate": "2020-11-10T20:43:26Z", "type": "commit"}, {"oid": "02dfadb9999b232dbdd300f4679280a9070183c4", "url": "https://github.com/awslabs/smithy/commit/02dfadb9999b232dbdd300f4679280a9070183c4", "message": "Incorporate waiters PR feedback", "committedDate": "2020-11-10T20:43:26Z", "type": "forcePushed"}]}