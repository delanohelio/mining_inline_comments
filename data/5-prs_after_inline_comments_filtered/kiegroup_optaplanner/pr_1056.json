{"pr_number": 1056, "pr_title": "PLANNER-2270 Make CS-D GroupBy2Map0Collect return bi rule", "pr_createdAt": "2020-12-01T14:04:00Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/1056", "timeline": [{"oid": "6ca9f2e9380de89d99e08a91df9d102231e1ba40", "url": "https://github.com/kiegroup/optaplanner/commit/6ca9f2e9380de89d99e08a91df9d102231e1ba40", "message": "PLANNER-2270 Make CS-D 2map0collect GroupBy return bi rule", "committedDate": "2020-12-01T14:03:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzMDkwNg==", "url": "https://github.com/kiegroup/optaplanner/pull/1056#discussion_r533430906", "bodyText": "This is purely aesthetic. Was so much easier to debug, now that the condition isn't a one-liner.", "author": "triceo", "createdAt": "2020-12-01T14:04:57Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/ConstraintSubTree.java", "diffHunk": "@@ -90,12 +90,22 @@ public RuleAssembler getRuleAssembler() {\n     }\n \n     public RuleAssembler getRuleAssembler(int totalExpectedGroupByCount) {\n-        RuleAssembler builder = isJoin ? leftSubTree.getRuleAssembler(totalExpectedGroupByCount)\n-                .join(rightSubTree.getRuleAssembler(totalExpectedGroupByCount), nodeList.get(0))\n-                : RuleAssembler.from(variableFactory, nodeList.get(0), totalExpectedGroupByCount);\n+        RuleAssembler assembler = getRuleAssemblerForFirstNode(totalExpectedGroupByCount);\n         for (int i = 1; i < nodeList.size(); i++) {\n-            builder = builder.andThen(nodeList.get(i));\n+            ConstraintGraphNode nextNode = nodeList.get(i);\n+            assembler = assembler.andThen(nextNode);\n+        }\n+        return assembler;\n+    }\n+\n+    private RuleAssembler getRuleAssemblerForFirstNode(int totalExpectedGroupByCount) {\n+        ConstraintGraphNode firstNode = nodeList.get(0);\n+        if (isJoin) {\n+            RuleAssembler left = leftSubTree.getRuleAssembler(totalExpectedGroupByCount);\n+            RuleAssembler right = rightSubTree.getRuleAssembler(totalExpectedGroupByCount);\n+            return left.join(right, firstNode);\n+        } else {\n+            return RuleAssembler.from(variableFactory, firstNode, totalExpectedGroupByCount);\n         }\n-        return builder;", "originalCommit": "6ca9f2e9380de89d99e08a91df9d102231e1ba40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzMTEzMA==", "url": "https://github.com/kiegroup/optaplanner/pull/1056#discussion_r533431130", "bodyText": "This is \"the meat\" of the PR. Trivial typo fix.", "author": "triceo", "createdAt": "2020-12-01T14:05:14Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/common/rules/UniGroupBy2Map0CollectMutator.java", "diffHunk": "@@ -35,12 +35,12 @@ public UniGroupBy2Map0CollectMutator(Function<A, NewA> groupKeyMappingA, Functio\n \n     @Override\n     public AbstractRuleAssembler apply(AbstractRuleAssembler ruleAssembler) {\n-        BiConsumer<PatternDef, Variable<NewA>> binder = (pattern, tuple) -> pattern.bind(tuple, a -> {\n+        BiConsumer<PatternDef, Variable<BiTuple<NewA, NewB>>> binder = (pattern, tuple) -> pattern.bind(tuple, a -> {\n             final NewA newA = groupKeyMappingA.apply((A) a);\n             final NewB newB = groupKeyMappingB.apply((A) a);\n             return new BiTuple<>(newA, newB);\n         });\n         return universalGroup(ruleAssembler, binder,\n-                (var, pattern, accumulate) -> regroup(ruleAssembler, var, pattern, accumulate));\n+                (variable, pattern, accumulate) -> regroupBi(ruleAssembler, variable, pattern, accumulate));", "originalCommit": "6ca9f2e9380de89d99e08a91df9d102231e1ba40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78d0e55d27a6cddbf259fb2807f900cbcbc39599", "url": "https://github.com/kiegroup/optaplanner/commit/78d0e55d27a6cddbf259fb2807f900cbcbc39599", "message": "Simplify test", "committedDate": "2020-12-01T14:18:39Z", "type": "commit"}, {"oid": "14707b0dd26331906279453fc1ad100117751aa5", "url": "https://github.com/kiegroup/optaplanner/commit/14707b0dd26331906279453fc1ad100117751aa5", "message": "Fix formatting", "committedDate": "2020-12-01T14:34:22Z", "type": "commit"}]}