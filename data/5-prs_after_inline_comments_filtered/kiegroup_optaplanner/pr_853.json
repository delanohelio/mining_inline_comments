{"pr_number": 853, "pr_title": "PLANNER-1816 Fix constraint provider for Course Scheduling", "pr_createdAt": "2020-07-23T08:40:04Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/853", "timeline": [{"oid": "6de446e6f060a9fdd477e13ba95c93e8dec0261b", "url": "https://github.com/kiegroup/optaplanner/commit/6de446e6f060a9fdd477e13ba95c93e8dec0261b", "message": "Implement the provider", "committedDate": "2020-07-23T07:18:51Z", "type": "commit"}, {"oid": "56790c5a3928347333aef9474776663da49edf75", "url": "https://github.com/kiegroup/optaplanner/commit/56790c5a3928347333aef9474776663da49edf75", "message": "CurriculumList becomes CurriculumSet for perf reasons", "committedDate": "2020-07-23T07:28:44Z", "type": "commit"}, {"oid": "108d8081f8981fd73047bc36a91a7e0e724a8034", "url": "https://github.com/kiegroup/optaplanner/commit/108d8081f8981fd73047bc36a91a7e0e724a8034", "message": "Return solver config to its original form", "committedDate": "2020-07-23T07:33:40Z", "type": "commit"}, {"oid": "44039972043df872badc60147503ba264efee407", "url": "https://github.com/kiegroup/optaplanner/commit/44039972043df872badc60147503ba264efee407", "message": "Add the constraint provider", "committedDate": "2020-07-23T08:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5OTEzNA==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459299134", "bodyText": "This class is the meat of this PR.", "author": "triceo", "createdAt": "2020-07-23T08:42:48Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/curriculumcourse/optional/score/CourseScheduleConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.curriculumcourse.optional.score;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.examples.curriculumcourse.domain.Course;\n+import org.optaplanner.examples.curriculumcourse.domain.CourseSchedule;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n+import org.optaplanner.examples.curriculumcourse.domain.Day;\n+import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n+import org.optaplanner.examples.curriculumcourse.domain.Period;\n+import org.optaplanner.examples.curriculumcourse.domain.Room;\n+import org.optaplanner.examples.curriculumcourse.domain.Teacher;\n+import org.optaplanner.examples.curriculumcourse.domain.Timeslot;\n+import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n+import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n+\n+class CourseScheduleConstraintProviderTest {", "originalCommit": "44039972043df872badc60147503ba264efee407", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5OTI2OA==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459299268", "bodyText": "This class is the meat of this PR.", "author": "triceo", "createdAt": "2020-07-23T08:43:02Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/optional/score/CourseScheduleConstraintProvider.java", "diffHunk": "@@ -16,33 +16,33 @@\n \n package org.optaplanner.examples.curriculumcourse.optional.score;\n \n-import static org.optaplanner.core.api.score.stream.ConstraintCollectors.countDistinct;\n-import static org.optaplanner.core.api.score.stream.Joiners.equal;\n-import static org.optaplanner.core.api.score.stream.Joiners.lessThan;\n-\n-import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n import org.optaplanner.core.api.score.stream.Constraint;\n import org.optaplanner.core.api.score.stream.ConstraintFactory;\n import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n \n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ONE_HARD;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofHard;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofSoft;\n+import static org.optaplanner.core.api.score.stream.ConstraintCollectors.countDistinct;\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+\n public class CourseScheduleConstraintProvider implements ConstraintProvider {", "originalCommit": "44039972043df872badc60147503ba264efee407", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "037740b30e9612b9db5b17245483ec2f5e858591", "url": "https://github.com/kiegroup/optaplanner/commit/037740b30e9612b9db5b17245483ec2f5e858591", "message": "Fix formatting", "committedDate": "2020-07-23T08:55:09Z", "type": "commit"}, {"oid": "b38f7ba3fa8f45d470203812ca7ff0db881a16bb", "url": "https://github.com/kiegroup/optaplanner/commit/b38f7ba3fa8f45d470203812ca7ff0db881a16bb", "message": "Really fix formatting", "committedDate": "2020-07-23T09:08:22Z", "type": "commit"}, {"oid": "af373cae4c12d794f868f956b8f5eed75bb6da37", "url": "https://github.com/kiegroup/optaplanner/commit/af373cae4c12d794f868f956b8f5eed75bb6da37", "message": "Fix typo", "committedDate": "2020-07-23T09:35:26Z", "type": "commit"}, {"oid": "90e1d8dca3df70d97a5d60309f218ea148170c6f", "url": "https://github.com/kiegroup/optaplanner/commit/90e1d8dca3df70d97a5d60309f218ea148170c6f", "message": "Proper naming", "committedDate": "2020-07-23T10:28:50Z", "type": "commit"}, {"oid": "55498013bce0a723d634590b987e899a69706791", "url": "https://github.com/kiegroup/optaplanner/commit/55498013bce0a723d634590b987e899a69706791", "message": "Sort imports", "committedDate": "2020-07-23T10:41:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDQ2OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459460469", "bodyText": "This diff says something :)", "author": "ge0ffrey", "createdAt": "2020-07-23T13:45:50Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/domain/Course.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MTE2Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459461166", "bodyText": "soft codes tyle: typically we don't leave that empty line there in an empty constructor.", "author": "ge0ffrey", "createdAt": "2020-07-23T13:46:47Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/domain/Curriculum.java", "diffHunk": "@@ -25,6 +27,15 @@\n \n     private String code;\n \n+    public Curriculum() {\n+", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MjIwMg==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459462202", "bodyText": "Good rename. The CourseScheduleXmlSolutionFileIO should also be renamed to CurriculumCourseXmlSolutionFileIO", "author": "ge0ffrey", "createdAt": "2020-07-23T13:48:19Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/optional/score/CurriculumCourseConstraintProvider.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.curriculumcourse.optional.score;\n+\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ONE_HARD;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofHard;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofSoft;\n+import static org.optaplanner.core.api.score.stream.ConstraintCollectors.countDistinct;\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n+import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n+import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n+import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n+\n+public class CurriculumCourseConstraintProvider implements ConstraintProvider {", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NDUzMw==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459464533", "bodyText": "The other test classes are public, so for consistency I'd argue to make this one public too.\nOr we make all test classes non-public, as it gives better encapsulation. Something for another issue, in any case.\nBut let's avoid inconsistency across our code.", "author": "ge0ffrey", "createdAt": "2020-07-23T13:51:28Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/curriculumcourse/optional/score/CurriculumCourseConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.curriculumcourse.optional.score;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.examples.curriculumcourse.domain.Course;\n+import org.optaplanner.examples.curriculumcourse.domain.CourseSchedule;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n+import org.optaplanner.examples.curriculumcourse.domain.Day;\n+import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n+import org.optaplanner.examples.curriculumcourse.domain.Period;\n+import org.optaplanner.examples.curriculumcourse.domain.Room;\n+import org.optaplanner.examples.curriculumcourse.domain.Teacher;\n+import org.optaplanner.examples.curriculumcourse.domain.Timeslot;\n+import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n+import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n+\n+class CurriculumCourseConstraintProviderTest {", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NTM3NA==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459465374", "bodyText": "same here: test methods in other test classes have a public modifier. Either we remove them across our code base, or we keep them public consistently.", "author": "ge0ffrey", "createdAt": "2020-07-23T13:52:43Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/curriculumcourse/optional/score/CurriculumCourseConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.curriculumcourse.optional.score;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.examples.curriculumcourse.domain.Course;\n+import org.optaplanner.examples.curriculumcourse.domain.CourseSchedule;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n+import org.optaplanner.examples.curriculumcourse.domain.Day;\n+import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n+import org.optaplanner.examples.curriculumcourse.domain.Period;\n+import org.optaplanner.examples.curriculumcourse.domain.Room;\n+import org.optaplanner.examples.curriculumcourse.domain.Teacher;\n+import org.optaplanner.examples.curriculumcourse.domain.Timeslot;\n+import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n+import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n+\n+class CurriculumCourseConstraintProviderTest {\n+\n+    private static final Curriculum CURRICULUM_1 = new Curriculum(1, \"Curriculum1\");\n+    private static final Curriculum CURRICULUM_2 = new Curriculum(2, \"Curriculum2\");\n+    private static final Teacher TEACHER_1 = new Teacher(1, \"Teacher1\");\n+    private static final Teacher TEACHER_2 = new Teacher(2, \"Teacher2\");\n+    private static final Course COURSE_1 = new Course(1, \"Course1\", TEACHER_1, 10, 20, 3, CURRICULUM_1);\n+    private static final Course COURSE_2 = new Course(2, \"Course2\", TEACHER_2, 10, 10, 2, CURRICULUM_2);\n+    private static final Course COURSE_3 = new Course(3, \"Course3\", TEACHER_1, 10, 5, 1, CURRICULUM_2);\n+    private static final Room ROOM_1 = new Room(1, \"Room1\", 10);\n+    private static final Room ROOM_2 = new Room(2, \"Room2\", 20);\n+    private static final Timeslot FIRST_TIMESLOT = new Timeslot(0);\n+    private static final Timeslot SECOND_TIMESLOT = new Timeslot(1);\n+    private static final Day MONDAY = new Day(0);\n+    private static final Day TUESDAY = new Day(1);\n+    private static final Period PERIOD_1_MONDAY = new Period(0, MONDAY, FIRST_TIMESLOT);\n+    private static final Period PERIOD_2_MONDAY = new Period(1, MONDAY, SECOND_TIMESLOT);\n+    private static final Period PERIOD_1_TUESDAY = new Period(2, TUESDAY, FIRST_TIMESLOT);\n+\n+    private final ConstraintVerifier<CurriculumCourseConstraintProvider, CourseSchedule> constraintVerifier =\n+            ConstraintVerifier.build(new CurriculumCourseConstraintProvider(), CourseSchedule.class, Lecture.class);\n+\n+    @Test\n+    void conflictingLecturesDifferentCourseInSamePeriod() {", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NzA0Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459467046", "bodyText": "This filter can happen in the right side stream given to the join.\nAnd in fact, it already does it automatically because join(myClass) is synt sugar for join(f.from(myClass)) so it uses from, not fromUninitialized().", "author": "ge0ffrey", "createdAt": "2020-07-23T13:54:47Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/optional/score/CurriculumCourseConstraintProvider.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.curriculumcourse.optional.score;\n+\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ONE_HARD;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofHard;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofSoft;\n+import static org.optaplanner.core.api.score.stream.ConstraintCollectors.countDistinct;\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n+import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n+import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n+import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n+\n+public class CurriculumCourseConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory factory) {\n+        return new Constraint[] {\n+                conflictingLecturesDifferentCourseInSamePeriod(factory),\n+                conflictingLecturesSameCourseInSamePeriod(factory),\n+                roomOccupancy(factory),\n+                unavailablePeriodPenalty(factory),\n+                roomCapacity(factory),\n+                minimumWorkingDays(factory),\n+                curriculumCompactness(factory),\n+                roomStability(factory)\n+        };\n+    }\n+\n+    // ************************************************************************\n+    // Hard constraints\n+    // ************************************************************************\n+\n+    Constraint conflictingLecturesDifferentCourseInSamePeriod(ConstraintFactory factory) {\n+        return factory.from(CourseConflict.class)\n+                .join(Lecture.class,\n+                        equal(CourseConflict::getLeftCourse, Lecture::getCourse))\n+                .filter(((courseConflict, lecture) -> lecture.getPeriod() != null))", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDcxOA==", "url": "https://github.com/kiegroup/optaplanner/pull/853#discussion_r459470718", "bodyText": "already happens because the join() uses from()", "author": "ge0ffrey", "createdAt": "2020-07-23T13:59:09Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/curriculumcourse/optional/score/CurriculumCourseConstraintProvider.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.curriculumcourse.optional.score;\n+\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ONE_HARD;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofHard;\n+import static org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore.ofSoft;\n+import static org.optaplanner.core.api.score.stream.ConstraintCollectors.countDistinct;\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+import static org.optaplanner.core.api.score.stream.Joiners.filtering;\n+\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.examples.curriculumcourse.domain.Curriculum;\n+import org.optaplanner.examples.curriculumcourse.domain.Lecture;\n+import org.optaplanner.examples.curriculumcourse.domain.UnavailablePeriodPenalty;\n+import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;\n+\n+public class CurriculumCourseConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory factory) {\n+        return new Constraint[] {\n+                conflictingLecturesDifferentCourseInSamePeriod(factory),\n+                conflictingLecturesSameCourseInSamePeriod(factory),\n+                roomOccupancy(factory),\n+                unavailablePeriodPenalty(factory),\n+                roomCapacity(factory),\n+                minimumWorkingDays(factory),\n+                curriculumCompactness(factory),\n+                roomStability(factory)\n+        };\n+    }\n+\n+    // ************************************************************************\n+    // Hard constraints\n+    // ************************************************************************\n+\n+    Constraint conflictingLecturesDifferentCourseInSamePeriod(ConstraintFactory factory) {\n+        return factory.from(CourseConflict.class)\n+                .join(Lecture.class,\n+                        equal(CourseConflict::getLeftCourse, Lecture::getCourse))\n+                .filter(((courseConflict, lecture) -> lecture.getPeriod() != null))\n+                .join(Lecture.class,\n+                        equal((courseConflict, lecture1) -> courseConflict.getRightCourse(), Lecture::getCourse),\n+                        equal((courseConflict, lecture1) -> lecture1.getPeriod(), Lecture::getPeriod))\n+                .filter(((courseConflict, lecture1, lecture2) -> lecture1 != lecture2))\n+                .penalize(\"conflictingLecturesDifferentCourseInSamePeriod\", ONE_HARD,\n+                        (courseConflict, lecture1, lecture2) -> courseConflict.getConflictCount());\n+    }\n+\n+    Constraint conflictingLecturesSameCourseInSamePeriod(ConstraintFactory factory) {\n+        return factory.fromUniquePair(Lecture.class,\n+                equal(Lecture::getPeriod),\n+                equal(Lecture::getCourse))\n+                .penalize(\"conflictingLecturesSameCourseInSamePeriod\", ONE_HARD,\n+                        (lecture1, lecture2) -> 1 + lecture1.getCurriculumSet().size());\n+    }\n+\n+    Constraint roomOccupancy(ConstraintFactory factory) {\n+        return factory.fromUniquePair(Lecture.class,\n+                equal(Lecture::getRoom),\n+                equal(Lecture::getPeriod))\n+                .penalize(\"roomOccupancy\", ONE_HARD);\n+    }\n+\n+    Constraint unavailablePeriodPenalty(ConstraintFactory factory) {\n+        return factory.from(UnavailablePeriodPenalty.class)\n+                .join(Lecture.class,\n+                        equal(UnavailablePeriodPenalty::getCourse, Lecture::getCourse),\n+                        equal(UnavailablePeriodPenalty::getPeriod, Lecture::getPeriod))\n+                .penalize(\"unavailablePeriodPenalty\", ofHard(10));\n+    }\n+\n+    // ************************************************************************\n+    // Soft constraints\n+    // ************************************************************************\n+\n+    Constraint roomCapacity(ConstraintFactory factory) {\n+        return factory.from(Lecture.class)\n+                .filter(lecture -> lecture.getStudentSize() > lecture.getRoom().getCapacity())\n+                .penalize(\"roomCapacity\", ofSoft(1),\n+                        lecture -> lecture.getStudentSize() - lecture.getRoom().getCapacity());\n+    }\n+\n+    Constraint minimumWorkingDays(ConstraintFactory factory) {\n+        return factory.from(Lecture.class)\n+                .groupBy(Lecture::getCourse, countDistinct(Lecture::getDay))\n+                .filter((course, dayCount) -> course.getMinWorkingDaySize() > dayCount)\n+                .penalize(\"minimumWorkingDays\", ofSoft(5),\n+                        (course, dayCount) -> course.getMinWorkingDaySize() - dayCount);\n+    }\n+\n+    Constraint curriculumCompactness(ConstraintFactory factory) {\n+        return factory.from(Curriculum.class)\n+                .join(Lecture.class,\n+                        filtering((curriculum, lecture) -> lecture.getPeriod() != null),", "originalCommit": "55498013bce0a723d634590b987e899a69706791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cdca0cc2ab9a6e920aa0aee7fb9e2e2bfa691b2b", "url": "https://github.com/kiegroup/optaplanner/commit/cdca0cc2ab9a6e920aa0aee7fb9e2e2bfa691b2b", "message": "Rename SolutionIO", "committedDate": "2020-07-23T15:12:39Z", "type": "commit"}, {"oid": "354502db12d7794ad43aa08613cc410d25e801ec", "url": "https://github.com/kiegroup/optaplanner/commit/354502db12d7794ad43aa08613cc410d25e801ec", "message": "Resolve review comments", "committedDate": "2020-07-23T15:15:39Z", "type": "commit"}, {"oid": "c0be9f6b1757a89f6d264aed5be67d8f158ab217", "url": "https://github.com/kiegroup/optaplanner/commit/c0be9f6b1757a89f6d264aed5be67d8f158ab217", "message": "Sort imports", "committedDate": "2020-07-23T15:27:55Z", "type": "commit"}]}