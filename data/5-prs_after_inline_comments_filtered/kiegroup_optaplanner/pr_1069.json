{"pr_number": 1069, "pr_title": "PLANNER-2268 Improve CS performance of Machine Reassignment", "pr_createdAt": "2020-12-09T07:48:13Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/1069", "timeline": [{"oid": "fc6863d8a289655c0354374a4854e1ff29443058", "url": "https://github.com/kiegroup/optaplanner/commit/fc6863d8a289655c0354374a4854e1ff29443058", "message": "PLANNER-2268 Improve CS performance of Machine Reassignment", "committedDate": "2020-12-09T07:47:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3OTQyNw==", "url": "https://github.com/kiegroup/optaplanner/pull/1069#discussion_r539079427", "bodyText": "This is the important bit.", "author": "triceo", "createdAt": "2020-12-09T07:49:27Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/machinereassignment/optional/score/MachineReassignmentConstraintProvider.java", "diffHunk": "@@ -91,10 +89,9 @@ protected Constraint serviceConflict(ConstraintFactory factory) {\n      * Spread: Processes of the same service must be serviceLocationSpread out across locations.\n      */\n     protected Constraint serviceLocationSpread(ConstraintFactory factory) {\n-        return factory.from(MrService.class)\n-                .join(MrProcessAssignment.class, equal(Function.identity(), MrProcessAssignment::getService))\n-                .groupBy((service, processAssignment) -> service,\n-                        ConstraintCollectors.countDistinct((service, processAssignment) -> processAssignment.getLocation()))\n+        return factory.from(MrProcessAssignment.class)\n+                .groupBy(processAssignment -> processAssignment.getService(),\n+                        ConstraintCollectors.countDistinct(processAssignment -> processAssignment.getLocation()))", "originalCommit": "fc6863d8a289655c0354374a4854e1ff29443058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExMDgwMg==", "url": "https://github.com/kiegroup/optaplanner/pull/1069#discussion_r539110802", "bodyText": "Why using penalize instead of penalizeLong if the score is HardSoftLongScore ?", "author": "rsynek", "createdAt": "2020-12-09T08:39:58Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/machinereassignment/optional/score/MachineReassignmentConstraintProvider.java", "diffHunk": "@@ -189,8 +183,7 @@ protected Constraint processMoveCost(ConstraintFactory factory) {\n                 .filter(processAssignment -> processAssignment.isMoved() && processAssignment.getProcessMoveCost() > 0)\n                 .join(MrGlobalPenaltyInfo.class,\n                         Joiners.filtering((processAssignment, penalty) -> penalty.getProcessMoveCostWeight() > 0))\n-                .penalizeLong(MrConstraints.PROCESS_MOVE_COST,\n-                        HardSoftLongScore.ONE_SOFT,\n+                .penalize(MrConstraints.PROCESS_MOVE_COST, HardSoftLongScore.ONE_SOFT,", "originalCommit": "fc6863d8a289655c0354374a4854e1ff29443058", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExMTg1MA==", "url": "https://github.com/kiegroup/optaplanner/pull/1069#discussion_r539111850", "bodyText": "Because it finally works since a couple weeks ago and we don't need to see the implicit type cast IDE warnings. :-)", "author": "triceo", "createdAt": "2020-12-09T08:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExMDgwMg=="}], "type": "inlineReview"}]}