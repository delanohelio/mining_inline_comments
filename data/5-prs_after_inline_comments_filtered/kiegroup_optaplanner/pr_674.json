{"pr_number": 674, "pr_title": "PLANNER-1825 Add constraint provider for TSP", "pr_createdAt": "2020-02-05T08:53:51Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/674", "timeline": [{"oid": "62f21c6f63dc1841ee77c90c24d8fa48294bfd6f", "url": "https://github.com/kiegroup/optaplanner/commit/62f21c6f63dc1841ee77c90c24d8fa48294bfd6f", "message": "Implement the TSP example", "committedDate": "2020-02-05T08:52:49Z", "type": "commit"}, {"oid": "ce4e8f3a4169894224d11645b68697870c144452", "url": "https://github.com/kiegroup/optaplanner/commit/ce4e8f3a4169894224d11645b68697870c144452", "message": "Solution IO", "committedDate": "2020-02-05T08:53:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODIxMA==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375128210", "bodyText": "Why extract that in a separate file? The more files in an example, the harder it is to understand for our users.", "author": "ge0ffrey", "createdAt": "2020-02-05T08:57:52Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/app/TspApp.java", "diffHunk": "@@ -55,7 +55,7 @@ protected TspPanel createSolutionPanel() {\n \n     @Override\n     public SolutionFileIO<TspSolution> createSolutionFileIO() {\n-        return new XStreamSolutionFileIO<>(TspSolution.class);\n+        return new TspXStreamSolutionFileIO();", "originalCommit": "ce4e8f3a4169894224d11645b68697870c144452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyOTg1OA==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375129858", "bodyText": "I thought you were going to ask. :-) I have a harness that allows me to run all examples in a single benchmark - essentially an abstraction to easily perform score director benchmarks over all examples and all score directors, without having a benchmark template of a million lines.\nThe downside of that is that it relies pretty heavily on generics. And I had to do this to standardize it with the other examples. (This was the only one that didn't have its own solution file IO.)\nI will submit the harness as a PR later and we can discuss it.", "author": "triceo", "createdAt": "2020-02-05T09:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTI4Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375131287", "bodyText": "If all other examples do it, there is very little point indeed in this example not doing it to be easier to understand. +1 for this change (consistency)", "author": "ge0ffrey", "createdAt": "2020-02-05T09:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyODMzMw==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375128333", "bodyText": "Use SimpleLongScore.ONE", "author": "ge0ffrey", "createdAt": "2020-02-05T08:58:07Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tsp.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.tsp.domain.Domicile;\n+import org.optaplanner.examples.tsp.domain.Visit;\n+\n+public final class TspConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                distanceToPreviousStandstill(constraintFactory),\n+                distanceFromLastVisitToDomicile(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint distanceToPreviousStandstill(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .penalizeLong(\"Distance to previous standstill\",\n+                        SimpleLongScore.of(1),", "originalCommit": "ce4e8f3a4169894224d11645b68697870c144452", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dbea8d9a8987e70e48352050aec9c03c02841dd2", "url": "https://github.com/kiegroup/optaplanner/commit/dbea8d9a8987e70e48352050aec9c03c02841dd2", "message": "SimpleLongScore.ONE", "committedDate": "2020-02-05T09:02:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMDU4MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375130581", "bodyText": "I guess \"visit -> visit\" is better than \"Function.identity()\"?\nShould we experiment with thisEqual() or equalToThat() ? I guess that's overkill...", "author": "ge0ffrey", "createdAt": "2020-02-05T09:02:58Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/tsp/optional/score/TspConstraintProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.tsp.optional.score;\n+\n+import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.tsp.domain.Domicile;\n+import org.optaplanner.examples.tsp.domain.Visit;\n+\n+public final class TspConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[]{\n+                distanceToPreviousStandstill(constraintFactory),\n+                distanceFromLastVisitToDomicile(constraintFactory)\n+        };\n+    }\n+\n+    private Constraint distanceToPreviousStandstill(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .penalizeLong(\"Distance to previous standstill\",\n+                        SimpleLongScore.of(1),\n+                        Visit::getDistanceFromPreviousStandstill);\n+    }\n+\n+    private Constraint distanceFromLastVisitToDomicile(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Visit.class)\n+                .ifNotExists(Visit.class, Joiners.equal(visit -> visit, Visit::getPreviousStandstill))", "originalCommit": "ce4e8f3a4169894224d11645b68697870c144452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTUyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375131521", "bodyText": "(just a thought, no changes needed)", "author": "ge0ffrey", "createdAt": "2020-02-05T09:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMDU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTc1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/674#discussion_r375131753", "bodyText": "In this particular case, Function.identity() didn't compile.identity() returns a Visit while getPreviousStandstill() returns a Standstill. The compiler didn't like that.", "author": "triceo", "createdAt": "2020-02-05T09:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMDU4MQ=="}], "type": "inlineReview"}, {"oid": "d6b7a0071c4f7b9bd0f70d77d81df9c41ae08890", "url": "https://github.com/kiegroup/optaplanner/commit/d6b7a0071c4f7b9bd0f70d77d81df9c41ae08890", "message": "Revert \"Solution IO\"\n\nThis reverts commit ce4e8f3a", "committedDate": "2020-02-05T09:16:55Z", "type": "commit"}, {"oid": "e70d9a2356f943893ed806db4ebc571c5fb65226", "url": "https://github.com/kiegroup/optaplanner/commit/e70d9a2356f943893ed806db4ebc571c5fb65226", "message": "No copyright in XML", "committedDate": "2020-02-05T09:23:51Z", "type": "commit"}, {"oid": "e92acb96eaab2ef0dd01e203c330a8588336e1cb", "url": "https://github.com/kiegroup/optaplanner/commit/e92acb96eaab2ef0dd01e203c330a8588336e1cb", "message": "Revert \"Solution IO\"\n\nThis reverts commit ce4e8f3a", "committedDate": "2020-02-05T09:25:15Z", "type": "commit"}]}