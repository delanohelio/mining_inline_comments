{"pr_number": 894, "pr_title": "PLANNER-1868 SolverManager needs an API that allows a user to listen to both best solution and solver terminated events", "pr_createdAt": "2020-08-21T08:05:26Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/894", "timeline": [{"oid": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699", "url": "https://github.com/kiegroup/optaplanner/commit/9bdbdf2f24ced6a6a98e02b5e50cff3c50442699", "message": "PLANNER-1868 SolverManager needs an API that allows a user to listen to both best solution and solver terminated events", "committedDate": "2020-08-21T08:04:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1Njk2Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/894#discussion_r474556966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param problemId never null, a ID for each planning problem. This must be unique.\n          \n          \n            \n                 * @param problemId never null, an ID for each planning problem. This must be unique.", "author": "rsynek", "createdAt": "2020-08-21T09:08:56Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "diffHunk": "@@ -222,8 +223,39 @@\n      *        If null it defaults to logging the exception as an error.\n      * @return never null\n      */\n+    default SolverJob<Solution_, ProblemId_> solveAndListen(ProblemId_ problemId,\n+            Function<? super ProblemId_, ? extends Solution_> problemFinder,\n+            Consumer<? super Solution_> bestSolutionConsumer,\n+            BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n+        return solveAndListen(problemId, problemFinder, bestSolutionConsumer, null, exceptionHandler);\n+    }\n+\n+    /**\n+     * As defined by {@link #solveAndListen(Object, Function, Consumer)}.\n+     * <p>\n+     * The final best solution is delivered twice:\n+     * first to the {@code bestSolutionConsumer} when it is found\n+     * and then again to the {@code finalBestSolutionConsumer} when the solver terminates.\n+     * Do not store the solution twice.\n+     * This allows for use cases that only process the {@link Score} first (during best solution changed events)\n+     * and then store the solution upon termination.\n+     *\n+     * @param problemId never null, a ID for each planning problem. This must be unique.", "originalCommit": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1Nzc3Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/894#discussion_r474557773", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread,\n          \n          \n            \n                 * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread.", "author": "rsynek", "createdAt": "2020-08-21T09:09:50Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/solver/SolverManager.java", "diffHunk": "@@ -222,8 +223,39 @@\n      *        If null it defaults to logging the exception as an error.\n      * @return never null\n      */\n+    default SolverJob<Solution_, ProblemId_> solveAndListen(ProblemId_ problemId,\n+            Function<? super ProblemId_, ? extends Solution_> problemFinder,\n+            Consumer<? super Solution_> bestSolutionConsumer,\n+            BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler) {\n+        return solveAndListen(problemId, problemFinder, bestSolutionConsumer, null, exceptionHandler);\n+    }\n+\n+    /**\n+     * As defined by {@link #solveAndListen(Object, Function, Consumer)}.\n+     * <p>\n+     * The final best solution is delivered twice:\n+     * first to the {@code bestSolutionConsumer} when it is found\n+     * and then again to the {@code finalBestSolutionConsumer} when the solver terminates.\n+     * Do not store the solution twice.\n+     * This allows for use cases that only process the {@link Score} first (during best solution changed events)\n+     * and then store the solution upon termination.\n+     *\n+     * @param problemId never null, a ID for each planning problem. This must be unique.\n+     *        Use this problemId to {@link #terminateEarly(Object) terminate} the solver early,\n+     *        {@link #getSolverStatus(Object) to get the status} or if the problem changes while solving.\n+     * @param problemFinder never null, function that returns a {@link PlanningSolution}, usually with uninitialized planning\n+     *        variables\n+     * @param bestSolutionConsumer never null, called multiple times, on a consumer thread\n+     * @param finalBestSolutionConsumer sometimes null, called only once, at the end, on a consumer thread,", "originalCommit": "9bdbdf2f24ced6a6a98e02b5e50cff3c50442699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa8c75039b4c25d20140b970fd51ba852eb86557", "url": "https://github.com/kiegroup/optaplanner/commit/fa8c75039b4c25d20140b970fd51ba852eb86557", "message": "Typo\n\nCo-authored-by: Radovan Synek <rsynek@redhat.com>", "committedDate": "2020-08-21T10:03:51Z", "type": "commit"}, {"oid": "769edf67d28a6d23aeae15deb389bfa56fd39e1a", "url": "https://github.com/kiegroup/optaplanner/commit/769edf67d28a6d23aeae15deb389bfa56fd39e1a", "message": "Typo\n\nCo-authored-by: Radovan Synek <rsynek@redhat.com>", "committedDate": "2020-08-21T10:04:24Z", "type": "commit"}]}