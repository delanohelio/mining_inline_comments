{"pr_number": 439, "pr_title": "Implementation for the Scattergram 3D arranger", "pr_createdAt": "2020-04-19T13:56:34Z", "pr_url": "https://github.com/constellation-app/constellation/pull/439", "timeline": [{"oid": "4621eee1a7165111daca5d57c558bf1535a67c9a", "url": "https://github.com/constellation-app/constellation/commit/4621eee1a7165111daca5d57c558bf1535a67c9a", "message": "This is the scattergram 3d that takes in 3 attributes and then arranges the graph into a 3d scattergram in the main window.", "committedDate": "2020-04-19T13:46:54Z", "type": "commit"}, {"oid": "2ce374a230a5a6e58e8a6ec2e0c679de8e237aa7", "url": "https://github.com/constellation-app/constellation/commit/2ce374a230a5a6e58e8a6ec2e0c679de8e237aa7", "message": "Fix NaN issues with data and add in Raw option.", "committedDate": "2020-04-20T07:25:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3Mzk2Mg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r411873962", "bodyText": "My brain really wants to think this says scattered", "author": "antares1470", "createdAt": "2020-04-21T05:11:54Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/ArrangementPluginRegistry.java", "diffHunk": "@@ -70,6 +71,7 @@\n     public static final String MDS = ArrangeInMDSPlugin.class.getName();\n     public static final String PENDANTS = PendantsArranger.class.getName();\n     public static final String RANDOM = RandomArrangementPlugin.class.getName();\n+    public static final String SCATTER3D = ArrangeInScatter3dGeneralPlugin.class.getName();", "originalCommit": "2ce374a230a5a6e58e8a6ec2e0c679de8e237aa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0Nzc5OA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r411947798", "bodyText": "Can you change it to SCATTER_3D ?", "author": "arcturus2", "createdAt": "2020-04-21T07:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3Mzk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3NzQ3Mg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r411877472", "bodyText": "change the 3 instances of to \"float\" to FloatAttributeDescription.getName()", "author": "antares1470", "createdAt": "2020-04-21T05:22:20Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, \"float\", \"x\", \"x\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, \"float\", \"y\", \"y\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, \"float\", \"z\", \"z\", null, null);", "originalCommit": "2ce374a230a5a6e58e8a6ec2e0c679de8e237aa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2OTEzNg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412069136", "bodyText": "Copied from Grid.  Will change", "author": "CrucisGamma", "createdAt": "2020-04-21T10:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3NzQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3ODcwMg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r411878702", "bodyText": "this can be made final", "author": "antares1470", "createdAt": "2020-04-21T05:26:02Z", "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/AttributeUtilities.java", "diffHunk": "@@ -107,4 +110,38 @@\n \n         return types != null ? new TreeSet<>(types) : new TreeSet<>();\n     }\n+\n+    private static final List<GraphElementType> ACCEPTED_ELEMENT_TYPES = Arrays.asList(GraphElementType.GRAPH, GraphElementType.VERTEX);\n+\n+    /**\n+     * Return a set of attribute ids that have nondefault data\n+     *\n+     * @param graph The graph\n+     * @param vxId The vertex id to test in the graph\n+     * @return Map of attribute names\n+     */\n+    public static Map<String, Integer> getNonDefaultAttributes(final GraphReadMethods graph, final int vxId) {\n+        final Map<String, Integer> attributeIds = new TreeMap<>();\n+\n+        if (graph == null) {\n+            return attributeIds;\n+        }\n+        \n+        for (GraphElementType elementType : ACCEPTED_ELEMENT_TYPES) {\n+            int attributeCount = graph.getAttributeCount(elementType);", "originalCommit": "2ce374a230a5a6e58e8a6ec2e0c679de8e237aa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3ODg4Nw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r411878887", "bodyText": "this can also be made final", "author": "antares1470", "createdAt": "2020-04-21T05:26:21Z", "path": "CoreGraphUtilities/src/au/gov/asd/tac/constellation/graph/utilities/AttributeUtilities.java", "diffHunk": "@@ -107,4 +110,38 @@\n \n         return types != null ? new TreeSet<>(types) : new TreeSet<>();\n     }\n+\n+    private static final List<GraphElementType> ACCEPTED_ELEMENT_TYPES = Arrays.asList(GraphElementType.GRAPH, GraphElementType.VERTEX);\n+\n+    /**\n+     * Return a set of attribute ids that have nondefault data\n+     *\n+     * @param graph The graph\n+     * @param vxId The vertex id to test in the graph\n+     * @return Map of attribute names\n+     */\n+    public static Map<String, Integer> getNonDefaultAttributes(final GraphReadMethods graph, final int vxId) {\n+        final Map<String, Integer> attributeIds = new TreeMap<>();\n+\n+        if (graph == null) {\n+            return attributeIds;\n+        }\n+        \n+        for (GraphElementType elementType : ACCEPTED_ELEMENT_TYPES) {\n+            int attributeCount = graph.getAttributeCount(elementType);\n+            for (int i = 0; i < attributeCount; i++) {\n+\n+                Attribute attr = new GraphAttribute(graph, graph.getAttribute(elementType, i));", "originalCommit": "2ce374a230a5a6e58e8a6ec2e0c679de8e237aa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4bca7dfcc6eea27ab3ec95fbd83084667f9821b0", "url": "https://github.com/constellation-app/constellation/commit/4bca7dfcc6eea27ab3ec95fbd83084667f9821b0", "message": "Merge branch 'master' into master", "committedDate": "2020-04-21T13:12:31Z", "type": "commit"}, {"oid": "a15505b1c1f53e85ac6f1431141fbb7560e50844", "url": "https://github.com/constellation-app/constellation/commit/a15505b1c1f53e85ac6f1431141fbb7560e50844", "message": "Fix requested review items.", "committedDate": "2020-04-22T09:16:36Z", "type": "commit"}, {"oid": "f33d9d682897781e42828450967f695b0550c67f", "url": "https://github.com/constellation-app/constellation/commit/f33d9d682897781e42828450967f695b0550c67f", "message": "Fix requested review items.", "committedDate": "2020-04-22T09:25:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NDM3Ng==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412984376", "bodyText": "For consistency with other arrangement plugin, could you rename the package to just scatter - there is no reason we couldn't have a Scatter2D plugin alongside this one.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:31:13Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/ArrangementPluginRegistry.java", "diffHunk": "@@ -34,6 +34,7 @@\n import au.gov.asd.tac.constellation.plugins.arrangements.random.RandomArrangementPlugin;\n import au.gov.asd.tac.constellation.plugins.arrangements.resize.ContractGraphPlugin;\n import au.gov.asd.tac.constellation.plugins.arrangements.resize.ExpandGraphPlugin;\n+import au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin;", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzNTA3MA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413935070", "bodyText": "Done.", "author": "CrucisGamma", "createdAt": "2020-04-23T16:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NDM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4ODU0Mw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412988543", "bodyText": "There is an unwritten convention for arrangements - 2D variants use Crtl+ and 3D variants use Ctrl+Alt+.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:36:28Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/ArrangeInScatter3dAction.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.ReadableGraph;\n+import au.gov.asd.tac.constellation.graph.interaction.InteractiveGraphPluginRegistry;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManagerListener;\n+import au.gov.asd.tac.constellation.graph.utilities.AttributeUtilities;\n+import au.gov.asd.tac.constellation.plugins.Plugin;\n+import au.gov.asd.tac.constellation.plugins.PluginExecutor;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_X_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_X_LOGARITHMIC;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Y_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Y_LOGARITHMIC;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Z_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Z_LOGARITHMIC;\n+import au.gov.asd.tac.constellation.plugins.gui.PluginParametersSwingDialog;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameter;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameters;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType.BooleanParameterValue;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType.SingleChoiceParameterValue;\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n+import javax.swing.MenuElement;\n+import javax.swing.MenuSelectionManager;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.ImageUtilities;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.actions.Presenter;\n+\n+/**\n+ * Arranging vertexes in a scatter3d\n+ *\n+ * @author CrucisGamma\n+ */\n+@ActionID(category = \"Arrange\", id = \"au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dAction\")\n+@ActionRegistration(displayName = \"#CTL_ArrangeInScatter3dAction\", iconBase = \"au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/resources/scatter3d.png\", surviveFocusChange = true)\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Arrange\", position = 0),\n+    @ActionReference(path = \"Toolbars/Arrange\", position = 0),\n+    @ActionReference(path = \"Shortcuts\", name = \"S-3\")", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzNDc0NA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413934744", "bodyText": "Done.", "author": "CrucisGamma", "createdAt": "2020-04-23T16:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4ODU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4OTczMg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412989732", "bodyText": "The icon should be specified in the iconBase attribute of @ActionRegistration.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:37:55Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/ArrangeInScatter3dAction.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.ReadableGraph;\n+import au.gov.asd.tac.constellation.graph.interaction.InteractiveGraphPluginRegistry;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManagerListener;\n+import au.gov.asd.tac.constellation.graph.utilities.AttributeUtilities;\n+import au.gov.asd.tac.constellation.plugins.Plugin;\n+import au.gov.asd.tac.constellation.plugins.PluginExecutor;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_X_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_X_LOGARITHMIC;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Y_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Y_LOGARITHMIC;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Z_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Z_LOGARITHMIC;\n+import au.gov.asd.tac.constellation.plugins.gui.PluginParametersSwingDialog;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameter;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameters;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType.BooleanParameterValue;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType.SingleChoiceParameterValue;\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n+import javax.swing.MenuElement;\n+import javax.swing.MenuSelectionManager;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.ImageUtilities;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.actions.Presenter;\n+\n+/**\n+ * Arranging vertexes in a scatter3d\n+ *\n+ * @author CrucisGamma\n+ */\n+@ActionID(category = \"Arrange\", id = \"au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dAction\")\n+@ActionRegistration(displayName = \"#CTL_ArrangeInScatter3dAction\", iconBase = \"au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/resources/scatter3d.png\", surviveFocusChange = true)\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Arrange\", position = 0),\n+    @ActionReference(path = \"Toolbars/Arrange\", position = 0),\n+    @ActionReference(path = \"Shortcuts\", name = \"S-3\")\n+})\n+@Messages(\"CTL_ArrangeInScatter3dAction=Scatter3d\")\n+\n+public final class ArrangeInScatter3dAction extends AbstractAction implements Presenter.Toolbar, GraphManagerListener {\n+\n+    private static final String SCATTER_3D_ACTIONS_ICON = \"au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/resources/scatter3d.png\";", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzNDYwNg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413934606", "bodyText": "Done (was simplified)", "author": "CrucisGamma", "createdAt": "2020-04-23T16:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4OTczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5MjEwOQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412992109", "bodyText": "The this keyword is unnecessary for getters.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:40:42Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dChoiceParameters.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+/**\n+ * A holder for the parameters of a Scatter3d arrangement.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dChoiceParameters {\n+\n+    private String xDimension;\n+    private String yDimension;\n+    private String zDimension;\n+    private boolean xLogarithmic = false;\n+    private boolean yLogarithmic = false;\n+    private boolean zLogarithmic = false;\n+\n+    public Scatter3dChoiceParameters() {\n+    }\n+\n+    public static Scatter3dChoiceParameters getDefaultParameters() {\n+        return new Scatter3dChoiceParameters();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"\";\n+    }\n+\n+    public void setXDimension(final String xDimension) {\n+        this.xDimension = xDimension;\n+    }\n+\n+    public void setYDimension(final String yDimension) {\n+        this.yDimension = yDimension;\n+    }\n+\n+    public void setZDimension(final String zDimension) {\n+        this.zDimension = zDimension;\n+    }\n+\n+    public void setLogarithmicX(final Boolean xLogarithmic) {\n+        this.xLogarithmic = xLogarithmic;\n+    }\n+\n+    public void setLogarithmicY(final Boolean yLogarithmic) {\n+        this.yLogarithmic = yLogarithmic;\n+    }\n+\n+    public void setLogarithmicZ(final Boolean zLogarithmic) {\n+        this.zLogarithmic = zLogarithmic;\n+    }\n+\n+    public String getXDimension() {\n+        return this.xDimension;", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5MjUzMQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412992531", "bodyText": "You should remove this if you're not using it.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:41:09Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dChoiceParameters.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+/**\n+ * A holder for the parameters of a Scatter3d arrangement.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dChoiceParameters {\n+\n+    private String xDimension;\n+    private String yDimension;\n+    private String zDimension;\n+    private boolean xLogarithmic = false;\n+    private boolean yLogarithmic = false;\n+    private boolean zLogarithmic = false;\n+\n+    public Scatter3dChoiceParameters() {\n+    }\n+\n+    public static Scatter3dChoiceParameters getDefaultParameters() {\n+        return new Scatter3dChoiceParameters();\n+    }\n+\n+    @Override\n+    public String toString() {", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5MjcxNw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412992717", "bodyText": "You should remove this if you're not using it.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:41:22Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dChoiceParameters.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+/**\n+ * A holder for the parameters of a Scatter3d arrangement.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dChoiceParameters {\n+\n+    private String xDimension;\n+    private String yDimension;\n+    private String zDimension;\n+    private boolean xLogarithmic = false;\n+    private boolean yLogarithmic = false;\n+    private boolean zLogarithmic = false;\n+\n+    public Scatter3dChoiceParameters() {", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5MzQ2OQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412993469", "bodyText": "You should remove this if you're not using it.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:42:16Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.FloatAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NDIzNg==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412994236", "bodyText": "You can simply use VisualConcept.VertexAttribute.X.get() to get the attribute id, and VisualConcept.VertexAttribute.X.ensure() if you just want to guarantee the attribute exists.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:43:12Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.FloatAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName()) == Graph.NOT_FOUND) {", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NTc3NA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412995774", "bodyText": "Did you mean to do nothing and return if no parameters were provided?", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:45:01Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.FloatAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"x\", \"x\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"y\", \"y\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"z\", \"z\", null, null);\n+        }\n+\n+        final String xDimension;\n+        final String yDimension;\n+        final String zDimension;\n+        final boolean xLogarithmic;\n+        final boolean yLogarithmic;\n+        final boolean zLogarithmic;\n+        if (params != null) {\n+            xDimension = params.getXDimension();\n+            yDimension = params.getYDimension();\n+            zDimension = params.getZDimension();\n+            xLogarithmic = params.getLogarithmicX();\n+            yLogarithmic = params.getLogarithmicY();\n+            zLogarithmic = params.getLogarithmicZ();\n+        } else {\n+            return;", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0ODk2Mw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413848963", "bodyText": "Yes.  If the attributes aren't chosen, this should leave the graph as it stands at the present time.", "author": "CrucisGamma", "createdAt": "2020-04-23T14:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NTc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NjI4Ng==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412996286", "bodyText": "This is unnecessary as you're getting the attribute id's above.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:45:38Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.FloatAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"x\", \"x\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"y\", \"y\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"z\", \"z\", null, null);\n+        }\n+\n+        final String xDimension;\n+        final String yDimension;\n+        final String zDimension;\n+        final boolean xLogarithmic;\n+        final boolean yLogarithmic;\n+        final boolean zLogarithmic;\n+        if (params != null) {\n+            xDimension = params.getXDimension();\n+            yDimension = params.getYDimension();\n+            zDimension = params.getZDimension();\n+            xLogarithmic = params.getLogarithmicX();\n+            yLogarithmic = params.getLogarithmicY();\n+            zLogarithmic = params.getLogarithmicZ();\n+        } else {\n+            return;\n+        }\n+\n+        final int xAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1NDkyOQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413854929", "bodyText": "Modified to (will test further):\n        // Get/set the x,y,z attributes.\n        final int xAttr = VisualConcept.VertexAttribute.X.ensure(wg);\n        final int yAttr = VisualConcept.VertexAttribute.Y.ensure(wg);\n        final int zAttr = VisualConcept.VertexAttribute.Z.ensure(wg);", "author": "CrucisGamma", "createdAt": "2020-04-23T14:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NjI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5ODExMQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r412998111", "bodyText": "Maybe call this something like \"scaleValue\"?", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:47:50Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.FloatAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"x\", \"x\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"y\", \"y\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"z\", \"z\", null, null);\n+        }\n+\n+        final String xDimension;\n+        final String yDimension;\n+        final String zDimension;\n+        final boolean xLogarithmic;\n+        final boolean yLogarithmic;\n+        final boolean zLogarithmic;\n+        if (params != null) {\n+            xDimension = params.getXDimension();\n+            yDimension = params.getYDimension();\n+            zDimension = params.getZDimension();\n+            xLogarithmic = params.getLogarithmicX();\n+            yLogarithmic = params.getLogarithmicY();\n+            zLogarithmic = params.getLogarithmicZ();\n+        } else {\n+            return;\n+        }\n+\n+        final int xAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        final int yAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        final int zAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName());\n+\n+        final int xDim = wg.getAttribute(GraphElementType.VERTEX, xDimension);\n+        final int yDim = wg.getAttribute(GraphElementType.VERTEX, yDimension);\n+        final int zDim = wg.getAttribute(GraphElementType.VERTEX, zDimension);\n+        final int vxCount = wg.getVertexCount();\n+\n+        float maxX = 0;\n+        float minX = 0;\n+        float maxY = 0;\n+        float minY = 0;\n+        float maxZ = 0;\n+        float minZ = 0;\n+        boolean firstVals = true;\n+\n+        if (vxCount > 0) {\n+            final BitSet vertices = GraphUtilities.vertexBits(wg);\n+            int vxPos = 0;\n+            final int[] vxOrder = new int[vxCount];\n+            for (int vxId = vertices.nextSetBit(0); vxId >= 0; vxId = vertices.nextSetBit(vxId + 1)) {\n+                if (Thread.interrupted()) {\n+                    throw new InterruptedException();\n+                }\n+                vxOrder[vxPos++] = vxId;\n+                vertices.clear(vxId);\n+            }\n+\n+            float xVal;\n+            float yVal;\n+            float zVal;\n+\n+            for (int i = 0; i < vxPos; i++) {\n+                if (Thread.interrupted()) {\n+                    throw new InterruptedException();\n+                }\n+                final int vxId = vxOrder[i];\n+\n+                xVal = getFloatValueFromObject(wg.getObjectValue(xDim, vxId), xLogarithmic);\n+                yVal = getFloatValueFromObject(wg.getObjectValue(yDim, vxId), yLogarithmic);\n+                zVal = getFloatValueFromObject(wg.getObjectValue(zDim, vxId), zLogarithmic);\n+\n+                if (firstVals) {\n+                    firstVals = false;\n+                    maxX = xVal;\n+                    minX = xVal;\n+                    maxY = yVal;\n+                    minY = yVal;\n+                    maxZ = zVal;\n+                    minZ = zVal;\n+                } else {\n+                    minX = Math.min(xVal, minX);\n+                    maxX = Math.max(xVal, maxX);\n+                    minY = Math.min(yVal, minY);\n+                    maxY = Math.max(yVal, maxY);\n+                    minZ = Math.min(zVal, minZ);\n+                    maxZ = Math.max(zVal, maxZ);\n+                }\n+\n+                wg.setFloatValue(xAttr, vxId, xVal);\n+                wg.setFloatValue(yAttr, vxId, yVal);\n+                wg.setFloatValue(zAttr, vxId, zVal);\n+            }\n+\n+            // Scale to 0-100\n+            if (maxX == minX) {\n+                maxX += 1;\n+            }\n+            if (maxY == minY) {\n+                maxY += 1;\n+            }\n+            if (maxZ == minZ) {\n+                maxZ += 1;\n+            }\n+\n+            for (int i = 0; i < vxPos; i++) {\n+                if (Thread.interrupted()) {\n+                    throw new InterruptedException();\n+                }\n+                final int vxId = vxOrder[i];\n+\n+                xVal = wg.getFloatValue(xAttr, vxId);\n+                yVal = wg.getFloatValue(yAttr, vxId);\n+                zVal = wg.getFloatValue(zAttr, vxId);\n+\n+                xVal = 100 * (xVal - minX) / (maxX - minX);\n+                yVal = 100 * (yVal - minY) / (maxY - minY);\n+                zVal = 100 * (zVal - minZ) / (maxZ - minZ);\n+\n+                wg.setFloatValue(xAttr, vxId, xVal);\n+                wg.setFloatValue(yAttr, vxId, yVal);\n+                wg.setFloatValue(zAttr, vxId, zVal);\n+            }\n+        }\n+    }\n+\n+    private float getFinalValue(float value, boolean logarithmic) {", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMDExNQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413000115", "bodyText": "@arcturus2 - I don't think it's an issue, but could you cause issues reading and writing to attributes in a loop like this? Or are the attributes only actually written on commit?", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:50:10Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.FloatAttributeDescription;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"x\", \"x\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"y\", \"y\", null, null);\n+        }\n+        if (wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName()) == Graph.NOT_FOUND) {\n+            wg.addAttribute(GraphElementType.VERTEX, FloatAttributeDescription.ATTRIBUTE_NAME, \"z\", \"z\", null, null);\n+        }\n+\n+        final String xDimension;\n+        final String yDimension;\n+        final String zDimension;\n+        final boolean xLogarithmic;\n+        final boolean yLogarithmic;\n+        final boolean zLogarithmic;\n+        if (params != null) {\n+            xDimension = params.getXDimension();\n+            yDimension = params.getYDimension();\n+            zDimension = params.getZDimension();\n+            xLogarithmic = params.getLogarithmicX();\n+            yLogarithmic = params.getLogarithmicY();\n+            zLogarithmic = params.getLogarithmicZ();\n+        } else {\n+            return;\n+        }\n+\n+        final int xAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        final int yAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        final int zAttr = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName());\n+\n+        final int xDim = wg.getAttribute(GraphElementType.VERTEX, xDimension);\n+        final int yDim = wg.getAttribute(GraphElementType.VERTEX, yDimension);\n+        final int zDim = wg.getAttribute(GraphElementType.VERTEX, zDimension);\n+        final int vxCount = wg.getVertexCount();\n+\n+        float maxX = 0;\n+        float minX = 0;\n+        float maxY = 0;\n+        float minY = 0;\n+        float maxZ = 0;\n+        float minZ = 0;\n+        boolean firstVals = true;\n+\n+        if (vxCount > 0) {\n+            final BitSet vertices = GraphUtilities.vertexBits(wg);\n+            int vxPos = 0;\n+            final int[] vxOrder = new int[vxCount];\n+            for (int vxId = vertices.nextSetBit(0); vxId >= 0; vxId = vertices.nextSetBit(vxId + 1)) {\n+                if (Thread.interrupted()) {\n+                    throw new InterruptedException();\n+                }\n+                vxOrder[vxPos++] = vxId;\n+                vertices.clear(vxId);\n+            }\n+\n+            float xVal;\n+            float yVal;\n+            float zVal;\n+\n+            for (int i = 0; i < vxPos; i++) {\n+                if (Thread.interrupted()) {\n+                    throw new InterruptedException();\n+                }\n+                final int vxId = vxOrder[i];\n+\n+                xVal = getFloatValueFromObject(wg.getObjectValue(xDim, vxId), xLogarithmic);\n+                yVal = getFloatValueFromObject(wg.getObjectValue(yDim, vxId), yLogarithmic);\n+                zVal = getFloatValueFromObject(wg.getObjectValue(zDim, vxId), zLogarithmic);\n+\n+                if (firstVals) {\n+                    firstVals = false;\n+                    maxX = xVal;\n+                    minX = xVal;\n+                    maxY = yVal;\n+                    minY = yVal;\n+                    maxZ = zVal;\n+                    minZ = zVal;\n+                } else {\n+                    minX = Math.min(xVal, minX);\n+                    maxX = Math.max(xVal, maxX);\n+                    minY = Math.min(yVal, minY);\n+                    maxY = Math.max(yVal, maxY);\n+                    minZ = Math.min(zVal, minZ);\n+                    maxZ = Math.max(zVal, maxZ);\n+                }\n+\n+                wg.setFloatValue(xAttr, vxId, xVal);", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3MDkzMw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413070933", "bodyText": "@cygnus-x-1 a great observation mate - but your right it will only matter on commit.", "author": "arcturus2", "createdAt": "2020-04-22T15:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMDExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMzg4Mw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413003883", "bodyText": "This looks more complex than it needs to be - in the simplest case you should be able to mirror what other arrangement plugins are doing (most of them are under 20 lines), and you should be able to auto-generate a gui from the parameters.", "author": "cygnus-x-1", "createdAt": "2020-04-22T13:54:40Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/ArrangeInScatter3dAction.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter3d;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.ReadableGraph;\n+import au.gov.asd.tac.constellation.graph.interaction.InteractiveGraphPluginRegistry;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManagerListener;\n+import au.gov.asd.tac.constellation.graph.utilities.AttributeUtilities;\n+import au.gov.asd.tac.constellation.plugins.Plugin;\n+import au.gov.asd.tac.constellation.plugins.PluginExecutor;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_X_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_X_LOGARITHMIC;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Y_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Y_LOGARITHMIC;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Z_ATTRIBUTE;\n+import static au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dGeneralPlugin.SCATTER_3D_Z_LOGARITHMIC;\n+import au.gov.asd.tac.constellation.plugins.gui.PluginParametersSwingDialog;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameter;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameters;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType.BooleanParameterValue;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType.SingleChoiceParameterValue;\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n+import javax.swing.MenuElement;\n+import javax.swing.MenuSelectionManager;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.ImageUtilities;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.actions.Presenter;\n+\n+/**\n+ * Arranging vertexes in a scatter3d\n+ *\n+ * @author CrucisGamma\n+ */\n+@ActionID(category = \"Arrange\", id = \"au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dAction\")\n+@ActionRegistration(displayName = \"#CTL_ArrangeInScatter3dAction\", iconBase = \"au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/resources/scatter3d.png\", surviveFocusChange = true)\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Arrange\", position = 0),\n+    @ActionReference(path = \"Toolbars/Arrange\", position = 0),\n+    @ActionReference(path = \"Shortcuts\", name = \"S-3\")\n+})\n+@Messages(\"CTL_ArrangeInScatter3dAction=Scatter3d\")\n+\n+public final class ArrangeInScatter3dAction extends AbstractAction implements Presenter.Toolbar, GraphManagerListener {\n+\n+    private static final String SCATTER_3D_ACTIONS_ICON = \"au/gov/asd/tac/constellation/plugins/arrangements/scatter3d/resources/scatter3d.png\";\n+    private static final String ATTRIBUTES_SELECTED = \"Select Attributes\";\n+\n+    private JPanel panel = null;\n+    private JMenuBar menuBar = null;\n+    private JMenu menu = null;\n+    private Graph graph = null;\n+    private JButton chooseDimensions = null;\n+\n+    public ArrangeInScatter3dAction() {", "originalCommit": "f33d9d682897781e42828450967f695b0550c67f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzNDA3Nw==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r413934077", "bodyText": "Have modified this pretty significantly now.", "author": "CrucisGamma", "createdAt": "2020-04-23T16:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMzg4Mw=="}], "type": "inlineReview"}, {"oid": "2202b8047f4967f5fb46c890ffcbbba367fc2c27", "url": "https://github.com/constellation-app/constellation/commit/2202b8047f4967f5fb46c890ffcbbba367fc2c27", "message": "Fix requested review items.", "committedDate": "2020-04-23T16:14:50Z", "type": "commit"}, {"oid": "e48f25557cabbc3640c40e9aa21f06bc8cbe808b", "url": "https://github.com/constellation-app/constellation/commit/e48f25557cabbc3640c40e9aa21f06bc8cbe808b", "message": "Remove scatter3d remnants..", "committedDate": "2020-04-23T23:38:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMjIxNA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r414202214", "bodyText": "You should be able to replace all this with something like:\nPluginExecution.withPlugin(ArrangementPluginRegistry.SCATTER_3D)\n                .interactively(true) // this will present a gui containing all parameters starting at default values.\n                .executeLater(context.getGraph());", "author": "cygnus-x-1", "createdAt": "2020-04-24T00:00:21Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/ArrangeInScatter3dAction.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.node.GraphNode;\n+import au.gov.asd.tac.constellation.plugins.Plugin;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.plugins.PluginRegistry;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import au.gov.asd.tac.constellation.plugins.gui.PluginParametersDialog;\n+import au.gov.asd.tac.constellation.plugins.gui.PluginParametersSwingDialog;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameters;\n+import java.awt.event.ActionEvent;\n+import javax.swing.AbstractAction;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.NbBundle.Messages;\n+\n+/**\n+ * Arranging vertexes in a scatter3d\n+ *\n+ * @author CrucisGamma\n+ */\n+@ActionID(category = \"Arrange\", id = \"au.gov.asd.tac.constellation.plugins.arrangements.scatter3d.ArrangeInScatter3dAction\")\n+@ActionRegistration(displayName = \"#CTL_ArrangeInScatter3dAction\", iconBase = \"au/gov/asd/tac/constellation/plugins/arrangements/scatter/resources/scatter3d.png\", surviveFocusChange = true)\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Arrange\", position = 0),\n+    @ActionReference(path = \"Toolbars/Arrange\", position = 0),\n+    @ActionReference(path = \"Shortcuts\", name = \"C-A-S\")\n+})\n+@Messages(\"CTL_ArrangeInScatter3dAction=Scatter3d\")\n+\n+public final class ArrangeInScatter3dAction extends AbstractAction {\n+\n+    private final GraphNode context;\n+\n+    public ArrangeInScatter3dAction(final GraphNode context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public void actionPerformed(final ActionEvent ev) {\n+\n+        final Plugin plugin = PluginRegistry.get(ArrangementPluginRegistry.SCATTER_3D);", "originalCommit": "e48f25557cabbc3640c40e9aa21f06bc8cbe808b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwNzYxNQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r414307615", "bodyText": "Done.", "author": "CrucisGamma", "createdAt": "2020-04-24T05:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMjIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDI1MA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r414204250", "bodyText": "Following standard Java style, this should be xDimension, yDimension and zDimension.", "author": "cygnus-x-1", "createdAt": "2020-04-24T00:06:18Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/ArrangeInScatter3dGeneralPlugin.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.ReadableGraph;\n+import au.gov.asd.tac.constellation.graph.utilities.AttributeUtilities;\n+import au.gov.asd.tac.constellation.plugins.Plugin;\n+import au.gov.asd.tac.constellation.plugins.PluginInteraction;\n+import au.gov.asd.tac.constellation.plugins.arrangements.SetRadiusForArrangement;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameter;\n+import au.gov.asd.tac.constellation.plugins.parameters.PluginParameters;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.BooleanParameterType.BooleanParameterValue;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType;\n+import au.gov.asd.tac.constellation.plugins.parameters.types.SingleChoiceParameterType.SingleChoiceParameterValue;\n+import au.gov.asd.tac.constellation.plugins.templates.SimpleEditPlugin;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * plugin for scatter3d arrangement\n+ *\n+ * @author CrucisGamma\n+ */\n+@ServiceProvider(service = Plugin.class)\n+@Messages({\n+    \"ArrangeInScatter3dGeneralPlugin=Arrange in Scatter3d (General)\",\n+    \"SelectedOnly=Arrange only selected nodes\"\n+})\n+public class ArrangeInScatter3dGeneralPlugin extends SimpleEditPlugin {\n+\n+    public static final String SCATTER_3D_X_ATTRIBUTE = PluginParameter.buildId(ArrangeInScatter3dGeneralPlugin.class, \"scatter3d_x_attribute\");\n+    public static final String SCATTER_3D_Y_ATTRIBUTE = PluginParameter.buildId(ArrangeInScatter3dGeneralPlugin.class, \"scatter3d_y_attribute\");\n+    public static final String SCATTER_3D_Z_ATTRIBUTE = PluginParameter.buildId(ArrangeInScatter3dGeneralPlugin.class, \"scatter3d_z_attribute\");\n+    public static final String SCATTER_3D_X_LOGARITHMIC = PluginParameter.buildId(ArrangeInScatter3dGeneralPlugin.class, \"scatter3d_logarithmic_x\");\n+    public static final String SCATTER_3D_Y_LOGARITHMIC = PluginParameter.buildId(ArrangeInScatter3dGeneralPlugin.class, \"scatter3d_logarithmic_y\");\n+    public static final String SCATTER_3D_Z_LOGARITHMIC = PluginParameter.buildId(ArrangeInScatter3dGeneralPlugin.class, \"scatter3d_logarithmic_z\");\n+\n+    private final String X_ATTRIBUTE = \"X Attribute\";\n+    private final String Y_ATTRIBUTE = \"Y Attribute\";\n+    private final String Z_ATTRIBUTE = \"Z Attribute\";\n+    private final String X_LOGARITHMIC = \"Use Logarithmic Scaling for X\";\n+    private final String Y_LOGARITHMIC = \"Use Logarithmic Scaling for Y\";\n+    private final String Z_LOGARITHMIC = \"Use Logarithmic Scaling for Z\";\n+\n+    @Override\n+    public void edit(final GraphWriteMethods graph, final PluginInteraction interaction, final PluginParameters parameters) throws InterruptedException {\n+\n+        final SetRadiusForArrangement radiusSetter = new SetRadiusForArrangement(graph);\n+        radiusSetter.setRadii();\n+\n+        final Map<String, PluginParameter<?>> pp = parameters.getParameters();\n+        final Scatter3dChoiceParameters scatter3dParams = Scatter3dChoiceParameters.getDefaultParameters();\n+        scatter3dParams.setXDimension(pp.get(SCATTER_3D_X_ATTRIBUTE).getStringValue());\n+        scatter3dParams.setYDimension(pp.get(SCATTER_3D_Y_ATTRIBUTE).getStringValue());\n+        scatter3dParams.setZDimension(pp.get(SCATTER_3D_Z_ATTRIBUTE).getStringValue());\n+        scatter3dParams.setLogarithmicX(pp.get(SCATTER_3D_X_LOGARITHMIC).getBooleanValue());\n+        scatter3dParams.setLogarithmicY(pp.get(SCATTER_3D_Y_LOGARITHMIC).getBooleanValue());\n+        scatter3dParams.setLogarithmicZ(pp.get(SCATTER_3D_Z_LOGARITHMIC).getBooleanValue());\n+\n+        final Scatter3dArranger arranger = new Scatter3dArranger(scatter3dParams);\n+        arranger.arrange(graph);\n+    }\n+\n+    @Override\n+    public PluginParameters createParameters() {\n+        final PluginParameters parameters = new PluginParameters();\n+\n+        final PluginParameter<SingleChoiceParameterValue> x_attribute = SingleChoiceParameterType.build(SCATTER_3D_X_ATTRIBUTE);\n+        x_attribute.setName(X_ATTRIBUTE);\n+        x_attribute.setDescription(\"The attribute to use for the x dimension\");\n+        x_attribute.setStringValue(\"\");\n+        parameters.addParameter(x_attribute);\n+\n+        final PluginParameter<SingleChoiceParameterValue> y_attribute = SingleChoiceParameterType.build(SCATTER_3D_Y_ATTRIBUTE);\n+        y_attribute.setName(Y_ATTRIBUTE);\n+        y_attribute.setDescription(\"The attribute to use for the y dimension\");\n+        y_attribute.setStringValue(\"\");\n+        parameters.addParameter(y_attribute);\n+\n+        final PluginParameter<SingleChoiceParameterValue> z_attribute = SingleChoiceParameterType.build(SCATTER_3D_Z_ATTRIBUTE);\n+        z_attribute.setName(Z_ATTRIBUTE);\n+        z_attribute.setDescription(\"The attribute to use for the z dimension\");\n+        z_attribute.setStringValue(\"\");\n+        parameters.addParameter(z_attribute);\n+\n+        final PluginParameter<BooleanParameterValue> xLogarithmic = BooleanParameterType.build(SCATTER_3D_X_LOGARITHMIC);\n+        xLogarithmic.setName(X_LOGARITHMIC);\n+        xLogarithmic.setDescription(\"Scale the X axis in Logarithmic Scale\");\n+        xLogarithmic.setBooleanValue(false);\n+        parameters.addParameter(xLogarithmic);\n+\n+        final PluginParameter<BooleanParameterValue> yLogarithmic = BooleanParameterType.build(SCATTER_3D_Y_LOGARITHMIC);\n+        yLogarithmic.setName(Y_LOGARITHMIC);\n+        yLogarithmic.setDescription(\"Scale the Y axis in Logarithmic Scale\");\n+        yLogarithmic.setBooleanValue(false);\n+        parameters.addParameter(yLogarithmic);\n+\n+        final PluginParameter<BooleanParameterValue> zLogarithmic = BooleanParameterType.build(SCATTER_3D_Z_LOGARITHMIC);\n+        zLogarithmic.setName(Z_LOGARITHMIC);\n+        zLogarithmic.setDescription(\"Scale the Z axis in Logarithmic Scale\");\n+        zLogarithmic.setBooleanValue(false);\n+        parameters.addParameter(zLogarithmic);\n+\n+        return parameters;\n+    }\n+\n+    @Override\n+    public void updateParameters(Graph graph, PluginParameters parameters) {\n+\n+        // Get the list of non-default attributes\n+        final ReadableGraph rg = graph.getReadableGraph();\n+        Map<String, Integer> vertexAttributes = null;\n+        try {\n+            vertexAttributes = AttributeUtilities.getVertexAttributes(rg, 0);\n+        } finally {\n+            rg.release();\n+        }\n+\n+        final List<String> keys = new ArrayList<>(vertexAttributes.keySet());\n+\n+        final PluginParameter<SingleChoiceParameterValue> xdimension = (PluginParameter<SingleChoiceParameterValue>) parameters.getParameters().get(SCATTER_3D_X_ATTRIBUTE);", "originalCommit": "e48f25557cabbc3640c40e9aa21f06bc8cbe808b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwODc1Ng==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r414308756", "bodyText": "Done", "author": "CrucisGamma", "createdAt": "2020-04-24T05:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDk2MQ==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r414204961", "bodyText": "I see this is part of the Arranger interface - maybe just drop a comment in here about how it's not relevant to this arrangement.", "author": "cygnus-x-1", "createdAt": "2020-04-24T00:08:15Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {", "originalCommit": "e48f25557cabbc3640c40e9aa21f06bc8cbe808b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNjA0OA==", "url": "https://github.com/constellation-app/constellation/pull/439#discussion_r414206048", "bodyText": "It took me a bit to understand what these dimension attributes were - maybe call them xDimensionAttribute or something to be clearer.", "author": "cygnus-x-1", "createdAt": "2020-04-24T00:11:12Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/scatter/Scatter3dArranger.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.scatter;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.attribute.objects.RawData;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.GraphUtilities;\n+import au.gov.asd.tac.constellation.utilities.color.ConstellationColor;\n+import java.time.ZonedDateTime;\n+import java.util.BitSet;\n+\n+/**\n+ * Arrange the graph in a scatter3d.\n+ *\n+ * @author CrucisGamma\n+ */\n+public class Scatter3dArranger implements Arranger {\n+\n+    private final Scatter3dChoiceParameters params;\n+\n+    /**\n+     * A scatter3d arrangement with default parameters.\n+     */\n+    public Scatter3dArranger() {\n+        this(Scatter3dChoiceParameters.getDefaultParameters());\n+    }\n+\n+    /**\n+     * Construct new ArrangeInScatter3d instance.\n+     *\n+     * @param params Parameters for the arrangement.\n+     */\n+    public Scatter3dArranger(final Scatter3dChoiceParameters params) {\n+        this.params = params;\n+    }\n+\n+    @Override\n+    public void setMaintainMean(final boolean b) {\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+\n+        // Get/set the x,y,z attributes.\n+        final int xAttr = VisualConcept.VertexAttribute.X.ensure(wg);\n+        final int yAttr = VisualConcept.VertexAttribute.Y.ensure(wg);\n+        final int zAttr = VisualConcept.VertexAttribute.Z.ensure(wg);\n+\n+        final String xDimension;\n+        final String yDimension;\n+        final String zDimension;\n+        final boolean xLogarithmic;\n+        final boolean yLogarithmic;\n+        final boolean zLogarithmic;\n+        if (params != null) {\n+            xDimension = params.getXDimension();\n+            yDimension = params.getYDimension();\n+            zDimension = params.getZDimension();\n+            xLogarithmic = params.getLogarithmicX();\n+            yLogarithmic = params.getLogarithmicY();\n+            zLogarithmic = params.getLogarithmicZ();\n+        } else {\n+            return;\n+        }\n+\n+        final int xDim = wg.getAttribute(GraphElementType.VERTEX, xDimension);", "originalCommit": "e48f25557cabbc3640c40e9aa21f06bc8cbe808b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bee8465e2f49208cff36ed26064c7faf03a6e639", "url": "https://github.com/constellation-app/constellation/commit/bee8465e2f49208cff36ed26064c7faf03a6e639", "message": "Fix Logarithmic going to -infinity and NaN bugs.  Update requested changes.", "committedDate": "2020-04-24T06:24:54Z", "type": "commit"}, {"oid": "fea13503004123327eeb3bab5eb22db99b8c2356", "url": "https://github.com/constellation-app/constellation/commit/fea13503004123327eeb3bab5eb22db99b8c2356", "message": "gahhh", "committedDate": "2020-04-24T06:27:06Z", "type": "commit"}]}