{"pr_number": 1989, "pr_title": "DBZ-1818 DBZ-559 Integration with OpenTracing", "pr_createdAt": "2020-12-03T12:57:07Z", "pr_url": "https://github.com/debezium/debezium/pull/1989", "timeline": [{"oid": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "url": "https://github.com/debezium/debezium/commit/9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "message": "DBZ-1818 DBZ-559 Integration with OpenTracing", "committedDate": "2020-12-03T12:55:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjk1MQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536136951", "bodyText": "I'd suggest just tracingSpan. Decouples from any changes by moving to OpenTelemetry later on.", "author": "gunnarmorling", "createdAt": "2020-12-04T14:26:53Z", "path": "debezium-quarkus-outbox/integration-tests/src/test/java/io/debezium/outbox/quarkus/it/OutboxTest.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testOutboxEntityMetamodelExists() throws Exception {\n     public void firedEventGetsPersistedInOutboxTable() {\n         myService.doSomething();\n \n-        Query q = entityManager.createNativeQuery(\"SELECT CAST(id as varchar), aggregateId, aggregateType, type, timestamp, payload FROM OutboxEvent\");\n+        Query q = entityManager.createNativeQuery(\"SELECT CAST(id as varchar), aggregateId, aggregateType, type, timestamp, payload, openTracingSpan FROM OutboxEvent\");", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTk4MA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536149980", "bodyText": "I don't quite understand the advantage of that separate SMT yet, when not using the outbox pattern. Won't the producer interceptor effecitively do the same?\nThat said, assuming for a second the separate SMT is useful, I'd still prefer this to be more unified experience for the user of the outbox routing SMT. I.e. they should have only to use a single SMT (the router) and be done. It may imply some duplication/complexity for ourselves, but it's easier for the user.", "author": "gunnarmorling", "createdAt": "2020-12-04T14:45:30Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1NzAxNw==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536157017", "bodyText": "@gunnarmorling No it won't. The intereceptor will get the message after it is serialized so it is opaque. With SMT we work on logical message so we can extract the Debezium metadata (source info).\nJust for reference check the video you posted on the Jira issue. The complaint was that Debezium data like source table etc are not available in the tracing. This SMT provides it.", "author": "jpechane", "createdAt": "2020-12-04T14:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzEyNA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536167124", "bodyText": "Yes, got it now. That make sense.\nMy point stands though that I'd prefer an outbox user doesn't have to deal with two separate SMTs.", "author": "gunnarmorling", "createdAt": "2020-12-04T15:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MDYyMQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536170621", "bodyText": "@gunnarmorling IMHO I'd just make EventRouter to call ActivateOpenTracingSpan SMT automatically so it will not be necessary to add it to the transforms list.", "author": "jpechane", "createdAt": "2020-12-04T15:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1MDQxNA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537350414", "bodyText": "That sounds great!", "author": "gunnarmorling", "createdAt": "2020-12-07T09:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536235436", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n          \n          \n            \n                        .withDescription(\"The name of the field containing java.util.Properties representation of OpenTracing span.\");\n          \n      \n    \n    \n  \n\n\"notaining\" should be a word though, meaning \"not containing\" ;)", "author": "gunnarmorling", "createdAt": "2020-12-04T16:48:29Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNzM3Mg==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536237372", "bodyText": "I'd also avoid mentioning the Java type; rather \"map\" in OT terms?", "author": "gunnarmorling", "createdAt": "2020-12-04T16:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMjg2OA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537402868", "bodyText": "Not sure I get this part. What's this map? Is it the serialized span context?", "author": "jpkrohling", "createdAt": "2020-12-07T10:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4NDUzNQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537484535", "bodyText": "@jpkrohling Yes, exactly.\n@gunnarmorling That's intentional. We are using java.util.Properties to read and write the data so I want to impose this as an API for applications that would like to support tracing with CDC and don't use our event router. This brings me to the question I forgot to raise one issue. We have io.debezium.transforms.tracing.DebeziumTextMap present in both of outbox and core. How about introducing it into debezium-api. It will be shared by both modules and any 3rd party app that would want to use opentracing could use this API class. Than we could turn the java.util.Properties into an impletmentation detail and hide it from the user. It would require opentracing dependency for debezium-api but we coudl make it safely provided so there want be any risk of dependency bloating.", "author": "jpechane", "createdAt": "2020-12-07T12:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTUzNg==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536235536", "bodyText": "Wrong description.", "author": "gunnarmorling", "createdAt": "2020-12-04T16:48:40Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n+            .withDisplayName(\"OpenTracing Operation Name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_OPERATION_NAME)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjY2NA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536236664", "bodyText": "So is this what's expected by those Kafka producer/consumer interceptors by default?", "author": "gunnarmorling", "createdAt": "2020-12-04T16:50:13Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxOTI3NQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r538319275", "bodyText": "Tha's unrelated to intereceptros but is Debezium specific.", "author": "jpechane", "createdAt": "2020-12-08T12:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjgyNQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r536236825", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n          \n          \n            \n                private static final Field OPENTRACING_OPERATION_NAME = Field.create(\"opentracing.operation.name\")", "author": "gunnarmorling", "createdAt": "2020-12-04T16:50:27Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5OTc4Nw==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537399787", "bodyText": "Did you mean \"span context\" here when you mentioned \"active span\" ?", "author": "jpkrohling", "createdAt": "2020-12-07T10:36:27Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMTY1Mg==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537401652", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n          \n          \n            \n                private static final String DEFAULT_TRACING_SPAN_VALUE = \"tracingspan\";\n          \n      \n    \n    \n  \n\nThis way, you can reuse the same fields in the future when using a different instrumentation (OpenTelemetry). The same comment applies to other changes in this file (and potentially elsewhere).", "author": "jpkrohling", "createdAt": "2020-12-07T10:39:14Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNTQzMw==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537405433", "bodyText": "Heads up: IIRC, the GlobalTracer assumes that there's only one tracer instance per JVM. Check that this is a valid assumption.", "author": "jpkrohling", "createdAt": "2020-12-07T10:44:51Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n+            .withDisplayName(\"OpenTracing Operation Name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_OPERATION_NAME)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private String spanField;\n+    private String operationName;\n+\n+    private SmtManager<R> smtManager;\n+\n+    @Override\n+    public void configure(Map<String, ?> props) {\n+        Configuration config = Configuration.from(props);\n+        final Field.Set configFields = Field.setOf(OPENTRACING_SPAN_FIELD, OPENTRACING_OOPERATION_NAME);\n+\n+        if (!config.validateAndRecord(configFields, LOGGER::error)) {\n+            throw new ConnectException(\"Unable to validate config.\");\n+        }\n+\n+        spanField = config.getString(OPENTRACING_SPAN_FIELD);\n+        operationName = config.getString(OPENTRACING_OOPERATION_NAME);\n+\n+        smtManager = new SmtManager<>(config);\n+    }\n+\n+    @Override\n+    public R apply(R record) {\n+        final Tracer tracer = GlobalTracer.get();", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwOTI2OQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537509269", "bodyText": "@jpkrohling That's exactly the approach and assumption that Kafka OpenTracing interceptors takes so I think we can align with it.", "author": "jpechane", "createdAt": "2020-12-07T13:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNTQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwODY0Nw==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537408647", "bodyText": "Instead of using this as a prefix, you can use this as the component name (component=debezium) and leave the other tag names simpler.\nThis reminds me that there's a semantic conventions doc that you might want to take a look: https://github.com/opentracing/specification/blob/master/semantic_conventions.md#span-tags-table", "author": "jpkrohling", "createdAt": "2020-12-07T10:49:46Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDU1OA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537410558", "bodyText": "What's source in this context? Is this the party that generated the message? There might be a more appropriate tag for this as part of the conventions.", "author": "jpkrohling", "createdAt": "2020-12-07T10:52:45Z", "path": "debezium-core/src/main/java/io/debezium/transforms/tracing/ActivateOpenTracingSpan.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.transforms.tracing;\n+\n+import java.util.Map;\n+\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.connect.connector.ConnectRecord;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.connect.errors.ConnectException;\n+import org.apache.kafka.connect.transforms.Transformation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.debezium.config.Configuration;\n+import io.debezium.config.Field;\n+import io.debezium.data.Envelope;\n+import io.debezium.transforms.SmtManager;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.Tracer.SpanBuilder;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * This SMT enables integration with an OpenTracing system.\n+ * The SMT creates a OpenTracing span and enriches it with metadata from envelope and source info block.<br/>\n+ * It is possible to connect the span to a parent span created by a business application.\n+ * The application then needs to export its OpenTracing active span into a database field.\n+ * The SMT looks for a predefined field name in the {@code after} block\n+ * and when found it extracts the parent span from it.<br>\n+ * \n+ * See {@link EventDispatcher} for example of such implementation.\n+ * \n+ *\n+ * @param <R> the subtype of {@link ConnectRecord} on which this transformation will operate\n+ * @author Jiri Pechanec\n+ */\n+public class ActivateOpenTracingSpan<R extends ConnectRecord<R>> implements Transformation<R> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActivateOpenTracingSpan.class);\n+\n+    private static final String DEFAULT_OPENTRACING_SPAN_VALUE = \"opentracingspan\";\n+    private static final String DEFAULT_OPENTRACING_OPERATION_NAME = \"debezium\";\n+\n+    private static final String TAG_PREFIX = \"debezium.\";\n+\n+    private static final Field OPENTRACING_SPAN_FIELD = Field.create(\"opentracing.span.field\")\n+            .withDisplayName(\"OpenTracing Span Field\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_SPAN_VALUE)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private static final Field OPENTRACING_OOPERATION_NAME = Field.create(\"opentracing.operation.name\")\n+            .withDisplayName(\"OpenTracing Operation Name\")\n+            .withType(ConfigDef.Type.STRING)\n+            .withWidth(ConfigDef.Width.MEDIUM)\n+            .withImportance(ConfigDef.Importance.HIGH)\n+            .withDefault(DEFAULT_OPENTRACING_OPERATION_NAME)\n+            .withDescription(\"The name of the field notaining java.util.Properties representation of OpenTracing span.\");\n+\n+    private String spanField;\n+    private String operationName;\n+\n+    private SmtManager<R> smtManager;\n+\n+    @Override\n+    public void configure(Map<String, ?> props) {\n+        Configuration config = Configuration.from(props);\n+        final Field.Set configFields = Field.setOf(OPENTRACING_SPAN_FIELD, OPENTRACING_OOPERATION_NAME);\n+\n+        if (!config.validateAndRecord(configFields, LOGGER::error)) {\n+            throw new ConnectException(\"Unable to validate config.\");\n+        }\n+\n+        spanField = config.getString(OPENTRACING_SPAN_FIELD);\n+        operationName = config.getString(OPENTRACING_OOPERATION_NAME);\n+\n+        smtManager = new SmtManager<>(config);\n+    }\n+\n+    @Override\n+    public R apply(R record) {\n+        final Tracer tracer = GlobalTracer.get();\n+        if (tracer == null) {\n+            return record;\n+        }\n+\n+        // In case of tombstones or non-CDC events (heartbeats, schema change events),\n+        // leave the value as-is\n+        if (record.value() == null || !smtManager.isValidEnvelope(record)) {\n+            return record;\n+        }\n+\n+        final Struct envelope = (Struct) record.value();\n+        final Struct after = envelope.getStruct(Envelope.FieldName.AFTER);\n+        final Struct source = envelope.getStruct(Envelope.FieldName.SOURCE);\n+\n+        final SpanBuilder spanBuilder = tracer.buildSpan(operationName);\n+        addFieldToSpan(spanBuilder, envelope, Envelope.FieldName.OPERATION, TAG_PREFIX);\n+        addFieldToSpan(spanBuilder, envelope, Envelope.FieldName.TIMESTAMP, TAG_PREFIX);\n+\n+        if (source != null) {\n+            final String sourcePrefix = TAG_PREFIX + \"source.\";", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNzk5NA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537507994", "bodyText": "source describes the postion in the transaction log where the change was recorded. Debezium itself uses field named source in its messages for that puporse so I thought it might fit to align the names.", "author": "jpechane", "createdAt": "2020-12-07T13:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjMyNQ==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537572325", "bodyText": "Alright, I thought it was referring to an external system.", "author": "jpkrohling", "createdAt": "2020-12-07T14:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1Mjk0OA==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r538252948", "bodyText": "In a way, it does. eg. source.gtid refers to the transaction id of the event in the source database where this change event is orginating from. It does not refer to the system that triggered the change in the database originally.", "author": "gunnarmorling", "createdAt": "2020-12-08T11:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxNTE4Ng==", "url": "https://github.com/debezium/debezium/pull/1989#discussion_r537415186", "bodyText": "Unless you configured it differently, activeSpan will use a ThreadLocal scope manager to keep track of the active span, which is fine for typical servlet-based applications (thread per request), but not really suitable for reactive/async applications.", "author": "jpkrohling", "createdAt": "2020-12-07T10:59:55Z", "path": "debezium-quarkus-outbox/runtime/src/main/java/io/debezium/outbox/quarkus/internal/EventDispatcher.java", "diffHunk": "@@ -41,29 +57,53 @@\n     @Inject\n     DebeziumOutboxRuntimeConfig config;\n \n+    @Inject\n+    Tracer tracer;\n+\n     /**\n-     * An event handler for {@link ExportedEvent} events and will be called when the event fires.\n+     * An event handler for {@link ExportedEvent} events and will be called when\n+     * the event fires.\n      *\n-     * @param event the exported event\n+     * @param event\n+     *            the exported event\n      */\n     public void onExportedEvent(@Observes ExportedEvent<?, ?> event) {\n         LOGGER.debug(\"An exported event was found for type {}\", event.getType());\n \n-        // Define the entity map-mode object using property names and values\n-        final HashMap<String, Object> dataMap = new HashMap<>();\n-        dataMap.put(\"aggregateType\", event.getAggregateType());\n-        dataMap.put(\"aggregateId\", event.getAggregateId());\n-        dataMap.put(\"type\", event.getType());\n-        dataMap.put(\"payload\", event.getPayload());\n-        dataMap.put(\"timestamp\", event.getTimestamp());\n-\n-        // Unwrap to Hibernate session and save\n-        Session session = entityManager.unwrap(Session.class);\n-        session.save(OUTBOX_ENTITY_FULLNAME, dataMap);\n-\n-        // Remove entity if the configuration deems doing so, leaving useful for debugging\n-        if (config.removeAfterInsert) {\n-            session.delete(OUTBOX_ENTITY_FULLNAME, dataMap);\n+        final SpanBuilder spanBuilder = tracer.buildSpan(OPENTRACING_OPERATION_NAME);\n+        final DebeziumTextMap exportedSpanData = new DebeziumTextMap();\n+\n+        final Span parentSpan = tracer.activeSpan();", "originalCommit": "9dc42e348fed47b6cbbaeb7d01a88eafece900fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "18e9375d0ff7511acfa35a389c573a41d3968b7f", "url": "https://github.com/debezium/debezium/commit/18e9375d0ff7511acfa35a389c573a41d3968b7f", "message": "DBZ-1818 DBZ-559 Changes after review\n\nOpenTracing not used in names\nSpan for event time\nSpan SMT embedded in outbox\nHandling of missing tracing libs in Connect runtime\nAligned tracing tag names with the standard ones", "committedDate": "2020-12-08T12:36:08Z", "type": "commit"}, {"oid": "18e9375d0ff7511acfa35a389c573a41d3968b7f", "url": "https://github.com/debezium/debezium/commit/18e9375d0ff7511acfa35a389c573a41d3968b7f", "message": "DBZ-1818 DBZ-559 Changes after review\n\nOpenTracing not used in names\nSpan for event time\nSpan SMT embedded in outbox\nHandling of missing tracing libs in Connect runtime\nAligned tracing tag names with the standard ones", "committedDate": "2020-12-08T12:36:08Z", "type": "forcePushed"}]}