{"pr_number": 797, "pr_title": "Enforce Historic Task Authorizations for User Operation Log Query", "pr_createdAt": "2020-04-23T08:18:55Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/797", "timeline": [{"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e910197ac2fec3dfa7c27f3148eab4f547f99c25", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628", "committedDate": "2020-04-24T13:25:03Z", "type": "commit"}, {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e910197ac2fec3dfa7c27f3148eab4f547f99c25", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628", "committedDate": "2020-04-24T13:25:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415714569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    taskId, userId, HistoricTaskPermissions.NONE);\n          \n          \n            \n                    taskId, userId, HistoricTaskPermissions.READ);", "author": "mboskamp", "createdAt": "2020-04-27T10:58:04Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -504,6 +513,223 @@ public void testHistoricProcessInstancePermissionsAuthorizationDisabled() {\n         .containsExactly(processInstanceId, processInstanceId);\n   }\n \n+  public void testCheckNonePermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckReadPermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnHistoricTaskAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY,\n+        userId, ProcessDefinitionPermissions.READ_HISTORY);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactlyInAnyOrder(taskId, null);\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTaskAndNonePermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId,\n+        ProcessDefinitionPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckNoneOnHistoricTaskAndTaskWorkerCategory() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_TASK,\n+        taskId, userId, HistoricTaskPermissions.NONE);", "originalCommit": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNjEyNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415716124", "bodyText": "I am not sure about this change. The set permissions are not in line with your usual method naming pattern. What should be the goal of the test?", "author": "mboskamp", "createdAt": "2020-04-27T11:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ=="}], "type": "inlineReview"}]}