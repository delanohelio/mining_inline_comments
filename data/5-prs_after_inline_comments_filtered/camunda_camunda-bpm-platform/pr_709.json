{"pr_number": 709, "pr_title": "[CAM-11188] feat(engine): make batch jobs deployment-aware", "pr_createdAt": "2020-03-06T13:16:17Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/709", "timeline": [{"oid": "f2bda65795860a02f3950fc470a42dce9d285e85", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f2bda65795860a02f3950fc470a42dce9d285e85", "message": "* make DeleteHistoricProcessInstances deployment-aware", "committedDate": "2020-03-09T10:39:38Z", "type": "forcePushed"}, {"oid": "24b2a16c6ff795236fef9d14af999959471aa836", "url": "https://github.com/camunda/camunda-bpm-platform/commit/24b2a16c6ff795236fef9d14af999959471aa836", "message": "* make SetExternalTaskRetries deployment-aware", "committedDate": "2020-03-12T06:38:31Z", "type": "forcePushed"}, {"oid": "c76724276cacf5a72cf9999490ab62e7740fa34f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/c76724276cacf5a72cf9999490ab62e7740fa34f", "message": "* sort ids by deployment id\n* create deployment id index on ids to hand over to batch entity\n* batch handlers do not need to acquire deployment information anymore\n* run one seed job per deployment id", "committedDate": "2020-03-13T11:42:35Z", "type": "forcePushed"}, {"oid": "f5839fec41c445f1551049e685b2f67bbe209563", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f5839fec41c445f1551049e685b2f67bbe209563", "message": "* sort ids by deployment id\n* create deployment id index on ids to hand over to batch entity\n* batch handlers do not need to acquire deployment information anymore\n* run one seed job per deployment id", "committedDate": "2020-03-13T12:01:48Z", "type": "forcePushed"}, {"oid": "487dd69e93502e135d1b5a511044da0e2487d99d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/487dd69e93502e135d1b5a511044da0e2487d99d", "message": "*ensure backwards compatibility for restart, modify, migrate, delete instances", "committedDate": "2020-03-13T13:12:26Z", "type": "forcePushed"}, {"oid": "5fd52e68ad6d04f2fa3e9a6f5058ba2fbe7b4a23", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5fd52e68ad6d04f2fa3e9a6f5058ba2fbe7b4a23", "message": "* establish direct deployment id mapping queries", "committedDate": "2020-03-16T09:38:36Z", "type": "forcePushed"}, {"oid": "4a09a64c4e0f68c72b382929ebc44e794d7f2aa5", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4a09a64c4e0f68c72b382929ebc44e794d7f2aa5", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* run one seed job per deployment id\n* ensure backwards compatibility for restart, modify, migrate, delete instances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* remove coupling to job handlers from batch monitor handler", "committedDate": "2020-03-17T06:39:09Z", "type": "forcePushed"}, {"oid": "684d456451989a064baba080308f2b3eab75fee3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/684d456451989a064baba080308f2b3eab75fee3", "message": "squash: make jobs query unauthorized as it was previously", "committedDate": "2020-03-17T14:41:39Z", "type": "forcePushed"}, {"oid": "1228fe34979860abfa4252eab62448da927b9749", "url": "https://github.com/camunda/camunda-bpm-platform/commit/1228fe34979860abfa4252eab62448da927b9749", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* run one seed job per deployment id\n* ensure backwards compatibility for restart, modify, migrate, delete instances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* remove coupling to job handlers from batch monitor handler", "committedDate": "2020-03-17T15:11:22Z", "type": "forcePushed"}, {"oid": "6a3bb9ec4d43b4998928ea01d2dabd9c5742bd41", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6a3bb9ec4d43b4998928ea01d2dabd9c5742bd41", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* make seed jobs deployment-aware\n  * pick the first deployment id from the mappings\n  * all seed jobs receive the same deployment id to prevent\n    mixed execution with older and newer engine versions\n* run one seed job per deployment id\n* make seed creation backwards compatible for restart, modify, migrate, delete instances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* remove coupling to job handlers from batch monitor handler", "committedDate": "2020-03-18T08:53:08Z", "type": "forcePushed"}, {"oid": "dec6a8d534802d2c4d86075e3465f97b9ab08f02", "url": "https://github.com/camunda/camunda-bpm-platform/commit/dec6a8d534802d2c4d86075e3465f97b9ab08f02", "message": "squash: documentation and refactorings", "committedDate": "2020-03-18T14:25:07Z", "type": "forcePushed"}, {"oid": "60d482d00f29b6f87afb794b5884b365e0529138", "url": "https://github.com/camunda/camunda-bpm-platform/commit/60d482d00f29b6f87afb794b5884b365e0529138", "message": "* ensure backwards compatibility for DeleteProcessInstances", "committedDate": "2020-03-19T13:16:23Z", "type": "forcePushed"}, {"oid": "646786ae3dc50944acd704ee2e86b5ebdb8ee9d2", "url": "https://github.com/camunda/camunda-bpm-platform/commit/646786ae3dc50944acd704ee2e86b5ebdb8ee9d2", "message": "* ensure backwards compatibility for DeleteProcessInstances, RestartProcessInstances", "committedDate": "2020-03-19T16:32:59Z", "type": "forcePushed"}, {"oid": "f6a4212facc762da9cd871a3f57c7919edc02916", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f6a4212facc762da9cd871a3f57c7919edc02916", "message": "* ensure backwards compatibility for DeleteProcessInstances, RestartProcessInstances", "committedDate": "2020-03-19T16:34:04Z", "type": "forcePushed"}, {"oid": "d529e756d436515eef9cda0ce19c7c8ec37fa8ad", "url": "https://github.com/camunda/camunda-bpm-platform/commit/d529e756d436515eef9cda0ce19c7c8ec37fa8ad", "message": "* ensure backwards compatibility\n  for DeleteProcessInstances, RestartProcessInstances", "committedDate": "2020-03-19T16:39:29Z", "type": "forcePushed"}, {"oid": "151c62d65439bde59f2bbd6d1d45288171bb8a92", "url": "https://github.com/camunda/camunda-bpm-platform/commit/151c62d65439bde59f2bbd6d1d45288171bb8a92", "message": "* ensure backwards compatibility\n  for DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances", "committedDate": "2020-03-20T11:05:16Z", "type": "forcePushed"}, {"oid": "946d3f2dddde910346059973fcb73ec768f7dedc", "url": "https://github.com/camunda/camunda-bpm-platform/commit/946d3f2dddde910346059973fcb73ec768f7dedc", "message": "* ensure backwards compatibility\n  for DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances", "committedDate": "2020-03-20T11:09:28Z", "type": "forcePushed"}, {"oid": "92d6856fef7dd5b0b06cc452dcc485428085882a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/92d6856fef7dd5b0b06cc452dcc485428085882a", "message": "squash: create basic tests for new deployment mapping query", "committedDate": "2020-03-23T10:36:25Z", "type": "forcePushed"}, {"oid": "311a7c9d52aeec3e64a96a13c5de27a82c7fec64", "url": "https://github.com/camunda/camunda-bpm-platform/commit/311a7c9d52aeec3e64a96a13c5de27a82c7fec64", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries in commands\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* make seed jobs deployment-aware\n  * pick the first deployment id from the mappings\n  * all seed jobs receive the same deployment id to prevent\n    mixed seed job execution with older and newer engine versions\n    in a clustered rolling update scenario\n* run one seed job per deployment id\n* ensure backwards compatibility for\n  DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* make UpdateProcessInstancesSuspendState deployment-aware\n* make SetRemovalTimeToHistoricProcessInstances deployment-aware\n* remove coupling to job handlers from batch monitor handler", "committedDate": "2020-03-23T13:28:21Z", "type": "forcePushed"}, {"oid": "15c905eb8f1555bc55a4230180239ad82b22a426", "url": "https://github.com/camunda/camunda-bpm-platform/commit/15c905eb8f1555bc55a4230180239ad82b22a426", "message": "squash: ensure mixed version seed execution by sanitizing mappings", "committedDate": "2020-03-24T14:36:42Z", "type": "forcePushed"}, {"oid": "224280d4fc60b4db37d4184c8698b38fbbddec2e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/224280d4fc60b4db37d4184c8698b38fbbddec2e", "message": "squash: make deployment mapping overall count more accessible", "committedDate": "2020-03-24T15:34:32Z", "type": "forcePushed"}, {"oid": "74fe4603f5fb399c32f82a134abee60560890df8", "url": "https://github.com/camunda/camunda-bpm-platform/commit/74fe4603f5fb399c32f82a134abee60560890df8", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries in commands\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* make seed jobs deployment-aware\n  * pick the first deployment id from the mappings\n  * all seed jobs receive the same deployment id to prevent\n    mixed seed job execution with older and newer engine versions\n    in a clustered rolling update scenario\n* run one seed job per deployment id\n* ensure backwards compatibility for\n  DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* make UpdateProcessInstancesSuspendState deployment-aware\n* make SetRemovalTimeToHistoricProcessInstances deployment-aware\n* remove coupling to job handlers from batch monitor handler", "committedDate": "2020-03-25T07:40:26Z", "type": "forcePushed"}, {"oid": "232f8ad66adbc2deee92ad40c90f6b84b5ae5ddc", "url": "https://github.com/camunda/camunda-bpm-platform/commit/232f8ad66adbc2deee92ad40c90f6b84b5ae5ddc", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries in commands\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* make seed jobs deployment-aware\n  * pick the first deployment id from the mappings\n  * all seed jobs receive the same deployment id to prevent\n    mixed seed job execution with older and newer engine versions\n    in a clustered rolling update scenario\n* run one seed job per deployment id\n* ensure backwards compatibility for\n  DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* make UpdateProcessInstancesSuspendState deployment-aware\n* make SetRemovalTimeToHistoricProcessInstances deployment-aware\n* make DeleteHistoricDecisionInstances deployment-aware\n* make SetRemovalTimeToHistoricDecisionInstances deployment-aware\n* make SetRemovalTimeToHistoricDecisionInstances deployment-aware\n* remove coupling to job handlers from batch monitor handler", "committedDate": "2020-03-25T14:50:48Z", "type": "forcePushed"}, {"oid": "e02452f15ccbf2e5f37507c061bf3bffc70043a9", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e02452f15ccbf2e5f37507c061bf3bffc70043a9", "message": "* make DeleteHistoricDecisionInstances deployment-aware", "committedDate": "2020-03-25T15:48:53Z", "type": "forcePushed"}, {"oid": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "url": "https://github.com/camunda/camunda-bpm-platform/commit/139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "message": "squash: use JSON converter for DeploymentMapping in configurations", "committedDate": "2020-03-27T08:55:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTQ3Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399959477", "bodyText": "This newly introduced API method is not covered by dedicated test cases.", "author": "tasso94", "createdAt": "2020-03-30T06:45:28Z", "path": "engine/src/main/java/org/camunda/bpm/engine/externaltask/ExternalTaskQuery.java", "diffHunk": "@@ -31,6 +32,11 @@\n    */\n   ExternalTaskQuery externalTaskId(String externalTaskId);\n \n+  /**\n+   * Only select external tasks with any of the given ids\n+   */\n+  ExternalTaskQuery externalTaskIdIn(Set<String> externalTaskIds);", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3OTQyMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400079423", "bodyText": "Tests added \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T10:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTg0Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399959846", "bodyText": "Can we try to avoid reorganising imports?", "author": "tasso94", "createdAt": "2020-03-30T06:46:29Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/deletion/DeleteHistoricProcessInstanceBatchConfigurationJsonConverter.java", "diffHunk": "@@ -16,12 +16,15 @@\n  */\n package org.camunda.bpm.engine.impl.batch.deletion;\n \n+import java.util.List;\n+\n import org.camunda.bpm.engine.impl.batch.BatchConfiguration;\n+import org.camunda.bpm.engine.impl.batch.DeploymentMappingJsonConverter;\n+import org.camunda.bpm.engine.impl.batch.DeploymentMappings;\n import org.camunda.bpm.engine.impl.json.JsonObjectConverter;\n import org.camunda.bpm.engine.impl.util.JsonUtil;\n-import com.google.gson.JsonObject;\n \n-import java.util.List;", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3NzkzNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399977937", "bodyText": "I changed my IDE setup a bit to avoid automatic reorganization in more situations, thanks for the hint. Would you like me to revert some of the import reorganizations that already happened in this PR? If that helps with the PR, I can surely do that.", "author": "tmetzke", "createdAt": "2020-03-30T07:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3OTM1NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399979355", "bodyText": "No need to change this within this PR. Let's keep it in mind for the future.", "author": "tasso94", "createdAt": "2020-03-30T07:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4Mzg4OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399983888", "bodyText": "Will do \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T07:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1OTg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MDQzNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399960434", "bodyText": "?", "author": "tasso94", "createdAt": "2020-03-30T06:48:02Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/deletion/DeleteProcessInstanceBatchConfigurationJsonConverter.java", "diffHunk": "@@ -49,9 +54,13 @@ public JsonObject toJsonObject(DeleteProcessInstanceBatchConfiguration configura\n \n   public DeleteProcessInstanceBatchConfiguration toObject(JsonObject json) {\n     DeleteProcessInstanceBatchConfiguration configuration =\n-      new DeleteProcessInstanceBatchConfiguration(readProcessInstanceIds(json), null, JsonUtil.getBoolean(json, SKIP_CUSTOM_LISTENERS), JsonUtil.getBoolean(json, SKIP_SUBPROCESSES), JsonUtil.getBoolean(json, FAIL_IF_NOT_EXISTS));\n+      new DeleteProcessInstanceBatchConfiguration(readProcessInstanceIds(json), readIdMappings(json), null,\n+          JsonUtil.getBoolean(json, SKIP_CUSTOM_LISTENERS), JsonUtil.getBoolean(json, SKIP_SUBPROCESSES),\n+          JsonUtil.getBoolean(json, FAIL_IF_NOT_EXISTS));\n \n     String deleteReason = JsonUtil.getString(json, DELETE_REASON);\n+    deleteReason = JsonUtil.getString(json, DELETE_REASON);", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4NDk4Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399984983", "bodyText": "Don't know what happened there, thanks for noticing, I'll remove that. \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T07:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MDQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MTYwMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399961602", "bodyText": "What is the purpose of having this method separated?", "author": "tasso94", "createdAt": "2020-03-30T06:50:59Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/AbstractBatchJobHandler.java", "diffHunk": "@@ -41,19 +42,80 @@\n \n   @Override\n   public boolean createJobs(BatchEntity batch) {\n-    CommandContext commandContext = Context.getCommandContext();\n-    ByteArrayManager byteArrayManager = commandContext.getByteArrayManager();\n-    JobManager jobManager = commandContext.getJobManager();\n-\n     T configuration = readConfiguration(batch.getConfigurationBytes());\n+    return doCreateJobs(batch, configuration);\n+  }\n+\n+  protected boolean doCreateJobs(BatchEntity batch, T configuration) {", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MDA0MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399980040", "bodyText": "Thanks for the hint, I used that method a long time for backwards compatibility implementations but with a refactoring this was not necessary anymore. I missed to reintegrate that method. I will reintegrate the code and remove the extra method. \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T07:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MjA1Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399962056", "bodyText": "Method is never called.", "author": "tasso94", "createdAt": "2020-03-30T06:52:10Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/AbstractBatchJobHandler.java", "diffHunk": "@@ -137,5 +194,14 @@ public T readConfiguration(byte[] serializedConfiguration) {\n     return getJsonConverterInstance().toObject(JsonUtil.asObject(serializedConfiguration));\n   }\n \n+  protected void createSingleDeploymentIdMappingForDefinition(T configuration, String processDefinitionId) {", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4NzQ1Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399987452", "bodyText": "Another candidate of being missed to be removed after refactoring the backwards compatibility implementation, thanks!", "author": "tmetzke", "createdAt": "2020-03-30T07:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MjA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3Nzc1Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399977757", "bodyText": "Sounds like the documentation of Job#getDeploymentId and not of JobDefinition.", "author": "tasso94", "createdAt": "2020-03-30T07:26:11Z", "path": "engine/src/main/java/org/camunda/bpm/engine/management/JobDefinition.java", "diffHunk": "@@ -97,4 +97,10 @@\n    */\n   String getTenantId();\n \n+  /**\n+   * The id of the deployment this job is related to. In a deployment-aware setup, this", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5NDcyMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399994723", "bodyText": "I will adjust it a bit \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T07:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3Nzc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5MDUxMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399990513", "bodyText": "The parameter name is not very self-explanatory\nAlso check linke 43 & 49", "author": "tasso94", "createdAt": "2020-03-30T07:50:25Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/batch/DeploymentMappings.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.batch;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * List of aggregated information on deployment ids and the number of related resources\n+ */\n+public class DeploymentMappings extends ArrayList<DeploymentMapping> {\n+\n+  private static final long serialVersionUID = -868922966819588407L;\n+\n+  protected int overallIdCount;\n+\n+  public static DeploymentMappings of(DeploymentMapping mapping) {\n+    DeploymentMappings mappings = new DeploymentMappings();\n+    mappings.add(mapping);\n+    return mappings;\n+  }\n+\n+  @Override\n+  public boolean add(DeploymentMapping var1) {", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5NTExMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399995112", "bodyText": "Yeah, that's true, I will give them a bit more thoughtful names \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T07:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5MDUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5NDEyMQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r399994121", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  query.decisionInstanceIdIn(historicDecisionInstanceIds.toArray(new String[historicDecisionInstanceIds.size()]));\n          \n          \n            \n                  query.decisionInstanceIdIn(historicDecisionInstanceIds.toArray(new String[0]));", "author": "tasso94", "createdAt": "2020-03-30T07:57:00Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/dmn/cmd/DeleteHistoricDecisionInstancesBatchCmd.java", "diffHunk": "@@ -53,44 +50,39 @@ public DeleteHistoricDecisionInstancesBatchCmd(List<String> ids,\n \n   @Override\n   public Batch execute(CommandContext commandContext) {\n-    Collection<String> collectedInstanceIds = collectHistoricDecisionInstanceIds();\n-    ensureNotEmpty(BadUserRequestException.class,\n-        \"historicDecisionInstanceIds\", collectedInstanceIds);\n+    BatchElementConfiguration elementConfiguration = collectHistoricDecisionInstanceIds(commandContext);\n+    ensureNotEmpty(BadUserRequestException.class, \"historicDecisionInstanceIds\", elementConfiguration.getIds());\n \n     return new BatchBuilder(commandContext)\n         .type(Batch.TYPE_HISTORIC_DECISION_INSTANCE_DELETION)\n-        .config(getConfiguration(collectedInstanceIds))\n+        .config(getConfiguration(elementConfiguration))\n         .permission(BatchPermissions.CREATE_BATCH_DELETE_DECISION_INSTANCES)\n         .operationLogHandler(this::writeUserOperationLog)\n         .build();\n   }\n \n-  protected List<String> collectHistoricDecisionInstanceIds() {\n+  protected BatchElementConfiguration collectHistoricDecisionInstanceIds(CommandContext commandContext) {\n \n-    Set<String> collectedDecisionInstanceIds = new HashSet<String>();\n+    BatchElementConfiguration elementConfiguration = new BatchElementConfiguration();\n \n-    List<String> decisionInstanceIds = getHistoricDecisionInstanceIds();\n-    if (decisionInstanceIds != null) {\n-      collectedDecisionInstanceIds.addAll(decisionInstanceIds);\n+    if (!CollectionUtil.isEmpty(historicDecisionInstanceIds)) {\n+      HistoricDecisionInstanceQueryImpl query = new HistoricDecisionInstanceQueryImpl();\n+      query.decisionInstanceIdIn(historicDecisionInstanceIds.toArray(new String[historicDecisionInstanceIds.size()]));", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjEyMQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400002121", "bodyText": "Thanks for that learning (I just read https://shipilev.net/blog/2016/arrays-wisdom-ancients/#_empty_array_instantiation)!", "author": "tmetzke", "createdAt": "2020-03-30T08:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk5NDEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjQ5Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400002492", "bodyText": "Modifier private is not allowed for fields and methods. Please also see line 44 & 117", "author": "tasso94", "createdAt": "2020-03-30T08:11:35Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ImmutablePair.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.util;\n+\n+import java.io.Serializable;\n+import java.util.Map.Entry;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Immutable representation of a 2-tuple of elements.\n+ *\n+ * Although the implementation is immutable, there is no restriction on the\n+ * objects that may be stored. If mutable objects are stored in the pair, then\n+ * the pair itself effectively becomes mutable.\n+ *\n+ * ThreadSafe if both paired objects are thread-safe\n+ *\n+ * @param <L>\n+ *          the type of the left element\n+ * @param <R>\n+ *          the type of the right element\n+ */\n+public class ImmutablePair<L, R> implements Entry<L, R>, Serializable, Comparable<ImmutablePair<L, R>> {\n+\n+  /** Serialization version */\n+  private static final long serialVersionUID = -7043970803192830955L;\n+\n+  private L left;", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNjcxNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400006717", "bodyText": "It's fine for the serialVersionUID, right?", "author": "tmetzke", "createdAt": "2020-03-30T08:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNzg3OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400007879", "bodyText": "Yes, as far as I know it's not possible to override static fields anyways.", "author": "tasso94", "createdAt": "2020-03-30T08:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNTY4MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400005681", "bodyText": "Let's cover this public API by a dedicated test case. Please also do for line 46.", "author": "tasso94", "createdAt": "2020-03-30T08:16:56Z", "path": "engine/src/main/java/org/camunda/bpm/engine/runtime/JobQuery.java", "diffHunk": "@@ -32,12 +33,18 @@\n   /** Only select jobs with the given id */\n   JobQuery jobId(String jobId);\n \n+  /** Only select jobs whose id is in the given set of ids */\n+  JobQuery jobIds(Set<String> ids);", "originalCommit": "139ded1e3c1ef981dd5aa1b8a34346461e3f0476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3OTYwMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400079602", "bodyText": "Tests added \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T10:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMDE5OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400010198", "bodyText": "Why did this change?", "author": "tasso94", "createdAt": "2020-03-30T08:24:49Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/batch/DeleteHistoricProcessInstancesBatchAuthorizationTest.java", "diffHunk": "@@ -84,7 +84,7 @@ public void cleanBatch() {\n   public static Collection<AuthorizationScenario[]> scenarios() {\n     return AuthorizationTestRule.asParameters(\n         AuthorizationScenarioWithCount.scenario()\n-            .withCount(2L)\n+            .withCount(1L)", "originalCommit": "dbfad7efba47fff3c24276b98660c37434fc2fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjg2Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400022866", "bodyText": "The historic instances are from different deployments. This count is only used in the test case testWithTwoInvocationsProcessInstancesList. Previously, both instances were processed in the same batch job execution in DeleteHistoricProcessInstancesCmd. In its execute method, both instances were checked for authorization. One of them would not pass and the whole batch job would fail, so no historic instance would be deleted (therefore still 2 instances would exist in the end).\nWith the new implementation, instances of different deployments will not be processed together in one batch job anymore. Therefore, 1 instance will be deleted now and one not.\nI actually consider this the proper implementation for this case now.\nNot sure if we need to document this but I would consider this a bug fix actually.", "author": "tmetzke", "createdAt": "2020-03-30T08:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMDE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNTI3Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400025272", "bodyText": "I see! Thanks \ud83d\udc4d", "author": "tasso94", "createdAt": "2020-03-30T08:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMDE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400027208", "bodyText": "Another request I would like to raise is to always expose newly added API getters to the REST API and cover it with REST API reference docs. I think this should be raised in the team meeting as well to discuss whether we would like to make it a general rule.", "author": "tasso94", "createdAt": "2020-03-30T08:52:37Z", "path": "engine/src/main/java/org/camunda/bpm/engine/management/JobDefinition.java", "diffHunk": "@@ -97,4 +97,10 @@\n    */\n   String getTenantId();\n \n+  /**\n+   * The id of the deployment this job definition is related to. In a deployment-aware setup,\n+   * this leads to all jobs of the same definition being executed on the same node.\n+   */\n+  String getDeploymentId();", "originalCommit": "dbfad7efba47fff3c24276b98660c37434fc2fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMDI4NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400030285", "bodyText": "In general I totally agree, but I guess it also depends on the task itself in which this new API is created. If, as in this case here, it is simply a means to make progress on a different topic than adding the getter itself, I would rather vote for creating a follow-up ticket to add it to the REST API (which I haven't done here yet either though).", "author": "tmetzke", "createdAt": "2020-03-30T08:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMTY2NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400031665", "bodyText": "I simply have the concern that this rule otherwise might blow up the original topic too much.", "author": "tmetzke", "createdAt": "2020-03-30T08:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzMjE4NQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400032185", "bodyText": "I think it could make sense to have a general rule since it's super easy and fast to achieve it for the one implementing and brings much value for users. How a developer achieves it in the end (e. g. with a follow-up ticket) is a means of individual project management and should not be regulated.", "author": "tasso94", "createdAt": "2020-03-30T09:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MDA1Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400040053", "bodyText": "Totally agree \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-03-30T09:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4MjAxOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400082018", "bodyText": "Added it to the DTO", "author": "tmetzke", "createdAt": "2020-03-30T10:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwMzI4MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400103280", "bodyText": "Let's add a test & docs to the REST API reference", "author": "tasso94", "createdAt": "2020-03-30T10:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExODQ3Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400118473", "bodyText": "Tests added, documentation will follow \ud83d\ude03", "author": "tmetzke", "createdAt": "2020-03-30T11:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2MjMyNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/709#discussion_r400162327", "bodyText": "Documentation in camunda/camunda-docs-manual#501", "author": "tmetzke", "createdAt": "2020-03-30T12:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzIwOA=="}], "type": "inlineReview"}, {"oid": "1c20c1157d3dd647e64fc4d04aaf299fdcfd7826", "url": "https://github.com/camunda/camunda-bpm-platform/commit/1c20c1157d3dd647e64fc4d04aaf299fdcfd7826", "message": "squash: add tests for deploymentId in JobDefinitionDto", "committedDate": "2020-03-30T12:48:57Z", "type": "forcePushed"}, {"oid": "596b67719f344f5dd8f0286b024a9ec6411f8296", "url": "https://github.com/camunda/camunda-bpm-platform/commit/596b67719f344f5dd8f0286b024a9ec6411f8296", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries in commands\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* run one seed job per deployment id\n* make seed jobs deployment-aware\n  * pick the first deployment id from the mappings\n  * all seed jobs receive the same deployment id to prevent\n    mixed seed job execution with older and newer engine versions\n    in a clustered rolling update scenario\n* remove coupling to job handlers from batch monitor handler\n* ensure backwards compatibility for\n  DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* make UpdateProcessInstancesSuspendState deployment-aware\n* make SetRemovalTimeToHistoricProcessInstances deployment-aware\n* make SetRemovalTimeToHistoricDecisionInstances deployment-aware\n* make DeleteHistoricDecisionInstances deployment-aware\n\nrelated to CAM-11188", "committedDate": "2020-03-31T08:12:18Z", "type": "commit"}, {"oid": "596b67719f344f5dd8f0286b024a9ec6411f8296", "url": "https://github.com/camunda/camunda-bpm-platform/commit/596b67719f344f5dd8f0286b024a9ec6411f8296", "message": "feat(engine): make batch jobs deployment-aware\n\n* generalize deployment-awareness in batch jobs creation\n  * establish direct deployment id mapping queries in commands\n  * sort ids by deployment id\n  * create deployment id index on ids to hand over to batch entity\n  * batch handlers do not need to acquire deployment information anymore\n* run one seed job per deployment id\n* make seed jobs deployment-aware\n  * pick the first deployment id from the mappings\n  * all seed jobs receive the same deployment id to prevent\n    mixed seed job execution with older and newer engine versions\n    in a clustered rolling update scenario\n* remove coupling to job handlers from batch monitor handler\n* ensure backwards compatibility for\n  DeleteProcessInstances, RestartProcessInstances,\n  ModifyProcessInstances, MigrateProcessInstances\n* make DeleteHistoricProcessInstances deployment-aware\n* make SetJobRetries deployment-aware\n* make SetExternalTaskRetries deployment-aware\n* make UpdateProcessInstancesSuspendState deployment-aware\n* make SetRemovalTimeToHistoricProcessInstances deployment-aware\n* make SetRemovalTimeToHistoricDecisionInstances deployment-aware\n* make DeleteHistoricDecisionInstances deployment-aware\n\nrelated to CAM-11188", "committedDate": "2020-03-31T08:12:18Z", "type": "forcePushed"}]}