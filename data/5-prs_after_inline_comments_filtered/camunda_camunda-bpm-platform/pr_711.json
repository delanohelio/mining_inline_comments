{"pr_number": 711, "pr_title": "CAM-8724: fix(engine): timer jobs are executed on time", "pr_createdAt": "2020-03-10T17:35:45Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/711", "timeline": [{"oid": "cb006c0142ec4f79d8f5e6be1c76e77f975d8e6d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/cb006c0142ec4f79d8f5e6be1c76e77f975d8e6d", "message": "fix(engine): timer jobs are executed on time\n\n* Fix bug that executes Timer jobs whose DueDate is earlier than the sum of the Current Time and the JobExecutor wait time.\n\nRelated to CAM-8724", "committedDate": "2020-03-10T17:37:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNjI4Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r390806286", "bodyText": "Should probably be <=, or?", "author": "ThorbenLindhauer", "createdAt": "2020-03-11T08:23:20Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -103,12 +103,7 @@ public void reschedule(JobEntity jobEntity, Date newDuedate) {\n   }\n \n   private void hintJobExecutorIfNeeded(JobEntity jobEntity, Date duedate) {\n-    // Check if this timer fires before the next time the job executor will check for new timers to fire.\n-    // This is highly unlikely because normally waitTimeInMillis is 5000 (5 seconds)\n-    // and timers are usually set further in the future\n-    JobExecutor jobExecutor = Context.getProcessEngineConfiguration().getJobExecutor();\n-    int waitTimeInMillis = jobExecutor.getWaitTimeInMillis();\n-    if (duedate.getTime() < (ClockUtil.getCurrentTime().getTime() + waitTimeInMillis)) {\n+    if (duedate.getTime() < ClockUtil.getCurrentTime().getTime()) {", "originalCommit": "a378e3e9bf4a6f88630b0d71184e344ad44b787b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5ODE4NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r390898184", "bodyText": "Yes, correct! There are some failing tests and I'll include this with the fix.", "author": "koevskinikola", "createdAt": "2020-03-11T11:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNjI4Ng=="}], "type": "inlineReview"}, {"oid": "74e4b4fb3c6b8a4b7500736c62a6908d0eafa252", "url": "https://github.com/camunda/camunda-bpm-platform/commit/74e4b4fb3c6b8a4b7500736c62a6908d0eafa252", "message": "fix(engine): timer jobs are executed on time\n\n* Fix bug that executes Timer jobs whose DueDate is earlier than the sum of the Current Time and the JobExecutor wait time. Only Timer jobs that have a DueDate past, or equal, to the current time, should be executed immediately.\n* Refactor test to JUnit4.\n\nRelated to CAM-8724", "committedDate": "2020-03-11T16:50:41Z", "type": "commit"}, {"oid": "74e4b4fb3c6b8a4b7500736c62a6908d0eafa252", "url": "https://github.com/camunda/camunda-bpm-platform/commit/74e4b4fb3c6b8a4b7500736c62a6908d0eafa252", "message": "fix(engine): timer jobs are executed on time\n\n* Fix bug that executes Timer jobs whose DueDate is earlier than the sum of the Current Time and the JobExecutor wait time. Only Timer jobs that have a DueDate past, or equal, to the current time, should be executed immediately.\n* Refactor test to JUnit4.\n\nRelated to CAM-8724", "committedDate": "2020-03-11T16:50:41Z", "type": "forcePushed"}, {"oid": "81fb7a0297e063029d6482108f9327ec76d8cae3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/81fb7a0297e063029d6482108f9327ec76d8cae3", "message": "squash: make guard more robust", "committedDate": "2020-03-16T16:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTM5Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r393151393", "bodyText": "schedule job for the next processor: what exactly do you mean here?", "author": "ThorbenLindhauer", "createdAt": "2020-03-16T16:28:05Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -132,6 +153,7 @@ protected void hintJobExecutor(JobEntity job) {\n       job.setLockOwner(jobExecutor.getLockOwner());\n       transactionListener = new ExclusiveJobAddedNotification(job.getId(), jobExecutorContext);\n     } else {\n+      // schedule job for the next processor and reset Acquisition strategy", "originalCommit": "74e4b4fb3c6b8a4b7500736c62a6908d0eafa252", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MzE0Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r393483143", "bodyText": "I was trying to use the same terminology as the one on line 147 (lock job & add to the queue of the current processor) so that it's clear in the future that the else block, with the MessageAddedNotification will not result in the immediate execution of a Job, but will reset the (Backoff) acquisition strategy to 0 wait time. This will result in the above job being executed on the next run.", "author": "koevskinikola", "createdAt": "2020-03-17T07:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5OTM0NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r393499344", "bodyText": "@ThorbenLindhauer please check the comment now.", "author": "koevskinikola", "createdAt": "2020-03-17T08:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTM5Mw=="}], "type": "inlineReview"}, {"oid": "5a873b4a78c5de4aacc993956aba390fd4f8aca7", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5a873b4a78c5de4aacc993956aba390fd4f8aca7", "message": "SQUASH ME: rephrase comment for JobExecutor notification", "committedDate": "2020-03-17T08:00:50Z", "type": "commit"}]}