{"pr_number": 794, "pr_title": "Enforce Historic Process Instance Authorizations for more queries", "pr_createdAt": "2020-04-21T06:46:54Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/794", "timeline": [{"oid": "ab6cb737922097363561dcf9ce9f0ebf1d35b4e3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ab6cb737922097363561dcf9ce9f0ebf1d35b4e3", "message": "fix(engine): move javadocs to historic activity instance query\n\nrelated to CAM-11784", "committedDate": "2020-04-21T14:59:36Z", "type": "forcePushed"}, {"oid": "d2a8203828d93f616961b1c5b30bae2b8b731aa8", "url": "https://github.com/camunda/camunda-bpm-platform/commit/d2a8203828d93f616961b1c5b30bae2b8b731aa8", "message": "fix(engine): preserve hist.proc.inst.query auth checks legacy behavior\n\nrelated to CAM-11791", "committedDate": "2020-04-22T11:32:16Z", "type": "forcePushed"}, {"oid": "917af46d0d9b1fc48288e1a360f3b91c35140ecc", "url": "https://github.com/camunda/camunda-bpm-platform/commit/917af46d0d9b1fc48288e1a360f3b91c35140ecc", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796", "committedDate": "2020-04-22T16:16:08Z", "type": "forcePushed"}, {"oid": "a5f3db69a55c25b289aac61a5d4899d4d717ffee", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a5f3db69a55c25b289aac61a5d4899d4d717ffee", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796", "committedDate": "2020-04-23T06:48:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Njk2Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414386967", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);", "author": "mboskamp", "createdAt": "2020-04-24T08:19:11Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricIncidentAuthorizationTest.java", "diffHunk": "@@ -209,6 +214,102 @@ public void testSimpleQueryWithMultiple() {\n     verifyQueryResults(query, 1);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);", "originalCommit": "fc6ebe5c4de42684ddf2d7f9ebbffc2e179bde14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1ODk5OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414558998", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-24T13:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Njk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMDcxMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414400712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);\n          \n      \n    \n    \n  \n\nBoth works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.", "author": "mboskamp", "createdAt": "2020-04-24T08:40:37Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricExternalTaskLogAuthorizationTest.java", "diffHunk": "@@ -217,6 +222,101 @@ public void testGetErrorDetailsWithHistoryReadPermissionOnProcessAnyDefinition()\n     assertEquals(ERROR_DETAILS, stacktrace);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);", "originalCommit": "caa5f9f074f968892e9ec7838d11b2fa242b7da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1OTA1Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414559056", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-24T13:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMDcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNDY4MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414404681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);\n          \n      \n    \n    \n  \n\nBoth works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.", "author": "mboskamp", "createdAt": "2020-04-24T08:46:35Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -338,7 +344,165 @@ public void testQuerySetAssigneeTaskUserOperationLogWithMultiple() {\n     // then\n     verifyQueryResults(query, 2);\n   }\n-  \n+\n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId, processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);", "originalCommit": "19a52e988578dd362bd48cb2a6147becec68a806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1OTE0MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414559141", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-04-24T13:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTIyNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414529224", "bodyText": "I think it's not good practise to have multiple methods with an @Before annotation as the order of execution is not guaranteed. This is not so relevant in this case, but for good practise maybe consider moving everything in one method.", "author": "mboskamp", "createdAt": "2020-04-24T12:15:05Z", "path": "qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/histperms/HistoricInstancePermissionsAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.qa.upgrade.scenarios7130.histperms;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.camunda.bpm.engine.AuthorizationService;\n+import org.camunda.bpm.engine.HistoryService;\n+import org.camunda.bpm.engine.IdentityService;\n+import org.camunda.bpm.engine.authorization.Authorization;\n+import org.camunda.bpm.engine.authorization.HistoricProcessInstancePermissions;\n+import org.camunda.bpm.engine.authorization.Resources;\n+import org.camunda.bpm.engine.history.HistoricProcessInstance;\n+import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;\n+import org.camunda.bpm.engine.history.UserOperationLogQuery;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.test.ProcessEngineRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class HistoricInstancePermissionsAuthorizationTest {\n+\n+  protected final String BUSINESS_KEY = \"HistPermsWithoutProcDefKeyScenarioBusinessKey\";\n+\n+  protected final String USER_ID = getClass().getName() + \"-User\";\n+\n+  @Rule\n+  public ProcessEngineRule engineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+\n+  protected HistoryService historyService;\n+  protected AuthorizationService authorizationService;\n+  protected IdentityService identityService;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void assignServices() {\n+    historyService = engineRule.getHistoryService();\n+    authorizationService = engineRule.getAuthorizationService();\n+    identityService = engineRule.getIdentityService();\n+\n+    engineConfiguration = engineRule.getProcessEngineConfiguration();\n+  }\n+\n+  @Before", "originalCommit": "a5f3db69a55c25b289aac61a5d4899d4d717ffee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1ODg3OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414558879", "bodyText": "Since the order of the execution doesn't matter here, let's keep it as it is. I think it increases readability.", "author": "tasso94", "createdAt": "2020-04-24T13:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTIyNA=="}], "type": "inlineReview"}, {"oid": "ade7ef1f9d632717232d6e2a696954580bfc297e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ade7ef1f9d632717232d6e2a696954580bfc297e", "message": "feat(engine): enforce hist. process auth. for historic incident query\n\nrelated to CAM-11643", "committedDate": "2020-04-24T13:09:03Z", "type": "commit"}, {"oid": "2422458e3edde99047b29696988df95b2c2e3aad", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2422458e3edde99047b29696988df95b2c2e3aad", "message": "feat(engine): enforce hist. process auth. for job log query\n\nrelated to CAM-11644", "committedDate": "2020-04-24T13:09:03Z", "type": "commit"}, {"oid": "50d19af46e4824f9d3165a496c6369fea6e79277", "url": "https://github.com/camunda/camunda-bpm-platform/commit/50d19af46e4824f9d3165a496c6369fea6e79277", "message": "feat(engine): enforce hist. process auth. for ext. task log query\n\nrelated to CAM-11645", "committedDate": "2020-04-24T13:09:04Z", "type": "commit"}, {"oid": "2d9b6782acd03893fc149fc9c5d42ff6b82df871", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2d9b6782acd03893fc149fc9c5d42ff6b82df871", "message": "feat(engine): enforce hist. process auth. for op log query\n\nrelated to CAM-11636", "committedDate": "2020-04-24T13:09:04Z", "type": "commit"}, {"oid": "f757a536e0309e838ad319854379f3d1e992aeae", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f757a536e0309e838ad319854379f3d1e992aeae", "message": "fix(engine): move javadocs to historic activity instance query\n\nrelated to CAM-11784", "committedDate": "2020-04-24T13:09:04Z", "type": "commit"}, {"oid": "904f88c5397d2f7be570e30b7edb584a19cb1bf1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/904f88c5397d2f7be570e30b7edb584a19cb1bf1", "message": "fix(engine): preserve hist.proc.inst.query auth checks legacy behavior\n\nrelated to CAM-11791", "committedDate": "2020-04-24T13:09:04Z", "type": "commit"}, {"oid": "337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "url": "https://github.com/camunda/camunda-bpm-platform/commit/337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796", "committedDate": "2020-04-24T13:09:04Z", "type": "commit"}, {"oid": "337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "url": "https://github.com/camunda/camunda-bpm-platform/commit/337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796", "committedDate": "2020-04-24T13:09:04Z", "type": "forcePushed"}]}