{"pr_number": 608, "pr_title": "[CAM-10748] feat(engine-cdi): add JobExecutor using managed threads", "pr_createdAt": "2020-01-06T09:08:46Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/608", "timeline": [{"oid": "47233e25723d79177ffd8b3023dfd2101a8fe26c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/47233e25723d79177ffd8b3023dfd2101a8fe26c", "message": "feat(engine-cdi): add JobExecutor using managed threads", "committedDate": "2020-01-06T11:43:27Z", "type": "forcePushed"}, {"oid": "2ee862babcfa05ea6a84ed325322c40e9639f7f7", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2ee862babcfa05ea6a84ed325322c40e9639f7f7", "message": "chore(engine-cdi): simplify ManagedJobExecutor\n\n* only use the managed executor service", "committedDate": "2020-01-06T13:18:37Z", "type": "forcePushed"}, {"oid": "6c5f8d03048efb7051a10ff0e0dc0894535cda9a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6c5f8d03048efb7051a10ff0e0dc0894535cda9a", "message": "chore(engine-cdi): simplify ManagedJobExecutor\n\n* only use the managed executor service", "committedDate": "2020-01-17T10:48:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNzc0Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/608#discussion_r378827747", "bodyText": "As pointed out in #533 , I think there should be some handling here.", "author": "tiesebarrell", "createdAt": "2020-02-13T12:23:28Z", "path": "engine-cdi/src/main/java/org/camunda/bpm/engine/cdi/impl/ManagedJobExecutor.java", "diffHunk": "@@ -18,43 +18,49 @@\n \n import java.util.List;\n import java.util.concurrent.RejectedExecutionException;\n+\n import javax.enterprise.concurrent.ManagedExecutorService;\n-import javax.enterprise.concurrent.ManagedThreadFactory;\n+import org.camunda.bpm.engine.ProcessEngineException;\n import org.camunda.bpm.engine.impl.ProcessEngineImpl;\n import org.camunda.bpm.engine.impl.jobexecutor.JobExecutor;\n-import org.camunda.bpm.engine.impl.jobexecutor.ThreadPoolJobExecutor;\n \n /**\n- * {@link JobExecutor} implementation that utilises an application server's managed thread pool to acquire and execute jobs.\n+ * {@link JobExecutor} implementation that utilises an application server's\n+ * managed thread pool to acquire and execute jobs.\n  */\n-public class ManagedJobExecutor extends ThreadPoolJobExecutor {\n+public class ManagedJobExecutor extends JobExecutor {\n \n-    private ManagedExecutorService managedExecutorService;\n-    private ManagedThreadFactory managedThreadFactory;\n+  private ManagedExecutorService managedExecutorService;\n \n-    /**\n-     * Constructs a new ManagedJobExecutor with the provided {@link ManagedExecutorService} and {@link ManagedThreadFactory}.\n-     */\n-    public ManagedJobExecutor(final ManagedExecutorService managedExecutorService, final ManagedThreadFactory managedThreadFactory) {\n-        this.managedExecutorService = managedExecutorService;\n-        this.managedThreadFactory = managedThreadFactory;\n-    }\n+  /**\n+   * Constructs a new ManagedJobExecutor with the provided\n+   * {@link ManagedExecutorService}\n+   */\n+  public ManagedJobExecutor(final ManagedExecutorService managedExecutorService) {\n+    this.managedExecutorService = managedExecutorService;\n+  }\n \n-    @Override\n-    public void executeJobs(List<String> jobIds, ProcessEngineImpl processEngine) {\n-        try {\n-            managedExecutorService.execute(getExecuteJobsRunnable(jobIds, processEngine));\n-        } catch (RejectedExecutionException e) {\n-            logRejectedExecution(processEngine, jobIds.size());\n-            rejectedJobsHandler.jobsRejected(jobIds, processEngine, this);\n-        }\n+  @Override\n+  public void executeJobs(List<String> jobIds, ProcessEngineImpl processEngine) {\n+    try {\n+      managedExecutorService.execute(getExecuteJobsRunnable(jobIds, processEngine));\n+    } catch (RejectedExecutionException e) {\n+      logRejectedExecution(processEngine, jobIds.size());\n+      rejectedJobsHandler.jobsRejected(jobIds, processEngine, this);\n     }\n+  }\n \n-    @Override\n-    protected void startJobAcquisitionThread() {\n-        if (jobAcquisitionThread == null) {\n-            jobAcquisitionThread = managedThreadFactory.newThread(acquireJobsRunnable);\n-            jobAcquisitionThread.start();\n-        }\n+  @Override\n+  protected void startExecutingJobs() {\n+    try {\n+      managedExecutorService.execute(acquireJobsRunnable);\n+    } catch (Exception e) {\n+      throw new ProcessEngineException(\"Could not schedule AcquireJobsRunnable for execution.\", e);\n     }\n+  }\n+\n+  @Override\n+  protected void stopExecutingJobs() {\n+    // nothing to do", "originalCommit": "6c5f8d03048efb7051a10ff0e0dc0894535cda9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMjQ0MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/608#discussion_r379302440", "bodyText": "That was my first instinct as well. As far as I can tell, this is however not necessary.\nI understand the lifecycle as follows:\n\nthe JobExecutor is started via JobExecutor#start\n\nthe acquisition runnable is created but not started\nManagedJobExecutor#startExecutingJobs is called and instructs the ManagedExecutorService to start the acquisition runnable (it allocates a Thread for that, it keeps on running until we stop it)\n\n\nthe JobExecutor is stopped via JobExecutor#shutdown\n\nthe acquisition runnable is stopped and thereby marked as interrupted in a flag\nthe SequentialJobAcquisitionRunnable#runAcquisition loop running in SequentialJobAcquisitionRunnable#run is interrupted, the acquisition runnable stops\nthe ManagedExecutorService frees the Thread it used for the acquisition runnable because that runnable stopped and returns the Thread to its pool of idle Threads\n\n\n\nIf I understand that lifecycle correctly, there shouldn't be anything left for us to do here. Please correct me if I missed something here.", "author": "tmetzke", "createdAt": "2020-02-14T08:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNTAzMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/608#discussion_r380905030", "bodyText": "Yes, I see what you mean. It seems that from the behaviour of the shutdown of the JobExecutor itself , the runnable is already stopped, so there is no need to implement anything specific for the stopExecutingJobs method.", "author": "tiesebarrell", "createdAt": "2020-02-18T20:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwNjQyNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/608#discussion_r381106426", "bodyText": "Thanks for having a look at this \ud83d\udc4d", "author": "tmetzke", "createdAt": "2020-02-19T06:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNzc0Nw=="}], "type": "inlineReview"}, {"oid": "d54a54c32b6e3c9f4d2f915b15b56bc6c86339ae", "url": "https://github.com/camunda/camunda-bpm-platform/commit/d54a54c32b6e3c9f4d2f915b15b56bc6c86339ae", "message": "chore(engine-cdi): simplify ManagedJobExecutor\n\n* only use the managed executor service", "committedDate": "2020-02-19T08:23:22Z", "type": "forcePushed"}, {"oid": "9b4ba7cc477332382d631953b93db5ce0664e3e3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/9b4ba7cc477332382d631953b93db5ce0664e3e3", "message": "feat(engine-cdi): add JobExecutor using managed threads\n\nrelated to CAM-10748", "committedDate": "2020-02-19T12:33:23Z", "type": "commit"}, {"oid": "9b4ba7cc477332382d631953b93db5ce0664e3e3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/9b4ba7cc477332382d631953b93db5ce0664e3e3", "message": "feat(engine-cdi): add JobExecutor using managed threads\n\nrelated to CAM-10748", "committedDate": "2020-02-19T12:33:23Z", "type": "forcePushed"}]}