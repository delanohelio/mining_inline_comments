{"pr_number": 6341, "pr_title": "[TypeScript] Rewritten TypeScript client generator supporting fetch & jquery", "pr_createdAt": "2020-05-17T15:07:05Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6341", "timeline": [{"oid": "06d9556f13384ebf6eede6e0a38a7dd48cbe26eb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/06d9556f13384ebf6eede6e0a38a7dd48cbe26eb", "message": "Added http module draft", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "05f64c673221299f1a6bef545747f01639b87a42", "url": "https://github.com/OpenAPITools/openapi-generator/commit/05f64c673221299f1a6bef545747f01639b87a42", "message": "Added generic enum", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "6638cef37a9a859bec2bb418ac68052c1d138256", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6638cef37a9a859bec2bb418ac68052c1d138256", "message": "Modified http lib, added config & middleware definition to ts-fetch", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "1a31c48ceb6c819e25e99139e33f2ae2cd3dc698", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1a31c48ceb6c819e25e99139e33f2ae2cd3dc698", "message": "Added model generation with imports", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "1cc6fb0421e13ecaef788d95f993a3980ff96071", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1cc6fb0421e13ecaef788d95f993a3980ff96071", "message": "Added auth module", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "276d7d47e57cb75786d33b55b07c5e44b3c8d95c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/276d7d47e57cb75786d33b55b07c5e44b3c8d95c", "message": "Added servers", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "b89646a223f025ec615d8985b259df257b042fc1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b89646a223f025ec615d8985b259df257b042fc1", "message": "Added sample for typescript client", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "6b2a2289f28b34c0f210e175d072751175017d31", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6b2a2289f28b34c0f210e175d072751175017d31", "message": "WIP: Models & API", "committedDate": "2020-04-26T22:07:20Z", "type": "commit"}, {"oid": "d4fa8c7f721a098b4d594484a304915b77f476b7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d4fa8c7f721a098b4d594484a304915b77f476b7", "message": "Updated auth", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "f5b062957d3bb80212176ec297ee6b696e7e27ba", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f5b062957d3bb80212176ec297ee6b696e7e27ba", "message": "WIP: api modeling", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "a8ec86611752afd2139f39d3d9fc1e3e335be039", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a8ec86611752afd2139f39d3d9fc1e3e335be039", "message": "Implemented RequestFactory and Processor completely", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "e40d94984f68cba684c1ca4d7cbe611fd51de012", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e40d94984f68cba684c1ca4d7cbe611fd51de012", "message": "Implemented fetch client", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "a7de49110ea3413b46e21779b30f8d28852e9b14", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7de49110ea3413b46e21779b30f8d28852e9b14", "message": "Ignore dist folder in typescript client sample", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "61a1bbdabec52d783fa75a4eabc1756b5a033acd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/61a1bbdabec52d783fa75a4eabc1756b5a033acd", "message": "Added middleware to fetch", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "a6560e553037f538f7a9828d3db807d32dd793c3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a6560e553037f538f7a9828d3db807d32dd793c3", "message": "Restructured TypeScript generator", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "7909cbaec7f7f7f5172524400a61a740859884a8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7909cbaec7f7f7f5172524400a61a740859884a8", "message": "Reverted: http library.send returns string again", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "3eaa5e54efb514907267614c958ed3c5ce6d180b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3eaa5e54efb514907267614c958ed3c5ce6d180b", "message": "Removed TODOs", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "4c11314a7b35bfc8b004da305426a32771a2f0eb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4c11314a7b35bfc8b004da305426a32771a2f0eb", "message": "Added pom.xml files to TypeScript PetStore client samples", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "988df1f7a517b12bbfa185c06767c3782eaf51d0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/988df1f7a517b12bbfa185c06767c3782eaf51d0", "message": "Removed tabs from TypeScriptClientCodegen", "committedDate": "2020-04-26T22:07:21Z", "type": "commit"}, {"oid": "0867522b0a7b81dec7889bbaf7928de4201cbe78", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0867522b0a7b81dec7889bbaf7928de4201cbe78", "message": "Added ts client codegen to root pom.xml and travis", "committedDate": "2020-04-26T22:07:33Z", "type": "commit"}, {"oid": "525f48d6942b185a130e0b1d780b2112c7b46eaf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/525f48d6942b185a130e0b1d780b2112c7b46eaf", "message": "Added server variable configuration to ts-refactor", "committedDate": "2020-04-26T22:07:33Z", "type": "commit"}, {"oid": "c2b7422a819c2fdad37d3e45fac4b8be04799a05", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c2b7422a819c2fdad37d3e45fac4b8be04799a05", "message": "[TS-Refactor] Added tests for Object Serializer", "committedDate": "2020-04-26T22:07:33Z", "type": "commit"}, {"oid": "e41df36261628c360617d275bb98be5a477b1879", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e41df36261628c360617d275bb98be5a477b1879", "message": "Added simple test for PetApi", "committedDate": "2020-04-26T22:07:33Z", "type": "commit"}, {"oid": "9b0bb9a399b6891b5162e6e92e70723d8e3c60f7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9b0bb9a399b6891b5162e6e92e70723d8e3c60f7", "message": "Fixed ObjectSerializer test", "committedDate": "2020-04-26T22:07:33Z", "type": "commit"}, {"oid": "35b98cf2bca0f0dc7066899ff03281f713a9d45d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/35b98cf2bca0f0dc7066899ff03281f713a9d45d", "message": "Added handling for different http status codes and test for deletePet", "committedDate": "2020-04-26T22:08:02Z", "type": "commit"}, {"oid": "8bfb88cd76e580c0d12a4957b63e977a316d02ed", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8bfb88cd76e580c0d12a4957b63e977a316d02ed", "message": "Removed tabs in TypeScriptClientCodegen", "committedDate": "2020-04-26T22:08:02Z", "type": "commit"}, {"oid": "c5c9a59060aa80d33f87111437a81ae6ac12023b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c5c9a59060aa80d33f87111437a81ae6ac12023b", "message": "Removed tabs in DefaultCodegen", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "1c2943dcc889ec3b3dd0d8f33fadcf34d08b7be1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1c2943dcc889ec3b3dd0d8f33fadcf34d08b7be1", "message": "Additional tests for pet store api", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "7786f2e9fb97a6ae76764f72ef57157490856e3a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7786f2e9fb97a6ae76764f72ef57157490856e3a", "message": "Fixed file uploads", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "a00e342505cdc20ef481c848adb145632c00d644", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a00e342505cdc20ef481c848adb145632c00d644", "message": "Made api call configuration separately settable", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "e11a5a9395c38ffb7fef747bd391db3afdf20157", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e11a5a9395c38ffb7fef747bd391db3afdf20157", "message": "Use string union for enums", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "8068315f7920e72571b83fe56772c8c870002d7f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8068315f7920e72571b83fe56772c8c870002d7f", "message": "Remove tab", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "aeef285190b920ad90fb24278da7ed5a160043d0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/aeef285190b920ad90fb24278da7ed5a160043d0", "message": "Restructured module layout", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "1d27563a4109f23ba35dd80046a68bcc5a3a52c8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1d27563a4109f23ba35dd80046a68bcc5a3a52c8", "message": "Use observables internally", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "df970ae8b1cf5df42b795165ed0826cd51a90e9d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/df970ae8b1cf5df42b795165ed0826cd51a90e9d", "message": "Added promise based middleware", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "861f774c56da60e19e61a409866ddf843913b1dd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/861f774c56da60e19e61a409866ddf843913b1dd", "message": "Made discriminator and attributeTypeMap readonly", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "c8c58b4f5e1b3812b8521d783d1c9b629387169e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c8c58b4f5e1b3812b8521d783d1c9b629387169e", "message": "Configure discriminator correctly", "committedDate": "2020-04-26T22:08:28Z", "type": "commit"}, {"oid": "56ca583b2ee8ff650e97097ae21990ce5894bbe0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/56ca583b2ee8ff650e97097ae21990ce5894bbe0", "message": "Set discriminator value automatically", "committedDate": "2020-04-26T22:08:29Z", "type": "commit"}, {"oid": "7a372acbed5bad1c088b761299ca29b16cbc081b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7a372acbed5bad1c088b761299ca29b16cbc081b", "message": "Fixed date-time and date handling", "committedDate": "2020-04-26T22:08:46Z", "type": "commit"}, {"oid": "35d3cc20c9252b7f6ec7741abd000678ad3515eb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/35d3cc20c9252b7f6ec7741abd000678ad3515eb", "message": "Added comments & license info", "committedDate": "2020-04-26T22:08:46Z", "type": "commit"}, {"oid": "a481d0ce8385552364879f24be1414f2ba9aac4b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a481d0ce8385552364879f24be1414f2ba9aac4b", "message": "Added comments", "committedDate": "2020-04-26T22:08:46Z", "type": "commit"}, {"oid": "c330a9f8724597d34dec1d22d3477a594c819643", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c330a9f8724597d34dec1d22d3477a594c819643", "message": "Ignore openapi-generator-cli/bin", "committedDate": "2020-04-26T22:08:46Z", "type": "commit"}, {"oid": "40f3c4f4dd47e26c83c24cd99c2ee5e69b10650d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/40f3c4f4dd47e26c83c24cd99c2ee5e69b10650d", "message": "Removed accidentally created generated code", "committedDate": "2020-04-26T22:08:46Z", "type": "commit"}, {"oid": "fcbecc4dbd559ad19fdcf228305978027d2bd167", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fcbecc4dbd559ad19fdcf228305978027d2bd167", "message": "Fixed compilation issues in TypeScriptClientCodegen", "committedDate": "2020-04-26T22:08:46Z", "type": "commit"}, {"oid": "99c3dceae740604ccbecaf6219863f1122fed277", "url": "https://github.com/OpenAPITools/openapi-generator/commit/99c3dceae740604ccbecaf6219863f1122fed277", "message": "Added typescript to docs/generators", "committedDate": "2020-04-26T22:09:18Z", "type": "commit"}, {"oid": "495ce938f8510ba1ac8e8527e8508bd2e8b6c792", "url": "https://github.com/OpenAPITools/openapi-generator/commit/495ce938f8510ba1ac8e8527e8508bd2e8b6c792", "message": "Updated docs", "committedDate": "2020-04-26T22:09:31Z", "type": "commit"}, {"oid": "8d8e57f1f9f0340d9a6d2507d30b79f27e442c61", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8d8e57f1f9f0340d9a6d2507d30b79f27e442c61", "message": "Added gitignore and git_push", "committedDate": "2020-04-26T22:09:31Z", "type": "commit"}, {"oid": "fb6f8c5344680253b832cb1c3861c4de18a9a5ec", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fb6f8c5344680253b832cb1c3861c4de18a9a5ec", "message": "Added jquery library", "committedDate": "2020-04-26T22:09:31Z", "type": "commit"}, {"oid": "6c37c7180d138485499fe1402ae4a3663830aa29", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6c37c7180d138485499fe1402ae4a3663830aa29", "message": "Added pom.xmls, fixed packagejsons and hopefully webppack", "committedDate": "2020-04-26T22:09:31Z", "type": "commit"}, {"oid": "9297e59053a8da82017dc7be9a4401fec3fac5db", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9297e59053a8da82017dc7be9a4401fec3fac5db", "message": "Removed tabs in TypeScriptClientCodegen", "committedDate": "2020-04-26T22:09:31Z", "type": "commit"}, {"oid": "e4a0855db9a6491854977ce312eb1350c6c73385", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e4a0855db9a6491854977ce312eb1350c6c73385", "message": "Fixed a couple issues with pom.xml", "committedDate": "2020-04-26T22:09:31Z", "type": "commit"}, {"oid": "5fd3be29bdd7e87c18b06165636c74f4ee4007f1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5fd3be29bdd7e87c18b06165636c74f4ee4007f1", "message": "Ensured up to date", "committedDate": "2020-04-26T22:09:32Z", "type": "commit"}, {"oid": "68241f8c33f259b7be63c62378bfc86bfc2ed32a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/68241f8c33f259b7be63c62378bfc86bfc2ed32a", "message": "Fixed missing fetch definition in TS default tests", "committedDate": "2020-04-26T22:09:32Z", "type": "commit"}, {"oid": "4f461f948a115a6d159a8bfa63e6938ba8e80f59", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4f461f948a115a6d159a8bfa63e6938ba8e80f59", "message": "Updated typescript docs", "committedDate": "2020-04-26T22:09:32Z", "type": "commit"}, {"oid": "0f3ad99d728bbbf03b0a02918574568cbe26c091", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0f3ad99d728bbbf03b0a02918574568cbe26c091", "message": "Refactor typescript merge master (#4319)\n\nMerge master into ts-refactor", "committedDate": "2020-04-26T22:54:36Z", "type": "commit"}, {"oid": "0000342d770d5b57a47d09f915397cb3d9341659", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0000342d770d5b57a47d09f915397cb3d9341659", "message": "Typescript refactor: stub rxjs (#4424)\n\n* Remove unused supportsES6 field from codegen\r\n\r\n* Add a new switch for RXJS\r\n\r\n* Remove redundant npm dependency on rxjs4 types\r\n\r\n* Fix return type of PromiseMiddleware methods\r\n\r\n* Install webpack dependency to run jquery tests\r\n\r\n* Update form-data to 2.5 which includes typings\r\n\r\n* Add missing dependency on node typings\r\n\r\n* Fix test artifact name typo\r\n\r\n* Stub rxjs when it is not explicitly enabled", "committedDate": "2020-04-26T22:54:36Z", "type": "commit"}, {"oid": "9afb8ff12a2a76ace737dd7f249ae396ef3975c6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9afb8ff12a2a76ace737dd7f249ae396ef3975c6", "message": "Typescript refactor: Platform select for browser and node (#4500)\n\n* Use string form of filename parameter\r\n\r\nThis works for the form-data library and is also compatible with the\r\nbrowser FormData object.\r\n\r\n* Add new option to select platform node or browser\r\n\r\nWhen no platform is selected, a default is chosen by the framework\r\noption and likewise the file data type option is implied by the\r\nplatform.\r\n\r\n* Remove redundant import of node dns module\r\n\r\n* Only use form-data library for node platform\r\n\r\n* Generate npm package from npmName option\r\n\r\n* Use method convertPropertyToBooleanAndWriteBack\r\n\r\n* Generate typescript samples with ensure-up-to-date", "committedDate": "2020-04-26T22:57:36Z", "type": "commit"}, {"oid": "bfc14c82e5276ea2c08eb06a28e9c8ec25d03934", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bfc14c82e5276ea2c08eb06a28e9c8ec25d03934", "message": "Removed tab from DefaultCodegen", "committedDate": "2020-04-26T23:12:35Z", "type": "commit"}, {"oid": "d704a4ffbac84c0be173e0d9577a05288c155108", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d704a4ffbac84c0be173e0d9577a05288c155108", "message": "Readded missing change", "committedDate": "2020-05-02T17:21:57Z", "type": "commit"}, {"oid": "5a2561f520e98273b97f9bcaf1400ceb5764f175", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5a2561f520e98273b97f9bcaf1400ceb5764f175", "message": "Mark typescript client codegen as experimental", "committedDate": "2020-05-02T20:03:56Z", "type": "commit"}, {"oid": "07dd1efb7a0aa0c1e4e972f514801966127de605", "url": "https://github.com/OpenAPITools/openapi-generator/commit/07dd1efb7a0aa0c1e4e972f514801966127de605", "message": "Removed whitespace", "committedDate": "2020-05-03T18:58:07Z", "type": "commit"}, {"oid": "934f226098352a4ac69d337d3157b74cd7ecb2d0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/934f226098352a4ac69d337d3157b74cd7ecb2d0", "message": "[TS-Refactor] Top-level exports for fetch & jquery (#6138)\n\n* Added top-level exports\r\n* Updated generator README\r\n* Updated typescript generator docs", "committedDate": "2020-05-04T21:58:38Z", "type": "commit"}, {"oid": "391a191ecf46a1159cc37d4a55efa92f01ffaebf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/391a191ecf46a1159cc37d4a55efa92f01ffaebf", "message": "Allow browsers File type for files (#5521)\n\n* Allow passing file parameters as File objects\r\n* Add test for jquery upload\r\n* Use HttpFile object for node platform\r\n* Regenerate samples\r\n\r\nThis is by far the most common use case. A `File` object already\r\ncontains the name attribute. This commit allows that information to be\r\nused directly.\r\nWhen sending a `Blob`, in most browsers the `File` constructor can be\r\nused to assign a file name. In all other browsers the alternative is\r\n```typescript\r\nObject.assign(data, { name: \"foobar.txt\" });\r\n```\r\nThat is why we explicitely pass the name as third parameter to\r\n`FormData.append`. This `Object.assign` method also works for `Buffer`\r\nobjects in node.\r\n\r\nIf one really does not want to touch the data object in the browser it\r\nis possible to define another reference to the data with\r\n```typescript\r\nnew Blob([data], { type: data.type })\r\n```\r\nor in node via\r\n```typescript\r\nBuffer.from(data)\r\n```", "committedDate": "2020-05-05T20:53:07Z", "type": "commit"}, {"oid": "303ec6c04b4fcd4d66e1f323fe3c07b90812c74c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/303ec6c04b4fcd4d66e1f323fe3c07b90812c74c", "message": "[TS-Refactor] Added options for npm version, repository, name and updated readme (#6139)\n\n* Added options for npm version, repository, name and updated readme\r\n\r\n* Removed `this`  where not required\r\n\r\n* Updated typescript docs", "committedDate": "2020-05-16T17:01:08Z", "type": "commit"}, {"oid": "659369c3ea959aca66d26d4c7613ce6eeae094c1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/659369c3ea959aca66d26d4c7613ce6eeae094c1", "message": "Typescript refactor fixes (#6027)\n\nFixes a handful of issues identified in https://github.com/OpenAPITools/openapi-generator/issues/802#issuecomment-617262139\r\n\r\nList of changes\r\n\r\n* Clean: Remove redundant cliOption definition\r\n\r\n* Remove redundant directory structure in templates\r\n\r\nIf we need to have different index.ts files for the different\r\nframeworks, we can mostly do that in the one mustache file. In the cases\r\nwhere that is not possible, we can still add a new override file later.\r\n\r\n* Use File.separator consistently\r\n\r\n* Only export selected api type\r\n\r\n* Simplify promise polyfill import\r\n\r\nThe behaviour should be the same, according to the es6-promise docs.\r\nPreviously tsc would report the error:\r\n> error TS2307: Cannot find module 'es6-promise'.\r\n\r\n* Import HttpFile in all models\r\n\r\n* Export server configurations\r\n\r\n* Use undefined as default body value\r\n\r\nThe empty string is not interpreted as \"no body\" by the browser fetch\r\napi and thus leads to an exception during get requests\r\n\r\n* Improve codestyle: prefer guards to nesting\r\n\r\n* Remove verbose debug output\r\n\r\nThis should not be commited, because every developer has very different\r\nrequirements what debug information he needs to see.\r\n\r\n* Fix: Use cleaned model names for imports\r\n\r\n* Fix: do not call toString on undefined\r\n\r\n* Fix typo in doc comment\r\n\r\n* Introduce RequestBody type and remove method check", "committedDate": "2020-05-21T13:34:14Z", "type": "commit"}, {"oid": "e315d486365ccbfc25e98a5b1876d2c7ee65a320", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e315d486365ccbfc25e98a5b1876d2c7ee65a320", "message": "Support media types other than json (#6177)\n\nList of changes:\r\n\r\n* Add */* as fallback to accept header\r\n\r\n* Use more sophisticated media type selection\r\n\r\n* Handle object stringify in ObjectSerializer\r\n\r\n* Parse response with ObejctSerializer\r\n\r\n* Fix: Correctly extract response headers in browser\r\n\r\n* Create HttpFile objects from responses\r\n\r\n* Handle binary responses\r\n\r\n* Clean up dependencies and replace isomorphic-fetch\r\n\r\nInstead of isomorphic-fetch, which is unmaintained, we directly use\r\nnode-fetch and whatwg-fetch polyfills.", "committedDate": "2020-05-22T19:54:52Z", "type": "commit"}, {"oid": "56f9737b2d1c290a5b7fcd5131070effd4326667", "url": "https://github.com/OpenAPITools/openapi-generator/commit/56f9737b2d1c290a5b7fcd5131070effd4326667", "message": "Merge master", "committedDate": "2020-05-22T20:06:06Z", "type": "commit"}, {"oid": "41d1864d02f5779bf19b4c185cc41a08a18cf9a3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/41d1864d02f5779bf19b4c185cc41a08a18cf9a3", "message": "Updated versions in ts-default/jquery and ts docs", "committedDate": "2020-05-22T21:45:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Njg2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r429546865", "bodyText": "Heads-up: later we may switch it to something like r.is2XXCode as 2 or 3 other generators need is4XXCode and is5XXCode as well (and probably is3XXCode)", "author": "wing328", "createdAt": "2020-05-23T13:35:57Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3799,6 +3800,7 @@ public CodegenResponse fromResponse(String responseCode, ApiResponse response) {\n                 default:\n                     throw new RuntimeException(\"Invalid response code \" + responseCode);\n             }\n+            r.isSuccessCode = r.code.startsWith(\"2\");", "originalCommit": "41d1864d02f5779bf19b4c185cc41a08a18cf9a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Nzk1Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r429547956", "bodyText": "Good catch! That's actually already the case - see the switch statement right above this line. I'll fix it later today.", "author": "TiFu", "createdAt": "2020-05-23T13:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Njg2NQ=="}], "type": "inlineReview"}, {"oid": "dee6ed420ea0c0df1c706abb2156b3bffbfba415", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dee6ed420ea0c0df1c706abb2156b3bffbfba415", "message": "Replaced isSuccessCode with is2xx", "committedDate": "2020-05-23T17:01:24Z", "type": "commit"}, {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/33c8d19564e4d45d13ef3a7c5af534f793caab6b", "message": "[TypeScript-Refactor] Use OAIv3 spec and fix bugs in JQuery Blob download (#6416)\n\n* Change to OAIv3 spec for TS-Refactor\r\n\r\n* Moved samples to oaiv3 folder\r\n\r\n* Updated package-lock\r\n\r\n* Update pom to use OAIv3 paths for Typescript-refactor\r\n\r\n* Renamed ts-refactor samples & tests in pom.xmls\r\n\r\n* Fixed compile issues in ts-refactor jquery http test\r\n\r\n* Fixed bugs in blob handling of jquery", "committedDate": "2020-05-25T20:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNTA3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431705070", "bodyText": "how about an updated copyright notice?", "author": "macjohnny", "createdAt": "2020-05-28T09:31:56Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "33c8d19564e4d45d13ef3a7c5af534f793caab6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwNTA4NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433005084", "bodyText": "Most of this file is copied from AbstractClientCodegen - so I believe we have to at least maintain the SmartBearSoftware notice.\nI have updated the year for OAI-Gen Contributors though.\nIs there anything else which I should change?", "author": "TiFu", "createdAt": "2020-06-01T01:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzA2MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431707061", "bodyText": "is this comment still up-to-date?", "author": "macjohnny", "createdAt": "2020-05-28T09:35:20Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?", "originalCommit": "33c8d19564e4d45d13ef3a7c5af534f793caab6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNDY1NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432424654", "bodyText": "I would say no, we can already generate the package.json.", "author": "bodograumann", "createdAt": "2020-05-29T11:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwOTE2MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431709161", "bodyText": "how about using a list of strings and concatenating it at the end with |?", "author": "macjohnny", "createdAt": "2020-05-28T09:39:11Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?\n+        \n+        //Documentation\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", \"\", \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", \"\", \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\".gitignore.mustache\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        \n+        // Util\n+        supportingFiles.add(new SupportingFile(\"util.mustache\", \"\", \"util.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"exception.mustache\", \"apis\", \"exception.ts\"));\n+        // http\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"http.mustache\", \"http\", \"http.ts\"));\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"servers.mustache\", \"servers.ts\"));\n+\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", \"\", \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"auth\" + File.separator + \"auth.mustache\", \"auth\", \"auth.ts\"));\n+        \n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"models_all.mustache\", \"models\", \"all.ts\"));\n+\n+        // TODO: add supporting files depending on cli parameter e.g. fetch vs angular\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"PromiseAPI.mustache\", \"types\", \"PromiseAPI.ts\"));\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"ObservableAPI.mustache\", \"types\", \"ObservableAPI.ts\"));\n+\n+        // models\n+        // TODO: properly set model and api packages\n+        this.setModelPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"ObjectSerializer.mustache\", \"models\", \"ObjectSerializer.ts\"));\n+        modelTemplateFiles.put(\"model\" + File.separator + \"model.mustache\", \".ts\");\n+\n+        // api\n+        this.setApiPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"middleware.mustache\", \"\", \"middleware.ts\"));\n+        this.supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"baseapi.mustache\", \"apis\", \"baseapi.ts\"));\n+        this.apiTemplateFiles.put(\"api\" + File.separator + \"api.mustache\", \".ts\");\n+    }\n+\n+    public String getNpmName() {\n+        return npmName;\n+    }\n+\n+    public void setNpmName(String npmName) {\n+        this.npmName = npmName;\n+    }\n+\n+    public String getNpmRepository() {\n+        return npmRepository;\n+    }\n+\n+    public void setNpmRepository(String npmRepository) {\n+        this.npmRepository = npmRepository;\n+    }\n+\n+    public String getNpmVersion() {\n+        return npmVersion;\n+    }\n+\n+    public void setNpmVersion(String npmVersion) {\n+        this.npmVersion = npmVersion;\n+    }\n+    \n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+    \n+    @Override\n+    public void preprocessOpenAPI(OpenAPI openAPI) {\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+\n+            // If no npmVersion is provided in additional properties, version from API specification is used.\n+            // If none of them is provided then fallbacks to default version\n+            if (additionalProperties.containsKey(NPM_VERSION)) {\n+                this.setNpmVersion(additionalProperties.get(NPM_VERSION).toString());\n+            } else if (openAPI.getInfo() != null && openAPI.getInfo().getVersion() != null) {\n+                this.setNpmVersion(openAPI.getInfo().getVersion());\n+            }\n+\n+            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.parseBoolean(additionalProperties.get(SNAPSHOT).toString())) {\n+                if (npmVersion.toUpperCase(Locale.ROOT).matches(\"^.*-SNAPSHOT$\")) {\n+                    this.setNpmVersion(npmVersion + \".\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                } else {\n+                    this.setNpmVersion(npmVersion + \"-SNAPSHOT.\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                }\n+            }\n+            additionalProperties.put(NPM_VERSION, npmVersion);\n+\n+        }\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {      \n+        final Object propFramework = additionalProperties.get(FRAMEWORK_SWITCH);\n+\n+        Map<String, Boolean> frameworks = new HashMap<>();\n+        for (String framework: FRAMEWORKS) {\n+            frameworks.put(framework, framework.equals(propFramework));\n+        }\n+        objs.put(\"framework\", propFramework);\n+        objs.put(\"frameworks\", frameworks);\n+\n+        objs.put(\"fileContentDataType\", additionalProperties.get(FILE_CONTENT_DATA_TYPE));\n+\n+        return objs;\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> models) {     \n+        \n+        // Add additional filename information for model imports in the apis\n+        List<Map<String, Object>> imports = (List<Map<String, Object>>) operations.get(\"imports\");\n+        for (Map<String, Object> im : imports) {\n+            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", File.separator));\n+            im.put(\"classname\", getModelnameFromModelFilename(im.get(\"import\").toString()));\n+        }\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> operationsMap = (Map<String, Object>) operations.get(\"operations\");\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operationsMap.get(\"operation\");\n+        for (CodegenOperation operation: operationList) {\n+            List<CodegenResponse> responses = operation.responses;\n+            operation.returnType = this.getReturnType(responses);          \n+        }\n+        return operations;\n+    }\n+    \n+    private String getReturnType(List<CodegenResponse> responses) {\n+        StringBuilder returnType = new StringBuilder();\n+        boolean firstReturnType = true;\n+        boolean atLeastOneSuccess = false;\n+        boolean addVoid = false;\n+        for (CodegenResponse response: responses) {\n+            // TODO: we should probably catch an exception here\n+            if (response.is2xx) {\n+                if (response.dataType != null) {\n+                    if (!firstReturnType) {", "originalCommit": "33c8d19564e4d45d13ef3a7c5af534f793caab6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwNDQ4MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433004480", "bodyText": "Replaced with a Set and simplified the code", "author": "TiFu", "createdAt": "2020-06-01T01:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwOTE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwOTc1OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431709758", "bodyText": "add some short doc", "author": "macjohnny", "createdAt": "2020-05-28T09:40:12Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?\n+        \n+        //Documentation\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", \"\", \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", \"\", \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\".gitignore.mustache\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        \n+        // Util\n+        supportingFiles.add(new SupportingFile(\"util.mustache\", \"\", \"util.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"exception.mustache\", \"apis\", \"exception.ts\"));\n+        // http\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"http.mustache\", \"http\", \"http.ts\"));\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"servers.mustache\", \"servers.ts\"));\n+\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", \"\", \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"auth\" + File.separator + \"auth.mustache\", \"auth\", \"auth.ts\"));\n+        \n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"models_all.mustache\", \"models\", \"all.ts\"));\n+\n+        // TODO: add supporting files depending on cli parameter e.g. fetch vs angular\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"PromiseAPI.mustache\", \"types\", \"PromiseAPI.ts\"));\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"ObservableAPI.mustache\", \"types\", \"ObservableAPI.ts\"));\n+\n+        // models\n+        // TODO: properly set model and api packages\n+        this.setModelPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"ObjectSerializer.mustache\", \"models\", \"ObjectSerializer.ts\"));\n+        modelTemplateFiles.put(\"model\" + File.separator + \"model.mustache\", \".ts\");\n+\n+        // api\n+        this.setApiPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"middleware.mustache\", \"\", \"middleware.ts\"));\n+        this.supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"baseapi.mustache\", \"apis\", \"baseapi.ts\"));\n+        this.apiTemplateFiles.put(\"api\" + File.separator + \"api.mustache\", \".ts\");\n+    }\n+\n+    public String getNpmName() {\n+        return npmName;\n+    }\n+\n+    public void setNpmName(String npmName) {\n+        this.npmName = npmName;\n+    }\n+\n+    public String getNpmRepository() {\n+        return npmRepository;\n+    }\n+\n+    public void setNpmRepository(String npmRepository) {\n+        this.npmRepository = npmRepository;\n+    }\n+\n+    public String getNpmVersion() {\n+        return npmVersion;\n+    }\n+\n+    public void setNpmVersion(String npmVersion) {\n+        this.npmVersion = npmVersion;\n+    }\n+    \n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+    \n+    @Override\n+    public void preprocessOpenAPI(OpenAPI openAPI) {\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+\n+            // If no npmVersion is provided in additional properties, version from API specification is used.\n+            // If none of them is provided then fallbacks to default version\n+            if (additionalProperties.containsKey(NPM_VERSION)) {\n+                this.setNpmVersion(additionalProperties.get(NPM_VERSION).toString());\n+            } else if (openAPI.getInfo() != null && openAPI.getInfo().getVersion() != null) {\n+                this.setNpmVersion(openAPI.getInfo().getVersion());\n+            }\n+\n+            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.parseBoolean(additionalProperties.get(SNAPSHOT).toString())) {\n+                if (npmVersion.toUpperCase(Locale.ROOT).matches(\"^.*-SNAPSHOT$\")) {\n+                    this.setNpmVersion(npmVersion + \".\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                } else {\n+                    this.setNpmVersion(npmVersion + \"-SNAPSHOT.\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                }\n+            }\n+            additionalProperties.put(NPM_VERSION, npmVersion);\n+\n+        }\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {      \n+        final Object propFramework = additionalProperties.get(FRAMEWORK_SWITCH);\n+\n+        Map<String, Boolean> frameworks = new HashMap<>();\n+        for (String framework: FRAMEWORKS) {\n+            frameworks.put(framework, framework.equals(propFramework));\n+        }\n+        objs.put(\"framework\", propFramework);\n+        objs.put(\"frameworks\", frameworks);\n+\n+        objs.put(\"fileContentDataType\", additionalProperties.get(FILE_CONTENT_DATA_TYPE));\n+\n+        return objs;\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> models) {     \n+        \n+        // Add additional filename information for model imports in the apis\n+        List<Map<String, Object>> imports = (List<Map<String, Object>>) operations.get(\"imports\");\n+        for (Map<String, Object> im : imports) {\n+            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", File.separator));\n+            im.put(\"classname\", getModelnameFromModelFilename(im.get(\"import\").toString()));\n+        }\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> operationsMap = (Map<String, Object>) operations.get(\"operations\");\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operationsMap.get(\"operation\");\n+        for (CodegenOperation operation: operationList) {\n+            List<CodegenResponse> responses = operation.responses;\n+            operation.returnType = this.getReturnType(responses);          \n+        }\n+        return operations;\n+    }\n+    \n+    private String getReturnType(List<CodegenResponse> responses) {", "originalCommit": "33c8d19564e4d45d13ef3a7c5af534f793caab6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae8c1be09d5bb5616fc7f52f824389895860f5d9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ae8c1be09d5bb5616fc7f52f824389895860f5d9", "message": "[Typescript] Support http bearer authentication with token provider (#6425)\n\n* Add http bearer security\r\n\r\n* Update typescript to 3.9\r\n\r\n* Fix: Use Authorization header for basic and bearer\r\n\r\n* Allow asynchronous tokenProvider in bearer auth", "committedDate": "2020-05-29T20:21:35Z", "type": "commit"}, {"oid": "d8de81b7c61ae448f018593d4d1346c1e294eb77", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d8de81b7c61ae448f018593d4d1346c1e294eb77", "message": "Add TS-Rewrite-Jquery tests node_modules to travis caching", "committedDate": "2020-05-31T23:14:19Z", "type": "commit"}, {"oid": "9705ec9c01db7725ac64908aeafcf7bd7cbfe69e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9705ec9c01db7725ac64908aeafcf7bd7cbfe69e", "message": "Remove NoAuthentication", "committedDate": "2020-05-31T23:19:32Z", "type": "commit"}, {"oid": "21861bd27f82111ec99f8fd10911476c3be0d86e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/21861bd27f82111ec99f8fd10911476c3be0d86e", "message": "Added file to generate TS samples on Windows", "committedDate": "2020-05-31T23:28:11Z", "type": "commit"}, {"oid": "86daa2b9940039b8d9c11d026fa24c550221def9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/86daa2b9940039b8d9c11d026fa24c550221def9", "message": "Exclude btoa in browser", "committedDate": "2020-05-31T23:30:45Z", "type": "commit"}, {"oid": "f8a42315c0ff415ed468f6a6cc11d21ad458e231", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f8a42315c0ff415ed468f6a6cc11d21ad458e231", "message": "Regen samples", "committedDate": "2020-06-01T00:48:55Z", "type": "commit"}, {"oid": "3aa2f22d98ae4ec652c0c28d22cb8c25e16fbe4c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3aa2f22d98ae4ec652c0c28d22cb8c25e16fbe4c", "message": "Remove outdated ToDo comments", "committedDate": "2020-06-01T00:50:12Z", "type": "commit"}, {"oid": "af8f6ff3eff44a67239aef2e5afd56017c34bb51", "url": "https://github.com/OpenAPITools/openapi-generator/commit/af8f6ff3eff44a67239aef2e5afd56017c34bb51", "message": "Document and optimize `getReturnType` in TSClientCodegen", "committedDate": "2020-06-01T17:49:49Z", "type": "commit"}, {"oid": "d9e051938d99c4293dfb102f6db0fbc2e279f3c1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d9e051938d99c4293dfb102f6db0fbc2e279f3c1", "message": "Added option to generate objects for operation function arguments", "committedDate": "2020-06-01T20:38:56Z", "type": "commit"}, {"oid": "fbed6ca418b1879f56048ad03212c5d993c04292", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fbed6ca418b1879f56048ad03212c5d993c04292", "message": "Upgrade typescript docs", "committedDate": "2020-06-01T21:46:29Z", "type": "commit"}, {"oid": "fc29d2c133b6f9b2c3bcbe725b12b1c339e810b8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fc29d2c133b6f9b2c3bcbe725b12b1c339e810b8", "message": "Merge branch 'master' into ts-refactor-review", "committedDate": "2020-06-01T21:47:37Z", "type": "commit"}, {"oid": "4258a17a7642956b3ee31b423a052e1c58b57740", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4258a17a7642956b3ee31b423a052e1c58b57740", "message": "Updated generators", "committedDate": "2020-06-03T20:05:47Z", "type": "commit"}, {"oid": "8fc7eebbb4fb316a391077ba5f61b0b5db17bc8d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8fc7eebbb4fb316a391077ba5f61b0b5db17bc8d", "message": "Updated samples", "committedDate": "2020-06-03T20:06:52Z", "type": "commit"}, {"oid": "0906e3cbb594983abc1ccdfed6947daa3f214cd4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0906e3cbb594983abc1ccdfed6947daa3f214cd4", "message": "Updated docs", "committedDate": "2020-06-03T23:09:55Z", "type": "commit"}, {"oid": "bf2b05defa79aaddaac06801c4e166c95d439ccd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bf2b05defa79aaddaac06801c4e166c95d439ccd", "message": "Readded pom.xml", "committedDate": "2020-06-04T19:54:39Z", "type": "commit"}, {"oid": "71c3cad24b0a3f9d4e563b99206896af7fe7f27f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/71c3cad24b0a3f9d4e563b99206896af7fe7f27f", "message": "Merge branch 'master' into typescript-refactor-master", "committedDate": "2020-06-04T21:10:59Z", "type": "commit"}, {"oid": "14642f1ee71f5e35983ee3713390ed293e0a2f1a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/14642f1ee71f5e35983ee3713390ed293e0a2f1a", "message": "Merge remote-tracking branch 'origin/master' into typescript-refactor-master", "committedDate": "2020-06-05T05:57:50Z", "type": "commit"}, {"oid": "4608264a12096ba11698a7aaf4d076f4621a0a8f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4608264a12096ba11698a7aaf4d076f4621a0a8f", "message": "[Typescript] Support InversifyJS (#6489)\n\n* Add config option to enable InversifyJS\r\n\r\n* Add pascal case lambda for mustache\r\n\r\n* Generate a class for each auth method\r\n\r\n* Add service identifiers and service binder helper\r\n\r\n* Split Configuration into interface and factory\r\n\r\nThis way we don't need to import the factory everywhere to do\r\ntypechecking.\r\n\r\n* Define minimal interface for ServerConfiguration\r\n\r\n* Add annotations for inversify when enabled\r\n\r\n* Always expose list of server configurations\r\n\r\n* Add samples and defalt tests for useInversify\r\n\r\n* Simplify sample generation script\r\n\r\n* Fix: Add object_params arg description to help\r\n\r\n* Fix: Properly enable inversify with bool property\r\n\r\n* Build tests in pom instead of prepublish\r\n\r\nOtherwise running `npm install`, when the build failed was impossible.\r\n\r\n* Update dependencies for inversify tests\r\n\r\n* Test basic api service resolution\r\n\r\n* Remove Promise and Observable prefix from exports\r\n\r\n* Fix, RxJS: Import Observable in object params api\r\n\r\n* Add ioc service identifier for object param api\r\n\r\n* Add hint about unimpeded development\r\n\r\n* Simplify api service binder syntax\r\n\r\n* Remove default tests for inversify\r\n\r\n* Add wrapper for easy promise based http libraries\r\n\r\nThis wrapper allows defining and injecting http libraries that do not\r\nneed to know anything about observables, especially when useRxJS is not\r\nenabled. I will employ this in the tests for InversifyJS.\r\n\r\nNot sure if we should also use this wrapper internally.\r\n\r\n* Add named injects for remaining auth parameters\r\n\r\n* Directly inject promise services without RxJS\r\n\r\n* Add tests for api service binder\r\n\r\n* Add convenience method to bind all api services\r\n\r\n* Fix: Rename inversify test artifact\r\n\r\n* Run bin/utils/copy-to-website.sh", "committedDate": "2020-06-13T19:26:08Z", "type": "commit"}, {"oid": "8ab532eed2e729cf81bcda60e6a2ab9a8fcb5717", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8ab532eed2e729cf81bcda60e6a2ab9a8fcb5717", "message": "Merge master", "committedDate": "2020-06-13T19:36:02Z", "type": "commit"}, {"oid": "efb9722757d9c94dca63157d2ed96478643d45bb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/efb9722757d9c94dca63157d2ed96478643d45bb", "message": "Restore changes to CONTRIBUTING.md from PR #6489", "committedDate": "2020-06-14T17:44:04Z", "type": "commit"}]}