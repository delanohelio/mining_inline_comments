{"pr_number": 5809, "pr_title": "[codegen][Python-experimental] Discriminator NPE fix, handle 'null' type, #4906 enhancements", "pr_createdAt": "2020-04-02T23:26:05Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5809", "timeline": [{"oid": "a16d507bd76f9481a02ae00c69c08e5832a4f98d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a16d507bd76f9481a02ae00c69c08e5832a4f98d", "message": "improve get_discriminator function", "committedDate": "2020-05-07T15:43:42Z", "type": "commit"}, {"oid": "2254a96b8940f5930c402952cba7d1db811f54f5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2254a96b8940f5930c402952cba7d1db811f54f5", "message": "Run sample scripts", "committedDate": "2020-05-07T15:44:28Z", "type": "commit"}, {"oid": "3c8aeea1220685503d2ea46e7eee59e40024ad98", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3c8aeea1220685503d2ea46e7eee59e40024ad98", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-05-07T16:11:54Z", "type": "commit"}, {"oid": "07cfeb020a2ecc70579d3d3ed4d3982feaad4c38", "url": "https://github.com/OpenAPITools/openapi-generator/commit/07cfeb020a2ecc70579d3d3ed4d3982feaad4c38", "message": "add unit tests for recursive get_discriminator_class", "committedDate": "2020-05-07T18:21:44Z", "type": "commit"}, {"oid": "f68941dbe21c97812473bbcbbc72803108ecab20", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f68941dbe21c97812473bbcbbc72803108ecab20", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-05-08T03:59:43Z", "type": "commit"}, {"oid": "cc7f0d51ede6c799bec69110aefb476673e56e51", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cc7f0d51ede6c799bec69110aefb476673e56e51", "message": "fix unit test issues", "committedDate": "2020-05-08T04:19:01Z", "type": "commit"}, {"oid": "ab11452a4fd402132141c3b391d537f34cf25fa1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ab11452a4fd402132141c3b391d537f34cf25fa1", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-05-08T14:39:15Z", "type": "commit"}, {"oid": "360b1a1941af0b0f9c8b789fd781cf1dee2d3d3d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/360b1a1941af0b0f9c8b789fd781cf1dee2d3d3d", "message": "fix formatting issues", "committedDate": "2020-05-08T14:47:15Z", "type": "commit"}, {"oid": "d561bcdb0923426948ea1d9371488bfcca2a2670", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d561bcdb0923426948ea1d9371488bfcca2a2670", "message": "fix formatting issues", "committedDate": "2020-05-08T17:52:33Z", "type": "commit"}, {"oid": "71c5a8d7e95475e5e9e87ed0771592946428a685", "url": "https://github.com/OpenAPITools/openapi-generator/commit/71c5a8d7e95475e5e9e87ed0771592946428a685", "message": "fix formatting issues", "committedDate": "2020-05-08T18:32:18Z", "type": "commit"}, {"oid": "6b2c41f606968ddc53c5954aba425828b3b30fbc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6b2c41f606968ddc53c5954aba425828b3b30fbc", "message": "fix index out of range exception", "committedDate": "2020-05-08T19:23:44Z", "type": "commit"}, {"oid": "d634f05e6279320f439254c698cda49d212e45dc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d634f05e6279320f439254c698cda49d212e45dc", "message": "fix formatting issues", "committedDate": "2020-05-08T20:35:56Z", "type": "commit"}, {"oid": "43e94ed59d0f7f5a9c3aaf877db152297f83514e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/43e94ed59d0f7f5a9c3aaf877db152297f83514e", "message": "fix formatting issues", "committedDate": "2020-05-08T21:20:08Z", "type": "commit"}, {"oid": "b587d59ceea3e2dce0378d28c9e681ee603bbcf2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b587d59ceea3e2dce0378d28c9e681ee603bbcf2", "message": "fix formatting issues. Finally figured out how to check formatting in local workspace", "committedDate": "2020-05-08T21:26:26Z", "type": "commit"}, {"oid": "3f889df85828c3e1a9c4b0b60589cfe9c80684d8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3f889df85828c3e1a9c4b0b60589cfe9c80684d8", "message": "Adds addComposedMappedModels and testComposedSchemaOneOfDiscriminatorMap", "committedDate": "2020-03-26T16:38:10Z", "type": "commit"}, {"oid": "e5e4bfda2d49281570d77947e6144a3095041edb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e5e4bfda2d49281570d77947e6144a3095041edb", "message": "Requires that discriminators be required properties", "committedDate": "2020-03-26T16:38:11Z", "type": "commit"}, {"oid": "8d8a7498955e7102768c9452f26ccd51ce5afcf4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8d8a7498955e7102768c9452f26ccd51ce5afcf4", "message": "Strengthens discriminaotr validation, adds better error messages, adds schema oneof samples", "committedDate": "2020-03-26T16:38:11Z", "type": "commit"}, {"oid": "7cc1329e783b39635a11cbf6ca7243c00fd43224", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7cc1329e783b39635a11cbf6ca7243c00fd43224", "message": "Adds oneOf and anyOf invalidDiscriminator tests", "committedDate": "2020-03-26T16:38:11Z", "type": "commit"}, {"oid": "662eaffea7f95660f1cc13c4f3512e0397dd5be3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/662eaffea7f95660f1cc13c4f3512e0397dd5be3", "message": "Runs ensure up to date", "committedDate": "2020-03-26T16:41:33Z", "type": "commit"}, {"oid": "5044db9b8402b23b118eb09cd33302ce0d8f29d8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5044db9b8402b23b118eb09cd33302ce0d8f29d8", "message": "Updates incorrect addOneOfInterfaceModel invocation", "committedDate": "2020-03-26T16:55:51Z", "type": "commit"}, {"oid": "dcd45406ec048643f6e1b90de843ec5ecbde9895", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dcd45406ec048643f6e1b90de843ec5ecbde9895", "message": "Runs ensure-up-to-date", "committedDate": "2020-03-26T18:16:22Z", "type": "commit"}, {"oid": "de8e694d7c80f439137699b328d3d59c77c14386", "url": "https://github.com/OpenAPITools/openapi-generator/commit/de8e694d7c80f439137699b328d3d59c77c14386", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into discriminator-fix", "committedDate": "2020-04-01T19:38:08Z", "type": "commit"}, {"oid": "6a0d479d98ac775afb93313f85987c07ff42063d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6a0d479d98ac775afb93313f85987c07ff42063d", "message": "Fix NPE when at least one extension is defined but not x-discriminator-value", "committedDate": "2020-04-01T19:39:06Z", "type": "commit"}, {"oid": "778d250bd9391d2e891637056ab07b6eba21740b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/778d250bd9391d2e891637056ab07b6eba21740b", "message": "Adds addComposedMappedModels and testComposedSchemaOneOfDiscriminatorMap", "committedDate": "2020-04-01T22:25:27Z", "type": "commit"}, {"oid": "ff6f1ffd375917ba19d02286954b0ae82ce9c014", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ff6f1ffd375917ba19d02286954b0ae82ce9c014", "message": "Requires that discriminators be required properties", "committedDate": "2020-04-01T22:27:26Z", "type": "commit"}, {"oid": "4d4910ab3f301be1be356fc0a14c67e01571a673", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4d4910ab3f301be1be356fc0a14c67e01571a673", "message": "Strengthens discriminaotr validation, adds better error messages, adds schema oneof samples", "committedDate": "2020-04-01T22:27:26Z", "type": "commit"}, {"oid": "78e171aaa3d00a9029f596eabd59ea9d482ba064", "url": "https://github.com/OpenAPITools/openapi-generator/commit/78e171aaa3d00a9029f596eabd59ea9d482ba064", "message": "Adds oneOf and anyOf invalidDiscriminator tests", "committedDate": "2020-04-01T22:27:27Z", "type": "commit"}, {"oid": "a089a457ae68d51fc7037f6015e2f5b33a89f61f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a089a457ae68d51fc7037f6015e2f5b33a89f61f", "message": "Updates incorrect addOneOfInterfaceModel invocation", "committedDate": "2020-04-01T22:28:01Z", "type": "commit"}, {"oid": "9461ab49bd0dc86068b1bb125a773d0072e1dd8c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9461ab49bd0dc86068b1bb125a773d0072e1dd8c", "message": "Runs ensure-up-to-date", "committedDate": "2020-04-01T22:28:02Z", "type": "commit"}, {"oid": "035436f960c508d9b73fa2acaebec3f6e0ea7195", "url": "https://github.com/OpenAPITools/openapi-generator/commit/035436f960c508d9b73fa2acaebec3f6e0ea7195", "message": "Adds updates from Sebastien Rosset", "committedDate": "2020-04-01T22:28:02Z", "type": "commit"}, {"oid": "75ff63c1e606b563dbe559b2bc191de62659a7ff", "url": "https://github.com/OpenAPITools/openapi-generator/commit/75ff63c1e606b563dbe559b2bc191de62659a7ff", "message": "Removes newlines", "committedDate": "2020-04-02T02:28:00Z", "type": "commit"}, {"oid": "41de5b54ebfc246e5a2ccc3b945bc3dd3d042633", "url": "https://github.com/OpenAPITools/openapi-generator/commit/41de5b54ebfc246e5a2ccc3b945bc3dd3d042633", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T05:29:36Z", "type": "commit"}, {"oid": "8fb94f272d4ce7d5e998ccd25e684772504d6b44", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8fb94f272d4ce7d5e998ccd25e684772504d6b44", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T05:47:28Z", "type": "commit"}, {"oid": "f31712b42e78bda1db3039995b234c17366c6e85", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f31712b42e78bda1db3039995b234c17366c6e85", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T05:49:04Z", "type": "commit"}, {"oid": "bf53e4f5b4106d46aaae85dd9d023bf89bedc082", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bf53e4f5b4106d46aaae85dd9d023bf89bedc082", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T05:49:05Z", "type": "commit"}, {"oid": "dc395481a96c28dbbbbeebe72f55c6cb9a7b4680", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dc395481a96c28dbbbbeebe72f55c6cb9a7b4680", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T05:51:04Z", "type": "commit"}, {"oid": "af27e33c159e08ab443ea0c4b50e4df928188879", "url": "https://github.com/OpenAPITools/openapi-generator/commit/af27e33c159e08ab443ea0c4b50e4df928188879", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T14:42:37Z", "type": "commit"}, {"oid": "80745cf59939439ca270ee2002a3081227cf4e16", "url": "https://github.com/OpenAPITools/openapi-generator/commit/80745cf59939439ca270ee2002a3081227cf4e16", "message": "Add documentation and new getValidDiscriminatorMappings function", "committedDate": "2020-04-02T15:17:34Z", "type": "commit"}, {"oid": "95342892c44b9a52efd1b40e56dbfe0071e296bd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/95342892c44b9a52efd1b40e56dbfe0071e296bd", "message": "throw exception if discriminator mappingName argument is null", "committedDate": "2020-04-02T23:22:54Z", "type": "commit"}, {"oid": "7f73adfa764e55505ed3f9a86ef3d01cec085f94", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f73adfa764e55505ed3f9a86ef3d01cec085f94", "message": "handle scenario when composed schema has 'null' type", "committedDate": "2020-04-02T23:24:44Z", "type": "commit"}, {"oid": "34c4c09ef49cea7519e3cf7c1e7af8619560d706", "url": "https://github.com/OpenAPITools/openapi-generator/commit/34c4c09ef49cea7519e3cf7c1e7af8619560d706", "message": "remove extraneous characters in comments", "committedDate": "2020-04-02T23:25:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4OTU1OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r403489558", "bodyText": "Where are we using this? I can't find a call site.\nIf we aren't using it, why include it?\nOur users can already iterate through discriminator MappedModels.\nIf we want to provide an easier way to do this, why not put it in the CodegenDiscriminator class instead?", "author": "spacether", "createdAt": "2020-04-04T16:38:57Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenModel.java", "diffHunk": "@@ -203,6 +211,63 @@ public void setDiscriminator(CodegenDiscriminator discriminator) {\n         this.discriminator = discriminator;\n     }\n \n+    /**\n+     * Returns a list of allowed discriminator mapping values for this schema object.\n+     * \n+     * The list of all possible schema discriminator mapping values is obtained\n+     * from explicit discriminator mapping values in the OpenAPI document, and from\n+     * inherited discriminators through oneOf, allOf, anyOf.\n+     * For example, a discriminator may be defined in a 'Pet' schema as shown below.\n+     * The Dog and Cat schemas inherit the discriminator through the allOf reference.\n+     * In the 'Pet' schema, the supported discriminator mapping values for the\n+     * 'objectType' properties are 'Dog' and 'Cat'.\n+     * The allowed discriminator mapping value for the Dog schema is 'Dog'.\n+     * The allowed discriminator mapping value for the Cat schema is 'Dog'.\n+     * \n+     * Pet:\n+     *   type: object\n+     *   discriminator:\n+     *     propertyName: objectType\n+     *   required:\n+     *     - objectType\n+     *   properties:\n+     *     objectType:\n+     *     type: string\n+     * Dog:\n+     *   allOf:\n+     *   - $ref: '#/components/schemas/Pet'\n+     *   - type: object\n+     *     properties:\n+     *       p1:\n+     *         type: string\n+     * Cat:\n+     *   allOf:\n+     *   - $ref: '#/components/schemas/Pet'\n+     *   - type: object\n+     *     properties:\n+     *       p2:\n+     *         type: string\n+     * \n+     * @return the list of allowed discriminator mapping values.\n+     */\n+    public List<String> getAllowedDiscriminatorMappingValues() {\n+        List<String> mappingValues = new ArrayList<String>();\n+        for (CodegenDiscriminator.MappedModel mm : discriminator.getMappedModels()) {\n+            if (name.equals(mm.getModelName())) {\n+                mappingValues.add(mm.getMappingName());\n+            }\n+        }     \n+        return mappingValues;   \n+    }", "originalCommit": "34c4c09ef49cea7519e3cf7c1e7af8619560d706", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MTkzNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r403491936", "bodyText": "I am planning to remove it, after your PR has been merged. I accidentally cherry picked some commits I didn't want to merge", "author": "sebastien-rosset", "createdAt": "2020-04-04T17:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4OTU1OA=="}], "type": "inlineReview"}, {"oid": "c7f1bce202ff72ab096548cc20094cdeda9afae8", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c7f1bce202ff72ab096548cc20094cdeda9afae8", "message": "Merge branch 'master' into issue_4904_fix_composed_schema_discriminator_map", "committedDate": "2020-04-07T15:27:29Z", "type": "commit"}, {"oid": "2b389fa291e0c319db070c424a3c1225b94b1373", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2b389fa291e0c319db070c424a3c1225b94b1373", "message": "Uses df.isString", "committedDate": "2020-04-07T18:10:43Z", "type": "commit"}, {"oid": "90593ce4e90eca3ffaca398810c638e0624ea357", "url": "https://github.com/OpenAPITools/openapi-generator/commit/90593ce4e90eca3ffaca398810c638e0624ea357", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of github.com:spacether/openapi-generator into issue_4904_fix_composed_schema_discriminator_map", "committedDate": "2020-04-07T18:11:01Z", "type": "commit"}, {"oid": "fe1669a1ac4269a7bc7fed064975974a65b4f6be", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fe1669a1ac4269a7bc7fed064975974a65b4f6be", "message": "sync from upstream branch", "committedDate": "2020-04-07T23:25:15Z", "type": "commit"}, {"oid": "6492b76aa8332609ed82096999928da9f5242f89", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6492b76aa8332609ed82096999928da9f5242f89", "message": "Traverse discriminators to resolve discriminator mapping", "committedDate": "2020-04-07T23:26:52Z", "type": "commit"}, {"oid": "bf0e3a32d69dba5828af54d9ed5158b30989add4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bf0e3a32d69dba5828af54d9ed5158b30989add4", "message": "Fixes tests be correctly setting df.isString", "committedDate": "2020-04-08T06:11:38Z", "type": "commit"}, {"oid": "86d1fc32cf718beb2f34f8606f9172d519ff250a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/86d1fc32cf718beb2f34f8606f9172d519ff250a", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-04-08T13:27:11Z", "type": "commit"}, {"oid": "1208da860541872b8dc1363d425330cdb94f7658", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1208da860541872b8dc1363d425330cdb94f7658", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into discriminator-fix", "committedDate": "2020-04-08T13:27:56Z", "type": "commit"}, {"oid": "b65aca8d43eb16beabf0723af92efa4e761ba72f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b65aca8d43eb16beabf0723af92efa4e761ba72f", "message": "Remove unused method", "committedDate": "2020-04-08T13:55:25Z", "type": "commit"}, {"oid": "250cd145daa37f07e5b9e5d8e2d371c71f8ae8a3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/250cd145daa37f07e5b9e5d8e2d371c71f8ae8a3", "message": "Updates discriminatorExplicitMappingVerbose description per PR feedback", "committedDate": "2020-04-10T17:30:19Z", "type": "commit"}, {"oid": "ba21728de65031d6f2848d1c422bd4d8ef807edd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ba21728de65031d6f2848d1c422bd4d8ef807edd", "message": "Adds description of how mappedModels is populated", "committedDate": "2020-04-10T17:55:41Z", "type": "commit"}, {"oid": "7a98f6e68cd64a3363052019367b65c11653243c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7a98f6e68cd64a3363052019367b65c11653243c", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into discriminator-fix", "committedDate": "2020-04-10T22:24:57Z", "type": "commit"}, {"oid": "c50563918fcbde4e2e6a4cb4368fc11eecd3539e", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c50563918fcbde4e2e6a4cb4368fc11eecd3539e", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-04-10T22:25:15Z", "type": "commit"}, {"oid": "dd0113acf6ad4c2c2d28da5185b16bb20bff280f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dd0113acf6ad4c2c2d28da5185b16bb20bff280f", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into issue_4904_fix_composed_schema_discriminator_map", "committedDate": "2020-04-10T22:28:54Z", "type": "commit"}, {"oid": "8b427fe85a9a7e472fda7f99a26ebf7432b316ff", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8b427fe85a9a7e472fda7f99a26ebf7432b316ff", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-04-10T22:33:01Z", "type": "commit"}, {"oid": "d18729570a223332cbf9601abf02b3bd0389f4fc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d18729570a223332cbf9601abf02b3bd0389f4fc", "message": "Adds the suggestion exception raising when a MappedModel mappingName is null", "committedDate": "2020-04-12T18:16:58Z", "type": "commit"}, {"oid": "721a72072fe88b6dcb551ae8f025d5413522abb7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/721a72072fe88b6dcb551ae8f025d5413522abb7", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into issue_4904_fix_composed_schema_discriminator_map", "committedDate": "2020-04-14T04:53:25Z", "type": "commit"}, {"oid": "01f7e5b077978f8c1d6ebc1a3a917ab14adbfa89", "url": "https://github.com/OpenAPITools/openapi-generator/commit/01f7e5b077978f8c1d6ebc1a3a917ab14adbfa89", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-04-14T04:54:44Z", "type": "commit"}, {"oid": "1d62e7bf3503201fba509490dd27132791de12a2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1d62e7bf3503201fba509490dd27132791de12a2", "message": "Resolves merge conflicts in docs", "committedDate": "2020-04-14T16:57:44Z", "type": "commit"}, {"oid": "29bc8e65542eaad84f277957c14028a7fe44de84", "url": "https://github.com/OpenAPITools/openapi-generator/commit/29bc8e65542eaad84f277957c14028a7fe44de84", "message": "Actually resolves merge conflicts", "committedDate": "2020-04-16T00:37:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwODg3MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r410708871", "bodyText": "This option needs clarification since it's currently doing a lot.\n\nCan we remove the \"verbose\" since that's not really relevant to the user?\nThe term mapping would indicate to users who are familiar with our options that this would take a string in the format key=value, which is not the case.\nThe option is triggering OpenAPI 3.x logic, but doesn't indicate that clearly here.\n\nMight I recommend changing this to something more like:\n@Option(name = {\"--legacy-discriminators\"}, title = \"Support legacy logic for evaluating discriminators\", description = CodegenConstants.DISCRIMINATOR_EXPLICIT_MAPPING_VERBOSE_DESC)\nprivate Boolean legacyDiscriminators;\n\nThis value would need to default to true until the new logic becomes default (I don't recall if it's now default or not).\nThe value would then have to be applied to CodegenConfigurator, which is not done in Generate.java here. The same default would have to be done in the Maven and Gradle plugins, with a task to add the feature option to those. We also have a new SBT plugin (pending first release) where this would have to be added.", "author": "jimschubert", "createdAt": "2020-04-18T15:02:25Z", "path": "modules/openapi-generator-cli/src/main/java/org/openapitools/codegen/cmd/Generate.java", "diffHunk": "@@ -240,6 +240,9 @@\n     @Option(name = {\"--generate-alias-as-model\"}, title = \"generate alias (array, map) as model\", description = CodegenConstants.GENERATE_ALIAS_AS_MODEL_DESC)\n     private Boolean generateAliasAsModel;\n \n+    @Option(name = {\"--discriminator-explicit-mapping-verbose\"}, title = \"explicitly define a discriminator on all models which have one, add verbose mapping to that discriminator, validate discriminators\", description = CodegenConstants.DISCRIMINATOR_EXPLICIT_MAPPING_VERBOSE_DESC)", "originalCommit": "01f7e5b077978f8c1d6ebc1a3a917ab14adbfa89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNzc0MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414717741", "bodyText": "This was mistakenly commented in the wrong PR. I am marking it resolved.", "author": "sebastien-rosset", "createdAt": "2020-04-24T16:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwODg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwOTEzNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r410709137", "bodyText": "Potential NPE. You protect in the constructor, but not in the property setter.", "author": "jimschubert", "createdAt": "2020-04-18T15:03:54Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenDiscriminator.java", "diffHunk": "@@ -63,15 +90,36 @@ public void setMappedModels(Set<MappedModel> mappedModels) {\n         this.mappedModels = mappedModels;\n     }\n \n-    public static class MappedModel {\n+    /**\n+     * An object to hold discriminator mappings between payload values and schema names or\n+     * references.\n+     *\n+     * In the OpenAPI document, the discriminator \"mapping\" attribute is optional.\n+     * In scenarios where the value of the discriminator field does not match the schema name\n+     * or implicit mapping is not possible, an optional mapping definition MAY be used.\n+     * In OpenAPITools codegen, the MappedModel is the union of all the discriminator mappings,\n+     * both explicitly defined in the OpenAPI document and inherited from oneOf/allOf/anyOf.\n+     */\n+    public static class MappedModel implements Comparable<MappedModel>{\n+        // The value of the discriminator property in the payload.\n         private String mappingName;\n+        // The OAS schema name. It is obtained from the OAS document, and the string value\n+        // is converted to a sanitized, internal representation within codegen.\n         private String modelName;\n \n         public MappedModel(String mappingName, String modelName) {\n+            if (mappingName == null) {\n+                throw new RuntimeException(\"Discriminator mapping name cannot be null for model '\" + modelName + \"'\");\n+            }\n             this.mappingName = mappingName;\n             this.modelName = modelName;\n         }\n \n+        @Override\n+        public int compareTo(MappedModel other) {\n+            return getMappingName().compareTo(other.getMappingName());", "originalCommit": "01f7e5b077978f8c1d6ebc1a3a917ab14adbfa89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwOTMyMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r410709321", "bodyText": "This should not be marked as protected as it reduces maintainability. If necessary for tests, please remove private to make it package private.", "author": "jimschubert", "createdAt": "2020-04-18T15:05:20Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -156,7 +156,7 @@ private Boolean getGeneratorPropertyDefaultSwitch(final String key, final Boolea\n         return defaultValue;\n     }\n \n-    private void configureGeneratorProperties() {\n+    protected void configureGeneratorProperties() {", "originalCommit": "01f7e5b077978f8c1d6ebc1a3a917ab14adbfa89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwOTQyNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r410709426", "bodyText": "This should not be marked protected.", "author": "jimschubert", "createdAt": "2020-04-18T15:06:30Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -394,7 +394,7 @@ private void generateModel(List<File> files, Map<String, Object> models, String\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private void generateModels(List<File> files, List<Object> allModels, List<String> unusedModels) {\n+    protected void generateModels(List<File> files, List<Object> allModels, List<String> unusedModels) {", "originalCommit": "01f7e5b077978f8c1d6ebc1a3a917ab14adbfa89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca0fa6e5248f8b5ca537ce528a17ec9c40a7ab56", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ca0fa6e5248f8b5ca537ce528a17ec9c40a7ab56", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into issue_4904_fix_composed_schema_discriminator_map", "committedDate": "2020-04-18T16:05:29Z", "type": "commit"}, {"oid": "7aa07b5818fa0d222234fc2ee792b4fbc481ba97", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7aa07b5818fa0d222234fc2ee792b4fbc481ba97", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-04-18T16:05:53Z", "type": "commit"}, {"oid": "a7a5ccaaeb971ddce9badd8c497c1becda9aa93f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7a5ccaaeb971ddce9badd8c497c1becda9aa93f", "message": "Adds addComposedMappedModels and testComposedSchemaOneOfDiscriminatorMap", "committedDate": "2020-04-23T04:48:58Z", "type": "commit"}, {"oid": "cb6c4bd20deb5c7bf7bc53647ff070a224dbc835", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cb6c4bd20deb5c7bf7bc53647ff070a224dbc835", "message": "Requires that discriminators be required properties", "committedDate": "2020-04-23T04:48:59Z", "type": "commit"}, {"oid": "53ba1fa0e6a259406cfbfb91dea7b672f7b9bfb3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/53ba1fa0e6a259406cfbfb91dea7b672f7b9bfb3", "message": "Strengthens discriminaotr validation, adds better error messages, adds schema oneof samples", "committedDate": "2020-04-23T04:48:59Z", "type": "commit"}, {"oid": "23c5c3882486eacbf51b8a0db71ec8b9391dd015", "url": "https://github.com/OpenAPITools/openapi-generator/commit/23c5c3882486eacbf51b8a0db71ec8b9391dd015", "message": "Adds oneOf and anyOf invalidDiscriminator tests", "committedDate": "2020-04-23T04:48:59Z", "type": "commit"}, {"oid": "e3b6522282c59d036f1b83fdc9e59e89cd1a5187", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e3b6522282c59d036f1b83fdc9e59e89cd1a5187", "message": "Updates incorrect addOneOfInterfaceModel invocation", "committedDate": "2020-04-23T04:49:00Z", "type": "commit"}, {"oid": "7b85b2d55d5233bed6cb19364dfe8356dee7787f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7b85b2d55d5233bed6cb19364dfe8356dee7787f", "message": "Runs ensure-up-to-date", "committedDate": "2020-04-23T04:49:00Z", "type": "commit"}, {"oid": "53ab46b6f11a11c39b6dbac7f87ffeb6ef333f93", "url": "https://github.com/OpenAPITools/openapi-generator/commit/53ab46b6f11a11c39b6dbac7f87ffeb6ef333f93", "message": "Adds updates from Sebastien Rosset", "committedDate": "2020-04-23T04:49:00Z", "type": "commit"}, {"oid": "7242b940046082a5de6736417c02dc00677b5d2a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7242b940046082a5de6736417c02dc00677b5d2a", "message": "Removes newlines", "committedDate": "2020-04-23T04:49:00Z", "type": "commit"}, {"oid": "ddefbea34453b47de69a474b2d87670f06792baf", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ddefbea34453b47de69a474b2d87670f06792baf", "message": "Uses df.isString", "committedDate": "2020-04-23T04:49:01Z", "type": "commit"}, {"oid": "831c99a892a785adb148b6c2192b13e74759faf6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/831c99a892a785adb148b6c2192b13e74759faf6", "message": "Fixes tests be correctly setting df.isString", "committedDate": "2020-04-23T04:49:01Z", "type": "commit"}, {"oid": "6ab57c86f9a888a6921846f8efbaf818ee4afb40", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ab57c86f9a888a6921846f8efbaf818ee4afb40", "message": "Updates discriminatorExplicitMappingVerbose description per PR feedback", "committedDate": "2020-04-23T04:53:35Z", "type": "commit"}, {"oid": "607f638301fec5019b64e38d2e2faab46cdf75e6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/607f638301fec5019b64e38d2e2faab46cdf75e6", "message": "Adds description of how mappedModels is populated", "committedDate": "2020-04-23T04:53:35Z", "type": "commit"}, {"oid": "bc23d3e2b4a78c68b6a54a80b584cb79235663ba", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bc23d3e2b4a78c68b6a54a80b584cb79235663ba", "message": "Adds the suggestion exception raising when a MappedModel mappingName is null", "committedDate": "2020-04-23T04:53:35Z", "type": "commit"}, {"oid": "052bccc86b7ff84f7c7b255befae6938fcbb1b77", "url": "https://github.com/OpenAPITools/openapi-generator/commit/052bccc86b7ff84f7c7b255befae6938fcbb1b77", "message": "Actually resolves merge conflicts", "committedDate": "2020-04-23T04:57:58Z", "type": "commit"}, {"oid": "89c8025dc75af769225802840209ead5a7277a5d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/89c8025dc75af769225802840209ead5a7277a5d", "message": "Switches two methods to package private because they are needed for testing", "committedDate": "2020-04-23T04:57:59Z", "type": "commit"}, {"oid": "936c0b1a3b4fa675791190a3dcab594e3e1c6ad6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/936c0b1a3b4fa675791190a3dcab594e3e1c6ad6", "message": "Allow nulls in MappedModel.getMappingName", "committedDate": "2020-04-23T04:57:59Z", "type": "commit"}, {"oid": "9e7a0ca3445d5d3edd2d2582976187da5142223d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9e7a0ca3445d5d3edd2d2582976187da5142223d", "message": "Merge branch 'issue_4904_fix_composed_schema_discriminator_map' of https://github.com/spacether/openapi-generator into issue_4904_fix_composed_schema_discriminator_map", "committedDate": "2020-04-23T05:51:34Z", "type": "commit"}, {"oid": "79ec2d5a10eb023d28f50e7e7613bce3f4e5cb4a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/79ec2d5a10eb023d28f50e7e7613bce3f4e5cb4a", "message": "resolve merge conflicts", "committedDate": "2020-04-23T06:25:36Z", "type": "commit"}, {"oid": "6c571f047c2eff98defb4db7d34ea9d4a19407c5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6c571f047c2eff98defb4db7d34ea9d4a19407c5", "message": "Remove exception when mappingName is null value", "committedDate": "2020-04-23T14:42:20Z", "type": "commit"}, {"oid": "7b8269cc816c5452fd8dd9140c75ecf32c6d1f10", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7b8269cc816c5452fd8dd9140c75ecf32c6d1f10", "message": "Remove exception when mappingName is null value", "committedDate": "2020-04-23T14:42:58Z", "type": "commit"}, {"oid": "f106c679550a3e2db53b2493f4f48a3a85787c43", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f106c679550a3e2db53b2493f4f48a3a85787c43", "message": "resolve merge conflicts", "committedDate": "2020-04-24T16:26:11Z", "type": "commit"}, {"oid": "79bbab8741ca98b89f029ae5a96bde03458ad219", "url": "https://github.com/OpenAPITools/openapi-generator/commit/79bbab8741ca98b89f029ae5a96bde03458ad219", "message": "resolve merge conflicts", "committedDate": "2020-04-24T16:38:47Z", "type": "commit"}, {"oid": "55b6ff457cb61876b837d56ea76e59554d5fcd69", "url": "https://github.com/OpenAPITools/openapi-generator/commit/55b6ff457cb61876b837d56ea76e59554d5fcd69", "message": "resolve merge conflicts", "committedDate": "2020-04-24T16:40:43Z", "type": "commit"}, {"oid": "46669f100b82643f1405f9ed2fd1f34fd1d1caf9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/46669f100b82643f1405f9ed2fd1f34fd1d1caf9", "message": "Execute scripts in the bin directory", "committedDate": "2020-04-24T16:49:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414739244", "bodyText": "@sebastien-rosset @wing328 @jimschubert what should we allow here, valid objects and empty state values?\nNull only? Null and empty dict?\nIs this a language specific decision? If so we should separate it off as a separate method.\n\nFor example for python values like empty dict {} and None are valid empty values here.\nFor golang the zero value of a map is nil.", "author": "spacether", "createdAt": "2020-04-24T17:23:02Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -2526,36 +2526,60 @@ private Discriminator recursiveGetDiscriminator(Schema sc, OpenAPI openAPI) {\n             if (composedSchema.getOneOf() != null && composedSchema.getOneOf().size() != 0) {\n                 // All oneOf definitions must contain the discriminator\n                 Integer hasDiscriminatorCnt = 0;\n+                Integer hasNullTypeCnt = 0;\n                 Set<String> discriminatorsPropNames = new HashSet<>();\n                 for  (Schema oneOf: composedSchema.getOneOf()) {\n+                    if (ModelUtils.isNullType(oneOf)) {\n+                        // The null type does not have a discriminator. Skip.\n+                        hasNullTypeCnt++;\n+                        continue;\n+                    }", "originalCommit": "46669f100b82643f1405f9ed2fd1f34fd1d1caf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NDY1Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414744652", "bodyText": "The \"null type\" (supported in OAS >=3.1) is when the OAS schema is:\ntype: 'null'\nIt means the value in the payload must be null. This can typically be list as one child of \"oneOf\". In OAS >= 3.1 the \"nullable\" attribute is being deprecated, which means in the future it won't be possible to have something like this:\ntype: object\nnullable: true", "author": "sebastien-rosset", "createdAt": "2020-04-24T17:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2MjE4Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414762186", "bodyText": "So I am not asking if it is in the specification. I understand that it is. I am asking if we should also allow an empty object payload here as synonymous with null because that is a python zeto state like null/None.", "author": "spacether", "createdAt": "2020-04-24T18:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2OTQzNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414769437", "bodyText": "The change is to specifically cover the following scenario:\noneOf:\n  - type: null\n  - $ref: abc   # possibly a list of inline types or references to types.\nWithout this PR, the count of oneOf children was not be equal to the number of discriminators. That's because the \"null\" value does not have a discriminator. As a result, the disc.setPropertyName() was not set, which is incorrect.\n\nI am asking if we should also allow an empty object payload\n\nCan you give how this would be modeled in the OAS document? Here we are parsing OAS schemas, not payloads.", "author": "sebastien-rosset", "createdAt": "2020-04-24T18:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MTIyNg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414791226", "bodyText": "We are describing payloads here. An empty object represents an empty dict. Should this definition be valid?\nComposedSchema:\nOneOf\n- type: null\n- type: object\n- $ref: AnyType\n- $ref: Pet\ndiscriminator:\n  PropertyName: petType\n\nAnyType:\n  description: I allow any type including null", "author": "spacether", "createdAt": "2020-04-24T18:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NTgxMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414795810", "bodyText": "I think that AnyType should not be allowed because list/int/float/str/bytes/date/datetime primitives are different data types than an intended dict/pojo.\nMy preference is to allow null and empty object but log a warning to the user that this definition is not compliant with the v3 specification but we allow it.\nThese feel like bleeding edge decisions that we are making.\nNote: type: \"null\" will be in the upcoming 3.1.0 spec definition", "author": "spacether", "createdAt": "2020-04-24T18:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjUzNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414822534", "bodyText": "Thanks for the clarification. Here is one statement in the OAS 3.1 spec:\n\nWhen using the discriminator, inline schemas will not be considered.\n\nThe way I interpret is that if there is a mix of oneOf children, some through a $ref, others inline, then at runtime:\n\nFor the inline schemas, use JSON schema validation to determine if the payload matches the schema. Don't use the discriminator.\nFor $ref schemas, don't use JSON schema validation, and instead use the discriminator.\n\nSo if my understand is correct, the schema you have provided is a valid OAS schema. HOWEVER, at runtime it will fail validation in many situations, because of the presence of \"AnyType\". It will fail when the payload is \"null\", object and Pet (because these payloads are also \"Any Type\", which means the payload matches TWO oneOf child schemas. It would work if the payload is a primitive type or an array. So it would be much better to write the OAS spec differently.\nI'd rather address these use cases in separate PRs. IMO, we would ideally add validation rules to the --validate option.\nIn the OAS 3.0.3 spec:\n\nWhen used, the discriminator will be the name of the property that decides which schema definition validates the structure of the model. As such, the discriminator field MUST be a required field.", "author": "sebastien-rosset", "createdAt": "2020-04-24T19:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNDc4Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414834787", "bodyText": "Our users could just as easily write a spec that looks like this:\nAnimal:\noneOf:\n- $ref: NullType\n- $ref: Pet\ndiscriminator:\n  propertyName: animalType\n\nNullType:\ntype: \"null\"\n\nShould we handle that referenced null case? I think that we should.\nYou are proposing accepting nulls in a payload when a strict interpretation of the spec would require the presence of a pojo with a discriminator.propertyName at not null. So I feel like we're in uncharted territory here.\nIn your comment you mention that it would fail because it would double match null on AnyType and type: None. That wasn't the point that I was trying to make. The questions that I am trying to get your answers on are:\n\nShould AnyType be allowed in oneOf generally?\n\nMy vote is no. If they have this in the oneOf then it has to be the only entry. Also then they can't have any allOf definition. Which is equivalent to just using the AnyType directly.\n\n\nShould empty object type: object be allowed in oneOf?\n\nI think that we should allow type: \"null\" in oneOf with a discriminator but I do not think that that behavior is defined in the draft 3.1.0 spec yet.", "author": "spacether", "createdAt": "2020-04-24T20:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODU0MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414838540", "bodyText": "When mixing types in oneOf, should we disallow the use of allOf + anyOf in the composed schema?\nOtherwise you could have the invalid:\nCreature:\nallOf:\n- $ref: Animal\noneOf:\n- type: int\n- $ref: Pet", "author": "spacether", "createdAt": "2020-04-24T20:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NzUyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414847520", "bodyText": "Our users could just as easily write a spec that looks like this:\nAnimal:\noneOf:\n- $ref: NullType\n- $ref: Pet\ndiscriminator:\n  propertyName: animalType\n\nNullType:\ntype: \"null\"\n\nShould we handle that referenced null case? I think that we should.\n\nI don't think this matches what is written in the OAS 3.1 spec. If the type is a ref and there is a discriminator, the discriminator must be used. That's my understand of the spec. So your YAML is not equivalent.\n\nYou are proposing accepting nulls in a payload when a strict interpretation of the spec would require the presence of a pojo with a discriminator.propertyName at not null. So I feel like we're in uncharted territory here.\n\nWhich part of the spec (3.1) makes you think that? It is indeed my understanding, reading the many threads over the null type that the OAS spec authors intend to replace \"nullable\" with type: 'null' as oneOf child.\n\nIn your comment you mention that it would fail because it would double match null on AnyType and type: None. That wasn't the point that I was trying to make. The questions that I am trying to get your answers on are:\n\nShould AnyType be allowed in oneOf generally?\n\n\nYes, absolutely, for example below it's a sensible way to say the payload can be anything, including null. I think there is even one thread about this specific item in the draft discussions that led to 3.1, I will try to dig it up.\noneOf:\n- type: 'null'\n- description: any type\n\n\nMy vote is no. If they have this in the oneOf then it has to be the only entry. Also then they can't have any allOf definition. Which is equivalent to just using the AnyType directly.\nShould empty object type: object be allowed in oneOf?\n\nI think that we should allow type: \"null\" in oneOf with a discriminator but I do not think that that behavior is defined in the draft 3.1.0 spec yet.\n\nIt is, though admittedly to comprehend the spec it helps to read the many discussion threads rather than the spec itself. One relevant statement of the spec is:\n\nWhen using the discriminator, inline schemas will not be considered.", "author": "sebastien-rosset", "createdAt": "2020-04-24T20:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1MTI0NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414851244", "bodyText": "When mixing types in oneOf, should we disallow the use of allOf + anyOf in the composed schema?\n\nSorry I'm not getting this part. Did you mean a schema like this where there is \"anyOf\"? In the example you provide it is allOf + oneOf, not anyOf.\nCreature:\nallOf:\n- $ref: Animal\nanyOf:\n- type: int\n- $ref: Pet\n\nAlso, can you help me understand how your questions are relevant to this PR? I'm just trying to handle the \"null\" case here, I'm certainly not claiming to cover all possible composed scenarios + \"null\". Is there something specific you see that I am breaking with the support of the \"null\" value? Or are you extending the discussion to other use cases?\n\nOtherwise you could have the invalid:\nCreature:\nallOf:\n- $ref: Animal\noneOf:\n- type: int\n- $ref: Pet", "author": "sebastien-rosset", "createdAt": "2020-04-24T20:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NDg5Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414854893", "bodyText": "This is may be warranted as a separate discussion. It is relevant here because we are mixing types in oneOf definition and we may want to not allow allOf or anyOf definition when we have mixed types like this.\nThe use case that I was highlighting is:\noneOf w/ mixed types AND (allOf AND/OR anyOf)\nCreature:\nallOf:\n- $ref: Animal\noneOf:\n- type: int\n- $ref: Pet\n\nor this case\n\nCreature:\nanyOf:\n- $ref: Animal\noneOf:\n- type: int\n- $ref: Pet", "author": "spacether", "createdAt": "2020-04-24T20:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1ODk3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5809#discussion_r414858970", "bodyText": "Which part of the spec (3.1) makes you think that? It is indeed my understanding, reading the many threads over the null type that the OAS spec authors intend to replace \"nullable\" with type: 'null' as oneOf child.\n\nWhen using the discriminator, inline schemas will not be considered.\nI read this as don't deserialize inline schemas when a discriminator exists in a composed schema (don't allow/process null payloads).\nWhen the discriminator exists in the spec or the payload?\nWhen the discriminator exists in the spec it must be in the payload per:\nThe expectation now is that a property with name petType MUST be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document. ...", "author": "spacether", "createdAt": "2020-04-24T20:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTI0NA=="}], "type": "inlineReview"}, {"oid": "4a40e33261cd8939e9fdb2cbcbf5a63e897cbe92", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4a40e33261cd8939e9fdb2cbcbf5a63e897cbe92", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-04-27T15:54:17Z", "type": "commit"}, {"oid": "037b7eef1b03127795d2f5788c573acf8368c8c1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/037b7eef1b03127795d2f5788c573acf8368c8c1", "message": "Fix CI issues and address PR review comments: better documentation and fix white space issues.", "committedDate": "2020-04-27T16:03:27Z", "type": "commit"}, {"oid": "cc0bb25b3b0048b8a34d2c7b7e8b3ca436bed507", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cc0bb25b3b0048b8a34d2c7b7e8b3ca436bed507", "message": "Fix CI issues and address PR review comments: better documentation and fix white space issues.", "committedDate": "2020-04-27T16:12:22Z", "type": "commit"}, {"oid": "9bf9f3d1ea5095e7fe976d61b0a7a4d44a7ca909", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9bf9f3d1ea5095e7fe976d61b0a7a4d44a7ca909", "message": "resolve merge conflicts", "committedDate": "2020-04-30T14:52:02Z", "type": "commit"}, {"oid": "7a37221041843f20f961d53be5dd39741d62876a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7a37221041843f20f961d53be5dd39741d62876a", "message": "resolve merge conflicts", "committedDate": "2020-05-04T14:46:18Z", "type": "commit"}, {"oid": "4132d4517725c225ba9d2920c00f99c8ef5f7301", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4132d4517725c225ba9d2920c00f99c8ef5f7301", "message": "run sample scripts", "committedDate": "2020-05-04T14:46:32Z", "type": "commit"}, {"oid": "9a596c7e39a48ee8e56bbc1cd81cfadb669c48c9", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9a596c7e39a48ee8e56bbc1cd81cfadb669c48c9", "message": "resolve merge conflicts", "committedDate": "2020-05-04T14:51:13Z", "type": "commit"}, {"oid": "e7c439647ffc8984f7380d5235cd0a741eaf0528", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e7c439647ffc8984f7380d5235cd0a741eaf0528", "message": "fix end-of-line issue", "committedDate": "2020-05-04T14:54:34Z", "type": "commit"}, {"oid": "fe2b2da246e2a3d4edca716fce862a7a588e9318", "url": "https://github.com/OpenAPITools/openapi-generator/commit/fe2b2da246e2a3d4edca716fce862a7a588e9318", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-05-04T15:15:52Z", "type": "commit"}, {"oid": "0fdd7e33f14b4384fa167535143e71e795525b65", "url": "https://github.com/OpenAPITools/openapi-generator/commit/0fdd7e33f14b4384fa167535143e71e795525b65", "message": "resolve merge conflicts", "committedDate": "2020-05-05T01:25:08Z", "type": "commit"}, {"oid": "9849c837623a9fab600e6aed882158eef60d442f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9849c837623a9fab600e6aed882158eef60d442f", "message": "resolve merge issues", "committedDate": "2020-05-05T05:18:58Z", "type": "commit"}, {"oid": "bca2110cfb9cf2fd152754b3970b7d839460fbac", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bca2110cfb9cf2fd152754b3970b7d839460fbac", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-05-05T14:31:40Z", "type": "commit"}, {"oid": "93297051892c88d22b7f8d187ce7c97cf6a9b206", "url": "https://github.com/OpenAPITools/openapi-generator/commit/93297051892c88d22b7f8d187ce7c97cf6a9b206", "message": "Handle case when discriminator is not specified in input data", "committedDate": "2020-05-05T15:40:57Z", "type": "commit"}, {"oid": "b1329d282d41a91529556325621b8e1223fe159f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b1329d282d41a91529556325621b8e1223fe159f", "message": "Merge branch 'master' of github.com:CiscoM31/openapi-generator into discriminator-fix", "committedDate": "2020-05-06T21:53:03Z", "type": "commit"}, {"oid": "1fd8ba36d97054195b09999d8bd1f88d33dc88c3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1fd8ba36d97054195b09999d8bd1f88d33dc88c3", "message": "minor changes and add code comments", "committedDate": "2020-05-07T00:49:45Z", "type": "commit"}, {"oid": "ca44756249ef04b3b2f31acde553a93824fa8b9c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ca44756249ef04b3b2f31acde553a93824fa8b9c", "message": "Refactor get_discriminator code", "committedDate": "2020-05-07T01:46:55Z", "type": "commit"}, {"oid": "f80ca49200ebaa1eb938b7084fb74a3764984b5f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f80ca49200ebaa1eb938b7084fb74a3764984b5f", "message": "Add unit test with missing discriminator property", "committedDate": "2020-05-07T15:42:56Z", "type": "commit"}]}