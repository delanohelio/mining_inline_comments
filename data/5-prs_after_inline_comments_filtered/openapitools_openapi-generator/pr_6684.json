{"pr_number": 6684, "pr_title": "Improve sttpOpenApiClient generator", "pr_createdAt": "2020-06-16T13:41:06Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/6684", "timeline": [{"oid": "a09822e169ea0be1d1a9658141cf6bed84137ed6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a09822e169ea0be1d1a9658141cf6bed84137ed6", "message": "Base changes\n- remove apiModel\n- do not preinline response type\n- define sbt version\n- replace ApiRequestT with Request\n- update sttp version", "committedDate": "2020-06-16T13:44:24Z", "type": "commit"}, {"oid": "a4124448cab670d23a573f5d49e38dbc1d55a667", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a4124448cab670d23a573f5d49e38dbc1d55a667", "message": "Fix rendering too many colons", "committedDate": "2020-06-16T13:44:24Z", "type": "commit"}, {"oid": "e8c3890ae141daab6a201b3d7e17aa39a9339516", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e8c3890ae141daab6a201b3d7e17aa39a9339516", "message": "Fix formatting", "committedDate": "2020-06-16T13:44:24Z", "type": "commit"}, {"oid": "e3a065486b4bbe2dfefc0cf56cbf92d698d93603", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e3a065486b4bbe2dfefc0cf56cbf92d698d93603", "message": "Allow sttp version customization", "committedDate": "2020-06-16T13:44:25Z", "type": "commit"}, {"oid": "4ac88948881c79431077e4a1cca2ebdcedb1aa08", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4ac88948881c79431077e4a1cca2ebdcedb1aa08", "message": "Add option to return errors in terms of monadError", "committedDate": "2020-06-16T13:44:25Z", "type": "commit"}, {"oid": "88908e29dc71a86de7da2e959a9bb3396955f4e1", "url": "https://github.com/OpenAPITools/openapi-generator/commit/88908e29dc71a86de7da2e959a9bb3396955f4e1", "message": "Add option to customize jodaTime version", "committedDate": "2020-06-16T13:44:26Z", "type": "commit"}, {"oid": "5c255e49f436356bc613220ba0e7ff6f7346030c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5c255e49f436356bc613220ba0e7ff6f7346030c", "message": "Add option to customize json4s version", "committedDate": "2020-06-16T13:44:26Z", "type": "commit"}, {"oid": "6c5d7920dedfc77c67b6dd4c511915340e955af2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6c5d7920dedfc77c67b6dd4c511915340e955af2", "message": "Simplify jsonHandling", "committedDate": "2020-06-16T13:44:26Z", "type": "commit"}, {"oid": "3b27bc5610995db1767c3b009677a945440c8b25", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3b27bc5610995db1767c3b009677a945440c8b25", "message": "Remove helpers as such functionality was added to sttp", "committedDate": "2020-06-16T13:44:26Z", "type": "commit"}, {"oid": "cac19fc5f566ecbb527360508941d4230738c452", "url": "https://github.com/OpenAPITools/openapi-generator/commit/cac19fc5f566ecbb527360508941d4230738c452", "message": "Rename file", "committedDate": "2020-06-16T13:44:27Z", "type": "commit"}, {"oid": "86ec499e20829087f7b13ab772ed8472ef4dca11", "url": "https://github.com/OpenAPITools/openapi-generator/commit/86ec499e20829087f7b13ab772ed8472ef4dca11", "message": "Fix uploading multipart data", "committedDate": "2020-06-16T13:44:27Z", "type": "commit"}, {"oid": "97fd17fbf32204db864eccb4050469cd7e4100a7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/97fd17fbf32204db864eccb4050469cd7e4100a7", "message": "Extract common abstraction for generator properties", "committedDate": "2020-06-16T13:44:27Z", "type": "commit"}, {"oid": "a7a15a2c987daed38d75b7ee8ebdb98318d418fb", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7a15a2c987daed38d75b7ee8ebdb98318d418fb", "message": "Add partial circe support", "committedDate": "2020-06-16T13:44:27Z", "type": "commit"}, {"oid": "551bb35b7acf1c899878505d51c6baeec8e7ca85", "url": "https://github.com/OpenAPITools/openapi-generator/commit/551bb35b7acf1c899878505d51c6baeec8e7ca85", "message": "Remove unsed method", "committedDate": "2020-06-16T13:44:28Z", "type": "commit"}, {"oid": "2a91b11e68079bf303a695daff43b6482ac3c89d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2a91b11e68079bf303a695daff43b6482ac3c89d", "message": "Refactor picking up json library", "committedDate": "2020-06-16T13:44:28Z", "type": "commit"}, {"oid": "a3805310f3475cdfe1a73bd8e535abb141cdd4d0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a3805310f3475cdfe1a73bd8e535abb141cdd4d0", "message": "Add missing DateSerializers for circe", "committedDate": "2020-06-16T13:44:28Z", "type": "commit"}, {"oid": "5cab35de96bab3f93b1fff6a930fdb3cb28e3aa0", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5cab35de96bab3f93b1fff6a930fdb3cb28e3aa0", "message": "Simplify credentials", "committedDate": "2020-06-16T13:44:28Z", "type": "commit"}, {"oid": "714f93055040103b8671bd1a6d24c4a577173547", "url": "https://github.com/OpenAPITools/openapi-generator/commit/714f93055040103b8671bd1a6d24c4a577173547", "message": "Simplify code", "committedDate": "2020-06-16T13:44:29Z", "type": "commit"}, {"oid": "a5f0a054c019ea61091454cc5ff1494f6ac8b7ac", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a5f0a054c019ea61091454cc5ff1494f6ac8b7ac", "message": "Update docs", "committedDate": "2020-06-16T13:45:56Z", "type": "commit"}, {"oid": "dfca277654a9dc89f86bd1d281a0b1cfc18ffaf4", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dfca277654a9dc89f86bd1d281a0b1cfc18ffaf4", "message": "Fix auto formatting", "committedDate": "2020-06-16T13:45:57Z", "type": "commit"}, {"oid": "5efad875885d024c4da466d7d0282f6224445c4c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5efad875885d024c4da466d7d0282f6224445c4c", "message": "Simplify code", "committedDate": "2020-06-16T13:46:00Z", "type": "commit"}, {"oid": "3c836f9296f38e5f50fa39cfbe80ca8f450cdfe6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3c836f9296f38e5f50fa39cfbe80ca8f450cdfe6", "message": "SttpCodegen should not depend on akka", "committedDate": "2020-06-16T13:46:00Z", "type": "commit"}, {"oid": "a377921a832828e5497bdfc74f5ab58828f97710", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a377921a832828e5497bdfc74f5ab58828f97710", "message": "Rewrite properties handling", "committedDate": "2020-06-16T13:46:00Z", "type": "commit"}, {"oid": "d176eebb61def78e848e089636b12335d35a2b63", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d176eebb61def78e848e089636b12335d35a2b63", "message": "Fix mainProperty application", "committedDate": "2020-06-16T13:46:00Z", "type": "commit"}, {"oid": "f7c384c01a5e878255f0b65c1c541359872a7c04", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7c384c01a5e878255f0b65c1c541359872a7c04", "message": "Pass credentials to methods as regular parameters", "committedDate": "2020-06-16T13:46:00Z", "type": "commit"}, {"oid": "4a5ff2791d74c147eee0437db0f08422890edcbd", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4a5ff2791d74c147eee0437db0f08422890edcbd", "message": "Put auth params first", "committedDate": "2020-06-16T13:46:01Z", "type": "commit"}, {"oid": "e2df636df394c713d68b9223d960999d58bd2bc7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2df636df394c713d68b9223d960999d58bd2bc7", "message": "[Sttp] SeparateErrorChannel is true by default", "committedDate": "2020-06-16T13:46:55Z", "type": "commit"}, {"oid": "b3017bb838a59e9c698f4a130bae6f41e01063ba", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b3017bb838a59e9c698f4a130bae6f41e01063ba", "message": "[Sttp] Simplify generated build.sbt", "committedDate": "2020-06-16T13:46:55Z", "type": "commit"}, {"oid": "86150cb88f5bdbb39a5d38fee0fb7fb8456c5861", "url": "https://github.com/OpenAPITools/openapi-generator/commit/86150cb88f5bdbb39a5d38fee0fb7fb8456c5861", "message": "[Sttp] Regenerate project", "committedDate": "2020-06-16T13:46:55Z", "type": "commit"}, {"oid": "4588362969fa47fa2aa9e126fbb7a36e3af860ce", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4588362969fa47fa2aa9e126fbb7a36e3af860ce", "message": "[Sttp] Update default version to 2.2.0", "committedDate": "2020-06-16T13:46:56Z", "type": "commit"}, {"oid": "4588362969fa47fa2aa9e126fbb7a36e3af860ce", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4588362969fa47fa2aa9e126fbb7a36e3af860ce", "message": "[Sttp] Update default version to 2.2.0", "committedDate": "2020-06-16T13:46:56Z", "type": "forcePushed"}, {"oid": "b572673b70b7076f67ac072c771f629ffbc57106", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b572673b70b7076f67ac072c771f629ffbc57106", "message": "Regenerate petstore sample", "committedDate": "2020-06-16T14:03:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjE5NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443226194", "bodyText": "seems like an error as mainPackage is missed here.\nalso when you fix this next scenario will probably failed:\n\"--mainPackage=my.custom.package&--apiPackage=my.custom.api.different.package\"\nbecause Map can have those properties in unwanted order\nCould you please cover this method with unit tests?", "author": "chameleon82", "createdAt": "2020-06-21T14:40:42Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -87,4 +207,290 @@ public CodegenOperation fromOperation(String path,\n         op.path = encodePath(path);\n         return op;\n     }\n+\n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+\n+    @Override\n+    public String escapeReservedWord(String name) {\n+        if (this.reservedWordsMappings().containsKey(name)) {\n+            return this.reservedWordsMappings().get(name);\n+        }\n+        return \"`\" + name + \"`\";\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        if (registerNonStandardStatusCodes) {\n+            try {\n+                @SuppressWarnings(\"unchecked\")\n+                Map<String, ArrayList<CodegenOperation>> opsMap = (Map<String, ArrayList<CodegenOperation>>) objs.get(\"operations\");\n+                HashSet<Integer> unknownCodes = new HashSet<Integer>();\n+                for (CodegenOperation operation : opsMap.get(\"operation\")) {\n+                    for (CodegenResponse response : operation.responses) {\n+                        if (\"default\".equals(response.code)) {\n+                            continue;\n+                        }\n+                        try {\n+                            int code = Integer.parseInt(response.code);\n+                            if (code >= 600) {\n+                                unknownCodes.add(code);\n+                            }\n+                        } catch (NumberFormatException e) {\n+                            LOGGER.error(\"Status code is not an integer : response.code\", e);\n+                        }\n+                    }\n+                }\n+                if (!unknownCodes.isEmpty()) {\n+                    additionalProperties.put(\"unknownStatusCodes\", unknownCodes);\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(\"Unable to find operations List\", e);\n+            }\n+        }\n+        return super.postProcessOperationsWithModels(objs, allModels);\n+    }\n+\n+    @Override\n+    public List<CodegenSecurity> fromSecurity(Map<String, SecurityScheme> schemes) {\n+        final List<CodegenSecurity> codegenSecurities = super.fromSecurity(schemes);\n+        if (!removeOAuthSecurities) {\n+            return codegenSecurities;\n+        }\n+\n+        // Remove OAuth securities\n+        Iterator<CodegenSecurity> it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            if (security.isOAuth) {\n+                it.remove();\n+            }\n+        }\n+        // Adapt 'hasMore'\n+        it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            security.hasMore = it.hasNext();\n+        }\n+\n+        if (codegenSecurities.isEmpty()) {\n+            return null;\n+        }\n+        return codegenSecurities;\n+    }\n+\n+    @Override\n+    public String toParamName(String name) {\n+        return formatIdentifier(name, false);\n+    }\n+\n+    @Override\n+    public String toEnumName(CodegenProperty property) {\n+        return formatIdentifier(property.baseName, true);\n+    }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        if (p.getRequired() != null && p.getRequired().contains(p.getName())) {\n+            return \"None\";\n+        }\n+\n+        if (ModelUtils.isBooleanSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateTimeSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isNumberSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            String inner = getSchemaType(getAdditionalProperties(p));\n+            return \"Map[String, \" + inner + \"].empty \";\n+        } else if (ModelUtils.isArraySchema(p)) {\n+            ArraySchema ap = (ArraySchema) p;\n+            String inner = getSchemaType(ap.getItems());\n+            if (ModelUtils.isSet(ap)) {\n+                return \"Set[\" + inner + \"].empty \";\n+            }\n+            return \"Seq[\" + inner + \"].empty \";\n+        } else if (ModelUtils.isStringSchema(p)) {\n+            return null;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static abstract class Property<T> {\n+        final String name;\n+        final String description;\n+        final T defaultValue;\n+\n+        private Property(String name, String description, T defaultValue) {\n+            this.name = name;\n+            this.description = description;\n+            this.defaultValue = defaultValue;\n+        }\n+\n+        public abstract CliOption toCliOption();\n+\n+        public abstract void updateAdditionalProperties(Map<String, Object> additionalProperties);\n+\n+        public abstract T getValue(Map<String, Object> additionalProperties);\n+\n+        public void setValue(Map<String, Object> additionalProperties, T value) {\n+            additionalProperties.put(name, value);\n+        }\n+    }\n+\n+    private static class StringProperty extends Property<String> {\n+        private StringProperty(String name, String description, String defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public CliOption toCliOption() {\n+            return CliOption.newString(name, description).defaultValue(defaultValue);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            if (!additionalProperties.containsKey(name)) {\n+                additionalProperties.put(name, defaultValue);\n+            }\n+        }\n+\n+        @Override\n+        public String getValue(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(name, defaultValue).toString();\n+        }\n+    }\n+\n+    private static class BooleanProperty extends Property<Boolean> {\n+        private BooleanProperty(String name, String description, Boolean defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public CliOption toCliOption() {\n+            return CliOption.newBoolean(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            Boolean value = getValue(additionalProperties);\n+            additionalProperties.put(name, value);\n+        }\n+\n+        @Override\n+        public Boolean getValue(Map<String, Object> additionalProperties) {\n+            return Boolean.valueOf(additionalProperties.getOrDefault(name, defaultValue.toString()).toString());\n+        }\n+    }\n+\n+    private static class JsonLibraryProperty extends StringProperty {\n+        private static final String JSON4S = \"json4s\";\n+        private static final String CIRCE = \"circe\";\n+\n+        private JsonLibraryProperty() {\n+            super(\"jsonLibrary\", \"Json library to use. Possible values are: json4s and circe.\", JSON4S);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            String value = getValue(additionalProperties);\n+            if (value.equals(CIRCE) || value.equals(JSON4S)) {\n+                additionalProperties.put(CIRCE, value.equals(CIRCE));\n+                additionalProperties.put(JSON4S, value.equals(JSON4S));\n+            } else {\n+                IllegalArgumentException exception =\n+                        new IllegalArgumentException(\"Invalid json library: \" + value + \". Must be \" + CIRCE + \" \" +\n+                                \"or \" + JSON4S);\n+                throw exception;\n+            }\n+        }\n+    }\n+\n+    private static class MainPackageProperty extends StringProperty {\n+\n+        private MainPackageProperty() {\n+            super(\"mainPackage\", \"Top-level package name, which defines 'apiPackage', 'modelPackage', \" +\n+                    \"'invokerPackage'\", DEFAULT_PACKAGE_NAME);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            if (additionalProperties.containsKey(name)) {", "originalCommit": "b572673b70b7076f67ac072c771f629ffbc57106", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3NTQ4MQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443975481", "bodyText": "Hmm, this is definitively a good idea to cover it with some tests", "author": "ghostbuster91", "createdAt": "2020-06-23T05:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NjkxMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443996911", "bodyText": "It isn't an error since the mainPackage property isn't used anywhere. All packages are specified by apiPackage, modelPackage and invokerPackage properties", "author": "ghostbuster91", "createdAt": "2020-06-23T06:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjMzOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443226338", "bodyText": "some of those imports and mappings already exists in AbstractScalaCodegen. Is it possible to reuse them instead of overwrite with the same values?", "author": "chameleon82", "createdAt": "2020-06-21T14:42:11Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -16,50 +16,170 @@\n \n package org.openapitools.codegen.languages;\n \n+import com.samskivert.mustache.Mustache;\n+import com.samskivert.mustache.Template;\n import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n import io.swagger.v3.oas.models.servers.Server;\n-import org.openapitools.codegen.CodegenConfig;\n-import org.openapitools.codegen.CodegenOperation;\n-import org.openapitools.codegen.SupportingFile;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n import org.openapitools.codegen.meta.GeneratorMetadata;\n import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.meta.features.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n-import java.util.List;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.*;\n+\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+\n+public class ScalaSttpClientCodegen extends AbstractScalaCodegen implements CodegenConfig {\n+    private static final StringProperty STTP_CLIENT_VERSION = new StringProperty(\"sttpClientVersion\", \"The version of \" +\n+            \"sttp client\", \"2.2.0\");\n+    private static final BooleanProperty USE_SEPARATE_ERROR_CHANNEL = new BooleanProperty(\"separateErrorChannel\",\n+            \"Whether to return response as \" +\n+                    \"F[Either[ResponseError[ErrorType], ReturnType]]] or to flatten \" +\n+                    \"response's error raising them through enclosing monad (F[ReturnType]).\", true);\n+    private static final StringProperty JODA_TIME_VERSION = new StringProperty(\"jodaTimeVersion\", \"The version of \" +\n+            \"joda-time library\", \"2.10.6\");\n+    private static final StringProperty JSON4S_VERSION = new StringProperty(\"json4sVersion\", \"The version of json4s \" +\n+            \"library\", \"3.6.8\");\n+    private static final StringProperty CIRCE_VERSION = new StringProperty(\"circeVersion\", \"The version of circe \" +\n+            \"library\", \"0.13.0\");\n+    private static final JsonLibraryProperty JSON_LIBRARY_PROPERTY = new JsonLibraryProperty();\n+\n+    private static final String DEFAULT_PACKAGE_NAME = \"org.openapitools.client\";\n+    private static final MainPackageProperty MAIN_PACKAGE = new MainPackageProperty();\n+    private static final StringProperty MODEL_PACKAGE = new StringProperty(CodegenConstants.MODEL_PACKAGE,\n+            CodegenConstants.MODEL_PACKAGE_DESC, DEFAULT_PACKAGE_NAME + \".model\");\n+    private static final StringProperty INVOKER_PACKAGE = new StringProperty(CodegenConstants.INVOKER_PACKAGE,\n+            CodegenConstants.MODEL_PACKAGE_DESC, DEFAULT_PACKAGE_NAME + \".core\");\n+    private static final StringProperty API_PACKAGE = new StringProperty(CodegenConstants.API_PACKAGE,\n+            CodegenConstants.API_PACKAGE_DESC, DEFAULT_PACKAGE_NAME + \".api\");\n+\n+    private static final List<Property> properties = Arrays.asList(STTP_CLIENT_VERSION, USE_SEPARATE_ERROR_CHANNEL,\n+            JODA_TIME_VERSION, JSON4S_VERSION, CIRCE_VERSION, JSON_LIBRARY_PROPERTY,MAIN_PACKAGE, API_PACKAGE,\n+            MODEL_PACKAGE, INVOKER_PACKAGE);\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(ScalaSttpClientCodegen.class);\n+\n+    protected String mainPackage = \"org.openapitools.client\";\n+    protected String groupId = \"org.openapitools\";\n+    protected String artifactId = \"openapi-client\";\n+    protected String artifactVersion = \"1.0.0\";\n+    protected boolean registerNonStandardStatusCodes = true;\n+    protected boolean renderJavadoc = true;\n+    protected boolean removeOAuthSecurities = true;\n \n-public class ScalaSttpClientCodegen extends ScalaAkkaClientCodegen implements CodegenConfig {\n     public ScalaSttpClientCodegen() {\n         super();\n         generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata)\n                 .stability(Stability.BETA)\n                 .build();\n \n-        embeddedTemplateDir = templateDir = \"scala-sttp\";\n+        modifyFeatureSet(features -> features\n+                .includeDocumentationFeatures(DocumentationFeature.Readme)\n+                .wireFormatFeatures(EnumSet.of(WireFormatFeature.JSON, WireFormatFeature.XML, WireFormatFeature.Custom))\n+                .securityFeatures(EnumSet.of(\n+                        SecurityFeature.BasicAuth,\n+                        SecurityFeature.ApiKey,\n+                        SecurityFeature.BearerToken\n+                ))\n+                .excludeGlobalFeatures(\n+                        GlobalFeature.XMLStructureDefinitions,\n+                        GlobalFeature.Callbacks,\n+                        GlobalFeature.LinkObjects,\n+                        GlobalFeature.ParameterStyling\n+                )\n+                .excludeSchemaSupportFeatures(\n+                        SchemaSupportFeature.Polymorphism\n+                )\n+                .excludeParameterFeatures(\n+                        ParameterFeature.Cookie\n+                )\n+                .includeClientModificationFeatures(\n+                        ClientModificationFeature.BasePath,\n+                        ClientModificationFeature.UserAgent\n+                )\n+        );\n+\n         outputFolder = \"generated-code/scala-sttp\";\n+        modelTemplateFiles.put(\"model.mustache\", \".scala\");\n+        apiTemplateFiles.put(\"api.mustache\", \".scala\");\n+        embeddedTemplateDir = templateDir = \"scala-sttp\";\n+        apiPackage = mainPackage + \".api\";\n+        modelPackage = mainPackage + \".model\";\n+        invokerPackage = mainPackage + \".core\";\n+\n+        setReservedWordsLowerCase(\n+                Arrays.asList(\n+                        \"abstract\", \"case\", \"catch\", \"class\", \"def\", \"do\", \"else\", \"extends\",\n+                        \"false\", \"final\", \"finally\", \"for\", \"forSome\", \"if\", \"implicit\",\n+                        \"import\", \"lazy\", \"match\", \"new\", \"null\", \"object\", \"override\", \"package\",\n+                        \"private\", \"protected\", \"return\", \"sealed\", \"super\", \"this\", \"throw\",\n+                        \"trait\", \"try\", \"true\", \"type\", \"val\", \"var\", \"while\", \"with\", \"yield\")\n+        );\n+\n+        additionalProperties.put(CodegenConstants.GROUP_ID, groupId);\n+        additionalProperties.put(CodegenConstants.ARTIFACT_ID, artifactId);\n+        additionalProperties.put(CodegenConstants.ARTIFACT_VERSION, artifactVersion);\n+        if (renderJavadoc) {\n+            additionalProperties.put(\"javadocRenderer\", new JavadocLambda());\n+        }\n+        additionalProperties.put(\"fnCapitalize\", new CapitalizeLambda());\n+        additionalProperties.put(\"fnCamelize\", new CamelizeLambda(false));\n+        additionalProperties.put(\"fnEnumEntry\", new EnumEntryLambda());\n+\n+        importMapping.remove(\"Seq\");\n+        importMapping.remove(\"List\");\n+        importMapping.remove(\"Set\");\n+        importMapping.remove(\"Map\");\n+\n+        typeMapping = new HashMap<>();", "originalCommit": "b572673b70b7076f67ac072c771f629ffbc57106", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5Mzk2MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443993960", "bodyText": "Actually there are not the same. In AbstractScalaCodegenonly importMappings are defined, while here we remove some of them and redefine them as typeMappings or instantiationTypes.", "author": "ghostbuster91", "createdAt": "2020-06-23T06:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjMzOA=="}], "type": "inlineReview"}, {"oid": "91dd9b036ebc6b53efacdc32d7c16a89ccb342f6", "url": "https://github.com/OpenAPITools/openapi-generator/commit/91dd9b036ebc6b53efacdc32d7c16a89ccb342f6", "message": "Restore cross-compilation to scala 2.12", "committedDate": "2020-06-23T06:15:21Z", "type": "commit"}, {"oid": "9242bc4b661686d554786e65a671deb41ae3a4d7", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9242bc4b661686d554786e65a671deb41ae3a4d7", "message": "Restore syntax with companion object for api definitions", "committedDate": "2020-06-23T06:30:30Z", "type": "commit"}, {"oid": "de82caf10a7b2192a179ebb3354ded82425f3751", "url": "https://github.com/OpenAPITools/openapi-generator/commit/de82caf10a7b2192a179ebb3354ded82425f3751", "message": "Remove specifying reservedWords as it was already specified in upper class", "committedDate": "2020-06-23T06:43:03Z", "type": "commit"}, {"oid": "d868eda1df48acccb0b420cec437068d6ade472c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d868eda1df48acccb0b420cec437068d6ade472c", "message": "Refactor mainPackageProperty and add tests for it", "committedDate": "2020-06-23T08:32:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1ODM5Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r445958393", "bodyText": "oh that's nice\n0.12+ stops supporting scala 2.11", "author": "eugeniyk", "createdAt": "2020-06-26T04:16:09Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -16,50 +16,154 @@\n \n package org.openapitools.codegen.languages;\n \n+import com.samskivert.mustache.Mustache;\n+import com.samskivert.mustache.Template;\n import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n import io.swagger.v3.oas.models.servers.Server;\n-import org.openapitools.codegen.CodegenConfig;\n-import org.openapitools.codegen.CodegenOperation;\n-import org.openapitools.codegen.SupportingFile;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n import org.openapitools.codegen.meta.GeneratorMetadata;\n import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.meta.features.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n-import java.util.List;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.*;\n+\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+\n+public class ScalaSttpClientCodegen extends AbstractScalaCodegen implements CodegenConfig {\n+    private static final StringProperty STTP_CLIENT_VERSION = new StringProperty(\"sttpClientVersion\", \"The version of \" +\n+            \"sttp client\", \"2.2.0\");\n+    private static final BooleanProperty USE_SEPARATE_ERROR_CHANNEL = new BooleanProperty(\"separateErrorChannel\",\n+            \"Whether to return response as \" +\n+                    \"F[Either[ResponseError[ErrorType], ReturnType]]] or to flatten \" +\n+                    \"response's error raising them through enclosing monad (F[ReturnType]).\", true);\n+    private static final StringProperty JODA_TIME_VERSION = new StringProperty(\"jodaTimeVersion\", \"The version of \" +\n+            \"joda-time library\", \"2.10.6\");\n+    private static final StringProperty JSON4S_VERSION = new StringProperty(\"json4sVersion\", \"The version of json4s \" +\n+            \"library\", \"3.6.8\");\n+    private static final StringProperty CIRCE_VERSION = new StringProperty(\"circeVersion\", \"The version of circe \" +", "originalCommit": "d868eda1df48acccb0b420cec437068d6ade472c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f9cd3e9657c748e0fa8c78c7aaab25fdcef7ea3", "url": "https://github.com/OpenAPITools/openapi-generator/commit/1f9cd3e9657c748e0fa8c78c7aaab25fdcef7ea3", "message": "Update samples/client/petstore/scala-sttp/build.sbt\n\nCo-authored-by: eugeniyk <keatrance@gmail.com>", "committedDate": "2020-06-29T11:04:05Z", "type": "commit"}, {"oid": "a6647d287f304f4b41bed5e19918ee8e5a415909", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a6647d287f304f4b41bed5e19918ee8e5a415909", "message": "Update sbt to 1.3.12", "committedDate": "2020-06-29T11:09:57Z", "type": "commit"}, {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81", "url": "https://github.com/OpenAPITools/openapi-generator/commit/8f5a98f036a846ba113dba13e9b8cb839b9a6f81", "message": "Run bin/utils/ensure-up-to-date and commit changes", "committedDate": "2020-06-29T13:05:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2MTY0NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r448061645", "bodyText": "Note that at we have well-tested lambdas in the org.openapitools.codegen.templating.mustache package which handle camel case, title case, uppercase, lowercase, etc. We should probably move these to use the tested lambdas at some point.", "author": "jimschubert", "createdAt": "2020-07-01T01:10:03Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -87,4 +191,300 @@ public CodegenOperation fromOperation(String path,\n         op.path = encodePath(path);\n         return op;\n     }\n+\n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+\n+    @Override\n+    public String escapeReservedWord(String name) {\n+        if (this.reservedWordsMappings().containsKey(name)) {\n+            return this.reservedWordsMappings().get(name);\n+        }\n+        return \"`\" + name + \"`\";\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        if (registerNonStandardStatusCodes) {\n+            try {\n+                @SuppressWarnings(\"unchecked\")\n+                Map<String, ArrayList<CodegenOperation>> opsMap = (Map<String, ArrayList<CodegenOperation>>) objs.get(\"operations\");\n+                HashSet<Integer> unknownCodes = new HashSet<Integer>();\n+                for (CodegenOperation operation : opsMap.get(\"operation\")) {\n+                    for (CodegenResponse response : operation.responses) {\n+                        if (\"default\".equals(response.code)) {\n+                            continue;\n+                        }\n+                        try {\n+                            int code = Integer.parseInt(response.code);\n+                            if (code >= 600) {\n+                                unknownCodes.add(code);\n+                            }\n+                        } catch (NumberFormatException e) {\n+                            LOGGER.error(\"Status code is not an integer : response.code\", e);\n+                        }\n+                    }\n+                }\n+                if (!unknownCodes.isEmpty()) {\n+                    additionalProperties.put(\"unknownStatusCodes\", unknownCodes);\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(\"Unable to find operations List\", e);\n+            }\n+        }\n+        return super.postProcessOperationsWithModels(objs, allModels);\n+    }\n+\n+    @Override\n+    public List<CodegenSecurity> fromSecurity(Map<String, SecurityScheme> schemes) {\n+        final List<CodegenSecurity> codegenSecurities = super.fromSecurity(schemes);\n+        if (!removeOAuthSecurities) {\n+            return codegenSecurities;\n+        }\n+\n+        // Remove OAuth securities\n+        Iterator<CodegenSecurity> it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            if (security.isOAuth) {\n+                it.remove();\n+            }\n+        }\n+        // Adapt 'hasMore'\n+        it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            security.hasMore = it.hasNext();\n+        }\n+\n+        if (codegenSecurities.isEmpty()) {\n+            return null;\n+        }\n+        return codegenSecurities;\n+    }\n+\n+    @Override\n+    public String toParamName(String name) {\n+        return formatIdentifier(name, false);\n+    }\n+\n+    @Override\n+    public String toEnumName(CodegenProperty property) {\n+        return formatIdentifier(property.baseName, true);\n+    }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        if (p.getRequired() != null && p.getRequired().contains(p.getName())) {\n+            return \"None\";\n+        }\n+\n+        if (ModelUtils.isBooleanSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateTimeSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isNumberSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            String inner = getSchemaType(getAdditionalProperties(p));\n+            return \"Map[String, \" + inner + \"].empty \";\n+        } else if (ModelUtils.isArraySchema(p)) {\n+            ArraySchema ap = (ArraySchema) p;\n+            String inner = getSchemaType(ap.getItems());\n+            if (ModelUtils.isSet(ap)) {\n+                return \"Set[\" + inner + \"].empty \";\n+            }\n+            return \"Seq[\" + inner + \"].empty \";\n+        } else if (ModelUtils.isStringSchema(p)) {\n+            return null;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static abstract class Property<T> {\n+        final String name;\n+        final String description;\n+        final T defaultValue;\n+\n+        public Property(String name, String description, T defaultValue) {\n+            this.name = name;\n+            this.description = description;\n+            this.defaultValue = defaultValue;\n+        }\n+\n+        public abstract List<CliOption> toCliOptions();\n+\n+        public abstract void updateAdditionalProperties(Map<String, Object> additionalProperties);\n+\n+        public abstract T getValue(Map<String, Object> additionalProperties);\n+\n+        public void setValue(Map<String, Object> additionalProperties, T value) {\n+            additionalProperties.put(name, value);\n+        }\n+    }\n+\n+    public static class StringProperty extends Property<String> {\n+        public StringProperty(String name, String description, String defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public List<CliOption> toCliOptions() {\n+            return Collections.singletonList(CliOption.newString(name, description).defaultValue(defaultValue));\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            if (!additionalProperties.containsKey(name)) {\n+                additionalProperties.put(name, defaultValue);\n+            }\n+        }\n+\n+        @Override\n+        public String getValue(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(name, defaultValue).toString();\n+        }\n+    }\n+\n+    public static class BooleanProperty extends Property<Boolean> {\n+        public BooleanProperty(String name, String description, Boolean defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public List<CliOption> toCliOptions() {\n+            return Collections.singletonList(CliOption.newBoolean(name, description, defaultValue));\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            Boolean value = getValue(additionalProperties);\n+            additionalProperties.put(name, value);\n+        }\n+\n+        @Override\n+        public Boolean getValue(Map<String, Object> additionalProperties) {\n+            return Boolean.valueOf(additionalProperties.getOrDefault(name, defaultValue.toString()).toString());\n+        }\n+    }\n+\n+    public static class JsonLibraryProperty extends StringProperty {\n+        private static final String JSON4S = \"json4s\";\n+        private static final String CIRCE = \"circe\";\n+\n+        public JsonLibraryProperty() {\n+            super(\"jsonLibrary\", \"Json library to use. Possible values are: json4s and circe.\", JSON4S);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            String value = getValue(additionalProperties);\n+            if (value.equals(CIRCE) || value.equals(JSON4S)) {\n+                additionalProperties.put(CIRCE, value.equals(CIRCE));\n+                additionalProperties.put(JSON4S, value.equals(JSON4S));\n+            } else {\n+                IllegalArgumentException exception =\n+                        new IllegalArgumentException(\"Invalid json library: \" + value + \". Must be \" + CIRCE + \" \" +\n+                                \"or \" + JSON4S);\n+                throw exception;\n+            }\n+        }\n+    }\n+\n+    public static class PackageProperty extends StringProperty {\n+\n+        public PackageProperty() {\n+            super(\"mainPackage\", \"Top-level package name, which defines 'apiPackage', 'modelPackage', \" +\n+                    \"'invokerPackage'\", DEFAULT_PACKAGE_NAME);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            String mainPackage = getValue(additionalProperties);\n+            if (!additionalProperties.containsKey(CodegenConstants.API_PACKAGE)) {\n+                String apiPackage = mainPackage + \".api\";\n+                additionalProperties.put(CodegenConstants.API_PACKAGE, apiPackage);\n+            }\n+            if (!additionalProperties.containsKey(CodegenConstants.MODEL_PACKAGE)) {\n+                String modelPackage = mainPackage + \".model\";\n+                additionalProperties.put(CodegenConstants.MODEL_PACKAGE, modelPackage);\n+            }\n+            if (!additionalProperties.containsKey(CodegenConstants.INVOKER_PACKAGE)) {\n+                String invokerPackage = mainPackage + \".core\";\n+                additionalProperties.put(CodegenConstants.INVOKER_PACKAGE, invokerPackage);\n+            }\n+        }\n+\n+        public String getApiPackage(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(CodegenConstants.API_PACKAGE, DEFAULT_PACKAGE_NAME + \".api\").toString();\n+        }\n+\n+        public String getModelPackage(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(CodegenConstants.MODEL_PACKAGE, DEFAULT_PACKAGE_NAME + \".model\").toString();\n+        }\n+\n+        public String getInvokerPackage(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(CodegenConstants.INVOKER_PACKAGE, DEFAULT_PACKAGE_NAME + \".core\").toString();\n+        }\n+    }\n+\n+    private static abstract class CustomLambda implements Mustache.Lambda {", "originalCommit": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzOTc3Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r448139773", "bodyText": "I agree. I just copy-pasted it from scala-akka generator AFAIR. We should change it there as well.", "author": "ghostbuster91", "createdAt": "2020-07-01T06:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2MTY0NQ=="}], "type": "inlineReview"}]}