{"pr_number": 5518, "pr_title": "[typescript-nestjs] Add Nestjs Generator", "pr_createdAt": "2020-03-04T02:46:15Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/5518", "timeline": [{"oid": "14b76fd7dbdccd1889905399a806aa02bb9a2a5c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/14b76fd7dbdccd1889905399a806aa02bb9a2a5c", "message": "#3336 add nestjs generator", "committedDate": "2019-10-10T22:32:16Z", "type": "commit"}, {"oid": "2aba9d52d25e4de42d81b77c93d07445f290fd85", "url": "https://github.com/OpenAPITools/openapi-generator/commit/2aba9d52d25e4de42d81b77c93d07445f290fd85", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2019-10-10T23:13:33Z", "type": "commit"}, {"oid": "a7b351ed48d55f1ebf100210c366fed6682fee97", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7b351ed48d55f1ebf100210c366fed6682fee97", "message": "#3336 add nestjs generator", "committedDate": "2020-02-04T15:44:08Z", "type": "commit"}, {"oid": "bdff3579e2d7610c025247b8d803451374bb1965", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bdff3579e2d7610c025247b8d803451374bb1965", "message": "Merge branch 'master' of https://github.com/vfrank66/openapi-generator", "committedDate": "2020-02-04T15:45:07Z", "type": "commit"}, {"oid": "6ff567d9cce447c7cdd08b758c94a9d9c5cdf59d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ff567d9cce447c7cdd08b758c94a9d9c5cdf59d", "message": "#3336 add nestjs generator", "committedDate": "2020-03-04T02:20:12Z", "type": "commit"}, {"oid": "7f5ac3bcb789d2ff94e3451b3b133cae8c0829ef", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f5ac3bcb789d2ff94e3451b3b133cae8c0829ef", "message": "#3336 add nestjs generator", "committedDate": "2020-03-04T02:21:53Z", "type": "commit"}, {"oid": "622fba812c5f90090bbad6cfa6ec6daba385c95d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/622fba812c5f90090bbad6cfa6ec6daba385c95d", "message": "Merge branch 'master' of https://github.com/vfrank66/openapi-generator", "committedDate": "2020-03-04T02:22:37Z", "type": "commit"}, {"oid": "7f80f961ef0cd0e50b9d2bb856a3703d5b821640", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f80f961ef0cd0e50b9d2bb856a3703d5b821640", "message": "remove extra files from building", "committedDate": "2020-03-04T02:38:46Z", "type": "commit"}, {"oid": "3e5310c45faf5c5fbedf8342ba0872cd35251062", "url": "https://github.com/OpenAPITools/openapi-generator/commit/3e5310c45faf5c5fbedf8342ba0872cd35251062", "message": "Revert \"remove extra files from building\"\n\nThis reverts commit 7f80f961ef0cd0e50b9d2bb856a3703d5b821640.", "committedDate": "2020-03-04T02:41:01Z", "type": "commit"}, {"oid": "54425caa354bcafd973ad7d1161c8a80d22119ab", "url": "https://github.com/OpenAPITools/openapi-generator/commit/54425caa354bcafd973ad7d1161c8a80d22119ab", "message": "fix merge", "committedDate": "2020-03-04T02:42:58Z", "type": "commit"}, {"oid": "4059af4172d247f89e6218cf48af5cef4294359c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4059af4172d247f89e6218cf48af5cef4294359c", "message": "fix tests", "committedDate": "2020-03-04T03:08:56Z", "type": "commit"}, {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "message": "Add missing test client options provider for nestjs", "committedDate": "2020-03-04T03:20:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDc2OA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:05:06Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/options/TypeScriptNestjsClientOptionsProvider.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDgzMg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480832", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:05:22Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypeScriptNestjsClientOptionsTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDg3Nw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480877", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:05:32Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypeScriptNestjsModelTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDkxNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:05:39Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypescriptNestjsAdditionalPropertiesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDk2OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:05:49Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypescriptNestjsArrayAndObjectIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTAyNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387481024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:06:01Z", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypescriptNestjsPestoreIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMDAzOA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487230038", "bodyText": "\ud83d\udc4d", "author": "vfrank66", "createdAt": "2020-09-11T18:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTA3Ng==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387481076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "author": "macjohnny", "createdAt": "2020-03-04T07:06:12Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMDI2Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487230263", "bodyText": "\ud83d\udc4d  although not sure why i should remove this a lot if not all the other codegens have this.", "author": "vfrank66", "createdAt": "2020-09-11T18:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMjk5NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387502994", "bodyText": "Most of these cli options duplicate the ones defined in the parent class. Is there a particular reason to duplicate it here also?", "author": "amakhrov", "createdAt": "2020-03-04T08:08:23Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNjY1MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487236650", "bodyText": "I cannot find the duplication, link?", "author": "vfrank66", "createdAt": "2020-09-11T19:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMjk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNDQyNA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387504424", "bodyText": "Looks like this logic was copied from the Angular generator. Does it apply to Nest framework with exactly same version numbers?", "author": "amakhrov", "createdAt": "2020-03-04T08:11:53Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        ", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNzAxMw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487237013", "bodyText": "No this line should be deleted", "author": "vfrank66", "createdAt": "2020-09-11T19:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNDQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTMzMQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387505331", "bodyText": "Is there a good reason to support old framework versions? Do you plan to use this generate in projects with old Nestjs?", "author": "amakhrov", "createdAt": "2020-03-04T08:14:08Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        \n+        if (additionalProperties.containsKey(SERVICE_SUFFIX)) {\n+            serviceSuffix = additionalProperties.get(SERVICE_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Service\", serviceSuffix);\n+        }\n+        if (additionalProperties.containsKey(SERVICE_FILE_SUFFIX)) {\n+            serviceFileSuffix = additionalProperties.get(SERVICE_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Service\", serviceFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_SUFFIX)) {\n+            modelSuffix = additionalProperties.get(MODEL_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Model\", modelSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_FILE_SUFFIX)) {\n+            modelFileSuffix = additionalProperties.get(MODEL_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Model\", modelFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(FILE_NAMING)) {\n+            this.setFileNaming(additionalProperties.get(FILE_NAMING).toString());\n+        }\n+    }\n+\n+    private void addNpmPackageGeneration(SemVer nestVersion) {\n+\n+        if (additionalProperties.containsKey(NPM_REPOSITORY)) {\n+            this.setNpmRepository(additionalProperties.get(NPM_REPOSITORY).toString());\n+        }\n+\n+        // Set the typescript version compatible to the Nestjs version\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            additionalProperties.put(\"tsVersion\", \">=3.4.0 <3.6.0\");\n+        } else {\n+            // Nestjs v2-v4 requires typescript \">=2.1.5 <2.8\"\n+            additionalProperties.put(\"tsVersion\", \">=2.1.5 <2.8.0\");\n+        }", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNzc4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487237789", "bodyText": "No problems, will hardcode", "author": "vfrank66", "createdAt": "2020-09-11T19:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTg2NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387505865", "bodyText": "broken link - seems to be copied from angular.\nis this logic applicable to nestjs anyway?", "author": "amakhrov", "createdAt": "2020-03-04T08:15:25Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        \n+        if (additionalProperties.containsKey(SERVICE_SUFFIX)) {\n+            serviceSuffix = additionalProperties.get(SERVICE_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Service\", serviceSuffix);\n+        }\n+        if (additionalProperties.containsKey(SERVICE_FILE_SUFFIX)) {\n+            serviceFileSuffix = additionalProperties.get(SERVICE_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Service\", serviceFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_SUFFIX)) {\n+            modelSuffix = additionalProperties.get(MODEL_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Model\", modelSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_FILE_SUFFIX)) {\n+            modelFileSuffix = additionalProperties.get(MODEL_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Model\", modelFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(FILE_NAMING)) {\n+            this.setFileNaming(additionalProperties.get(FILE_NAMING).toString());\n+        }\n+    }\n+\n+    private void addNpmPackageGeneration(SemVer nestVersion) {\n+\n+        if (additionalProperties.containsKey(NPM_REPOSITORY)) {\n+            this.setNpmRepository(additionalProperties.get(NPM_REPOSITORY).toString());\n+        }\n+\n+        // Set the typescript version compatible to the Nestjs version\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            additionalProperties.put(\"tsVersion\", \">=3.4.0 <3.6.0\");\n+        } else {\n+            // Nestjs v2-v4 requires typescript \">=2.1.5 <2.8\"\n+            additionalProperties.put(\"tsVersion\", \">=2.1.5 <2.8.0\");\n+        }\n+        \n+        //Files for building our lib\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", getIndexDirectory(), \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.build.mustache\", getIndexDirectory(), \"tsconfig.build.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", getIndexDirectory(), \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\"tslint.mustache\", getIndexDirectory(), \"tslint.json\"));\n+    }\n+\n+    private String getIndexDirectory() {\n+        String indexPackage = modelPackage.substring(0, Math.max(0, modelPackage.lastIndexOf('.')));\n+        return indexPackage.replace('.', File.separatorChar);\n+    }\n+\n+    public void setStringEnums(boolean value) {\n+        stringEnums = value;\n+    }\n+\n+    public Boolean getStringEnums() {\n+        return stringEnums;\n+    }\n+\n+    @Override\n+    public boolean isDataTypeFile(final String dataType) {\n+        return dataType != null && dataType.equals(\"Blob\");\n+    }\n+\n+    @Override\n+    public String getTypeDeclaration(Schema p) {\n+        if (ModelUtils.isFileSchema(p)) {\n+            return \"Blob\";\n+        } else {\n+            return super.getTypeDeclaration(p);\n+        }\n+    }\n+\n+\n+    @Override\n+    public String getSchemaType(Schema p) {\n+        String openAPIType = super.getSchemaType(p);\n+        if (isLanguagePrimitive(openAPIType) || isLanguageGenericType(openAPIType)) {\n+            return openAPIType;\n+        }\n+        applyLocalTypeMapping(openAPIType);\n+        return openAPIType;\n+    }\n+\n+    private String applyLocalTypeMapping(String type) {\n+        if (typeMapping.containsKey(type)) {\n+            type = typeMapping.get(type);\n+        }\n+        return type;\n+    }\n+\n+    private boolean isLanguagePrimitive(String type) {\n+        return languageSpecificPrimitives.contains(type);\n+    }\n+\n+    private boolean isLanguageGenericType(String type) {\n+        for (String genericType : languageGenericTypes) {\n+            if (type.startsWith(genericType + \"<\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void postProcessParameter(CodegenParameter parameter) {\n+        super.postProcessParameter(parameter);\n+        parameter.dataType = applyLocalTypeMapping(parameter.dataType);\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> allModels) {\n+        Map<String, Object> objs = (Map<String, Object>) operations.get(\"operations\");\n+\n+        // Add filename information for api imports\n+        objs.put(\"apiFilename\", getApiFilenameFromClassname(objs.get(\"classname\").toString()));\n+\n+        List<CodegenOperation> ops = (List<CodegenOperation>) objs.get(\"operation\");\n+        boolean hasSomeFormParams = false;\n+        for (CodegenOperation op : ops) {\n+            if (op.getHasFormParams()) {\n+                hasSomeFormParams = true;\n+            }\n+            if ((boolean) additionalProperties.get(\"useHttpClient\")) {\n+                op.httpMethod = op.httpMethod.toLowerCase(Locale.ENGLISH);\n+            } else {\n+                // Convert httpMethod to Nestjs's RequestMethod enum\n+                // https://nestjs.io/docs/ts/latest/api/http/index/RequestMethod-enum.html", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzOTA0Mg==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487239042", "bodyText": "does not apply", "author": "vfrank66", "createdAt": "2020-09-11T19:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MzIyMA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387543220", "bodyText": "unchanged copied comment?", "author": "quezak", "createdAt": "2020-03-04T09:30:10Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTQ4NQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387575485", "bodyText": "why <3.6.0? We're successfully running Nest 6 with TS 3.7.5 and I'm not aware of any requirements that would limit the version to <3.6.", "author": "quezak", "createdAt": "2020-03-04T10:26:41Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        \n+        if (additionalProperties.containsKey(SERVICE_SUFFIX)) {\n+            serviceSuffix = additionalProperties.get(SERVICE_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Service\", serviceSuffix);\n+        }\n+        if (additionalProperties.containsKey(SERVICE_FILE_SUFFIX)) {\n+            serviceFileSuffix = additionalProperties.get(SERVICE_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Service\", serviceFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_SUFFIX)) {\n+            modelSuffix = additionalProperties.get(MODEL_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Model\", modelSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_FILE_SUFFIX)) {\n+            modelFileSuffix = additionalProperties.get(MODEL_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Model\", modelFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(FILE_NAMING)) {\n+            this.setFileNaming(additionalProperties.get(FILE_NAMING).toString());\n+        }\n+    }\n+\n+    private void addNpmPackageGeneration(SemVer nestVersion) {\n+\n+        if (additionalProperties.containsKey(NPM_REPOSITORY)) {\n+            this.setNpmRepository(additionalProperties.get(NPM_REPOSITORY).toString());\n+        }\n+\n+        // Set the typescript version compatible to the Nestjs version\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            additionalProperties.put(\"tsVersion\", \">=3.4.0 <3.6.0\");", "originalCommit": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MTc0NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487251744", "bodyText": "removed set to \">=3.4.0 <4.0.0\"", "author": "vfrank66", "createdAt": "2020-09-11T19:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MDk5OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r487450999", "bodyText": "well, does it break with 4.0? :D (if not, why use max version limit?)", "author": "quezak", "createdAt": "2020-09-12T21:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTQ4NQ=="}], "type": "inlineReview"}, {"oid": "11e88538ecdd94220e99e49c5d8d9dded3a293df", "url": "https://github.com/OpenAPITools/openapi-generator/commit/11e88538ecdd94220e99e49c5d8d9dded3a293df", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator", "committedDate": "2020-09-11T18:23:31Z", "type": "commit"}, {"oid": "bf22c22063124134771e5caa6859ff1ed2798c12", "url": "https://github.com/OpenAPITools/openapi-generator/commit/bf22c22063124134771e5caa6859ff1ed2798c12", "message": "cleanup PRS", "committedDate": "2020-09-11T19:42:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5Nzg2NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r491997864", "bodyText": "use de base getAdditionalProperties function!", "author": "Vmarci94", "createdAt": "2020-09-21T12:18:12Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,548 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));", "originalCommit": "bf22c22063124134771e5caa6859ff1ed2798c12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d661501f275fc1c547c4aa44bde6fa177ad55dd5", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d661501f275fc1c547c4aa44bde6fa177ad55dd5", "message": "fix compilation error", "committedDate": "2020-09-21T15:08:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MTQ4OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r492471489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param operation     the operation\n          \n          \n            \n                 * @param operation the operation", "author": "Asafkbalink", "createdAt": "2020-09-22T04:45:30Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -334,7 +330,7 @@ public void postProcessParameter(CodegenParameter parameter) {\n     /**\n      * Finds and returns a path parameter of an operation by its name\n      *\n-     * @param operation the operation\n+     * @param operation     the operation", "originalCommit": "d661501f275fc1c547c4aa44bde6fa177ad55dd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}