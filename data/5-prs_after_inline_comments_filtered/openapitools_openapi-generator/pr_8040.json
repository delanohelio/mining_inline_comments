{"pr_number": 8040, "pr_title": "[ruby] Improve ruby client examples", "pr_createdAt": "2020-11-27T16:50:16Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/8040", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMjE3MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r531702170", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return \"\\\"\" + codegenProperty.example + \"\\\"\";\n          \n          \n            \n                                return \"'\" + codegenProperty.example + \"'\";", "author": "jirikuncar", "createdAt": "2020-11-27T17:05:29Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "diffHunk": "@@ -667,4 +569,178 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n             codegenModel.additionalPropertiesType = getSchemaType(additionalProperties);\n         }\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        objs = super.postProcessOperationsWithModels(objs, allModels);\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        HashMap<String, CodegenModel> modelMaps = new HashMap<String, CodegenModel>();\n+        HashMap<String, Integer> processedModelMaps = new HashMap<String, Integer>();\n+\n+        for (Object o : allModels) {\n+            HashMap<String, Object> h = (HashMap<String, Object>) o;\n+            CodegenModel m = (CodegenModel) h.get(\"model\");\n+            modelMaps.put(m.classname, m);\n+        }\n+\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        for (CodegenOperation op : operationList) {\n+            for (CodegenParameter p : op.requiredParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+            for (CodegenParameter p : op.optionalParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+        }\n+\n+        return objs;\n+    }\n+\n+    private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenParameter.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenParameter.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenParameter.isPrimitiveType) { // primitive type\n+            if (codegenParameter.isString) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"\" + codegenParameter.paramName + \"_example\\\"\";\n+            } else if (codegenParameter.isBoolean) { // boolean\n+                if (Boolean.parseBoolean(codegenParameter.example)) {\n+                    return \"true\";\n+                }\n+                return \"false\";\n+            } else if (codegenParameter.isUri) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"https://example.com\\\"\";\n+            } else if (codegenParameter.isDateTime) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"DateTime.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"DateTime.now\";\n+            } else if (codegenParameter.isDate) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"Date.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"Date.today\";\n+            } else if (codegenParameter.isFile) {\n+                return \"File.new(\\\"/path/to/some/file\\\")\";\n+            } else if (codegenParameter.isInteger) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"37\";\n+            } else { // number\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"3.56\";\n+            }\n+        } else { // model\n+            // look up the model\n+            if (modelMaps.containsKey(codegenParameter.dataType)) {\n+                return constructExampleCode(modelMaps.get(codegenParameter.dataType), modelMaps, processedModelMap);\n+            } else {\n+                //LOGGER.error(\"Error in constructing examples. Failed to look up the model \" + codegenParameter.dataType);\n+                return \"TODO\";\n+            }\n+        }\n+    }\n+\n+    private String constructExampleCode(CodegenProperty codegenProperty, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenProperty.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenProperty.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenProperty.isPrimitiveType) { // primitive type\n+            if (codegenProperty.isString) {\n+                if (!StringUtils.isEmpty(codegenProperty.example) && !\"null\".equals(codegenProperty.example)) {\n+                    return \"\\\"\" + codegenProperty.example + \"\\\"\";", "originalCommit": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMjIyNQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r531702225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return \"\\\"\" + codegenProperty.name + \"_example\\\"\";\n          \n          \n            \n                                return \"'\" + codegenProperty.name + \"_example'\";", "author": "jirikuncar", "createdAt": "2020-11-27T17:05:38Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "diffHunk": "@@ -667,4 +569,178 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n             codegenModel.additionalPropertiesType = getSchemaType(additionalProperties);\n         }\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        objs = super.postProcessOperationsWithModels(objs, allModels);\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        HashMap<String, CodegenModel> modelMaps = new HashMap<String, CodegenModel>();\n+        HashMap<String, Integer> processedModelMaps = new HashMap<String, Integer>();\n+\n+        for (Object o : allModels) {\n+            HashMap<String, Object> h = (HashMap<String, Object>) o;\n+            CodegenModel m = (CodegenModel) h.get(\"model\");\n+            modelMaps.put(m.classname, m);\n+        }\n+\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        for (CodegenOperation op : operationList) {\n+            for (CodegenParameter p : op.requiredParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+            for (CodegenParameter p : op.optionalParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+        }\n+\n+        return objs;\n+    }\n+\n+    private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenParameter.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenParameter.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenParameter.isPrimitiveType) { // primitive type\n+            if (codegenParameter.isString) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"\" + codegenParameter.paramName + \"_example\\\"\";\n+            } else if (codegenParameter.isBoolean) { // boolean\n+                if (Boolean.parseBoolean(codegenParameter.example)) {\n+                    return \"true\";\n+                }\n+                return \"false\";\n+            } else if (codegenParameter.isUri) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"https://example.com\\\"\";\n+            } else if (codegenParameter.isDateTime) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"DateTime.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"DateTime.now\";\n+            } else if (codegenParameter.isDate) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"Date.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"Date.today\";\n+            } else if (codegenParameter.isFile) {\n+                return \"File.new(\\\"/path/to/some/file\\\")\";\n+            } else if (codegenParameter.isInteger) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"37\";\n+            } else { // number\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"3.56\";\n+            }\n+        } else { // model\n+            // look up the model\n+            if (modelMaps.containsKey(codegenParameter.dataType)) {\n+                return constructExampleCode(modelMaps.get(codegenParameter.dataType), modelMaps, processedModelMap);\n+            } else {\n+                //LOGGER.error(\"Error in constructing examples. Failed to look up the model \" + codegenParameter.dataType);\n+                return \"TODO\";\n+            }\n+        }\n+    }\n+\n+    private String constructExampleCode(CodegenProperty codegenProperty, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenProperty.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenProperty.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenProperty.isPrimitiveType) { // primitive type\n+            if (codegenProperty.isString) {\n+                if (!StringUtils.isEmpty(codegenProperty.example) && !\"null\".equals(codegenProperty.example)) {\n+                    return \"\\\"\" + codegenProperty.example + \"\\\"\";\n+                } else {\n+                    return \"\\\"\" + codegenProperty.name + \"_example\\\"\";", "originalCommit": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28211cdba6e1f0418f94585e826d8cd25fdef048", "url": "https://github.com/OpenAPITools/openapi-generator/commit/28211cdba6e1f0418f94585e826d8cd25fdef048", "message": "merge master", "committedDate": "2020-12-07T08:04:03Z", "type": "forcePushed"}, {"oid": "a6200f4358fc20c68800842442a0d6fc9affe724", "url": "https://github.com/OpenAPITools/openapi-generator/commit/a6200f4358fc20c68800842442a0d6fc9affe724", "message": "use Time", "committedDate": "2020-12-07T08:06:14Z", "type": "forcePushed"}, {"oid": "76e9d5bb202d9c25e101241f6f924086cc0b3856", "url": "https://github.com/OpenAPITools/openapi-generator/commit/76e9d5bb202d9c25e101241f6f924086cc0b3856", "message": "use Time", "committedDate": "2020-12-07T08:16:51Z", "type": "forcePushed"}, {"oid": "dc1bc4b415908ecaef2a5ea25fd0562bc5e69ac2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/dc1bc4b415908ecaef2a5ea25fd0562bc5e69ac2", "message": "[ruby] Improve ruby client examples", "committedDate": "2020-12-15T14:12:42Z", "type": "commit"}, {"oid": "9a850384787f61d73c6589ff75658b7cd0e63b0d", "url": "https://github.com/OpenAPITools/openapi-generator/commit/9a850384787f61d73c6589ff75658b7cd0e63b0d", "message": "samples", "committedDate": "2020-12-15T14:12:43Z", "type": "commit"}, {"oid": "7cac1416addbac823aebe29d1cb55c628499196f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7cac1416addbac823aebe29d1cb55c628499196f", "message": "quote fixes", "committedDate": "2020-12-15T14:12:43Z", "type": "commit"}, {"oid": "e99d7f0bb65cb884f2a85fa278d86ca6dd47168b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e99d7f0bb65cb884f2a85fa278d86ca6dd47168b", "message": "Keep enum value", "committedDate": "2020-12-15T14:12:43Z", "type": "commit"}, {"oid": "5657a89733037d7f8e3e72d45ff7510f962bb32f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5657a89733037d7f8e3e72d45ff7510f962bb32f", "message": "better string type handling", "committedDate": "2020-12-15T14:12:44Z", "type": "commit"}, {"oid": "f5175b95360df07ee0538147767f4da54f110350", "url": "https://github.com/OpenAPITools/openapi-generator/commit/f5175b95360df07ee0538147767f4da54f110350", "message": "fix failing tests", "committedDate": "2020-12-15T14:12:44Z", "type": "commit"}, {"oid": "4653b9962d9214a647caeca841a923fbfbfe3275", "url": "https://github.com/OpenAPITools/openapi-generator/commit/4653b9962d9214a647caeca841a923fbfbfe3275", "message": "add space after comment", "committedDate": "2020-12-15T14:12:44Z", "type": "commit"}, {"oid": "ab15d7472a8c109edc143fc4741f32473ccd2f21", "url": "https://github.com/OpenAPITools/openapi-generator/commit/ab15d7472a8c109edc143fc4741f32473ccd2f21", "message": "update samples", "committedDate": "2020-12-15T14:12:45Z", "type": "commit"}, {"oid": "109716d8ccc0cd8610e4351973fe12d7e49e534a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/109716d8ccc0cd8610e4351973fe12d7e49e534a", "message": "use Time", "committedDate": "2020-12-15T14:12:45Z", "type": "commit"}, {"oid": "109716d8ccc0cd8610e4351973fe12d7e49e534a", "url": "https://github.com/OpenAPITools/openapi-generator/commit/109716d8ccc0cd8610e4351973fe12d7e49e534a", "message": "use Time", "committedDate": "2020-12-15T14:12:45Z", "type": "forcePushed"}]}