{"pr_number": 511, "pr_title": "Loading offline resource bundles", "pr_createdAt": "2020-04-15T00:45:19Z", "pr_url": "https://github.com/vmware/singleton/pull/511", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTcwMA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417699700", "bodyText": "Need to remove this?", "author": "Xiaochao8", "createdAt": "2020-04-30T01:07:16Z", "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "originalCommit": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyNTU4MQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417725581", "bodyText": "Next PR", "author": "jessiejuachon", "createdAt": "2020-04-30T02:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDQxMg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417700412", "bodyText": "Remove this 2 methods or make them private?\nThey don't need to exported.", "author": "Xiaochao8", "createdAt": "2020-04-30T01:09:52Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +411,24 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void addMsgOriginsQueue(DataSourceEnum dataSource) {\n+\t\tthis.msgOriginsQueue.add(dataSource);\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "originalCommit": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyNDk3OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417724978", "bodyText": "This is just a standard setter. This can be useful.", "author": "jessiejuachon", "createdAt": "2020-04-30T02:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDk5MQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417700991", "bodyText": "If cachedData == null, then do nothing?", "author": "Xiaochao8", "createdAt": "2020-04-30T01:12:18Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);", "originalCommit": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyNTI5OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417725298", "bodyText": "Yes, do nothing because there is nothing to add.", "author": "jessiejuachon", "createdAt": "2020-04-30T02:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMTI4OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417701288", "bodyText": "In this logic, we should prevent querying fro server parallelly.", "author": "Xiaochao8", "createdAt": "2020-04-30T01:13:31Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);\n \t}\n \t\n-\tpublic synchronized void addCacheItem (MessageCacheItem cacheItem) {\n+\tpublic synchronized void setCacheItem (MessageCacheItem cacheItem) {\n+\t\t// Do not update cacheItem if timestamp is earlier than current. \n+\t\t// An older timestamp comes from an old thread that was blocked.\n+\t\tif (cacheItem.getTimestamp() < this.timestamp) \n+\t\t\treturn;", "originalCommit": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNjE5Mw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417706193", "bodyText": "We can leave it if much effort.", "author": "Xiaochao8", "createdAt": "2020-04-30T01:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMTI4OA=="}], "type": "inlineReview"}, {"oid": "f4c12147f958c5014b8e47959cf216a9db1d380d", "url": "https://github.com/vmware/singleton/commit/f4c12147f958c5014b8e47959cf216a9db1d380d", "message": "Loading configuration from the JSON configuration file", "committedDate": "2020-03-11T00:00:20Z", "type": "commit"}, {"oid": "1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "url": "https://github.com/vmware/singleton/commit/1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "message": "Removing code that is not yet ready to be used from the sample application", "committedDate": "2020-03-11T00:54:17Z", "type": "commit"}, {"oid": "5e72b73b497563607e5031d5afa322caffd03fca", "url": "https://github.com/vmware/singleton/commit/5e72b73b497563607e5031d5afa322caffd03fca", "message": "fixing failing code scan\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68NFL24bPpi-pS5s&open=AXDG68NFL24bPpi-pS5s\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68IGL24bPpi-pS2r&open=AXDG68IGL24bPpi-pS2r\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-03-11T22:01:24Z", "type": "commit"}, {"oid": "73d85ca7fca1290a93558fd937afd18dc27e92d6", "url": "https://github.com/vmware/singleton/commit/73d85ca7fca1290a93558fd937afd18dc27e92d6", "message": "Adding a cache properties map to hold cache details such as etag and cache control", "committedDate": "2020-03-12T07:58:55Z", "type": "commit"}, {"oid": "2a381070ef1e057fda0b08ca5d65323482273a86", "url": "https://github.com/vmware/singleton/commit/2a381070ef1e057fda0b08ca5d65323482273a86", "message": "Removing white space\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-03-12T08:09:09Z", "type": "commit"}, {"oid": "c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "url": "https://github.com/vmware/singleton/commit/c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "message": "Fixing failing unit test", "committedDate": "2020-03-12T09:09:08Z", "type": "commit"}, {"oid": "056891a79856058bf9af28c44110f588e61eeefc", "url": "https://github.com/vmware/singleton/commit/056891a79856058bf9af28c44110f588e61eeefc", "message": "Parse headers, response code, response message from an HTTP response and return them upstream.", "committedDate": "2020-03-12T22:59:17Z", "type": "commit"}, {"oid": "a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "url": "https://github.com/vmware/singleton/commit/a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "message": "Storing response headers in Map of cache properties", "committedDate": "2020-03-17T19:30:18Z", "type": "commit"}, {"oid": "17978bd621bc7ee7de27205534568fee986b1d0b", "url": "https://github.com/vmware/singleton/commit/17978bd621bc7ee7de27205534568fee986b1d0b", "message": "Fixing failing unit test due to NullPointerException when doing Map.putAll(null)", "committedDate": "2020-03-17T22:50:12Z", "type": "commit"}, {"oid": "6c691708a3b9b0a891622a7a96d3d979ff3cb807", "url": "https://github.com/vmware/singleton/commit/6c691708a3b9b0a891622a7a96d3d979ff3cb807", "message": "Changes after code review.", "committedDate": "2020-03-17T23:41:27Z", "type": "commit"}, {"oid": "41a8aa1c4afd56cc1042939892a22dbca64adc1d", "url": "https://github.com/vmware/singleton/commit/41a8aa1c4afd56cc1042939892a22dbca64adc1d", "message": "Removing exception handling for now", "committedDate": "2020-03-18T22:09:37Z", "type": "commit"}, {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85", "url": "https://github.com/vmware/singleton/commit/dd2455d5e68187dd4061b9c71ccd2799480d3d85", "message": "Deprecating VIPCfg.initialize; cleaning up code", "committedDate": "2020-03-19T16:43:36Z", "type": "commit"}, {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1", "url": "https://github.com/vmware/singleton/commit/e26d372496ced19785a48b187e3bcdb1c1442ba1", "message": "Storing the http response code in the cache", "committedDate": "2020-03-20T15:45:46Z", "type": "commit"}, {"oid": "01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "url": "https://github.com/vmware/singleton/commit/01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "message": "Using cached etag as if-none-match request header value in the request in order to get a 304 NOT MODIFIED http response", "committedDate": "2020-03-25T20:11:07Z", "type": "commit"}, {"oid": "750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "url": "https://github.com/vmware/singleton/commit/750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "message": "Handling 404 response from Singleton service", "committedDate": "2020-03-26T04:04:49Z", "type": "commit"}, {"oid": "529e5cc756460c5314a09a015caad7f4d26482d9", "url": "https://github.com/vmware/singleton/commit/529e5cc756460c5314a09a015caad7f4d26482d9", "message": "Using HTTP repsonse's Cache-Control max-age and timestamp to dertermine if component locale's cache has expired", "committedDate": "2020-03-26T23:38:04Z", "type": "commit"}, {"oid": "b40fcf9dc23a01cc336b67e7eddea16d85be9817", "url": "https://github.com/vmware/singleton/commit/b40fcf9dc23a01cc336b67e7eddea16d85be9817", "message": "Moving constants to URLUtils", "committedDate": "2020-03-26T23:49:56Z", "type": "commit"}, {"oid": "fa123f9a1bee0d349ab6c36384288c99e865fb99", "url": "https://github.com/vmware/singleton/commit/fa123f9a1bee0d349ab6c36384288c99e865fb99", "message": "Fixing failing test", "committedDate": "2020-03-27T00:07:11Z", "type": "commit"}, {"oid": "30b2054bc21a61ecdcecbb74f5a97b7af714682f", "url": "https://github.com/vmware/singleton/commit/30b2054bc21a61ecdcecbb74f5a97b7af714682f", "message": "Fixing failing code scan", "committedDate": "2020-03-27T02:47:23Z", "type": "commit"}, {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "url": "https://github.com/vmware/singleton/commit/0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-03-27T06:47:07Z", "type": "commit"}, {"oid": "ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "url": "https://github.com/vmware/singleton/commit/ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "message": "Cleaning up import in ComponentService,java", "committedDate": "2020-03-30T00:29:34Z", "type": "commit"}, {"oid": "d8450e444632e849f020704d65106fed11417b0a", "url": "https://github.com/vmware/singleton/commit/d8450e444632e849f020704d65106fed11417b0a", "message": "Cleaning up code - caching/expiry", "committedDate": "2020-03-30T03:03:20Z", "type": "commit"}, {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "url": "https://github.com/vmware/singleton/commit/d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client", "committedDate": "2020-03-30T03:04:44Z", "type": "commit"}, {"oid": "0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "url": "https://github.com/vmware/singleton/commit/0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "message": "Adding tests for new caching workflow; enabling old caching workflow using cacheExpiredTime config", "committedDate": "2020-03-31T02:51:56Z", "type": "commit"}, {"oid": "d06adb3ac3d456f897882ee1af237d29c7f03967", "url": "https://github.com/vmware/singleton/commit/d06adb3ac3d456f897882ee1af237d29c7f03967", "message": "Fixing a failing test", "committedDate": "2020-03-31T03:16:31Z", "type": "commit"}, {"oid": "48c855873e5585f19152290738e4dbf6f0180b06", "url": "https://github.com/vmware/singleton/commit/48c855873e5585f19152290738e4dbf6f0180b06", "message": "Adding mock server response", "committedDate": "2020-03-31T05:37:28Z", "type": "commit"}, {"oid": "4e45bedd128d76023c8089f9194069ea0bf30f6a", "url": "https://github.com/vmware/singleton/commit/4e45bedd128d76023c8089f9194069ea0bf30f6a", "message": "Removing unused file sampleconfig.json", "committedDate": "2020-03-31T18:55:50Z", "type": "commit"}, {"oid": "6a40dc87413ed76788fc60332b91741137d5e829", "url": "https://github.com/vmware/singleton/commit/6a40dc87413ed76788fc60332b91741137d5e829", "message": "Changes from code review", "committedDate": "2020-03-31T21:46:03Z", "type": "commit"}, {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c", "url": "https://github.com/vmware/singleton/commit/4c3c12d4549eac93be3481db3309dea80c6a9e6c", "message": "Value of VIPCfg.cacheExpiredTime is -1 when value is not set in config file. This means max age from server will be used. Setting VIPCfg.cacheExpiredTime to 0 disables caching.", "committedDate": "2020-03-31T23:34:51Z", "type": "commit"}, {"oid": "7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "url": "https://github.com/vmware/singleton/commit/7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "message": "Changing a LinkedHashMap to a HashMap because insertion order does not need to be maintained.", "committedDate": "2020-04-02T17:10:51Z", "type": "commit"}, {"oid": "baef0d06f0facd4fe2383185dc1b7979bba186a7", "url": "https://github.com/vmware/singleton/commit/baef0d06f0facd4fe2383185dc1b7979bba186a7", "message": "Adding CacheItem object to contain map of data and a another map for any other cache properties", "committedDate": "2020-04-03T05:54:04Z", "type": "commit"}, {"oid": "02a96e9a7dbec8e912f29439334792d7b51069d6", "url": "https://github.com/vmware/singleton/commit/02a96e9a7dbec8e912f29439334792d7b51069d6", "message": "Fixing failing unit test", "committedDate": "2020-04-03T05:59:48Z", "type": "commit"}, {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05", "url": "https://github.com/vmware/singleton/commit/78d88f796cb3bd3f015bb1d589717fe6897abc05", "message": "Fixing code scan issues", "committedDate": "2020-04-03T06:14:21Z", "type": "commit"}, {"oid": "655c223992bf244c4136a52c636119c9edf605fe", "url": "https://github.com/vmware/singleton/commit/655c223992bf244c4136a52c636119c9edf605fe", "message": "Code cleanup", "committedDate": "2020-04-03T08:36:12Z", "type": "commit"}, {"oid": "8746915f5015f497b6956e8f8b743806330cc51c", "url": "https://github.com/vmware/singleton/commit/8746915f5015f497b6956e8f8b743806330cc51c", "message": "Lazily instantiating cacheProps; code clean up and comments", "committedDate": "2020-04-05T17:28:09Z", "type": "commit"}, {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "url": "https://github.com/vmware/singleton/commit/897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "message": "Changes after code review", "committedDate": "2020-04-07T03:26:44Z", "type": "commit"}, {"oid": "3a4e18358f37c29502cfdeb60c44b94e63653601", "url": "https://github.com/vmware/singleton/commit/3a4e18358f37c29502cfdeb60c44b94e63653601", "message": "Adding header to CacheItem.java", "committedDate": "2020-04-07T03:36:56Z", "type": "commit"}, {"oid": "b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "url": "https://github.com/vmware/singleton/commit/b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "message": "Fixing code san issue. Synchronize on a final field", "committedDate": "2020-04-07T03:49:29Z", "type": "commit"}, {"oid": "8f57e243ed1f450349392e990b4502dd74543f91", "url": "https://github.com/vmware/singleton/commit/8f57e243ed1f450349392e990b4502dd74543f91", "message": "Fixing code scan bug", "committedDate": "2020-04-07T04:07:44Z", "type": "commit"}, {"oid": "72c8799ffbbb23dc61115375cbee52573e792ec9", "url": "https://github.com/vmware/singleton/commit/72c8799ffbbb23dc61115375cbee52573e792ec9", "message": "Changes after code review", "committedDate": "2020-04-07T17:15:34Z", "type": "commit"}, {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90", "url": "https://github.com/vmware/singleton/commit/92edfc88a64c21470fc06c37b65503a6d9042f90", "message": "Updating CasheService.isContainComponent to return false if cache key is stored but has a null value", "committedDate": "2020-04-07T19:15:13Z", "type": "commit"}, {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0", "url": "https://github.com/vmware/singleton/commit/2042554b861d0b97b04a8d29c3a051106e24d8f0", "message": "HttpRequester if-none-match header and other customized headers are added to each specific request locally.", "committedDate": "2020-04-08T04:57:56Z", "type": "commit"}, {"oid": "ae707fface7ade445bc391f9f0e4125734eeddb1", "url": "https://github.com/vmware/singleton/commit/ae707fface7ade445bc391f9f0e4125734eeddb1", "message": "Code clean up; keep old caching expiration logic", "committedDate": "2020-04-08T17:09:39Z", "type": "commit"}, {"oid": "82818d5909f1b1e2117f7599993ea50777bd982a", "url": "https://github.com/vmware/singleton/commit/82818d5909f1b1e2117f7599993ea50777bd982a", "message": "Fixing code scan bug", "committedDate": "2020-04-08T21:12:57Z", "type": "commit"}, {"oid": "31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "url": "https://github.com/vmware/singleton/commit/31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-04-08T21:50:07Z", "type": "commit"}, {"oid": "c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "url": "https://github.com/vmware/singleton/commit/c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "message": "code clean up", "committedDate": "2020-04-09T00:13:02Z", "type": "commit"}, {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26", "url": "https://github.com/vmware/singleton/commit/78dcc1cc7de1700d332c4901ec3f09e546befd26", "message": "Removing response code and response msg from cache; Passing cacheItem object to be updated down the line.", "committedDate": "2020-04-09T07:14:14Z", "type": "commit"}, {"oid": "9281c640b3b78d987e1fd865b01f16e4edbfd768", "url": "https://github.com/vmware/singleton/commit/9281c640b3b78d987e1fd865b01f16e4edbfd768", "message": "Changes after code review", "committedDate": "2020-04-10T04:03:05Z", "type": "commit"}, {"oid": "26577625b3eb13f1f9367f313dd94d47c9113749", "url": "https://github.com/vmware/singleton/commit/26577625b3eb13f1f9367f313dd94d47c9113749", "message": "Adding header to CacheItem.java file", "committedDate": "2020-04-10T04:08:23Z", "type": "commit"}, {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0", "url": "https://github.com/vmware/singleton/commit/9e80f09d4838f9de33bf9dce100744f4832630a0", "message": "Fixing failing unit test", "committedDate": "2020-04-10T04:35:16Z", "type": "commit"}, {"oid": "68467f34882da413ed852f2ed4b1394e88bf64b1", "url": "https://github.com/vmware/singleton/commit/68467f34882da413ed852f2ed4b1394e88bf64b1", "message": "Changes after code review", "committedDate": "2020-04-10T23:14:41Z", "type": "commit"}, {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006", "url": "https://github.com/vmware/singleton/commit/d67c72ee939034deb58b99d4fdf0fcc38857c006", "message": "Fixing code scan bugs", "committedDate": "2020-04-10T23:28:38Z", "type": "commit"}, {"oid": "85919738596847c3cd42fd2397226fb498cf6e28", "url": "https://github.com/vmware/singleton/commit/85919738596847c3cd42fd2397226fb498cf6e28", "message": "Not storing anything in cache if response is neither 200 nor 304", "committedDate": "2020-04-13T21:22:27Z", "type": "commit"}, {"oid": "22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "url": "https://github.com/vmware/singleton/commit/22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "message": "Loading messages from specified offline resource bundles", "committedDate": "2020-04-15T00:36:42Z", "type": "commit"}, {"oid": "ce2488b8af539a1456959b97e482435b11d5aeff", "url": "https://github.com/vmware/singleton/commit/ce2488b8af539a1456959b97e482435b11d5aeff", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-04-15T00:43:12Z", "type": "commit"}, {"oid": "109296301af054a8def120b98fd7e877acdb465f", "url": "https://github.com/vmware/singleton/commit/109296301af054a8def120b98fd7e877acdb465f", "message": "Adding header", "committedDate": "2020-04-15T00:48:03Z", "type": "commit"}, {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "url": "https://github.com/vmware/singleton/commit/35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "message": "Fixing failing unie test", "committedDate": "2020-04-15T01:14:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r408543797", "bodyText": "It's better to use Paths.get", "author": "Xiaochao8", "createdAt": "2020-04-15T02:26:30Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);", "originalCommit": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2ODYyMQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409668621", "bodyText": "ok", "author": "jessiejuachon", "createdAt": "2020-04-16T15:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NjgzNw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409946837", "bodyText": "I meant line 39.\nWtich Paths.get the, the '/' in offlineResourcesBaseUrl of VIPCfg will have no affect on the result.\nPlease check.", "author": "Xiaochao8", "createdAt": "2020-04-17T01:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1NjkzOA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r410356938", "bodyText": "By new flow, client will fallback to local bundles if failing to get from server.\nI couldn't find changes on this. Could you check this?\n\nSure.  I was planning to check it in the next Pr so that you are not overwhelmed. I have just checked it in now.", "author": "jessiejuachon", "createdAt": "2020-04-17T17:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NzIxMQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r408547211", "bodyText": "How about replacing with:\ntry (Reader reader = new InputStreamReader(is, \"UTF-8\");) {", "author": "Xiaochao8", "createdAt": "2020-04-15T02:39:09Z", "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {\n+        JSONObject jsonObj = null;\n+        \n+        ClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+        InputStream is = classloader.getResourceAsStream(pathName);\n+        try {", "originalCommit": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjA0Ng==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409556046", "bodyText": "Does this function work if the bundle is out of the client(jar)?", "author": "linr211", "createdAt": "2020-04-16T13:29:24Z", "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {", "originalCommit": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2OTM1MQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409669351", "bodyText": "Yes, as long as it is in the application's classpath.\nYou can run Main.java in the sample app to test this. Offline bundles have been added in sample-client-app/src/main/resources/offlineBundles/default/", "author": "jessiejuachon", "createdAt": "2020-04-16T15:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409559660", "bodyText": "how about using 'refreshComponentMessages' as the function name?", "author": "linr211", "createdAt": "2020-04-16T13:34:34Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {", "originalCommit": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NjgxNg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409656816", "bodyText": "\"refresh\" implies an update. This method can either be an update or a new load, so \"get\" seems to be more generic.", "author": "jessiejuachon", "createdAt": "2020-04-16T15:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1MTg2Nw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411051867", "bodyText": "but it returns 'void', meaning outside caller get nothing. If there's case to detect the change on service, how to do it?", "author": "linr211", "createdAt": "2020-04-20T02:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3MTc1OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411571759", "bodyText": "Caller of the method gets the change inside the object that is passed as argument.\nSo after calling .getCompinentMessages(cacheItem); , cacheItem has the updated value (If it was indeed updated because it was expired. Otherwise, no change).\n\"case to detect the change on service, how to do it\" -- I have the answer in the unit tests!\nIf the MessageCacheItem was updated, the timestamp property would have changed to a later timestamp.", "author": "jessiejuachon", "createdAt": "2020-04-20T17:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MjU2OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409562569", "bodyText": "should judge if messages is empty before adding to cache.", "author": "linr211", "createdAt": "2020-04-16T13:38:18Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);\n+    \t} else {\n+    \t\tpathName = filePath;\n+    \t}\n+    \tMap<String, String> messages = JSONBundleUtil.getMessages(pathName);", "originalCommit": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2ODcxNg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409668716", "bodyText": "The judge is inside addCachedData.", "author": "jessiejuachon", "createdAt": "2020-04-16T15:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MjU2OQ=="}], "type": "inlineReview"}, {"oid": "ada17f19d4e56d283ae65886b08e0d6a71031ba7", "url": "https://github.com/vmware/singleton/commit/ada17f19d4e56d283ae65886b08e0d6a71031ba7", "message": "Code changes after review; code clean up", "committedDate": "2020-04-16T17:06:32Z", "type": "commit"}, {"oid": "fc60eeffd82dc8e8214207524bda4864edd05add", "url": "https://github.com/vmware/singleton/commit/fc60eeffd82dc8e8214207524bda4864edd05add", "message": "Using java.nio.file.Paths", "committedDate": "2020-04-17T16:14:41Z", "type": "commit"}, {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b", "url": "https://github.com/vmware/singleton/commit/3e70449176a975fa30985714d2c9f03795c72d6b", "message": "Offline mode as fallback when service fetch fails", "committedDate": "2020-04-17T17:07:36Z", "type": "commit"}, {"oid": "609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "url": "https://github.com/vmware/singleton/commit/609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "message": "Resetting VIPCfg and I18nFactory instances for each test", "committedDate": "2020-04-17T17:56:53Z", "type": "commit"}, {"oid": "dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "url": "https://github.com/vmware/singleton/commit/dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "message": "Resetting VIPCfg and I18nFactory after test", "committedDate": "2020-04-17T17:59:27Z", "type": "commit"}, {"oid": "7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "url": "https://github.com/vmware/singleton/commit/7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "message": "Fixing tests", "committedDate": "2020-04-17T22:31:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTEwNw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411125107", "bodyText": "Suggest checking cfg when initializing to report errors early.", "author": "Xiaochao8", "createdAt": "2020-04-20T06:29:48Z", "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -76,10 +76,13 @@ public Message getMessageInstance(Class c, VIPCfg cfg) {\n         Message i = null;\n         if (c == null) {\n             return i;\n-        } else if (this.getCfg().getVipServer() == null\n-                || this.getCfg().getProductName() == null\n+        } else if (this.getCfg().getProductName() == null\n                 || this.getCfg().getVersion() == null) {\n-            logger.error(\"VipServer|ProductName|Version is null!\");\n+            logger.error(\"ProductName|Version is null!\");\n+            return i;\n+        } else if (this.getCfg().getVipServer() == null \n+        \t\t&& this.getCfg().getOfflineResourcesBaseUrl() == null) {\n+        \tlogger.error(\"One of offlineResourcesBaseUrl and vipServer must not be null!\");", "originalCommit": "3e70449176a975fa30985714d2c9f03795c72d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4ODUyMg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411788522", "bodyText": "Yes, I agree. But let's not do it in this PR. The scope of this is for offline mode support only. Let's do the improvements in a separate PR.\nI also do not like that the I18nFactory has its own instance of VIPCfg, but let's not touch this for now.", "author": "jessiejuachon", "createdAt": "2020-04-21T00:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDkxNQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411130915", "bodyText": "The judge logic isn't consistent with comments'.", "author": "Xiaochao8", "createdAt": "2020-04-20T06:43:13Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -57,13 +60,27 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n \t        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n \t        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n-\t        \n-        \tif (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n-\t\t        Map<String,String> messages = this.getMsgsJson(response);\n-\t\t        if (messages != null) {\n-\t\t        \tcacheItem.addCachedData(messages);\n-\t\t        }\n-        \t}\n+\t\t\t      \n+\t        if (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n+\t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n+\t\t        try {\n+\t        \t\tif (getResponseCode(respObj) == 200 && \n+\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n+\t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "originalCommit": "3e70449176a975fa30985714d2c9f03795c72d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MjUyOQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411792529", "bodyText": "It actually is. Anyway, I have updated it to be more clear.", "author": "jessiejuachon", "createdAt": "2020-04-21T00:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3Mjg2Mw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411172863", "bodyText": "Should defaultLocale be from VIPCfg?", "author": "Xiaochao8", "createdAt": "2020-04-20T08:00:17Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,57 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), dto.getComment(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), LocaleUtility.defaultLocale.toLanguageTag(), null);", "originalCommit": "3e70449176a975fa30985714d2c9f03795c72d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzAwMw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411793003", "bodyText": "I am not changing this logic in this PR. The only change here is to support offline mode. Let's do it in the next PR.", "author": "jessiejuachon", "createdAt": "2020-04-21T01:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3Mjg2Mw=="}], "type": "inlineReview"}, {"oid": "5b92e4480ca25d122c7f98dc389d7e4884a59a25", "url": "https://github.com/vmware/singleton/commit/5b92e4480ca25d122c7f98dc389d7e4884a59a25", "message": "Limit to wiremock test logging", "committedDate": "2020-04-20T17:42:50Z", "type": "commit"}, {"oid": "dfb41b5042e733f21f5cda4428faab6e0a95e19a", "url": "https://github.com/vmware/singleton/commit/dfb41b5042e733f21f5cda4428faab6e0a95e19a", "message": "Decreasing unit test log", "committedDate": "2020-04-20T21:47:47Z", "type": "commit"}, {"oid": "21a7105c4fdc5d88d8db80340b3b00d947622cc7", "url": "https://github.com/vmware/singleton/commit/21a7105c4fdc5d88d8db80340b3b00d947622cc7", "message": "this test is timing out and trying to connect 70+ times", "committedDate": "2020-04-21T00:43:23Z", "type": "commit"}, {"oid": "84343d506461aea4976a86fa25e7bb1b06703150", "url": "https://github.com/vmware/singleton/commit/84343d506461aea4976a86fa25e7bb1b06703150", "message": "Adding comments to code", "committedDate": "2020-04-21T00:56:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411797853", "bodyText": "Service is removing fallback behavior.", "author": "Xiaochao8", "createdAt": "2020-04-21T01:15:30Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "originalCommit": "84343d506461aea4976a86fa25e7bb1b06703150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzQzNg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412393436", "bodyText": "The service-side's fallback to default locale? Yes we ignore it because we handle it on the client side. This is what is in the new client workflow. Please review the workflow, and then look at StringService lines 45-50.", "author": "jessiejuachon", "createdAt": "2020-04-21T18:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NTE3NA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413545174", "bodyText": "We don't need to consider fallback because service won't fallback in the future.", "author": "Xiaochao8", "createdAt": "2020-04-23T06:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExOTU4MA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414119580", "bodyText": "I did not understand your comment. Could you please expound?", "author": "jessiejuachon", "createdAt": "2020-04-23T20:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2MDI3OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416060278", "bodyText": "@Xiaochao8 , are we planning to change the service's locale fallback logic in the future?", "author": "jessiejuachon", "createdAt": "2020-04-27T18:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5OTE0NQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411799145", "bodyText": "I don't see where 'match' is. Could you point out?", "author": "Xiaochao8", "createdAt": "2020-04-21T01:19:30Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)\n+\t        \t\t\t\t// Use the response only if its locale matches the request's locale\n \t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n \t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "originalCommit": "84343d506461aea4976a86fa25e7bb1b06703150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5NTgzNA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412395834", "bodyText": "getResponseCode(respObj) == 200 --> means the response was successful\n\n\nLocaleUtility.isDefaultLocale(this.dto.getLocale()) --->  the request was for the default locale (en), so no problem\n\n\n!LocaleUtility.isDefaultLocale(getLocale(respObj)) --> the response's locale is not for the default locale (not en), so the service did not use the fallback mechanism here and therefore the response matches the request's locale.\n\n\nIf the response was 200, the request was for non-default, and the response was for the default locale, then we do not consider this case as \"successful\" fetch from service. So the client's fallback mechanism will kick in (review the workflow).", "author": "jessiejuachon", "createdAt": "2020-04-21T18:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5OTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411826443", "bodyText": "To get the string, the logic is not coherent, e.g. translation.getString is parallel with cacheItem.cachedData.get(key)\ndo you think it make sense?\nMy suggestion is CacheService should be in translation.getString, it should be not exposed to API caller(developer).", "author": "linr211", "createdAt": "2020-04-21T02:41:03Z", "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class OfflineModeTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"fil\");\n+    String comment = \"comment\";\n+    String messageFil = \"[{0}] Alerto sa pagsusuri\";\n+    String messageFr =\"[{0}] Alerte de test\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+        VIPCfg.resetInstance();\n+    }\n+    \n+    @Test\n+    public void testGetMsgsOfflineMode() {\n+    \tVIPCfg cfg = VIPCfg.getInstance();\n+  \n+        try {\n+            cfg.initialize(\"vipconfig-offline\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \t\n+        Cache c = cfg.createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(cfg);\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        \n+    \tCacheService cs = new CacheService(dto);\n+    \t\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tMessageCacheItem cacheItem = cs.getCacheOfComponent();\n+    \tassertNotNull(cacheItem);\n+    \tassertEquals(messageFil, cacheItem.cachedData.get(key));\t", "originalCommit": "84343d506461aea4976a86fa25e7bb1b06703150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNDIxNA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412404214", "bodyText": "I do not recommend for product developers to use CacheService directly. This code is just for testing that what translation.getString returned is same as what is in the cache. We still recommend getting the string using translation.getString().", "author": "jessiejuachon", "createdAt": "2020-04-21T18:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzNTI1NA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414235254", "bodyText": "Are both(transaltion.getString and cacheItem.cachedData.get) sequential? What transaltion.getString will return for the first call?", "author": "linr211", "createdAt": "2020-04-24T01:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw=="}], "type": "inlineReview"}, {"oid": "be8e443e6de5070baf91c76e1f4001188e8be0d5", "url": "https://github.com/vmware/singleton/commit/be8e443e6de5070baf91c76e1f4001188e8be0d5", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-04-21T18:26:20Z", "type": "commit"}, {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4", "url": "https://github.com/vmware/singleton/commit/b805d3672e0b286648b612dd48d3fabe73f92fd4", "message": "Adding timestamp to cache fromn local bundle", "committedDate": "2020-04-21T19:14:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412620189", "bodyText": "Suggest to set 'never expire'", "author": "Xiaochao8", "createdAt": "2020-04-22T02:21:08Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,6 +43,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\t\tgetResource(path.toString()).toURI());\n \t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n \t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());", "originalCommit": "b805d3672e0b286648b612dd48d3fabe73f92fd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwMTA5NA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413501094", "bodyText": "It has to expire becasue maybe the service was just temporarily down. So that when it expires, fetch from service can be re-tried.", "author": "jessiejuachon", "createdAt": "2020-04-23T04:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NTY5NQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413545695", "bodyText": "When service is empty, it should be set as never expire.", "author": "Xiaochao8", "createdAt": "2020-04-23T06:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNDUyMA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414904520", "bodyText": "See MessageCacheItem.isExpired", "author": "jessiejuachon", "createdAt": "2020-04-24T22:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ=="}], "type": "inlineReview"}, {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "url": "https://github.com/vmware/singleton/commit/17bc16cd019c4d40ad82df7590869f82a76b0a96", "message": "Deprecating methods in TranslationMessage; adding new method getMessage", "committedDate": "2020-04-23T04:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MDYxNg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413590616", "bodyText": "Why was this method added?\nAren't we going to remove source-related things out of client SDK?", "author": "Xiaochao8", "createdAt": "2020-04-23T07:49:23Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,6 +49,43 @@ public TranslationMessage() {\n         super();\n     }\n \n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,", "originalCommit": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyMjQ2Nw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414122467", "bodyText": "2 use cases for using source messages:\n\nSource not collected yet\nI think in some products, it is acceptable to deploy the product even if source messages have just been added/updated by developers, and available neither in Singleton service (online mode) nor offline bundles. (e.g. VMC deploys every 2 weeks if I am not mistaken. It can have new source strings that are not yet in the SaaS Singleton).  In this case, the source message will be displayed.\nisPseudo = true\n\nThat being said, only these 2 use cases use the source messages. #1 is not even applicable for on-prem products where translations have to be complete before release to production. #2 is not applicable in production.\nOn the other hand, there is no more source collection!\nAlso, the fallback mechanism (as seen in the new client workflow) uses the default locale instead of the source messages because the default locale may not be the same as the source locale. The implementation of this fallback mechanism is quite simple (about 10 lines of code in StringService.getString).\nNote: I have updated the code with method comments for clarity.", "author": "jessiejuachon", "createdAt": "2020-04-23T21:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MDYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMTc1OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413621759", "bodyText": "We don't need to provide such fine-grained interface internally. Suggest transfering component data internally, then getting string message in the last step.\nCache works in this way.", "author": "Xiaochao8", "createdAt": "2020-04-23T08:34:05Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,58 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());\n+\t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n+\t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());\n+\t\t} catch (Exception e) {\n+\t\t\t// Do not update cacheItem\n+\t\t}\n+    }\n \n+    @Override\n     public String getString() {", "originalCommit": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNTc3Nw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414905777", "bodyText": "okay", "author": "jessiejuachon", "createdAt": "2020-04-24T22:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMTc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDU0MA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413624540", "bodyText": "Should log error when check fails?", "author": "Xiaochao8", "createdAt": "2020-04-23T08:37:56Z", "path": "src/main/java/com/vmware/vipclient/i18n/util/FormatUtils.java", "diffHunk": "@@ -30,7 +30,10 @@ public static String format(String pattern, Object... arguments) {\n     }\n \n     public static String format(String pattern, Locale locale, Object... arguments) {\n-        MessageFormat messageFormat = new MessageFormat(pattern, locale);\n-        return messageFormat.format(arguments, new StringBuilder(), new FieldPosition(0)).toString();\n+    \tif (pattern != null && !pattern.isEmpty() && arguments != null && arguments.length > 0) {", "originalCommit": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNzMyMA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414907320", "bodyText": "okay", "author": "jessiejuachon", "createdAt": "2020-04-24T22:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDU0MA=="}], "type": "inlineReview"}, {"oid": "15da01004363a3441944149c106b79908ba4cde6", "url": "https://github.com/vmware/singleton/commit/15da01004363a3441944149c106b79908ba4cde6", "message": "Added tests for TranslationMessage.getMessage", "committedDate": "2020-04-24T08:58:03Z", "type": "commit"}, {"oid": "631de868cb3b40899ace35017268bdb65b236091", "url": "https://github.com/vmware/singleton/commit/631de868cb3b40899ace35017268bdb65b236091", "message": "Fixing test", "committedDate": "2020-04-24T09:15:35Z", "type": "commit"}, {"oid": "ffd9adb09499997921630426e9a8327bf615ee50", "url": "https://github.com/vmware/singleton/commit/ffd9adb09499997921630426e9a8327bf615ee50", "message": "Fixing test", "committedDate": "2020-04-24T09:28:59Z", "type": "commit"}, {"oid": "c00f7ae3cacc0e17ab59a776b02c3be04a106252", "url": "https://github.com/vmware/singleton/commit/c00f7ae3cacc0e17ab59a776b02c3be04a106252", "message": "Fixing test", "committedDate": "2020-04-24T20:29:27Z", "type": "commit"}, {"oid": "d0504c49a179166868cbae84874647925d88c2a3", "url": "https://github.com/vmware/singleton/commit/d0504c49a179166868cbae84874647925d88c2a3", "message": "Removing comment field because source collection is not supported anymore; cleaning up tests; adding comments for javadoc", "committedDate": "2020-04-24T22:28:00Z", "type": "commit"}, {"oid": "79b18d0035a35a23fb26fe76cae4868e848a11b8", "url": "https://github.com/vmware/singleton/commit/79b18d0035a35a23fb26fe76cae4868e848a11b8", "message": "Code clean up", "committedDate": "2020-04-24T22:44:30Z", "type": "commit"}, {"oid": "ec9f5db8cd6110c5b714bc098d54680308c63d9a", "url": "https://github.com/vmware/singleton/commit/ec9f5db8cd6110c5b714bc098d54680308c63d9a", "message": "Changes from code review", "committedDate": "2020-04-24T22:58:26Z", "type": "commit"}, {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "url": "https://github.com/vmware/singleton/commit/2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "message": "Code clean up", "committedDate": "2020-04-24T23:25:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMDA0Mg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415200042", "bodyText": "args is unnecessary.", "author": "Xiaochao8", "createdAt": "2020-04-26T03:10:14Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {", "originalCommit": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1Nzg5OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416057899", "bodyText": "Right", "author": "jessiejuachon", "createdAt": "2020-04-27T18:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMDA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNTk0Mw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415205943", "bodyText": "Still need to consider if isPseudo == true?", "author": "Xiaochao8", "createdAt": "2020-04-26T03:48:50Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  ", "originalCommit": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2ODM1OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416068358", "bodyText": "Question.. why do we need to fetch the actual localized message if isPseudo is true? Isn't isPseudo just to show which keys use the client library? So isn't it enough to wrap the key like @@key@@?", "author": "jessiejuachon", "createdAt": "2020-04-27T18:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNTk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQ4MQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415206481", "bodyText": "It seems that this line is unnecessary.", "author": "Xiaochao8", "createdAt": "2020-04-26T03:52:26Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {", "originalCommit": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzczNA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416057734", "bodyText": "Right", "author": "jessiejuachon", "createdAt": "2020-04-27T18:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc2OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415206768", "bodyText": "Need to consider if adding ConstantsKeys.PSEUDOCHAR2?", "author": "Xiaochao8", "createdAt": "2020-04-26T03:54:23Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  \n+\t\t    \t\n+    \t\t}\n+    \t}\n+    \treturn FormatUtils.format(message, locale, args);\t", "originalCommit": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e44a8c46fd2856ca97cf71158cb9804880e3e17", "url": "https://github.com/vmware/singleton/commit/4e44a8c46fd2856ca97cf71158cb9804880e3e17", "message": "Optional SourceOpt in initialization\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-04-26T22:36:42Z", "type": "commit"}, {"oid": "de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "url": "https://github.com/vmware/singleton/commit/de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "message": "Fixing test", "committedDate": "2020-04-27T00:58:16Z", "type": "commit"}, {"oid": "406cb2a268cd5e18eee310577137c8f364bc8309", "url": "https://github.com/vmware/singleton/commit/406cb2a268cd5e18eee310577137c8f364bc8309", "message": "Adding comments to code", "committedDate": "2020-04-28T03:14:02Z", "type": "commit"}, {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "url": "https://github.com/vmware/singleton/commit/c80696ab2f0bdfcc80ba268705ed147aed423b07", "message": "Adding comment for javadoc", "committedDate": "2020-04-28T04:33:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NDc5OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416394799", "bodyText": "why need to set it again? the instance of factory already has initialized with the cfg.", "author": "linr211", "createdAt": "2020-04-28T07:35:08Z", "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1Mjk1OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416852958", "bodyText": "For testing purposes where different tests may use different config files. See CacheServiceTest.java", "author": "jessiejuachon", "createdAt": "2020-04-28T19:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NDc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416401441", "bodyText": "VIPCfg.java is designed for the configuration file only and Opt classes are called by Service classes, so it's not proper to have it in this file.", "author": "linr211", "createdAt": "2020-04-28T07:46:18Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -56,7 +62,18 @@\n     private String                     version;\n     private String                     vipServer;\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n-\n+    private String\t\t\t\t\t   offlineResourcesBaseUrl;\n+    \n+    /**\n+     * The optional SourceOpt object to access source messages. If SourceOpt is defined, then you can use a source message:\n+     * \ta. as fallback if neither localized message nor default locale message was not retrieved successfully\n+     * \tb. for pseudo-translation\n+     * \tc. if the message hasn't been collected for localization\n+     * e.g. ResourceBundleSrcOpt is the SourceOpt implementation that retrieves source messages from a .properties file. \n+     * If source messages need to come from another location such as a DB, then have another implementation like DBSourceOpt.\n+     */\n+    private SourceOpt\t\t\t\t   srcOpt;", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MjU4OQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416852589", "bodyText": "Where would you like to have it?", "author": "jessiejuachon", "createdAt": "2020-04-28T19:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwODk1NQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417008955", "bodyText": "Move this to the next PR", "author": "jessiejuachon", "createdAt": "2020-04-29T00:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416401877", "bodyText": "when this function will be called?", "author": "linr211", "createdAt": "2020-04-28T07:46:49Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -86,6 +103,10 @@ public static synchronized VIPCfg getInstance() {\n         }\n         return gcInstance;\n     }\n+    \n+    public static synchronized void resetInstance() {", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NTcxMw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416855713", "bodyText": "See @before in CacheServiceTest.java and OfflineModeTest.java\nVipCfg is different for each test so have to reset it.\nI see that for other tests, you are manually putting configurations back to original as a workaround.", "author": "jessiejuachon", "createdAt": "2020-04-28T19:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTU2Ng==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417015566", "bodyText": "I will change this.", "author": "jessiejuachon", "createdAt": "2020-04-29T01:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416402648", "bodyText": "not proper parameter of SourceOpt", "author": "linr211", "createdAt": "2020-04-28T07:48:11Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -120,9 +141,19 @@ public void initialize(String vipServer, String productName, String version) {\n     }\n     \n     /**\n-     * initialize the instance by a properties file\n+     * Initialize VIPCfg instance using a configuration file\n+     * \n+     * @param cfg The configuration file\n+     * @param srcOpt The optional SourceOpt object which gives access to source messages\n+     */\n+    public void initialize(String cfg, SourceOpt srcOpt) throws VIPClientInitException {", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NjYxNg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416856616", "bodyText": "Where would you like to define the source? You hardcoded the source type to a ResourceBundle in getString2, which does not address the use case you mentioned the other time where source messages could come from DB or something else.\nWhat is your solution to this? Using the old getString with source parameter is not acceptable because it is error prone and devs have to type the source manually every time they need to use the string.", "author": "jessiejuachon", "createdAt": "2020-04-28T19:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTY1MA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417015650", "bodyText": "Let's move this to the next PR", "author": "jessiejuachon", "createdAt": "2020-04-29T01:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416405923", "bodyText": "i am not sure the remove for source collection codes is clean or not, so please have another PR for it.", "author": "linr211", "createdAt": "2020-04-28T07:53:29Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -303,10 +342,12 @@ public void setPseudo(boolean pseudo) {\n         this.pseudo = pseudo;\n     }\n \n+    @Deprecated", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NzY1NA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416857654", "bodyText": "What would you like me to remove? The @deprecated annotations?\nWhich part about removing source collection do you not understand?", "author": "jessiejuachon", "createdAt": "2020-04-28T19:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTg2NQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417015865", "bodyText": "Move the source logic for getMessage in the next PR.", "author": "jessiejuachon", "createdAt": "2020-04-29T01:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416408244", "bodyText": "not proper to config the SourceOpt in VIPcfg.java", "author": "linr211", "createdAt": "2020-04-28T07:57:04Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {\n+\t\tthis.msgOriginsQueue = msgOriginsQueue;\n+\t}\n+\n+\tpublic SourceOpt getSrcOpt() {\n+\t\treturn srcOpt;\n+\t}\n+\n+\tpublic void setSrcOpt(SourceOpt srcOpt) {\n+\t\tthis.srcOpt = srcOpt;\n+\t}", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1ODY3MQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416858671", "bodyText": "Where would you like to put it?", "author": "jessiejuachon", "createdAt": "2020-04-28T19:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNzc4Mg==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417017782", "bodyText": "Move to the next PR", "author": "jessiejuachon", "createdAt": "2020-04-29T01:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416515750", "bodyText": "if the message is not empty, should return it and skip source handling?", "author": "linr211", "createdAt": "2020-04-28T10:47:39Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -47,29 +48,104 @@ public void setCfg(final VIPCfg cfg) {\n     public TranslationMessage() {\n         super();\n     }\n-\n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The optional SourceOpt object which gives access to source messages\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from sourceOpt, if available</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = null;\n+    \tSourceOpt sourceOpt = VIPCfg.getInstance().getSrcOpt();\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \t// If sourceOpt is defined, pseudo-translation which uses the source message is supported\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \t// Get the message in the target locale\n+    \tmessage = getCachedMessage(component, key, locale);", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MDM1NA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416860354", "bodyText": "That was my initial thought, but the code in getString uses the source message for the following:\n```\n// \ta. if neither localized message nor default locale message was not retrieved successfully\n// \tb. for pseudo-translation\n//      c. if the message hasn't been collected for localization\nCan we skip these?", "author": "jessiejuachon", "createdAt": "2020-04-28T19:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNzkwMA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417017900", "bodyText": "Move to the next PR", "author": "jessiejuachon", "createdAt": "2020-04-29T01:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2Nzk5OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416667998", "bodyText": "For the first call, the cacheOfComponent will be empty and then fallback to default value? is this correct?", "author": "linr211", "createdAt": "2020-04-28T14:38:57Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,59 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), ", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2Mjg2NQ==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416862865", "bodyText": "Yes, this is correct. If query for the target locale failed, then query for the default locale (which may or may not be the same as the source locale).  See the workflow design:\nhttps://confluence.eng.vmware.com/display/GQ/Singleton+Client+Library+-+Caching%2C+Fallback+Mechanism%2C+and+Other+Features#SingletonClientLibrary-Caching,FallbackMechanism,andOtherFeatures-L10nQuery", "author": "jessiejuachon", "createdAt": "2020-04-28T19:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2Nzk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3OTY5MA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416679690", "bodyText": "I don't see how to use this function 'setMsgOriginsQueue' and how to create the parameter 'msgOriginsQueue'.", "author": "linr211", "createdAt": "2020-04-28T14:53:13Z", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "originalCommit": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1ODIxMA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416858210", "bodyText": "This function is not used, I can remove it if you like.\nSee VIPCfg.initialize:\n        // so add DataSourceEnum.VIP first to msgOriginsQueue\n        if (prop.containsKey(\"vipServer\")) {\n            this.vipServer = prop.getString(\"vipServer\");\n            this.msgOriginsQueue.add(DataSourceEnum.VIP);\n        }\n        if (prop.containsKey(\"offlineResourcesBaseUrl\")) {\n        \tthis.offlineResourcesBaseUrl = prop.getString(\"offlineResourcesBaseUrl\");\n        \tthis.msgOriginsQueue.add(DataSourceEnum.Bundle);\n        }", "author": "jessiejuachon", "createdAt": "2020-04-28T19:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3OTY5MA=="}], "type": "inlineReview"}, {"oid": "79d111e4404a4f171dcdfb001228afcbad996753", "url": "https://github.com/vmware/singleton/commit/79d111e4404a4f171dcdfb001228afcbad996753", "message": "Cleaning up code", "committedDate": "2020-04-28T21:54:07Z", "type": "commit"}, {"oid": "24d8d5d7ee9e667c88187761c5332d3c9485cf26", "url": "https://github.com/vmware/singleton/commit/24d8d5d7ee9e667c88187761c5332d3c9485cf26", "message": "Code clean up", "committedDate": "2020-04-28T22:02:21Z", "type": "commit"}, {"oid": "23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "url": "https://github.com/vmware/singleton/commit/23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "message": "Fixing test", "committedDate": "2020-04-28T23:28:49Z", "type": "commit"}, {"oid": "369643f588359e1ceb430768ab473566c503da3c", "url": "https://github.com/vmware/singleton/commit/369643f588359e1ceb430768ab473566c503da3c", "message": "Removing source message fallback from this PR", "committedDate": "2020-04-29T03:17:37Z", "type": "commit"}, {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "url": "https://github.com/vmware/singleton/commit/4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-04-29T04:09:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMjc3OA==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417202778", "bodyText": "The path should be relative to current working directory instead of Thread.currentThread().getContextClassLoader(), to make it easy to collect source.\nSource collection will make use of config file.", "author": "Xiaochao8", "createdAt": "2020-04-29T10:04:50Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,49 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n-\n-    public String getString() {\n-        JSONObject jo = this.getComponentMessages();\n-        String k = dto.getKey();\n-        String v = \"\";\n-        if (jo != null) {\n-            v = jo.get(k) == null ? \"\" : v;\n-        }\n-        return v;\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());", "originalCommit": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODg0Mw==", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417448843", "bodyText": "Let's make this change after this PR because it is related to source collection?\nAlso, source collection will NOT make use of config file.", "author": "jessiejuachon", "createdAt": "2020-04-29T16:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMjc3OA=="}], "type": "inlineReview"}]}