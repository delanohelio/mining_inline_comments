{"pr_number": 693, "pr_title": "Add create timezone name list feature data", "pr_createdAt": "2020-07-28T07:26:59Z", "pr_url": "https://github.com/vmware/singleton/pull/693", "timeline": [{"oid": "fe80fc0c3102b6ddbf30d87a560676a173c365f4", "url": "https://github.com/vmware/singleton/commit/fe80fc0c3102b6ddbf30d87a560676a173c365f4", "message": "add the jars", "committedDate": "2020-06-24T09:33:33Z", "type": "commit"}, {"oid": "14815bc25d0075a09323997d48362a6e316fbaf5", "url": "https://github.com/vmware/singleton/commit/14815bc25d0075a09323997d48362a6e316fbaf5", "message": "add the CSP token feature", "committedDate": "2020-07-08T06:54:30Z", "type": "commit"}, {"oid": "f5c95e230d4b4e7fe42be3452180091c57dc459a", "url": "https://github.com/vmware/singleton/commit/f5c95e230d4b4e7fe42be3452180091c57dc459a", "message": "add the CSP token feature", "committedDate": "2020-07-08T07:07:33Z", "type": "commit"}, {"oid": "ddd799c2bf4c4af3d2941a713290ed2d765673d2", "url": "https://github.com/vmware/singleton/commit/ddd799c2bf4c4af3d2941a713290ed2d765673d2", "message": "Merge branch 'master' into master", "committedDate": "2020-07-09T07:15:14Z", "type": "commit"}, {"oid": "61eb2fee1eac45123b5b43e9889130b536889535", "url": "https://github.com/vmware/singleton/commit/61eb2fee1eac45123b5b43e9889130b536889535", "message": "add the whitelist feature of l10n", "committedDate": "2020-07-15T03:42:02Z", "type": "commit"}, {"oid": "b2554db64192063be06769d728ee24b5141a6e58", "url": "https://github.com/vmware/singleton/commit/b2554db64192063be06769d728ee24b5141a6e58", "message": "Merge branch 'master' into master", "committedDate": "2020-07-15T06:26:07Z", "type": "commit"}, {"oid": "221df03e5e80ebf417df07644bf90ede08757e31", "url": "https://github.com/vmware/singleton/commit/221df03e5e80ebf417df07644bf90ede08757e31", "message": "add the bundle.json location", "committedDate": "2020-07-16T02:37:08Z", "type": "commit"}, {"oid": "2accaf27509d83e022c57603da245412cab97176", "url": "https://github.com/vmware/singleton/commit/2accaf27509d83e022c57603da245412cab97176", "message": "add the unit test", "committedDate": "2020-07-16T03:15:23Z", "type": "commit"}, {"oid": "a3504f7f0f11fc7809d6e53b3c649dcbf2fcd8a8", "url": "https://github.com/vmware/singleton/commit/a3504f7f0f11fc7809d6e53b3c649dcbf2fcd8a8", "message": "upgrade the tomcat jars", "committedDate": "2020-07-21T03:59:30Z", "type": "commit"}, {"oid": "2fe1ced2011b70bcd09485297e4b3b1d567ad002", "url": "https://github.com/vmware/singleton/commit/2fe1ced2011b70bcd09485297e4b3b1d567ad002", "message": "upgrade the tomcat jars", "committedDate": "2020-07-21T06:36:54Z", "type": "commit"}, {"oid": "e3103e7dfd5341e96d4dc2ea878b3922c8de0e84", "url": "https://github.com/vmware/singleton/commit/e3103e7dfd5341e96d4dc2ea878b3922c8de0e84", "message": "Merge branch 'master' into master", "committedDate": "2020-07-21T06:42:25Z", "type": "commit"}, {"oid": "a6f4084bf3ed6c126dba73b8fb6776a7465839b3", "url": "https://github.com/vmware/singleton/commit/a6f4084bf3ed6c126dba73b8fb6776a7465839b3", "message": "fixed the l10n bugs", "committedDate": "2020-07-22T01:24:43Z", "type": "commit"}, {"oid": "62bfefc7ac16208eff6de713c5003c2081a4795b", "url": "https://github.com/vmware/singleton/commit/62bfefc7ac16208eff6de713c5003c2081a4795b", "message": "fixed the unit test error", "committedDate": "2020-07-22T06:10:23Z", "type": "commit"}, {"oid": "01bf500b40bdca488c158fdba84db9df1e49a183", "url": "https://github.com/vmware/singleton/commit/01bf500b40bdca488c158fdba84db9df1e49a183", "message": "Merge branch 'master' into master", "committedDate": "2020-07-22T06:15:25Z", "type": "commit"}, {"oid": "354d24f6f6fd09a8296adde5ead2711316f2fcb1", "url": "https://github.com/vmware/singleton/commit/354d24f6f6fd09a8296adde5ead2711316f2fcb1", "message": "add the key base translation", "committedDate": "2020-07-23T06:37:33Z", "type": "commit"}, {"oid": "337de429b88d94ade144e78cf0b41a2cbd165209", "url": "https://github.com/vmware/singleton/commit/337de429b88d94ade144e78cf0b41a2cbd165209", "message": "add get the timezone name list cldr data", "committedDate": "2020-07-28T07:01:34Z", "type": "commit"}, {"oid": "8fea97c676519ae0924e491f8c8a5be55d88b678", "url": "https://github.com/vmware/singleton/commit/8fea97c676519ae0924e491f8c8a5be55d88b678", "message": "Merge branch 'master' into master", "committedDate": "2020-07-28T07:27:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Njg2OA==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462086868", "bodyText": "Instead of creating a select method, you can use it directly JSONUtil.select()", "author": "chaoq0318", "createdAt": "2020-07-29T07:13:19Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.i18n.utils.timezone;\n+\n+import java.text.MessageFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class CldrTimeZoneUtils {\n+    \n+  \n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n+            String language) {\n+        JSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n+        JSONObject dates = (JSONObject) select(timeZoneNamesPath,\"main.\" + language + \".dates\");\n+        String gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n+        String gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n+        String hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n+        String regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n+        String regionFormatTypeDaylight = (String) select(dates,\n+                \"timeZoneNames.regionFormat-type-daylight\");\n+        String regionFormatTypeStandard = (String) select(dates,\n+                \"timeZoneNames.regionFormat-type-standard\");\n+        String fallbackFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n+        Iterator<JSONObject> iterator = arry.iterator();\n+        List<CldrMetaZone> metaZones = new ArrayList<>();\n+        while (iterator.hasNext()) {\n+            JSONObject objZone = iterator.next();\n+            String zoneKey = (String) select(objZone, \"mapZone._type\");\n+            String territory = (String) select(objZone, \"mapZone._territory\");\n+            String metazoneKey = (String) select(objZone, \"mapZone._other\");\n+            JSONObject metazoneValue = (JSONObject) select(dates,\n+                    \"timeZoneNames.metazone.\" + metazoneKey);\n+            String timeZone = findTimeZone(zoneKey, gmtFormat, gmtZeroFormat, hourFormat);\n+            String exemplarCity = null;\n+            try {\n+                exemplarCity = (String) select(dates,\n+                        \"timeZoneNames.zone.\" + zoneKey.replace(\"/\", \".\") + \".exemplarCity\");\n+\n+            } catch (Exception e) {\n+                // TODO Auto-generated catch block\n+                exemplarCity = \"\";\n+                e.printStackTrace();\n+            }\n+\n+            TimeZoneDisplayName name = new TimeZoneDisplayName();\n+            if (metazoneValue == null) {\n+                String stard = MessageFormat.format(regionFormatTypeStandard, exemplarCity);\n+                name.setLongStandard(stard);\n+            } else {\n+                String longStandard = (String) select(metazoneValue, \"long.standard\");\n+                String longDaylight = (String) select(metazoneValue, \"long.daylight\");\n+                String longGeneric = (String) select(metazoneValue, \"long.generic\");\n+                String shortStandard = (String) select(metazoneValue, \"short.standard\");\n+                String shortDaylight = (String) select(metazoneValue, \"short.daylight\");\n+                String shortGeneric = (String) select(metazoneValue, \"short.generic\");\n+                name.setLongStandard(longStandard);\n+                name.setLongDaylight(longDaylight);\n+                name.setLongGeneric(longGeneric);\n+                name.setShortStandard(shortStandard);\n+                name.setShortDaylight(shortDaylight);\n+                name.setShortGeneric(shortGeneric);\n+            }\n+            metaZones.add(new CldrMetaZone(zoneKey, exemplarCity, metazoneKey, timeZone, name,\n+                    territory));\n+        }\n+\n+        TimeZoneName zone = new TimeZoneName(language, gmtZeroFormat, gmtFormat, hourFormat,\n+                regionFormat, regionFormatTypeDaylight, regionFormatTypeStandard, fallbackFormat,\n+                metaZones);\n+        String result = null;\n+        try {\n+            result = new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(zone);\n+        } catch (JsonProcessingException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+        return result;\n+    }\n+\n+    private static String findTimeZone(String targetId, String gmtFormat, String gmtZeroFormat,\n+            String hourFormat) {\n+\n+        TimeZone timeZone = TimeZone.getTimeZone(targetId);\n+        \n+\n+        int offset = timeZone.getRawOffset();\n+        // System.out.println(timeZone.getDisplayName()+\" gmt\"+offset/3600000);\n+\n+        if (offset > 0) {\n+            Date date = new Date(offset);\n+            SimpleDateFormat outputFormat = new SimpleDateFormat(hourFormat.split(\";\")[0].trim());\n+            outputFormat.setTimeZone(TimeZone.getTimeZone(gmtZeroFormat));\n+            return MessageFormat.format(gmtFormat, outputFormat.format(date));\n+\n+        } else if (offset < 0) {\n+            Date date = new Date(0 - offset);\n+            SimpleDateFormat outputFormat = new SimpleDateFormat(hourFormat.split(\";\")[1].trim());\n+            outputFormat.setTimeZone(TimeZone.getTimeZone(gmtZeroFormat));\n+            return MessageFormat.format(gmtFormat, outputFormat.format(date));\n+\n+        } else {\n+            return gmtZeroFormat;\n+        }\n+    }\n+\n+    /**\n+     * Get the node value of JSON string. e.g. main.locale.day\n+     * @param jsonObj JSONObject\n+     * @param keyPath JSON node path\n+     * @return the node value\n+     */\n+    private static Object select(JSONObject jsonObj, String keyPath) {", "originalCommit": "8fea97c676519ae0924e491f8c8a5be55d88b678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0MDUzMQ==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462840531", "bodyText": "done", "author": "tigershi", "createdAt": "2020-07-30T08:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Njg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4ODY1Ng==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462088656", "bodyText": "writeJsonStr2File and writePatternDataIntoFile may be unified into one method, or you can directly use writePatternDataIntoFile", "author": "chaoq0318", "createdAt": "2020-07-29T07:16:45Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "diffHunk": "@@ -1125,8 +1128,63 @@ public static void languageDataExtract() {\n         logger.info(\"Extract languageData.json data complete!\");\n     }\n \n+    \n+    public static void writeJsonStr2File(String filePath, String jsonStr) {", "originalCommit": "8fea97c676519ae0924e491f8c8a5be55d88b678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0MjYxMw==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462842613", "bodyText": "can't use it", "author": "tigershi", "createdAt": "2020-07-30T08:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4ODY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4OTcwOA==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462089708", "bodyText": "System.out.println --> logger.info", "author": "chaoq0318", "createdAt": "2020-07-29T07:18:53Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "diffHunk": "@@ -1125,8 +1128,63 @@ public static void languageDataExtract() {\n         logger.info(\"Extract languageData.json data complete!\");\n     }\n \n+    \n+    public static void writeJsonStr2File(String filePath, String jsonStr) {\n+        OutputStreamWriter write = null;\n+        BufferedWriter writer = null;\n+        FileOutputStream outputStream = null;\n+        try {\n+            File f = new File(filePath);\n+            if (!f.getParentFile().exists()) {\n+                f.getParentFile().mkdirs();\n+            }\n+            if (!f.exists()) {\n+                f.createNewFile();\n+            }\n+            System.out.println(f.getAbsolutePath());", "originalCommit": "8fea97c676519ae0924e491f8c8a5be55d88b678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4OTgyNw==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462089827", "bodyText": "System.out.println --> logger.info", "author": "chaoq0318", "createdAt": "2020-07-29T07:19:08Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "diffHunk": "@@ -1125,8 +1128,63 @@ public static void languageDataExtract() {\n         logger.info(\"Extract languageData.json data complete!\");\n     }\n \n+    \n+    public static void writeJsonStr2File(String filePath, String jsonStr) {\n+        OutputStreamWriter write = null;\n+        BufferedWriter writer = null;\n+        FileOutputStream outputStream = null;\n+        try {\n+            File f = new File(filePath);\n+            if (!f.getParentFile().exists()) {\n+                f.getParentFile().mkdirs();\n+            }\n+            if (!f.exists()) {\n+                f.createNewFile();\n+            }\n+            System.out.println(f.getAbsolutePath());\n+            outputStream = new FileOutputStream(f);\n+            write = new OutputStreamWriter(outputStream, Constants.UTF8);\n+            writer = new BufferedWriter(write);\n+            writer.write(jsonStr);\n+            writer.flush();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            IOUtil.closeWriter(writer);\n+            IOUtil.closeWriter(write);\n+            IOUtil.closeOutputStream(outputStream);\n+        }\n+    }\n+    \n+    /**\n+     * Extract timeZoneNames.json\n+     */\n+\tpublic static void patternTimeZoneNameExtract() {\n+\t\tSystem.out.println(\"Start to extract timezonename pattern data ... \");\n+\t\tMap<String, String> allLocales = getAllCldrLocales();\n+\t\tSystem.out.println(\"allLocales size is : \" + allLocales.size());\n+\t\tString coreZipPath = CLDRConstants.CORE_ZIP_FILE_PATH;\n+\t\tString metaZonefileName = CLDRConstants.CLDR_CORE_METAZONE;\n+\t\tSystem.out.println(metaZonefileName);", "originalCommit": "8fea97c676519ae0924e491f8c8a5be55d88b678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDA5Mw==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462090093", "bodyText": "ditto", "author": "chaoq0318", "createdAt": "2020-07-29T07:19:40Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "diffHunk": "@@ -1125,8 +1128,63 @@ public static void languageDataExtract() {\n         logger.info(\"Extract languageData.json data complete!\");\n     }\n \n+    \n+    public static void writeJsonStr2File(String filePath, String jsonStr) {\n+        OutputStreamWriter write = null;\n+        BufferedWriter writer = null;\n+        FileOutputStream outputStream = null;\n+        try {\n+            File f = new File(filePath);\n+            if (!f.getParentFile().exists()) {\n+                f.getParentFile().mkdirs();\n+            }\n+            if (!f.exists()) {\n+                f.createNewFile();\n+            }\n+            System.out.println(f.getAbsolutePath());\n+            outputStream = new FileOutputStream(f);\n+            write = new OutputStreamWriter(outputStream, Constants.UTF8);\n+            writer = new BufferedWriter(write);\n+            writer.write(jsonStr);\n+            writer.flush();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            IOUtil.closeWriter(writer);\n+            IOUtil.closeWriter(write);\n+            IOUtil.closeOutputStream(outputStream);\n+        }\n+    }\n+    \n+    /**\n+     * Extract timeZoneNames.json\n+     */\n+\tpublic static void patternTimeZoneNameExtract() {\n+\t\tSystem.out.println(\"Start to extract timezonename pattern data ... \");\n+\t\tMap<String, String> allLocales = getAllCldrLocales();\n+\t\tSystem.out.println(\"allLocales size is : \" + allLocales.size());\n+\t\tString coreZipPath = CLDRConstants.CORE_ZIP_FILE_PATH;\n+\t\tString metaZonefileName = CLDRConstants.CLDR_CORE_METAZONE;\n+\t\tSystem.out.println(metaZonefileName);\n+\t\tString metaZonejson = CLDRUtils.readZip(metaZonefileName, coreZipPath);\n+\t    System.out.println(metaZonejson);\n+\t\tJSONObject metaZoneObj = JSONUtil.string2JSON(metaZonejson);\n+\t\tfor (String locale : allLocales.values()) {\n+\t\t\tSystem.out.println(\"locale is:\" + locale);\n+\t\t\tString zipPath = CLDRConstants.DATE_ZIP_FILE_PATH;\n+\t\t\tString timeZoneNameFileName = MessageFormat.format(CLDRConstants.CLDR_DATES_FULL_DATE_TIMEZONENAME,\n+\t\t\t\t\tCLDR_VERSION, locale);\n+\t\t\tString timeZoneNameJson = CLDRUtils.readZip(timeZoneNameFileName, zipPath);\n+\t\t\tSystem.out.println(timeZoneNameJson);", "originalCommit": "8fea97c676519ae0924e491f8c8a5be55d88b678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg0NzQ2Ng==", "url": "https://github.com/vmware/singleton/pull/693#discussion_r462847466", "bodyText": "done", "author": "tigershi", "createdAt": "2020-07-30T08:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDA5Mw=="}], "type": "inlineReview"}, {"oid": "d43d44e080de1facf8a3afc0a5ace32435671cc2", "url": "https://github.com/vmware/singleton/commit/d43d44e080de1facf8a3afc0a5ace32435671cc2", "message": "fixed the comments", "committedDate": "2020-07-30T08:47:15Z", "type": "commit"}, {"oid": "d0f5d3b464c1798dc616bd9af8dbd0d802bb82fe", "url": "https://github.com/vmware/singleton/commit/d0f5d3b464c1798dc616bd9af8dbd0d802bb82fe", "message": "fixed the comments", "committedDate": "2020-07-30T09:26:54Z", "type": "commit"}, {"oid": "4b2e08a88f7ffb6f62285c3f241f7d85cca63c6b", "url": "https://github.com/vmware/singleton/commit/4b2e08a88f7ffb6f62285c3f241f7d85cca63c6b", "message": "format the code", "committedDate": "2020-08-03T08:04:17Z", "type": "commit"}, {"oid": "4745bda7e205bb27941b12a5fc03c40cc4ab227d", "url": "https://github.com/vmware/singleton/commit/4745bda7e205bb27941b12a5fc03c40cc4ab227d", "message": "Merge branch 'master' into master", "committedDate": "2020-08-03T08:07:01Z", "type": "commit"}]}