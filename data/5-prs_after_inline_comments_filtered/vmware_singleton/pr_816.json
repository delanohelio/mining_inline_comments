{"pr_number": 816, "pr_title": "Merge from 4.0.2 branch", "pr_createdAt": "2020-10-12T05:10:24Z", "pr_url": "https://github.com/vmware/singleton/pull/816", "timeline": [{"oid": "9d617ba6e974fbcb6580f4ed00491bb82a6cef53", "url": "https://github.com/vmware/singleton/commit/9d617ba6e974fbcb6580f4ed00491bb82a6cef53", "message": "Merge from 4.0.2 branch", "committedDate": "2020-10-12T04:54:07Z", "type": "commit"}, {"oid": "071dd1cdcafcfccc27bd40215c8f9c2597c2f147", "url": "https://github.com/vmware/singleton/commit/071dd1cdcafcfccc27bd40215c8f9c2597c2f147", "message": "Revise FormatUtils", "committedDate": "2020-10-12T06:37:56Z", "type": "commit"}, {"oid": "a60d0aa1ec60565e0b3ed47fe0628501e14e8354", "url": "https://github.com/vmware/singleton/commit/a60d0aa1ec60565e0b3ed47fe0628501e14e8354", "message": "Fix sonar scan error", "committedDate": "2020-10-12T06:57:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyNTg4Nw==", "url": "https://github.com/vmware/singleton/pull/816#discussion_r509125887", "bodyText": "This code block appear multiple times in this class, so I think it can be wrapped as a method and put into FormatUtil class, then the code lines in this class can be reduced and code looks more clear.", "author": "huihuiw01", "createdAt": "2020-10-21T09:23:10Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -96,67 +104,141 @@ public String getMessage(final Locale locale, final String component, final Stri\n      *            used to format the message with placeholder, it's not required\n      *            if the message doesn't contain any placeholder\n      * @return string\n-     * @deprecated Replaced by {@link #getMessage(Locale, String, String, Object...)} \n-     * \t\twhich fetches source messages from messages_source.json of the component.\n-     * \t\tThis method only supports English as both the default and the source locale.\n-     */ \n-     public String getString(final Locale locale, final String component,\n+     */\n+    public String getString(final Locale locale, final String component,\n             final String key, final String source, final String comment, final Object... args) {\n-        this.logger.trace(\"Start to execute TranslationMessage.getString\");\n+        return getStringWithArgs(locale, component, key, source, comment, args);\n+    }\n+\n+    /**\n+     * get a translation under the component of the configured product\n+     *\n+     * @param locale\n+     *            an object used to get the source's translation\n+     * @param component\n+     *            defined on VIP service, it will be created automatically if\n+     *            not exist\n+     * @param key\n+     *            identify the source\n+     * @param source\n+     *            it's English source which will be return if no translation\n+     *            available\n+     * @param comment\n+     *            used to describe the source to help understand the source for\n+     *            the translators.\n+     * @param args\n+     *            named arguments used to format the message with placeholder\n+     * @return string\n+     */\n+    public String getString(final Locale locale, final String component,\n+            final String key, final String source, final String comment,\n+            final Map<String, Object> args) {\n+        return getStringWithArgs(locale, component, key, source, comment, args);\n+    }\n+\n+    private String getStringWithArgs(final Locale locale,\n+            final String component, final String key, final String source,\n+            final String comment, final Object args) {\n+        logger.trace(\"Start to execute TranslationMessage.getStringWithArgs\");\n         if (key == null || key.equalsIgnoreCase(\"\"))\n-            return \"\"; \n-        String translation = \"\";\n+            return \"\";\n+\n+        MessagesDTO dto = new MessagesDTO();\n+        dto.setComponent(component);\n+        dto.setComment(comment);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+        if (cfg != null) {\n+            dto.setProductID(cfg.getProductName());\n+            dto.setVersion(cfg.getVersion());\n+        }\n+\n+        if (StringUtil.isEmpty(source)) {\n+            return getStringWithoutSource(dto, args);\n+        }\n+\n+        return getStringWithSource(dto, args);\n+    }\n+\n+    private String getStringWithSource(MessagesDTO dto, final Object args) {\n+        Locale locale = Locale.forLanguageTag(dto.getLocale());\n+        String source = dto.getSource();\n         StringService s = new StringService();\n-        \n-        if (!LocaleUtility.isDefaultLocale(locale)) {  \n-        \tMessagesDTO dto = new MessagesDTO(component, key, source, locale.toLanguageTag(), this.cfg);\n+\n+        String translation = \"\";\n+        if (!LocaleUtility.isDefaultLocale(locale)) {\n             translation = s.getString(dto);\n             // if the source is not equal to remote's source version, return the\n             // source as latest, not return the old translation\n             if (source != null && !\"\".equals(source) && !VIPCfg.getInstance().isPseudo()) {\n-                MessagesDTO remoteEnDTO = new MessagesDTO(component, key, source, \n-                \t\tLocaleUtility.getDefaultLocale().toLanguageTag(), this.cfg);\n-                String remoteEnMsg = s.getString(remoteEnDTO);\n+                dto.setLocale(LocaleUtility.getDefaultLocale().toLanguageTag());\n+                String remoteEnMsg = s.getString(dto);\n                 if (!source.equals(remoteEnMsg)) {\n                     translation = source;\n                 }\n             }\n \n-            if (translation == null || translation.isEmpty()) {\n+            if (StringUtil.isEmpty(translation)) {\n                 translation = source;\n             }\n         } else {\n             translation = source;\n         }\n \n         if (VIPCfg.getInstance().isCollectSource() || VIPCfg.getInstance().isMachineTranslation()) {\n-        \tMessagesDTO latestSourceDTO = new MessagesDTO(component, key, source, \n-        \t\t\tConstantsKeys.LATEST, this.cfg);\n-            String latestStr = s.getString(latestSourceDTO);\n+            dto.setLocale(ConstantsKeys.LATEST);\n+            String latestStr = s.getString(dto);\n             if (source != null && !source.equals(latestStr)) {\n-            \tMessagesDTO dto2 = new MessagesDTO(component, key, source, \n-            \t\t\tlocale.toLanguageTag(), this.cfg);\n-                String mt = s.postString(dto2);\n+                dto.setLocale(locale.toLanguageTag());\n+                String mt = s.postString(dto);\n                 if (VIPCfg.getInstance().isMachineTranslation() && !\"\".equalsIgnoreCase(mt)) {\n                     translation = mt;\n                 }\n             }\n         }\n \n-        if (!VIPCfg.getInstance().isMachineTranslation() && VIPCfg.getInstance().isPseudo() &&\n-                null != translation && translation.equals(source)) {\n+        if (!VIPCfg.getInstance().isMachineTranslation() && VIPCfg.getInstance().isPseudo()\n+                && null != translation && translation.equals(source)) {\n             // if source isn't collected by server, add PSEUDOCHAR2\n             translation = ConstantsKeys.PSEUDOCHAR2 + translation + ConstantsKeys.PSEUDOCHAR2;\n         }\n \n-        if (args != null && args.length > 0) {\n-            if ((null != translation && translation.equals(source)) || VIPCfg.getInstance().isPseudo()) {\n-                translation = FormatUtils.formatMsg(translation,\n-                        LocaleUtility.getDefaultLocale(), args);\n-            } else {\n-                translation = FormatUtils.formatMsg(translation, locale, args);\n+        if (args != null) {\n+            if (args instanceof Object[] && ((Object[]) args).length > 0) {\n+                if ((null != translation && translation.equals(source)) || VIPCfg.getInstance().isPseudo()) {\n+                    translation = FormatUtils.formatWithArrayArgs(translation, LocaleUtility.getDefaultLocale(), (Object[]) args);\n+                } else {\n+                    translation = FormatUtils.formatWithArrayArgs(translation, locale, (Object[]) args);\n+                }\n+            } else if (args instanceof Map<?, ?> && ((Map<?, ?>) args).size() > 0) {\n+                if ((null != translation && translation.equals(source)) || VIPCfg.getInstance().isPseudo()) {\n+                    translation = FormatUtils.formatWithNamedArgs(translation,\n+                            LocaleUtility.getDefaultLocale(), (Map<String, Object>) args);\n+                } else {\n+                    translation = FormatUtils.formatWithNamedArgs(translation, locale, (Map) args);\n+                }\n             }\n         }\n+\n+        return translation;\n+    }\n+\n+    private String getStringWithoutSource(MessagesDTO dto, final Object args) {\n+        Locale locale = Locale.forLanguageTag(dto.getLocale());\n+        String translation = new StringService().getString(dto);\n+        if (StringUtil.isEmpty(translation)) {\n+            return \"\";\n+        }\n+\n+        if (args != null) {\n+            if (args instanceof Object[] && ((Object[]) args).length > 0) {\n+                translation = FormatUtils.format(translation, locale, (Object[]) args);\n+            } else if (args instanceof Map<?, ?> && ((Map) args).size() > 0) {\n+                translation = FormatUtils.formatMsg(translation, locale, (Map<String, Object>) args);\n+            }", "originalCommit": "a60d0aa1ec60565e0b3ed47fe0628501e14e8354", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e5aa0f7fde87fcd0f0c814f9f3853c14bd278d6", "url": "https://github.com/vmware/singleton/commit/7e5aa0f7fde87fcd0f0c814f9f3853c14bd278d6", "message": "Extract a new method in FormatUtils to accept array arguments and map arguments", "committedDate": "2020-10-22T07:24:01Z", "type": "commit"}, {"oid": "0f25d6b8f3fa77a14a3783bf3fe07c2613826201", "url": "https://github.com/vmware/singleton/commit/0f25d6b8f3fa77a14a3783bf3fe07c2613826201", "message": "Fix sonar scan errors", "committedDate": "2020-10-22T07:38:25Z", "type": "commit"}]}