{"pr_number": 859, "pr_title": "Code clean up: unifying cache expire logic in CacheItem; deprecating old expire methods", "pr_createdAt": "2020-11-03T17:01:21Z", "pr_url": "https://github.com/vmware/singleton/pull/859", "timeline": [{"oid": "9cb7e243d018d076fa7e9dc520b1056a91338f1b", "url": "https://github.com/vmware/singleton/commit/9cb7e243d018d076fa7e9dc520b1056a91338f1b", "message": "Code clean up: unifying new expire logic, deprecating old expire methods", "committedDate": "2020-11-03T16:58:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTc4NA==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r517811784", "bodyText": "make this synchronized ?", "author": "Xiaochao8", "createdAt": "2020-11-05T06:08:54Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -4,6 +4,51 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n-public interface CacheItem {\n-    public boolean isExpired();\n+import com.vmware.vipclient.i18n.VIPCfg;\n+\n+public abstract class CacheItem {\n+    private String etag;\n+    private long timestamp;\n+    private Long maxAgeMillis = 86400000l;\n+\n+    public String getEtag() {\n+        return etag;\n+    }\n+\n+    protected void setEtag(String etag) {\n+        this.etag = etag;\n+    }\n+\n+    public long getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    protected void setTimestamp(long timestamp) {\n+        this.timestamp = timestamp;\n+    }\n+\n+    public Long getMaxAgeMillis() {", "originalCommit": "9cb7e243d018d076fa7e9dc520b1056a91338f1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1ODU2NA==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r518458564", "bodyText": "Same comment: It has been like this before, the only change in this PR is to put common code inside the common CacheItem instead of implementing twice in MessageCacheItem and FormatCacheItem. Let's make any code logic change separately.\nAlso, why does it have to be synchronized? The isExpired method already has a synchronized block. Other usage of geMaxAgeMillis aside from inside isExpired do not need to be synchronized.", "author": "jessiejuachon", "createdAt": "2020-11-06T00:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3NTAyOQ==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r518675029", "bodyText": "I think all the methods should be synchronized because of thread safety.", "author": "Xiaochao8", "createdAt": "2020-11-06T10:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMTgwMQ==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r520231801", "bodyText": "Hmm, let's discuss that separately. This PR is only to merge duplicate code into one.", "author": "jessiejuachon", "createdAt": "2020-11-10T01:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTkyNQ==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r517811925", "bodyText": "remove this or make this synchronized ?", "author": "Xiaochao8", "createdAt": "2020-11-05T06:09:22Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -4,6 +4,51 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n-public interface CacheItem {\n-    public boolean isExpired();\n+import com.vmware.vipclient.i18n.VIPCfg;\n+\n+public abstract class CacheItem {\n+    private String etag;\n+    private long timestamp;\n+    private Long maxAgeMillis = 86400000l;\n+\n+    public String getEtag() {\n+        return etag;\n+    }\n+\n+    protected void setEtag(String etag) {\n+        this.etag = etag;\n+    }\n+\n+    public long getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    protected void setTimestamp(long timestamp) {", "originalCommit": "9cb7e243d018d076fa7e9dc520b1056a91338f1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NzQ5Mg==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r518457492", "bodyText": "Same comment: it has been like this before, the only change in this PR is to put common code inside the common CacheItem instead of implementing twice in MessageCacheItem and FormatCacheItem. Let's make any code logic change separately.\nAlso, only the setters inside child classes (MessageCacheItem, PatternCacheItem, LocaleCAcheItem) use this protected setTimestamp.The setters are synchronized and have the following signature:\npublic synchronized void setCacheItem(String etag, long timestamp, Long maxAgeMillis)", "author": "jessiejuachon", "createdAt": "2020-11-06T00:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3Mzk3Ng==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r518673976", "bodyText": "If this case, this method is unnecessary.", "author": "Xiaochao8", "createdAt": "2020-11-06T10:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMzA0Mw==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r520233043", "bodyText": "Why unnecessary? The 3 properties: etag, timestamp and maxAgeMillis have to be set in a single thread at once to avoid any thread collision issue. Even if you synchronize individual property setters (setTimestampo, setEtag, setMaxAgeMillis), you can still have thread collision problems because the lock is released after setting each property. A single thread should acquire the lock first, set all 3 properties then release the lock.\nAs I said, there isn't any code logic change here in this PR. Thread-safety implementation has has been like this before this PR, so could you log a separate issue regarding any thread-safety problems you are seeing?", "author": "jessiejuachon", "createdAt": "2020-11-10T01:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMjY2NA==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r517812664", "bodyText": "make this synchronized ?", "author": "Xiaochao8", "createdAt": "2020-11-05T06:11:41Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -4,6 +4,51 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n-public interface CacheItem {\n-    public boolean isExpired();\n+import com.vmware.vipclient.i18n.VIPCfg;\n+\n+public abstract class CacheItem {\n+    private String etag;\n+    private long timestamp;\n+    private Long maxAgeMillis = 86400000l;\n+\n+    public String getEtag() {\n+        return etag;\n+    }\n+\n+    protected void setEtag(String etag) {\n+        this.etag = etag;\n+    }\n+\n+    public long getTimestamp() {\n+        return timestamp;\n+    }", "originalCommit": "9cb7e243d018d076fa7e9dc520b1056a91338f1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NjUxMQ==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r518456511", "bodyText": "It has been like this before, the only change in this PR is to put common code inside the common CacheItem instead of implementing twice in MessageCacheItem and FormatCacheItem. Let's make any code logic change separately.\nAlso, why does it have to be synchronized? The isExpired method already has a synchronized block. Other usage of getTimestamp aside from inside isExpired do not need to be synchronized.", "author": "jessiejuachon", "createdAt": "2020-11-06T00:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MjM5MA==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r518672390", "bodyText": "I think all the methods should be synchronized because of thread safety.", "author": "Xiaochao8", "createdAt": "2020-11-06T10:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMTg5NA==", "url": "https://github.com/vmware/singleton/pull/859#discussion_r520231894", "bodyText": "Let's discuss that separately. This PR is only to merge duplicate code into one.", "author": "jessiejuachon", "createdAt": "2020-11-10T01:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgxMjY2NA=="}], "type": "inlineReview"}]}