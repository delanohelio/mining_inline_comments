{"pr_number": 861, "pr_title": "Resolves #860: Try planning an IN predicate as an OR of equalities.", "pr_createdAt": "2020-03-18T21:32:16Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/861", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE5NzM2Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r395197363", "bodyText": "Do we want to have some switch / threshold in the planner config to allow this to be introduced gracefully?", "author": "MMcM", "createdAt": "2020-03-19T17:26:53Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -340,12 +341,27 @@ private ScoredPlan planFilter(@Nonnull PlanContext planContext, @Nonnull QueryCo\n     @Nullable\n     private ScoredPlan planFilter(@Nonnull PlanContext planContext, @Nonnull QueryComponent filter, boolean needOrdering) {\n         final InExtractor inExtractor = new InExtractor(filter);\n+        ScoredPlan withInAsOr = null;\n         if (planContext.query.getSort() != null) {\n-            inExtractor.setSort(planContext.query.getSort(), planContext.query.isSortReverse());\n+            if (!inExtractor.setSort(planContext.query.getSort(), planContext.query.isSortReverse())) {\n+                // Can't implement as an in join because of the sort order. Try as an OR instead.", "originalCommit": "916964d87e7551126e234b29d292eb77604d0962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwODgxOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r395208818", "bodyText": "That seems like a reasonable thing to do. I'll add a configuration option to RecordQueryPlanner.", "author": "nschiefer", "createdAt": "2020-03-19T17:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE5NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTIzOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r397939238", "bodyText": "Done, with some slight gymnastics to keep a backwards-compatible API. I don't know if I got the right balance but I tried. \u00af_(\u30c4)_/\u00af", "author": "nschiefer", "createdAt": "2020-03-25T15:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE5NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0MTEwNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398041105", "bodyText": "Looks like you dropped this: \\", "author": "alecgrieser", "createdAt": "2020-03-25T17:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE5NzM2Mw=="}], "type": "inlineReview"}, {"oid": "f1c7399ad0eed082a028139c477257144230db5b", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f1c7399ad0eed082a028139c477257144230db5b", "message": "Resolves #860: Try planning an IN predicate as an OR of equalities.\n\nIf the planner detects that it can't implement an IN predicate using an\nin-join (for example, because of an incompatible sort order), it tries\nto rewrite it as an OR predicate instead.", "committedDate": "2020-03-19T17:49:54Z", "type": "forcePushed"}, {"oid": "4ce8f795862004af1d7312b958b0b342d347ea15", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/4ce8f795862004af1d7312b958b0b342d347ea15", "message": "Resolves #860: Try planning an IN predicate as an OR of equalities.\n\nIf the planner detects that it can't implement an IN predicate using an\nin-join (for example, because of an incompatible sort order), it tries\nto rewrite it as an OR predicate instead.\n\nThis attempt is controlled by a configuration object, which also\nincludes the IndexScanPreference.", "committedDate": "2020-03-25T15:10:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MTI5MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r397941290", "bodyText": "I'm not sure whether to gate this behind the config parameter, too. That feels hacky, but is probably safer.", "author": "nschiefer", "createdAt": "2020-03-25T15:22:40Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -1195,7 +1236,7 @@ private ScoredPlan planOrderedUnion(@Nonnull PlanContext planContext, @Nonnull L\n         if (unionPlan.getComplexity() > complexityThreshold) {\n             throw new RecordQueryPlanComplexityException(unionPlan);\n         }\n-        return new ScoredPlan(1, unionPlan, Collections.emptyList(), anyDuplicates, includedRankComparisons);\n+        return new ScoredPlan(0, unionPlan, Collections.emptyList(), anyDuplicates, includedRankComparisons);", "originalCommit": "4ce8f795862004af1d7312b958b0b342d347ea15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MzM5Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r397943396", "bodyText": "Yeah, that is probably safer, since reasoning about these constant scores is sometimes tricky.", "author": "MMcM", "createdAt": "2020-03-25T15:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MTI5MA=="}], "type": "inlineReview"}, {"oid": "4791a9d843b3bd3059cbf8babd1a59a6b20b9f31", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/4791a9d843b3bd3059cbf8babd1a59a6b20b9f31", "message": "Resolves #860: Try planning an IN predicate as an OR of equalities.\n\nIf the planner detects that it can't implement an IN predicate using an\nin-join (for example, because of an incompatible sort order), it tries\nto rewrite it as an OR predicate instead.\n\nThis attempt is controlled by a configuration object, which also\nincludes the IndexScanPreference.", "committedDate": "2020-03-25T15:36:12Z", "type": "forcePushed"}, {"oid": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "message": "Resolves #860: Try planning an IN predicate as an OR of equalities.\n\nIf the planner detects that it can't implement an IN predicate using an\nin-join (for example, because of an incompatible sort order), it tries\nto rewrite it as an OR predicate instead.\n\nThis attempt is controlled by a configuration object, which also\nincludes the IndexScanPreference.", "committedDate": "2020-03-25T16:00:00Z", "type": "commit"}, {"oid": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "message": "Resolves #860: Try planning an IN predicate as an OR of equalities.\n\nIf the planner detects that it can't implement an IN predicate using an\nin-join (for example, because of an incompatible sort order), it tries\nto rewrite it as an OR predicate instead.\n\nThis attempt is controlled by a configuration object, which also\nincludes the IndexScanPreference.", "committedDate": "2020-03-25T16:00:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTE0MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398039140", "bodyText": "Oh, hm. So this essentially relies on the side effect from this operation? I don't love having this happen within the if-condition (rather than it happening on the previous line and capturing the success or failure as an explicit boolean) as I don't think people expect side effects there. But it's probably acceptable if we want to keep it like this and take the PR prior to changing it (and the comment helps).", "author": "alecgrieser", "createdAt": "2020-03-25T17:29:59Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -341,12 +366,28 @@ private ScoredPlan planFilter(@Nonnull PlanContext planContext, @Nonnull QueryCo\n     @Nullable\n     private ScoredPlan planFilter(@Nonnull PlanContext planContext, @Nonnull QueryComponent filter, boolean needOrdering) {\n         final InExtractor inExtractor = new InExtractor(filter);\n+        ScoredPlan withInAsOr = null;\n         if (planContext.query.getSort() != null) {\n-            inExtractor.setSort(planContext.query.getSort(), planContext.query.isSortReverse());\n+            if (!inExtractor.setSort(planContext.query.getSort(), planContext.query.isSortReverse()) && // needs to come first, to clear sort", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2MjYxMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398062612", "bodyText": "I'm happy to extract this as a boolean. I don't really want to do a larger refactor, since this was definitely meant to perturb things as little as possible.", "author": "nschiefer", "createdAt": "2020-03-25T18:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjQ4OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398066488", "bodyText": "Yeah, don't really need a larger refactor; was more just asking for it to be on its own line, though maybe that's not actually clearer.", "author": "alecgrieser", "createdAt": "2020-03-25T18:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MTExNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398071117", "bodyText": "I think it's a little clearer.", "author": "nschiefer", "createdAt": "2020-03-25T18:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0MDU4NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398040585", "bodyText": "At some point, we'll probably want to document what these configuration parameters actually do, but perhaps not today.", "author": "alecgrieser", "createdAt": "2020-03-25T17:32:07Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlannerConfiguration.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * RecordQueryPlannerConfiguration.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan;\n+\n+import com.apple.foundationdb.annotation.API;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * A set of configuration options for the {@link RecordQueryPlanner}.", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MDM4Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398070386", "bodyText": "Documented.", "author": "nschiefer", "createdAt": "2020-03-25T18:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0MDU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1Mzc0Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398053742", "bodyText": "It feels a little weird that this still calls cancel, with the new stuff. Like, in theory, it should be able to use the extracted sort components from the IN and then use a UnionPlan for the rest. Though I think it's still safe to do it as it is here, so perhaps an optimization for another time.", "author": "alecgrieser", "createdAt": "2020-03-25T17:51:22Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/planning/InExtractor.java", "diffHunk": "@@ -157,10 +193,11 @@ public void setSort(@Nonnull KeyExpression key, boolean reverse) {\n             if (!found) {\n                 // There is a requested sort ahead of the ones from the IN's, so we can't do it.\n                 cancel();", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2MzczNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398063737", "bodyText": "Agreed, but I'd rather not mess with this code if we don't have to.", "author": "nschiefer", "createdAt": "2020-03-25T18:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1Mzc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NDM0MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398054341", "bodyText": "Hmm, interesting. Should the logic in the join filter that chooses between the Union and the InJoin be changed then (maybe ignoring the score if we can't trust it?).", "author": "alecgrieser", "createdAt": "2020-03-25T17:52:15Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/RecordQueryPlanner.java", "diffHunk": "@@ -1196,7 +1237,12 @@ private ScoredPlan planOrderedUnion(@Nonnull PlanContext planContext, @Nonnull L\n         if (unionPlan.getComplexity() > complexityThreshold) {\n             throw new RecordQueryPlanComplexityException(unionPlan);\n         }\n-        return new ScoredPlan(1, unionPlan, Collections.emptyList(), anyDuplicates, includedRankComparisons);\n+\n+        // If we don't change this when shouldAttemptFailedInJoinAsOr() is true, then we _always_ pick the union plan,\n+        // rather than the in join plan.\n+        int score = getConfiguration().shouldAttemptFailedInJoinAsOr() ? 0 : 1;", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NDE2NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398064165", "bodyText": "Possibly. I'm a bit worried about doing so because I don't really know what the score is trying to capture. If we think that's lower risk, I'm for it.", "author": "nschiefer", "createdAt": "2020-03-25T18:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NDM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NTQwNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398055405", "bodyText": "I suppose technically, this could be a @DualPlannerTest, then (though not saying it should).\nOr this could assert the planner type so that if someone were to make it a DualPlannerTest at some point, they get an error rather than it succeeding for the wrong reasons.", "author": "alecgrieser", "createdAt": "2020-03-25T17:53:46Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBInQueryTest.java", "diffHunk": "@@ -261,6 +267,77 @@ public void testInQueryIndexSortedDifferently() throws Exception {\n                 context -> TestHelpers.assertDiscardedAtMost(40, context)));\n     }\n \n+    /**\n+     * Verify that an IN query with a sort can be implemented as an ordered union of compound indexes that can satisfy\n+     * the sort once the equality predicates from the IN have been pushed onto the indexes.\n+     * @see com.apple.foundationdb.record.query.plan.planning.InExtractor#asOr()\n+     */\n+    @ParameterizedTest\n+    @BooleanSource\n+    public void inQueryWithSortBySecondFieldOfCompoundIndex(boolean shouldAttemptInAsOr) throws Exception {\n+        RecordMetaDataHook hook = metaData ->\n+                metaData.addIndex(\"MySimpleRecord\", \"compoundIndex\",\n+                        concat(field(\"num_value_3_indexed\"), field(\"str_value_indexed\")));\n+        complexQuerySetup(hook);\n+        final List<Integer> inList = asList(1, 4, 2);\n+        RecordQuery query = RecordQuery.newBuilder()\n+                .setRecordType(\"MySimpleRecord\")\n+                .setFilter(Query.field(\"num_value_3_indexed\").in(inList))\n+                .setSort(field(\"str_value_indexed\"))\n+                .build();\n+\n+        if (planner instanceof RecordQueryPlanner) { // will always be true, but it's good to check before casting", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NTUxOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398065518", "bodyText": "I suppose it could. \ud83d\ude43\nI switched this to an assertion instead.", "author": "nschiefer", "createdAt": "2020-03-25T18:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NTQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NzI3NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398057274", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // A CNF who's DNF size doesn't fit in an int, expressed with IN predicates.\n          \n          \n            \n                    // A CNF whose DNF size doesn't fit in an int, expressed with IN predicates.\n          \n      \n    \n    \n  \n\nI'm sorry", "author": "alecgrieser", "createdAt": "2020-03-25T17:56:20Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBInQueryTest.java", "diffHunk": "@@ -261,6 +267,77 @@ public void testInQueryIndexSortedDifferently() throws Exception {\n                 context -> TestHelpers.assertDiscardedAtMost(40, context)));\n     }\n \n+    /**\n+     * Verify that an IN query with a sort can be implemented as an ordered union of compound indexes that can satisfy\n+     * the sort once the equality predicates from the IN have been pushed onto the indexes.\n+     * @see com.apple.foundationdb.record.query.plan.planning.InExtractor#asOr()\n+     */\n+    @ParameterizedTest\n+    @BooleanSource\n+    public void inQueryWithSortBySecondFieldOfCompoundIndex(boolean shouldAttemptInAsOr) throws Exception {\n+        RecordMetaDataHook hook = metaData ->\n+                metaData.addIndex(\"MySimpleRecord\", \"compoundIndex\",\n+                        concat(field(\"num_value_3_indexed\"), field(\"str_value_indexed\")));\n+        complexQuerySetup(hook);\n+        final List<Integer> inList = asList(1, 4, 2);\n+        RecordQuery query = RecordQuery.newBuilder()\n+                .setRecordType(\"MySimpleRecord\")\n+                .setFilter(Query.field(\"num_value_3_indexed\").in(inList))\n+                .setSort(field(\"str_value_indexed\"))\n+                .build();\n+\n+        if (planner instanceof RecordQueryPlanner) { // will always be true, but it's good to check before casting\n+            RecordQueryPlanner recordQueryPlanner = (RecordQueryPlanner)planner;\n+            RecordQueryPlannerConfiguration configuration = recordQueryPlanner.getConfiguration();\n+            recordQueryPlanner.setConfiguration(recordQueryPlanner.getConfiguration().asBuilder()\n+                    .setAttemptFailedInJoinAsOr(shouldAttemptInAsOr)\n+                    .build());\n+\n+            RecordQueryPlan plan = planner.plan(query);\n+            if (shouldAttemptInAsOr) {\n+                // IN join is impossible because of incompatible sorting, but we can still plan as an OR on the compound index.\n+                assertThat(plan, union(inList.stream().map(number -> indexScan(allOf(indexName(\"compoundIndex\"),\n+                        bounds(hasTupleString(String.format(\"[[%d],[%d]]\", number, number)))))).collect(Collectors.toList()),\n+                        equalTo(concat(field(\"str_value_indexed\"), primaryKey(\"MySimpleRecord\")))));\n+                assertEquals(-1813975352, plan.planHash());\n+            } else {\n+                assertThat(plan, filter(equalTo(query.getFilter()), indexScan(allOf(indexName(\"MySimpleRecord$str_value_indexed\"), unbounded()))));\n+                assertEquals(1775865786, plan.planHash());\n+            }\n+\n+            assertEquals(60, querySimpleRecordStore(hook, plan, EvaluationContext::empty,\n+                    record -> assertThat(record.getNumValue3Indexed(), anyOf(is(1), is(2), is(4))),\n+                    context -> TestHelpers.assertDiscardedAtMost(40, context)));\n+        }\n+    }\n+\n+    /**\n+     * Verify that an IN predicate that, when converted to an OR of equality predicates, would lead to a very large DNF\n+     * gets planned as a normal IN query rather than throwing an exception.\n+     */\n+    @Test\n+    public void cnfAsInQuery() throws Exception {\n+        RecordMetaDataHook hook = metaData ->\n+                metaData.addIndex(\"MySimpleRecord\", \"compoundIndex\",\n+                        concat(field(\"num_value_3_indexed\"), field(\"str_value_indexed\")));\n+        complexQuerySetup(hook);\n+\n+        // A CNF who's DNF size doesn't fit in an int, expressed with IN predicates.", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NTc1NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398065755", "bodyText": "Whoops, fixed.", "author": "nschiefer", "createdAt": "2020-03-25T18:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NzI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1ODExNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398058115", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            RecordMetaData.newBuilder().setRecords(TestRecordsEnumProto.getDescriptor()).build(),\n          \n          \n            \n                            RecordMetaData.build(TestRecordsEnumProto.getDescriptor()),\n          \n      \n    \n    \n  \n\nEquivalent, but perhaps more idiomatic", "author": "alecgrieser", "createdAt": "2020-03-25T17:57:34Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/query/plan/RecordQueryPlannerConfigurationTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * RecordQueryPlannerConfigurationTest.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record.query.plan;\n+\n+import com.apple.foundationdb.record.RecordMetaData;\n+import com.apple.foundationdb.record.RecordStoreState;\n+import com.apple.foundationdb.record.TestRecordsEnumProto;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test of the semantics of setting configuration options on {@link RecordQueryPlanner}.\n+ * This is mostly \"executable documentation\" that makes sure that we never change the contract without meaning to.\n+ */\n+public class RecordQueryPlannerConfigurationTest {\n+    private static RecordQueryPlanner blankPlanner() {\n+        return new RecordQueryPlanner(\n+                RecordMetaData.newBuilder().setRecords(TestRecordsEnumProto.getDescriptor()).build(),", "originalCommit": "0546106d225ce2c1e9e61012ad27bb0f6298d4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjQwMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/861#discussion_r398066402", "bodyText": "Fixed.", "author": "nschiefer", "createdAt": "2020-03-25T18:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1ODExNQ=="}], "type": "inlineReview"}, {"oid": "797dec751b53066061becd3fe238b94c282aacfb", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/797dec751b53066061becd3fe238b94c282aacfb", "message": "Respond to review comments.", "committedDate": "2020-03-25T18:43:29Z", "type": "commit"}]}