{"pr_number": 1071, "pr_title": "Resolve #1072: New plan hash kind", "pr_createdAt": "2020-11-15T17:52:48Z", "pr_url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2OTM1NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525269354", "bodyText": "let's rename this to FOR_CONTINUATION just to be clear that this is not the continuation itself.", "author": "normen662", "createdAt": "2020-11-17T15:49:21Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/PlanHashable.java", "diffHunk": "@@ -34,28 +34,43 @@\n  */\n @API(API.Status.UNSTABLE)\n public interface PlanHashable {\n+    /**\n+     * The \"kinds\" of planHash calculations.\n+     * Continuation: The \"default\" calculation. Used to decide whether a continuation can be used with the given plan.\n+     * Structural-without-literals: Plan hash that ignores literals and variable markers. Used to distinguish plans that have the same structure.\n+     */\n+    enum PlanHashKind {\n+        CONTINUATION,                 // The original plan hash kind: include children, literals and markers. Used for continuation validation", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzc5NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525427794", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-11-17T19:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2OTM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MDY0Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525270646", "bodyText": "By convention (but not consistently) we annotate every parameter with final if possible and also with @Nullable respect @Nonnull. Only commenting on this here once. Please make the appropriate changes throughout.", "author": "normen662", "createdAt": "2020-11-17T15:50:55Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/IndexScanType.java", "diffHunk": "@@ -75,7 +75,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(PlanHashKind hashKind) {", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ4MTM4MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525481381", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-11-17T20:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MDY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjM0NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525272345", "bodyText": "Yeah -- that's ok I think.", "author": "normen662", "createdAt": "2020-11-17T15:53:04Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/IndexAggregateFunction.java", "diffHunk": "@@ -122,7 +122,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return name.hashCode() + operand.planHash() + Objects.hashCode(index);\n+    public int planHash(PlanHashKind hashKind) {\n+        // TODO: Is this right?", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ4NDcyOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525484729", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-11-17T20:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NDYxNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525274615", "bodyText": "I don't like these 0s. These are probably copy/pasta. Maybe we can do better by using the class object to extract some meaningful hash out of that, e.g. what would be the implications if you do getClass().hashCode()?", "author": "normen662", "createdAt": "2020-11-17T15:55:52Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/ElementKeyExpression.java", "diffHunk": "@@ -112,7 +112,7 @@ public Message toProto() throws SerializationException {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(PlanHashKind hashKind) {\n         return 0;", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ4ODMwMA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525488300", "bodyText": "Should we consider that a part of adding class / className hashes to all hashes? Whould we bring this up with the team?", "author": "ohadzeliger", "createdAt": "2020-11-17T20:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NDYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NjUyNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534386525", "bodyText": "I think this is now resolved as discussed before. We keep it for this PR but then allow a subsequent PR to change the computation of a plan hash while accepting the old plan hash for existing continuations.", "author": "normen662", "createdAt": "2020-12-02T18:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NDYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NDcyMQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525274721", "bodyText": "Same here.", "author": "normen662", "createdAt": "2020-11-17T15:56:00Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/EmptyKeyExpression.java", "diffHunk": "@@ -114,7 +114,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(PlanHashKind hashKind) {", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3NjQ1NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525276455", "bodyText": "This is correct!", "author": "normen662", "createdAt": "2020-11-17T15:58:13Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/Comparisons.java", "diffHunk": "@@ -808,8 +808,15 @@ public int hashCode() {\n         }\n \n         @Override\n-        public int planHash() {\n-            return type.name().hashCode() + PlanHashable.objectPlanHash(comparand);\n+        public int planHash(PlanHashKind hashKind) {\n+            switch (hashKind) {\n+                case CONTINUATION:\n+                    return type.name().hashCode() + PlanHashable.objectPlanHash(hashKind, comparand);\n+                case STRUCTURAL_WITHOUT_LITERALS:\n+                    return type.name().hashCode();", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3ODMxMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525278313", "bodyText": "These combinations are not good. This should be x * 31 + y or something like that. I wonder if we can do something about this as changing this would definitely break a lot of plan hashes.", "author": "normen662", "createdAt": "2020-11-17T16:00:20Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/NestedField.java", "diffHunk": "@@ -116,8 +116,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return super.planHash() + getChild().planHash();\n+    public int planHash(PlanHashKind hashKind) {", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3ODU1OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525278559", "bodyText": "Same here.", "author": "normen662", "createdAt": "2020-11-17T16:00:39Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/NotComponent.java", "diffHunk": "@@ -123,8 +123,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getChild().planHash() + 1;\n+    public int planHash(PlanHashKind hashKind) {\n+        return getChild().planHash(hashKind) + 1;", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDEwNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525280105", "bodyText": "This has a problem. I don't understand why fieldName is not part of equals or the regular hash code. If it should be then, planHash(...) should incorporate that as well.", "author": "normen662", "createdAt": "2020-11-17T16:02:41Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/OneOfThemWithComparison.java", "diffHunk": "@@ -128,7 +128,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getComparison().planHash();\n+    public int planHash(PlanHashKind hashKind) {", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDI5Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525280296", "bodyText": "Combination problem again.", "author": "normen662", "createdAt": "2020-11-17T16:02:55Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/OneOfThemWithComponent.java", "diffHunk": "@@ -138,7 +138,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return super.planHash() + getChild().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return super.planHash(hashKind) + getChild().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDUzMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525280532", "bodyText": "Yes. It should have that in it.", "author": "normen662", "createdAt": "2020-11-17T16:03:16Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/OrComponent.java", "diffHunk": "@@ -89,7 +89,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(getChildren());\n+    public int planHash(PlanHashKind hashKind) {\n+        // Todo: Type of op?", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDc1Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525280757", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:03:34Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/QueryKeyExpression.java", "diffHunk": "@@ -211,8 +211,8 @@ public int hashCode() {\n         }\n \n         @Override\n-        public int planHash() {\n-            return super.planHash() + getKeyExpression().planHash();\n+        public int planHash(PlanHashKind hashKind) {\n+            return super.planHash(hashKind) + getKeyExpression().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDgzNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525280836", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:03:41Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/QueryKeyExpression.java", "diffHunk": "@@ -274,8 +274,8 @@ public int hashCode() {\n         }\n \n         @Override\n-        public int planHash() {\n-            return super.planHash() + getKeyExpression().planHash();\n+        public int planHash(PlanHashKind hashKind) {\n+            return super.planHash(hashKind) + getKeyExpression().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDkxNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525280917", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:03:46Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/QueryKeyExpressionWithComparison.java", "diffHunk": "@@ -103,8 +103,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return keyExpression.planHash() + getComparison().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return keyExpression.planHash(hashKind) + getComparison().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MTI0MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525281240", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:04:11Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/QueryRecordFunctionWithComparison.java", "diffHunk": "@@ -130,7 +130,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return function.planHash() + getComparison().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return function.planHash(hashKind) + getComparison().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MjAzOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525282038", "bodyText": "Hmmm, I am not sure why this should be unordered. Maybe we can discuss.", "author": "normen662", "createdAt": "2020-11-17T16:05:09Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/ScanComparisons.java", "diffHunk": "@@ -313,8 +313,8 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(equalityComparisons) + PlanHashable.planHashUnordered(inequalityComparisons);\n+    public int planHash(PlanHashKind hashKind) {\n+        return PlanHashable.planHash(hashKind, equalityComparisons) + PlanHashable.planHashUnordered(hashKind, inequalityComparisons);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MzQzOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525283438", "bodyText": "I am not sure if this descends down into the comparisons, i.e. can you make sure that all comparisons used here actually get called with the correct hashKind. It probably is but text indexes are weird.", "author": "normen662", "createdAt": "2020-11-17T16:06:55Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/TextScan.java", "diffHunk": "@@ -542,7 +542,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(textComparison, groupingComparisons, suffixComparisons) + index.getName().hashCode();\n+    public int planHash(PlanHashKind hashKind) {\n+        return PlanHashable.planHash(hashKind, textComparison, groupingComparisons, suffixComparisons) + index.getName().hashCode();", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2NTI1Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r528065253", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-11-21T03:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MzQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MzU0OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525283548", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:07:02Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/bitmap/ComposedBitmapIndexQueryPlan.java", "diffHunk": "@@ -151,8 +151,8 @@ public int getComplexity() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(indexPlans) + composer.planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return PlanHashable.planHash(hashKind, indexPlans) + composer.planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDI1NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525284254", "bodyText": "this is not correct. we should modify the planHash (for both) to incorporate something indicating that this is covering. this is a bug.", "author": "normen662", "createdAt": "2020-11-17T16:07:59Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryCoveringIndexPlan.java", "diffHunk": "@@ -215,8 +215,9 @@ public int getComplexity() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return indexPlan.planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        // TODO: Is this right?", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDY5Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525284692", "bodyText": "AWESOME!", "author": "normen662", "createdAt": "2020-11-17T16:08:35Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryFetchFromPartialRecordPlan.java", "diffHunk": "@@ -151,8 +151,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return 13 + 7 * getChild().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return 13 + 7 * getChild().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDg0Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525284847", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:08:46Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryFilterPlan.java", "diffHunk": "@@ -153,8 +153,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getInnerPlan().planHash() + getFilter().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return getInnerPlan().planHash(hashKind) + getFilter().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDkzOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525284939", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:08:53Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryInJoinPlan.java", "diffHunk": "@@ -153,8 +153,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getInnerPlan().planHash() + bindingName.hashCode() + (sortValuesNeeded ? 1 : 0) + (sortReverse ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        return getInnerPlan().planHash(hashKind) + bindingName.hashCode() + (sortValuesNeeded ? 1 : 0) + (sortReverse ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NTExOA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525285118", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:09:06Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryInParameterJoinPlan.java", "diffHunk": "@@ -131,8 +131,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return super.planHash() + externalBinding.hashCode();\n+    public int planHash(PlanHashKind hashKind) {\n+        return super.planHash(hashKind) + externalBinding.hashCode();", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NTU0Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525285542", "bodyText": "Correct!", "author": "normen662", "createdAt": "2020-11-17T16:09:36Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryInValuesJoinPlan.java", "diffHunk": "@@ -127,8 +127,15 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return super.planHash() + PlanHashable.iterablePlanHash(values);\n+    public int planHash(PlanHashKind hashKind) {\n+        switch (hashKind) {\n+            case CONTINUATION:\n+                return super.planHash(hashKind) + PlanHashable.iterablePlanHash(hashKind, values);\n+            case STRUCTURAL_WITHOUT_LITERALS:\n+                return super.planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NTY1Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525285653", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:09:45Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryIndexPlan.java", "diffHunk": "@@ -185,8 +185,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return indexName.hashCode() + scanType.planHash() + comparisons.planHash() + (reverse ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        return indexName.hashCode() + scanType.planHash(hashKind) + comparisons.planHash(hashKind) + (reverse ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NTc3Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525285773", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:09:52Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryIntersectionPlan.java", "diffHunk": "@@ -228,8 +228,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(getQueryPlanChildren()) + getComparisonKey().planHash() + (reverse ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        return PlanHashable.planHash(hashKind, getQueryPlanChildren()) + getComparisonKey().planHash(hashKind) + (reverse ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4Njg4MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525286881", "bodyText": "ok", "author": "normen662", "createdAt": "2020-11-17T16:11:12Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryLoadByKeysPlan.java", "diffHunk": "@@ -242,7 +242,8 @@ public int hashCode() {\n         }\n \n         @Override\n-        public int planHash() {\n+        public int planHash(PlanHashKind hashKind) {\n+            // TODO: Right?", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDAxMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525294012", "bodyText": "Hmm -- I think I am torn here. There is not an actual problem here, more just a convention that we should zone in on. If possible should we call hashCode() or should we separate this out and even go so far as to duplicate the code. This here only works because the plan operator by itself is a leaf in the graph. Otherwise", "author": "normen662", "createdAt": "2020-11-17T16:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4Njg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4Njk4Mg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525286982", "bodyText": "ok.", "author": "normen662", "createdAt": "2020-11-17T16:11:20Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryLoadByKeysPlan.java", "diffHunk": "@@ -290,7 +291,9 @@ public int hashCode() {\n         }\n \n         @Override\n-        public int planHash() {\n+        // Right?\n+        public int planHash(PlanHashKind hashKind) {\n+            // TODO: Right?", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwMDY3OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525500679", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-11-17T20:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4Njk4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDc4NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525294784", "bodyText": "This is not actually active code and will be changed soon anyways. But for now it would be just consistent to add the source.", "author": "normen662", "createdAt": "2020-11-17T16:21:30Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryPredicateFilterPlan.java", "diffHunk": "@@ -167,8 +167,9 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getInnerPlan().planHash() + getPredicate().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        // TODO: BaseSource?\n+        return getInnerPlan().planHash(hashKind) + getPredicate().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwNjQ1OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525506458", "bodyText": "Issue here is: Source/BlankSource/RecordTypeSource/RepeatedFieldSource do not have hashCode implemented - use Object.hashCode, which is not stable for our use...", "author": "ohadzeliger", "createdAt": "2020-11-17T20:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NTMwMA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525295300", "bodyText": "Record types are missing, aren't they? That looks like I am the culprit.", "author": "normen662", "createdAt": "2020-11-17T16:22:09Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryScanPlan.java", "diffHunk": "@@ -201,8 +201,9 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return comparisons.planHash() + (reverse ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        // TODO: Is this right?\n+        return comparisons.planHash(hashKind) + (reverse ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NjQwNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525296405", "bodyText": "It totally could call super me thinks! I you change it make sure you don't hash the children twice.", "author": "normen662", "createdAt": "2020-11-17T16:23:34Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryUnionPlan.java", "diffHunk": "@@ -176,8 +176,9 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(getQueryPlanChildren()) + getComparisonKey().planHash() + (isReverse() ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        // TODO: Super()?\n+        return PlanHashable.planHash(hashKind, getQueryPlanChildren()) + getComparisonKey().planHash(hashKind) + (isReverse() ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMTYwOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525511609", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-11-17T20:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NjQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NzQ2OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525297469", "bodyText": "I think this builds down the the general problem whether the kind of thing should be identifiable, i.e. should the class be incorporated here?", "author": "normen662", "createdAt": "2020-11-17T16:24:55Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryUnionPlanBase.java", "diffHunk": "@@ -159,8 +159,9 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(getQueryPlanChildren()) + (reverse ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        // TODO: Should we include the concrete subtype type?\n+        return PlanHashable.planHash(hashKind, getQueryPlanChildren()) + (reverse ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NzU5OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525297598", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:25:04Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryUnorderedDistinctPlan.java", "diffHunk": "@@ -172,8 +172,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getInner().planHash() + getComparisonKey().planHash();\n+    public int planHash(PlanHashKind hashKind) {\n+        return getInner().planHash(hashKind) + getComparisonKey().planHash(hashKind);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NzY4OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525297689", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:25:11Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/plans/RecordQueryUnorderedPrimaryKeyDistinctPlan.java", "diffHunk": "@@ -155,8 +155,8 @@ public int hashCodeWithoutChildren() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getInner().planHash() + 1;\n+    public int planHash(PlanHashKind hashKind) {\n+        return getInner().planHash(hashKind) + 1;", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NzgzMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525297832", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:25:19Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/synthetic/JoinedRecordPlan.java", "diffHunk": "@@ -103,9 +103,8 @@ public int hashCode() {\n         }\n \n         @Override\n-        public int planHash() {\n-            return constituent.getName().hashCode() +\n-                   PlanHashable.planHash(bindingPlans);\n+        public int planHash(@Nonnull PlanHashKind hashKind) {\n+            return constituent.getName().hashCode() + PlanHashable.planHash(hashKind, bindingPlans);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5ODExNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525298116", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:25:41Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/synthetic/SyntheticRecordConcatPlan.java", "diffHunk": "@@ -125,7 +125,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(subPlans) + (needDistinct ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        return PlanHashable.planHash(hashKind, subPlans) + (needDistinct ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5ODIyMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525298222", "bodyText": "Combination problem.", "author": "normen662", "createdAt": "2020-11-17T16:25:48Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/synthetic/SyntheticRecordScanPlan.java", "diffHunk": "@@ -91,7 +91,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return recordPlan.planHash() + syntheticRecordPlan.planHash() + (needDistinct ? 1 : 0);\n+    public int planHash(PlanHashKind hashKind) {\n+        return recordPlan.planHash(hashKind) + syntheticRecordPlan.planHash(hashKind) + (needDistinct ? 1 : 0);", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5OTA4Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525299087", "bodyText": "it's ok -- this class is being phased out.", "author": "normen662", "createdAt": "2020-11-17T16:26:50Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/view/SortComparison.java", "diffHunk": "@@ -74,7 +74,8 @@ public String typelessString() {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(PlanHashKind hashKind) {\n+        // Right?", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMTk5Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525511993", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-11-17T20:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5OTA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5OTY0NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525299644", "bodyText": "for me to make better, this is the new stuff. you can keep the Value... code like this for now.", "author": "normen662", "createdAt": "2020-11-17T16:27:29Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/plan/temp/view/ValueElement.java", "diffHunk": "@@ -105,7 +105,7 @@ public int semanticHashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(PlanHashKind hashKind) {\n         return 0;", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5OTk4Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525299987", "bodyText": "Yes and we can since this is not in actual production.", "author": "normen662", "createdAt": "2020-11-17T16:27:56Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/predicates/AndPredicate.java", "diffHunk": "@@ -68,8 +68,9 @@ public String toString() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return PlanHashable.planHash(getChildren());\n+    public int planHash(@Nonnull PlanHashKind hashKind) {\n+        // TODO: Shouldn't there be anything for the \"AND\" part too?\n+        return PlanHashable.planHash(hashKind, getChildren());", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwMDM0Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r525300347", "bodyText": "nice", "author": "normen662", "createdAt": "2020-11-17T16:28:26Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/metadata/UnknownKeyExpression.java", "diffHunk": "@@ -88,7 +88,7 @@ public Message toProto() throws SerializationException {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(PlanHashKind hashKind) {\n         return 1066;", "originalCommit": "3a7007ac4aff38a4ce6c6a4b1dfe87d00639b32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NzUwNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534387506", "bodyText": "Name in comment does not match class name.", "author": "normen662", "createdAt": "2020-12-02T18:25:55Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ObjectPlanHash.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * BasePlanHash.java", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2OTQ2NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535569465", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-03T20:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NzUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4Nzg5NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534387895", "bodyText": "could just be an Object", "author": "normen662", "createdAt": "2020-12-02T18:26:33Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/ObjectPlanHash.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * BasePlanHash.java\n+ *\n+ * This source file is part of the FoundationDB open source project\n+ *\n+ * Copyright 2015-2020 Apple Inc. and the FoundationDB project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.apple.foundationdb.record;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * This class implements a planHash for the member classes of the query plan.\n+ * As it is required to separate the plan hashes of various structures in the plan model, we need a way to tell each\n+ * member of the model apart. Using this class we can implement a stable (withstand JVM restart and class refactorings)\n+ * base hash for each object that can be added to the rest of the plan.\n+ */\n+public class ObjectPlanHash implements PlanHashable {\n+    private int hashCode;\n+\n+    public ObjectPlanHash(@Nonnull final String id) {", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3MDkxNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535570917", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-03T20:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4Nzg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MTg3Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534391876", "bodyText": "I think moving the planHash() (the one without parameters) to a default in the PlanHashable interface changes the code Java generates for callers if they use a specific reference to this class. This means that you probably create a binary incompatibility meaning that clients of the library (including CK) would have to be recompiled against the new RL library.", "author": "normen662", "createdAt": "2020-12-02T18:32:32Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/IndexAggregateFunction.java", "diffHunk": "@@ -122,7 +125,15 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return name.hashCode() + operand.planHash() + Objects.hashCode(index);\n+    public int planHash(@Nonnull final PlanHashKind hashKind) {", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MjA3Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534392077", "bodyText": "I think this should be notes in the release notes of this PR.", "author": "normen662", "createdAt": "2020-12-02T18:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NjQ4NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535596485", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-03T20:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5MTg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5NjEwMw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534396103", "bodyText": "This is more of a worry than an actual concern. I would love to make this method final but Java does not support that (yet). Can you hunt down all overrides (I think you have already done that) and make sure they actually get changed into the planHash(PlanHashKind). This method should not be overridden.", "author": "normen662", "createdAt": "2020-12-02T18:39:19Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/PlanHashable.java", "diffHunk": "@@ -31,31 +31,57 @@\n \n /**\n  * A more stable version of {@link Object#hashCode}.\n+ * The planHash semantics are different than {@link Object#hashCode} in a few ways:\n+ * <UL>\n+ *     <LI>{@link #planHash()} values should be stable across runtime instance changes. The reason is that these values can be used to validate\n+ *     outstanding continuations, and a change in hash value caused by an application restart or refactoring will invalidate all those\n+ *     outstanding continuations</LI>\n+ *     <LI>{@link #planHash()} supports multiple flavors of hash calculations (See {@link PlanHashKind}). The various kinds of plan hash algorithms\n+ *     are used for different purposes and include/exclude different parts of the target query plan</LI>\n+ *     <LI>{@link #planHash()} is meant to imply a certain identity of a plan, and reflects on the entire structure of the plan.\n+ *     The intent is to be able to correlate various plans for \"identity\" (using different definitions for this identity as\n+ *     specified by {@link PlanHashKind}). This requirement drives a desire to reduce collisions as much as possible since\n+ *     not in all cases can we actually use \"equals\" to verify identity (e.g. log messages)</LI>\n+ * </UL>\n  */\n @API(API.Status.UNSTABLE)\n public interface PlanHashable {\n+    /**\n+     * The \"kinds\" of planHash calculations.\n+     */\n+    enum PlanHashKind {\n+        LEGACY,                       // The original plan hash kind. Here for backwards compatibility, will be removed in the future\n+        FOR_CONTINUATION,             // Continuation validation plan hash kind: include children, literals and markers. Used for continuation validation\n+        STRUCTURAL_WITHOUT_LITERALS   // The hash used for query matching: skip all literals and markers\n+    }\n+\n     /**\n      * Return a hash similar to <code>hashCode</code>, but with the additional guarantee that is is stable across JVMs.\n+     * @param hashKind the \"kind\" of hash to calculate. Each kind of hash has a particular logic with regards to included and excluded items.\n      * @return a stable hash code\n      */\n-    int planHash();\n+    int planHash(@Nonnull final PlanHashKind hashKind);\n+\n+    default int planHash() {", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NzczNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535597737", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-03T20:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5NjEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5OTE5MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534399190", "bodyText": "Let's just leave these calls in test cases that don't directly have anything to do with the work done in this PR to call planHash()", "author": "normen662", "createdAt": "2020-12-02T18:44:24Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexTest.java", "diffHunk": "@@ -1329,14 +1330,14 @@ public void invalidScans() throws Exception {\n         LOGGER.info(KeyValueLogMessage.of(\"planned query\",\n                         TestLogMessageKeys.QUERY, query,\n                         LogMessageKeys.PLAN, plan,\n-                        TestLogMessageKeys.PLAN_HASH, plan.planHash()));\n+                        TestLogMessageKeys.PLAN_HASH, plan.planHash(PlanHashable.PlanHashKind.LEGACY)));", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYwMjMwNA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535602304", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-03T20:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5OTE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5OTQ1OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534399459", "bodyText": "Here it's fine to make the distinction.", "author": "normen662", "createdAt": "2020-12-02T18:44:46Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/indexes/TextIndexTest.java", "diffHunk": "@@ -1777,7 +1778,9 @@ public void querySimpleDocumentsMaybeCovering() throws Exception {\n                     .build();\n             RecordQueryPlan plan = planner.plan(query);\n             assertThat(plan, textIndexScan(allOf(indexName(TextIndexTestUtils.SIMPLE_DEFAULT_NAME), textComparison(equalTo(comparison1)))));\n-            assertEquals(814602491, plan.planHash());\n+            assertEquals(814602491, plan.planHash(PlanHashable.PlanHashKind.LEGACY));", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYwMzA1Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535603053", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-03T20:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5OTQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMDI4Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r534400287", "bodyText": "This is where my PR and your PR will clash like crazy as the new planner already creates different hashes.", "author": "normen662", "createdAt": "2020-12-02T18:46:02Z", "path": "fdb-record-layer-core/src/test/java/com/apple/foundationdb/record/provider/foundationdb/query/FDBAndQueryToIntersectionTest.java", "diffHunk": "@@ -105,13 +106,17 @@ public void testComplexQueryAndWithTwoChildren(boolean shouldDeferFetch) throws\n                     coveringIndexScan(indexScan(allOf(indexName(\"MySimpleRecord$str_value_indexed\"), bounds(hasTupleString(\"[[even],[even]]\"))))),\n                     coveringIndexScan(indexScan(allOf(indexName(\"MySimpleRecord$num_value_3_indexed\"), bounds(hasTupleString(\"[[3],[3]]\"))))),\n                     equalTo(field(\"rec_no\")))));\n-            assertEquals(-929788310, plan.planHash());\n+            assertEquals(-929788310, plan.planHash(PlanHashable.PlanHashKind.LEGACY));", "originalCommit": "b628e17d752962591d42108ec043b2d2c17878cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxMzQ2OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r535713469", "bodyText": "Based on offline discussion - here is what we're shooting for:\n\nAdd a method\nprotected void assertPlanHash(QueryPlanner planner, RecordQueryPlan plan, PlanHashable.PlanHashKind kind, int expectedOriginalHash, int expectedCascadesHash)  \nto the test base class\nConvert each @DualPlannerTest  assert block from\n\n        assertEquals(-447322749, plan2.planHash(PlanHashable.PlanHashKind.LEGACY));\n        assertEquals(-40431985, plan2.planHash(PlanHashable.PlanHashKind.FOR_CONTINUATION));\n        assertEquals(453584239, plan2.planHash(PlanHashable.PlanHashKind.STRUCTURAL_WITHOUT_LITERALS));\n\nto\n        assertPlanHash(planner, plan2, PlanHashable.PlanHashKind.LEGACY, -447322749, -447322749);\n        assertPlanHash(planner, plan2, PlanHashable.PlanHashKind.FOR_CONTINUATION, -40431985, -40431985);\n        assertPlanHash(planner, plan2, PlanHashable.PlanHashKind.STRUCTURAL_WITHOUT_LITERALS, 453584239, 453584239);\n\n@normen662 will implement as part of the other PR", "author": "ohadzeliger", "createdAt": "2020-12-03T23:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMDI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzM1MA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r539583350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return PlanHashable.objectsPlanHash(hashKind, type, getComparand(), tokenizerName, fallbackTokenizerName);\n          \n          \n            \n                                return PlanHashable.objectsPlanHash(hashKind, type.name(), getComparand(), tokenizerName, fallbackTokenizerName);", "author": "ohadzeliger", "createdAt": "2020-12-09T19:25:37Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/Comparisons.java", "diffHunk": "@@ -1298,8 +1343,17 @@ public boolean equals(Object o) {\n         }\n \n         @Override\n-        public int planHash() {\n-            return PlanHashable.objectsPlanHash(type, getComparand(), tokenizerName, fallbackTokenizerName);\n+        public int planHash(@Nonnull final PlanHashKind hashKind) {\n+            switch (hashKind) {\n+                case LEGACY:\n+                    return PlanHashable.objectsPlanHash(hashKind, type, getComparand(), tokenizerName, fallbackTokenizerName);", "originalCommit": "56931cf787783915e5dde52a42cfe9614eb2b158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjAyMQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r542916021", "bodyText": "Done", "author": "ohadzeliger", "createdAt": "2020-12-14T23:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAwOTAzNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r543009036", "bodyText": "This still doesn't seem to be done. It's strictly speaking an incompatible change, but there is a problem with the enum not having a stable hash across instances.", "author": "MMcM", "createdAt": "2020-12-15T03:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNTU3NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r543515575", "bodyText": "Actually, looking at it more carefully, objectsPlanHash handles Enum properly, so passing type and type.name() are equivalent, but functionally and in the returned value. We should aim for consistency, I suppose.", "author": "MMcM", "createdAt": "2020-12-15T16:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzI4Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r543647287", "bodyText": "Will change to use type directly in calls to objectsPlanHash(), across the board.", "author": "ohadzeliger", "createdAt": "2020-12-15T20:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzYyNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r539583626", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return PlanHashable.objectsPlanHash(hashKind, BASE_HASH, type, getComparand(), tokenizerName, fallbackTokenizerName);\n          \n          \n            \n                                return PlanHashable.objectsPlanHash(hashKind, BASE_HASH, type.name(), getComparand(), tokenizerName, fallbackTokenizerName);", "author": "ohadzeliger", "createdAt": "2020-12-09T19:26:02Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/Comparisons.java", "diffHunk": "@@ -1298,8 +1343,17 @@ public boolean equals(Object o) {\n         }\n \n         @Override\n-        public int planHash() {\n-            return PlanHashable.objectsPlanHash(type, getComparand(), tokenizerName, fallbackTokenizerName);\n+        public int planHash(@Nonnull final PlanHashKind hashKind) {\n+            switch (hashKind) {\n+                case LEGACY:\n+                    return PlanHashable.objectsPlanHash(hashKind, type, getComparand(), tokenizerName, fallbackTokenizerName);\n+                case FOR_CONTINUATION:\n+                    return PlanHashable.objectsPlanHash(hashKind, BASE_HASH, type, getComparand(), tokenizerName, fallbackTokenizerName);", "originalCommit": "56931cf787783915e5dde52a42cfe9614eb2b158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjA5MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r542916091", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-12-14T23:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MDUwNA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r541150504", "bodyText": "Use concrete class for the name of the base hash", "author": "ohadzeliger", "createdAt": "2020-12-11T18:40:02Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/FunctionKeyExpression.java", "diffHunk": "@@ -272,8 +276,16 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getName().hashCode() + getArguments().planHash();\n+    public int planHash(@Nonnull final PlanHashKind hashKind) {\n+        switch (hashKind) {\n+            case LEGACY:\n+                return getName().hashCode() + getArguments().planHash(hashKind);\n+            case FOR_CONTINUATION:\n+            case STRUCTURAL_WITHOUT_LITERALS:\n+                return PlanHashable.objectsPlanHash(hashKind, BASE_HASH, getName(), getArguments());", "originalCommit": "56931cf787783915e5dde52a42cfe9614eb2b158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMzU1MQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r542933551", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-12-14T23:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MDUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE3MTg4NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r541171885", "bodyText": "Remove BASE_HASH for abstract type", "author": "ohadzeliger", "createdAt": "2020-12-11T19:07:34Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/FunctionKeyExpression.java", "diffHunk": "@@ -272,8 +276,16 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n-        return getName().hashCode() + getArguments().planHash();\n+    public int planHash(@Nonnull final PlanHashKind hashKind) {\n+        switch (hashKind) {\n+            case LEGACY:\n+                return getName().hashCode() + getArguments().planHash(hashKind);\n+            case FOR_CONTINUATION:\n+            case STRUCTURAL_WITHOUT_LITERALS:\n+                return PlanHashable.objectsPlanHash(hashKind, BASE_HASH, getName(), getArguments());", "originalCommit": "56931cf787783915e5dde52a42cfe9614eb2b158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzMzc4Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r542933787", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-12-14T23:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE3MTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5Nzg4Mw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r541197883", "bodyText": "Remove BASE_HASH for abstract type, move to concrete subclasses", "author": "ohadzeliger", "createdAt": "2020-12-11T19:30:24Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/FunctionKeyExpression.java", "diffHunk": "@@ -88,6 +90,8 @@\n  */\n @API(API.Status.EXPERIMENTAL)\n public abstract class FunctionKeyExpression extends BaseKeyExpression implements AtomKeyExpression, KeyExpressionWithChild {\n+    private static final ObjectPlanHash BASE_HASH = new ObjectPlanHash(\"Function-Key-Expression\");", "originalCommit": "56931cf787783915e5dde52a42cfe9614eb2b158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzNTAzOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r542935039", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-12-15T00:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5Nzg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3Mzk0NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r541273945", "bodyText": "User BASE_HASH", "author": "ohadzeliger", "createdAt": "2020-12-11T20:49:07Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/VersionKeyExpression.java", "diffHunk": "@@ -122,7 +122,7 @@ public int hashCode() {\n     }\n \n     @Override\n-    public int planHash() {\n+    public int planHash(@Nonnull final PlanHashKind hashKind) {\n         return 1;", "originalCommit": "56931cf787783915e5dde52a42cfe9614eb2b158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkzODUwMQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r542938501", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-12-15T00:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3Mzk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAwODQ2OA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r543008468", "bodyText": "Would it be better to remove this case and therefore throw an error when not overridden?", "author": "MMcM", "createdAt": "2020-12-15T03:00:10Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/expressions/FunctionKeyExpression.java", "diffHunk": "@@ -282,7 +279,8 @@ public int planHash(@Nonnull final PlanHashKind hashKind) {\n                 return getName().hashCode() + getArguments().planHash(hashKind);\n             case FOR_CONTINUATION:\n             case STRUCTURAL_WITHOUT_LITERALS:\n-                return PlanHashable.objectsPlanHash(hashKind, BASE_HASH, getName(), getArguments());\n+                // No BASE_HASH for abstract classes", "originalCommit": "c8a50301d176d112cde71cac36cc3c7c17c59e32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMTk2NQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544501965", "bodyText": "isArray will also be true of primitive arrays; I believe the object hash is good enough for these, so instanceof Object[] may be a better check.\nIt may be worth optimizing objectsPlanHash to not create a new List and using it here, too, since I believe this will now be a common  case.", "author": "MMcM", "createdAt": "2020-12-16T17:51:38Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/PlanHashable.java", "diffHunk": "@@ -114,6 +114,9 @@ static int objectPlanHash(@Nonnull final PlanHashKind hashKind, @Nullable Object\n         if (obj instanceof Iterable<?>) {\n             return iterablePlanHash(hashKind, (Iterable<?>)obj);\n         }\n+        if (obj.getClass().isArray()) {\n+            return iterablePlanHash(hashKind, Arrays.asList((Object[])obj));\n+        }", "originalCommit": "4a71288e94b9c135e6f898757714e1c8b3337a87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY1ODkyOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544658929", "bodyText": "Done.\nUnfortunately, had to introduce specific handling for primitive arrays, since obj.hashCode for an array (as well as Objects.hashCode) do not generate a stable value. Added a test class for the static utilities in PlanHashable.", "author": "ohadzeliger", "createdAt": "2020-12-16T22:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwMTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544504059", "bodyText": "Since RecordFunction.basePlanHash ignores both the baseHash and the hashables for the legacy case, couldn't this always call the same way?", "author": "MMcM", "createdAt": "2020-12-16T17:54:30Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/metadata/IndexRecordFunction.java", "diffHunk": "@@ -117,10 +117,10 @@ public int hashCode() {\n     public int planHash(@Nonnull final PlanHashable.PlanHashKind hashKind) {\n         switch (hashKind) {\n             case LEGACY:\n-                return super.planHash(hashKind);\n+                return super.basePlanHash(hashKind, BASE_HASH);", "originalCommit": "4a71288e94b9c135e6f898757714e1c8b3337a87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY1OTU2Nw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544659567", "bodyText": "I am not sure I follow your suggestion. Can you please explain?\nThe LEGACY implementation is wasteful in the sense that it takes extra parameters that are never used, but it should go away soon.", "author": "ohadzeliger", "createdAt": "2020-12-16T22:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNzExNQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544717115", "bodyText": "Can't this implementation of planHash dispense with the switch and be return super.basePlanHash(hashKind, BASE_HASH, operand, index); always?", "author": "MMcM", "createdAt": "2020-12-17T00:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3MjY0NA==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544772644", "bodyText": "The original class had no override of planHash(), resolving to calling super.planHash(). We agreed that operand and index were indeed necessary for this to be correct, but left the LEGACY without them so as not to affect pending continuations.\nWe can make the change suggested if it is OK to impact the LEGACY calculation.", "author": "ohadzeliger", "createdAt": "2020-12-17T02:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwMDYyNg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544800626", "bodyText": "I agree. We don't want LEGACY' to change. However, I am not sure how it does change, given that RecordFunction.basePlanHashignores everything excepthashKindin theLEGACY` case.", "author": "MMcM", "createdAt": "2020-12-17T04:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzODIyOQ==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r545138229", "bodyText": "OK, I see what you mean now. Will do.", "author": "ohadzeliger", "createdAt": "2020-12-17T14:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE2NDgzMg==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r545164832", "bodyText": "Done. Searched across all usages of basePlanHash and this was the only place where this pattern could have been applied.", "author": "ohadzeliger", "createdAt": "2020-12-17T15:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwNDA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2MzM3Ng==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544563376", "bodyText": "Since there is no question of compatibility, would it be better to treat this enum like others and so using the name instead of using the ordinal?", "author": "MMcM", "createdAt": "2020-12-16T19:26:30Z", "path": "fdb-record-layer-core/src/main/java/com/apple/foundationdb/record/query/expressions/BaseRepeatedField.java", "diffHunk": "@@ -82,15 +82,24 @@ public int hashCode() {\n         return super.hashCode() + emptyMode.hashCode();\n     }\n \n+    /**\n+     * Base implementation of {@link #planHash}.\n+     * This implementation makes each concrete subclass implement its own version of {@link #planHash} so that they are\n+     * guided to add their own class modifier (See {@link com.apple.foundationdb.record.ObjectPlanHash ObjectPlanHash}).\n+     * This implementation is meant to give subclasses common functionality for their own implementation.\n+     * @param hashKind the plan hash kind to use\n+     * @param baseHash the subclass' base hash (concrete identifier)\n+     * @param hashables the rest of the subclass' hashable parameters (if any)\n+     * @return the plan hash value calculated\n+     */\n     @Override\n-    public int planHash(@Nonnull final PlanHashKind hashKind) {\n+    protected int basePlanHash(@Nonnull final PlanHashKind hashKind, ObjectPlanHash baseHash, Object... hashables) {\n         switch (hashKind) {\n             case LEGACY:\n-                return super.planHash(hashKind) + emptyMode.ordinal();\n+                return super.basePlanHash(hashKind, baseHash) + emptyMode.ordinal();\n             case FOR_CONTINUATION:\n             case STRUCTURAL_WITHOUT_LITERALS:\n-                // No BASE_HASH since this is abstract\n-                return PlanHashable.objectsPlanHash(hashKind, super.planHash(hashKind), emptyMode.ordinal());\n+                return super.basePlanHash(hashKind, baseHash, emptyMode.ordinal(), hashables);", "originalCommit": "4a71288e94b9c135e6f898757714e1c8b3337a87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY1OTYyNw==", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1071#discussion_r544659627", "bodyText": "Done.", "author": "ohadzeliger", "createdAt": "2020-12-16T22:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2MzM3Ng=="}], "type": "inlineReview"}, {"oid": "3827a42bb8eaa374304f85caa6138bcf0a54f67e", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/3827a42bb8eaa374304f85caa6138bcf0a54f67e", "message": "Initial commit - adding parameter to planHash", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "30ab1d6e6967479878666dd0647ce96538c44204", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/30ab1d6e6967479878666dd0647ce96538c44204", "message": "Fix broken test", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "abbb0a58d80b2753eefa57c6ae3ff296c1e951af", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/abbb0a58d80b2753eefa57c6ae3ff296c1e951af", "message": "Implement test", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "f2e484167e63a92aeca01662ddaf12c4148f6cc2", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/f2e484167e63a92aeca01662ddaf12c4148f6cc2", "message": "Cleanup TODOs", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "b80981f6ef873e6b488a707957d60b93dd7da482", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/b80981f6ef873e6b488a707957d60b93dd7da482", "message": "Added tests, corrected some bugs, renamed STANDARD to CONTINUATION", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "3b0619ed05e2417d845e539e56994689ac4b3ad2", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/3b0619ed05e2417d845e539e56994689ac4b3ad2", "message": "Add STRUCTURAL_WITHOUT_LITERALS plan hash assertions to existing tests", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "d451f92955e104193a090637796d406e03984fb0", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/d451f92955e104193a090637796d406e03984fb0", "message": "Add annotation to try and make tests pass", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "cfb0bae1af805e4c290038acd3863be1e5a98634", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/cfb0bae1af805e4c290038acd3863be1e5a98634", "message": "Add JavaDoc for Sonar failure.", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "c8d76230bfe6b6746f9752ffee5307a7b84a7c95", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/c8d76230bfe6b6746f9752ffee5307a7b84a7c95", "message": "Cleanup", "committedDate": "2020-12-16T19:37:07Z", "type": "commit"}, {"oid": "356e366c313ecfea11253672673e06d3de35f871", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/356e366c313ecfea11253672673e06d3de35f871", "message": "PR Comments:\n- Added @Nonnull final to all signatures\n- Added BASE_HASH object-based hash to planHash calculation\n- Used ObjectsHash for all combinations (instead pf \"+\")", "committedDate": "2020-12-16T19:37:08Z", "type": "commit"}, {"oid": "a9fd55ab5298a59ec6d3779921313bc8a45ba500", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/a9fd55ab5298a59ec6d3779921313bc8a45ba500", "message": "Fix to \"AndPredicate\" and \"OrPredicate\" to use unordered children in hash", "committedDate": "2020-12-16T19:37:08Z", "type": "commit"}, {"oid": "70bff9014072dc357386d7d48f6cc5ade9ec87b0", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/70bff9014072dc357386d7d48f6cc5ade9ec87b0", "message": "Style check - spaces", "committedDate": "2020-12-16T19:37:08Z", "type": "commit"}, {"oid": "4e865e4cddcc3ae27a4616387d46e6311c9b5e3e", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/4e865e4cddcc3ae27a4616387d46e6311c9b5e3e", "message": "PR Comments", "committedDate": "2020-12-16T19:37:08Z", "type": "commit"}, {"oid": "52c598279782925e5cb876d1b3314eb161a266db", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/52c598279782925e5cb876d1b3314eb161a266db", "message": "PR Comments- FunctionKeyExpression as abstract plan hash base", "committedDate": "2020-12-16T19:37:08Z", "type": "commit"}, {"oid": "ecd8acf17dd18623678473f303fcb8045e0a2a90", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/ecd8acf17dd18623678473f303fcb8045e0a2a90", "message": "PR Comments:\n- Use Enums without \"name()\" in hash calls\n- Create basePlanHash() in abstract classes that enforces subclasses use super().basePlanHash with BASE_HASH instance\n- Fix all tests to match new hash values\n- Implement 2 more planHash required due to item above (extended base class but relied implicitly on super())\n- Fix a bug in PlanHashable - handling of arrays in varargs", "committedDate": "2020-12-16T19:37:08Z", "type": "commit"}, {"oid": "56ce0b359c76016744d9a1078430926e3db97435", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/56ce0b359c76016744d9a1078430926e3db97435", "message": "PR Comments:\n- Handle array of primitives + tests for ObjectsPlanHash\n- Use Enum directly instead of ordinal()", "committedDate": "2020-12-16T22:06:19Z", "type": "commit"}, {"oid": "4e80f81a405c7722ce453e4a2c9bf965234ea0bf", "url": "https://github.com/FoundationDB/fdb-record-layer/commit/4e80f81a405c7722ce453e4a2c9bf965234ea0bf", "message": "PR Comments:\n- Remove redundant switch from subclass", "committedDate": "2020-12-17T15:10:33Z", "type": "commit"}]}