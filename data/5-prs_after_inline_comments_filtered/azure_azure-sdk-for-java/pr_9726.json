{"pr_number": 9726, "pr_title": "Remove dependencies related to reflection assertion", "pr_createdAt": "2020-03-31T22:44:47Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9726", "timeline": [{"oid": "b5a1ffdb544232ff30d1bd89bd582d88dd49c95f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5a1ffdb544232ff30d1bd89bd582d88dd49c95f", "message": "Make more changes", "committedDate": "2020-03-30T22:54:17Z", "type": "commit"}, {"oid": "4994deadc2e483a1b366482ab43324edfb123037", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4994deadc2e483a1b366482ab43324edfb123037", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into dependencies", "committedDate": "2020-03-31T17:07:18Z", "type": "commit"}, {"oid": "e33b188d498366ff93042f3a997c9ec5a814729d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e33b188d498366ff93042f3a997c9ec5a814729d", "message": "Remove dependencies related to reflection assertion", "committedDate": "2020-03-31T22:43:35Z", "type": "commit"}, {"oid": "598ac8adcf91b25a21c5599e1a963a08c9b39dfc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/598ac8adcf91b25a21c5599e1a963a08c9b39dfc", "message": "Clean up", "committedDate": "2020-03-31T22:51:12Z", "type": "commit"}, {"oid": "71ff703f8b69d3a0b00973ada4a89be2b5039045", "url": "https://github.com/Azure/azure-sdk-for-java/commit/71ff703f8b69d3a0b00973ada4a89be2b5039045", "message": "remove debug setting", "committedDate": "2020-04-01T00:40:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401713169", "bodyText": "nit: Possibly rename this to shouldCheckField", "author": "alzimmermsft", "createdAt": "2020-04-01T15:39:41Z", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,", "originalCommit": "71ff703f8b69d3a0b00973ada4a89be2b5039045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNjIwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401716202", "bodyText": "Another possible name is shouldSkipField since it's only use is negated.", "author": "alzimmermsft", "createdAt": "2020-04-01T15:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNDg1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401714850", "bodyText": "nit: Renamed this to ignoredFields", "author": "alzimmermsft", "createdAt": "2020-04-01T15:42:03Z", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {", "originalCommit": "71ff703f8b69d3a0b00973ada4a89be2b5039045", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNTE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401715150", "bodyText": "If this is going to be passed in many times should we convert ignoredFields to a Set before processing?", "author": "alzimmermsft", "createdAt": "2020-04-01T15:42:29Z", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,\n+        boolean ignoreDefaults, String... ignoreFields) {", "originalCommit": "71ff703f8b69d3a0b00973ada4a89be2b5039045", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODM4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401718387", "bodyText": "This is pretty risky code as null, false, and 0 could all be legitimate values being returned. Given that we are validating equality by traversing the JSON tree we could modify the serialization of the objects to always include default values and this section could be removed.", "author": "alzimmermsft", "createdAt": "2020-04-01T15:46:50Z", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +96,77 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults,\n+        String ... ignoreFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoreDefaults, ignoreFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoreDefaults, String[] ignoreFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            if (!doesFieldNeedCheck(fieldName, expectedField.getValue(), ignoreDefaults, ignoreFields)) {\n+                continue;\n+            }\n+            if (expectedField.getValue().isValueNode()) {\n+                assertEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()));\n+            } else if (expectedField.getValue().isArray()) {\n+                Iterator<JsonNode> expectedArray = expectedField.getValue().elements();\n+                Iterator<JsonNode> actualArray = actualNode.get(expectedField.getKey()).elements();\n+                while (expectedArray.hasNext() ) {\n+                    assertTrue(actualArray.hasNext());\n+                    Iterator<JsonNode> expectedElements = expectedArray.next().elements();\n+                    Iterator<JsonNode> actualElements = actualArray.next().elements();\n+                    while (expectedElements.hasNext()) {\n+                        assertTrue(actualElements.hasNext());\n+                        JsonNode a = expectedElements.next();\n+                        JsonNode b = actualElements.next();\n+                        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+                            continue;\n+                        }\n+                        if (!doesFieldNeedCheck(null, a, true)) {\n+                            continue;\n+                        }\n+                        assertEquals(a.asText(), b.asText());\n+                    }\n+                }\n+            } else {\n+                assertObjectEquals(expectedField.getValue(), actualNode.get(expectedField.getKey()), ignoreDefaults, ignoreFields);\n+            }\n+        }\n+    }\n+\n+    private static boolean doesFieldNeedCheck(String fieldName, JsonNode fieldValue,\n+        boolean ignoreDefaults, String... ignoreFields) {\n+        if (Arrays.asList(ignoreFields).contains(fieldName)) {\n+            return false;\n+        }\n+\n+        if (ignoreDefaults) {\n+            if (fieldValue.isNull()) {\n+                return false;\n+            }\n+            if (fieldValue.isBoolean() && !fieldValue.asBoolean()) {\n+                return false;\n+            }\n+            return !fieldValue.isNumber() || fieldValue.asDouble() != 0.0D;\n+        }", "originalCommit": "71ff703f8b69d3a0b00973ada4a89be2b5039045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NTE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401755147", "bodyText": "This is mimic the Reflection assertion IGNORE_DEFAULTS behavior.\nhttps://github.com/arteam/unitils/blob/master/unitils-core/src/main/java/org/unitils/reflectionassert/comparator/impl/IgnoreDefaultsComparator.java#L40", "author": "sima-zhu", "createdAt": "2020-04-01T16:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NjQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401756453", "bodyText": "There is a boolean field control this.\npublic static void assertObjectEquals(Object expected, Object actual, boolean ignoreDefaults, String ... ignoreFields) {\nIf we want to test default value, we can set ignoreDefaults to false.", "author": "sima-zhu", "createdAt": "2020-04-01T16:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODM4Nw=="}], "type": "inlineReview"}, {"oid": "8bf211ecc51c6b1512de1d0c467c33cc714b6a28", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bf211ecc51c6b1512de1d0c467c33cc714b6a28", "message": "Fixed linting.", "committedDate": "2020-04-01T17:09:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MTI2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9726#discussion_r401781260", "bodyText": "You'll want to move this outside of the while loop, right now this will be recreated each time.", "author": "alzimmermsft", "createdAt": "2020-04-01T17:19:52Z", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/TestHelpers.java", "diffHunk": "@@ -152,4 +98,93 @@ public static MatchConditions generateIfExistsAccessCondition() {\n     public static MatchConditions generateIfNotChangedAccessCondition(String eTag) {\n         return new MatchConditions().setIfMatch(eTag);\n     }\n+\n+    /**\n+     * Assert whether two objects are equal.\n+     *\n+     * @param expected The expected object.\n+     * @param actual The actual object.\n+     */\n+    public static void assertObjectEquals(Object expected, Object actual) {\n+        JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        try {\n+            assertEquals(jacksonAdapter.serialize(expected, SerializerEncoding.JSON),\n+                jacksonAdapter.serialize(actual, SerializerEncoding.JSON));\n+        } catch (IOException ex) {\n+            fail(\"There is something wrong happen in serializer.\");\n+        }\n+    }\n+\n+    /**\n+     * Assert whether two objects are equal.\n+     *\n+     * @param expected The expected object.\n+     * @param actual The actual object.\n+     * @param ignoredDefaults Set to true if it needs to ignore default value of expected object.\n+     * @param ignoredFields Varargs of ignored fields.\n+     */\n+    public static void assertObjectEquals(Object expected, Object actual, boolean ignoredDefaults,\n+        String... ignoredFields) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode expectedNode = mapper.valueToTree(expected);\n+        ObjectNode actualNode = mapper.valueToTree(actual);\n+        assertOnMapIterator(expectedNode.fields(), actualNode, ignoredDefaults,ignoredFields);\n+    }\n+\n+    private static void assertOnMapIterator(Iterator<Map.Entry<String, JsonNode>> expectedNode,\n+        ObjectNode actualNode, boolean ignoredDefaults, String[] ignoredFields) {\n+        while (expectedNode.hasNext()) {\n+            assertTrue(actualNode.fields().hasNext());\n+            Map.Entry<String, JsonNode> expectedField = expectedNode.next();\n+            String fieldName = expectedField.getKey();\n+            Set<String> ignoredFieldSet = new HashSet<>(Arrays.asList(ignoredFields));", "originalCommit": "8bf211ecc51c6b1512de1d0c467c33cc714b6a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a177ac291223812f4d7889214d3df5003fb5ee3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a177ac291223812f4d7889214d3df5003fb5ee3", "message": "Address comments", "committedDate": "2020-04-01T17:23:36Z", "type": "commit"}, {"oid": "cf14bdc834805ec62e8d37d8679ed236b1d495ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf14bdc834805ec62e8d37d8679ed236b1d495ac", "message": "remove external dependencies", "committedDate": "2020-04-02T17:37:58Z", "type": "commit"}]}