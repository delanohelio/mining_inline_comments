{"pr_number": 18401, "pr_title": "Checkstyle version increment and checks update", "pr_createdAt": "2020-12-30T13:15:29Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18401", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDI0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550294248", "bodyText": "In the future, for all of these types we check that aren't final, we'll want to use a more comprehensive validation to support sub-types (this is the current pain point with PagedFlux where sub-types get used in multiple locations)", "author": "alzimmermsft", "createdAt": "2020-12-30T18:55:34Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -55,15 +56,20 @@\n     private static final String MONO_BRACKET = \"Mono<\";\n     private static final String MONO_RESPONSE_BRACKET = \"Mono<Response<\";\n     private static final String PAGED_FLUX_BRACKET = \"PagedFlux<\";\n+    private static final String POLLER_FLUX_BRACKET = \"PollerFlux<\";\n+    private static final String SYNC_POLLER_BRACKET = \"SyncPoller<\";", "originalCommit": "7a6aa8318e487345f930e2ac7664be855beb93b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0NjU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550346583", "bodyText": "I added a contains to allow PagedFlux subtypes and not report them as error.", "author": "samvaity", "createdAt": "2020-12-30T22:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDY4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550294687", "bodyText": "Could these be equalsIgnoreCase?", "author": "alzimmermsft", "createdAt": "2020-12-30T18:56:50Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "diffHunk": "@@ -108,10 +109,14 @@ public void visitToken(DetailAST token) {\n \n                 String methodCallName =\n                     FullIdent.createFullIdent(methodCallToken.findFirstToken(TokenTypes.DOT)).getText();\n-                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_EXCEPTION_AS_WARNING.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_WARNING.equals(methodCallName)) {\n+                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.toLowerCase(Locale.ROOT)", "originalCommit": "7a6aa8318e487345f930e2ac7664be855beb93b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1ebabcb8c02cb44902e47398a81faa0e6a4af00", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1ebabcb8c02cb44902e47398a81faa0e6a4af00", "message": "update checkstyle version and rules", "committedDate": "2020-12-30T19:56:02Z", "type": "forcePushed"}, {"oid": "9627671b21bc6c314916b42b822dbf0bffea8890", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9627671b21bc6c314916b42b822dbf0bffea8890", "message": "update checkstyle version and rules", "committedDate": "2020-12-30T22:44:16Z", "type": "forcePushed"}, {"oid": "21df24dcbfe0a7cd105439be76d59ec12a74f7ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21df24dcbfe0a7cd105439be76d59ec12a74f7ff", "message": "update checkstyle version and rules", "committedDate": "2020-12-30T22:47:17Z", "type": "forcePushed"}, {"oid": "daa85f9ea9964a4048be17772b4a626ce3ecde03", "url": "https://github.com/Azure/azure-sdk-for-java/commit/daa85f9ea9964a4048be17772b4a626ce3ecde03", "message": "update checkstyle version and rules", "committedDate": "2020-12-30T23:35:19Z", "type": "forcePushed"}, {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd64bc49e391ce750ac768890adbcd93bf278363", "message": "update checkstyle version and rules", "committedDate": "2020-12-31T00:24:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzMjAzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551532030", "bodyText": "I wonder if this would be better named 'LONG_RUNNING_OPERATION'?", "author": "JonathanGiles", "createdAt": "2021-01-04T19:50:36Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -55,15 +56,20 @@\n     private static final String MONO_BRACKET = \"Mono<\";\n     private static final String MONO_RESPONSE_BRACKET = \"Mono<Response<\";\n     private static final String PAGED_FLUX_BRACKET = \"PagedFlux<\";\n+    private static final String POLLER_FLUX_BRACKET = \"PollerFlux<\";\n+    private static final String SYNC_POLLER_BRACKET = \"SyncPoller<\";\n     private static final String PAGED_ITERABLE_BRACKET = \"PagedIterable<\";\n \n     private static final String WITH_RESPONSE = \"WithResponse\";\n \n     private static final String COLLECTION_RETURN_TYPE = \"ReturnType.COLLECTION\";\n     private static final String SINGLE_RETURN_TYPE = \"ReturnType.SINGLE\";\n+    private static final String POLLER_RETURN_TYPE = \"ReturnType.POLLER\";", "originalCommit": "bd64bc49e391ce750ac768890adbcd93bf278363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNTgyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551535824", "bodyText": "remove", "author": "samvaity", "createdAt": "2021-01-04T19:58:12Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "diffHunk": "@@ -10,6 +10,7 @@\n \n import java.util.ArrayDeque;\n import java.util.Collections;\n+import java.util.Locale;", "originalCommit": "bd64bc49e391ce750ac768890adbcd93bf278363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNjEyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551536120", "bodyText": "This change is to allow static logger instances named LOGGER", "author": "samvaity", "createdAt": "2021-01-04T19:58:47Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "diffHunk": "@@ -108,10 +109,10 @@ public void visitToken(DetailAST token) {\n \n                 String methodCallName =\n                     FullIdent.createFullIdent(methodCallToken.findFirstToken(TokenTypes.DOT)).getText();\n-                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_EXCEPTION_AS_WARNING.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_WARNING.equals(methodCallName)) {\n+                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.equalsIgnoreCase(methodCallName)", "originalCommit": "bd64bc49e391ce750ac768890adbcd93bf278363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzOTk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551639944", "bodyText": "I think this check should still be there but modified to allow static loggers only if the logger is used within static methods. Instance methods should not use static loggers.", "author": "srnagar", "createdAt": "2021-01-04T23:59:28Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/GoodLoggingCheck.java", "diffHunk": "@@ -174,14 +173,8 @@ private void checkLoggerNameMatch(DetailAST varToken) {\n         }\n         // Check if the Logger instance named as 'logger'.\n         final DetailAST identAST = varToken.findFirstToken(TokenTypes.IDENT);\n-        if (identAST != null && !identAST.getText().equals(LOGGER)) {\n+        if (identAST != null && !identAST.getText().equalsIgnoreCase(LOGGER)) {\n             log(varToken, String.format(LOGGER_NAME_ERROR, LOGGER, identAST.getText()));\n         }\n-        // Check if the Logger is static instance, log as error if it is static instance logger.\n-        if (TokenUtil.findFirstTokenByPredicate(varToken,\n-            node -> node.getType() == TokenTypes.MODIFIERS\n-                && node.branchContains(TokenTypes.LITERAL_STATIC)).isPresent()) {\n-            log(varToken, STATIC_LOGGER_ERROR);\n-        }", "originalCommit": "bd64bc49e391ce750ac768890adbcd93bf278363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0MTQwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551641405", "bodyText": "!returnType.contains(PAGED_FLUX)  is sufficient as it covers both conditions.", "author": "srnagar", "createdAt": "2021-01-05T00:04:50Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -330,15 +322,22 @@ private void checkServiceClientMethodReturnType(DetailAST methodDefToken, Detail\n                 // If value of 'returns' is SINGLE, and then log error if the return type of the method is not start\n                 // with {@code Mono<T>}\n                 if (!returnType.startsWith(MONO_BRACKET)) {\n-                    log(methodDefToken, String.format(RETURN_TYPE_ERROR, \"Asynchronous\", SINGLE_RETURN_TYPE, MONO));\n+                    log(methodDefToken, String.format(RETURN_TYPE_ERROR, \"Asynchronous\", SINGLE_RETURN_TYPE,\n+                        MONO));\n                 }\n             } else if (COLLECTION_RETURN_TYPE.equals(returnsAnnotationMemberValue)) {\n                 // If value of 'returns' is COLLECTION, and then log error if the return type of the method is not\n-                // start with {@code PagedFlux<T>}\n-                if (!returnType.startsWith(PAGED_FLUX_BRACKET)) {\n+                // If value of 'returns' is COLLECTION, and then log error if the return type of the method is not\n+                // start with {@code PagedFlux<T>} or *PagedFlux\n+                if (!returnType.startsWith(PAGED_FLUX_BRACKET) && !returnType.contains(PAGED_FLUX)) {", "originalCommit": "bd64bc49e391ce750ac768890adbcd93bf278363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0MTgwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551641807", "bodyText": "Should this also have contains check instead?", "author": "srnagar", "createdAt": "2021-01-05T00:06:09Z", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -351,11 +350,16 @@ private void checkServiceClientMethodReturnType(DetailAST methodDefToken, Detail\n                 }\n             } else if (COLLECTION_RETURN_TYPE.equals(returnsAnnotationMemberValue)) {\n                 // If value of 'returns' is COLLECTION, and then log error if the return type of the method is not\n-                // start with {@code PagedIterable<T>}\n-                if (!returnType.startsWith(PAGED_ITERABLE_BRACKET)) {\n+                // start with {@code PagedIterable<T>} or *PagedIterable\n+                if (!returnType.startsWith(PAGED_ITERABLE_BRACKET) && !returnType.contains(PAGED_ITERABLE)) {\n                     log(methodDefToken, String.format(RETURN_TYPE_ERROR, \"Synchronous\", COLLECTION_RETURN_TYPE,\n                         PAGED_ITERABLE));\n                 }\n+            } else if (POLLER_RETURN_TYPE.equals(returnsAnnotationMemberValue)) {\n+                if (!returnType.startsWith(SYNC_POLLER_BRACKET)) {", "originalCommit": "bd64bc49e391ce750ac768890adbcd93bf278363", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a4e84f986ef7d8f54d19edde4d0d65fec49e868e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a4e84f986ef7d8f54d19edde4d0d65fec49e868e", "message": "update lro return type and static check", "committedDate": "2021-01-11T10:37:52Z", "type": "forcePushed"}, {"oid": "72af9e86c1086996923ab8b06e0cf4e7ae1c5126", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72af9e86c1086996923ab8b06e0cf4e7ae1c5126", "message": "update lro return type and static check", "committedDate": "2021-01-11T23:53:31Z", "type": "forcePushed"}, {"oid": "385930c26652b7a595b7b34b02cb5b9f49d1a237", "url": "https://github.com/Azure/azure-sdk-for-java/commit/385930c26652b7a595b7b34b02cb5b9f49d1a237", "message": "update checkstyle version and rules", "committedDate": "2021-01-15T21:39:19Z", "type": "commit"}, {"oid": "e55803095d5e1bc0f3e87e8d739412610e02825d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e55803095d5e1bc0f3e87e8d739412610e02825d", "message": "update lro return type and static check", "committedDate": "2021-01-15T21:39:25Z", "type": "commit"}, {"oid": "cbcb6852ceb1023031cdbc799fafc450d2631198", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbcb6852ceb1023031cdbc799fafc450d2631198", "message": "Merge changes", "committedDate": "2021-01-15T21:41:17Z", "type": "commit"}, {"oid": "cbcb6852ceb1023031cdbc799fafc450d2631198", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbcb6852ceb1023031cdbc799fafc450d2631198", "message": "Merge changes", "committedDate": "2021-01-15T21:41:17Z", "type": "forcePushed"}]}