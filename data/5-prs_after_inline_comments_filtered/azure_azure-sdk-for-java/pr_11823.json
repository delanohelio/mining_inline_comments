{"pr_number": 11823, "pr_title": "Add support for HTTP rest calls in Service Bus and generate management APIs", "pr_createdAt": "2020-06-05T16:49:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11823", "timeline": [{"oid": "792c6753d0248e22079964bedc10939caec92ff0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/792c6753d0248e22079964bedc10939caec92ff0", "message": "Adding swagger/README.md", "committedDate": "2020-06-05T16:36:11Z", "type": "commit"}, {"oid": "f9e899fb43e939f1b6e369e72151da8655ed160f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9e899fb43e939f1b6e369e72151da8655ed160f", "message": "Adding correct dependencies to make http calls", "committedDate": "2020-06-05T16:39:00Z", "type": "commit"}, {"oid": "ceee49778e0d7c9054647c2253bd347d6b1a7325", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ceee49778e0d7c9054647c2253bd347d6b1a7325", "message": "Autogenerate code", "committedDate": "2020-06-05T16:45:39Z", "type": "commit"}, {"oid": "6b35d78f62df3c8cd0667ed5a00866555fd7abf1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b35d78f62df3c8cd0667ed5a00866555fd7abf1", "message": "Update to python location for now.", "committedDate": "2020-06-05T16:48:28Z", "type": "commit"}, {"oid": "6456ce8786336850eec80bbc1e1f3b3c2d318898", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6456ce8786336850eec80bbc1e1f3b3c2d318898", "message": "Update swagger file", "committedDate": "2020-06-05T16:48:52Z", "type": "commit"}, {"oid": "49f2406d49abdffe7a936e2121ae09be0ec2bcdd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49f2406d49abdffe7a936e2121ae09be0ec2bcdd", "message": "Adding test classes for generated library.", "committedDate": "2020-06-05T16:52:54Z", "type": "commit"}, {"oid": "0c63a9850b1a5987eb6f47ff5799824533855496", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c63a9850b1a5987eb6f47ff5799824533855496", "message": "Fix tests.", "committedDate": "2020-06-05T17:09:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODkxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436068919", "bodyText": "May be we can use netty library available https://netty.io/4.1/api/io/netty/handler/codec/http/HttpHeaderNames.html#AUTHORIZATION", "author": "hemanttanwar", "createdAt": "2020-06-05T17:42:35Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusTokenCredentialHttpPolicy.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Token credential policy for authenticating with Service Bus.\n+ */\n+class ServiceBusTokenCredentialHttpPolicy implements HttpPipelinePolicy {\n+    private final TokenCredential tokenCredential;\n+\n+    /**\n+     * Creates a new credential policy using the Token credential.\n+     *\n+     * @param tokenCredential Token credential to get access token from.\n+     */\n+    ServiceBusTokenCredentialHttpPolicy(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final String url = context.getHttpRequest().getUrl().toString();\n+        return tokenCredential.getToken(new TokenRequestContext().addScopes(url)).flatMap(token -> {\n+            context.getHttpRequest().getHeaders().put(\"Authorization\", token.getToken());\n+            return next.process();", "originalCommit": "2247061901951eb4b239b26daf9d87e856764e9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MjE0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436072143", "bodyText": "same as above https://netty.io/4.1/api/io/netty/handler/codec/http/HttpHeaderNames.html#AUTHORIZATION", "author": "hemanttanwar", "createdAt": "2020-06-05T17:48:54Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusTokenCredentialHttpPolicy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Token credential policy for authenticating with service bus.\n+ */\n+public class ServiceBusTokenCredentialHttpPolicy implements HttpPipelinePolicy {\n+    private final TokenCredential tokenCredential;\n+\n+    ServiceBusTokenCredentialHttpPolicy(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final String url = context.getHttpRequest().getUrl().toString();\n+        return tokenCredential.getToken(new TokenRequestContext().addScopes(url)).flatMap(token -> {\n+            context.getHttpRequest().getHeaders().put(\"Authorization\", token.getToken());\n+            return next.process();", "originalCommit": "0c63a9850b1a5987eb6f47ff5799824533855496", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3OTUyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436079528", "bodyText": "What if they use OkHttp as their client? Now they'd be pulling in both dependencies.", "author": "conniey", "createdAt": "2020-06-05T18:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MjE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzExNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436077117", "bodyText": "https://netty.io/4.0/api/io/netty/handler/codec/http/HttpResponseStatus.html#OK", "author": "hemanttanwar", "createdAt": "2020-06-05T17:58:13Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementClientImplIntegrationTests.java", "diffHunk": "@@ -0,0 +1,257 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.implementation.ConnectionStringProperties;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.test.TestMode;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.TestUtils;\n+import com.azure.messaging.servicebus.implementation.models.CreateQueueBody;\n+import com.azure.messaging.servicebus.implementation.models.CreateQueueBodyContent;\n+import com.azure.messaging.servicebus.implementation.models.QueueDescriptionFeed;\n+import com.azure.messaging.servicebus.implementation.models.QueueDescriptionResponse;\n+import com.azure.messaging.servicebus.models.QueueDescription;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration tests for {@link ServiceBusManagementClientImpl}.\n+ */\n+class ServiceBusManagementClientImplIntegrationTests extends TestBase {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusManagementClientImplIntegrationTests.class);\n+    private final ServiceBusManagementSerializer serializer = new ServiceBusManagementSerializer();\n+    private final Duration timeout = Duration.ofSeconds(30);\n+\n+    private QueuesImpl queuesClient;\n+    private ServiceBusManagementClientImpl managementClient;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        Assumptions.assumeTrue(getTestMode() != TestMode.PLAYBACK,\n+            \"Current record/playback does not support persisting XML calls.\");\n+\n+        final ConnectionStringProperties properties = new ConnectionStringProperties(TestUtils.getConnectionString());\n+        final ServiceBusSharedKeyCredential credential = new ServiceBusSharedKeyCredential(\n+            properties.getSharedAccessKeyName(), properties.getSharedAccessKey());\n+\n+        HttpPipeline pipeline = new HttpPipelineBuilder().policies(\n+            new UserAgentPolicy(),\n+            (context, next) -> {\n+                final String url = context.getHttpRequest().getUrl().toString();\n+                return credential.getToken(new TokenRequestContext().addScopes(url)).flatMap(token -> {\n+                    context.getHttpRequest().getHeaders().put(\"Authorization\", token.getToken());\n+                    return next.process();\n+                });\n+            },\n+            new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)\n+                .addAllowedQueryParamName(\"api-version\")),\n+            new RetryPolicy()\n+        ).build();\n+\n+        managementClient = new ServiceBusManagementClientImplBuilder()\n+            .serializer(serializer)\n+            .endpoint(properties.getEndpoint().getHost())\n+            .apiVersion(\"2017-04\")\n+            .pipeline(pipeline)\n+            .buildClient();\n+\n+        queuesClient = managementClient.getQueues();\n+    }\n+\n+    /**\n+     * Verifies we can get queue information.\n+     */\n+    @Test\n+    void getQueue() {\n+        // Arrange\n+        String queueName = TestUtils.getQueueName();\n+\n+        // Act & Assert\n+        StepVerifier.create(queuesClient.getWithResponseAsync(queueName, true, Context.NONE))\n+            .assertNext(response -> {\n+                final QueueDescriptionResponse deserialize = deserialize(response, QueueDescriptionResponse.class);\n+                assertNotNull(deserialize);\n+                assertNotNull(deserialize.getContent());\n+\n+                final QueueDescription properties = deserialize.getContent().getQueueDescription();\n+                assertNotNull(properties);\n+                assertFalse(properties.getLockDuration().isZero());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies we can create a queue.\n+     */\n+    @Test\n+    void createQueue() {\n+        // Arrange\n+        String queueName = testResourceNamer.randomName(\"test\", 7);\n+        QueueDescription description = new QueueDescription().setMaxDeliveryCount(15);\n+        CreateQueueBody createEntity = new CreateQueueBody();\n+        CreateQueueBodyContent content = new CreateQueueBodyContent()\n+            .setType(\"application/xml\")\n+            .setQueueDescription(description);\n+        createEntity.setContent(content);\n+\n+        logger.info(\"Creating queue: {}\", queueName);\n+\n+        // Act & Assert\n+        StepVerifier.create(queuesClient.putWithResponseAsync(queueName, createEntity, null, Context.NONE))\n+            .assertNext(response -> {\n+                Object body = response.getValue();\n+                QueueDescription deserialize = null;\n+                try {\n+                    deserialize = new ServiceBusManagementSerializer()\n+                        .deserialize(String.valueOf(body), QueueDescription.class);\n+                } catch (IOException e) {\n+                    fail(\"An exception was thrown. \" + e);\n+                }\n+\n+                assertNotNull(deserialize);\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies we can delete a queue.\n+     */\n+    @Test\n+    void deleteQueue() {\n+        // Arrange\n+        String queueName = testResourceNamer.randomName(\"test\", 7);\n+        QueueDescription description = new QueueDescription().setMaxDeliveryCount(15);\n+        CreateQueueBody createEntity = new CreateQueueBody();\n+        CreateQueueBodyContent content = new CreateQueueBodyContent()\n+            .setType(\"application/xml\")\n+            .setQueueDescription(description);\n+        createEntity.setContent(content);\n+\n+        logger.info(\"Creating queue: {}\", queueName);\n+\n+        // This is not part of the scenario. We'll ensure it is created.\n+        Response<Object> response = queuesClient.putWithResponseAsync(queueName, createEntity, null, Context.NONE)\n+            .block(timeout);\n+        assertNotNull(response);\n+\n+        // Act & Assert\n+        StepVerifier.create(queuesClient.deleteWithResponseAsync(queueName, Context.NONE))\n+            .assertNext(deletedResponse -> assertEquals(200, deletedResponse.getStatusCode()))\n+            .verifyComplete();", "originalCommit": "2247061901951eb4b239b26daf9d87e856764e9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MDEyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11823#discussion_r436080122", "bodyText": "Same comment as above. You can explicitly exclude dependencies and this would tie them to netty instead of another http client.", "author": "conniey", "createdAt": "2020-06-05T18:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzExNw=="}], "type": "inlineReview"}, {"oid": "aa17c8f7f0e5ce33fc645fd0321ec46d59f9a624", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa17c8f7f0e5ce33fc645fd0321ec46d59f9a624", "message": "Add suppression for readme", "committedDate": "2020-06-05T18:42:33Z", "type": "commit"}, {"oid": "405941c23782ac5ec54ff53aad31862ceaa70a1b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/405941c23782ac5ec54ff53aad31862ceaa70a1b", "message": "Add suppression.", "committedDate": "2020-06-05T19:06:25Z", "type": "commit"}, {"oid": "405941c23782ac5ec54ff53aad31862ceaa70a1b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/405941c23782ac5ec54ff53aad31862ceaa70a1b", "message": "Add suppression.", "committedDate": "2020-06-05T19:06:25Z", "type": "forcePushed"}, {"oid": "116213ad77fe69cb59238d59476a3839f9cdc9e8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/116213ad77fe69cb59238d59476a3839f9cdc9e8", "message": "Adding dummy session-records.", "committedDate": "2020-06-05T19:41:25Z", "type": "commit"}]}