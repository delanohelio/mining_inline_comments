{"pr_number": 16601, "pr_title": "Communication - Refactor Chat Tests to use StepVerifier", "pr_createdAt": "2020-10-20T18:25:40Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16601", "timeline": [{"oid": "f892ca859653d65fd28601d3c4f0d9b63d387711", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f892ca859653d65fd28601d3c4f0d9b63d387711", "message": "Communication - Refactor Chat Tests", "committedDate": "2020-10-20T18:24:44Z", "type": "commit"}, {"oid": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51", "url": "https://github.com/Azure/azure-sdk-for-java/commit/edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51", "message": "Fix build", "committedDate": "2020-10-20T18:41:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMTgyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508801823", "bodyText": "still need to remove this block. It's what I was asking Srikanta about during the tutorial. Let me find his answer about how to do it", "author": "angiurgiu", "createdAt": "2020-10-20T19:59:39Z", "path": "sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatAsyncClientTest.java", "diffHunk": "@@ -57,92 +60,137 @@ protected void afterTest() {\n \n     @Test\n     public void canCreateThread() {\n+        // Arrange\n         CreateChatThreadOptions threadRequest = ChatOptionsProvider.createThreadOptions(\n             firstThreadMember.getId(), secondThreadMember.getId());\n \n-        ChatThreadAsyncClient chatThreadClient = client.createChatThread(threadRequest).block();\n-        assertNotNull(chatThreadClient);\n-        assertNotNull(chatThreadClient.getChatThreadId());\n+        // Act & Assert\n+        StepVerifier.create(client.createChatThread(threadRequest))\n+            .assertNext(chatThreadClient -> {\n+                assertNotNull(chatThreadClient);\n+                assertNotNull(chatThreadClient.getChatThreadId());\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canCreateThreadWithResponse() {\n+        // Arrange\n         CreateChatThreadOptions threadRequest = ChatOptionsProvider.createThreadOptions(\n             firstThreadMember.getId(), secondThreadMember.getId());\n \n-        ChatThreadAsyncClient chatThreadClient = client.createChatThreadWithResponse(threadRequest).block().getValue();\n-        assertNotNull(chatThreadClient);\n-        assertNotNull(chatThreadClient.getChatThreadId());\n+        // Act & Assert\n+        StepVerifier.create(client.createChatThreadWithResponse(threadRequest))\n+            .assertNext(chatThreadClientResponse -> {\n+                ChatThreadAsyncClient chatThreadClient = chatThreadClientResponse.getValue();\n+                assertNotNull(chatThreadClient);\n+                assertNotNull(chatThreadClient.getChatThreadId()); \n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canGetChatThreadClient() {\n+        // Arrange\n         String threadId = \"19:fe0a2f65a7834185b29164a7de57699c@thread.v2\";\n \n+        // Act\n         ChatThreadAsyncClient chatThreadClient = client.getChatThreadClient(threadId);\n+\n+        // Assert\n         assertNotNull(chatThreadClient);\n         assertEquals(chatThreadClient.getChatThreadId(), threadId);\n     }\n \n     @Test\n     public void canGetExistingChatThread() {\n+        // Arrange\n         CreateChatThreadOptions threadRequest = ChatOptionsProvider.createThreadOptions(\n             firstThreadMember.getId(), secondThreadMember.getId());\n         ChatThreadAsyncClient chatThreadClient = client.createChatThread(threadRequest).block();", "originalCommit": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzg0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508803845", "bodyText": "\"What if we need to set up/create an object on the service first (as part of the arrange), before acting on it? Do we initialize the sync client too, and use it to arrange the setup? Or do we use a multi\u2026\"\nyou can chain multiple service calls asynchronously through Reactor operators like then().. so, the first call will do the necessary setup on the service and then call the next method that you want to test", "author": "angiurgiu", "createdAt": "2020-10-20T20:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxOTc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508919773", "bodyText": "Done", "author": "minnieliu", "createdAt": "2020-10-21T00:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMTgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzEyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508803128", "bodyText": "Same comment here, need to get rid of this .block() too", "author": "angiurgiu", "createdAt": "2020-10-20T20:01:57Z", "path": "sdk/communication/azure-communication-chat/src/test/java/com/azure/communication/chat/ChatThreadAsyncClientTest.java", "diffHunk": "@@ -64,158 +67,219 @@ protected void afterTest() {\n \n     @Test\n     public void canUpdateThread() {\n+        // Arrange\n         UpdateChatThreadOptions threadRequest = ChatOptionsProvider.updateThreadOptions();\n \n-        chatThreadClient.updateChatThread(threadRequest).block();\n-\n-        ChatThread chatThread = client.getChatThread(threadId).block();\n-        assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n+        // Act & Assert\n+        StepVerifier.create(chatThreadClient.updateChatThread(threadRequest))\n+            .assertNext(noResp -> {\n+                StepVerifier.create(client.getChatThread(threadId)).assertNext(chatThread -> {\n+                    assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n+                })\n+                .verifyComplete();\n+            });\n     }\n \n     @Test\n     public void canUpdateThreadWithResponse() {\n+        // Arrange\n         UpdateChatThreadOptions threadRequest = ChatOptionsProvider.updateThreadOptions();\n \n-        chatThreadClient.updateChatThreadWithResponse(threadRequest).block().getValue();\n+        // Act & Assert\n+        StepVerifier.create(chatThreadClient.updateChatThreadWithResponse(threadRequest))\n+                .assertNext(updateThreadResponse -> {\n+                    assertEquals(updateThreadResponse.getStatusCode(), 200);\n+                    StepVerifier.create(client.getChatThread(threadId)).assertNext(chatThread -> {\n+                        assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n+                    })\n+                    .verifyComplete();\n+                })\n+                .verifyComplete();\n \n-        ChatThread chatThread = client.getChatThread(threadId).block();\n-        assertEquals(chatThread.getTopic(), threadRequest.getTopic());\n     }\n \n     @Test\n     public void canAddListAndRemoveMembersAsync() throws InterruptedException {\n+        // Arrange\n         firstAddedThreadMember = communicationClient.createUser();\n         secondAddedThreadMember = communicationClient.createUser();\n \n         AddChatThreadMembersOptions options = ChatOptionsProvider.addThreadMembersOptions(\n             firstAddedThreadMember.getId(), secondAddedThreadMember.getId());\n \n-        chatThreadClient.addMembers(options).block();\n-\n-        PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n-\n-        // process the iterableByPage\n-        List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n-        membersResponse.iterableByPage().forEach(resp -> {\n-            assertEquals(resp.getStatusCode(), 200);\n-            resp.getItems().forEach(item -> returnedMembers.add(item));\n-        });\n-\n-        for (ChatThreadMember member: options.getMembers()) {\n-            assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n-        }\n-\n-        assertTrue(returnedMembers.size() == 4);\n+        // Act & Assert\n+        StepVerifier.create(chatThreadClient.addMembers(options))\n+            .assertNext(noResp -> {\n+                PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n+\n+                // process the iterableByPage\n+                List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n+                membersResponse.iterableByPage().forEach(resp -> {\n+                    assertEquals(resp.getStatusCode(), 200);\n+                    resp.getItems().forEach(item -> returnedMembers.add(item));\n+                });\n+        \n+                for (ChatThreadMember member: options.getMembers()) {\n+                    assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n+                }\n+                assertTrue(returnedMembers.size() == 4);\n+            });\n \n         for (ChatThreadMember member: options.getMembers()) {\n-            chatThreadClient.removeMember(member.getUser()).block();\n+            StepVerifier.create(chatThreadClient.removeMember(member.getUser()))\n+                .verifyComplete();\n         }\n     }\n \n     @Test\n     public void canAddListAndRemoveMembersWithResponseAsync() throws InterruptedException {\n+        // Arrange\n         firstAddedThreadMember = communicationClient.createUser();\n         secondAddedThreadMember = communicationClient.createUser();\n \n         AddChatThreadMembersOptions options = ChatOptionsProvider.addThreadMembersOptions(\n             firstAddedThreadMember.getId(), secondAddedThreadMember.getId());\n \n-        chatThreadClient.addMembersWithResponse(options).block().getValue();\n-\n-        PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n-\n-        // process the iterableByPage\n-        List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n-        membersResponse.iterableByPage().forEach(resp -> {\n-            assertEquals(resp.getStatusCode(), 200);\n-            resp.getItems().forEach(item -> returnedMembers.add(item));\n-        });\n-\n-        for (ChatThreadMember member: options.getMembers()) {\n-            assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n-        }\n-\n-        assertTrue(returnedMembers.size() == 4);\n-\n-        for (ChatThreadMember member: options.getMembers()) {\n-            chatThreadClient.removeMemberWithResponse(member.getUser()).block().getValue();\n-        }\n+        // Action & Assert\n+        StepVerifier.create(chatThreadClient.addMembersWithResponse(options))\n+            .assertNext(addMembersResponse -> {\n+                assertEquals(addMembersResponse.getStatusCode(), 207);\n+                PagedIterable<ChatThreadMember> membersResponse = new PagedIterable<>(chatThreadClient.listMembers());\n+\n+                // process the iterableByPage\n+                List<ChatThreadMember> returnedMembers = new ArrayList<ChatThreadMember>();\n+                membersResponse.iterableByPage().forEach(resp -> {\n+                    assertEquals(resp.getStatusCode(), 200);\n+                    resp.getItems().forEach(item -> returnedMembers.add(item));\n+                });\n+        \n+                for (ChatThreadMember member: options.getMembers()) {\n+                    assertTrue(checkMembersListContainsMemberId(returnedMembers, member.getUser().getId()));\n+                }\n+        \n+                assertTrue(returnedMembers.size() == 4);\n+\n+                for (ChatThreadMember member: options.getMembers()) {\n+                    StepVerifier.create(chatThreadClient.removeMemberWithResponse(member.getUser()))\n+                        .assertNext(resp -> {\n+                            assertEquals(resp.getStatusCode(), 204);\n+                        })\n+                        .verifyComplete();\n+                }\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canSendThenGetMessage() {\n+        // Arrange\n         SendChatMessageOptions messageRequest = ChatOptionsProvider.sendMessageOptions();\n-\n-        SendChatMessageResult response = chatThreadClient.sendMessage(messageRequest).block();\n-\n-        ChatMessage message = chatThreadClient.getMessage(response.getId()).block();\n-        assertEquals(message.getContent(), messageRequest.getContent());\n-        assertEquals(message.getPriority(), messageRequest.getPriority());\n-        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+        \n+        // Action & Assert\n+        StepVerifier.create(chatThreadClient.sendMessage(messageRequest))\n+            .assertNext(response -> {\n+                StepVerifier.create(chatThreadClient.getMessage(response.getId()))\n+                    .assertNext(message -> {\n+                        assertEquals(message.getContent(), messageRequest.getContent());\n+                        assertEquals(message.getPriority(), messageRequest.getPriority());\n+                        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+                    })\n+                    .verifyComplete();\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canSendThenGetMessageWithResponse() {\n+        // Arrange\n         SendChatMessageOptions messageRequest = ChatOptionsProvider.sendMessageOptions();\n \n-        SendChatMessageResult response = chatThreadClient.sendMessageWithResponse(messageRequest).block().getValue();\n-\n-        ChatMessage message = chatThreadClient.getMessageWithResponse(response.getId()).block().getValue();\n-        assertEquals(message.getContent(), messageRequest.getContent());\n-        assertEquals(message.getPriority(), messageRequest.getPriority());\n-        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+        // Action & Assert\n+        StepVerifier.create(chatThreadClient.sendMessageWithResponse(messageRequest))\n+            .assertNext(sendResponse -> {\n+                StepVerifier.create(chatThreadClient.getMessageWithResponse(sendResponse.getValue().getId()))\n+                    .assertNext(getResponse -> {\n+                        ChatMessage message = getResponse.getValue();\n+                        assertEquals(message.getContent(), messageRequest.getContent());\n+                        assertEquals(message.getPriority(), messageRequest.getPriority());\n+                        assertEquals(message.getSenderDisplayName(), messageRequest.getSenderDisplayName());\n+                    })\n+                    .verifyComplete();\n+            })\n+            .verifyComplete();\n     }\n \n     @Test\n     public void canDeleteExistingMessage() {\n+        // Arrange\n         SendChatMessageOptions messageRequest = ChatOptionsProvider.sendMessageOptions();\n-\n         SendChatMessageResult response = chatThreadClient.sendMessage(messageRequest).block();", "originalCommit": "edb0f2e5b4ac35b4692ae7ef146f5b7f229a4b51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkxOTc1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16601#discussion_r508919753", "bodyText": "Done", "author": "minnieliu", "createdAt": "2020-10-21T00:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzEyOA=="}], "type": "inlineReview"}, {"oid": "17b6acc79fc941aa30180125113e3bc38211d2ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/17b6acc79fc941aa30180125113e3bc38211d2ea", "message": "Update tests to get rid of all blocks", "committedDate": "2020-10-21T00:05:18Z", "type": "commit"}, {"oid": "f6ffbc1222361f199327588722fe31979e35e864", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6ffbc1222361f199327588722fe31979e35e864", "message": "Clean up and fix build", "committedDate": "2020-10-21T00:16:25Z", "type": "commit"}]}