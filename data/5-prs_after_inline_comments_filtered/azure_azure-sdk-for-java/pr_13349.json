{"pr_number": 13349, "pr_title": "Performance test Project for service bus track 1 and track 2", "pr_createdAt": "2020-07-21T00:41:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13349", "timeline": [{"oid": "ba348a0e8d0a3b5b19c3d0147ffd7757edbaaed9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba348a0e8d0a3b5b19c3d0147ffd7757edbaaed9", "message": "Merge remote-tracking branch 'upstream/master' into sb-track2-create-performancetest-9919", "committedDate": "2020-10-29T16:36:21Z", "type": "commit"}, {"oid": "8cdb3294ee53a0f8c033639fd9bf16a0ad2efc24", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8cdb3294ee53a0f8c033639fd9bf16a0ad2efc24", "message": "update README", "committedDate": "2020-11-03T22:47:36Z", "type": "commit"}, {"oid": "9ae6d466e46679bc529795873356f64250ec675b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ae6d466e46679bc529795873356f64250ec675b", "message": "Merge remote-tracking branch 'upstream/master' into sb-track2-create-performancetest-9919", "committedDate": "2020-11-03T22:58:22Z", "type": "commit"}, {"oid": "17f83b2ed3e4a715b30182acd0c26e8501e8c107", "url": "https://github.com/Azure/azure-sdk-for-java/commit/17f83b2ed3e4a715b30182acd0c26e8501e8c107", "message": "update code", "committedDate": "2020-11-03T23:15:48Z", "type": "commit"}, {"oid": "f80e9607d64a7eb147f5e9e2295a47df750619f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f80e9607d64a7eb147f5e9e2295a47df750619f3", "message": "update code", "committedDate": "2020-11-04T02:17:52Z", "type": "commit"}, {"oid": "f6049757780fa647789e5bd59aea3a64af305850", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6049757780fa647789e5bd59aea3a64af305850", "message": "Merge remote-tracking branch 'upstream/master' into sb-track2-create-performancetest-9919", "committedDate": "2020-11-04T05:36:29Z", "type": "commit"}, {"oid": "f7c2abc81df9f8dfa8d6e344c64edb477f072b9e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7c2abc81df9f8dfa8d6e344c64edb477f072b9e", "message": "refactor code", "committedDate": "2020-11-04T05:54:04Z", "type": "commit"}, {"oid": "37a4f82e4e668b36523ded80f137a94ff968f2d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37a4f82e4e668b36523ded80f137a94ff968f2d3", "message": "fix checkstyle", "committedDate": "2020-11-04T06:15:09Z", "type": "commit"}, {"oid": "0ef91114b4ec69b197a291ce953a633d2db577bc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ef91114b4ec69b197a291ce953a633d2db577bc", "message": "Merge branch 'master' into sb-track2-create-performancetest-9919", "committedDate": "2020-11-04T17:34:00Z", "type": "commit"}, {"oid": "a76de4893fe9d3a910d77200b9d396a33f8d066c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a76de4893fe9d3a910d77200b9d396a33f8d066c", "message": "refactor code", "committedDate": "2020-11-04T17:56:05Z", "type": "commit"}, {"oid": "8b243d7c2587212218475203b542551c95514be9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b243d7c2587212218475203b542551c95514be9", "message": "Merge branch 'sb-track2-create-performancetest-9919' of github.com:hemanttanwar/azure-sdk-for-java into sb-track2-create-performancetest-9919", "committedDate": "2020-11-04T18:03:44Z", "type": "commit"}, {"oid": "4c7bff288907eeed70cc352e99f26458beeee11a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c7bff288907eeed70cc352e99f26458beeee11a", "message": "continue creating perf project", "committedDate": "2020-07-21T00:40:26Z", "type": "commit"}, {"oid": "c876f73bd045b3190cf459981427c0d28d3b41cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c876f73bd045b3190cf459981427c0d28d3b41cc", "message": "continue", "committedDate": "2020-07-21T17:39:16Z", "type": "commit"}, {"oid": "c24e486c096a834354153e50475d466096438be3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c24e486c096a834354153e50475d466096438be3", "message": "basic test to receive", "committedDate": "2020-07-21T19:57:59Z", "type": "commit"}, {"oid": "764693c5b0c033cd9842899bb3a468fbd923cdfa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/764693c5b0c033cd9842899bb3a468fbd923cdfa", "message": "continue", "committedDate": "2020-07-22T00:17:49Z", "type": "commit"}, {"oid": "34f3dac9a716358653b99ed2085daf3eb8d592fb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/34f3dac9a716358653b99ed2085daf3eb8d592fb", "message": "Adding test", "committedDate": "2020-07-22T02:20:52Z", "type": "commit"}, {"oid": "ce0b52c4ca7e4af35f96b8cfed40cd550069ee76", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ce0b52c4ca7e4af35f96b8cfed40cd550069ee76", "message": "fixing test", "committedDate": "2020-07-22T16:23:02Z", "type": "commit"}, {"oid": "29f558356e79f78461dc5906c069ea31135162ef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/29f558356e79f78461dc5906c069ea31135162ef", "message": "adding test", "committedDate": "2020-07-22T19:13:50Z", "type": "commit"}, {"oid": "c1cac7632b3d2efbe51a3e0fb85c427bc9f4a1b5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1cac7632b3d2efbe51a3e0fb85c427bc9f4a1b5", "message": "Continue test", "committedDate": "2020-07-22T21:26:14Z", "type": "commit"}, {"oid": "d11742c73c7d27bf54c2dc12d0247884be10e76b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d11742c73c7d27bf54c2dc12d0247884be10e76b", "message": "continue", "committedDate": "2020-07-22T21:53:11Z", "type": "commit"}, {"oid": "7356c2eb4dd5a3469b13c67a98b0bc6de1a03adf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7356c2eb4dd5a3469b13c67a98b0bc6de1a03adf", "message": " adding test", "committedDate": "2020-07-24T14:01:48Z", "type": "commit"}, {"oid": "703504d9f1698136bcec76189d7dd7b65312669c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/703504d9f1698136bcec76189d7dd7b65312669c", "message": "Adding test for track1 as well.", "committedDate": "2020-07-24T18:24:03Z", "type": "commit"}, {"oid": "bbcd969ee2d092c5b462e7ee96ef261097ab4d07", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bbcd969ee2d092c5b462e7ee96ef261097ab4d07", "message": "Adding test", "committedDate": "2020-07-27T18:31:35Z", "type": "commit"}, {"oid": "01ffb1856c23c1990100cceace320eee6556200e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/01ffb1856c23c1990100cceace320eee6556200e", "message": "Fixing pom files", "committedDate": "2020-07-27T19:33:37Z", "type": "commit"}, {"oid": "8f0a420d793e78101f19edab699be98e2e138846", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8f0a420d793e78101f19edab699be98e2e138846", "message": "Fix pom file", "committedDate": "2020-07-29T18:13:19Z", "type": "commit"}, {"oid": "5bf9652a40ec34f062708006fbf752bce54ee2e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5bf9652a40ec34f062708006fbf752bce54ee2e5", "message": "Removing SOP", "committedDate": "2020-07-29T18:16:39Z", "type": "commit"}, {"oid": "f226d7d7bb3c0a13b74e71777a1e868f9c02c995", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f226d7d7bb3c0a13b74e71777a1e868f9c02c995", "message": "Removing unwanted test code", "committedDate": "2020-07-29T18:19:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1ODY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r463158663", "bodyText": "Can we use the full name via ReceiveAndDeleteMessageTest.class.getName()? It'll make refactoring easier.", "author": "conniey", "createdAt": "2020-07-30T17:31:36Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/App.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+/**\n+ * Runs the Storage performance test.\n+ *\n+ * <p>To run from command line. Package the project into a jar with dependencies via mvn clean package.\n+ * Then run the program via java -jar 'compiled-jar-with-dependencies-path' </p>\n+ *\n+ * <p> To run from IDE, set all the required environment variables in IntelliJ via Run -&gt; EditConfigurations\n+ * section.\n+ * Then run the App's main method via IDE.</p>\n+ */\n+public class App {\n+    public static void main(String[] args) {\n+        Class<?>[] testClasses;\n+\n+        try {\n+            testClasses = new Class<?>[]{\n+                Class.forName(\"com.azure.messaging.servicebus.perf.ReceiveAndDeleteMessageTest\"),", "originalCommit": "f226d7d7bb3c0a13b74e71777a1e868f9c02c995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1OTI1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r463159256", "bodyText": "This can be condensed into a single try/catch", "author": "conniey", "createdAt": "2020-07-30T17:32:46Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) throws InterruptedException, ExecutionException, ServiceBusException {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.empty();\n+    }\n+\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Flux.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .flatMap(count -> {\n+                try {\n+                    sender.send(message);\n+                } catch (InterruptedException e) {", "originalCommit": "f226d7d7bb3c0a13b74e71777a1e868f9c02c995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2MDE1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r463160153", "bodyText": "All these should be using the sendAsync rather than synchronous to make a fair comparison.", "author": "conniey", "createdAt": "2020-07-30T17:34:26Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;", "originalCommit": "f226d7d7bb3c0a13b74e71777a1e868f9c02c995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "905e7065124223489e45eababa2914f1ebebb371", "url": "https://github.com/Azure/azure-sdk-for-java/commit/905e7065124223489e45eababa2914f1ebebb371", "message": "Review comments", "committedDate": "2020-08-06T06:33:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MjIxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466552214", "bodyText": "Instead of all these checked exceptions, it would be easier to read if we caught and threw unchecked ones instead.", "author": "conniey", "createdAt": "2020-08-06T16:56:32Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected  static final String CONTENTS = \"Track 1 AMQP message - Perf Test\";\n+\n+    private MessagingFactory factory;\n+    protected IMessageSender sender;\n+    protected IMessageReceiver receiver;\n+\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) throws ExecutionException, InterruptedException, ServiceBusException {", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MzI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466553286", "bodyText": "is this how we expect the program to exit? I would expect an exception to be thrown in the constructor.", "author": "conniey", "createdAt": "2020-08-06T16:58:25Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected  static final String CONTENTS = \"Track 1 AMQP message - Perf Test\";\n+\n+    private MessagingFactory factory;\n+    protected IMessageSender sender;\n+    protected IMessageReceiver receiver;\n+\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) throws ExecutionException, InterruptedException, ServiceBusException {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            System.out.println(\"Environment variable AZURE_SERVICE_BUS_CONNECTION_STRING must be set\");\n+            System.exit(1);", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MzcyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466553729", "bodyText": "nit: this.factory -> factory", "author": "conniey", "createdAt": "2020-08-06T16:59:12Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected  static final String CONTENTS = \"Track 1 AMQP message - Perf Test\";\n+\n+    private MessagingFactory factory;\n+    protected IMessageSender sender;\n+    protected IMessageReceiver receiver;\n+\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) throws ExecutionException, InterruptedException, ServiceBusException {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            System.out.println(\"Environment variable AZURE_SERVICE_BUS_CONNECTION_STRING must be set\");\n+            System.exit(1);\n+        }\n+\n+        String queueName = System.getenv(AZURE_SERVICEBUS_QUEUE_NAME);\n+        if (CoreUtils.isNullOrEmpty(queueName)) {\n+            System.out.println(\"Environment variable AZURE_SERVICEBUS_QUEUE_NAME must be set\");\n+            System.exit(1);\n+        }\n+\n+        // Setup the service client\n+        this.factory = MessagingFactory.createFromConnectionString(connectionString);\n+        this.sender = ClientFactory.createMessageSenderFromEntityPath(this.factory, queueName);", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NDIxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466554215", "bodyText": "nit: uneeded new lines.", "author": "conniey", "createdAt": "2020-08-06T17:00:01Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceBusStressOptions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.beust.jcommander.Parameter;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+/**\n+ * Represents the command line configurable options for a performance test.\n+ */\n+@JsonPropertyOrder(alphabetic = true)\n+public class ServiceBusStressOptions extends PerfStressOptions {\n+\n+    @Parameter(names = { \"-mr\", \"--maxReceive\" }, description = \"MaxrReceive messages\")\n+    private int messagesToReceive = 10;\n+\n+    @Parameter(names = { \"-ms\", \"--messageSend\" }, description = \"Messages to send\")\n+    private int messagesToSend = 10;\n+\n+    /**\n+     * Get the configured messagesToSend option for performance test.\n+     * @return The size.\n+     */\n+    public int getMessagesToSend() {\n+        return messagesToSend;\n+    }\n+\n+    /**\n+     * Get the configured messagesToReceive option for performance test.\n+     * @return The size.\n+     */\n+    public int getMessagesToReceive() {\n+        return messagesToReceive;\n+    }\n+", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NDI5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466554296", "bodyText": "nit: unneeded new lines.", "author": "conniey", "createdAt": "2020-08-06T17:00:10Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessagesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+public class SendMessagesTest extends ServiceTest<ServiceBusStressOptions> {\n+    private List<IMessage> messages = new ArrayList<>();\n+\n+    public SendMessagesTest(ServiceBusStressOptions options) throws InterruptedException, ExecutionException, ServiceBusException {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NDk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466554962", "bodyText": "Why are we using a flatmap here? It can easily be an IntStream. messages is not thread-safe either, so I would not expect us to use it in a flatMap.", "author": "conniey", "createdAt": "2020-08-06T17:01:20Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessagesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+public class SendMessagesTest extends ServiceTest<ServiceBusStressOptions> {\n+    private List<IMessage> messages = new ArrayList<>();\n+\n+    public SendMessagesTest(ServiceBusStressOptions options) throws InterruptedException, ExecutionException, ServiceBusException {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+\n+\n+    public Mono<Void> globalSetupAsync() {\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+        return Flux.range(0, options.getMessagesToSend())", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NTYwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466555600", "bodyText": "Why aren't we using the async sender here for Track 1?", "author": "conniey", "createdAt": "2020-08-06T17:02:36Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) throws InterruptedException, ExecutionException, ServiceBusException {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.empty();\n+    }\n+\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Flux.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .flatMap(count -> {\n+                try {\n+                    sender.send(message);", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjAwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466556000", "bodyText": "Similarly. This isn't using completeable futures correctly. You can bridge a completeable future into a mono and return that.", "author": "conniey", "createdAt": "2020-08-06T17:03:22Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) throws InterruptedException, ExecutionException, ServiceBusException {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            e.printStackTrace();\n+        }\n+        return Mono.empty();\n+    }\n+\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Flux.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .flatMap(count -> {\n+                try {\n+                    sender.send(message);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                return Mono.empty();\n+            })\n+            .then();\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception ee) {\n+            ee.printStackTrace();\n+        }\n+\n+        for(IMessage message : messages) {\n+\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        CompletableFuture<Collection<IMessage>> receiveFuture = receiver.receiveBatchAsync(options.getMessagesToReceive());\n+        try {\n+            Collection<IMessage> messages = receiveFuture.get();", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjMzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r466556334", "bodyText": "Why are we sending one at a time instead of using sending an iterable? You can use an IntStream to create all the messages.", "author": "conniey", "createdAt": "2020-08-06T17:03:54Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) throws InterruptedException, ExecutionException, ServiceBusException {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Flux.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .flatMap(count -> {", "originalCommit": "905e7065124223489e45eababa2914f1ebebb371", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aaf997724749b9660a01c06b0efcd426dc61b4e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aaf997724749b9660a01c06b0efcd426dc61b4e2", "message": "Fixing test", "committedDate": "2020-08-06T22:50:42Z", "type": "commit"}, {"oid": "95a39da9a46d94154fb8be77a57ef140d935e4db", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95a39da9a46d94154fb8be77a57ef140d935e4db", "message": "Testing more", "committedDate": "2020-08-07T17:42:45Z", "type": "commit"}, {"oid": "f68a69cd6dd07d58f28a9d1e7dca39833b0ef23d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f68a69cd6dd07d58f28a9d1e7dca39833b0ef23d", "message": "Review comments", "committedDate": "2020-08-07T19:51:30Z", "type": "commit"}, {"oid": "d16f8ecd17b8969c28d329e44904faeaa26d8113", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d16f8ecd17b8969c28d329e44904faeaa26d8113", "message": "Review comments", "committedDate": "2020-08-07T21:29:39Z", "type": "commit"}, {"oid": "dd7f7d91bc5124e17cd9228f7aa4600f22b6fe6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd7f7d91bc5124e17cd9228f7aa4600f22b6fe6b", "message": "check style and review comments changes", "committedDate": "2020-08-09T00:58:20Z", "type": "commit"}, {"oid": "c27d332f774d2d74a801373783e2fb85661d0418", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c27d332f774d2d74a801373783e2fb85661d0418", "message": "Added impressions in readme", "committedDate": "2020-08-09T01:15:31Z", "type": "commit"}, {"oid": "900ee12295729b9a828f19c5d9b7b5b89a739394", "url": "https://github.com/Azure/azure-sdk-for-java/commit/900ee12295729b9a828f19c5d9b7b5b89a739394", "message": "merge master", "committedDate": "2020-08-09T04:49:27Z", "type": "commit"}, {"oid": "57ac2d750ccd836b4867c124d40258d0aab45ab7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/57ac2d750ccd836b4867c124d40258d0aab45ab7", "message": "readme changes", "committedDate": "2020-08-09T05:04:53Z", "type": "commit"}, {"oid": "92a23b9f8f6fa2578877e0c86525aa04fe5f075a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/92a23b9f8f6fa2578877e0c86525aa04fe5f075a", "message": "Adding additional module", "committedDate": "2020-08-10T17:51:04Z", "type": "commit"}, {"oid": "d80c1f0d31865afadce373a05d0f6fb89a7e9d5b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d80c1f0d31865afadce373a05d0f6fb89a7e9d5b", "message": "Added AdditionalModules", "committedDate": "2020-08-10T18:37:09Z", "type": "commit"}, {"oid": "72034a5b56af8a98ee49056020df6046c2fa96fb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72034a5b56af8a98ee49056020df6046c2fa96fb", "message": "Fixing AdditionalModules", "committedDate": "2020-08-10T20:31:31Z", "type": "commit"}, {"oid": "a91b815bca42927f333239e4d2db17a40c30b28e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a91b815bca42927f333239e4d2db17a40c30b28e", "message": "Adding storage perf temporarily, it needs because of some issue in amd switch", "committedDate": "2020-08-10T22:41:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNTU5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468635596", "bodyText": "Private final", "author": "conniey", "createdAt": "2020-08-11T14:42:31Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private List<Message> messages = new ArrayList<>();", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3ODk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468778998", "bodyText": "this is assigned value in another function below, so can final  make it final.", "author": "hemanttanwar", "createdAt": "2020-08-11T18:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNTU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNjM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468636388", "bodyText": "If this is track 1, the namespace should be com.microsoft.", "author": "conniey", "createdAt": "2020-08-11T14:43:37Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTExNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468639116", "bodyText": "Use the async option. sendBatchAsync. There is a static method that changes it to the appropriate reactor type", "author": "conniey", "createdAt": "2020-08-11T14:47:13Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Mono.defer(() -> {\n+            messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+\n+            try {\n+                sender.sendBatch(messages);", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTU4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468639581", "bodyText": "Same with all these. We should be using async methods.", "author": "conniey", "createdAt": "2020-08-11T14:47:48Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a41e292eb5d0c1f54341cc3deece3c19aa0f82a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a41e292eb5d0c1f54341cc3deece3c19aa0f82a", "message": "moving into new package", "committedDate": "2020-08-11T15:53:29Z", "type": "commit"}, {"oid": "edd12545e7b825bf23bd6ea41b0f7670aa7511ab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/edd12545e7b825bf23bd6ea41b0f7670aa7511ab", "message": "review comments", "committedDate": "2020-08-11T18:25:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2MTI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468761285", "bodyText": "Since the messages will be deleted in SB once received, we need to ensure there are enough messages to be received by all concurrent threads.\nWe should take into account, the number of parallel threads specified in options here.\nAnd multiply the total messages to send by the number of parallel threads.", "author": "g2vinay", "createdAt": "2020-08-11T17:54:42Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Mono.defer(() -> {\n+            messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5MTA4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468791082", "bodyText": "cleanupAsync shouldn't be required here. This should be used only when you want to do cleanup after each thread finishes execution.\nYou have the globalCleanupAsync below where you're closing the sender.\nThat will get executed after the perf test finishes completely.", "author": "g2vinay", "createdAt": "2020-08-11T18:45:22Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5MTYyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468791622", "bodyText": "Wrap the cleanup logic in Mono.defer and then chain that with super.globalCleanupAsync call.", "author": "g2vinay", "createdAt": "2020-08-11T18:45:54Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5MjM2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468792369", "bodyText": "Call super.globalSetupAsync first and then chain that with setup logic in a mono defer call.", "author": "g2vinay", "createdAt": "2020-08-11T18:46:41Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5MzAxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468793016", "bodyText": "Call super.globalSetupAsync first and then chain that with setup logic in a mono defer call.", "author": "g2vinay", "createdAt": "2020-08-11T18:47:23Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NDU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468794598", "bodyText": "if the messages are deleted after receivng then multiply total messages with number of parallel threads specified here. To ensure enough messages are in SB to be received by all threads.", "author": "g2vinay", "createdAt": "2020-08-11T18:50:25Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Mono.defer(() -> {\n+            messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NDY3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468794675", "bodyText": "cleanupAsync shouldn't be required here. This should be used only when you want to do cleanup after each thread finishes execution.\nYou have the globalCleanupAsync below where you're closing the sender.\nThat will get executed after the perf test finishes.", "author": "g2vinay", "createdAt": "2020-08-11T18:50:34Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Mono.defer(() -> {\n+            messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+\n+            try {\n+                sender.sendBatch(messages);\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+            return Mono.empty();\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .map(iMessages -> {\n+                try {\n+                    for (IMessage message : iMessages) {\n+                        receiver.complete(message.getLockToken());\n+                    }\n+                } catch (InterruptedException | ServiceBusException e) {\n+                    throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                }\n+                return Mono.just(iMessages);\n+            })\n+            .then();\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NDk0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468794940", "bodyText": "Wrap in Mono defer then chain with super.globalCleanupAsync.", "author": "g2vinay", "createdAt": "2020-08-11T18:51:01Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 50;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        return Mono.defer(() -> {\n+            messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+\n+            try {\n+                sender.sendBatch(messages);\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+            return Mono.empty();\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .map(iMessages -> {\n+                try {\n+                    for (IMessage message : iMessages) {\n+                        receiver.complete(message.getLockToken());\n+                    }\n+                } catch (InterruptedException | ServiceBusException e) {\n+                    throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                }\n+                return Mono.just(iMessages);\n+            })\n+            .then();\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    public Mono<Void> globalCleanupAsync() {\n+        try {", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NTc3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468795777", "bodyText": "Either construct this in Semd Message Test COnstructor.\nOR make this static so, multiple threads can refer to same message instance to be sent to SB.\nIf you make this static, then use it as a static reference in your test.", "author": "g2vinay", "createdAt": "2020-08-11T18:52:34Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessageTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(SendMessageTest.class);\n+    private Message message  = null;", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NjQ1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468796451", "bodyText": "Call super.globalSetupAsync first then chain the setup logic.", "author": "g2vinay", "createdAt": "2020-08-11T18:53:50Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessageTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(SendMessageTest.class);\n+    private Message message  = null;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public SendMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5Njc0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468796740", "bodyText": "Either construct this in Semd Message Test COnstructor.\nOR make this static so, multiple threads can refer to same message instance to be sent to SB.\nIf you make this static, then use it as a static reference in your test.", "author": "g2vinay", "createdAt": "2020-08-11T18:54:22Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessagesTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessagesTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(SendMessagesTest.class);\n+    private List<IMessage> messages = new ArrayList<>();", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NzAyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468797027", "bodyText": "same comment for all globalSetupAsync as previous ones.", "author": "g2vinay", "createdAt": "2020-08-11T18:54:52Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessagesTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessagesTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(SendMessagesTest.class);\n+    private List<IMessage> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public SendMessagesTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);", "originalCommit": "a91b815bca42927f333239e4d2db17a40c30b28e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzcxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468837717", "bodyText": "I'm confused. Why are we postfixing this or even getting the size?", "author": "conniey", "createdAt": "2020-08-11T20:14:05Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 100;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .mapToObj(index -> message)\n+            .collect(Collectors.toList());\n+\n+        return Mono.fromFuture(sender.sendBatchAsync(messages));\n+\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        int count = messages.size();", "originalCommit": "edd12545e7b825bf23bd6ea41b0f7670aa7511ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "81391a98064095f1ef212e5702c6b66e8610aedf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/81391a98064095f1ef212e5702c6b66e8610aedf", "message": "Merge branch 'master' into sb-track2-create-performancetest-9919", "committedDate": "2020-08-11T20:14:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODIxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468838218", "bodyText": "Why not use the completeable future, compose it, and then in the last step, bring it into the reactor world?", "author": "conniey", "createdAt": "2020-08-11T20:15:02Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 100;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .mapToObj(index -> message)\n+            .collect(Collectors.toList());\n+\n+        return Mono.fromFuture(sender.sendBatchAsync(messages));\n+\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        int count = messages.size();\n+        for (IMessage message : messages) {\n+            ++count;\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))", "originalCommit": "edd12545e7b825bf23bd6ea41b0f7670aa7511ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODcyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r468838720", "bodyText": "I'm not sure why we are doing busy work here. it doesn't match the sync one either rather than returning messages.count() or returning Mono.empty() instead of constantly using .then()", "author": "conniey", "createdAt": "2020-08-11T20:15:59Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    private List<Message> messages = new ArrayList<>();\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        try {\n+            sender.close();\n+        } catch (ServiceBusException e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        return Mono.empty();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        int totalMessageMultiplier = 100;\n+\n+        String messageId = UUID.randomUUID().toString();\n+        Message message = new Message(CONTENTS);\n+        message.setMessageId(messageId);\n+\n+        messages = IntStream.range(0, options.getMessagesToSend() * totalMessageMultiplier)\n+            .mapToObj(index -> message)\n+            .collect(Collectors.toList());\n+\n+        return Mono.fromFuture(sender.sendBatchAsync(messages));\n+\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+        int count = messages.size();\n+        for (IMessage message : messages) {\n+            ++count;\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+        .map(iMessages -> {\n+            int count = 0;\n+            for (IMessage message : iMessages) {", "originalCommit": "edd12545e7b825bf23bd6ea41b0f7670aa7511ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63991b5aeb6e0acf07bd029b2a327ee4690048e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/63991b5aeb6e0acf07bd029b2a327ee4690048e7", "message": "fixing test", "committedDate": "2020-08-12T00:25:09Z", "type": "commit"}, {"oid": "9cfb3a6b6195e1831ca1f896645473ec17fe6cb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9cfb3a6b6195e1831ca1f896645473ec17fe6cb4", "message": "Merge branch 'master' into sb-track2-create-performancetest-9919", "committedDate": "2020-08-12T15:49:08Z", "type": "commit"}, {"oid": "96a176c23d02a85aae87dba57bdf15956aa86ba7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/96a176c23d02a85aae87dba57bdf15956aa86ba7", "message": " merge master into branch", "committedDate": "2020-08-12T15:53:41Z", "type": "commit"}, {"oid": "1d235c44944043a5b7cb14de2462a3815dc7b26d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d235c44944043a5b7cb14de2462a3815dc7b26d", "message": "Review comments", "committedDate": "2020-08-12T20:55:20Z", "type": "commit"}, {"oid": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "message": "removing excludes", "committedDate": "2020-08-12T21:40:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxNjkyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471716926", "bodyText": "You can combine Completable futures. If the send fails to close, then the receiver won't bother being closed either.", "author": "conniey", "createdAt": "2020-08-17T19:05:53Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync())", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxNzkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471717915", "bodyText": "I'm not sure why you need this? You're just returning the message over and over again. You can do a foreach loop and add them rather than \"mapping to an object\". How do you discern between different messages?", "author": "conniey", "createdAt": "2020-08-17T19:07:48Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync())\n+            .then(Mono.fromFuture(receiver.closeAsync()))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(messageId);\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = IntStream.range(0, total)", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODI0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471718246", "bodyText": "I see you have a client logger but are using system.out,println instead.", "author": "conniey", "createdAt": "2020-08-17T19:08:19Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync())\n+            .then(Mono.fromFuture(receiver.closeAsync()))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(messageId);\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = IntStream.range(0, total)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .map(messages -> {\n+                int count = messages.size();\n+                System.out.println(\" Async received  size of received :\" + count);", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODcyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471718723", "bodyText": "The .handle operator would be more appropriate than just returning messages (because you're not actually mapping anything) and chaining it with .then()", "author": "conniey", "createdAt": "2020-08-17T19:09:10Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync())\n+            .then(Mono.fromFuture(receiver.closeAsync()))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(messageId);\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = IntStream.range(0, total)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .map(messages -> {", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471718802", "bodyText": "Same comment for the each loop.", "author": "conniey", "createdAt": "2020-08-17T19:09:21Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(messageId);\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = IntStream.range(0, total)", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxODk3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471718973", "bodyText": "This will never fire off because it is not subscribed to.", "author": "conniey", "createdAt": "2020-08-17T19:09:42Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(messageId);\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = IntStream.range(0, total)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .map(iMessages -> {\n+                try {\n+                    for (IMessage message : iMessages) {\n+                        receiver.complete(message.getLockToken());", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxOTE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r471719150", "bodyText": "Same comment about composing rather than chaining .then().", "author": "conniey", "createdAt": "2020-08-17T19:10:00Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            String messageId = UUID.randomUUID().toString();\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(messageId);\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = IntStream.range(0, total)\n+                .mapToObj(index -> message)\n+                .collect(Collectors.toList());\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .map(iMessages -> {\n+                try {\n+                    for (IMessage message : iMessages) {\n+                        receiver.complete(message.getLockToken());\n+                    }\n+                } catch (InterruptedException | ServiceBusException e) {\n+                    throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                }\n+                return Mono.just(iMessages);\n+            })\n+            .then();\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync())", "originalCommit": "36e050a40380ca9fb7b4e3b4de21b7975873fc5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5ee9f822646ea6db19a73b997bdf3c85506a11b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5ee9f822646ea6db19a73b997bdf3c85506a11b", "message": "Review comments incorporated", "committedDate": "2020-08-18T19:26:09Z", "type": "commit"}, {"oid": "45af5ff751e4192242ac402dd7b6eca2889c1047", "url": "https://github.com/Azure/azure-sdk-for-java/commit/45af5ff751e4192242ac402dd7b6eca2889c1047", "message": " merged master into branch", "committedDate": "2020-08-18T19:28:33Z", "type": "commit"}, {"oid": "be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "message": " merged master into branch", "committedDate": "2020-08-18T22:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NzE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r472577147", "bodyText": "What I was thinking of was: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#allOf-java.util.concurrent.CompletableFuture...-", "author": "conniey", "createdAt": "2020-08-19T01:09:24Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync().thenCombine(receiver.closeAsync(), (aVoid, aVoid2) -> true))", "originalCommit": "be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3Nzc0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r472577742", "bodyText": "Remove this extra statement. Fix spacing in sentence.", "author": "conniey", "createdAt": "2020-08-19T01:11:36Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync().thenCombine(receiver.closeAsync(), (aVoid, aVoid2) -> true))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .handle((messages, synchronousSink) -> {\n+                int count = messages.size();\n+                logger.verbose(\" Async received  size of received :\" + count);\n+                System.out.println(\"Async received  size of received :\" + count);", "originalCommit": "be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NzgzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r472577839", "bodyText": "you would use sink.error", "author": "conniey", "createdAt": "2020-08-19T01:11:55Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync().thenCombine(receiver.closeAsync(), (aVoid, aVoid2) -> true))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .handle((messages, synchronousSink) -> {\n+                int count = messages.size();\n+                logger.verbose(\" Async received  size of received :\" + count);\n+                System.out.println(\"Async received  size of received :\" + count);\n+\n+                if (count <= 0) {\n+                    throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));", "originalCommit": "be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3ODI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r472578299", "bodyText": "If the future fails, the global cleanup will not run... Why not Mono.when() same with other instances.", "author": "conniey", "createdAt": "2020-08-19T01:13:38Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenAccept(iMessages -> {\n+                try {\n+                    for (IMessage message : iMessages) {\n+                        receiver.completeAsync(message.getLockToken()).get();\n+                    }\n+                } catch (InterruptedException | ExecutionException e) {\n+                    throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                }\n+            }));\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(sender.closeAsync().thenCombine(receiver.closeAsync(), (aVoid, aVoid2) -> true))", "originalCommit": "be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3ODM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r472578388", "bodyText": "You can combine multiple completeable futures.", "author": "conniey", "createdAt": "2020-08-19T01:14:00Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenAccept(iMessages -> {\n+                try {\n+                    for (IMessage message : iMessages) {\n+                        receiver.completeAsync(message.getLockToken()).get();", "originalCommit": "be8f20e6091e096be0ad76d1d48f41ad45a5f41e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19a3e5fd3a9017ba5347d639a63b426eb1496880", "url": "https://github.com/Azure/azure-sdk-for-java/commit/19a3e5fd3a9017ba5347d639a63b426eb1496880", "message": "Review comment", "committedDate": "2020-08-19T07:38:55Z", "type": "commit"}, {"oid": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32b4561864ac7af7c1164cf6ff9c809d7bcad116", "message": "Merge master into branch", "committedDate": "2020-08-19T07:42:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1MjE2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473052161", "bodyText": "Why are we not checking the received msg count being > 0 here like other places ?", "author": "g2vinay", "createdAt": "2020-08-19T14:00:36Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVE_AND_DELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<ServiceBusMessage> messages = new ArrayList<>();\n+            for (int i = 0; i< total; ++i) {\n+                ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return senderAsync.sendMessages(messages);\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        IterableStream<ServiceBusReceivedMessageContext> messages = receiver\n+            .receiveMessages(options.getMessagesToReceive());\n+        if (messages.stream().count() <= 0) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return receiverAsync\n+            .receiveMessages()\n+            .map(messageContext -> {\n+                return messageContext;", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NjAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473466018", "bodyText": "Is Mono.defer what you intended to use it for? For each new subscriber, it'll supply another mono.", "author": "conniey", "createdAt": "2020-08-20T00:18:45Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.when(Mono.fromFuture(CompletableFuture.allOf(sender.closeAsync(), receiver.closeAsync())))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NzY4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474197683", "bodyText": "It is only called once for whole performance test. There is only one subscriber for duration of test.", "author": "hemanttanwar", "createdAt": "2020-08-20T18:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NjAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDIwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474240206", "bodyText": "Why not use Mono.fromCallable then? Mono.defer implies that you expect each downstream to get a new Mono.", "author": "conniey", "createdAt": "2020-08-20T20:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NjAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NjU5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473466599", "bodyText": "You need to format this document, there are two spaces here.", "author": "conniey", "createdAt": "2020-08-20T00:19:43Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.when(Mono.fromFuture(CompletableFuture.allOf(sender.closeAsync(), receiver.closeAsync())))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2Njk1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473466956", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.verbose(\" Async received  size of received :\" + count);\n          \n          \n            \n                            logger.verbose(\"Async received size of received: {}\", count);", "author": "conniey", "createdAt": "2020-08-20T00:20:12Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.when(Mono.fromFuture(CompletableFuture.allOf(sender.closeAsync(), receiver.closeAsync())))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .handle((messages, synchronousSink) -> {\n+                int count = messages.size();\n+                logger.verbose(\" Async received  size of received :\" + count);", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NzUxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473467512", "bodyText": "You should use placeholders {} for logging in slf4j, so it's not evaluated if the log level isn't set.", "author": "conniey", "createdAt": "2020-08-20T00:21:04Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.when(Mono.fromFuture(CompletableFuture.allOf(sender.closeAsync(), receiver.closeAsync())))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+            if (messages.size() <= 0) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+            }\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive()))\n+            .handle((messages, synchronousSink) -> {\n+                int count = messages.size();\n+                logger.verbose(\" Async received  size of received :\" + count);\n+", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2ODEwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473468107", "bodyText": "Similarly, do you intend to use Mono.defer and provide a new Mono for each downstream subscriber?", "author": "conniey", "createdAt": "2020-08-20T00:21:53Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTA3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474199073", "bodyText": "There is only one subscriber for duration of test.", "author": "hemanttanwar", "createdAt": "2020-08-20T18:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2ODEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDg3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474240873", "bodyText": "Yes. Why not use another operator like Mono.fromCallable? The implementation of this method implies that you expect each downstream subscriber to invoke another mono.", "author": "conniey", "createdAt": "2020-08-20T20:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2ODEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2OTEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473469129", "bodyText": "This has a running time of 2n because you go through the list to get the complete operation and then create another list. You could do it in a single iteration, i believe.", "author": "conniey", "createdAt": "2020-08-20T00:23:38Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenAccept(iMessages -> {\n+                List<CompletableFuture<Void>> completeMessagesList = new ArrayList<>();\n+                for (IMessage message : iMessages) {", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2OTMwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r473469305", "bodyText": "is this ever returned?", "author": "conniey", "createdAt": "2020-08-20T00:23:53Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenAccept(iMessages -> {\n+                List<CompletableFuture<Void>> completeMessagesList = new ArrayList<>();\n+                for (IMessage message : iMessages) {\n+                    completeMessagesList.add(receiver.completeAsync(message.getLockToken()));\n+                }\n+\n+                CompletableFuture.allOf(completeMessagesList.toArray(new CompletableFuture<?>[0]))", "originalCommit": "32b4561864ac7af7c1164cf6ff9c809d7bcad116", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c5fdd4b4a6532bcc8ccf9ac95a348f0ba5f1400", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c5fdd4b4a6532bcc8ccf9ac95a348f0ba5f1400", "message": "REview comments", "committedDate": "2020-08-20T19:39:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MTQ3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474241470", "bodyText": "Why not use thenCompose versus thenAccept? You're putting a blocking method call inside an async method.", "author": "conniey", "createdAt": "2020-08-20T20:03:26Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenAccept(iMessages -> {\n+                List<CompletableFuture<Void>> completeMessagesList = new ArrayList<>();\n+                for (IMessage message : iMessages) {\n+                    completeMessagesList.add(receiver.completeAsync(message.getLockToken()));\n+                }\n+\n+                try {\n+                    final int size =  completeMessagesList.size();\n+                    CompletableFuture.allOf(completeMessagesList.toArray(new CompletableFuture<?>[size])).get();", "originalCommit": "2c5fdd4b4a6532bcc8ccf9ac95a348f0ba5f1400", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MTY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474241693", "bodyText": "Why do you need Mono.when? There's only one item.", "author": "conniey", "createdAt": "2020-08-20T20:03:56Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenAccept(iMessages -> {\n+                List<CompletableFuture<Void>> completeMessagesList = new ArrayList<>();\n+                for (IMessage message : iMessages) {\n+                    completeMessagesList.add(receiver.completeAsync(message.getLockToken()));\n+                }\n+\n+                try {\n+                    final int size =  completeMessagesList.size();\n+                    CompletableFuture.allOf(completeMessagesList.toArray(new CompletableFuture<?>[size])).get();\n+                } catch (InterruptedException | ExecutionException e) {\n+                    throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                }\n+            }));\n+    }\n+\n+    /**\n+     * Runs the cleanup logic after the performance test finishes.\n+     * @return An empty {@link Mono}\n+     */\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.when(Mono.fromFuture(CompletableFuture.allOf(sender.closeAsync(), receiver.closeAsync())))", "originalCommit": "2c5fdd4b4a6532bcc8ccf9ac95a348f0ba5f1400", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "271395a50083e5a70f1011ad63813aa30cd7cea5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/271395a50083e5a70f1011ad63813aa30cd7cea5", "message": "REview Comment", "committedDate": "2020-08-20T22:10:26Z", "type": "commit"}, {"oid": "6181d38def44b2adb7fcec6da9474bd79f287d50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6181d38def44b2adb7fcec6da9474bd79f287d50", "message": "Review coemment", "committedDate": "2020-08-21T06:33:46Z", "type": "commit"}, {"oid": "bf042c195856f4d041d5641071a2189beac26dcc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf042c195856f4d041d5641071a2189beac26dcc", "message": "Incorporated review comments", "committedDate": "2020-08-21T23:29:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMDMyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r474930320", "bodyText": "Format document. There are two spaces here.", "author": "conniey", "createdAt": "2020-08-21T20:15:16Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return Mono.fromFuture(sender.sendBatchAsync(messages));\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {", "originalCommit": "6181d38def44b2adb7fcec6da9474bd79f287d50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475369204", "bodyText": "This still has a blocking call in an async method. Here's what I was thinking of. Usually, you want to push the blocking synchronous call as late as possible. There are probably ,other instances of this blocking call in the perf track 1 tests. I didn't check for other instances.\n    private Mono<Void> sendMessage() {\n        int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n\n        List<Message> messages = new ArrayList<>();\n        for (int i = 0; i < total; ++i) {\n            Message message = new Message(CONTENTS);\n            message.setMessageId(UUID.randomUUID().toString());\n            messages.add(message);\n        }\n\n        return Mono.fromFuture(sender.sendBatchAsync(messages));\n    }", "author": "conniey", "createdAt": "2020-08-24T06:30:11Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVEANDDELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return Mono.fromFuture(CompletableFuture.allOf(sender.closeAsync(), receiver.closeAsync()))\n+            .then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.fromCallable(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+\n+            return sender.sendBatchAsync(messages).get();", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MDExMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475370113", "bodyText": "Have you tried .thenComposeAsync?", "author": "conniey", "createdAt": "2020-08-24T06:32:50Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.messaging.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        return Mono.fromCallable(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<Message> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                Message message = new Message(CONTENTS);\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return sender.sendBatchAsync(messages).get();\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages = null;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch  (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        CompletableFuture<Void> completeTask = CompletableFuture.runAsync(() -> { });\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenCompose(iMessages -> {", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MDY3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475370679", "bodyText": "Why '-mr\" and \"-ms\"? vs \"-r\" \"--receive\" and \"-s\", \"--send\"? It's a lot of characters to type.", "author": "conniey", "createdAt": "2020-08-24T06:34:11Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/core/ServiceBusStressOptions.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.beust.jcommander.Parameter;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+/**\n+ * Represents the command line configurable options for a performance test.\n+ */\n+@JsonPropertyOrder(alphabetic = true)\n+public class ServiceBusStressOptions extends PerfStressOptions {\n+\n+    @Parameter(names = { \"-mr\", \"--maxReceive\" }, description = \"MaxReceive messages\")", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNDM2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476204361", "bodyText": "Good suggestion but we have a conflict. The parent class of test framework uses -s, we can use it here\n@Parameter(names = { \"-s\", \"--size\" }, description = \"Size of payload (in bytes)\")\nWe could probably use -r but to keep symmetry, between send and receive, I think we have to  -mr and -ms .", "author": "hemanttanwar", "createdAt": "2020-08-25T06:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MDY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MDg3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475370874", "bodyText": "Does this need to be protected? I thought they lived in the same package", "author": "conniey", "createdAt": "2020-08-24T06:34:45Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected static final String CONTENTS = \"T1-Perf Test\";", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxMDg4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476210882", "bodyText": "This is used by four child classes of ServiceTest, Thus it need to be protected.", "author": "hemanttanwar", "createdAt": "2020-08-25T06:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MDg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MTEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475371132", "bodyText": "Does this need to be protected vs package private?", "author": "conniey", "createdAt": "2020-08-24T06:35:23Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected static final String CONTENTS = \"T1-Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private final MessagingFactory factory;\n+\n+    protected IMessageSender sender;", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNDA0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476214044", "bodyText": "The child classes are in separate package com.microsoft.azure.messaging.servicebus.perf, Thus I had to use protected.", "author": "hemanttanwar", "createdAt": "2020-08-25T06:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MTEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MTM0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475371348", "bodyText": "Use logger.", "author": "conniey", "createdAt": "2020-08-24T06:36:02Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected static final String CONTENTS = \"T1-Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private final MessagingFactory factory;\n+\n+    protected IMessageSender sender;\n+    protected IMessageReceiver receiver;\n+\n+    /**\n+     *\n+     * @param options to configure.\n+     * @param receiveMode to receive messages.\n+     * @throws IllegalArgumentException for environment variable not being available.\n+     */\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            throw new IllegalArgumentException(\"Environment variable \" + AZURE_SERVICE_BUS_CONNECTION_STRING", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MTM4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475371386", "bodyText": "Use logger.", "author": "conniey", "createdAt": "2020-08-24T06:36:06Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.microsoft.azure.servicebus.ClientFactory;\n+import com.microsoft.azure.servicebus.IMessageReceiver;\n+import com.microsoft.azure.servicebus.IMessageSender;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.MessagingFactory;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    protected static final String CONTENTS = \"T1-Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private final MessagingFactory factory;\n+\n+    protected IMessageSender sender;\n+    protected IMessageReceiver receiver;\n+\n+    /**\n+     *\n+     * @param options to configure.\n+     * @param receiveMode to receive messages.\n+     * @throws IllegalArgumentException for environment variable not being available.\n+     */\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            throw new IllegalArgumentException(\"Environment variable \" + AZURE_SERVICE_BUS_CONNECTION_STRING\n+                + \" must be set\");\n+        }\n+        logger.verbose(\"connectionString : {}\", connectionString);\n+\n+        String queueName = System.getenv(AZURE_SERVICEBUS_QUEUE_NAME);\n+        if (CoreUtils.isNullOrEmpty(queueName)) {\n+            throw new IllegalArgumentException(\"Environment variable \" + AZURE_SERVICEBUS_QUEUE_NAME + \" must be set\");", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MTczNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475371735", "bodyText": "This package name is incorrect, it should be com.microsoft.servicebus.perf? messaging is a track 2 idea.", "author": "conniey", "createdAt": "2020-08-24T06:37:06Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/messaging/servicebus/perf/SendMessagesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.messaging.servicebus.perf;", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MjI2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475372266", "bodyText": "Why is the map here versus moving the take upwards take then map? Vinay's message also applies.", "author": "conniey", "createdAt": "2020-08-24T06:38:39Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndDeleteMessageTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndDeleteMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndDeleteMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndDeleteMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.RECEIVE_AND_DELETE);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<ServiceBusMessage> messages = new ArrayList<>();\n+            for (int i = 0; i< total; ++i) {\n+                ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return senderAsync.sendMessages(messages);\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        IterableStream<ServiceBusReceivedMessageContext> messages = receiver\n+            .receiveMessages(options.getMessagesToReceive());\n+        if (messages.stream().count() <= 0) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return receiverAsync\n+            .receiveMessages()\n+            .map(messageContext -> {\n+                return messageContext;", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MjYwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475372609", "bodyText": "If there are no messages that are received, this will still pass. you should validate the number of messages.", "author": "conniey", "createdAt": "2020-08-24T06:39:31Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<ServiceBusMessage> messages = new ArrayList<>();\n+            for (int i = 0; i< total; ++i) {\n+                ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return senderAsync.sendMessages(messages);\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        IterableStream<ServiceBusReceivedMessageContext> messages = receiver\n+            .receiveMessages(options.getMessagesToReceive());\n+        for (ServiceBusReceivedMessageContext messageContext : messages) {", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3Mjg2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475372869", "bodyText": "Why are you blocking here? this should be async throughout.", "author": "conniey", "createdAt": "2020-08-24T06:40:18Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<ServiceBusMessage> messages = new ArrayList<>();\n+            for (int i = 0; i< total; ++i) {\n+                ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return senderAsync.sendMessages(messages);\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        IterableStream<ServiceBusReceivedMessageContext> messages = receiver\n+            .receiveMessages(options.getMessagesToReceive());\n+        for (ServiceBusReceivedMessageContext messageContext : messages) {\n+            receiver.complete(messageContext.getMessage().getLockToken());\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return receiverAsync\n+            .receiveMessages()\n+            .take(options.getMessagesToReceive())\n+            .map(messageContext -> {\n+                receiverAsync.complete(messageContext.getMessage().getLockToken()).block();", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MzAwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475373004", "bodyText": "Send message is already a mono,void. you don't need .then()", "author": "conniey", "createdAt": "2020-08-24T06:40:39Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessageTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public SendMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync();\n+    }\n+\n+    @Override\n+    public void run() {\n+        sender.sendMessage(message);\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return senderAsync.sendMessage(message).then();", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MzA2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475373063", "bodyText": "use logger.", "author": "conniey", "createdAt": "2020-08-24T06:40:49Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    protected static final Duration TIMEOUT = Duration.ofSeconds(60);\n+    protected static final AmqpRetryOptions RETRY_OPTIONS = new AmqpRetryOptions().setTryTimeout(TIMEOUT);\n+    protected static final String CONTENTS = \"Track 2 AMQP message - Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    private static final String AZURE_SERVICEBUS_TOPIC_NAME = \"AZURE_SERVICEBUS_TOPIC_NAME\";\n+    private static final String AZURE_SERVICEBUS_SUBSCRIPTION_NAME = \"AZURE_SERVICEBUS_SUBSCRIPTION_NAME\";\n+\n+    protected final ServiceBusReceiverClient receiver;\n+    protected final ServiceBusReceiverAsyncClient receiverAsync;\n+    protected final ServiceBusSenderClient sender;\n+    protected final ServiceBusSenderAsyncClient senderAsync;\n+\n+    /**\n+     *\n+     * @param options to configure.\n+     * @param receiveMode to receive messages.\n+     * @throws IllegalArgumentException if environment variable not being available.\n+     */\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            throw new IllegalArgumentException(\"Environment variable \" + AZURE_SERVICE_BUS_CONNECTION_STRING", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM3MzExNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r475373117", "bodyText": "use logger.", "author": "conniey", "createdAt": "2020-08-24T06:41:00Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    protected static final Duration TIMEOUT = Duration.ofSeconds(60);\n+    protected static final AmqpRetryOptions RETRY_OPTIONS = new AmqpRetryOptions().setTryTimeout(TIMEOUT);\n+    protected static final String CONTENTS = \"Track 2 AMQP message - Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    private static final String AZURE_SERVICEBUS_TOPIC_NAME = \"AZURE_SERVICEBUS_TOPIC_NAME\";\n+    private static final String AZURE_SERVICEBUS_SUBSCRIPTION_NAME = \"AZURE_SERVICEBUS_SUBSCRIPTION_NAME\";\n+\n+    protected final ServiceBusReceiverClient receiver;\n+    protected final ServiceBusReceiverAsyncClient receiverAsync;\n+    protected final ServiceBusSenderClient sender;\n+    protected final ServiceBusSenderAsyncClient senderAsync;\n+\n+    /**\n+     *\n+     * @param options to configure.\n+     * @param receiveMode to receive messages.\n+     * @throws IllegalArgumentException if environment variable not being available.\n+     */\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            throw new IllegalArgumentException(\"Environment variable \" + AZURE_SERVICE_BUS_CONNECTION_STRING\n+                + \" must be set\");\n+        }\n+\n+        String queueName = System.getenv(AZURE_SERVICEBUS_QUEUE_NAME);\n+        if (CoreUtils.isNullOrEmpty(queueName)) {\n+            throw new IllegalArgumentException(\"Environment variable \" + AZURE_SERVICEBUS_QUEUE_NAME + \" must be set\");", "originalCommit": "bf042c195856f4d041d5641071a2189beac26dcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cfde9a1167e3356479794b02ac6566472fd58977", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfde9a1167e3356479794b02ac6566472fd58977", "message": "Review Comments", "committedDate": "2020-08-25T07:40:05Z", "type": "commit"}, {"oid": "b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "message": "Version update", "committedDate": "2020-08-25T15:57:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTU5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476585594", "bodyText": "I think this statement is the same as ReceiveAndDeleteMessageTest.class?", "author": "YijunXieMS", "createdAt": "2020-08-25T16:37:50Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/servicebus/perf/App.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.servicebus.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+/**\n+ * Runs the Storage performance test.\n+ *\n+ * <p>To run from command line. Package the project into a jar with dependencies via mvn clean package.\n+ * Then run the program via java -jar 'compiled-jar-with-dependencies-path' </p>\n+ *\n+ * <p> To run from IDE, set all the required environment variables in IntelliJ via Run -&gt; EditConfigurations\n+ * section.\n+ * Then run the App's main method via IDE.</p>\n+ */\n+public class App {\n+\n+    /**\n+     *  main function.\n+     * @param args args\n+     * @throws RuntimeException If not able to load test classes.\n+     */\n+    public static void main(String[] args) {\n+        Class<?>[] testClasses;\n+\n+        try {\n+            testClasses = new Class<?>[]{\n+                Class.forName(ReceiveAndDeleteMessageTest.class.getName()),", "originalCommit": "b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODE3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476588171", "bodyText": "ServiceBus", "author": "YijunXieMS", "createdAt": "2020-08-25T16:42:03Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/servicebus/perf/App.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.servicebus.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+/**\n+ * Runs the Storage performance test.", "originalCommit": "b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NjM5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476586390", "bodyText": "@g2vinay can we update the guides and all uses of this just to use .class?\nPerfStressProgram.run(new Class<?>[] {\n  ReceiveAndDeleteMessageTest.class,\n  ReceiveAndLockMessageTest.class,\n  SendMessageTest.class,\n  SendMessagesTest.class\n}, args);\nThere should be no need to get the Class by name as it is already within the scope of the project using it.", "author": "alzimmermsft", "createdAt": "2020-08-25T16:39:10Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/servicebus/perf/App.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.servicebus.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+/**\n+ * Runs the Storage performance test.\n+ *\n+ * <p>To run from command line. Package the project into a jar with dependencies via mvn clean package.\n+ * Then run the program via java -jar 'compiled-jar-with-dependencies-path' </p>\n+ *\n+ * <p> To run from IDE, set all the required environment variables in IntelliJ via Run -&gt; EditConfigurations\n+ * section.\n+ * Then run the App's main method via IDE.</p>\n+ */\n+public class App {\n+\n+    /**\n+     *  main function.\n+     * @param args args\n+     * @throws RuntimeException If not able to load test classes.\n+     */\n+    public static void main(String[] args) {\n+        Class<?>[] testClasses;\n+\n+        try {\n+            testClasses = new Class<?>[]{\n+                Class.forName(ReceiveAndDeleteMessageTest.class.getName()),\n+                Class.forName(ReceiveAndLockMessageTest.class.getName()),\n+                Class.forName(SendMessageTest.class.getName()),\n+                Class.forName(SendMessagesTest.class.getName())\n+            };", "originalCommit": "b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NTcyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476595723", "bodyText": "I think so. I happened to have the same comment 4 lines above.", "author": "YijunXieMS", "createdAt": "2020-08-25T16:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NjM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODI4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476588288", "bodyText": "Same comment about using .class instead of getting it from its name.", "author": "alzimmermsft", "createdAt": "2020-08-25T16:42:15Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/App.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+/**\n+ * Runs the Storage performance test.\n+ *\n+ * <p>To run from command line. Package the project into a jar with dependencies via mvn clean package.\n+ * Then run the program via java -jar 'compiled-jar-with-dependencies-path' </p>\n+ *\n+ * <p> To run from IDE, set all the required environment variables in IntelliJ via Run -&gt; EditConfigurations\n+ * section.\n+ * Then run the App's main method via IDE.</p>\n+ */\n+public class App {\n+\n+    /**\n+     *  main function.\n+     * @param args args\n+     * @throws RuntimeException If not able to load test classes.\n+     */\n+    public static void main(String[] args) {\n+        Class<?>[] testClasses = null;\n+\n+        try {\n+            testClasses = new Class<?>[]{", "originalCommit": "b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MTk5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r476591995", "bodyText": "ServiceBus", "author": "YijunXieMS", "createdAt": "2020-08-25T16:48:18Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/App.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+\n+/**\n+ * Runs the Storage performance test.", "originalCommit": "b43ee2a75a6571586b1089d7ecb4b2da0cf2bd5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b548ac0256dfc1dd35eb59c5709680d2cdfc6d54", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b548ac0256dfc1dd35eb59c5709680d2cdfc6d54", "message": "Merge master into branch", "committedDate": "2020-08-26T00:26:07Z", "type": "commit"}, {"oid": "4f2c53c1fcc86226a2e4e4bad914a67e9129d645", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f2c53c1fcc86226a2e4e4bad914a67e9129d645", "message": "Review comments", "committedDate": "2020-08-26T18:30:57Z", "type": "commit"}, {"oid": "2bd8b28198db27d7f6e1020aedf8ea1469720028", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bd8b28198db27d7f6e1020aedf8ea1469720028", "message": "fix groupid change", "committedDate": "2020-08-26T18:49:46Z", "type": "commit"}, {"oid": "1897355c5c1b9648ea8487187c3aff743b56fe20", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1897355c5c1b9648ea8487187c3aff743b56fe20", "message": "fix groupid change", "committedDate": "2020-08-26T18:57:38Z", "type": "commit"}, {"oid": "970c9643e0377b7cec598c85887d2aee038e1ff3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/970c9643e0377b7cec598c85887d2aee038e1ff3", "message": "fix ci.yml", "committedDate": "2020-08-26T19:12:42Z", "type": "commit"}, {"oid": "151457730c97078bac34c4d0c529eb08f55296b2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/151457730c97078bac34c4d0c529eb08f55296b2", "message": "Merge branch 'master' into sb-track2-create-performancetest-9919", "committedDate": "2020-08-27T09:29:11Z", "type": "commit"}, {"oid": "648763e3ee1ae93276ba2e9d9bbbc2411167594d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/648763e3ee1ae93276ba2e9d9bbbc2411167594d", "message": "changing groupid back", "committedDate": "2020-08-27T22:07:05Z", "type": "commit"}, {"oid": "8e48e6b71e14cdfb965ffdf688e5b9ceaffe36ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e48e6b71e14cdfb965ffdf688e5b9ceaffe36ad", "message": "updating version txt", "committedDate": "2020-08-27T23:06:20Z", "type": "commit"}, {"oid": "25a459e085f6e6bb4a8a35150b616d5562d36f02", "url": "https://github.com/Azure/azure-sdk-for-java/commit/25a459e085f6e6bb4a8a35150b616d5562d36f02", "message": "updating version txt", "committedDate": "2020-08-27T23:09:55Z", "type": "commit"}, {"oid": "d37f31a5da15594a47270490223f9b53775a0605", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d37f31a5da15594a47270490223f9b53775a0605", "message": "updating version txt", "committedDate": "2020-08-27T23:32:56Z", "type": "commit"}, {"oid": "610d8e2c701aadfb2bf7c529f4ae90df9c12e7e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/610d8e2c701aadfb2bf7c529f4ae90df9c12e7e6", "message": "Fix checkstyle error", "committedDate": "2020-08-28T04:16:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5NDk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r479294974", "bodyText": "This is a danging async operation. It won't wait until it is complete. Can you check other instances of this.", "author": "conniey", "createdAt": "2020-08-28T13:34:40Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+        List<Message> messages = new ArrayList<>();\n+        for (int i = 0; i < total; ++i) {\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(UUID.randomUUID().toString());\n+            messages.add(message);\n+        }\n+        return Mono.fromFuture(sender.sendBatchAsync(messages));\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        CompletableFuture<Void> completeTask = CompletableFuture.runAsync(() -> {\n+        });\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenComposeAsync(iMessages -> {\n+                for (IMessage message : iMessages) {\n+                    completeTask.thenComposeAsync(ignore -> receiver.completeAsync(message.getLockToken()));", "originalCommit": "610d8e2c701aadfb2bf7c529f4ae90df9c12e7e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5NzIwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r479297208", "bodyText": "IIRC, there will be no item emitted. MonoVoid returns an empty? Does this pass for you?", "author": "conniey", "createdAt": "2020-08-28T13:36:58Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<ServiceBusMessage> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+                message.setMessageId(UUID.randomUUID().toString());\n+                messages.add(message);\n+            }\n+            return senderAsync.sendMessages(messages);\n+        });\n+    }\n+\n+    @Override\n+    public void run() {\n+        IterableStream<ServiceBusReceivedMessageContext> messages = receiver\n+            .receiveMessages(options.getMessagesToReceive());\n+\n+        int count = 0;\n+        for (ServiceBusReceivedMessageContext messageContext : messages) {\n+            receiver.complete(messageContext.getMessage().getLockToken());\n+            ++count;\n+        }\n+\n+        if (count <= 0) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(\"Error. Should have received some messages.\"));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return receiverAsync\n+            .receiveMessages()\n+            .take(options.getMessagesToReceive())\n+            .map(messageContext -> receiverAsync.complete(messageContext.getMessage().getLockToken()))", "originalCommit": "610d8e2c701aadfb2bf7c529f4ae90df9c12e7e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5ODYyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r479298626", "bodyText": "you need to throw these errors.", "author": "conniey", "createdAt": "2020-08-28T13:38:34Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    protected static final Duration TIMEOUT = Duration.ofSeconds(60);\n+    protected static final AmqpRetryOptions RETRY_OPTIONS = new AmqpRetryOptions().setTryTimeout(TIMEOUT);\n+    protected static final String CONTENTS = \"Track 2 AMQP message - Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    private static final String AZURE_SERVICEBUS_TOPIC_NAME = \"AZURE_SERVICEBUS_TOPIC_NAME\";\n+    private static final String AZURE_SERVICEBUS_SUBSCRIPTION_NAME = \"AZURE_SERVICEBUS_SUBSCRIPTION_NAME\";\n+\n+    protected final ServiceBusReceiverClient receiver;\n+    protected final ServiceBusReceiverAsyncClient receiverAsync;\n+    protected final ServiceBusSenderClient sender;\n+    protected final ServiceBusSenderAsyncClient senderAsync;\n+\n+    /**\n+     *\n+     * @param options to configure.\n+     * @param receiveMode to receive messages.\n+     * @throws IllegalArgumentException if environment variable not being available.\n+     */\n+    public ServiceTest(TOptions options, ReceiveMode receiveMode) {\n+        super(options);\n+        String connectionString = System.getenv(AZURE_SERVICE_BUS_CONNECTION_STRING);\n+        if (CoreUtils.isNullOrEmpty(connectionString)) {\n+            logger.logExceptionAsError(new IllegalArgumentException(\"Environment variable \"\n+                + AZURE_SERVICE_BUS_CONNECTION_STRING + \" must be set.\"));\n+        }\n+\n+        String queueName = System.getenv(AZURE_SERVICEBUS_QUEUE_NAME);\n+        if (CoreUtils.isNullOrEmpty(queueName)) {\n+            logger.logExceptionAsError(new IllegalArgumentException(\"Environment variable \"", "originalCommit": "610d8e2c701aadfb2bf7c529f4ae90df9c12e7e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "338b6e3cfb8734854cd215f9916e8568f6cdfc8a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/338b6e3cfb8734854cd215f9916e8568f6cdfc8a", "message": "incorporate review comments", "committedDate": "2020-08-28T16:59:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNTU2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r483315568", "bodyText": "we shouldn't create our async threads here using CompletableFutures.\nThe whole block should execute synchronously in the logic within runAsync.", "author": "g2vinay", "createdAt": "2020-09-04T00:05:54Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+        List<Message> messages = new ArrayList<>();\n+        for (int i = 0; i < total; ++i) {\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(UUID.randomUUID().toString());\n+            messages.add(message);\n+        }\n+        return Mono.fromFuture(sender.sendBatchAsync(messages));\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        CompletableFuture<Void> completeTask = CompletableFuture.runAsync(() -> {\n+        });\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenComposeAsync(iMessages -> {\n+                for (IMessage message : iMessages) {\n+                    completeTask.thenComposeAsync(ignore -> receiver.completeAsync(message.getLockToken()));", "originalCommit": "610d8e2c701aadfb2bf7c529f4ae90df9c12e7e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NzU0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r483677549", "bodyText": "The complete operation is asynchronous because it has to make a network call. The problem here is that we're not chaining downstream operators correctly.", "author": "conniey", "createdAt": "2020-09-04T15:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNTU2OA=="}], "type": "inlineReview"}, {"oid": "2a24ec53dfa32aed5c8d97ce5c8f059323139e59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a24ec53dfa32aed5c8d97ce5c8f059323139e59", "message": "Continue test", "committedDate": "2020-09-18T22:25:34Z", "type": "commit"}, {"oid": "31c4c9607c7b5d28da0448291d99e93c13fe1a6e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31c4c9607c7b5d28da0448291d99e93c13fe1a6e", "message": "merge master into branch and fix test", "committedDate": "2020-09-21T22:00:56Z", "type": "commit"}, {"oid": "694afff0908c0970c643a6651504982d8754904d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/694afff0908c0970c643a6651504982d8754904d", "message": "updating pom version", "committedDate": "2020-09-21T22:11:10Z", "type": "commit"}, {"oid": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e5d6b6d25b7f1117dd1e2437a70283583ac12877", "message": "Adding entry into version txt", "committedDate": "2020-09-21T22:51:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNjc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496336784", "bodyText": "This is wrong... you can use allOf:\nCompletableFuture.allOf(iMessages.stream().select(x -> receiver.completeAsync(x.getLockToken()).collect(ToArray());", "author": "conniey", "createdAt": "2020-09-29T02:09:32Z", "path": "sdk/servicebus/azure-messaging-servicebus-track1-perf/src/main/java/com/microsoft/azure/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.servicebus.perf;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.microsoft.azure.servicebus.perf.core.ServiceBusStressOptions;\n+import com.microsoft.azure.servicebus.perf.core.ServiceTest;\n+import com.microsoft.azure.servicebus.IMessage;\n+import com.microsoft.azure.servicebus.Message;\n+import com.microsoft.azure.servicebus.ReceiveMode;\n+import com.microsoft.azure.servicebus.primitives.ServiceBusException;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEKLOCK);\n+        this.options = options;\n+    }\n+\n+    private Mono<Void> sendMessage() {\n+        int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+        List<Message> messages = new ArrayList<>();\n+        for (int i = 0; i < total; ++i) {\n+            Message message = new Message(CONTENTS);\n+            message.setMessageId(UUID.randomUUID().toString());\n+            messages.add(message);\n+        }\n+        return Mono.fromFuture(sender.sendBatchAsync(messages));\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return super.globalSetupAsync()\n+            .then(sendMessage());\n+    }\n+\n+    @Override\n+    public void run() {\n+        Collection<IMessage> messages;\n+        try {\n+            messages = receiver.receiveBatch(options.getMessagesToReceive());\n+        } catch (Exception e) {\n+            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+        }\n+\n+        for (IMessage message : messages) {\n+            try {\n+                receiver.complete(message.getLockToken());\n+            } catch (InterruptedException | ServiceBusException e) {\n+                throw logger.logExceptionAsWarning(new RuntimeException(e));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return Mono.fromFuture(receiver.receiveBatchAsync(options.getMessagesToReceive())\n+            .thenComposeAsync(iMessages -> {\n+                CompletableFuture<Void> completeTask = CompletableFuture.runAsync(() -> { });\n+                for (IMessage message : iMessages) {", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNzM0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496337342", "bodyText": "Why are we doing (i + 1) + \"\"?", "author": "conniey", "createdAt": "2020-09-29T02:11:39Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/ReceiveAndLockMessageTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Performance test.\n+ */\n+public class ReceiveAndLockMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ClientLogger logger = new ClientLogger(ReceiveAndLockMessageTest.class);\n+    private final ServiceBusStressOptions options;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public ReceiveAndLockMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        // Since test does warm up and test many times, we are sending many messages, so we will have them available.\n+        return Mono.defer(() -> {\n+            int total = options.getParallel() * options.getMessagesToSend() * TOTAL_MESSAGE_MULTIPLIER;\n+            List<ServiceBusMessage> messages = new ArrayList<>();\n+            for (int i = 0; i < total; ++i) {\n+                ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+                message.setMessageId((i + 1) + \"\");", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNzYxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496337615", "bodyText": "Do you need to override this? you just call into the base.", "author": "conniey", "createdAt": "2020-09-29T02:12:49Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessagesTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessagesTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final List<ServiceBusMessage> messages;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public SendMessagesTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+        messages = new ArrayList<>();\n+        for (int i = 0; i < options.getMessagesToSend(); ++i) {\n+            ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));\n+            message.setMessageId(UUID.randomUUID().toString());\n+            messages.add(message);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync();", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNzY1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496337656", "bodyText": "Do you need to override this?", "author": "conniey", "createdAt": "2020-09-29T02:13:02Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessageTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));;\n+\n+    /**\n+     * Creates test object\n+     * @param options to set performance test options.\n+     */\n+    public SendMessageTest(ServiceBusStressOptions options) {\n+        super(options, ReceiveMode.PEEK_LOCK);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync();", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNzcxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496337715", "bodyText": "You need to format this file. There are two spaces.", "author": "conniey", "createdAt": "2020-09-29T02:13:17Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/SendMessageTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf;\n+\n+import com.azure.messaging.servicebus.ServiceBusMessage;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.messaging.servicebus.perf.core.ServiceBusStressOptions;\n+import com.azure.messaging.servicebus.perf.core.ServiceTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.Charset;\n+\n+/**\n+ * Performance test.\n+ */\n+public class SendMessageTest extends ServiceTest<ServiceBusStressOptions> {\n+    private final ServiceBusMessage message =  new ServiceBusMessage(CONTENTS.getBytes(Charset.defaultCharset()));;", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzNzc4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496337788", "bodyText": "etest => test", "author": "conniey", "createdAt": "2020-09-29T02:13:36Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzODAwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496338005", "bodyText": "Is this variable used anywhere else?", "author": "conniey", "createdAt": "2020-09-29T02:14:36Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    protected static final Duration TIMEOUT = Duration.ofSeconds(60);", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzODE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496338144", "bodyText": "Is this used in any other place?", "author": "conniey", "createdAt": "2020-09-29T02:15:03Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    protected static final Duration TIMEOUT = Duration.ofSeconds(60);\n+    protected static final AmqpRetryOptions RETRY_OPTIONS = new AmqpRetryOptions().setTryTimeout(TIMEOUT);", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzODMxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13349#discussion_r496338318", "bodyText": "To consolidate message creation you can create them here.", "author": "conniey", "createdAt": "2020-09-29T02:15:44Z", "path": "sdk/servicebus/azure-messaging-servicebus-track2-perf/src/main/java/com/azure/messaging/servicebus/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.perf.core;\n+\n+import com.azure.core.amqp.AmqpRetryOptions;\n+import com.azure.core.amqp.AmqpTransportType;\n+import com.azure.core.amqp.ProxyOptions;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusClientBuilder;\n+import com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusReceiverClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusSenderClient;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Base class for performance etest.\n+ * @param <TOptions> for performance configuration.\n+ */\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    private final ClientLogger logger = new ClientLogger(ServiceTest.class);\n+    protected static final Duration TIMEOUT = Duration.ofSeconds(60);\n+    protected static final AmqpRetryOptions RETRY_OPTIONS = new AmqpRetryOptions().setTryTimeout(TIMEOUT);\n+    protected static final String CONTENTS = \"Track 2 AMQP message - Perf Test\";\n+    protected static final int TOTAL_MESSAGE_MULTIPLIER = 300;\n+\n+    private static final String AZURE_SERVICE_BUS_CONNECTION_STRING = \"AZURE_SERVICE_BUS_CONNECTION_STRING\";\n+    private static final String AZURE_SERVICEBUS_QUEUE_NAME = \"AZURE_SERVICEBUS_QUEUE_NAME\";\n+    private static final String AZURE_SERVICEBUS_TOPIC_NAME = \"AZURE_SERVICEBUS_TOPIC_NAME\";\n+    private static final String AZURE_SERVICEBUS_SUBSCRIPTION_NAME = \"AZURE_SERVICEBUS_SUBSCRIPTION_NAME\";\n+\n+    protected final ServiceBusReceiverClient receiver;\n+    protected final ServiceBusReceiverAsyncClient receiverAsync;\n+    protected final ServiceBusSenderClient sender;\n+    protected final ServiceBusSenderAsyncClient senderAsync;\n+", "originalCommit": "e5d6b6d25b7f1117dd1e2437a70283583ac12877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bcd2a962b712d21180fdc937456638c0a077bad6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bcd2a962b712d21180fdc937456638c0a077bad6", "message": "updae tests code.", "committedDate": "2020-10-14T18:47:55Z", "type": "commit"}, {"oid": "1ca6def077e2dd309d4fd06bb710dda7e7ccd990", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ca6def077e2dd309d4fd06bb710dda7e7ccd990", "message": "address feedback.", "committedDate": "2020-10-14T19:03:57Z", "type": "commit"}]}