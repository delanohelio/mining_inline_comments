{"pr_number": 12218, "pr_title": "Sb track2 send Via feature - Sending message to a Queue via another queue ", "pr_createdAt": "2020-06-16T01:29:09Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12218", "timeline": [{"oid": "5c3cf988ac1c65cb1c4d14e6105d1d05fcc47648", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c3cf988ac1c65cb1c4d14e6105d1d05fcc47648", "message": "Increment package version after release of com.azure azure-messaging-servicebus", "committedDate": "2020-05-08T21:29:37Z", "type": "commit"}, {"oid": "39b9a1a6d1bfd9adf54c91fea1a90144cb02f288", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39b9a1a6d1bfd9adf54c91fea1a90144cb02f288", "message": "resolve merge conflict", "committedDate": "2020-05-12T19:40:58Z", "type": "commit"}, {"oid": "f9cc7d2d82c36e62ea253071a1ec5ae29b4f1848", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9cc7d2d82c36e62ea253071a1ec5ae29b4f1848", "message": "Merge branch 'azure-sdk-increment-package-version-servicebus-386162'", "committedDate": "2020-05-12T19:50:47Z", "type": "commit"}, {"oid": "3a4b16fd9cc42f7dbc5d746e81ffc8de94e55b6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a4b16fd9cc42f7dbc5d746e81ffc8de94e55b6b", "message": "merge master", "committedDate": "2020-05-13T00:26:33Z", "type": "commit"}, {"oid": "b67ac9b65651a41709584818e2c3417b6aed44ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b67ac9b65651a41709584818e2c3417b6aed44ca", "message": "Merge branch 'master' of github.com:hemanttanwar/azure-sdk-for-java", "committedDate": "2020-05-13T04:02:38Z", "type": "commit"}, {"oid": "510e76c7ffb58e006a09779558d7b01246f054a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/510e76c7ffb58e006a09779558d7b01246f054a9", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-05-20T05:17:51Z", "type": "commit"}, {"oid": "663dac49d053f1cb7e6d0bb7664a551b68dab004", "url": "https://github.com/Azure/azure-sdk-for-java/commit/663dac49d053f1cb7e6d0bb7664a551b68dab004", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-05T21:43:35Z", "type": "commit"}, {"oid": "2962fabdb5ada06fba88a10c18091f9721eeb302", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2962fabdb5ada06fba88a10c18091f9721eeb302", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-08T04:37:42Z", "type": "commit"}, {"oid": "d418224ef3addb68105e241776d19e70aca32bd0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d418224ef3addb68105e241776d19e70aca32bd0", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-09T03:45:55Z", "type": "commit"}, {"oid": "6a9dc359ca5e3ba7b40fe71ab0fa2c33d0e5e91b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a9dc359ca5e3ba7b40fe71ab0fa2c33d0e5e91b", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-09T21:00:31Z", "type": "commit"}, {"oid": "d0d0d88de524992f7e211400d2b8724691310817", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0d0d88de524992f7e211400d2b8724691310817", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-10T04:36:54Z", "type": "commit"}, {"oid": "80bcfd7bb9cd94cb966e71532fb1b8c39831db32", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80bcfd7bb9cd94cb966e71532fb1b8c39831db32", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-11T16:59:10Z", "type": "commit"}, {"oid": "62ccb52ea51a391ef5fd1dbac14107e531731626", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62ccb52ea51a391ef5fd1dbac14107e531731626", "message": "Added send via feature", "committedDate": "2020-06-16T01:27:41Z", "type": "commit"}, {"oid": "73bf72d7df8c3f9cf4b141a2ff257f5cc86a8f21", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73bf72d7df8c3f9cf4b141a2ff257f5cc86a8f21", "message": "Added test", "committedDate": "2020-06-16T06:15:23Z", "type": "commit"}, {"oid": "f4906251742c4eebddf47bb10c2fdef230792747", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f4906251742c4eebddf47bb10c2fdef230792747", "message": "removed empty file", "committedDate": "2020-06-16T15:34:07Z", "type": "commit"}, {"oid": "c18eec11d1b1337fe5f79461b548461c9253224d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c18eec11d1b1337fe5f79461b548461c9253224d", "message": "Added test for ServiceBusReactorSessionTest", "committedDate": "2020-06-16T21:40:43Z", "type": "commit"}, {"oid": "5e0945c799b4ffa3a84cbdbbde33530da6ef7990", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e0945c799b4ffa3a84cbdbbde33530da6ef7990", "message": "cleaning up docs and test", "committedDate": "2020-06-16T22:09:19Z", "type": "commit"}, {"oid": "136c66a13eacd2e49be05cef94879048c57115c9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/136c66a13eacd2e49be05cef94879048c57115c9", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-17T00:33:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r441664455", "bodyText": "This is very specific. \"final destination\"? This belongs in Service Bus. Adding linkProperties is common to AMQP. But this is not the right place to put this authorization logic.", "author": "conniey", "createdAt": "2020-06-17T16:13:18Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorSession.java", "diffHunk": "@@ -455,21 +419,108 @@ protected ReactorReceiver createConsumer(String entityPath, Receiver receiver,\n             reactorProvider.getReactorDispatcher());\n     }\n \n+    /**\n+     * Creates an {@link AmqpLink} that has AMQP specific capabilities set.\n+     *\n+     * @param linkName Name of the receive link.\n+     * @param entityPath Address in the message broker for the link.\n+     * @param linkProperties The properties needed to be set on the link.\n+     * @param timeout Operation timeout when creating the link.\n+     * @param retry Retry policy to apply when link creation times out.\n+     *\n+     * @return A new instance of an {@link AmqpLink} with the correct properties set.\n+     */\n+    protected Mono<AmqpLink> createProducer(String linkName, String entityPath, Duration timeout, AmqpRetryPolicy retry,\n+        Map<Symbol, Object> linkProperties) {\n+        return createProducer(linkName, entityPath, null, timeout, retry, linkProperties);\n+    }\n+\n+    /**\n+     * Creates an {@link AmqpLink} that has AMQP specific capabilities set.\n+     *\n+     * @param linkName Name of the receive link.\n+     * @param entityPath Address in the message broker for the link.\n+     * @param finalDestinationPath Final destination address in the message broker for the link.\n+     * @param linkProperties The properties needed to be set on the link.\n+     * @param timeout Operation timeout when creating the link.\n+     * @param retry Retry policy to apply when link creation times out.\n+     *\n+     * @return A new instance of an {@link AmqpLink} with the correct properties set.\n+     */\n+    protected Mono<AmqpLink> createProducer(String linkName, String entityPath, String finalDestinationPath,", "originalCommit": "5e0945c799b4ffa3a84cbdbbde33530da6ef7990", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDY0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r441860648", "bodyText": "yes it works only with  queue.", "author": "hemanttanwar", "createdAt": "2020-06-17T22:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDQ1NQ=="}], "type": "inlineReview"}, {"oid": "7ec84b8cc7db340ae3ed06743de531d55aac91d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ec84b8cc7db340ae3ed06743de531d55aac91d3", "message": "moved the authorize logic for via entity in service bus module", "committedDate": "2020-06-17T20:14:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0MDk4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r441840988", "bodyText": "Is this only for queues? Does the entity type also apply to subscriptions? If only queues, should we have a runtime check it's not a topic?", "author": "conniey", "createdAt": "2020-06-17T21:20:31Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -468,6 +469,20 @@ public ServiceBusSenderClientBuilder queueName(String queueName) {\n             return this;\n         }\n \n+        /**\n+         * Sets the name of the initial destination Service Bus queue to publish messages to.\n+         *\n+         * @param viaQueueName The initial destination of the message.\n+         *\n+         * @return The modified {@link ServiceBusSenderClientBuilder} object.\n+         *\n+         * @see <a href=\"https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via\">Send Via</a>\n+         */\n+        public ServiceBusSenderClientBuilder viaQueueName(String viaQueueName) {", "originalCommit": "7ec84b8cc7db340ae3ed06743de531d55aac91d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0MTY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r441841663", "bodyText": "It's possible to create multiple send links with to the same entity path. That's why we have a linkName parameter. This shouldn't be repurposed.", "author": "conniey", "createdAt": "2020-06-17T21:21:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "diffHunk": "@@ -23,13 +23,13 @@\n      * Creates or gets a send link. The same link is returned if there is an existing send link with the same {@code\n      * linkName}. Otherwise, a new link is created and returned.\n      *\n-     * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n+     * @param viaEntityPath The intermediate remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n-    Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions);\n+    Mono<AmqpSendLink> createSendLink(String entityPath, String viaEntityPath, AmqpRetryOptions retryOptions);", "originalCommit": "7ec84b8cc7db340ae3ed06743de531d55aac91d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac4090d3719b70c0f9ad3c64c680700b85d6e346", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac4090d3719b70c0f9ad3c64c680700b85d6e346", "message": "Cleaning integration test", "committedDate": "2020-06-17T21:28:32Z", "type": "commit"}, {"oid": "ec7596263a3249ff965f453790d5bef1c15c4a28", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec7596263a3249ff965f453790d5bef1c15c4a28", "message": "Adding link name back and via queue check for topic in builder", "committedDate": "2020-06-17T22:06:13Z", "type": "commit"}, {"oid": "ed8488ac12c07af9e1bab02403aa35b0de90456b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed8488ac12c07af9e1bab02403aa35b0de90456b", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-18T00:32:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxODg0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442318841", "bodyText": "You should use entityType instead of topicName for your comparison", "author": "conniey", "createdAt": "2020-06-18T15:36:26Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -496,6 +511,11 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n             final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n                 queueName);\n \n+            if (!CoreUtils.isNullOrEmpty(viaQueueName) && !CoreUtils.isNullOrEmpty(topicName)) {", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxOTI0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442319248", "bodyText": "Also add documentation for this runtime error. It should be an IllegalStateException.", "author": "conniey", "createdAt": "2020-06-18T15:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxODg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxOTUyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442319520", "bodyText": "Do we need to do a string format? You can append it.", "author": "conniey", "createdAt": "2020-06-18T15:37:24Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -551,7 +553,13 @@ public void close() {\n \n     private Mono<AmqpSendLink> getSendLink() {\n         return connectionProcessor\n-            .flatMap(connection -> connection.createSendLink(entityName, entityName, retryOptions))\n+            .flatMap(connection -> {\n+                String linkName = entityName;\n+                if (!CoreUtils.isNullOrEmpty(viaEntityName)) {\n+                    linkName = String.format(\"VIA-%s\", viaEntityName);", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDYyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442320627", "bodyText": "viaEntityPath is an optional parameter, I would put this at the end of the parameter list.", "author": "conniey", "createdAt": "2020-06-18T15:39:00Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "diffHunk": "@@ -25,11 +25,13 @@\n      *\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n+     * @param viaEntityPath The intermediate remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n-    Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions);\n+    Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, String viaEntityPath,", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442320827", "bodyText": "Same with putting viaEntityPath at the end of the parameter list.", "author": "conniey", "createdAt": "2020-06-18T15:39:22Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -133,18 +134,22 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n      *\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n+     * @param viaEntityPath The intermediate remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n     @Override\n-    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions) {\n-        return createSession(entityPath).flatMap(session -> {\n-            logger.verbose(\"Get or create producer for path: '{}'\", entityPath);\n+    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, String viaEntityPath,\n+        AmqpRetryOptions retryOptions) {\n+\n+        String entity = !CoreUtils.isNullOrEmpty(viaEntityPath) ? viaEntityPath : entityPath;\n+        return createSession(entity).cast(ServiceBusSession.class).flatMap(session -> {\n+            logger.verbose(\"Get or create sender link : '{}'\", linkName);\n             final AmqpRetryPolicy retryPolicy = RetryUtil.getRetryPolicy(retryOptions);\n \n-            return session.createProducer(linkName, entityPath, retryOptions.getTryTimeout(), retryPolicy)\n-                .cast(AmqpSendLink.class);\n+            return session.createSenderLink(linkName, entityPath, viaEntityPath, retryOptions.getTryTimeout(),", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442323693", "bodyText": "There are two different names in this file. Is viaEntityPath the same as transferEntityPath? If so, we should fix the internal implementation to use the same name. This makes it hard to follow in the future.", "author": "conniey", "createdAt": "2020-06-18T15:43:37Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -133,18 +134,22 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n      *\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n+     * @param viaEntityPath The intermediate remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n     @Override\n-    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions) {\n-        return createSession(entityPath).flatMap(session -> {\n-            logger.verbose(\"Get or create producer for path: '{}'\", entityPath);\n+    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, String viaEntityPath,", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzIwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442327206", "bodyText": "The token manager is Closeable. You never dispose of this resource. You don't need the check for endpoint states here the token manager already does it.", "author": "conniey", "createdAt": "2020-06-18T15:48:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorSession.java", "diffHunk": "@@ -88,6 +98,34 @@\n         return createConsumer(linkName, entityPath, entityType, timeout, retry, receiveMode, filter);\n     }\n \n+    @Override\n+    public Mono<AmqpLink> createSenderLink(String linkName, String entityPath, String viaEntityPath, Duration timeout,\n+        AmqpRetryPolicy retry) {\n+        Objects.requireNonNull(entityPath, \"'entityPath' cannot be null.\");\n+        Objects.requireNonNull(timeout, \"'timeout' cannot be null.\");\n+        Objects.requireNonNull(retry, \"'retry' cannot be null.\");\n+\n+        final Duration serverTimeout = adjustServerTimeout(timeout);\n+        Map<Symbol, Object> linkProperties = new HashMap<>();\n+\n+        linkProperties.put(LINK_TIMEOUT_PROPERTY, UnsignedInteger.valueOf(serverTimeout.toMillis()));\n+\n+        if (!CoreUtils.isNullOrEmpty(viaEntityPath)) {\n+            linkProperties.put(LINK_TRANSFER_DESTINATION_PROPERTY, entityPath);\n+            logger.verbose(\"Get or create sender link for via entity path: '{}'\", viaEntityPath);\n+\n+            final TokenManager tokenManager = tokenManagerProvider.getTokenManager(cbsNodeSupplier, entityPath);", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzUwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442327509", "bodyText": "put viaEntityPath at the end as it is an optional parameter.", "author": "conniey", "createdAt": "2020-06-18T15:49:02Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusSession.java", "diffHunk": "@@ -49,4 +50,19 @@\n      */\n     Mono<ServiceBusReceiveLink> createConsumer(String linkName, String entityPath, MessagingEntityType entityType,\n         Duration timeout, AmqpRetryPolicy retryPolicy, ReceiveMode receiveMode, String sessionId);\n+\n+    /**\n+     * Creates a new {@link AmqpLink} that can send messages to the message broker.\n+     *\n+     * @param linkName Name of the link.\n+     * @param entityPath The entity path this link connects to, so that it may send events to the message broker.\n+     * @param viaEntityPath The entity path this link connects to, so that it may send events to the message broker\n+     *     via this entity.\n+     * @param timeout Timeout required for creating and opening an AMQP link.\n+     * @param retryPolicy The retry policy to use when consuming messages.\n+     *\n+     * @return A newly created AMQP link.\n+     */\n+    Mono<AmqpLink> createSenderLink(String linkName, String entityPath, String viaEntityPath, Duration timeout,", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTEzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442329137", "bodyText": "Do we need to have this in the integration test base? How many test classes actually need the viaQueueName test case? This method returns a builder, you can set that name for the particular test case.", "author": "conniey", "createdAt": "2020-06-18T15:51:22Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -253,20 +253,32 @@ protected ServiceBusClientBuilder getBuilder(boolean useCredentials) {\n \n     protected ServiceBusSenderClientBuilder getSenderBuilder(boolean useCredentials, MessagingEntityType entityType,\n         int entityIndex, boolean isSessionAware, boolean sharedConnection) {\n+        return getSenderBuilder(useCredentials, entityType, entityIndex, -1, isSessionAware, sharedConnection);", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyOTQ4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r442329481", "bodyText": "This should be scoped to when the build method is actually invoked.", "author": "conniey", "createdAt": "2020-06-18T15:51:54Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "diffHunk": "@@ -44,6 +46,30 @@\n         ENDPOINT, SHARED_ACCESS_KEY_NAME, SHARED_ACCESS_KEY, QUEUE_NAME);\n     private static final Proxy PROXY_ADDRESS = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST, Integer.parseInt(PROXY_PORT)));\n \n+    @Test\n+    void viaQueueNameWithTopicNotAllowed() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ServiceBusClientBuilder builder = new ServiceBusClientBuilder();\n+            builder.connectionString(NAMESPACE_CONNECTION_STRING)", "originalCommit": "ec7596263a3249ff965f453790d5bef1c15c4a28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c87f0b8ef1201cc7c5d2991358440ace78c0303", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c87f0b8ef1201cc7c5d2991358440ace78c0303", "message": "Incorporated review comments", "committedDate": "2020-06-19T04:21:26Z", "type": "commit"}, {"oid": "8136462b23277e71b53eb19c4557558a9a1c95d1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8136462b23277e71b53eb19c4557558a9a1c95d1", "message": "Incorporated review comments", "committedDate": "2020-06-19T04:39:21Z", "type": "commit"}, {"oid": "874767a0ec4e8dbc72dce623ef701c96ff74c743", "url": "https://github.com/Azure/azure-sdk-for-java/commit/874767a0ec4e8dbc72dce623ef701c96ff74c743", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-24T08:19:24Z", "type": "commit"}, {"oid": "e4c98cc4508a84d9d1537d7cdc3826cf7fb57c7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4c98cc4508a84d9d1537d7cdc3826cf7fb57c7a", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-26T23:12:20Z", "type": "commit"}, {"oid": "85f205eb690ddbd1b0a8da2193ecab487997de0f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/85f205eb690ddbd1b0a8da2193ecab487997de0f", "message": "merge master", "committedDate": "2020-06-28T05:53:42Z", "type": "commit"}, {"oid": "964c1b6891567dc1ebfe9a54aecf9de1acb58fe1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/964c1b6891567dc1ebfe9a54aecf9de1acb58fe1", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-28T05:54:20Z", "type": "commit"}, {"oid": "bc584629d6f75ac1315be56614663f3e7c0011f5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc584629d6f75ac1315be56614663f3e7c0011f5", "message": "merge master", "committedDate": "2020-06-28T05:58:29Z", "type": "commit"}, {"oid": "4aa1fcc3ae90257f9882053d27e59d72d77a7de9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4aa1fcc3ae90257f9882053d27e59d72d77a7de9", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-28T16:18:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjk2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447126961", "bodyText": "Why was this parameter changed? It is an entityPath, similar to the parameter above.", "author": "conniey", "createdAt": "2020-06-29T17:14:28Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusAmqpConnection.java", "diffHunk": "@@ -26,41 +26,42 @@\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n+     * @param transferDestinationPath Path if the message should be transferred this destination by message broker.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n-    Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions);\n+    Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions,\n+        String transferDestinationPath);\n \n     /**\n      * Creates or gets an existing receive link. The same link is returned if there is an existing receive link with the\n      * same {@code linkName}. Otherwise, a new link is created and returned.\n      *\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n-     * @param transferEntityPath Path if the events should be transferred to another link after being received from this\n-     *     link.\n+     * @param transferDestinationPath Path if the message should be transferred to another link after being received", "originalCommit": "bc584629d6f75ac1315be56614663f3e7c0011f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNzIwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447127200", "bodyText": "Remove", "author": "conniey", "createdAt": "2020-06-29T17:14:52Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -134,17 +134,21 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n+     * @param transferDestinationPath Path if the message should be transferred this destination by message broker.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n     @Override\n-    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions) {\n-        return createSession(entityPath).flatMap(session -> {\n-            logger.verbose(\"Get or create producer for path: '{}'\", entityPath);\n+    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions,\n+         String transferDestinationPath) {\n+\n+        //String entity = !CoreUtils.isNullOrEmpty(viaEntityPath) ? viaEntityPath : entityPath;", "originalCommit": "bc584629d6f75ac1315be56614663f3e7c0011f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODAyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447128021", "bodyText": "The methods in session are all producer and consumer. This adds another name into the mix. Revert back to createProducer", "author": "conniey", "createdAt": "2020-06-29T17:16:08Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -134,17 +134,21 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n      * @param retryOptions Options to use when creating the link.\n+     * @param transferDestinationPath Path if the message should be transferred this destination by message broker.\n      *\n      * @return A new or existing send link that is connected to the given {@code entityPath}.\n      */\n     @Override\n-    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions) {\n-        return createSession(entityPath).flatMap(session -> {\n-            logger.verbose(\"Get or create producer for path: '{}'\", entityPath);\n+    public Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, AmqpRetryOptions retryOptions,\n+         String transferDestinationPath) {\n+\n+        //String entity = !CoreUtils.isNullOrEmpty(viaEntityPath) ? viaEntityPath : entityPath;\n+        return createSession(entityPath).cast(ServiceBusSession.class).flatMap(session -> {\n+            logger.verbose(\"Get or create sender link : '{}'\", linkName);\n             final AmqpRetryPolicy retryPolicy = RetryUtil.getRetryPolicy(retryOptions);\n \n-            return session.createProducer(linkName, entityPath, retryOptions.getTryTimeout(), retryPolicy)\n-                .cast(AmqpSendLink.class);\n+            return session.createSenderLink(linkName, entityPath, retryOptions.getTryTimeout(),", "originalCommit": "bc584629d6f75ac1315be56614663f3e7c0011f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyODMxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447128315", "bodyText": "Why the name change? Revert.", "author": "conniey", "createdAt": "2020-06-29T17:16:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -155,12 +159,15 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n      * @param linkName The name of the link.\n      * @param entityPath The remote address to connect to for the message broker.\n      * @param receiveMode Consumer options to use when creating the link.\n+     * @param transferDestinationPath Path if the events should be transferred to another link after being received\n+     *     from this link.\n+     * @param entityType {@link MessagingEntityType} to use when creating the link.\n      *\n      * @return A new or existing receive link that is connected to the given {@code entityPath}.\n      */\n     @Override\n     public Mono<ServiceBusReceiveLink> createReceiveLink(String linkName, String entityPath, ReceiveMode receiveMode,\n-        String transferEntityPath, MessagingEntityType entityType) {\n+        String transferDestinationPath, MessagingEntityType entityType) {", "originalCommit": "bc584629d6f75ac1315be56614663f3e7c0011f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyOTcyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447129724", "bodyText": "We'd be keeping this tokenManager around for the lifetime of this send link when it was only used once. Why not dispose of it after the first authorization?", "author": "conniey", "createdAt": "2020-06-29T17:19:09Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorSession.java", "diffHunk": "@@ -88,6 +96,34 @@\n         return createConsumer(linkName, entityPath, entityType, timeout, retry, receiveMode, filter);\n     }\n \n+    @Override\n+    public Mono<AmqpLink> createSenderLink(String linkName, String entityPath, Duration timeout,\n+        AmqpRetryPolicy retry, String transferDestinationPath) {\n+        Objects.requireNonNull(entityPath, \"'entityPath' cannot be null.\");\n+        Objects.requireNonNull(timeout, \"'timeout' cannot be null.\");\n+        Objects.requireNonNull(retry, \"'retry' cannot be null.\");\n+\n+        final Duration serverTimeout = adjustServerTimeout(timeout);\n+        Map<Symbol, Object> linkProperties = new HashMap<>();\n+\n+        linkProperties.put(LINK_TIMEOUT_PROPERTY, UnsignedInteger.valueOf(serverTimeout.toMillis()));\n+\n+        if (!CoreUtils.isNullOrEmpty(transferDestinationPath)) {\n+            linkProperties.put(LINK_TRANSFER_DESTINATION_PROPERTY, transferDestinationPath);\n+            logger.verbose(\"Get or create sender link {} for via entity path: '{}'\", linkName, entityPath);\n+\n+            final TokenManager tokenManager = tokenManagerProvider.getTokenManager(cbsNodeSupplier,\n+                transferDestinationPath);\n+\n+            return tokenManager.authorize().then(createProducer(linkName, entityPath, timeout, retry,\n+                linkProperties))\n+                .doFinally(signalType -> tokenManager.close());", "originalCommit": "bc584629d6f75ac1315be56614663f3e7c0011f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMDM0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447130340", "bodyText": "This is an optional parameter, we should have this at the end.", "author": "conniey", "createdAt": "2020-06-29T17:20:12Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -87,11 +88,12 @@\n     private final Runnable onClientClose;\n     private final String entityName;\n     private final ServiceBusConnectionProcessor connectionProcessor;\n+    private final String viaEntityName;\n \n     /**\n      * Creates a new instance of this {@link ServiceBusSenderAsyncClient} that sends messages to a Service Bus entity.\n      */\n-    ServiceBusSenderAsyncClient(String entityName, MessagingEntityType entityType,\n+    ServiceBusSenderAsyncClient(String entityName, String viaEntityName, MessagingEntityType entityType,", "originalCommit": "bc584629d6f75ac1315be56614663f3e7c0011f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a962a85527d88b6994e2460abef7a44035596d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a962a85527d88b6994e2460abef7a44035596d2", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-29T19:27:52Z", "type": "commit"}, {"oid": "b77264974e9b9663a15002eb07ecc39ca2bdf783", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b77264974e9b9663a15002eb07ecc39ca2bdf783", "message": "Merge branch 'master' into sb-track2-send-via-feature", "committedDate": "2020-06-29T22:25:12Z", "type": "commit"}, {"oid": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "message": "Review Comments", "committedDate": "2020-06-30T14:25:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzOTE5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447839195", "bodyText": "This link name doesn't have to be declared. You only use the corresponding value within the if statement for each of them.", "author": "conniey", "createdAt": "2020-06-30T16:59:27Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -551,7 +553,16 @@ public void close() {\n \n     private Mono<AmqpSendLink> getSendLink() {\n         return connectionProcessor\n-            .flatMap(connection -> connection.createSendLink(entityName, entityName, retryOptions))\n+            .flatMap(connection -> {\n+                String linkName = entityName;", "originalCommit": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDQ2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447840464", "bodyText": "Why create an entire Mono for this? You can use .doFinally. authorize() is a Mono.", "author": "conniey", "createdAt": "2020-06-30T17:01:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorSession.java", "diffHunk": "@@ -88,6 +96,38 @@\n         return createConsumer(linkName, entityPath, entityType, timeout, retry, receiveMode, filter);\n     }\n \n+    @Override\n+    public Mono<AmqpLink> createProducer(String linkName, String entityPath, Duration timeout,\n+        AmqpRetryPolicy retry, String transferDestinationPath) {\n+        Objects.requireNonNull(entityPath, \"'entityPath' cannot be null.\");\n+        Objects.requireNonNull(timeout, \"'timeout' cannot be null.\");\n+        Objects.requireNonNull(retry, \"'retry' cannot be null.\");\n+\n+        final Duration serverTimeout = adjustServerTimeout(timeout);\n+        Map<Symbol, Object> linkProperties = new HashMap<>();\n+\n+        linkProperties.put(LINK_TIMEOUT_PROPERTY, UnsignedInteger.valueOf(serverTimeout.toMillis()));\n+\n+        if (!CoreUtils.isNullOrEmpty(transferDestinationPath)) {\n+            linkProperties.put(LINK_TRANSFER_DESTINATION_PROPERTY, transferDestinationPath);\n+            logger.verbose(\"Get or create sender link {} for via entity path: '{}'\", linkName, entityPath);\n+\n+            final TokenManager tokenManager = tokenManagerProvider.getTokenManager(cbsNodeSupplier,\n+                transferDestinationPath);\n+\n+            return tokenManager.authorize()\n+                .then(", "originalCommit": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447840598", "bodyText": "transferEntityPath", "author": "conniey", "createdAt": "2020-06-30T17:01:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusSession.java", "diffHunk": "@@ -49,4 +50,19 @@\n      */\n     Mono<ServiceBusReceiveLink> createConsumer(String linkName, String entityPath, MessagingEntityType entityType,\n         Duration timeout, AmqpRetryPolicy retryPolicy, ReceiveMode receiveMode, String sessionId);\n+\n+    /**\n+     * Creates a new {@link AmqpLink} that can send events to the message broker.\n+     *\n+     * @param linkName Name of the link.\n+     * @param entityPath The entity path this link connects to, so that it may send events to the message broker.\n+     * @param timeout Timeout required for creating and opening an AMQP link.\n+     * @param retryPolicy The retry policy to use when sending events.\n+     * @param transferDestinationPath The entity path this link connects to, so that it may transfer events to\n+     *     the message broker via this entity.\n+     *\n+     * @return A newly created AMQP link.\n+     */\n+    Mono<AmqpLink> createProducer(String linkName, String entityPath, Duration timeout,\n+        AmqpRetryPolicy retryPolicy, String transferDestinationPath);", "originalCommit": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MTMwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447841303", "bodyText": "This is just // Arrange.\nThe next part is // Act & Assert.\nSame with the section below.", "author": "conniey", "createdAt": "2020-06-30T17:02:38Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "diffHunk": "@@ -44,6 +46,33 @@\n         ENDPOINT, SHARED_ACCESS_KEY_NAME, SHARED_ACCESS_KEY, QUEUE_NAME);\n     private static final Proxy PROXY_ADDRESS = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST, Integer.parseInt(PROXY_PORT)));\n \n+    @Test\n+    void viaQueueNameWithTopicNotAllowed() {\n+        // Arrange & Act\n+        ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()", "originalCommit": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MTg5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447841891", "bodyText": "This can be split. // Arrange is where the builder is created.\n// Act is when you do var client = builder.buildAsyncClient()", "author": "conniey", "createdAt": "2020-06-30T17:03:42Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "diffHunk": "@@ -44,6 +46,33 @@\n         ENDPOINT, SHARED_ACCESS_KEY_NAME, SHARED_ACCESS_KEY, QUEUE_NAME);\n     private static final Proxy PROXY_ADDRESS = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(PROXY_HOST, Integer.parseInt(PROXY_PORT)));\n \n+    @Test\n+    void viaQueueNameWithTopicNotAllowed() {\n+        // Arrange & Act\n+        ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+            .connectionString(NAMESPACE_CONNECTION_STRING)\n+            .sender()\n+            .topicName(TOPIC_NAME)\n+            .viaQueueName(VIA_QUEUE_NAME);\n+\n+        // Assert\n+        assertThrows(IllegalStateException.class, () -> builder.buildAsyncClient());\n+    }\n+\n+    @Test\n+    void queueClientWithViaQueueName() {\n+        // Arrange & Act\n+        final ServiceBusSenderAsyncClient client = new ServiceBusClientBuilder()", "originalCommit": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MzA0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r447843044", "bodyText": "what about the case where the validation for the token manager fails?", "author": "conniey", "createdAt": "2020-06-30T17:05:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorSessionTest.java", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.AmqpRetryPolicy;\n+import com.azure.core.amqp.ClaimsBasedSecurityNode;\n+import com.azure.core.amqp.exception.AmqpResponseCode;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.MessageSerializer;\n+import com.azure.core.amqp.implementation.ReactorDispatcher;\n+import com.azure.core.amqp.implementation.ReactorHandlerProvider;\n+import com.azure.core.amqp.implementation.ReactorProvider;\n+import com.azure.core.amqp.implementation.TokenManager;\n+import com.azure.core.amqp.implementation.TokenManagerProvider;\n+import com.azure.core.amqp.implementation.handler.SendLinkHandler;\n+import com.azure.core.amqp.implementation.handler.SessionHandler;\n+import com.azure.core.util.logging.ClientLogger;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.Accepted;\n+import org.apache.qpid.proton.amqp.messaging.Source;\n+import org.apache.qpid.proton.amqp.messaging.Target;\n+import org.apache.qpid.proton.amqp.transport.SenderSettleMode;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.EndpointState;\n+import org.apache.qpid.proton.engine.Record;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.engine.Session;\n+import org.apache.qpid.proton.reactor.Reactor;\n+import org.apache.qpid.proton.reactor.Selectable;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+import reactor.test.StepVerifier;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test for {@link ServiceBusReactorSession}.\n+ */\n+public class ServiceBusReactorSessionTest {\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReactorSessionTest.class);\n+\n+    private static final String CONNECTION_ID = \"test-connection-id\";\n+    private static final String HOSTNAME = \"test-event-hub.servicebus.windows.net/\";\n+    private static final Symbol LINK_TRANSFER_DESTINATION_PROPERTY = Symbol.getSymbol(AmqpConstants.VENDOR\n+        + \":transfer-destination-address\");\n+\n+    @Mock\n+    private Reactor reactor;\n+    @Mock\n+    private Selectable selectable;\n+    @Mock\n+    private TokenManagerProvider tokenManagerProvider;\n+    @Mock\n+    private MessageSerializer messageSerializer;\n+    @Mock\n+    private ReactorProvider reactorProvider;\n+    @Mock\n+    private ReactorHandlerProvider handlerProvider;\n+    @Mock\n+    private Session session;\n+    @Mock\n+    Mono< ClaimsBasedSecurityNode > cbsNodeSupplier;\n+    @Mock\n+    AmqpRetryPolicy retryPolicy;\n+    @Mock\n+    TokenManager tokenManagerViaQueue;\n+    @Mock\n+    TokenManager tokenManagerEntity;\n+    @Mock\n+    SessionHandler handler;\n+    @Mock\n+    Sender senderEntity;\n+    @Mock\n+    Sender senderViaEntity;\n+    @Mock\n+    Record record;\n+    @Mock\n+    private SendLinkHandler sendViaEntityLinkHandler;\n+    @Mock\n+    private SendLinkHandler sendEntityLinkHandler;\n+    @Captor\n+    private ArgumentCaptor<Runnable> dispatcherCaptor;\n+    @Mock\n+    private ReactorDispatcher dispatcher;\n+\n+    private ServiceBusReactorSession serviceBusReactorSession;\n+    private String sessionName = \"sessionName\";\n+    private String entityPath = \"entityPath\";\n+    private String viaEntityPath = \"viaEntityPath\";\n+    private String viaEntityPathSenderLinkName = \"VIA-\" + viaEntityPath;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(60));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @BeforeEach\n+    void setup(TestInfo testInfo) throws IOException {\n+        logger.info(\"[{}] Setting up.\", testInfo.getDisplayName());\n+\n+        MockitoAnnotations.initMocks(this);\n+        when(tokenManagerEntity.getAuthorizationResults()).thenReturn(Flux.just(AmqpResponseCode.ACCEPTED));\n+        when(tokenManagerViaQueue.getAuthorizationResults()).thenReturn(Flux.just(AmqpResponseCode.ACCEPTED));\n+\n+        doNothing().when(selectable).setChannel(any());\n+        doNothing().when(selectable).onReadable(any());\n+        doNothing().when(selectable).onFree(any());\n+        doNothing().when(selectable).setReading(true);\n+        doNothing().when(reactor).update(selectable);\n+        when(reactor.selectable()).thenReturn(selectable);\n+\n+        final ReplayProcessor<EndpointState> endpointStateReplayProcessor = ReplayProcessor.cacheLast();\n+        when(handler.getEndpointStates()).thenReturn(endpointStateReplayProcessor);\n+        FluxSink<EndpointState> sink1 = endpointStateReplayProcessor.sink();\n+        sink1.next(EndpointState.ACTIVE);\n+        when(handler.getHostname()).thenReturn(HOSTNAME);\n+        when(handler.getConnectionId()).thenReturn(CONNECTION_ID);\n+        when(handler.getErrors()).thenReturn(Flux.empty());\n+\n+        when(handlerProvider.createSendLinkHandler(CONNECTION_ID, HOSTNAME, viaEntityPathSenderLinkName, viaEntityPath))\n+            .thenReturn(sendViaEntityLinkHandler);\n+        when(handlerProvider.createSendLinkHandler(CONNECTION_ID, HOSTNAME, entityPath, entityPath))\n+            .thenReturn(sendEntityLinkHandler);\n+\n+        Delivery delivery = mock(Delivery.class);\n+        when(delivery.getRemoteState()).thenReturn(Accepted.getInstance());\n+        when(delivery.getTag()).thenReturn(\"tag\".getBytes());\n+        when(sendViaEntityLinkHandler.getDeliveredMessages()).thenReturn(Flux.just(delivery));\n+        when(sendEntityLinkHandler.getDeliveredMessages()).thenReturn(Flux.just(delivery));\n+\n+        when(sendViaEntityLinkHandler.getLinkCredits()).thenReturn(Flux.just(100));\n+        when(sendEntityLinkHandler.getLinkCredits()).thenReturn(Flux.just(100));\n+\n+        when(sendViaEntityLinkHandler.getEndpointStates()).thenReturn(endpointStateReplayProcessor);\n+        when(sendEntityLinkHandler.getEndpointStates()).thenReturn(endpointStateReplayProcessor);\n+\n+        when(sendViaEntityLinkHandler.getErrors()).thenReturn(Flux.empty());\n+        when(sendEntityLinkHandler.getErrors()).thenReturn(Flux.empty());\n+\n+        when(tokenManagerProvider.getTokenManager(cbsNodeSupplier, viaEntityPath)).thenReturn(tokenManagerViaQueue);\n+        when(tokenManagerProvider.getTokenManager(cbsNodeSupplier, entityPath)).thenReturn(tokenManagerEntity);\n+\n+        when(tokenManagerEntity.getAuthorizationResults()).thenReturn(Flux.just(AmqpResponseCode.ACCEPTED));\n+        when(tokenManagerEntity.authorize()).thenReturn(Mono.just(1L));\n+        when(tokenManagerViaQueue.authorize()).thenReturn(Mono.just(1L));\n+\n+        when(session.sender(viaEntityPathSenderLinkName)).thenReturn(senderViaEntity);\n+        when(session.sender(entityPath)).thenReturn(senderEntity);\n+        doNothing().when(session).open();\n+        doNothing().when(senderViaEntity).setSource(any(Source.class));\n+        doNothing().when(senderEntity).setSource(any(Source.class));\n+\n+        doNothing().when(senderViaEntity).setSenderSettleMode(SenderSettleMode.UNSETTLED);\n+        doNothing().when(senderEntity).setSenderSettleMode(SenderSettleMode.UNSETTLED);\n+\n+        doNothing().when(senderViaEntity).setTarget(any(Target.class));\n+        doNothing().when(senderEntity).setTarget(any(Target.class));\n+        when(senderEntity.attachments()).thenReturn(record);\n+        when(senderViaEntity.attachments()).thenReturn(record);\n+\n+        when(reactorProvider.getReactorDispatcher()).thenReturn(dispatcher);\n+\n+        Duration openTimeout = Duration.ofSeconds(60);\n+        serviceBusReactorSession = new ServiceBusReactorSession(session, handler, sessionName, reactorProvider,\n+            handlerProvider, cbsNodeSupplier, tokenManagerProvider, openTimeout, messageSerializer, retryPolicy);\n+    }\n+\n+    @AfterEach\n+    void teardown(TestInfo testInfo) {\n+        logger.info(\"[{}] Tearing down.\", testInfo.getDisplayName());\n+\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    /**\n+     * Test for create Sender Link when via-queue is used.\n+     */\n+    @Test\n+    void createViaSenderLink() throws IOException {", "originalCommit": "c5f2417bcb527e0ed36669c7fa1d0f2ee16a84cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1839acc263ca2719f4fac4371347940486442811", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1839acc263ca2719f4fac4371347940486442811", "message": "Review Comments", "committedDate": "2020-07-01T00:01:10Z", "type": "commit"}, {"oid": "98befc2bd8950027f4510a996f25d5b913fa81ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98befc2bd8950027f4510a996f25d5b913fa81ad", "message": "Review Comments", "committedDate": "2020-07-01T00:03:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MTgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12218#discussion_r448481818", "bodyText": "nit: remove new line.", "author": "conniey", "createdAt": "2020-07-01T16:30:30Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -551,7 +553,14 @@ public void close() {\n \n     private Mono<AmqpSendLink> getSendLink() {\n         return connectionProcessor\n-            .flatMap(connection -> connection.createSendLink(entityName, entityName, retryOptions))\n+            .flatMap(connection -> {\n+                if (!CoreUtils.isNullOrEmpty(viaEntityName)) {\n+                    return connection.createSendLink(\"VIA-\".concat(viaEntityName), viaEntityName, retryOptions, entityName);\n+                } else {\n+                    return connection.createSendLink(entityName, entityName, retryOptions, null);\n+                }\n+", "originalCommit": "98befc2bd8950027f4510a996f25d5b913fa81ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "79533cb45bbc52e72e506e015673f4ee90bf7355", "url": "https://github.com/Azure/azure-sdk-for-java/commit/79533cb45bbc52e72e506e015673f4ee90bf7355", "message": "checkstyle fixes", "committedDate": "2020-07-01T17:35:08Z", "type": "commit"}, {"oid": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-07-01T18:19:03Z", "type": "commit"}, {"oid": "63ee1582ce2e86144582685ab601ab72771aa638", "url": "https://github.com/Azure/azure-sdk-for-java/commit/63ee1582ce2e86144582685ab601ab72771aa638", "message": "Merge branch 'master' into sb-track2-send-via-feature", "committedDate": "2020-07-01T18:20:49Z", "type": "commit"}, {"oid": "4d3ff55e5ef96ecb055724ed4b03c80525d8ac52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d3ff55e5ef96ecb055724ed4b03c80525d8ac52", "message": "Merge master into branch", "committedDate": "2020-07-01T18:55:16Z", "type": "commit"}, {"oid": "8162147dbd10329a7e6d6fe1ecc389f8a6aecf40", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8162147dbd10329a7e6d6fe1ecc389f8a6aecf40", "message": "Removed unwanted new lines", "committedDate": "2020-07-01T18:56:40Z", "type": "commit"}]}