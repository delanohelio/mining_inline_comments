{"pr_number": 12113, "pr_title": "Updated beta release based on 73 apiview feedback", "pr_createdAt": "2020-06-11T22:51:51Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12113", "timeline": [{"oid": "26a638035dce602be5ebc2373050cd66803935dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/26a638035dce602be5ebc2373050cd66803935dc", "message": "Updated beta release based on 73 apiview feedback", "committedDate": "2020-06-11T22:50:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNDc3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439114772", "bodyText": "This was added in a preview right?", "author": "alzimmermsft", "createdAt": "2020-06-11T22:56:17Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -170,39 +171,33 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n-        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+        uploadWithResponse(new BlobParallelUploadOptions(data, length)\n             .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n-            .setRequestConditions(requestConditions), timeout, context);\n+            .setRequestConditions(requestConditions).setTimeout(timeout), context);\n     }\n \n     /**\n      * Creates a new blob, or updates the content of an existing blob.\n      * <p>\n      * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n-     *\n-     * @param data The data to write to the blob.\n-     * @param length The exact length of the data. It is important that this value match precisely the length of the\n-     * data provided in the {@link InputStream}.\n      * @param options {@link BlobParallelUploadOptions}\n-     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      * @return Information about the uploaded block blob.\n      */\n-    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,", "originalCommit": "26a638035dce602be5ebc2373050cd66803935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzkzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439117938", "bodyText": "Correct. 12.7.0-beta.1", "author": "rickle-msft", "createdAt": "2020-06-11T23:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNDc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNTEyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439115127", "bodyText": "Does the corresponding async method have an options bag as well?", "author": "alzimmermsft", "createdAt": "2020-06-11T22:57:28Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -170,39 +171,33 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n-        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+        uploadWithResponse(new BlobParallelUploadOptions(data, length)\n             .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n-            .setRequestConditions(requestConditions), timeout, context);\n+            .setRequestConditions(requestConditions).setTimeout(timeout), context);\n     }\n \n     /**\n      * Creates a new blob, or updates the content of an existing blob.\n      * <p>\n      * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n-     *\n-     * @param data The data to write to the blob.\n-     * @param length The exact length of the data. It is important that this value match precisely the length of the\n-     * data provided in the {@link InputStream}.\n      * @param options {@link BlobParallelUploadOptions}\n-     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      * @return Information about the uploaded block blob.\n      */\n-    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,\n-        Duration timeout, Context context) {\n-        BlobParallelUploadOptions blobParallelUploadOptions = options == null ? new BlobParallelUploadOptions()\n-            : options;\n+    public Response<BlockBlobItem> uploadWithResponse(BlobParallelUploadOptions options, Context context) {", "originalCommit": "26a638035dce602be5ebc2373050cd66803935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExODg1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439118858", "bodyText": "Yes-ish. There is a corresponding upload method on async, but we did not add an options bag upload for it in master. We added it only on sync to address a Snowflake issue which required us to return the BlockBlobItem. I will be updating this for both sync and async in the stg73 branch. I can add the async overload here now, though, if you'd prefer it maintain its symmetry", "author": "rickle-msft", "createdAt": "2020-06-11T23:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNDMxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439114315", "bodyText": "nit: add method-level javadocs.", "author": "srnagar", "createdAt": "2020-06-11T22:55:01Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobParallelUploadOptions.java", "diffHunk": "@@ -1,22 +1,58 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.storage.blob.models;\n+package com.azure.storage.blob.options;\n \n import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobRequestConditions;\n+import com.azure.storage.blob.models.ParallelTransferOptions;\n+import reactor.core.publisher.Flux;\n \n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n import java.util.Map;\n \n /**\n  * Extended options that may be passed when uploading a Block Blob in parallel.\n  */\n @Fluent\n public class BlobParallelUploadOptions {\n+    private final InputStream dataStream;\n+    private final long length;\n     private ParallelTransferOptions parallelTransferOptions;\n     private BlobHttpHeaders headers;\n     private Map<String, String> metadata;\n     private AccessTier tier;\n     private BlobRequestConditions requestConditions;\n+    private Duration timeout;\n+\n+    /**\n+     * @param dataStream The data to write to the blob.", "originalCommit": "26a638035dce602be5ebc2373050cd66803935dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzAzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439117031", "bodyText": "This should include Flux<ByteBuffer> as well and a ctor overload for it.", "author": "srnagar", "createdAt": "2020-06-11T23:03:44Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobParallelUploadOptions.java", "diffHunk": "@@ -1,22 +1,58 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.storage.blob.models;\n+package com.azure.storage.blob.options;\n \n import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.AccessTier;\n+import com.azure.storage.blob.models.BlobHttpHeaders;\n+import com.azure.storage.blob.models.BlobRequestConditions;\n+import com.azure.storage.blob.models.ParallelTransferOptions;\n+import reactor.core.publisher.Flux;\n \n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n import java.util.Map;\n \n /**\n  * Extended options that may be passed when uploading a Block Blob in parallel.\n  */\n @Fluent\n public class BlobParallelUploadOptions {\n+    private final InputStream dataStream;", "originalCommit": "26a638035dce602be5ebc2373050cd66803935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTMxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439119311", "bodyText": "See response to Alan's comment. Resolving per offline discussion", "author": "rickle-msft", "createdAt": "2020-06-11T23:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzIxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439117214", "bodyText": "Also, document that this will be ignored for async operations.", "author": "srnagar", "createdAt": "2020-06-11T23:04:19Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobParallelUploadOptions.java", "diffHunk": "@@ -97,4 +133,17 @@ public BlobParallelUploadOptions setRequestConditions(BlobRequestConditions requ\n         this.requestConditions = requestConditions;\n         return this;\n     }\n+\n+    public Duration getTimeout() {\n+        return this.timeout;\n+    }\n+\n+    /**\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.", "originalCommit": "26a638035dce602be5ebc2373050cd66803935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTE1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12113#discussion_r439119152", "bodyText": "I will add that in the stg73 branch when I update it there. Right now this only applies to sync, so it won't make sense to mention that.", "author": "rickle-msft", "createdAt": "2020-06-11T23:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExNzIxNA=="}], "type": "inlineReview"}, {"oid": "7c2854cf8f1908e8884f383f8e0bd7270bb581ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c2854cf8f1908e8884f383f8e0bd7270bb581ff", "message": "PR feedback", "committedDate": "2020-06-11T23:19:36Z", "type": "commit"}]}