{"pr_number": 9653, "pr_title": "Readme changes, Add sample for settlement of message plus more samples", "pr_createdAt": "2020-03-27T23:02:10Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9653", "timeline": [{"oid": "ec8c29f9f7fa1653e0b243a89b7dbad1e4e2a8b9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec8c29f9f7fa1653e0b243a89b7dbad1e4e2a8b9", "message": "Add sample for settlement of message", "committedDate": "2020-03-27T23:00:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MTgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r399581816", "bodyText": "Do on next is for side effects like logging, you should use the first overload of subscribe", "author": "conniey", "createdAt": "2020-03-27T23:28:50Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .doOnNext(received -> {", "originalCommit": "ec8c29f9f7fa1653e0b243a89b7dbad1e4e2a8b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14052e3a5d993db2a562c921c95ae56fd38f2b18", "url": "https://github.com/Azure/azure-sdk-for-java/commit/14052e3a5d993db2a562c921c95ae56fd38f2b18", "message": "send batch of messages", "committedDate": "2020-03-27T23:31:31Z", "type": "commit"}, {"oid": "c06cf2421e5272a418c52e21f7600719aa39e4f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c06cf2421e5272a418c52e21f7600719aa39e4f8", "message": "send batch of messages", "committedDate": "2020-03-27T23:32:17Z", "type": "commit"}, {"oid": "b1b80ca0c1c4fb85785f47e1268fbbe71c569671", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1b80ca0c1c4fb85785f47e1268fbbe71c569671", "message": "review comments", "committedDate": "2020-03-28T06:26:19Z", "type": "commit"}, {"oid": "99fe7a45e1cb074d63218596c04bed8ceb864d38", "url": "https://github.com/Azure/azure-sdk-for-java/commit/99fe7a45e1cb074d63218596c04bed8ceb864d38", "message": "review comments", "committedDate": "2020-03-28T20:26:04Z", "type": "commit"}, {"oid": "251c96130c99c69dad2b651554a277965439e7fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/251c96130c99c69dad2b651554a277965439e7fa", "message": "adding more samples", "committedDate": "2020-03-28T21:51:05Z", "type": "commit"}, {"oid": "35718719676d270167c199d6e5a169db4aeacfd8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/35718719676d270167c199d6e5a169db4aeacfd8", "message": "readme changes", "committedDate": "2020-03-28T22:05:00Z", "type": "commit"}, {"oid": "dd65518c2d31d4edd6fba36b17bfae7c705e3d58", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd65518c2d31d4edd6fba36b17bfae7c705e3d58", "message": "readme changes", "committedDate": "2020-03-28T22:17:47Z", "type": "commit"}, {"oid": "a49d81d867716a99ce02b1666ca70436f3ae1466", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a49d81d867716a99ce02b1666ca70436f3ae1466", "message": "undo eventshub readme changes", "committedDate": "2020-03-28T22:35:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5OTkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400299915", "bodyText": "nit: Consistency with spacing. Space should follow //. (ie. // This)", "author": "conniey", "createdAt": "2020-03-30T15:49:40Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {\n+                Instant latest = Instant.MIN;\n+\n+                // Simulate some sort of long processing. Sleep should not be used in production system.\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(15);\n+                    } catch (InterruptedException error) {\n+                        System.out.println(\"Error occurred while sleeping: \" + error);\n+                    }\n+                    latest = received.getLockedUntil();\n+                    System.out.println(\"Message Locked Until \" + latest);\n+                }\n+\n+                //This is application business logic to take action based on some application logic.", "originalCommit": "a49d81d867716a99ce02b1666ca70436f3ae1466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTU3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400301574", "bodyText": "You need to set \"isAutoComplete\" to false when building this client. Or it'll try to complete or abandon the message again.\n\"Duration.ofSeconds()\" is used multiple times and can be a final variable.", "author": "conniey", "createdAt": "2020-03-30T15:51:50Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {\n+                Instant latest = Instant.MIN;\n+\n+                // Simulate some sort of long processing. Sleep should not be used in production system.\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(15);\n+                    } catch (InterruptedException error) {\n+                        System.out.println(\"Error occurred while sleeping: \" + error);\n+                    }\n+                    latest = received.getLockedUntil();\n+                    System.out.println(\"Message Locked Until \" + latest);\n+                }\n+\n+                //This is application business logic to take action based on some application logic.\n+                // For demo purpose we are using a property for application logic.\n+                String propertyValue = \"UNDEFINED\";\n+                if (received.getProperties().get(\"SOME_USER_PROPERTY\") != null) {\n+                    propertyValue = (String) received.getProperties().get(\"SOME_USER_PROPERTY\");\n+                }\n+\n+                switch (propertyValue) {\n+                    case \"VALUE-1\":\n+                        System.out.println(\"Completing message.\");\n+                        receiverAsyncClient.complete(received).block(Duration.ofSeconds(15));", "originalCommit": "a49d81d867716a99ce02b1666ca70436f3ae1466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r400301951", "bodyText": "You sleep for 20 seconds, but each iteration is 15 seconds in the subscribe. Have you run these samples?", "author": "conniey", "createdAt": "2020-03-30T15:52:19Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {\n+                Instant latest = Instant.MIN;\n+\n+                // Simulate some sort of long processing. Sleep should not be used in production system.\n+                for (int i = 0; i < 3; i++) {\n+                    try {\n+                        TimeUnit.SECONDS.sleep(15);\n+                    } catch (InterruptedException error) {\n+                        System.out.println(\"Error occurred while sleeping: \" + error);\n+                    }\n+                    latest = received.getLockedUntil();\n+                    System.out.println(\"Message Locked Until \" + latest);\n+                }\n+\n+                //This is application business logic to take action based on some application logic.\n+                // For demo purpose we are using a property for application logic.\n+                String propertyValue = \"UNDEFINED\";\n+                if (received.getProperties().get(\"SOME_USER_PROPERTY\") != null) {\n+                    propertyValue = (String) received.getProperties().get(\"SOME_USER_PROPERTY\");\n+                }\n+\n+                switch (propertyValue) {\n+                    case \"VALUE-1\":\n+                        System.out.println(\"Completing message.\");\n+                        receiverAsyncClient.complete(received).block(Duration.ofSeconds(15));\n+                        break;\n+                    case \"VALUE-2\":\n+                        System.out.println(\"Abandon message.\");\n+                        receiverAsyncClient.abandon(received).block(Duration.ofSeconds(15));\n+                        break;\n+                    case \"VALUE-3\":\n+                        System.out.println(\"Defer message.\");\n+                        receiverAsyncClient.defer(received).block(Duration.ofSeconds(15));\n+                        break;\n+                    default:\n+                        System.out.println(\"Deadletter message.\");\n+                        receiverAsyncClient.deadLetter(received).block(Duration.ofSeconds(15));\n+                }\n+            });\n+\n+        // Receiving messages from the queue for a duration of 20 seconds.\n+        // Subscribe is not a blocking call so we sleep here so the program does not end.\n+        try {\n+            Thread.sleep(Duration.ofSeconds(20).toMillis());", "originalCommit": "a49d81d867716a99ce02b1666ca70436f3ae1466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "929730eaf6ffeea511c49d5b01f810940350e27c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/929730eaf6ffeea511c49d5b01f810940350e27c", "message": "Fixed the samples", "committedDate": "2020-03-31T04:42:14Z", "type": "commit"}, {"oid": "451024a4ac0c71674f1a07c4c12d2d8875723276", "url": "https://github.com/Azure/azure-sdk-for-java/commit/451024a4ac0c71674f1a07c4c12d2d8875723276", "message": "Fixed the samples", "committedDate": "2020-03-31T04:44:25Z", "type": "commit"}, {"oid": "9a00043ec1f51ccf74183130cd4dd0904746c553", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a00043ec1f51ccf74183130cd4dd0904746c553", "message": "Fixed the samples", "committedDate": "2020-03-31T04:58:40Z", "type": "commit"}, {"oid": "e596f09e9e6b4a0be9e1618c75283c9d18f2c1ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e596f09e9e6b4a0be9e1618c75283c9d18f2c1ee", "message": "readme changes", "committedDate": "2020-03-31T05:27:53Z", "type": "commit"}, {"oid": "47385b99a54b76741a091df4bf5116bb5f81c17a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/47385b99a54b76741a091df4bf5116bb5f81c17a", "message": "readme changes", "committedDate": "2020-03-31T05:46:34Z", "type": "commit"}, {"oid": "6209cacba14e4c8960fa4e173aec3b1b65ee606f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6209cacba14e4c8960fa4e173aec3b1b65ee606f", "message": "readme changes", "committedDate": "2020-03-31T05:48:39Z", "type": "commit"}, {"oid": "fff7d5158d1e314d818bb98950d74934e63e8e70", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fff7d5158d1e314d818bb98950d74934e63e8e70", "message": "readme changes", "committedDate": "2020-03-31T05:54:06Z", "type": "commit"}, {"oid": "9612ab38d1f070cf14b896adb240ec7c045233e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9612ab38d1f070cf14b896adb240ec7c045233e7", "message": "readme changes", "committedDate": "2020-03-31T06:04:20Z", "type": "commit"}, {"oid": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/313d5decbdbcb88f1202023fb1570881bb78c5f1", "message": "readme changes", "committedDate": "2020-03-31T06:07:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NDA5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401064097", "bodyText": "This is the same as the code sample above in 44 - 52.", "author": "conniey", "createdAt": "2020-03-31T16:50:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReadmeSamples.java", "diffHunk": "@@ -34,4 +38,31 @@ public void createAsynchronousServiceBusReceiver() {\n             .queueName(\"<< QUEUE NAME >>\")\n             .buildAsyncClient();\n     }\n+\n+    /**\n+     * Code sample for creating an asynchronous Service Bus receiver using {@link DefaultAzureCredentialBuilder}.\n+     */\n+    public void createAsynchronousServiceBusReceiverWithAzureIdentity() {\n+        TokenCredential credential = new DefaultAzureCredentialBuilder()\n+            .build();\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\", credential)\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+    }\n+\n+    /**\n+     * Code sample for creating an asynchronous Service Bus receiver using Aad.\n+     */\n+    public void createAsynchronousServiceBusReceiverWithAad() {\n+        DefaultAzureCredential credential = new DefaultAzureCredentialBuilder()", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3MDIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401370211", "bodyText": "Updated tis to use ClientSecretCredential because it provides a way to service principal and a client secret .", "author": "hemanttanwar", "createdAt": "2020-04-01T05:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NDA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NDczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401064731", "bodyText": "TIME_OUT -> TIMEOUT", "author": "conniey", "createdAt": "2020-03-31T16:51:10Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2NTEzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401065134", "bodyText": "Rather than using an environment variable, the template of how one should look is easier to digest. Some of the other samples use this template.", "author": "conniey", "createdAt": "2020-03-31T16:51:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);\n+\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTE0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401075146", "bodyText": "I don't think this is a good sample, I think it would be better to show chained reactor operations that could take longer than the 15 seconds.\nFor example:\nclient.receive().flatMap(message -> {\n    // A sample of processing the message followed by a persisting the message logic.\n    return Mono.delay(Duration.ofSeconds(15).thenReturn(message);\n}).onErrorContinue((message, error) -> {\n    // Handle the message that caused the error while processing above. In this case, we'll abandon it and let someone else handle it.\n    client.abandon(message).block();\n})\n.flatMap(message -> {\n  // This is a message that was successfully processed. So we complete it.\n  return client.complete(message);\n})\n.subscribe();", "author": "conniey", "createdAt": "2020-03-31T17:07:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleSample.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n+ * it. Settling of message include accept, defer and abandon the message as needed.\n+ */\n+public class ReceiveMessageAndSettleSample {\n+    private static final Duration TIME_OUT = Duration.ofSeconds(15);\n+\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .receiveMode(ReceiveMode.PEEK_LOCK)\n+            .isLockAutoRenewed(true)\n+            .queueName(\"<<queue-name>>\")\n+            .isAutoComplete(false)\n+            .maxAutoLockRenewalDuration(Duration.ofSeconds(2))\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(received -> {", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4ODQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402088486", "bodyText": "I do not think we can get message in onErrorContinue  . But I have changed the sample as you told.", "author": "hemanttanwar", "createdAt": "2020-04-02T06:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NzU1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401077557", "bodyText": "Should we describe that these messages are also autocompleted?", "author": "conniey", "createdAt": "2020-03-31T17:11:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAsyncSample.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import reactor.core.Disposable;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue using\n+ * connection string.\n+ */\n+public class ReceiveMessageAsyncSample {\n+    /**\n+     * Main method to invoke this demo on how to receive an {@link ServiceBusMessage} from an Azure Service Bus\n+     * Queue\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+\n+        // The connection string value can be obtained by:\n+        // 1. Going to your Service Bus namespace in Azure Portal.\n+        // 2. Go to \"Shared access policies\"\n+        // 3. Copy the connection string for the \"RootManageSharedAccessKey\" policy.\n+        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\");\n+\n+        // Create a receiver.\n+        // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n+        // \"<<queue-name>>\" will be the name of the Service Bus queue instance you created\n+        // inside the Service Bus namespace.\n+        ServiceBusReceiverAsyncClient receiverAsyncClient = new ServiceBusClientBuilder()\n+            .connectionString(connectionString)\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<<queue-name>>\")\n+            .buildAsyncClient();\n+\n+        Disposable subscription = receiverAsyncClient.receive()\n+            .subscribe(message -> {\n+                System.out.println(\"Received Message Id:\" + message.getMessageId());", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3ODIzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401078232", "bodyText": "It's not a stream. You received a batch of, at most, 5 messages from the service bus queue. The data structure we return could be streamed.", "author": "conniey", "createdAt": "2020-03-31T17:12:19Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageStreamSyncSample.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Sample demonstrates how to receive a stream of {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3ODk5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r401078992", "bodyText": "Some of your samples you prefix with Async or SyncSample. It is not clear that it is a sync sample until you delve into the code.\nI don't think you need to highlight \"ConnectionString\" in the title.", "author": "conniey", "createdAt": "2020-03-31T17:13:32Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/SendMessageBatchWithConnectionStringSample.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class SendMessageBatchWithConnectionStringSample {\n+\n+    /**\n+     * Main method to invoke this demo on how to send an {@link ServiceBusMessageBatch} to an Azure Service Bus.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {", "originalCommit": "313d5decbdbcb88f1202023fb1570881bb78c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2993a1960c59b271341766c70fad50e7270dcd9b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2993a1960c59b271341766c70fad50e7270dcd9b", "message": "renaming classes and review comments", "committedDate": "2020-04-01T15:52:37Z", "type": "commit"}, {"oid": "1e1a9ac44bc8adda13013199dd48cc738373522b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e1a9ac44bc8adda13013199dd48cc738373522b", "message": "change continue", "committedDate": "2020-04-01T20:50:41Z", "type": "commit"}, {"oid": "8f7013b271eca494a2e5d8ab0a81944101f57120", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8f7013b271eca494a2e5d8ab0a81944101f57120", "message": "review comments", "committedDate": "2020-04-02T06:24:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyOTEwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9653#discussion_r402429106", "bodyText": "ReceiveMessageSyncSample is sufficient. We are returning a collection, the batch is implied by the return type.", "author": "conniey", "createdAt": "2020-04-02T16:02:21Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageBatchSyncSample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "originalCommit": "8f7013b271eca494a2e5d8ab0a81944101f57120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "31e4b6fa7b9d30e5533603e3dd1592f7754d6b92", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31e4b6fa7b9d30e5533603e3dd1592f7754d6b92", "message": "readme changes", "committedDate": "2020-04-02T17:18:18Z", "type": "commit"}, {"oid": "1dc0ecbf825144cd30a9efcdec1f7582db37be19", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1dc0ecbf825144cd30a9efcdec1f7582db37be19", "message": "readme changes", "committedDate": "2020-04-02T18:50:51Z", "type": "commit"}]}