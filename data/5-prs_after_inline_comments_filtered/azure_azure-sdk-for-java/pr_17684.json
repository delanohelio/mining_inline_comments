{"pr_number": 17684, "pr_title": "Add tracing support for Service Bus processor", "pr_createdAt": "2020-11-19T11:12:06Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17684", "timeline": [{"oid": "5c5dc3a0cd737c0a882cbe2c9b76df549c6c5ae7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c5dc3a0cd737c0a882cbe2c9b76df549c6c5ae7", "message": "Add tracing support for SB processor", "committedDate": "2020-11-19T11:08:07Z", "type": "commit"}, {"oid": "cd6762c664e8a36c61beb094e8f57bf56404757e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd6762c664e8a36c61beb094e8f57bf56404757e", "message": "Make addContext packag-private", "committedDate": "2020-11-19T11:10:59Z", "type": "commit"}, {"oid": "e813f07c3d8664d577ef063c630f0fb752679b2e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e813f07c3d8664d577ef063c630f0fb752679b2e", "message": "Merge branch 'master' into sb-processor-tracing", "committedDate": "2020-11-19T19:17:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NzczNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#discussion_r527157734", "bodyText": "We already have similar function in MessagingUtil.startProcessTracingSpan , should we use that here ?", "author": "hemanttanwar", "createdAt": "2020-11-19T19:52:54Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessorClient.java", "diffHunk": "@@ -201,6 +232,54 @@ public void onComplete() {\n             });\n     }\n \n+    private void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal) {\n+        if (processSpanContext == null) {\n+            return;\n+        }\n+\n+        Optional<Object> spanScope = processSpanContext.getData(SCOPE_KEY);\n+        // Disposes of the scope when the trace span closes.\n+        if (!spanScope.isPresent() || !tracerProvider.isEnabled()) {\n+            return;\n+        }\n+        if (spanScope.get() instanceof Closeable) {\n+            Closeable close = (Closeable) processSpanContext.getData(SCOPE_KEY).get();\n+            try {\n+                close.close();\n+                tracerProvider.endSpan(processSpanContext, signal);\n+            } catch (IOException ioException) {\n+                logger.error(\"endTracingSpan().close() failed with an error %s\", ioException);\n+            }\n+\n+        } else {\n+            logger.warning(String.format(Locale.US,\n+                \"Process span scope type is not of type Closeable, but type: %s. Not closing the scope and span\",\n+                spanScope.get() != null ? spanScope.getClass() : \"null\"));\n+        }\n+    }\n+\n+    private Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage, String entityPath,", "originalCommit": "e813f07c3d8664d577ef063c630f0fb752679b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMwMDE1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#discussion_r527300159", "bodyText": "I think the method in MessageUtils seems to be unused and doesn't seem to be the right place to have this method in. So, keeping it close to where it's used. We can move this to the util class if there are more places this is needed.", "author": "srnagar", "createdAt": "2020-11-20T00:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NzczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2MDUwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#discussion_r527160508", "bodyText": "Is this how we are linking the received message with original sent message ?\nFor example , how it is done in python https://github.com/Azure/azure-sdk-for-python/pull/14777/files#diff-98cad0f4853c6ad2e604c286a38004b3e11ad75fa697cb86638b1c4944b509eeR285\nIf the received message has the application properties key = Diagnostic-Id populated, we should a new activity and add a link to the Process activity", "author": "hemanttanwar", "createdAt": "2020-11-19T19:57:46Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessorClient.java", "diffHunk": "@@ -201,6 +232,54 @@ public void onComplete() {\n             });\n     }\n \n+    private void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal) {\n+        if (processSpanContext == null) {\n+            return;\n+        }\n+\n+        Optional<Object> spanScope = processSpanContext.getData(SCOPE_KEY);\n+        // Disposes of the scope when the trace span closes.\n+        if (!spanScope.isPresent() || !tracerProvider.isEnabled()) {\n+            return;\n+        }\n+        if (spanScope.get() instanceof Closeable) {\n+            Closeable close = (Closeable) processSpanContext.getData(SCOPE_KEY).get();\n+            try {\n+                close.close();\n+                tracerProvider.endSpan(processSpanContext, signal);\n+            } catch (IOException ioException) {\n+                logger.error(\"endTracingSpan().close() failed with an error %s\", ioException);\n+            }\n+\n+        } else {\n+            logger.warning(String.format(Locale.US,\n+                \"Process span scope type is not of type Closeable, but type: %s. Not closing the scope and span\",\n+                spanScope.get() != null ? spanScope.getClass() : \"null\"));\n+        }\n+    }\n+\n+    private Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage, String entityPath,\n+                                            String fullyQualifiedNamespace) {\n+\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE);\n+\n+        spanContext = spanContext\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, fullyQualifiedNamespace)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);", "originalCommit": "e813f07c3d8664d577ef063c630f0fb752679b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMwMDYxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#discussion_r527300619", "bodyText": "Yes, the diagnostic id is linked on line 269. This is also how we are doing in Event Hubs.", "author": "srnagar", "createdAt": "2020-11-20T00:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2MDUwOA=="}], "type": "inlineReview"}, {"oid": "84992d68c740f826958cf07bc612b0303aa39985", "url": "https://github.com/Azure/azure-sdk-for-java/commit/84992d68c740f826958cf07bc612b0303aa39985", "message": "Resolve merge conflict", "committedDate": "2020-11-20T00:01:09Z", "type": "commit"}]}