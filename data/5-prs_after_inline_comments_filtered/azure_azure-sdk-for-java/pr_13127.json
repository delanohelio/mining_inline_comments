{"pr_number": 13127, "pr_title": "Mgmt Appplatform: custom domain, certificate and samples", "pr_createdAt": "2020-07-14T05:25:32Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13127", "timeline": [{"oid": "9daa9da4d6467132de833561c3658949e2981800", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9daa9da4d6467132de833561c3658949e2981800", "message": "add interface for left api", "committedDate": "2020-07-09T05:44:45Z", "type": "commit"}, {"oid": "918a07cef0a5ade6a7c21e9dc63b7b818d8180cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/918a07cef0a5ade6a7c21e9dc63b7b818d8180cc", "message": "add impl", "committedDate": "2020-07-09T05:52:50Z", "type": "commit"}, {"oid": "0a8c6cb2af9a2cba6bf130995758a645a250c5d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a8c6cb2af9a2cba6bf130995758a645a250c5d4", "message": "add test for custom domain", "committedDate": "2020-07-10T06:41:48Z", "type": "commit"}, {"oid": "2180617d113c266db615a2c1eea16a3aa2492a82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2180617d113c266db615a2c1eea16a3aa2492a82", "message": "update specs", "committedDate": "2020-07-10T06:42:42Z", "type": "commit"}, {"oid": "0483600d7440aaa49114a6f7fec458ae801453ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0483600d7440aaa49114a6f7fec458ae801453ba", "message": "Merge branch 'master' into appplatform", "committedDate": "2020-07-10T06:43:26Z", "type": "commit"}, {"oid": "d449dc60e0e053d152d10e50df00ae15d26d40ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d449dc60e0e053d152d10e50df00ae15d26d40ff", "message": "regen", "committedDate": "2020-07-10T06:53:19Z", "type": "commit"}, {"oid": "8e026a860b6c9ec75941b61b00fa3a4649c23754", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e026a860b6c9ec75941b61b00fa3a4649c23754", "message": "fix compile error", "committedDate": "2020-07-10T08:27:10Z", "type": "commit"}, {"oid": "3d0179fac538838f5116a0f083ae1498fc22b4a2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d0179fac538838f5116a0f083ae1498fc22b4a2", "message": "add app platform sample", "committedDate": "2020-07-14T05:24:20Z", "type": "commit"}, {"oid": "95996f1b11ee446d66c878b967aa26923225f0af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95996f1b11ee446d66c878b967aa26923225f0af", "message": "add samples.json remaining wrong filepath", "committedDate": "2020-07-14T06:40:00Z", "type": "commit"}, {"oid": "34aff11a965f7559ab3c27ee0a59482eb1f18c0f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/34aff11a965f7559ab3c27ee0a59482eb1f18c0f", "message": "fix checkstyle", "committedDate": "2020-07-14T07:05:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MDQ4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13127#discussion_r454150489", "bodyText": "Could be a problem if certificate with name does not exist. Though seems no better approach.", "author": "weidongxu-microsoft", "createdAt": "2020-07-14T07:12:50Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringServiceImpl.java", "diffHunk": "@@ -183,4 +193,39 @@ public SpringServiceImpl withoutGitConfig() {\n     protected Mono<ServiceResourceInner> getInnerAsync() {\n         return manager().inner().getServices().getByResourceGroupAsync(resourceGroupName(), name());\n     }\n+\n+    @Override\n+    public SpringServiceImpl withCertificate(String name, String keyVaultUri, String certNameInKeyVault) {\n+        this.addPostRunDependent(\n+            context -> certificates.createOrUpdateAsync(\n+                name,\n+                new CertificateProperties().withVaultUri(keyVaultUri).withKeyVaultCertName(certNameInKeyVault)\n+            ).cast(Indexable.class)\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringServiceImpl withCertificate(String name, String keyVaultUri,\n+                                             String certNameInKeyVault, String certVersion) {\n+        this.addPostRunDependent(\n+            context -> certificates.createOrUpdateAsync(\n+                name,\n+                new CertificateProperties()\n+                    .withVaultUri(keyVaultUri)\n+                    .withKeyVaultCertName(certNameInKeyVault)\n+                    .withCertVersion(certVersion)\n+            ).cast(Indexable.class)\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringServiceImpl withoutCertificate(String name) {\n+        this.addPostRunDependent(\n+            context -> certificates.deleteByNameAsync(name)\n+                .then(context.voidMono())\n+        );\n+        return this;\n+    }", "originalCommit": "95996f1b11ee446d66c878b967aa26923225f0af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2NzE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13127#discussion_r454167147", "bodyText": "It seems the deletion would be successful when the name does not exist.", "author": "ChenTanyi", "createdAt": "2020-07-14T07:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MDQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1NjIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13127#discussion_r454156229", "bodyText": "Should be in finally?", "author": "weidongxu-microsoft", "createdAt": "2020-07-14T07:24:21Z", "path": "sdk/management/samples/src/main/java/com/azure/resourcemanager/appplatform/samples/ManageSpringCloud.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.samples;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.util.Configuration;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.resourcemanager.Azure;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringService;\n+import com.azure.resourcemanager.appservice.models.AppServiceCertificateOrder;\n+import com.azure.resourcemanager.appservice.models.AppServiceDomain;\n+import com.azure.resourcemanager.dns.models.DnsZone;\n+import com.azure.resourcemanager.keyvault.models.CertificatePermissions;\n+import com.azure.resourcemanager.keyvault.models.Secret;\n+import com.azure.resourcemanager.keyvault.models.SecretPermissions;\n+import com.azure.resourcemanager.keyvault.models.Vault;\n+import com.azure.resourcemanager.resources.fluentcore.arm.CountryIsoCode;\n+import com.azure.resourcemanager.resources.fluentcore.arm.CountryPhoneCode;\n+import com.azure.resourcemanager.resources.fluentcore.arm.Region;\n+import com.azure.resourcemanager.resources.fluentcore.profile.AzureProfile;\n+import com.azure.resourcemanager.samples.Utils;\n+import com.azure.security.keyvault.certificates.CertificateClient;\n+import com.azure.security.keyvault.certificates.CertificateClientBuilder;\n+import com.azure.security.keyvault.certificates.models.ImportCertificateOptions;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import javax.xml.bind.DatatypeConverter;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.security.KeyStore;\n+import java.security.MessageDigest;\n+import java.util.Base64;\n+import java.util.Collections;\n+\n+/**\n+ * Azure App Platform sample for managing Spring Cloud.\n+ *  - Create a Spring Cloud Service\n+ *  - Create 3 app: gateway, auth-service, account-service from sample\n+ *  - Open public endpoint for gateway\n+ *  - Create a custom domain\n+ *  - Add a CNAME to the gateway fully qualified domain name\n+ *  - Order a certificate\n+ *  - Save the certificate to a key vault\n+ *  - Assign certificate to spring cloud\n+ *  - Assign custom domain to gateway endpoint\n+ */\n+public class ManageSpringCloud {\n+    private static final String PIGGYMETRICS_TAR_GZ_URL = \"https://github.com/weidongxu-microsoft/azure-sdk-for-java-management-tests/raw/master/spring-cloud/piggymetrics.tar.gz\";\n+    private static final String SPRING_CLOUD_SERVICE_PRINCIPAL = \"03b39d0f-4213-4864-a245-b1476ec03169\";\n+\n+    /**\n+     * Main function which runs the actual sample.\n+     * @param azure instance of the azure client\n+     * @param clientId the aad client id in azure instance\n+     * @return true if sample runs successfully\n+     */\n+    public static boolean runSample(Azure azure, String clientId) {\n+        final String rgName = azure.sdkContext().randomResourceName(\"rg\", 24);\n+        final String serviceName  = azure.sdkContext().randomResourceName(\"service\", 24);\n+        final Region region = Region.US_EAST;\n+        final String domainName = azure.sdkContext().randomResourceName(\"jsdkdemo-\", 20) + \".com\";\n+        final String certOrderName = azure.sdkContext().randomResourceName(\"cert\", 15);\n+        final String vaultName = azure.sdkContext().randomResourceName(\"vault\", 15);\n+        final String certName = azure.sdkContext().randomResourceName(\"cert\", 15);\n+\n+        try {\n+            azure.resourceGroups().define(rgName)\n+                .withRegion(region)\n+                .create();\n+\n+            //============================================================\n+            // Create a spring cloud service with 3 apps: gateway, auth-service, account-service\n+\n+            System.out.printf(\"Creating spring cloud service %s in resource group %s ...%n\", serviceName, rgName);\n+\n+            SpringService service = azure.springServices().define(serviceName)\n+                .withRegion(region)\n+                .withExistingResourceGroup(rgName)\n+                .create();\n+\n+            System.out.printf(\"Created spring cloud service %s%n\", service.name());\n+            Utils.print(service);\n+\n+            // get source code of a sample project\n+            File sourceCodeFolder = new File(\"piggymetrics\");\n+            if (!sourceCodeFolder.exists() || sourceCodeFolder.isFile()) {\n+                if (sourceCodeFolder.isFile() && !sourceCodeFolder.delete()) {\n+                    throw new IllegalStateException(\"could not delete piggymetrics file\");\n+                }\n+                extraTarGzSource(sourceCodeFolder, new URL(PIGGYMETRICS_TAR_GZ_URL));\n+            }\n+\n+            //============================================================\n+            // Create spring cloud app: gateway\n+\n+            System.out.printf(\"Creating spring cloud app gateway in resource group %s ...%n\", rgName);\n+            SpringApp gateway = service.apps().define(\"gateway\")\n+                .withDefaultPublicEndpoint()\n+                .withHttpsOnly()\n+                .deploySource(\"default\", sourceCodeFolder, \"gateway\")\n+                .create();\n+\n+            System.out.println(\"Created spring cloud service gateway\");\n+            Utils.print(gateway);\n+\n+            //============================================================\n+            // Create spring cloud app: auth-service\n+\n+            System.out.printf(\"Creating spring cloud app auth-service in resource group %s ...%n\", rgName);\n+            SpringApp authService = service.apps().define(\"auth-service\")\n+                .deploySource(\"default\", sourceCodeFolder, \"auth-service\")\n+                .create();\n+\n+            System.out.println(\"Created spring cloud service auth-service\");\n+            Utils.print(authService);\n+\n+            //============================================================\n+            // Create spring cloud app: account-service\n+\n+            System.out.printf(\"Creating spring cloud app account-service in resource group %s ...%n\", rgName);\n+            SpringApp accountService = service.apps().define(\"account-service\")\n+                .deploySource(\"default\", sourceCodeFolder, \"account-service\")\n+                .create();\n+\n+            System.out.println(\"Created spring cloud service account-service\");\n+            Utils.print(accountService);\n+\n+            //============================================================\n+            // Create App Service Domain and Certificate\n+\n+            System.out.println(\"Purchasing a domain \" + domainName + \"...\");\n+\n+            AppServiceDomain domain = azure.appServiceDomains().define(domainName)\n+                .withExistingResourceGroup(rgName)\n+                .defineRegistrantContact()\n+                    .withFirstName(\"Jon\")\n+                    .withLastName(\"Doe\")\n+                    .withEmail(\"jondoe@contoso.com\")\n+                    .withAddressLine1(\"123 4th Ave\")\n+                    .withCity(\"Redmond\")\n+                    .withStateOrProvince(\"WA\")\n+                    .withCountry(CountryIsoCode.UNITED_STATES)\n+                    .withPostalCode(\"98052\")\n+                    .withPhoneCountryCode(CountryPhoneCode.UNITED_STATES)\n+                    .withPhoneNumber(\"4258828080\")\n+                    .attach()\n+                .withDomainPrivacyEnabled(true)\n+                .withAutoRenewEnabled(false)\n+                .create();\n+            System.out.println(\"Purchased domain \" + domain.name());\n+            Utils.print(domain);\n+\n+            DnsZone dnsZone = azure.dnsZones().getById(domain.dnsZoneId());\n+            gateway.refresh();\n+\n+            System.out.printf(\"Updating dns with CNAME ssl.%s to %s%n\", domainName, gateway.fqdn());\n+            dnsZone.update()\n+                .withCNameRecordSet(\"ssl\", gateway.fqdn())\n+                .apply();\n+\n+            System.out.printf(\"Purchasing a certificate for *.%s and save to %s in key vault named %s ...%n\", domainName, certOrderName, vaultName);\n+            AppServiceCertificateOrder certificateOrder = azure.appServiceCertificateOrders().define(certOrderName)\n+                .withExistingResourceGroup(rgName)\n+                .withHostName(String.format(\"*.%s\", domainName))\n+                .withWildcardSku()\n+                .withDomainVerification(domain)\n+                .withNewKeyVault(vaultName, region)\n+                .withAutoRenew(true)\n+                .create();\n+            System.out.printf(\"Purchased certificate: *.%s ...%n\", domain.name());\n+            Utils.print(certificateOrder);\n+\n+            System.out.printf(\"Updating key vault %s with access from %s, %s%n\", vaultName, clientId, SPRING_CLOUD_SERVICE_PRINCIPAL);\n+            Vault vault = azure.vaults().getByResourceGroup(rgName, vaultName);\n+            vault.update()\n+                .defineAccessPolicy()\n+                    .forServicePrincipal(clientId)\n+                    .allowSecretAllPermissions()\n+                    .allowCertificateAllPermissions()\n+                    .attach()\n+                .defineAccessPolicy()\n+                    .forServicePrincipal(SPRING_CLOUD_SERVICE_PRINCIPAL)\n+                    .allowCertificatePermissions(CertificatePermissions.GET, CertificatePermissions.LIST)\n+                    .allowSecretPermissions(SecretPermissions.GET, SecretPermissions.LIST)\n+                    .attach()\n+                .apply();\n+            System.out.printf(\"Updated key vault %s%n\", vault.name());\n+            Utils.print(vault);\n+\n+            Secret secret = vault.secrets().getByName(certOrderName);\n+\n+            byte[] certificate = Base64.getDecoder().decode(secret.value());\n+\n+            String thumbprint = secret.tags().get(\"Thumbprint\");\n+            if (thumbprint == null || thumbprint.isEmpty()) {\n+                KeyStore store = KeyStore.getInstance(\"PKCS12\");\n+                store.load(new ByteArrayInputStream(certificate), null);\n+                String alias = Collections.list(store.aliases()).get(0);\n+                thumbprint = DatatypeConverter.printHexBinary(MessageDigest.getInstance(\"SHA-1\").digest(store.getCertificate(alias).getEncoded()));\n+            }\n+\n+            System.out.printf(\"Get certificate: %s%n\", secret.value());\n+            System.out.printf(\"Certificate Thumbprint: %s%n\", thumbprint);\n+\n+            // upload certificate\n+            CertificateClient certificateClient = new CertificateClientBuilder()\n+                .vaultUrl(vault.vaultUri())\n+                .pipeline(service.manager().httpPipeline())\n+                .buildClient();\n+\n+            System.out.printf(\"Uploading certificate to %s in key vault ...%n\", certName);\n+            certificateClient.importCertificate(\n+                new ImportCertificateOptions(certName, certificate)\n+                    .setEnabled(true)\n+            );\n+\n+            //============================================================\n+            // Update Certificate and Custom Domain for Spring Cloud\n+            System.out.println(\"Updating Spring Cloud Service with certificate ...\");\n+            service.update()\n+                .withCertificate(certName, vault.vaultUri(), certName)\n+                .apply();\n+\n+            System.out.printf(\"Updating Spring Cloud App with domain ssl.%s ...\", domainName);\n+            gateway.update()\n+                .withCustomDomain(String.format(\"ssl.%s\", domainName), thumbprint)\n+                .apply();\n+\n+            System.out.printf(\"Successfully expose domain ssl.%s\", domainName);\n+\n+            return true;\n+        } catch (Exception e) {\n+            System.err.println(e.getMessage());\n+            e.printStackTrace();\n+        } finally {\n+            try {\n+                System.out.println(\"Delete Resource Group: \" + rgName);\n+                azure.resourceGroups().beginDeleteByName(rgName);\n+            } catch (NullPointerException npe) {\n+                System.out.println(\"Did not create any resources in Azure. No clean up is necessary\");\n+            } catch (Exception g) {\n+                g.printStackTrace();\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Main entry point.\n+     * @param args the parameters\n+     */\n+    public static void main(String[] args) {\n+        try {\n+            //=============================================================\n+            // Authenticate\n+\n+            final AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\n+            final TokenCredential credential = new DefaultAzureCredentialBuilder()\n+                .authorityHost(profile.environment().getActiveDirectoryEndpoint())\n+                .build();\n+\n+            Azure azure = Azure\n+                .configure()\n+                .withLogLevel(HttpLogDetailLevel.BASIC)\n+                .authenticate(credential, profile)\n+                .withDefaultSubscription();\n+\n+            // Print selected subscription\n+            System.out.println(\"Selected subscription: \" + azure.subscriptionId());\n+\n+            runSample(azure, Configuration.getGlobalConfiguration().get(Configuration.PROPERTY_AZURE_CLIENT_ID));\n+        } catch (Exception e) {\n+            System.out.println(e.getMessage());\n+            e.printStackTrace();\n+        }\n+    }\n+\n+\n+    private static void extraTarGzSource(File folder, URL url) throws IOException {\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.connect();\n+        try (TarArchiveInputStream inputStream = new TarArchiveInputStream(new GzipCompressorInputStream(connection.getInputStream()))) {\n+            TarArchiveEntry entry;\n+            while ((entry = inputStream.getNextTarEntry()) != null) {\n+                if (entry.isDirectory()) {\n+                    continue;\n+                }\n+                File file = new File(folder, entry.getName());\n+                File parent = file.getParentFile();\n+                if (!parent.exists()) {\n+                    parent.mkdirs();\n+                }\n+                try (OutputStream outputStream = new FileOutputStream(file)) {\n+                    IOUtils.copy(inputStream, outputStream);\n+                }\n+            }\n+        }\n+        connection.disconnect();", "originalCommit": "95996f1b11ee446d66c878b967aa26923225f0af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwNzU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13127#discussion_r454207577", "bodyText": "done", "author": "ChenTanyi", "createdAt": "2020-07-14T08:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1NjIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzA0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13127#discussion_r454163040", "bodyText": "Not a clear preference. But it might be better to flatten the properties and return its field in this class.", "author": "weidongxu-microsoft", "createdAt": "2020-07-14T07:37:23Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/models/SpringAppDomain.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.models;\n+\n+import com.azure.resourcemanager.appplatform.fluent.inner.CustomDomainResourceInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.ExternalChildResource;\n+import com.azure.resourcemanager.resources.fluentcore.model.HasInner;\n+\n+/** An immutable client-side representation of an Azure Spring App Custom Domain. */\n+public interface SpringAppDomain\n+    extends ExternalChildResource<SpringAppDomain, SpringApp>,\n+    HasInner<CustomDomainResourceInner> {\n+    /** @return the properties of the spring app custom domain */\n+    CustomDomainProperties properties();", "originalCommit": "95996f1b11ee446d66c878b967aa26923225f0af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2ODcyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13127#discussion_r454168725", "bodyText": "I think it is not important interface, so remains the properties. Firstly I would even like to return the inner type from get and list.", "author": "ChenTanyi", "createdAt": "2020-07-14T07:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzA0MA=="}], "type": "inlineReview"}, {"oid": "94c202dc4eca189e34afdc83d42e26c3e22187bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/94c202dc4eca189e34afdc83d42e26c3e22187bd", "message": "fix checkstyle", "committedDate": "2020-07-14T07:49:32Z", "type": "commit"}, {"oid": "d07d1647b2b1cc5fd7156a34e23973342a975d70", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d07d1647b2b1cc5fd7156a34e23973342a975d70", "message": "disconnect in finally", "committedDate": "2020-07-14T07:49:51Z", "type": "commit"}]}