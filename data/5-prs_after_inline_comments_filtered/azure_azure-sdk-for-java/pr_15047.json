{"pr_number": 15047, "pr_title": "Feat(client): Add Telemetry APIs", "pr_createdAt": "2020-09-10T19:12:06Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15047", "timeline": [{"oid": "d0614128f1c5aeb71b9ecbd87e2c4170f56a00bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0614128f1c5aeb71b9ecbd87e2c4170f56a00bd", "message": "Add Telemetry APIs", "committedDate": "2020-09-10T19:04:27Z", "type": "commit"}, {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d827eef4632b80caf11411bf6e8925ff48cc1786", "message": "Update API comments", "committedDate": "2020-09-10T19:11:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486581654", "bodyText": "To match our current pattern, this class should be called \"PublishTelemetryRequestOptions\" much like how we have \"UpdateComponentRequestOptions\" and other similar ones", "author": "timtay-microsoft", "createdAt": "2020-09-10T19:23:40Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {", "originalCommit": "d827eef4632b80caf11411bf6e8925ff48cc1786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NjI2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486586268", "bodyText": "Whether we need a separate options class for \"PublishTelemetryRequestOptions\" and \"PublishComponentTelemetryRequestOptions\" is also worth considering. I wouldn't expect to need that separation though", "author": "timtay-microsoft", "createdAt": "2020-09-10T19:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5MDY3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486590670", "bodyText": "There is no property in the options that separates the logic from one API to the other. I will keep using the same type.", "author": "azabbasi", "createdAt": "2020-09-10T19:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486581947", "bodyText": "@abhipsaMisra mentioned earlier that request options objects like these should not be fluent and should not be marked as fluent.", "author": "timtay-microsoft", "createdAt": "2020-09-10T19:24:16Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent", "originalCommit": "d827eef4632b80caf11411bf6e8925ff48cc1786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MjU2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486582563", "bodyText": "no, request options are considered model classes (input/output to API surface) so they should be fluent ... I confirmed it with Srikanta.", "author": "azabbasi", "createdAt": "2020-09-10T19:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwMzI0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486603246", "bodyText": "Yeah, Azad synced up with Srikanta, and he explained that from client libraries' perspective, everything that is a request/ response in our public API is a model. It doesn't have anything to do with the models that we actually send over the wire.", "author": "abhipsaMisra", "createdAt": "2020-09-10T20:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4Mjg3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486582875", "bodyText": "Timestamp is one word, so no need to camelcase the Stamp here and everywhere", "author": "timtay-microsoft", "createdAt": "2020-09-10T19:26:00Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {\n+\n+    /**\n+     * A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * Defaults to a random guid.\n+     */\n+    private String messageId = UUID.randomUUID().toString();\n+\n+    /**\n+     * An RFC 3339 timestamp that identifies the time the telemetry was measured.\n+     * It defaults to the current date/time UTC.\n+     */\n+    private OffsetDateTime timeStamp = OffsetDateTime.now(ZoneOffset.UTC);\n+\n+    /**\n+     * Gets the message Id.\n+     * @return A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     */\n+    public String getMessageId() {\n+        return this.messageId;\n+    }\n+\n+    /**\n+     * Gets the timestamp.\n+     * @return The timestamp that identifies the time the telemetry was measured.\n+     */\n+    public OffsetDateTime getTimeStamp() {\n+        return this.timeStamp;\n+    }\n+\n+    /**\n+     * Set the message Id\n+     * @param messageId A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setMessageId(String messageId) {\n+        this.messageId = messageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the timestamp\n+     * @param timeStamp The timestamp that identifies the time the telemetry was measured.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setTimeStamp(OffsetDateTime timeStamp) {", "originalCommit": "d827eef4632b80caf11411bf6e8925ff48cc1786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MzcwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486583700", "bodyText": "yeah, I thought so .. we have it incorrectly cased in .NET SDK", "author": "azabbasi", "createdAt": "2020-09-10T19:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4Mjg3NQ=="}], "type": "inlineReview"}, {"oid": "affaa952135c2ad3ad136f5d6152826d14080b1f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/affaa952135c2ad3ad136f5d6152826d14080b1f", "message": "Address comments", "committedDate": "2020-09-10T19:29:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486584775", "bodyText": "Careful here. The PL expects an Object, so this payload string will be serialized before being set as the http request payload, which isn't what we want.", "author": "timtay-microsoft", "createdAt": "2020-09-10T19:29:46Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,112 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            telemetryOptions.getMessageId(),\n+            payload,\n+            telemetryOptions.getTimeStamp().toString(),\n+            context);\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendComponentTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            componentName,\n+            telemetryOptions.getMessageId(),\n+            payload,", "originalCommit": "d827eef4632b80caf11411bf6e8925ff48cc1786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486607649", "bodyText": "We have overridden the default serialization behavior to not do this extra serialization -> if you pass in an object of type String, which is a valid json, then it'll be sent over the wire as-is.", "author": "abhipsaMisra", "createdAt": "2020-09-10T20:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzk5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486607992", "bodyText": "FYI - https://github.com/abhipsaMisra/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java#L26", "author": "abhipsaMisra", "createdAt": "2020-09-10T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ=="}], "type": "inlineReview"}, {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/82029a035cdf0932af8fad1ada0fb1d8558c11d3", "message": "Update DigitalTwinsAsyncClient.java", "committedDate": "2020-09-10T19:39:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486604250", "bodyText": "Do we need this public API? Isn't the one on line 1381 enough? (max overload + with response)", "author": "abhipsaMisra", "createdAt": "2020-09-10T20:08:53Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "originalCommit": "82029a035cdf0932af8fad1ada0fb1d8558c11d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNzAwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486607003", "bodyText": "I think we still need this and the withResponse that takes all and returns a response ...", "author": "azabbasi", "createdAt": "2020-09-10T20:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNTgzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486615837", "bodyText": "but shouldn't the max overload return a response; why do we need the variation where the max overload returns without response?", "author": "abhipsaMisra", "createdAt": "2020-09-10T20:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzY5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486627697", "bodyText": "Brought it up with Srikanta, waiting for a response. Will remove if unnecessary", "author": "azabbasi", "createdAt": "2020-09-10T20:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyOTU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486629566", "bodyText": "I'm with Abhipsa on this one. Optional parameters are only present on the \"WithResponse\" overloads in our APIs so far, so I don't see this one as needed", "author": "timtay-microsoft", "createdAt": "2020-09-10T20:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NjAxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486656016", "bodyText": "Done.", "author": "azabbasi", "createdAt": "2020-09-10T21:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486630879", "bodyText": "Don't you need to pre-emptively serialize this string so that the PL deserializes it back into the string that the user provided?", "author": "timtay-microsoft", "createdAt": "2020-09-10T21:01:06Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            publishTelemetryRequestOptions.getMessageId(),\n+            payload,", "originalCommit": "82029a035cdf0932af8fad1ada0fb1d8558c11d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTA5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486631092", "bodyText": "You did it in the publishComponentTelemetry but not this method", "author": "timtay-microsoft", "createdAt": "2020-09-10T21:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMjU5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486632590", "bodyText": "yeah .... :D", "author": "azabbasi", "createdAt": "2020-09-10T21:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ=="}], "type": "inlineReview"}, {"oid": "ff38b3b8d49ef3ef979e0c9036a1f1eaedf22606", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff38b3b8d49ef3ef979e0c9036a1f1eaedf22606", "message": "Update DigitalTwinsAsyncClient.java", "committedDate": "2020-09-10T21:04:45Z", "type": "commit"}, {"oid": "7c44895d31b3cd17233493045e0b82436fff5e37", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c44895d31b3cd17233493045e0b82436fff5e37", "message": "Update ComponentsAsyncTests.java", "committedDate": "2020-09-10T21:45:22Z", "type": "commit"}, {"oid": "ec9fc765d9f62d04ada4fa677e50471b532c0fab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec9fc765d9f62d04ada4fa677e50471b532c0fab", "message": "Remove unnecessary APIs", "committedDate": "2020-09-10T21:56:09Z", "type": "commit"}, {"oid": "c09ff123be1713d46ddd9980e9e256351d4a9259", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c09ff123be1713d46ddd9980e9e256351d4a9259", "message": "Update DigitalTwinsClient.java", "committedDate": "2020-09-10T22:04:45Z", "type": "commit"}, {"oid": "43b34e80107b90ce5e2dfcf3cb9c5b1d2e23ddd2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43b34e80107b90ce5e2dfcf3cb9c5b1d2e23ddd2", "message": "Update DigitalTwinsClient.java", "committedDate": "2020-09-10T22:05:42Z", "type": "commit"}, {"oid": "d028ba2523803af23c97001e85bad3f904eaec2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d028ba2523803af23c97001e85bad3f904eaec2f", "message": "Add ServiceMethod annotations", "committedDate": "2020-09-10T22:10:21Z", "type": "commit"}, {"oid": "6cef198757cac41d8ef7bb73f2ed2a7c8172e8d9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cef198757cac41d8ef7bb73f2ed2a7c8172e8d9", "message": "More missing serviceMethod annotations", "committedDate": "2020-09-10T22:12:03Z", "type": "commit"}]}