{"pr_number": 7254, "pr_title": "Added codesnippet for sync client and builder", "pr_createdAt": "2020-01-08T00:26:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7254", "timeline": [{"oid": "b1cf0f14fcc982d8e70929279e90be2389e0114f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1cf0f14fcc982d8e70929279e90be2389e0114f", "message": "add codesnippet for sync client and builder", "committedDate": "2020-01-08T00:23:37Z", "type": "commit"}, {"oid": "2ce75a2770805760844642a1e79910d64b40d733", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ce75a2770805760844642a1e79910d64b40d733", "message": "update api use cases", "committedDate": "2020-01-08T00:39:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxODk2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364018960", "bodyText": "why is the method getting changed here?", "author": "samvaity", "createdAt": "2020-01-08T00:40:41Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -51,35 +51,27 @@\n      * Returns the detected language and a numeric score between zero and one. Scores close to one indicate 100%\n      * certainty that the identified language is true.\n      *\n-     * @param text The text to be analyzed.\n-     * @return the {@link DetectLanguageResult detected language} of the text.\n-     * @throws NullPointerException if {@code text} is {@code null}.\n-     */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public DetectLanguageResult detectLanguage(String text) {\n-        return detectLanguage(text, client.getDefaultCountryHint());\n-    }\n-\n-    /**\n-     * Returns the detected language and a numeric score between zero and one when the hint of country specified.\n-     * Scores close to one indicate 100% certainty that the identified language is true.\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Detects the languages of single input text</p>\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String}\n      *\n      * @param text The text to be analyzed.\n-     * @param countryHint Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to \"US\" if not\n-     * specified.\n-     *\n      * @return the {@link DetectLanguageResult detected language} of the text.\n      * @throws NullPointerException if {@code text} is {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public DetectLanguageResult detectLanguage(String text, String countryHint) {", "originalCommit": "2ce75a2770805760844642a1e79910d64b40d733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMzM3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364023379", "bodyText": "I think this API is not required. It only takes input text and country hint. If you take a look at other APIs. You will find this API is an extra API. Either of AsyncClient doesn't have it or recognizeEntiteis, PII entities, LInked Entities, Extract KeyPhrases and Analyze Sentiments don't have it either.", "author": "mssfang", "createdAt": "2020-01-08T01:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxODk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxOTAwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364019001", "bodyText": "Code Sample, here and rest of the file.", "author": "samvaity", "createdAt": "2020-01-08T00:40:48Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -51,35 +51,27 @@\n      * Returns the detected language and a numeric score between zero and one. Scores close to one indicate 100%\n      * certainty that the identified language is true.\n      *\n-     * @param text The text to be analyzed.\n-     * @return the {@link DetectLanguageResult detected language} of the text.\n-     * @throws NullPointerException if {@code text} is {@code null}.\n-     */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public DetectLanguageResult detectLanguage(String text) {\n-        return detectLanguage(text, client.getDefaultCountryHint());\n-    }\n-\n-    /**\n-     * Returns the detected language and a numeric score between zero and one when the hint of country specified.\n-     * Scores close to one indicate 100% certainty that the identified language is true.\n+     * <p><strong>Code Samples</strong></p>", "originalCommit": "2ce75a2770805760844642a1e79910d64b40d733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMzg2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364023867", "bodyText": "I don't get this?\n <p><strong>Code Samples</strong></p>", "author": "mssfang", "createdAt": "2020-01-08T01:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxOTAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyNjg3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364026878", "bodyText": "should be singular", "author": "mssfang", "createdAt": "2020-01-08T01:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxOTAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxOTkxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364019912", "bodyText": "twice?", "author": "samvaity", "createdAt": "2020-01-08T00:45:05Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java", "diffHunk": "@@ -46,6 +46,14 @@\n  * {@link #credential(TokenCredential) credential(TokenCredential)} give the builder access credential.\n  * </p>\n  *\n+ * <p><strong>Instantiating an asynchronous Text Analytics Client</strong></p>\n+ *\n+ * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation}\n+ *\n+ * <p><strong>Instantiating a synchronous Text Analytics Client</strong></p>", "originalCommit": "2ce75a2770805760844642a1e79910d64b40d733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMzU2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364023564", "bodyText": "one is for Async and another is for Sync. By comparing the length, you will see it intuitively.", "author": "mssfang", "createdAt": "2020-01-08T01:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxOTkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMDA5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364020092", "bodyText": "nit: can remove final\nhere and other examples.", "author": "samvaity", "createdAt": "2020-01-08T00:45:41Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -3,25 +3,1133 @@\n \n package com.azure.ai.textanalytics;\n \n+import com.azure.ai.textanalytics.models.AnalyzeSentimentResult;\n+import com.azure.ai.textanalytics.models.DetectLanguageInput;\n+import com.azure.ai.textanalytics.models.DetectLanguageResult;\n+import com.azure.ai.textanalytics.models.DetectedLanguage;\n+import com.azure.ai.textanalytics.models.DocumentResultCollection;\n+import com.azure.ai.textanalytics.models.ExtractKeyPhraseResult;\n+import com.azure.ai.textanalytics.models.LinkedEntity;\n+import com.azure.ai.textanalytics.models.NamedEntity;\n+import com.azure.ai.textanalytics.models.RecognizeEntitiesResult;\n+import com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextDocumentBatchStatistics;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.TextSentiment;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.Context;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n /**\n- * Code snippet for {@link TextAnalyticsClient}\n+ * Code snippets for {@link TextAnalyticsClient} and {@link TextAnalyticsClientBuilder}\n  */\n public class TextAnalyticsClientJavaDocCodeSnippets {\n     private static final String SUBSCRIPTION_KEY = null;\n     private static final String ENDPOINT = null;\n+    private final TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder().buildClient();\n+\n+    /**\n+     * Code snippet for creating a {@link TextAnalyticsClient} with pipeline\n+     */\n+    public void createAsyncTextAnalyticsClientWithPipeline() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .pipeline(pipeline)\n+            .endpoint(ENDPOINT)\n+            .subscriptionKey(SUBSCRIPTION_KEY)\n+            .buildClient();\n+        // END:  com.azure.ai.textanalytics.TextAnalyticsClient.pipeline.instantiation\n+    }\n \n     /**\n      * Code snippet for creating a {@link TextAnalyticsClient}\n-     *\n-     * @return The TextAnalyticsClient object.\n      */\n-    public TextAnalyticsClient createTextAnalyticsClient() {\n+    public void createTextAnalyticsClient() {\n         // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.instantiation\n         TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n             .subscriptionKey(SUBSCRIPTION_KEY)\n             .endpoint(ENDPOINT)\n             .buildClient();\n         // END: com.azure.ai.textanalytics.TextAnalyticsClient.instantiation\n-        return textAnalyticsClient;\n+    }\n+\n+    // Languages\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguage(String)}\n+     */\n+    public void detectLanguageSingleText() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String\n+        final DetectLanguageResult detectLanguageResult = textAnalyticsClient.detectLanguage(\"Bonjour tout le monde\");\n+        for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+            System.out.printf(\"Detected languages name: %s, ISO 6391 name: %s, score: %s.%n\",\n+                detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguageWithResponse(String, String, Context)}\n+     */\n+    public void detectLanguageForSingleInputTextAndCountryHintWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageWithResponse#String-String-Context\n+        final DetectLanguageResult detectLanguageResult = textAnalyticsClient.detectLanguageWithResponse(\n+            \"This text is in English\", \"US\", Context.NONE).getValue();\n+        for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+            System.out.printf(\"Detected languages name: %s, ISO 6391 name: %s, score: %s.%n\",\n+                detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageWithResponse#String-String-Context\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguages(List)}\n+     */\n+    public void detectLanguageForListInputTexts() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguages#List\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\",\n+            \"Este es un document escrito en Espa\u00f1ol.\");\n+        final DocumentResultCollection<DetectLanguageResult> detectLanguageResults =\n+            textAnalyticsClient.detectLanguages(textInputs);\n+\n+        // Batch statistics\n+        final TextDocumentBatchStatistics batchStatistics = detectLanguageResults.getStatistics();\n+        System.out.printf(\n+            \"A batch of document statistics, document count: %s, transaction count: %s, valid document count: %s.%n\",\n+            batchStatistics.getDocumentCount(),\n+            batchStatistics.getTransactionCount(),\n+            batchStatistics.getValidDocumentCount());\n+\n+        for (DetectLanguageResult detectLanguageResult : detectLanguageResults) {\n+            System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguagesWithResponse(List, String, Context)}\n+     */\n+    public void detectLanguageForListInputTextsWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguagesWithResponse#List-String-Context\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\",\n+            \"Este es un document escrito en Espa\u00f1ol.\");\n+        final DocumentResultCollection<DetectLanguageResult> detectLanguageResults =", "originalCommit": "2ce75a2770805760844642a1e79910d64b40d733", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMDI5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364020297", "bodyText": "Can make the snippet shorter?\nhere and other examples.", "author": "samvaity", "createdAt": "2020-01-08T00:46:27Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -3,25 +3,1133 @@\n \n package com.azure.ai.textanalytics;\n \n+import com.azure.ai.textanalytics.models.AnalyzeSentimentResult;\n+import com.azure.ai.textanalytics.models.DetectLanguageInput;\n+import com.azure.ai.textanalytics.models.DetectLanguageResult;\n+import com.azure.ai.textanalytics.models.DetectedLanguage;\n+import com.azure.ai.textanalytics.models.DocumentResultCollection;\n+import com.azure.ai.textanalytics.models.ExtractKeyPhraseResult;\n+import com.azure.ai.textanalytics.models.LinkedEntity;\n+import com.azure.ai.textanalytics.models.NamedEntity;\n+import com.azure.ai.textanalytics.models.RecognizeEntitiesResult;\n+import com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextDocumentBatchStatistics;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.TextSentiment;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.Context;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n /**\n- * Code snippet for {@link TextAnalyticsClient}\n+ * Code snippets for {@link TextAnalyticsClient} and {@link TextAnalyticsClientBuilder}\n  */\n public class TextAnalyticsClientJavaDocCodeSnippets {\n     private static final String SUBSCRIPTION_KEY = null;\n     private static final String ENDPOINT = null;\n+    private final TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder().buildClient();\n+\n+    /**\n+     * Code snippet for creating a {@link TextAnalyticsClient} with pipeline\n+     */\n+    public void createAsyncTextAnalyticsClientWithPipeline() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .pipeline(pipeline)\n+            .endpoint(ENDPOINT)\n+            .subscriptionKey(SUBSCRIPTION_KEY)\n+            .buildClient();\n+        // END:  com.azure.ai.textanalytics.TextAnalyticsClient.pipeline.instantiation\n+    }\n \n     /**\n      * Code snippet for creating a {@link TextAnalyticsClient}\n-     *\n-     * @return The TextAnalyticsClient object.\n      */\n-    public TextAnalyticsClient createTextAnalyticsClient() {\n+    public void createTextAnalyticsClient() {\n         // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.instantiation\n         TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n             .subscriptionKey(SUBSCRIPTION_KEY)\n             .endpoint(ENDPOINT)\n             .buildClient();\n         // END: com.azure.ai.textanalytics.TextAnalyticsClient.instantiation\n-        return textAnalyticsClient;\n+    }\n+\n+    // Languages\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguage(String)}\n+     */\n+    public void detectLanguageSingleText() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String\n+        final DetectLanguageResult detectLanguageResult = textAnalyticsClient.detectLanguage(\"Bonjour tout le monde\");\n+        for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+            System.out.printf(\"Detected languages name: %s, ISO 6391 name: %s, score: %s.%n\",\n+                detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage#String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguageWithResponse(String, String, Context)}\n+     */\n+    public void detectLanguageForSingleInputTextAndCountryHintWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageWithResponse#String-String-Context\n+        final DetectLanguageResult detectLanguageResult = textAnalyticsClient.detectLanguageWithResponse(\n+            \"This text is in English\", \"US\", Context.NONE).getValue();\n+        for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+            System.out.printf(\"Detected languages name: %s, ISO 6391 name: %s, score: %s.%n\",\n+                detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageWithResponse#String-String-Context\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguages(List)}\n+     */\n+    public void detectLanguageForListInputTexts() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguages#List\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\",\n+            \"Este es un document escrito en Espa\u00f1ol.\");\n+        final DocumentResultCollection<DetectLanguageResult> detectLanguageResults =\n+            textAnalyticsClient.detectLanguages(textInputs);\n+\n+        // Batch statistics\n+        final TextDocumentBatchStatistics batchStatistics = detectLanguageResults.getStatistics();\n+        System.out.printf(\n+            \"A batch of document statistics, document count: %s, transaction count: %s, valid document count: %s.%n\",\n+            batchStatistics.getDocumentCount(),\n+            batchStatistics.getTransactionCount(),\n+            batchStatistics.getValidDocumentCount());\n+\n+        for (DetectLanguageResult detectLanguageResult : detectLanguageResults) {\n+            System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectLanguagesWithResponse(List, String, Context)}\n+     */\n+    public void detectLanguageForListInputTextsWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguagesWithResponse#List-String-Context\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\",\n+            \"Este es un document escrito en Espa\u00f1ol.\");\n+        final DocumentResultCollection<DetectLanguageResult> detectLanguageResults =\n+            textAnalyticsClient.detectLanguagesWithResponse(textInputs, \"US\", Context.NONE).getValue();\n+\n+        // Batch statistics\n+        final TextDocumentBatchStatistics batchStatistics = detectLanguageResults.getStatistics();\n+        System.out.printf(\n+            \"A batch of document statistics, document count: %s, transaction count: %s, valid document count: %s.%n\",\n+            batchStatistics.getDocumentCount(),\n+            batchStatistics.getTransactionCount(),\n+            batchStatistics.getValidDocumentCount());\n+\n+        for (DetectLanguageResult detectLanguageResult : detectLanguageResults) {\n+            System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n+            }\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguagesWithResponse#List-String-Context\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectBatchLanguages(List)}\n+     */\n+    public void detectLanguageForListDetectedLanguageInput() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectBatchLanguages#List\n+        final List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        final DocumentResultCollection<DetectLanguageResult> detectLanguageResults =\n+            textAnalyticsClient.detectBatchLanguages(detectLanguageInputs);\n+\n+        // Batch statistics\n+        final TextDocumentBatchStatistics batchStatistics = detectLanguageResults.getStatistics();\n+        System.out.printf(\n+            \"A batch of document statistics, document count: %s, transaction count: %s, valid document count: %s.%n\",\n+            batchStatistics.getDocumentCount(),\n+            batchStatistics.getTransactionCount(),\n+            batchStatistics.getValidDocumentCount());\n+\n+        for (DetectLanguageResult detectLanguageResult : detectLanguageResults) {\n+            System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n+            }\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectBatchLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#detectBatchLanguagesWithResponse(List, TextAnalyticsRequestOptions, Context)}\n+     */\n+    public void detectLanguageForListDetectedLanguageInputWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions-Context\n+        final List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        final DocumentResultCollection<DetectLanguageResult> detectLanguageResults =\n+            textAnalyticsClient.detectBatchLanguagesWithResponse(detectLanguageInputs,\n+                new TextAnalyticsRequestOptions().setShowStatistics(true), Context.NONE).getValue();\n+\n+        // Batch statistics\n+        final TextDocumentBatchStatistics batchStatistics = detectLanguageResults.getStatistics();\n+        System.out.printf(\n+            \"A batch of document statistics, document count: %s, transaction count: %s, valid document count: %s.%n\",\n+            batchStatistics.getDocumentCount(),\n+            batchStatistics.getTransactionCount(),\n+            batchStatistics.getValidDocumentCount());\n+\n+        for (DetectLanguageResult detectLanguageResult : detectLanguageResults) {\n+            System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        }\n+        // END: com.azure.ai.textanalytics.TextAnalyticsClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions-Context\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#recognizeEntities(String)}\n+     */\n+    public void recognizeEntitiesSingleText() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities#String\n+        final RecognizeEntitiesResult recognizeEntitiesResult =\n+            textAnalyticsClient.recognizeEntities(\"Satya Nadella is the CEO of Microsoft\");\n+        for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+            System.out.printf(\n+                \"Recognized entity: %s, entity type: %s, entity subtype: %s, offset: %s, length: %s, score: %s.%n\",\n+                entity.getText(),\n+                entity.getType(),\n+                entity.getSubtype() == null || entity.getSubtype().isEmpty() ? \"N/A\" : entity.getSubtype(),", "originalCommit": "2ce75a2770805760844642a1e79910d64b40d733", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyODI1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364028251", "bodyText": "Is this supposed to be in Async file?", "author": "samvaity", "createdAt": "2020-01-08T01:23:04Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -3,25 +3,1133 @@\n \n package com.azure.ai.textanalytics;\n \n+import com.azure.ai.textanalytics.models.AnalyzeSentimentResult;\n+import com.azure.ai.textanalytics.models.DetectLanguageInput;\n+import com.azure.ai.textanalytics.models.DetectLanguageResult;\n+import com.azure.ai.textanalytics.models.DetectedLanguage;\n+import com.azure.ai.textanalytics.models.DocumentResultCollection;\n+import com.azure.ai.textanalytics.models.ExtractKeyPhraseResult;\n+import com.azure.ai.textanalytics.models.LinkedEntity;\n+import com.azure.ai.textanalytics.models.NamedEntity;\n+import com.azure.ai.textanalytics.models.RecognizeEntitiesResult;\n+import com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextDocumentBatchStatistics;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.TextSentiment;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.Context;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n /**\n- * Code snippet for {@link TextAnalyticsClient}\n+ * Code snippets for {@link TextAnalyticsClient} and {@link TextAnalyticsClientBuilder}\n  */\n public class TextAnalyticsClientJavaDocCodeSnippets {\n     private static final String SUBSCRIPTION_KEY = null;\n     private static final String ENDPOINT = null;\n+    private final TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder().buildClient();\n+\n+    /**\n+     * Code snippet for creating a {@link TextAnalyticsClient} with pipeline\n+     */\n+    public void createAsyncTextAnalyticsClientWithPipeline() {", "originalCommit": "2ce75a2770805760844642a1e79910d64b40d733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyOTI1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7254#discussion_r364029252", "bodyText": "sorry. wrong method name, async should be removed", "author": "mssfang", "createdAt": "2020-01-08T01:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyODI1MQ=="}], "type": "inlineReview"}, {"oid": "17ae68665b9bde421569dc699a4997a6afed5068", "url": "https://github.com/Azure/azure-sdk-for-java/commit/17ae68665b9bde421569dc699a4997a6afed5068", "message": "fixed feedbacks", "committedDate": "2020-01-08T01:28:23Z", "type": "commit"}, {"oid": "0c669d5b539216561c87ff2a3cac38739422436b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c669d5b539216561c87ff2a3cac38739422436b", "message": "fixed tests for sentiment", "committedDate": "2020-01-08T02:30:36Z", "type": "commit"}, {"oid": "3d20d9b8dab8035a429493f8657e65014dd47f73", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d20d9b8dab8035a429493f8657e65014dd47f73", "message": "readme", "committedDate": "2020-01-08T19:05:33Z", "type": "commit"}, {"oid": "6c8c24f13a4bf0f25d0de5b925bd91451cab7d0b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c8c24f13a4bf0f25d0de5b925bd91451cab7d0b", "message": "update readme and changelog", "committedDate": "2020-01-08T20:38:33Z", "type": "commit"}, {"oid": "5c6d3b61eca762205347ea4440fc88f29d78e750", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c6d3b61eca762205347ea4440fc88f29d78e750", "message": "update line number for end", "committedDate": "2020-01-08T21:51:47Z", "type": "commit"}]}