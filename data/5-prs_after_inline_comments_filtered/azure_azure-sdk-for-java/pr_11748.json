{"pr_number": 11748, "pr_title": "Hiding accessToken key in Body", "pr_createdAt": "2020-06-03T15:05:34Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11748", "timeline": [{"oid": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "message": "hiding accessToken key in Body", "committedDate": "2020-06-03T15:01:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5Mjg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434692885", "bodyText": "It'll be more overhead but I think turning the stopword String into a new class, such as RecordingRedactor, where it contains the stopword and a function to redact would clean the code up a lot and make it more easily extended as new requests come in.\nclass RecordingRedactor {\n  private final String stopword;\n\n  public boolean shouldRedact(String redactableString);\n  public String redact(String redactableString);\n}", "author": "alzimmermsft", "createdAt": "2020-06-03T16:19:03Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -217,15 +222,35 @@ private void captureRequestHeaders(HttpHeaders requestHeaders, Map<String, Strin\n         }\n     }\n \n-    private String redactUserDelegationKey(String content) {\n-        if (!content.contains(\"UserDelegationKey\")) {\n-            return content;\n+    private String redactSensitiveContent(String content) {\n+        // replace all sensitive string key in the black list\n+        for (String blackString : BLACK_LIST) {", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzczMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027732", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5Mjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0Nzc4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434747782", "bodyText": "Should this be only called ACCESS_TOKEN_KEY_PATTERN?", "author": "samvaity", "createdAt": "2020-06-03T17:49:19Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -49,10 +49,15 @@\n     private static final String STATUS_CODE = \"StatusCode\";\n     private static final String BODY = \"Body\";\n     private static final String SIG = \"sig\";\n+    private static final String USER_DELEGATION_KEY = \"UserDelegationKey\";\n+    private static final String ACCESS_TOKEN = \"accessToken\";\n+    private static final String REDACTED_UTF_8 =  Base64.getEncoder().encodeToString(\"REDACTED\".getBytes(StandardCharsets.UTF_8));\n+    private static final String[] BLACK_LIST = {USER_DELEGATION_KEY, ACCESS_TOKEN};\n \n     private static final Pattern DELEGATIONKEY_KEY_PATTERN = Pattern.compile(\"(?:<Value>)(.*)(?:</Value>)\");\n     private static final Pattern DELEGATIONKEY_CLIENTID_PATTERN = Pattern.compile(\"(?:<SignedOid>)(.*)(?:</SignedOid>)\");\n     private static final Pattern DELEGATIONKEY_TENANTID_PATTERN = Pattern.compile(\"(?:<SignedTid>)(.*)(?:</SignedTid>)\");\n+    private static final Pattern DELEGATIONKEY_ACCESS_TOKEN_PATTERN = Pattern.compile(\"(?:\\\"accessToken\\\":\\\")(.*?)(?:\\\",|\\\"})\");", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODU5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434748595", "bodyText": "Should we write simple unit test for this?", "author": "samvaity", "createdAt": "2020-06-03T17:50:34Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -217,15 +222,35 @@ private void captureRequestHeaders(HttpHeaders requestHeaders, Map<String, Strin\n         }\n     }\n \n-    private String redactUserDelegationKey(String content) {\n-        if (!content.contains(\"UserDelegationKey\")) {\n-            return content;\n+    private String redactSensitiveContent(String content) {\n+        // replace all sensitive string key in the black list\n+        for (String blackString : BLACK_LIST) {\n+            if (content.contains(blackString)) {\n+                switch (blackString) {\n+                    case USER_DELEGATION_KEY:\n+                        content = redactUserDelegationKey(content);\n+                        break;\n+                    case ACCESS_TOKEN:", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzY0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027640", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434748963", "bodyText": "Missing copy authorization changes in this PR?", "author": "samvaity", "createdAt": "2020-06-03T17:51:10Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -49,10 +49,15 @@\n     private static final String STATUS_CODE = \"StatusCode\";", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5NTY3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434895679", "bodyText": "I was thinking to have the core-test change only in this PR. But I can add the FR changes in this PR as well if you want.", "author": "mssfang", "createdAt": "2020-06-03T22:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5OTUyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434899528", "bodyText": "I think go ahead and do it. It will help to confirm the changes and the need for this change.", "author": "samvaity", "createdAt": "2020-06-03T22:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODk2Mw=="}], "type": "inlineReview"}, {"oid": "0dd0af68d80fbde5eaace8d331b440147a905818", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dd0af68d80fbde5eaace8d331b440147a905818", "message": "add FR changes", "committedDate": "2020-06-04T00:27:50Z", "type": "commit"}, {"oid": "dcdb105e4e41a9a71f54c8249f1d089742bae5a4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcdb105e4e41a9a71f54c8249f1d089742bae5a4", "message": "resolve conflict", "committedDate": "2020-06-04T05:57:03Z", "type": "commit"}, {"oid": "34aaed07571bd34d3f4c22f36de4ace4524c7e80", "url": "https://github.com/Azure/azure-sdk-for-java/commit/34aaed07571bd34d3f4c22f36de4ace4524c7e80", "message": "add RecordingRedactor without test", "committedDate": "2020-06-04T17:27:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMzQ5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435413494", "bodyText": "This should be FormRecognizerException now after the exception changes?", "author": "samvaity", "createdAt": "2020-06-04T17:05:41Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientTest.java", "diffHunk": "@@ -260,95 +270,95 @@ public void beginTrainingUnlabeledResult(HttpClient httpClient, FormRecognizerSe\n     /**\n      * Verifies the result of the copy operation for valid parameters.\n      */\n-    // Fix with https://github.com/Azure/azure-sdk-for-java/issues/11637\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void beginCopy(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-    //         SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-    //             client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n-    //         syncPoller.waitForCompletion();\n-    //         CustomFormModel actualModel = syncPoller.getFinalResult();\n-    //\n-    //         beginCopyRunner((resourceId, resourceRegion) -> {\n-    //             Mono<CopyAuthorization> target =\n-    //                 client.getCopyAuthorization(resourceId, resourceRegion);\n-    //             PollerFlux<OperationResult,\n-    //                 CustomFormModelInfo> copyPoller = client.beginCopyModel(actualModel.getModelId(), target.block());\n-    //             CustomFormModelInfo copyModel = copyPoller.getSyncPoller().getFinalResult();\n-    //             assertEquals(target.block().getModelId(), copyModel.getModelId());\n-    //             assertNotNull(actualModel.getRequestedOn());\n-    //             assertNotNull(actualModel.getCompletedOn());\n-    //             assertEquals(CustomFormModelStatus.READY, copyModel.getStatus());\n-    //         });\n-    //     });\n-    // }\n-    //\n-    // /**\n-    //  * Verifies the Invalid region ErrorResponseException is thrown for invalid region input to copy operation.\n-    //  */\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void beginCopyInvalidRegion(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-    //         SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-    //             client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n-    //         syncPoller.waitForCompletion();\n-    //         CustomFormModel actualModel = syncPoller.getFinalResult();\n-    //\n-    //         beginCopyInvalidRegionRunner((resourceId, resourceRegion) -> {\n-    //             Mono<CopyAuthorization> target =\n-    //                 client.getCopyAuthorization(resourceId, resourceRegion);\n-    //             PollerFlux<OperationResult,\n-    //                 CustomFormModelInfo> copyPoller = client.beginCopyModel(actualModel.getModelId(), target.block());\n-    //\n-    //             Exception thrown = assertThrows(ErrorResponseException.class,\n-    //                 () -> copyPoller.getSyncPoller().getFinalResult());\n-    //             assertEquals(EXPECTED_COPY_REQUEST_INVALID_TARGET_RESOURCE_REGION, thrown.getMessage());\n-    //         });\n-    //     });\n-    // }\n-    //\n-    // /**\n-    //  * Verifies HttpResponseException is thrown for invalid region input to copy operation.\n-    //  */\n-    // @SuppressWarnings(\"unchecked\")\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void beginCopyIncorrectRegion(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-    //         SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-    //             client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n-    //         syncPoller.waitForCompletion();\n-    //         CustomFormModel actualModel = syncPoller.getFinalResult();\n-    //\n-    //         beginCopyIncorrectRegionRunner((resourceId, resourceRegion) -> {\n-    //             Mono<CopyAuthorization> target = client.getCopyAuthorization(resourceId, resourceRegion);\n-    //             HttpResponseException thrown = assertThrows(HttpResponseException.class,\n-    //                 () -> client.beginCopyModel(actualModel.getModelId(), target.block())\n-    //                     .getSyncPoller().getFinalResult());\n-    //             List<ErrorInformation> errorInformationList = (List<ErrorInformation>) thrown.getValue();\n-    //             assertEquals(\"ResourceResolverError\", errorInformationList.get(0).getCode());\n-    //             assertEquals(\"Copy operation returned with a failed status\", thrown.getMessage());\n-    //         });\n-    //     });\n-    // }\n-    //\n-    // /**\n-    //  * Verifies the result of the copy authorization for valid parameters.\n-    //  */\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void copyAuthorization(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginCopyRunner((resourceId, resourceRegion) ->\n-    //         StepVerifier.create(client.getCopyAuthorization(resourceId, resourceRegion))\n-    //             .assertNext(copyAuthorization ->\n-    //                 validateCopyAuthorizationResult(resourceId, resourceRegion, copyAuthorization))\n-    //             .verifyComplete()\n-    //     );\n-    // }\n+     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     void beginCopy(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+         client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+         beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+             SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                 client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n+             syncPoller.waitForCompletion();\n+             CustomFormModel actualModel = syncPoller.getFinalResult();\n+\n+             beginCopyRunner((resourceId, resourceRegion) -> {\n+                 CopyAuthorization target =\n+                     client.getCopyAuthorization(resourceId, resourceRegion).block();\n+\n+                 PollerFlux<OperationResult, CustomFormModelInfo> copyPoller =\n+                     client.beginCopyModel(actualModel.getModelId(), target);\n+                 CustomFormModelInfo copyModel = copyPoller.getSyncPoller().getFinalResult();\n+                 assertNotNull(target.getModelId(), copyModel.getModelId());\n+                 assertNotNull(actualModel.getRequestedOn());\n+                 assertNotNull(actualModel.getCompletedOn());\n+                 assertEquals(CustomFormModelStatus.READY, copyModel.getStatus());\n+             });\n+         });\n+     }\n+\n+     /**\n+      * Verifies the Invalid region ErrorResponseException is thrown for invalid region input to copy operation.\n+      */\n+     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     void beginCopyInvalidRegion(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+         client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+         beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+             SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                 client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n+             syncPoller.waitForCompletion();\n+             CustomFormModel actualModel = syncPoller.getFinalResult();\n+\n+             beginCopyInvalidRegionRunner((resourceId, resourceRegion) -> {\n+                 Mono<CopyAuthorization> target =\n+                     client.getCopyAuthorization(resourceId, resourceRegion);\n+                 PollerFlux<OperationResult,\n+                     CustomFormModelInfo> copyPoller = client.beginCopyModel(actualModel.getModelId(), target.block());\n+\n+                 Exception thrown = assertThrows(ErrorResponseException.class,\n+                     () -> copyPoller.getSyncPoller().getFinalResult());\n+                 assertEquals(EXPECTED_COPY_REQUEST_INVALID_TARGET_RESOURCE_REGION, thrown.getMessage());\n+             });\n+         });\n+     }\n+\n+     /**\n+      * Verifies HttpResponseException is thrown for invalid region input to copy operation.", "originalCommit": "0dd0af68d80fbde5eaace8d331b440147a905818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzM5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027396", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMzQ5NA=="}], "type": "inlineReview"}, {"oid": "b4b98f26a69e063f073c6e0036978571512213ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4b98f26a69e063f073c6e0036978571512213ea", "message": "resolve conflict", "committedDate": "2020-06-05T05:32:34Z", "type": "commit"}, {"oid": "c122cca6b3dec50f004c17ddb97e4cdb8af6297a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c122cca6b3dec50f004c17ddb97e4cdb8af6297a", "message": "replace REDACTED directly", "committedDate": "2020-06-05T06:39:57Z", "type": "commit"}, {"oid": "9d07bcc4e241e624a623fab1ccb172364c1be112", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d07bcc4e241e624a623fab1ccb172364c1be112", "message": "add accessToken unit tests", "committedDate": "2020-06-05T07:01:20Z", "type": "commit"}, {"oid": "b4223f4266fe336163ef20715b3953a16b8e0f78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4223f4266fe336163ef20715b3953a16b8e0f78", "message": "enhance the unit tests for RecordingRedactor", "committedDate": "2020-06-05T17:21:14Z", "type": "commit"}, {"oid": "233da4b1bacd184eaf2f5c025dbb87d077d4633d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/233da4b1bacd184eaf2f5c025dbb87d077d4633d", "message": "checkstyle", "committedDate": "2020-06-05T17:35:01Z", "type": "commit"}, {"oid": "1273d0b18ea055f53491999390f7569dd37b1754", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1273d0b18ea055f53491999390f7569dd37b1754", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into Core-hideSensitiveInfo", "committedDate": "2020-06-05T17:55:06Z", "type": "commit"}, {"oid": "c3703f368afbc445cde8d759164b9d10d3b4b351", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3703f368afbc445cde8d759164b9d10d3b4b351", "message": "use the correct unreleased version format", "committedDate": "2020-06-05T18:42:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMjk2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436102969", "bodyText": "You could simplify this by doing something like this:\n    private static final List<Function<String, String>> RECORDING_REDACTORS = loadRedactors();\n\n    private static List<Function<String, String>> loadRedactors() {\n        List<Function<String, String>> redactors = new ArrayList<>();\n        redactors.add(Redactor::redactAccessToken);\n        redactors.add(Redactor::redactDelegationKey);\n        return redactors;\n    }\n\n    private static String redactDelegationKey(String content) {\n        // redact content\n    }\n\n    private static String redactAccessToken(String content) {\n        // redact content\n    }\n\n    public String redact(String redactableString) {\n        String redactedString = redactableString;\n        for (Function<String, String> redactor : RECORDING_REDACTORS) {\n            redactedString = redactor.apply(redactedString);\n        }\n        return redactedString;\n    }", "author": "srnagar", "createdAt": "2020-06-05T18:46:31Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/models/RecordingRedactor.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.test.models;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class used to redact the sensitive information when recording\n+ */\n+public class RecordingRedactor {\n+    private static final String ACCESS_TOKEN = \"accessToken\";\n+    private static final String REDACTED = \"REDACTED\";\n+    private static final String REDACTED_UTF_8 = Base64.getEncoder().encodeToString(\"REDACTED\".getBytes(StandardCharsets.UTF_8));\n+    private static final String USER_DELEGATION_KEY = \"UserDelegationKey\";\n+\n+    private static final Pattern ACCESS_TOKEN_KEY_PATTERN = Pattern.compile(\"(?:\\\"accessToken\\\":\\\")(.*?)(?:\\\",|\\\"})\");\n+    private static final Pattern DELEGATIONKEY_KEY_PATTERN = Pattern.compile(\"(?:<Value>)(.*)(?:</Value>)\");\n+    private static final Pattern DELEGATIONKEY_CLIENTID_PATTERN = Pattern.compile(\"(?:<SignedOid>)(.*)(?:</SignedOid>)\");\n+    private static final Pattern DELEGATIONKEY_TENANTID_PATTERN = Pattern.compile(\"(?:<SignedTid>)(.*)(?:</SignedTid>)\");\n+\n+    private static final String[] STOP_WORDS = {ACCESS_TOKEN, USER_DELEGATION_KEY};\n+\n+    /**\n+     * Redact the sensitive information.\n+     *\n+     * @param redactableString the content that will be scan through\n+     * @return the redacted content\n+     */\n+    public String redact(String redactableString) {\n+\n+        for (String stopWord : STOP_WORDS) {\n+            if (redactableString.contains(stopWord)) {\n+                switch (stopWord) {\n+                    case USER_DELEGATION_KEY:\n+                        redactableString = redactUserDelegationKey(redactableString);\n+                        break;\n+                    case ACCESS_TOKEN:\n+                        redactableString = redactAccessToken(redactableString);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+        return redactableString;\n+    }", "originalCommit": "1273d0b18ea055f53491999390f7569dd37b1754", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "279def8b2105796ae2f66bef5ad6802e46a57eb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/279def8b2105796ae2f66bef5ad6802e46a57eb4", "message": "add an unit test for non-sensitive data contend", "committedDate": "2020-06-05T18:47:43Z", "type": "commit"}, {"oid": "cbef4522e8789e578c7f8be0a47c0ba4e1ecd17f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbef4522e8789e578c7f8be0a47c0ba4e1ecd17f", "message": "using Function Apply", "committedDate": "2020-06-05T19:35:54Z", "type": "commit"}, {"oid": "f9f035d3f5b7dca2b9da45fb1f643b69f04b3c69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9f035d3f5b7dca2b9da45fb1f643b69f04b3c69", "message": "rearrange unreleased_ tag", "committedDate": "2020-06-05T19:37:50Z", "type": "commit"}, {"oid": "30989cbc995dffa90bff224de43599df1a6b397b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/30989cbc995dffa90bff224de43599df1a6b397b", "message": "resolve conflict", "committedDate": "2020-06-05T21:21:23Z", "type": "commit"}]}