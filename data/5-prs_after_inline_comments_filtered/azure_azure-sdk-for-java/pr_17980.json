{"pr_number": 17980, "pr_title": "Handle conditional access.", "pr_createdAt": "2020-12-04T09:35:24Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17980", "timeline": [{"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5900420d2cbb50fd63bb95e1975ff227d00ff30d", "message": "Handle conditional access.", "committedDate": "2020-12-04T09:23:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTU3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169573", "bodyText": "errorCodes", "author": "chenrujun", "createdAt": "2020-12-07T01:11:02Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTU5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169594", "bodyText": "traceId", "author": "chenrujun", "createdAt": "2020-12-07T01:11:12Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;\n+\n+    private final String timestamp;\n+\n+    private final String trace_id;", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTY1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169658", "bodyText": "correlationId", "author": "chenrujun", "createdAt": "2020-12-07T01:11:28Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;\n+\n+    private final String timestamp;\n+\n+    private final String trace_id;\n+\n+    private final String correlation_id;", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169714", "bodyText": "subError", "author": "chenrujun", "createdAt": "2020-12-07T01:11:42Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;\n+\n+    private final String timestamp;\n+\n+    private final String trace_id;\n+\n+    private final String correlation_id;\n+\n+    private final String sub_error;", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MDc0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537170746", "bodyText": "this.oauth2ErrorConverter.setErrorConverter(errorConverter); can execute only one time, not on every execution of handleError. And variable errorConverter can be deleted.", "author": "chenrujun", "createdAt": "2020-12-07T01:16:05Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        return this.defaultErrorHandler.hasError(response);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {\n+            this.defaultErrorHandler.handleError(response);\n+        }\n+\n+        // A Bearer Token Error may be in the WWW-Authenticate response header\n+        OAuth2Error oauth2Error = this.readErrorFromWwwAuthenticate(response.getHeaders());\n+        if (oauth2Error == null) {\n+            this.oauth2ErrorConverter.setErrorConverter(errorConverter);", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTM5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537171397", "bodyText": "These variable used only one time, can be deleted and use string directly.", "author": "chenrujun", "createdAt": "2020-12-07T01:18:52Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        return this.defaultErrorHandler.hasError(response);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {\n+            this.defaultErrorHandler.handleError(response);\n+        }\n+\n+        // A Bearer Token Error may be in the WWW-Authenticate response header\n+        OAuth2Error oauth2Error = this.readErrorFromWwwAuthenticate(response.getHeaders());\n+        if (oauth2Error == null) {\n+            this.oauth2ErrorConverter.setErrorConverter(errorConverter);\n+            oauth2Error = this.oauth2ErrorConverter.read(OAuth2Error.class, response);\n+        }\n+        throw new OAuth2AuthorizationException(oauth2Error);\n+    }\n+\n+    private OAuth2Error readErrorFromWwwAuthenticate(HttpHeaders headers) {\n+\n+        String wwwAuthenticateHeader = headers.getFirst(HttpHeaders.WWW_AUTHENTICATE);\n+        if (!StringUtils.hasText(wwwAuthenticateHeader)) {\n+            return null;\n+        }\n+\n+        BearerTokenError bearerTokenError;\n+        try {\n+            bearerTokenError = BearerTokenError.parse(wwwAuthenticateHeader);\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+\n+        String errorCode = bearerTokenError.getCode() != null ?\n+            bearerTokenError.getCode() : OAuth2ErrorCodes.SERVER_ERROR;\n+        String errorDescription = bearerTokenError.getDescription();\n+        String errorUri = bearerTokenError.getURI() != null ?\n+            bearerTokenError.getURI().toString() : null;\n+\n+        return new OAuth2Error(errorCode, errorDescription, errorUri);\n+    }\n+\n+\n+    private static class AADOAuth2ErrorConverter implements Converter<Map<String, String>, OAuth2Error> {\n+        private final String ERROR = \"error\";\n+        private final String ERROR_DESCRIPTION = \"error_description\";\n+        private final String ERROR_CODES = \"error_codes\";\n+        private final String TIMESTAMP = \"timestamp\";\n+        private final String TRACE_ID = \"trace_id\";\n+        private final String CORRELATION_ID = \"correlation_id\";\n+        private final String ERROR_URI = \"error_uri\";\n+        private final String SUB_ERROR = \"suberror\";\n+        private final String CLAIMS = \"claims\";", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537171671", "bodyText": "Please confirm whether suberror is right. Maybe is should be sub_error.", "author": "chenrujun", "createdAt": "2020-12-07T01:19:54Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        return this.defaultErrorHandler.hasError(response);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {\n+            this.defaultErrorHandler.handleError(response);\n+        }\n+\n+        // A Bearer Token Error may be in the WWW-Authenticate response header\n+        OAuth2Error oauth2Error = this.readErrorFromWwwAuthenticate(response.getHeaders());\n+        if (oauth2Error == null) {\n+            this.oauth2ErrorConverter.setErrorConverter(errorConverter);\n+            oauth2Error = this.oauth2ErrorConverter.read(OAuth2Error.class, response);\n+        }\n+        throw new OAuth2AuthorizationException(oauth2Error);\n+    }\n+\n+    private OAuth2Error readErrorFromWwwAuthenticate(HttpHeaders headers) {\n+\n+        String wwwAuthenticateHeader = headers.getFirst(HttpHeaders.WWW_AUTHENTICATE);\n+        if (!StringUtils.hasText(wwwAuthenticateHeader)) {\n+            return null;\n+        }\n+\n+        BearerTokenError bearerTokenError;\n+        try {\n+            bearerTokenError = BearerTokenError.parse(wwwAuthenticateHeader);\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+\n+        String errorCode = bearerTokenError.getCode() != null ?\n+            bearerTokenError.getCode() : OAuth2ErrorCodes.SERVER_ERROR;\n+        String errorDescription = bearerTokenError.getDescription();\n+        String errorUri = bearerTokenError.getURI() != null ?\n+            bearerTokenError.getURI().toString() : null;\n+\n+        return new OAuth2Error(errorCode, errorDescription, errorUri);\n+    }\n+\n+\n+    private static class AADOAuth2ErrorConverter implements Converter<Map<String, String>, OAuth2Error> {\n+        private final String ERROR = \"error\";\n+        private final String ERROR_DESCRIPTION = \"error_description\";\n+        private final String ERROR_CODES = \"error_codes\";\n+        private final String TIMESTAMP = \"timestamp\";\n+        private final String TRACE_ID = \"trace_id\";\n+        private final String CORRELATION_ID = \"correlation_id\";\n+        private final String ERROR_URI = \"error_uri\";\n+        private final String SUB_ERROR = \"suberror\";", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537171965", "bodyText": "Can we write unit-test for hasError and handleError?", "author": "chenrujun", "createdAt": "2020-12-07T01:21:11Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MjQ1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537172458", "bodyText": "AzureOAuth2Error", "author": "chenrujun", "createdAt": "2020-12-07T01:23:07Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MjQ4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537172487", "bodyText": "AzureOAuth2ResponseErrorHandler", "author": "chenrujun", "createdAt": "2020-12-07T01:23:24Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3OTg1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537179857", "bodyText": "To make it work, please:\n\nWrite a new java class named AzureOAuth2AuthorizationRequestResolver, just like AADOAuth2AuthorizationRequestResolver.\nUpdate AzureOAuth2Configuration.configure(...)", "author": "chenrujun", "createdAt": "2020-12-07T01:53:01Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthenticationFailureHandler.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n+import org.springframework.security.web.authentication.AuthenticationFailureHandler;\n+import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\n+import org.springframework.security.web.savedrequest.DefaultSavedRequest;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+public class AzureOAuthenticationFailureHandler implements AuthenticationFailureHandler {\n+    private static final String DEFAULT_FAILURE_URL = \"/login?error\";\n+    private final AuthenticationFailureHandler defaultHandler;\n+\n+    public AzureOAuthenticationFailureHandler() {\n+        this.defaultHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);\n+    }\n+\n+    @Override\n+    public void onAuthenticationFailure(HttpServletRequest request,\n+                                        HttpServletResponse response,\n+                                        AuthenticationException exception) throws IOException, ServletException {\n+\n+        String claims = Optional.of(exception)\n+            .map(e -> (OAuth2AuthenticationException) e)\n+            .map(OAuth2AuthenticationException::getError)\n+            .map(e -> (AzureOAuthError)e)\n+            .map(AzureOAuthError ::getClaims)\n+            .orElse(null);\n+\n+        if (claims == null) {\n+            // Default handle logic\n+            defaultHandler.onAuthenticationFailure(request, response, exception);\n+        } else {\n+            // Put claims into session and redirect\n+            response.setStatus(302);\n+            request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,claims);", "originalCommit": "5900420d2cbb50fd63bb95e1975ff227d00ff30d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b7d0bd1df3593f55953a7bceb4ffdb656c9c55b0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7d0bd1df3593f55953a7bceb4ffdb656c9c55b0", "message": "add test case and AzureOAuth2AuthorizationRequestResolver.", "committedDate": "2020-12-09T02:30:16Z", "type": "commit"}, {"oid": "227af10331248db42e38b142640366353023f665", "url": "https://github.com/Azure/azure-sdk-for-java/commit/227af10331248db42e38b142640366353023f665", "message": "add AzureOAuth2AuthorizationRequestResolver to AzureOAuth2Configuration", "committedDate": "2020-12-09T03:01:09Z", "type": "commit"}, {"oid": "59e9c5b5f13ae1347e8b38628dd5ff10d367292c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/59e9c5b5f13ae1347e8b38628dd5ff10d367292c", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into handle_conditional_access\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuth2Configuration.java", "committedDate": "2020-12-09T05:56:44Z", "type": "commit"}, {"oid": "3c5d85bef2014710aa256949a50dab996e243a1f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c5d85bef2014710aa256949a50dab996e243a1f", "message": "resolver Conflicts", "committedDate": "2020-12-09T06:07:56Z", "type": "commit"}, {"oid": "b3b537221c3c981bd3faf7cb08a37d2130ee62e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3b537221c3c981bd3faf7cb08a37d2130ee62e6", "message": " fix the pipeline failure.", "committedDate": "2020-12-10T02:28:04Z", "type": "commit"}]}