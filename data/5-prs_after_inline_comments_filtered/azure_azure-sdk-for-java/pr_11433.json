{"pr_number": 11433, "pr_title": "Return headers sync upload", "pr_createdAt": "2020-05-26T19:11:47Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11433", "timeline": [{"oid": "754b58c7880c76eef3965fd3ac6687e07228b518", "url": "https://github.com/Azure/azure-sdk-for-java/commit/754b58c7880c76eef3965fd3ac6687e07228b518", "message": "Changed internal implementation of sync buffered upload", "committedDate": "2020-05-26T18:42:32Z", "type": "commit"}, {"oid": "f5e8a30f829768b5dc7d92c28da6973a6c79add2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5e8a30f829768b5dc7d92c28da6973a6c79add2", "message": "Added new upload method with return value", "committedDate": "2020-05-26T19:02:54Z", "type": "commit"}, {"oid": "4985f6ff6155d66fbaf5458ef92a491d31e14112", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4985f6ff6155d66fbaf5458ef92a491d31e14112", "message": "Changelog", "committedDate": "2020-05-26T19:06:46Z", "type": "commit"}, {"oid": "e50b0513ca6602fa121e0a88eb5fe44fae1fed3d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e50b0513ca6602fa121e0a88eb5fe44fae1fed3d", "message": "removed tags from upload options", "committedDate": "2020-05-26T19:10:30Z", "type": "commit"}, {"oid": "741dd681e5c3b8c9b47584945199915a8e061ccb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/741dd681e5c3b8c9b47584945199915a8e061ccb", "message": "Removed unused import", "committedDate": "2020-05-26T19:11:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3Mzc1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430673758", "bodyText": "Just a thought - Ideally wouldnt this model helper code go in the getter for ParallelTransferOptions in the options bag? or would that be odd for users when they see the getter returns something different from what they set", "author": "gapra-msft", "createdAt": "2020-05-26T19:59:29Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -169,29 +174,38 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n+        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+            .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n+        .setRequestConditions(requestConditions), timeout, context);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param options {@link BlobParallelUploadOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,\n+        Duration timeout, Context context) {\n+        BlobParallelUploadOptions blobParallelUploadOptions = options == null ? new BlobParallelUploadOptions()\n+            : options;\n         final ParallelTransferOptions validatedParallelTransferOptions =\n-            ModelHelper.populateAndApplyDefaults(parallelTransferOptions);\n-        Mono<Object> upload = Mono.fromCallable(() -> {\n-            try {\n-                // BlobOutputStream will internally handle the decision for single-shot or multi-part upload.\n-                BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(client,\n-                    validatedParallelTransferOptions, headers, metadata, tier, requestConditions, context);\n-                StorageImplUtils.copyToOutputStream(data, length, blobOutputStream);\n-                blobOutputStream.close();\n-                return null;\n-            } catch (IOException e) {\n-                Throwable cause = e.getCause();\n-                if (cause instanceof BlobStorageException) {\n-                    throw logger.logExceptionAsError((BlobStorageException) cause);\n-                } else {\n-                    throw logger.logExceptionAsError(new UncheckedIOException(e));\n-                }\n-            }\n-            // Subscribing has to happen on a different thread for the timeout to happen properly.\n-        }).subscribeOn(Schedulers.elastic());\n+            ModelHelper.populateAndApplyDefaults(blobParallelUploadOptions.getParallelTransferOptions());", "originalCommit": "741dd681e5c3b8c9b47584945199915a8e061ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwOTM4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430709389", "bodyText": "I think it'd be a little odd to manipulate values like that on what otherwise seems to be a simple struct.", "author": "rickle-msft", "createdAt": "2020-05-26T21:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3Mzc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MzEzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430673131", "bodyText": "Should this be called BlockBlobParallelUploadOptions based on the description. Or is this called this since it is the property bag for BlobClient upload.", "author": "alzimmermsft", "createdAt": "2020-05-26T19:58:12Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobParallelUploadOptions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.util.Map;\n+\n+/**\n+ * Extended options that may be passed when uploading a Block Blob in parallel.\n+ */\n+@Fluent\n+public class BlobParallelUploadOptions {", "originalCommit": "741dd681e5c3b8c9b47584945199915a8e061ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNjQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430706485", "bodyText": "I was thinking the latter. I am open to either", "author": "rickle-msft", "createdAt": "2020-05-26T21:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MzEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5ODcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r431998727", "bodyText": "Given its use in BlobClient specific operations, I think the name is good.", "author": "alzimmermsft", "createdAt": "2020-05-28T17:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430678649", "bodyText": "Should the async class have this overload added as well? I know it has an API which is similar to this but with all the options splayed out.", "author": "alzimmermsft", "createdAt": "2020-05-26T20:09:16Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -169,29 +174,38 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n+        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+            .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n+        .setRequestConditions(requestConditions), timeout, context);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param options {@link BlobParallelUploadOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,", "originalCommit": "741dd681e5c3b8c9b47584945199915a8e061ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNzk1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430707954", "bodyText": "The reason for adding this specific overload right now is to address the Snowflake issue mentioned in the description. The async equivalent and a bunch of other options bag overloads are set to come out with stg 73 (they are in the tags PR right now), so I was going to let those naturally come with 73, but I can add the async overload now if we don't want the asymmetry while we wait.", "author": "rickle-msft", "createdAt": "2020-05-26T21:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTIxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430679216", "bodyText": "Should a non-Response overload be added to match the async client more closely.", "author": "alzimmermsft", "createdAt": "2020-05-26T20:10:21Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -169,29 +174,38 @@ public void upload(InputStream data, long length, boolean overwrite) {\n     public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout, Context context) {\n+        uploadWithResponse(data, length, new BlobParallelUploadOptions()\n+            .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTier(tier)\n+        .setRequestConditions(requestConditions), timeout, context);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param options {@link BlobParallelUploadOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobParallelUploadOptions options,", "originalCommit": "741dd681e5c3b8c9b47584945199915a8e061ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwODgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11433#discussion_r430708818", "bodyText": "So an overload that takes an options bag and returns a BlockBlobItem? I can see the value of that. I think if we go that route maybe we should deprecate the overloads that don't take an options bag.", "author": "rickle-msft", "createdAt": "2020-05-26T21:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTIxNg=="}], "type": "inlineReview"}, {"oid": "142517721f7957d0ceed881d79d913ecd5900709", "url": "https://github.com/Azure/azure-sdk-for-java/commit/142517721f7957d0ceed881d79d913ecd5900709", "message": "CI fixes", "committedDate": "2020-05-26T21:40:32Z", "type": "commit"}, {"oid": "7b18c9738632b23b3371d3a367f13b90e6f1f182", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b18c9738632b23b3371d3a367f13b90e6f1f182", "message": "Updated recording", "committedDate": "2020-05-26T22:23:49Z", "type": "commit"}, {"oid": "d218a884a5d60e632a859c40fc3789f86592b9d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d218a884a5d60e632a859c40fc3789f86592b9d8", "message": "Unused imports", "committedDate": "2020-05-26T23:16:11Z", "type": "commit"}]}