{"pr_number": 17025, "pr_title": "Non markable is on buffered upload", "pr_createdAt": "2020-10-30T19:52:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17025", "timeline": [{"oid": "5704663dd428425e6ed74cc3ba89563f14966a6c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5704663dd428425e6ed74cc3ba89563f14966a6c", "message": "Added change for nonMarkable is on buffered upload", "committedDate": "2020-10-28T23:00:48Z", "type": "commit"}, {"oid": "158db394c28ab6691f92086bd10754b8b6a64def", "url": "https://github.com/Azure/azure-sdk-for-java/commit/158db394c28ab6691f92086bd10754b8b6a64def", "message": "Added tests", "committedDate": "2020-10-30T19:45:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NDU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515344583", "bodyText": "This should be false", "author": "rickle-msft", "createdAt": "2020-10-30T19:53:22Z", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java", "diffHunk": "@@ -294,7 +294,7 @@\n             final Map<String, String> metadataFinal = options.getMetadata() == null\n                 ? new HashMap<>() : options.getMetadata();\n             Flux<ByteBuffer> data = options.getDataFlux() == null ? Utility.convertStreamToByteBuffer(\n-                options.getDataStream(), options.getLength(), BLOB_DEFAULT_UPLOAD_BLOCK_SIZE)\n+                options.getDataStream(), options.getLength(), BLOB_DEFAULT_UPLOAD_BLOCK_SIZE, true)", "originalCommit": "158db394c28ab6691f92086bd10754b8b6a64def", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTA2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515345064", "bodyText": "Should be false", "author": "rickle-msft", "createdAt": "2020-10-30T19:54:27Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileAsyncClient.java", "diffHunk": "@@ -318,7 +318,7 @@ public String getFileName() {\n             Flux<ByteBuffer> data = options.getDataFlux() == null ? Utility.convertStreamToByteBuffer(\n                 options.getDataStream(), options.getLength(),\n                 // We can only buffer up to max int due to restrictions in ByteBuffer.\n-                (int) Math.min(Integer.MAX_VALUE, validatedParallelTransferOptions.getBlockSizeLong()))\n+                (int) Math.min(Integer.MAX_VALUE, validatedParallelTransferOptions.getBlockSizeLong()), true)", "originalCommit": "158db394c28ab6691f92086bd10754b8b6a64def", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTIzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515345235", "bodyText": "Should add a test for this", "author": "rickle-msft", "createdAt": "2020-10-30T19:54:52Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakeFileClient.java", "diffHunk": "@@ -341,7 +341,7 @@ public void append(InputStream data, long fileOffset, long length) {\n \n         Objects.requireNonNull(data);\n         Flux<ByteBuffer> fbb = Utility.convertStreamToByteBuffer(data, length,\n-            BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE);\n+            BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE, true);", "originalCommit": "158db394c28ab6691f92086bd10754b8b6a64def", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515345381", "bodyText": "Should add a test for this", "author": "rickle-msft", "createdAt": "2020-10-30T19:55:12Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileClient.java", "diffHunk": "@@ -971,7 +971,7 @@ public ShareFileUploadInfo upload(InputStream data, long length) {\n     public Response<ShareFileUploadInfo> uploadWithResponse(InputStream data, long length, Long offset,\n         ShareRequestConditions requestConditions, Duration timeout, Context context) {\n         return StorageImplUtils.blockWithOptionalTimeout(shareFileAsyncClient.uploadWithResponse(Utility\n-                .convertStreamToByteBuffer(data, length, (int) ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE),\n+                .convertStreamToByteBuffer(data, length, (int) ShareFileAsyncClient.FILE_DEFAULT_BLOCK_SIZE, true),", "originalCommit": "158db394c28ab6691f92086bd10754b8b6a64def", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5NzY4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17025#discussion_r515397684", "bodyText": "Given this is a public API should make this a new overload and have the previous method pass the default case which appears to be true.", "author": "alzimmermsft", "createdAt": "2020-10-30T21:48:34Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -220,22 +220,30 @@ public static OffsetDateTime parseDate(String dateString) {\n      * @param data The input data which needs to convert to ByteBuffer.\n      * @param length The expected input data length.\n      * @param blockSize The size of each ByteBuffer.\n+     * @param markAndReset Whether the stream needs to be marked and reset. This should generally always be true to\n+     * support retries. It is false in the case of buffered upload to support non markable streams because buffered\n+     * upload uses its own mechanisms to support retries.\n      * @return {@link ByteBuffer} which contains the input data.\n      * @throws UnexpectedLengthException when input data length mismatch input length.\n      * @throws RuntimeException When I/O error occurs.\n      */\n-    public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data, long length, int blockSize) {\n-        data.mark(Integer.MAX_VALUE);\n+    public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data, long length, int blockSize,", "originalCommit": "158db394c28ab6691f92086bd10754b8b6a64def", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3c3cabb368b51d208634899dfcbef5a5abe743b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a3c3cabb368b51d208634899dfcbef5a5abe743b", "message": "PR feedback and more tests", "committedDate": "2020-10-30T23:23:19Z", "type": "commit"}, {"oid": "2bd28b8955e41f0c8694f69c211781353ae1b096", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bd28b8955e41f0c8694f69c211781353ae1b096", "message": "Added missing recording file", "committedDate": "2020-11-02T18:22:10Z", "type": "commit"}, {"oid": "59522afeee5a9a731d6b5858cd54db45acec72cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/59522afeee5a9a731d6b5858cd54db45acec72cd", "message": "Added missing recording", "committedDate": "2020-11-02T19:24:15Z", "type": "commit"}]}