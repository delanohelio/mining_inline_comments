{"pr_number": 11043, "pr_title": "RemoveResourceWrapperAndJsonSerializableWrapper", "pr_createdAt": "2020-05-11T23:12:50Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11043", "timeline": [{"oid": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8dadfb2ba27478b58880657eb7264a732c5a5d31", "message": "RemoveResourceWrapper, JsonSerializableWrapper", "committedDate": "2020-05-11T23:07:18Z", "type": "commit"}, {"oid": "b6169ecfb2a78fc30f7d4148e45179ae21d44e01", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6169ecfb2a78fc30f7d4148e45179ae21d44e01", "message": "remove redundant convert", "committedDate": "2020-05-11T23:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MDgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423380827", "bodyText": "code style:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class CompositePath{\n          \n          \n            \n            public final class CompositePath {", "author": "moderakh", "createdAt": "2020-05-11T23:42:08Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CompositePath.java", "diffHunk": "@@ -13,7 +13,9 @@\n  * \"SELECT * FROM c ORDER BY c.age, c.height\", then you need to add \"/age\" and \"/height\"\n  * as composite paths to your composite index.\n  */\n-public final class CompositePath extends JsonSerializableWrapper{\n+public final class CompositePath{", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MjA1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423382059", "bodyText": "You should be able to do class equality here as none of the classes is expected to be subclassed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return CompositePath.class.isAssignableFrom(c)\n          \n          \n            \n            CompositePath.class.equals(c)", "author": "moderakh", "createdAt": "2020-05-11T23:45:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java", "diffHunk": "@@ -672,4 +689,22 @@ public String toString() {\n     public ObjectNode getPropertyBag() {\n         return this.propertyBag;\n     }\n+\n+    <T> boolean containsJsonSerializable(Class<T> c) {\n+        return CompositePath.class.isAssignableFrom(c)", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423401115", "bodyText": "changed to use equals except Index class.", "author": "xinlian12", "createdAt": "2020-05-12T00:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MjA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MjcyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423382723", "bodyText": "codestyle:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class ExcludedPath{\n          \n          \n            \n            public final class ExcludedPath {", "author": "moderakh", "createdAt": "2020-05-11T23:48:03Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ExcludedPath.java", "diffHunk": "@@ -9,7 +9,8 @@\n /**\n  * Represents an excluded path of the IndexingPolicy in the Azure Cosmos DB database service.\n  */\n-public final class ExcludedPath extends JsonSerializableWrapper{\n+public final class ExcludedPath{", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423383189", "bodyText": "code style: open braces on the same line as method definition\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void populatePropertyBag()\n          \n          \n            \n             void populatePropertyBag() {", "author": "moderakh", "createdAt": "2020-05-11T23:49:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/SqlParameter.java", "diffHunk": "@@ -70,4 +71,11 @@ public SqlParameter setValue(Object value) {\n         this.jsonSerializable.set(\"value\", value);\n         return this;\n     }\n+\n+    void populatePropertyBag()", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzYyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423383620", "bodyText": "I would just call it getJsonSerializable(T t)", "author": "moderakh", "createdAt": "2020-05-11T23:50:51Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ModelBridgeInternal.java", "diffHunk": "@@ -502,36 +495,115 @@ public static void setFeedOptionsMaxItemCount(FeedOptions feedOptions, Integer m\n         feedOptions.setMaxItemCount(maxItemCount);\n     }\n \n-    public static ByteBuffer serializeJsonToByteBuffer(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-        return jsonSerializableWrapper.jsonSerializable.serializeJsonToByteBuffer();\n+    public static ByteBuffer serializeJsonToByteBuffer(SqlQuerySpec sqlQuerySpec) {\n+        sqlQuerySpec.populatePropertyBag();\n+        return sqlQuerySpec.getJsonSerializable().serializeJsonToByteBuffer();\n     }\n \n-    public static JsonSerializableWrapper instantiateJsonSerializableWrapper(ObjectNode objectNode, Class<?> klassType) {\n+    public static <T> T instantiateByJsonString(String jsonString, Class<T> c) {\n         try {\n-            return (JsonSerializableWrapper) klassType.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n+            return (T) c.getDeclaredConstructor(String.class).newInstance(jsonString);\n         } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException | IllegalArgumentException e) {\n             throw new IllegalArgumentException(e);\n         }\n     }\n \n-    public static void populatePropertyBagJsonSerializableWrapper(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-    }\n-\n-    public static Resource getResourceFromResourceWrapper(ResourceWrapper resourceWrapper) {\n-        if (resourceWrapper == null) {\n-            return null;\n+    public static <T> void invokePopulatePropertyBag(T t) {\n+        if (t instanceof JsonSerializable) {\n+            ((JsonSerializable) t).populatePropertyBag();\n+        } else if (t instanceof CompositePath) {\n+            ((CompositePath) t).populatePropertyBag();\n+        } else if (t instanceof ConflictResolutionPolicy) {\n+            ((ConflictResolutionPolicy) t).populatePropertyBag();\n+        } else if (t instanceof ConsistencyPolicy) {\n+            ((ConsistencyPolicy) t).populatePropertyBag();\n+        } else if (t instanceof DatabaseAccountLocation) {\n+            ((DatabaseAccountLocation) t).populatePropertyBag();\n+        } else if (t instanceof ExcludedPath) {\n+            ((ExcludedPath) t).populatePropertyBag();\n+        } else if (t instanceof IncludedPath) {\n+            ((IncludedPath) t).populatePropertyBag();\n+        } else if (t instanceof IndexingPolicy) {\n+            ((IndexingPolicy) t).populatePropertyBag();\n+        } else if (t instanceof PartitionKeyDefinition) {\n+            ((PartitionKeyDefinition) t).populatePropertyBag();\n+        } else if (t instanceof SpatialSpec) {\n+            ((SpatialSpec) t).populatePropertyBag();\n+        } else if (t instanceof SqlParameter) {\n+            ((SqlParameter) t).populatePropertyBag();\n+        } else if (t instanceof SqlQuerySpec) {\n+            ((SqlQuerySpec) t).populatePropertyBag();\n+        } else if (t instanceof UniqueKey) {\n+            ((UniqueKey) t).populatePropertyBag();\n+        } else if (t instanceof UniqueKeyPolicy) {\n+            ((UniqueKeyPolicy) t).populatePropertyBag();\n+        } else if (t instanceof Index) {\n+            ((Index) t).populatePropertyBag();\n+        } else if (t instanceof CosmosError) {\n+            ((CosmosError) t).populatePropertyBag();\n+        } else {\n+            throw new IllegalArgumentException(\"populatePropertyBag method does not exists in class \" + t.getClass());\n         }\n-        return resourceWrapper.getResource();\n     }\n \n-    public static JsonSerializable getJsonSerializableFromIndex(Index index) {\n-        return index.getJsonSerializable();\n+    public static <T> JsonSerializable invokeGetJsonSerializable(T t) {", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4Mzg4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423383881", "bodyText": "can t be null?", "author": "moderakh", "createdAt": "2020-05-11T23:51:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ModelBridgeInternal.java", "diffHunk": "@@ -502,36 +495,115 @@ public static void setFeedOptionsMaxItemCount(FeedOptions feedOptions, Integer m\n         feedOptions.setMaxItemCount(maxItemCount);\n     }\n \n-    public static ByteBuffer serializeJsonToByteBuffer(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-        return jsonSerializableWrapper.jsonSerializable.serializeJsonToByteBuffer();\n+    public static ByteBuffer serializeJsonToByteBuffer(SqlQuerySpec sqlQuerySpec) {\n+        sqlQuerySpec.populatePropertyBag();\n+        return sqlQuerySpec.getJsonSerializable().serializeJsonToByteBuffer();\n     }\n \n-    public static JsonSerializableWrapper instantiateJsonSerializableWrapper(ObjectNode objectNode, Class<?> klassType) {\n+    public static <T> T instantiateByJsonString(String jsonString, Class<T> c) {\n         try {\n-            return (JsonSerializableWrapper) klassType.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n+            return (T) c.getDeclaredConstructor(String.class).newInstance(jsonString);\n         } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException | IllegalArgumentException e) {\n             throw new IllegalArgumentException(e);\n         }\n     }\n \n-    public static void populatePropertyBagJsonSerializableWrapper(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-    }\n-\n-    public static Resource getResourceFromResourceWrapper(ResourceWrapper resourceWrapper) {\n-        if (resourceWrapper == null) {\n-            return null;\n+    public static <T> void invokePopulatePropertyBag(T t) {\n+        if (t instanceof JsonSerializable) {\n+            ((JsonSerializable) t).populatePropertyBag();\n+        } else if (t instanceof CompositePath) {\n+            ((CompositePath) t).populatePropertyBag();\n+        } else if (t instanceof ConflictResolutionPolicy) {\n+            ((ConflictResolutionPolicy) t).populatePropertyBag();\n+        } else if (t instanceof ConsistencyPolicy) {\n+            ((ConsistencyPolicy) t).populatePropertyBag();\n+        } else if (t instanceof DatabaseAccountLocation) {\n+            ((DatabaseAccountLocation) t).populatePropertyBag();\n+        } else if (t instanceof ExcludedPath) {\n+            ((ExcludedPath) t).populatePropertyBag();\n+        } else if (t instanceof IncludedPath) {\n+            ((IncludedPath) t).populatePropertyBag();\n+        } else if (t instanceof IndexingPolicy) {\n+            ((IndexingPolicy) t).populatePropertyBag();\n+        } else if (t instanceof PartitionKeyDefinition) {\n+            ((PartitionKeyDefinition) t).populatePropertyBag();\n+        } else if (t instanceof SpatialSpec) {\n+            ((SpatialSpec) t).populatePropertyBag();\n+        } else if (t instanceof SqlParameter) {\n+            ((SqlParameter) t).populatePropertyBag();\n+        } else if (t instanceof SqlQuerySpec) {\n+            ((SqlQuerySpec) t).populatePropertyBag();\n+        } else if (t instanceof UniqueKey) {\n+            ((UniqueKey) t).populatePropertyBag();\n+        } else if (t instanceof UniqueKeyPolicy) {\n+            ((UniqueKeyPolicy) t).populatePropertyBag();\n+        } else if (t instanceof Index) {\n+            ((Index) t).populatePropertyBag();\n+        } else if (t instanceof CosmosError) {\n+            ((CosmosError) t).populatePropertyBag();\n+        } else {\n+            throw new IllegalArgumentException(\"populatePropertyBag method does not exists in class \" + t.getClass());\n         }\n-        return resourceWrapper.getResource();\n     }\n \n-    public static JsonSerializable getJsonSerializableFromIndex(Index index) {\n-        return index.getJsonSerializable();\n+    public static <T> JsonSerializable invokeGetJsonSerializable(T t) {", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTQyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423401420", "bodyText": "It could be.\nOne example is in CollectionCrudTest::deleteCollection.", "author": "xinlian12", "createdAt": "2020-05-12T00:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4Mzg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4NDA5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423384097", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static <T> Resource invokeGetResource(T t) {\n          \n          \n            \n            public static <T> Resource getResource(T t) {", "author": "moderakh", "createdAt": "2020-05-11T23:52:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ModelBridgeInternal.java", "diffHunk": "@@ -502,36 +495,115 @@ public static void setFeedOptionsMaxItemCount(FeedOptions feedOptions, Integer m\n         feedOptions.setMaxItemCount(maxItemCount);\n     }\n \n-    public static ByteBuffer serializeJsonToByteBuffer(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-        return jsonSerializableWrapper.jsonSerializable.serializeJsonToByteBuffer();\n+    public static ByteBuffer serializeJsonToByteBuffer(SqlQuerySpec sqlQuerySpec) {\n+        sqlQuerySpec.populatePropertyBag();\n+        return sqlQuerySpec.getJsonSerializable().serializeJsonToByteBuffer();\n     }\n \n-    public static JsonSerializableWrapper instantiateJsonSerializableWrapper(ObjectNode objectNode, Class<?> klassType) {\n+    public static <T> T instantiateByJsonString(String jsonString, Class<T> c) {\n         try {\n-            return (JsonSerializableWrapper) klassType.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n+            return (T) c.getDeclaredConstructor(String.class).newInstance(jsonString);\n         } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException | IllegalArgumentException e) {\n             throw new IllegalArgumentException(e);\n         }\n     }\n \n-    public static void populatePropertyBagJsonSerializableWrapper(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-    }\n-\n-    public static Resource getResourceFromResourceWrapper(ResourceWrapper resourceWrapper) {\n-        if (resourceWrapper == null) {\n-            return null;\n+    public static <T> void invokePopulatePropertyBag(T t) {\n+        if (t instanceof JsonSerializable) {\n+            ((JsonSerializable) t).populatePropertyBag();\n+        } else if (t instanceof CompositePath) {\n+            ((CompositePath) t).populatePropertyBag();\n+        } else if (t instanceof ConflictResolutionPolicy) {\n+            ((ConflictResolutionPolicy) t).populatePropertyBag();\n+        } else if (t instanceof ConsistencyPolicy) {\n+            ((ConsistencyPolicy) t).populatePropertyBag();\n+        } else if (t instanceof DatabaseAccountLocation) {\n+            ((DatabaseAccountLocation) t).populatePropertyBag();\n+        } else if (t instanceof ExcludedPath) {\n+            ((ExcludedPath) t).populatePropertyBag();\n+        } else if (t instanceof IncludedPath) {\n+            ((IncludedPath) t).populatePropertyBag();\n+        } else if (t instanceof IndexingPolicy) {\n+            ((IndexingPolicy) t).populatePropertyBag();\n+        } else if (t instanceof PartitionKeyDefinition) {\n+            ((PartitionKeyDefinition) t).populatePropertyBag();\n+        } else if (t instanceof SpatialSpec) {\n+            ((SpatialSpec) t).populatePropertyBag();\n+        } else if (t instanceof SqlParameter) {\n+            ((SqlParameter) t).populatePropertyBag();\n+        } else if (t instanceof SqlQuerySpec) {\n+            ((SqlQuerySpec) t).populatePropertyBag();\n+        } else if (t instanceof UniqueKey) {\n+            ((UniqueKey) t).populatePropertyBag();\n+        } else if (t instanceof UniqueKeyPolicy) {\n+            ((UniqueKeyPolicy) t).populatePropertyBag();\n+        } else if (t instanceof Index) {\n+            ((Index) t).populatePropertyBag();\n+        } else if (t instanceof CosmosError) {\n+            ((CosmosError) t).populatePropertyBag();\n+        } else {\n+            throw new IllegalArgumentException(\"populatePropertyBag method does not exists in class \" + t.getClass());\n         }\n-        return resourceWrapper.getResource();\n     }\n \n-    public static JsonSerializable getJsonSerializableFromIndex(Index index) {\n-        return index.getJsonSerializable();\n+    public static <T> JsonSerializable invokeGetJsonSerializable(T t) {\n+        if (t instanceof CompositePath) {\n+            return ((CompositePath) t).getJsonSerializable();\n+        } else if (t instanceof ConflictResolutionPolicy) {\n+            return ((ConflictResolutionPolicy) t).getJsonSerializable();\n+        } else if (t instanceof ConsistencyPolicy) {\n+            return ((ConsistencyPolicy) t).getJsonSerializable();\n+        } else if (t instanceof DatabaseAccountLocation) {\n+            return ((DatabaseAccountLocation) t).getJsonSerializable();\n+        } else if (t instanceof ExcludedPath) {\n+            return ((ExcludedPath) t).getJsonSerializable();\n+        } else if (t instanceof IncludedPath) {\n+            return ((IncludedPath) t).getJsonSerializable();\n+        } else if (t instanceof IndexingPolicy) {\n+            return ((IndexingPolicy) t).getJsonSerializable();\n+        } else if (t instanceof PartitionKeyDefinition) {\n+            return ((PartitionKeyDefinition) t).getJsonSerializable();\n+        } else if (t instanceof SpatialSpec) {\n+            return ((SpatialSpec) t).getJsonSerializable();\n+        } else if (t instanceof SqlParameter) {\n+            return ((SqlParameter) t).getJsonSerializable();\n+        } else if (t instanceof SqlQuerySpec) {\n+            return ((SqlQuerySpec) t).getJsonSerializable();\n+        } else if (t instanceof UniqueKey) {\n+            return ((UniqueKey) t).getJsonSerializable();\n+        } else if (t instanceof UniqueKeyPolicy) {\n+            return ((UniqueKeyPolicy) t).getJsonSerializable();\n+        } else if (t instanceof Index) {\n+            return ((Index) t).getJsonSerializable();\n+        } else if (t instanceof CosmosError) {\n+            return ((CosmosError) t).getJsonSerializable();\n+        } else {\n+            throw new IllegalArgumentException(\"getJsonSerializable method does not exists in class \" + t.getClass());\n+        }\n     }\n \n-    public static JsonSerializable getJsonSerializableFromJsonSerializableWrapper(JsonSerializableWrapper jsonSerializableWrapper) {\n-        return jsonSerializableWrapper.getJsonSerializable();\n+    public static <T> Resource invokeGetResource(T t) {", "originalCommit": "8dadfb2ba27478b58880657eb7264a732c5a5d31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4NTM1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423385351", "bodyText": "seems to me this may result in double serialization/deserialization.\ncan't we just pass ObjectNode to the constructor?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    T t = c.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), (ObjectNode) n));\n          \n          \n            \n            T t = c.getDeclaredConstructor(ObjectNode.class).newInstance((ObjectNode) n));", "author": "moderakh", "createdAt": "2020-05-11T23:56:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java", "diffHunk": "@@ -429,10 +439,14 @@ public Double getDouble(String propertyName) {\n                     T t = (T) ModelBridgeInternal.instantiateJsonSerializable((ObjectNode) n, c);\n                     result.add(t);\n \n-                } else if (isJsonSerializableWrapper) {\n-                    // JsonSerializableWrapper\n-                    T t = (T) ModelBridgeInternal.instantiateJsonSerializableWrapper((ObjectNode) n, c);\n-                    result.add(t);\n+                } else if (containsJsonSerializable) {\n+                    try {\n+                        T t = c.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), (ObjectNode) n));", "originalCommit": "b6169ecfb2a78fc30f7d4148e45179ae21d44e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTY5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423401692", "bodyText": "Make sense. Changed to use objectNode and added objectNode related constructor which is missing in some of the classes.", "author": "xinlian12", "createdAt": "2020-05-12T00:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4NTM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4NjMzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423386330", "bodyText": "doesn't this result in double json serialization/deserialization?\ncan we pass ObjectNode instead? otherwise this will serialize to string and the corresponding class will deserialize string back to ObjectNode.", "author": "moderakh", "createdAt": "2020-05-11T23:59:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java", "diffHunk": "@@ -354,8 +364,8 @@ public Double getDouble(String propertyName) {\n                 }\n             } else if (JsonSerializable.class.isAssignableFrom(c)) {\n                 return (T) ModelBridgeInternal.instantiateJsonSerializable((ObjectNode) jsonObj, c);\n-            } else if (JsonSerializableWrapper.class.isAssignableFrom(c)) {\n-                return (T) ModelBridgeInternal.instantiateJsonSerializableWrapper((ObjectNode) jsonObj, c);\n+            } else if (containsJsonSerializable(c)) {\n+                return ModelBridgeInternal.instantiateByJsonString(Utils.toJson(Utils.getSimpleObjectMapper(), (ObjectNode) jsonObj), c);", "originalCommit": "b6169ecfb2a78fc30f7d4148e45179ae21d44e01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423401817", "bodyText": "Changed to use ObjectNode related constuctor.", "author": "xinlian12", "createdAt": "2020-05-12T00:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4NjMzMA=="}], "type": "inlineReview"}, {"oid": "4f2302fe580cc548858ac1f3b936363d76839e88", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f2302fe580cc548858ac1f3b936363d76839e88", "message": "resolve comments", "committedDate": "2020-05-12T00:34:59Z", "type": "commit"}, {"oid": "f083c6a7e27530bf348a80ff74021f01cb3aef45", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f083c6a7e27530bf348a80ff74021f01cb3aef45", "message": "rename invokeGetResource to getResource", "committedDate": "2020-05-12T00:46:02Z", "type": "commit"}, {"oid": "ef2ca315526f788bcc2a5e7f00517ce24e431451", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef2ca315526f788bcc2a5e7f00517ce24e431451", "message": "fix", "committedDate": "2020-05-12T06:00:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NzE1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423867154", "bodyText": "getId is a required method in the Properties classes that we removed.", "author": "moderakh", "createdAt": "2020-05-12T16:24:00Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosConflictProperties.java", "diffHunk": "@@ -11,7 +11,7 @@\n /**\n  * The type Cosmos conflict properties.\n  */\n-public final class CosmosConflictProperties extends ResourceWrapper{", "originalCommit": "ef2ca315526f788bcc2a5e7f00517ce24e431451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MzU4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423873581", "bodyText": "please add back", "author": "moderakh", "createdAt": "2020-05-12T16:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3Nzk3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423877979", "bodyText": "should I add back all this method? originally these methods are all public:\ngetId\nsetId\ngetResourceId\nsetResourceId\ngetSelfLink\nsetSelfLink\ngetTimestamp\nsetTimestamp\ngetEtag\nsetEtag\nsetAltLink\ngetAltLink\nvalidateResource", "author": "xinlian12", "createdAt": "2020-05-12T16:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NDcxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423994711", "bodyText": "added the following change based on the discussion:\nadd getId(), getResourceId, getEtag(), getTimestamp() to the following classes: CosmosConflictPropertiesCosmosContainerProperties\nCosmosDatabaseProperties\nCosmosPermissionProperties\nCosmosStoredProcedureProperties\nCosmosTriggerProperties\nosmosUserDefinedFunctionProperties\nCosmosUserProperties\nThroughputProperties\nsetId() is added if it is not existed.", "author": "xinlian12", "createdAt": "2020-05-12T19:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NzE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2OTkxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423869914", "bodyText": "once getId() is added back we should undo this change as getId will be required method in CosmosDatabaseProperties.", "author": "moderakh", "createdAt": "2020-05-12T16:27:51Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDatabaseForTest.java", "diffHunk": "@@ -93,13 +93,13 @@ public static void cleanupStaleTestDatabases(DatabaseManager client) {\n                 new SqlQuerySpec(\"SELECT * FROM c WHERE STARTSWITH(c.id, @PREFIX)\", sqlParameterList)).collectList().block();\n \n         for (CosmosDatabaseProperties db : dbs) {\n-            assertThat(db.getId()).startsWith(CosmosDatabaseForTest.SHARED_DB_ID_PREFIX);\n+            assertThat(ModelBridgeInternal.getResource(db).getId()).startsWith(CosmosDatabaseForTest.SHARED_DB_ID_PREFIX);", "originalCommit": "ef2ca315526f788bcc2a5e7f00517ce24e431451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMzQ2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r424003465", "bodyText": "reverted change back.", "author": "xinlian12", "createdAt": "2020-05-12T20:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2OTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MDIyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423870226", "bodyText": "once getId() is added back we should undo this change as getId will be required method in CosmosDatabaseProperties.\nhere and in other places for the properties classes.", "author": "moderakh", "createdAt": "2020-05-12T16:28:15Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDatabaseTest.java", "diffHunk": "@@ -55,7 +55,7 @@ public void afterClass() {\n     @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n     public void createDatabase_withPropertiesAndOptions() throws CosmosClientException {\n         CosmosDatabaseProperties databaseDefinition = new CosmosDatabaseProperties(CosmosDatabaseForTest.generateId());\n-        databases.add(databaseDefinition.getId());\n+        databases.add(ModelBridgeInternal.getResource(databaseDefinition).getId());", "originalCommit": "ef2ca315526f788bcc2a5e7f00517ce24e431451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMzE0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r424003149", "bodyText": "removed.", "author": "xinlian12", "createdAt": "2020-05-12T20:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MDIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3NTgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r423875802", "bodyText": "getId is a required method in the Properties classes that we removed.\nplease add back here and other places.", "author": "moderakh", "createdAt": "2020-05-12T16:36:36Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseProperties.java", "diffHunk": "@@ -18,7 +18,7 @@\n  * more cosmos items. Since databases are an an administrative resource and the Service Key will be required in\n  * order to access and successfully complete any action using the User APIs.\n  */\n-public final class CosmosDatabaseProperties extends ResourceWrapper{", "originalCommit": "ef2ca315526f788bcc2a5e7f00517ce24e431451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjk1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r424002954", "bodyText": "added back", "author": "xinlian12", "createdAt": "2020-05-12T20:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3NTgwMg=="}], "type": "inlineReview"}, {"oid": "d67c1d0ec1aeb6b3b0487f52123cc93f1ec70401", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d67c1d0ec1aeb6b3b0487f52123cc93f1ec70401", "message": "add getId, getResourceId, getTimestamp, getEtag for properties", "committedDate": "2020-05-12T19:30:33Z", "type": "commit"}, {"oid": "05c9a23c4de3cf3e7814eb63488445d3431ec090", "url": "https://github.com/Azure/azure-sdk-for-java/commit/05c9a23c4de3cf3e7814eb63488445d3431ec090", "message": "merge and resolve conflicts", "committedDate": "2020-05-12T19:50:03Z", "type": "commit"}, {"oid": "05104cb40f8ce6324d05adc7ceb4e252228190b8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/05104cb40f8ce6324d05adc7ceb4e252228190b8", "message": "fix", "committedDate": "2020-05-12T20:05:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NzYxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r424787618", "bodyText": "one thing we should discuss is the return type. The timestamp is in UTC and so it doesn't have a zone offset. I wonder if Instant is a better choice here.\nThis is outside of scope of this PR.\n/cc @kushagraThapar something we should track.", "author": "moderakh", "createdAt": "2020-05-13T23:28:23Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosConflictProperties.java", "diffHunk": "@@ -49,22 +50,59 @@ public String getResourceType() {\n         return this.conflict.getResouceType();\n     }\n \n+    Resource getResource() {\n+        return this.conflict;\n+    }\n+\n+    /**\n+     * Gets the name of the resource.\n+     *\n+     * @return the name of the resource.\n+     */\n+    public String getId() {\n+        return this.conflict.getId();\n+    }\n+\n+    /**\n+     * Sets the name of the resource.\n+     *\n+     * @param id the name of the resource.\n+     * @return the current instance of {@link CosmosConflictProperties}.\n+     */\n+    public CosmosConflictProperties setId(String id) {\n+        this.conflict.setId(id);\n+        return this;\n+    }\n+\n     /**\n-     * Gets the resource ID for the conflict in the Azure Cosmos DB service.\n+     * Gets the ID associated with the resource.\n      *\n-     * @return resource Id for the conflict.\n+     * @return the ID associated with the resource.\n      */\n-    String getSourceResourceId() {\n+    public String getResourceId() {\n         return this.conflict.getResourceId();\n     }\n \n+    /**\n+     * Get the last modified timestamp associated with the resource.\n+     *\n+     * @return the timestamp.\n+     */\n+    public OffsetDateTime getTimestamp() {", "originalCommit": "05104cb40f8ce6324d05adc7ceb4e252228190b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4ODI0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r424788249", "bodyText": "can t be null here? if it can this method will throw IllegalArgumentException. is it expected for null?", "author": "moderakh", "createdAt": "2020-05-13T23:30:23Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ModelBridgeInternal.java", "diffHunk": "@@ -502,36 +495,117 @@ public static void setFeedOptionsMaxItemCount(FeedOptions feedOptions, Integer m\n         feedOptions.setMaxItemCount(maxItemCount);\n     }\n \n-    public static ByteBuffer serializeJsonToByteBuffer(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-        return jsonSerializableWrapper.jsonSerializable.serializeJsonToByteBuffer();\n+    public static ByteBuffer serializeJsonToByteBuffer(SqlQuerySpec sqlQuerySpec) {\n+        sqlQuerySpec.populatePropertyBag();\n+        return sqlQuerySpec.getJsonSerializable().serializeJsonToByteBuffer();\n     }\n \n-    public static JsonSerializableWrapper instantiateJsonSerializableWrapper(ObjectNode objectNode, Class<?> klassType) {\n+    public static <T> T instantiateByObjectNode(ObjectNode objectNode, Class<T> c) {\n         try {\n-            return (JsonSerializableWrapper) klassType.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n+            return c.getDeclaredConstructor(ObjectNode.class).newInstance(objectNode);\n         } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException | IllegalArgumentException e) {\n             throw new IllegalArgumentException(e);\n         }\n     }\n \n-    public static void populatePropertyBagJsonSerializableWrapper(JsonSerializableWrapper jsonSerializableWrapper) {\n-        jsonSerializableWrapper.populatePropertyBag();\n-    }\n-\n-    public static Resource getResourceFromResourceWrapper(ResourceWrapper resourceWrapper) {\n-        if (resourceWrapper == null) {\n-            return null;\n+    public static <T> void populatePropertyBag(T t) {\n+        if (t instanceof JsonSerializable) {", "originalCommit": "05104cb40f8ce6324d05adc7ceb4e252228190b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMTgxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11043#discussion_r424811810", "bodyText": "I checked all the places invoking this populatePropertyBag method, we all pre-checked whether it is null or not. So should be fine here", "author": "xinlian12", "createdAt": "2020-05-14T00:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4ODI0OQ=="}], "type": "inlineReview"}]}