{"pr_number": 18075, "pr_title": "Added support for logging string to sign in Storage and ability to pass in account name when generating a UserDelegationKey", "pr_createdAt": "2020-12-10T18:36:38Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18075", "timeline": [{"oid": "9e63127e8f6f468014e239aaff29c42fd5a2f859", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e63127e8f6f468014e239aaff29c42fd5a2f859", "message": "Added code to log string to sign", "committedDate": "2020-12-09T19:42:46Z", "type": "commit"}, {"oid": "c5af4c542a69f1409439d5aa23e9f6d39f01d61a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5af4c542a69f1409439d5aa23e9f6d39f01d61a", "message": "Made logging log properly", "committedDate": "2020-12-10T18:35:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNTkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r540405905", "bodyText": "Will add here", "author": "gapra-msft", "createdAt": "2020-12-10T18:36:55Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java", "diffHunk": "@@ -1058,7 +1058,7 @@ public String getEncryptionScope() {\n     public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,\n         UserDelegationKey userDelegationKey) {\n         return new BlobSasImplUtil(blobServiceSasSignatureValues, getBlobContainerName())\n-            .generateUserDelegationSas(userDelegationKey, getAccountName());\n+            .generateUserDelegationSas(userDelegationKey, getAccountName(), Context.NONE);", "originalCommit": "c5af4c542a69f1409439d5aa23e9f6d39f01d61a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1MzkwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r540453904", "bodyText": "I would use a different key such as azure-log-string-to-sign to ensure there is no overlap and to indicate it's Azure SDK specific", "author": "alzimmermsft", "createdAt": "2020-12-10T19:53:47Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobSasImplUtil.java", "diffHunk": "@@ -140,14 +141,21 @@ public BlobSasImplUtil(BlobServiceSasSignatureValues sasValues, String container\n      * @param storageSharedKeyCredentials {@link StorageSharedKeyCredential}\n      * @return A String representing the Sas\n      */\n-    public String generateSas(StorageSharedKeyCredential storageSharedKeyCredentials) {\n+    public String generateSas(StorageSharedKeyCredential storageSharedKeyCredentials, Context context) {\n         StorageImplUtils.assertNotNull(\"storageSharedKeyCredentials\", storageSharedKeyCredentials);\n \n         ensureState();\n \n         // Signature is generated on the un-url-encoded values.\n         final String canonicalName = getCanonicalName(storageSharedKeyCredentials.getAccountName());\n-        final String signature = storageSharedKeyCredentials.computeHmac256(stringToSign(canonicalName));\n+        final String stringToSign = stringToSign(canonicalName);\n+        if (context != null && Boolean.TRUE.equals(context.getData(\"Log-String-To-Sign\").orElse(false))) {", "originalCommit": "c5af4c542a69f1409439d5aa23e9f6d39f01d61a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1NDU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r540454566", "bodyText": "Since this is in multiple spots let's make it a method so if it needs to be updated only one location needs modification", "author": "alzimmermsft", "createdAt": "2020-12-10T19:54:49Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobSasImplUtil.java", "diffHunk": "@@ -159,16 +167,22 @@ public String generateSas(StorageSharedKeyCredential storageSharedKeyCredentials\n      * @param accountName The account name\n      * @return A String representing the Sas\n      */\n-    public String generateUserDelegationSas(UserDelegationKey delegationKey, String accountName) {\n+    public String generateUserDelegationSas(UserDelegationKey delegationKey, String accountName, Context context) {\n         StorageImplUtils.assertNotNull(\"delegationKey\", delegationKey);\n         StorageImplUtils.assertNotNull(\"accountName\", accountName);\n \n         ensureState();\n \n         // Signature is generated on the un-url-encoded values.\n         final String canonicalName = getCanonicalName(accountName);\n-        String signature = StorageImplUtils.computeHMac256(\n-            delegationKey.getValue(), stringToSign(delegationKey, canonicalName));\n+        final String stringToSign = stringToSign(delegationKey, canonicalName);\n+        if (context != null && Boolean.TRUE.equals(context.getData(\"Log-String-To-Sign\").orElse(false))) {\n+            logger.info(\"The string to sign computed by the SDK is: {}{}\", stringToSign,\n+                System.getProperty(\"line.separator\"));\n+            logger.warning(\"Please remember to disable 'Log-String-To-Sign' before going to production as this \"\n+                + \"string can potentially contain PII.\");\n+        }", "originalCommit": "c5af4c542a69f1409439d5aa23e9f6d39f01d61a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1Njc4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r540456787", "bodyText": "Should we use String.format here with line separators instead of \\n or are we using '\\n' as that would be what is returned by the service.", "author": "alzimmermsft", "createdAt": "2020-12-10T19:58:29Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobStorageException.java", "diffHunk": "@@ -57,4 +54,22 @@ public String getServiceMessage() {\n     public int getStatusCode() {\n         return super.getResponse().getStatusCode();\n     }\n+\n+    private static String convertExceptionMessage(String message, HttpResponse response) {\n+        if (response != null) {\n+            if (response.getStatusCode() == 403) {\n+                return message + \"\\nIf you are using a StorageSharedKeyCredential, and the server returned an \"", "originalCommit": "c5af4c542a69f1409439d5aa23e9f6d39f01d61a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUwODcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r540508718", "bodyText": "I think the service returns \\n so its fine if we leave this as \\n", "author": "gapra-msft", "createdAt": "2020-12-10T21:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1Njc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjU1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r542622554", "bodyText": "Changed to %n as CI was angry", "author": "gapra-msft", "createdAt": "2020-12-14T18:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ1Njc4Nw=="}], "type": "inlineReview"}, {"oid": "2d870a3073f6fcf254210a575af847024b6e1290", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d870a3073f6fcf254210a575af847024b6e1290", "message": "Added logging for blobs", "committedDate": "2020-12-10T22:07:33Z", "type": "commit"}, {"oid": "ceb8c13684a7c61b033a267c8e0b995cf008f31d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ceb8c13684a7c61b033a267c8e0b995cf008f31d", "message": "Added to datalake", "committedDate": "2020-12-10T23:47:41Z", "type": "commit"}, {"oid": "20ac48c9e1f2b23c0da07b7b42f7e5b3ea00944a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/20ac48c9e1f2b23c0da07b7b42f7e5b3ea00944a", "message": "Added to file share", "committedDate": "2020-12-11T00:07:21Z", "type": "commit"}, {"oid": "eacdf8ae5b32b85c9e74524dbd6eb153f2f8ff48", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eacdf8ae5b32b85c9e74524dbd6eb153f2f8ff48", "message": "Added to queue", "committedDate": "2020-12-11T00:36:12Z", "type": "commit"}, {"oid": "fbb1f4d2a3439e7ba0e9e2638bdc0e3941f48b6d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbb1f4d2a3439e7ba0e9e2638bdc0e3941f48b6d", "message": "Analyze step", "committedDate": "2020-12-11T17:58:38Z", "type": "commit"}, {"oid": "a2c713e55eacd6231496e8893cdb5d81c6272ccf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2c713e55eacd6231496e8893cdb5d81c6272ccf", "message": "Fixed some samples", "committedDate": "2020-12-11T19:19:51Z", "type": "commit"}, {"oid": "ee0f4fef6cbc2e469e59d46124a4c702271a2267", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee0f4fef6cbc2e469e59d46124a4c702271a2267", "message": "Analuze stepo", "committedDate": "2020-12-11T20:33:47Z", "type": "commit"}, {"oid": "f7ef6d70f37b45c53399b4fe9faa9bba9247b0b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7ef6d70f37b45c53399b4fe9faa9bba9247b0b3", "message": "null check", "committedDate": "2020-12-11T20:58:57Z", "type": "commit"}, {"oid": "6df6ce7ad361487d2d2dd4a7e79d17a10cff9671", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6df6ce7ad361487d2d2dd4a7e79d17a10cff9671", "message": "Fixed analyze step", "committedDate": "2020-12-14T18:09:45Z", "type": "commit"}, {"oid": "d36b6806a3a61ffb88c8d81b15bd561a3bf1b284", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d36b6806a3a61ffb88c8d81b15bd561a3bf1b284", "message": "Revert blob test", "committedDate": "2020-12-14T18:37:26Z", "type": "commit"}, {"oid": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "message": "Changed test", "committedDate": "2020-12-14T18:46:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NDIxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r542884212", "bodyText": "Why not accept the context itself instead of a boolean?", "author": "rickle-msft", "createdAt": "2020-12-14T22:38:51Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageSharedKeyCredential.java", "diffHunk": "@@ -111,15 +129,16 @@ public String computeHmac256(final String stringToSign) {\n         return StorageImplUtils.computeHMac256(accountKey, stringToSign);\n     }\n \n-    private String buildStringToSign(URL requestURL, String httpMethod, Map<String, String> headers) {\n+    private String buildStringToSign(URL requestURL, String httpMethod, Map<String, String> headers,\n+        boolean logStringToSign) {", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NjEwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r542886100", "bodyText": "The context in the pipeline policy isnt an AzureContext, its like a HttpPipelineContext so I'd need to do that weird conversion somewhere. Would you prefer I do it in the pipeline policy?", "author": "gapra-msft", "createdAt": "2020-12-14T22:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NDIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545312970", "bodyText": "HttpPipelineContext is the combination of HttpRequest and Context where the Context APIs are wrapped and hidden by the HttpPipelineContext APIs, in the end it should contain all information from the Context.", "author": "alzimmermsft", "createdAt": "2020-12-17T18:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NDIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNDkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545304915", "bodyText": "I would change this to an {@link} as @see serves a different purpose to link to a class with its own special section. This is an example: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-core-http-netty/1.7.0/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.html", "author": "alzimmermsft", "createdAt": "2020-12-17T18:22:03Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java", "diffHunk": "@@ -1057,8 +1057,31 @@ public String getEncryptionScope() {\n      */\n     public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,\n         UserDelegationKey userDelegationKey) {\n+        return generateUserDelegationSas(blobServiceSasSignatureValues, userDelegationKey, getAccountName(),\n+            Context.NONE);\n+    }\n+\n+    /**\n+     * Generates a user delegation SAS for the container using the specified {@link BlobServiceSasSignatureValues}.\n+     * <p>See {@link BlobServiceSasSignatureValues} for more information on how to construct a user delegation SAS.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas#BlobServiceSasSignatureValues-UserDelegationKey-String-Context}\n+     *\n+     * @param blobServiceSasSignatureValues {@link BlobServiceSasSignatureValues}\n+     * @param userDelegationKey A {@link UserDelegationKey} object used to sign the SAS values.\n+     * @see BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime) for more information on how to", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNDk2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545404961", "bodyText": "Fixed", "author": "gapra-msft", "createdAt": "2020-12-17T21:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNDkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNTQwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545305404", "bodyText": "Does it represent all SAS query parameters or is it the SAS query parameters string?", "author": "alzimmermsft", "createdAt": "2020-12-17T18:22:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java", "diffHunk": "@@ -1057,8 +1057,31 @@ public String getEncryptionScope() {\n      */\n     public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,\n         UserDelegationKey userDelegationKey) {\n+        return generateUserDelegationSas(blobServiceSasSignatureValues, userDelegationKey, getAccountName(),\n+            Context.NONE);\n+    }\n+\n+    /**\n+     * Generates a user delegation SAS for the container using the specified {@link BlobServiceSasSignatureValues}.\n+     * <p>See {@link BlobServiceSasSignatureValues} for more information on how to construct a user delegation SAS.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas#BlobServiceSasSignatureValues-UserDelegationKey-String-Context}\n+     *\n+     * @param blobServiceSasSignatureValues {@link BlobServiceSasSignatureValues}\n+     * @param userDelegationKey A {@link UserDelegationKey} object used to sign the SAS values.\n+     * @see BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime) for more information on how to\n+     * get a user delegation key.\n+     * @param accountName The account name.\n+     * @param context Additional context that is passed through the code when generating a SAS.\n+     *\n+     * @return A {@code String} representing all SAS query parameters.", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTEwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545405100", "bodyText": "It should be 'the'. I've fixed it.", "author": "gapra-msft", "createdAt": "2020-12-17T21:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNTk2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545305966", "bodyText": "This will generate on the same line as the sentence above due to Javadocs being HTML, let's make this another <p> so get a line break.", "author": "alzimmermsft", "createdAt": "2020-12-17T18:23:40Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java", "diffHunk": "@@ -1075,8 +1098,26 @@ public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServic\n      * @return A {@code String} representing all SAS query parameters.\n      */\n     public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues) {\n+        return generateSas(blobServiceSasSignatureValues, Context.NONE);\n+    }\n+\n+    /**\n+     * Generates a service SAS for the container using the specified {@link BlobServiceSasSignatureValues}\n+     * Note : The client must be authenticated via {@link StorageSharedKeyCredential}", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjcxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545406719", "bodyText": "Fixed", "author": "gapra-msft", "createdAt": "2020-12-17T21:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNTk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNjQyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545306422", "bodyText": "Same comment as the other Javadoc with inlined @see", "author": "alzimmermsft", "createdAt": "2020-12-17T18:24:16Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerClient.java", "diffHunk": "@@ -633,6 +633,29 @@ public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServic\n         return this.client.generateUserDelegationSas(blobServiceSasSignatureValues, userDelegationKey);\n     }\n \n+    /**\n+     * Generates a user delegation SAS for the container using the specified {@link BlobServiceSasSignatureValues}.\n+     * <p>See {@link BlobServiceSasSignatureValues} for more information on how to construct a user delegation SAS.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas#BlobServiceSasSignatureValues-UserDelegationKey-String-Context}\n+     *\n+     * @param blobServiceSasSignatureValues {@link BlobServiceSasSignatureValues}\n+     * @param userDelegationKey A {@link UserDelegationKey} object used to sign the SAS values.\n+     * @see BlobServiceClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime) for more information on how to get a", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545405286", "bodyText": "Fixed", "author": "gapra-msft", "createdAt": "2020-12-17T21:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDAxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545310017", "bodyText": "Is there going to be an issue that this method assumes the container name from the BlobContainerClient instance but then allows for any account name to be passed? This could result in cases where the container doesn't exist in the other account, and given that to me this method feels closer to a static utility which allows generating a SAS for any account and container given the UserDelegationKey.", "author": "alzimmermsft", "createdAt": "2020-12-17T18:29:51Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java", "diffHunk": "@@ -1057,8 +1057,31 @@ public String getEncryptionScope() {\n      */\n     public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,\n         UserDelegationKey userDelegationKey) {\n+        return generateUserDelegationSas(blobServiceSasSignatureValues, userDelegationKey, getAccountName(),\n+            Context.NONE);\n+    }\n+\n+    /**\n+     * Generates a user delegation SAS for the container using the specified {@link BlobServiceSasSignatureValues}.\n+     * <p>See {@link BlobServiceSasSignatureValues} for more information on how to construct a user delegation SAS.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobContainerAsyncClient.generateUserDelegationSas#BlobServiceSasSignatureValues-UserDelegationKey-String-Context}\n+     *\n+     * @param blobServiceSasSignatureValues {@link BlobServiceSasSignatureValues}\n+     * @param userDelegationKey A {@link UserDelegationKey} object used to sign the SAS values.\n+     * @see BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime) for more information on how to\n+     * get a user delegation key.\n+     * @param accountName The account name.\n+     * @param context Additional context that is passed through the code when generating a SAS.\n+     *\n+     * @return A {@code String} representing all SAS query parameters.\n+     */\n+    public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM2ODEwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545368101", "bodyText": "I think thats a valid concern. The reason we wanted to put account name here is specifically for situations where a user passes in a custom domain name, and we can't parse an account name as a result.", "author": "gapra-msft", "createdAt": "2020-12-17T20:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTMxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545311312", "bodyText": "Same comment as BlobContainerClient around this being a mix of external values and values on the instance, it ends up being an in-between of static utility to generate any SAS given the delegation key and requested permissions but also being information specific to the blob such as container, name, version, and snapshot.", "author": "alzimmermsft", "createdAt": "2020-12-17T18:31:52Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java", "diffHunk": "@@ -1779,9 +1779,32 @@ private void downloadToFileCleanup(AsynchronousFileChannel channel, String fileP\n      */\n     public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,\n         UserDelegationKey userDelegationKey) {\n+        return generateUserDelegationSas(blobServiceSasSignatureValues, userDelegationKey, getAccountName(),\n+            Context.NONE);\n+    }\n+\n+    /**\n+     * Generates a user delegation SAS for the blob using the specified {@link BlobServiceSasSignatureValues}.\n+     * <p>See {@link BlobServiceSasSignatureValues} for more information on how to construct a user delegation SAS.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas#BlobServiceSasSignatureValues-UserDelegationKey-String-Context}\n+     *\n+     * @param blobServiceSasSignatureValues {@link BlobServiceSasSignatureValues}\n+     * @param userDelegationKey A {@link UserDelegationKey} object used to sign the SAS values.\n+     * @see BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime) for more information on how to\n+     * get a user delegation key.\n+     * @param accountName The account name.\n+     * @param context Additional context that is passed through the code when generating a SAS.\n+     *\n+     * @return A {@code String} representing all SAS query parameters.\n+     */\n+    public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues,", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545314566", "bodyText": "Should use System.lineSeparator() instead as it is a convenience wrapper for this.", "author": "alzimmermsft", "createdAt": "2020-12-17T18:37:14Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/StorageImplUtils.java", "diffHunk": "@@ -297,4 +301,53 @@ public static void copyToOutputStream(InputStream source, long writeLength, Outp\n             count = source.read(retrievedBuff, 0, nextCopy);\n         }\n     }\n+\n+    /**\n+     * Logs the string to sign if a valid context is provided.\n+     *\n+     * @param logger {@link ClientLogger}\n+     * @param stringToSign The string to sign to log.\n+     * @param context Additional context to determine if the string to sign should be logged.\n+     */\n+    public static void logStringToSign(ClientLogger logger, String stringToSign, Context context) {\n+        if (context != null && Boolean.TRUE.equals(context.getData(Constants.STORAGE_LOG_STRING_TO_SIGN).orElse(false))) {\n+            logger.info(\"The string to sign computed by the SDK is: {}{}\", stringToSign,\n+                System.getProperty(\"line.separator\"));", "originalCommit": "e1a6169b956ca7d0a90fd4594e975b5a7c51e4f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNTg2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545405862", "bodyText": "Fixed", "author": "gapra-msft", "createdAt": "2020-12-17T21:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDU2Ng=="}], "type": "inlineReview"}, {"oid": "63d3fcf2e4943c4604cc347392e39ba38c032f38", "url": "https://github.com/Azure/azure-sdk-for-java/commit/63d3fcf2e4943c4604cc347392e39ba38c032f38", "message": "Modified javadoc", "committedDate": "2020-12-17T21:08:42Z", "type": "commit"}, {"oid": "f2b6024c49cd56dc02cddab19370e0e4986e4721", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2b6024c49cd56dc02cddab19370e0e4986e4721", "message": "Fixed more javadoc", "committedDate": "2020-12-17T21:12:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0ODQ5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545448497", "bodyText": "Let's make this a constant so we don't need to instantiate a new instance every time this code path is executed", "author": "alzimmermsft", "createdAt": "2020-12-17T22:36:21Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageSharedKeyCredential.java", "diffHunk": "@@ -134,6 +153,13 @@ private String buildStringToSign(URL requestURL, String httpMethod, Map<String,\n             getStandardHeaderValue(headers, \"Range\"),\n             getAdditionalXmsHeaders(headers),\n             getCanonicalizedResource(requestURL));\n+\n+        if (logStringToSign) {\n+            StorageImplUtils.logStringToSign(logger, stringToSign,\n+                new Context(Constants.STORAGE_LOG_STRING_TO_SIGN, true));", "originalCommit": "f2b6024c49cd56dc02cddab19370e0e4986e4721", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0ODk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545448985", "bodyText": "Let's make this base message a constant as all parameters for the formatting are constant, that way we don't need to make additional calls to String.format and wait for this to be optimized by JIT", "author": "alzimmermsft", "createdAt": "2020-12-17T22:37:21Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/StorageImplUtils.java", "diffHunk": "@@ -297,4 +301,53 @@ public static void copyToOutputStream(InputStream source, long writeLength, Outp\n             count = source.read(retrievedBuff, 0, nextCopy);\n         }\n     }\n+\n+    /**\n+     * Logs the string to sign if a valid context is provided.\n+     *\n+     * @param logger {@link ClientLogger}\n+     * @param stringToSign The string to sign to log.\n+     * @param context Additional context to determine if the string to sign should be logged.\n+     */\n+    public static void logStringToSign(ClientLogger logger, String stringToSign, Context context) {\n+        if (context != null && Boolean.TRUE.equals(context.getData(Constants.STORAGE_LOG_STRING_TO_SIGN).orElse(false))) {\n+            logger.info(\"The string to sign computed by the SDK is: {}{}\", stringToSign,\n+                System.lineSeparator());\n+            logger.warning(\"Please remember to disable '{}' before going to production as this \"\n+                + \"string can potentially contain PII.\", Constants.STORAGE_LOG_STRING_TO_SIGN);\n+        }\n+    }\n+\n+    /**\n+     * Converts the storage exception message.\n+     *\n+     * @param message The storage exception message\n+     * @param response The storage service response.\n+     * @return The converted storage exception message.\n+     */\n+    public static String convertStorageExceptionMessage(String message, HttpResponse response) {\n+        if (response != null) {\n+            if (response.getStatusCode() == 403) {\n+                return String.format(\"If you are using a StorageSharedKeyCredential, and the server returned an \"", "originalCommit": "f2b6024c49cd56dc02cddab19370e0e4986e4721", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0OTMwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18075#discussion_r545449309", "bodyText": "Let's make this log message a constant string as it doesn't have any instance data", "author": "alzimmermsft", "createdAt": "2020-12-17T22:38:07Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/StorageImplUtils.java", "diffHunk": "@@ -297,4 +301,53 @@ public static void copyToOutputStream(InputStream source, long writeLength, Outp\n             count = source.read(retrievedBuff, 0, nextCopy);\n         }\n     }\n+\n+    /**\n+     * Logs the string to sign if a valid context is provided.\n+     *\n+     * @param logger {@link ClientLogger}\n+     * @param stringToSign The string to sign to log.\n+     * @param context Additional context to determine if the string to sign should be logged.\n+     */\n+    public static void logStringToSign(ClientLogger logger, String stringToSign, Context context) {\n+        if (context != null && Boolean.TRUE.equals(context.getData(Constants.STORAGE_LOG_STRING_TO_SIGN).orElse(false))) {\n+            logger.info(\"The string to sign computed by the SDK is: {}{}\", stringToSign,\n+                System.lineSeparator());\n+            logger.warning(\"Please remember to disable '{}' before going to production as this \"", "originalCommit": "f2b6024c49cd56dc02cddab19370e0e4986e4721", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2051a8e958d71cffd5cf1d95f303c0c37e8229c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2051a8e958d71cffd5cf1d95f303c0c37e8229c", "message": "Made some constants", "committedDate": "2020-12-17T23:01:54Z", "type": "commit"}, {"oid": "67f30d6da9c1811b539b93ef0961f8f6b6940ecc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/67f30d6da9c1811b539b93ef0961f8f6b6940ecc", "message": "removed import", "committedDate": "2020-12-17T23:03:08Z", "type": "commit"}]}