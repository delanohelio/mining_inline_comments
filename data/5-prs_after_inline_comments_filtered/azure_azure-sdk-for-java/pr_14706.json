{"pr_number": 14706, "pr_title": "Add helpers for accessing sample resources", "pr_createdAt": "2020-09-02T01:08:55Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14706", "timeline": [{"oid": "6121eafc794cc109de25121f762f3074d922d1ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6121eafc794cc109de25121f762f3074d922d1ac", "message": "feat(adt): Add helpers for accessing sample's resources", "committedDate": "2020-09-02T01:09:54Z", "type": "commit"}, {"oid": "6121eafc794cc109de25121f762f3074d922d1ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6121eafc794cc109de25121f762f3074d922d1ac", "message": "feat(adt): Add helpers for accessing sample's resources", "committedDate": "2020-09-02T01:09:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMDg3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481520875", "bodyText": "TODO: Add a command line options helper similar to .NET", "author": "abhipsaMisra", "createdAt": "2020-09-02T01:13:06Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");", "originalCommit": "6121eafc794cc109de25121f762f3074d922d1ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNzg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r482207846", "bodyText": "Can you add the \"TODO:\" as a comment so we can find it and resolve it later?", "author": "azabbasi", "createdAt": "2020-09-02T16:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwOTcxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r482209719", "bodyText": "I will take care of this", "author": "azabbasi", "createdAt": "2020-09-02T16:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMDg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMTAwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481521008", "bodyText": "This path to \"resources\" is returned as a URL", "author": "abhipsaMisra", "createdAt": "2020-09-02T01:13:43Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxTimeForTwinOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleSample.class.getClassLoader().getResource(\"DTDL\");", "originalCommit": "6121eafc794cc109de25121f762f3074d922d1ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d894f41229232d4d1bd8ef9f6c755c792620567", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d894f41229232d4d1bd8ef9f6c755c792620567", "message": "Files.readString not available in java 8", "committedDate": "2020-09-02T04:45:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4MzY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481683649", "bodyText": "How to access response status code? ErrorResponse.getValue().getError().getCode() is string.", "author": "abhipsaMisra", "createdAt": "2020-09-02T04:48:27Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxTimeForTwinOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleSample.class.getClassLoader().getResource(\"DTDL\");\n+    private static final Path DtDlDirectoryPath;\n+    private static final Path TwinsPath;\n+    private static final Path ModelsPath;\n+    private static final Path RelationshipsPath;\n+\n+    private static final DigitalTwinsAsyncClient client;\n+\n+    static {\n+        try {\n+            assert DtdlDirectoryUrl != null;\n+            DtDlDirectoryPath = Paths.get(DtdlDirectoryUrl.toURI());\n+        } catch (URISyntaxException e) {\n+            logger.error(\"Unable to convert the DTDL directory URL to URI: \", e);\n+            throw new RuntimeException(e);\n+        }\n+        TwinsPath = Paths.get(DtDlDirectoryPath.toString(), \"DigitalTwins\");\n+        ModelsPath = Paths.get(DtDlDirectoryPath.toString(), \"Models\");\n+        RelationshipsPath = Paths.get(DtDlDirectoryPath.toString(), \"Relationships\");\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(tenantId)\n+                    .clientId(clientId)\n+                    .clientSecret(clientSecret)\n+                    .build()\n+            )\n+            .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+            .buildAsyncClient();\n+    }\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+        // Ensure existing twins with the same name are deleted first\n+        deleteTwins();\n+\n+        // Create twin counterparts for all the models\n+        createTwins();\n+    }\n+\n+    public static void deleteTwins() throws IOException, InterruptedException {\n+        System.out.println(\"DELETE DIGITAL TWINS\");\n+        Map<String, String> twins = FileHelper.loadAllFilesInPath(TwinsPath);\n+        final Semaphore deleteTwinsSemaphore = new Semaphore(0);\n+\n+        twins\n+            .forEach((twinId, twinContent) -> client.deleteDigitalTwin(twinId)\n+                .subscribe(\n+                    aVoid -> { },\n+                    throwable -> {\n+                        // If digital twin does not exist, ignore.\n+                        if (!(throwable instanceof ErrorResponseException) || !((ErrorResponseException) throwable).getValue().getError().getCode().equals(\"DigitalTwinNotFound\")) {", "originalCommit": "5d894f41229232d4d1bd8ef9f6c755c792620567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMDQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r482210486", "bodyText": "ModelPath and RelationshipsPath is not used here.", "author": "azabbasi", "createdAt": "2020-09-02T16:39:39Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxTimeForTwinOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleSample.class.getClassLoader().getResource(\"DTDL\");\n+    private static final Path DtDlDirectoryPath;\n+    private static final Path TwinsPath;\n+    private static final Path ModelsPath;\n+    private static final Path RelationshipsPath;\n+\n+    private static final DigitalTwinsAsyncClient client;\n+\n+    static {\n+        try {\n+            assert DtdlDirectoryUrl != null;\n+            DtDlDirectoryPath = Paths.get(DtdlDirectoryUrl.toURI());\n+        } catch (URISyntaxException e) {\n+            logger.error(\"Unable to convert the DTDL directory URL to URI: \", e);\n+            throw new RuntimeException(e);\n+        }\n+        TwinsPath = Paths.get(DtDlDirectoryPath.toString(), \"DigitalTwins\");\n+        ModelsPath = Paths.get(DtDlDirectoryPath.toString(), \"Models\");", "originalCommit": "5d894f41229232d4d1bd8ef9f6c755c792620567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0NzkyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r482247925", "bodyText": "It will be, in the rest of the sample (this sample creates models and relationships) :)", "author": "abhipsaMisra", "createdAt": "2020-09-02T17:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMDQ4Ng=="}], "type": "inlineReview"}, {"oid": "243fe60c10edf1ebd7a720c9809d59b982717b91", "url": "https://github.com/Azure/azure-sdk-for-java/commit/243fe60c10edf1ebd7a720c9809d59b982717b91", "message": "some small modifications", "committedDate": "2020-09-02T16:42:53Z", "type": "commit"}]}