{"pr_number": 14440, "pr_title": "EventGrid Track 2 autogenerated code", "pr_createdAt": "2020-08-25T22:23:29Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14440", "timeline": [{"oid": "ff8f42720c8c19945b20a40e2764630c23439925", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff8f42720c8c19945b20a40e2764630c23439925", "message": "Regenerate SDK from Autorest v4\n\nAutorest regenerated using up to date version for track 2\npom file incorporated to jacoco and dependencies for module handled\nissue around capitalization of etag discrepancy fixed\nno test coverage yet", "committedDate": "2020-07-01T21:32:14Z", "type": "commit"}, {"oid": "12bf02a14a17935eedc451005cb9dfffb2b84de7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/12bf02a14a17935eedc451005cb9dfffb2b84de7", "message": "Regenerate SDK from Autorest v4\n\nAutorest regenerated using up to date version for track 2\npom file incorporated to jacoco and dependencies for module handled\nissue around capitalization of etag discrepancy fixed\nno test coverage yet", "committedDate": "2020-07-01T21:32:22Z", "type": "commit"}, {"oid": "9327f4c135fd0f2ea65dc4609277ea142574518e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9327f4c135fd0f2ea65dc4609277ea142574518e", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java", "committedDate": "2020-08-25T20:13:25Z", "type": "commit"}, {"oid": "c24cc38c8562964e71b6e8e19ee9b590aeaf8899", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c24cc38c8562964e71b6e8e19ee9b590aeaf8899", "message": "EventGrid Track 2 Autogenerated\n\nAutogenerate EventGrid track 2 classes using the swagger. All files except EventGridPublisherImplTests.java, pom.xml, and the swagger readme.md are autogenerated.", "committedDate": "2020-08-25T21:58:29Z", "type": "commit"}, {"oid": "2a9cfa08a4362d7766bfd6d83de1c15af6f04bc8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a9cfa08a4362d7766bfd6d83de1c15af6f04bc8", "message": "Exclude readme requirement\n\nReadme is included in the PR that has all the written components, since the Readme contains samples that only work with written code.", "committedDate": "2020-08-25T22:57:57Z", "type": "commit"}, {"oid": "745146d8b6781cda4c799f9d1f92090a51dd88a4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/745146d8b6781cda4c799f9d1f92090a51dd88a4", "message": "fix docsettings indents", "committedDate": "2020-08-26T22:02:53Z", "type": "commit"}, {"oid": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d4045d4b448328a0126cbcd949a8bd236948aa0", "message": "Add back in paths", "committedDate": "2020-08-26T22:05:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNzA1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477637053", "bodyText": "nit: The class name implies that this is a test, I don't think the method name needs test as well.", "author": "conniey", "createdAt": "2020-08-26T22:51:17Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNzMwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477637304", "bodyText": "nit: unnecessary new line.", "author": "conniey", "createdAt": "2020-08-26T22:51:37Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNzQ0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477637442", "bodyText": "private?", "author": "conniey", "createdAt": "2020-08-26T22:51:48Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzODAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477638018", "bodyText": "This can be Collections.singletonList() iirc so you don't have to allocate an ArrayList to add a single item.", "author": "conniey", "createdAt": "2020-08-26T22:52:34Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzODI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477638286", "bodyText": "Use StepVerifier rather than block.", "author": "conniey", "createdAt": "2020-08-26T22:52:55Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzODY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477638693", "bodyText": "Since this set-up is done for every test, you could push it to the @beforetest method.", "author": "conniey", "createdAt": "2020-08-26T22:53:28Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzOTAyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477639029", "bodyText": "I believe it is assertEquals(expected, actual), not `actual, expected``", "author": "conniey", "createdAt": "2020-08-26T22:53:56Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzOTg2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477639868", "bodyText": "If it is live mode, should you assert this is set?", "author": "conniey", "createdAt": "2020-08-26T22:54:59Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";\n+\n+    private static final String CLOUD_ENDPOINT = \"EG_CLOUD_ENDPOINT\";\n+\n+    private static final String CUSTOM_ENDPOINT = \"EG_CUSTOM_ENDPOINT\";\n+\n+    private static final String EVENTGRID_KEY = \"EG_KEY\";\n+\n+    private static final String CLOUD_KEY = \"EG_CLOUD_KEY\";\n+\n+    private static final String CUSTOM_KEY = \"EG_CUSTOM_KEY\";\n+\n+    private static final String DUMMY_ENDPOINT = \"https://www.dummyEndpoint.com\";\n+\n+    private static final String DUMMY_KEY = \"dummyKey\";\n+\n+    @Override\n+    protected void beforeTest() {\n+        builder = new HttpPipelineBuilder();\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.policies(interceptorManager.getRecordPolicy(), new RetryPolicy());\n+        }\n+    }\n+\n+    @Test\n+    public void testPublishEventGridEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(EVENTGRID_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<EventGridEvent> events = new ArrayList<>();\n+        events.add(new EventGridEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setEventType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setDataVersion(\"1.0\")\n+            .setEventTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(EVENTGRID_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+\n+    }\n+\n+    @Test\n+    public void testPublishCloudEventsImpl() throws MalformedURLException {\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(CLOUD_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<CloudEvent> events = new ArrayList<>();\n+        events.add(new CloudEvent()\n+            .setId(UUID.randomUUID().toString())\n+            .setSubject(\"Test\")\n+            .setType(\"Microsoft.MockPublisher.TestEvent\")\n+            .setData(new HashMap<String, String>() {{\n+                put(\"Field1\", \"Value1\");\n+                put(\"Field2\", \"Value2\");\n+                put(\"Field3\", \"Value3\");\n+            }})\n+            .setSpecversion(\"1.0\")\n+            .setTime(OffsetDateTime.now()));\n+\n+        String hostname = new URL(getEndpoint(CLOUD_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishCloudEventEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+    }\n+\n+    @Test\n+    public void TestPublishCustomEventsImpl() throws MalformedURLException {\n+\n+        EventGridPublisherClientImpl egClient = new EventGridPublisherClientImplBuilder()\n+            .pipeline(builder.policies(\n+                new AddHeadersPolicy(new HttpHeaders().put(\"aeg-sas-key\", getKey(CUSTOM_KEY))))\n+                .build())\n+            .buildClient();\n+\n+        List<Object> events = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            events.add(new HashMap<String, String>() {{\n+                put(\"id\", UUID.randomUUID().toString());\n+                put(\"subject\", \"Test\");\n+                put(\"foo\", \"bar\");\n+                put(\"type\", \"Microsoft.MockPublisher.TestEvent\");\n+            }});\n+        }\n+\n+        String hostname = new URL(getEndpoint(CUSTOM_ENDPOINT)).getHost();\n+        Response<Void> response = egClient.publishCustomEventEventsWithResponseAsync(hostname, events).block();\n+\n+        assertNotNull(response);\n+        assertEquals(response.getStatusCode(), 200);\n+    }\n+\n+\n+    private String getEndpoint(String liveEnvName) {\n+        if (interceptorManager.isPlaybackMode()) {\n+            return DUMMY_ENDPOINT;\n+        }\n+        return System.getenv(liveEnvName);\n+    }\n+\n+    private String getKey(String liveEnvName) {\n+        if (interceptorManager.isPlaybackMode()) {\n+            return DUMMY_KEY;\n+        }\n+        return System.getenv(liveEnvName);", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0MDQ1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14440#discussion_r477640451", "bodyText": "The naming for these should be AZURE_EVENTGRID_, etc. We have naming conventions for environment variables in our SDK guidelines.", "author": "conniey", "createdAt": "2020-08-26T22:55:47Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/test/java/com/azure/messaging/eventgrid/EventGridPublisherImplTests.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License. See License.txt in the project root for\n+// license information.\n+\n+package com.azure.messaging.eventgrid;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestBase;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImpl;\n+import com.azure.messaging.eventgrid.implementation.EventGridPublisherClientImplBuilder;\n+import com.azure.messaging.eventgrid.implementation.models.CloudEvent;\n+import com.azure.messaging.eventgrid.implementation.models.EventGridEvent;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+public class EventGridPublisherImplTests extends TestBase {\n+\n+    HttpPipelineBuilder builder;\n+\n+    private static final String EVENTGRID_ENDPOINT = \"EG_ENDPOINT\";", "originalCommit": "5d4045d4b448328a0126cbcd949a8bd236948aa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a47fa35c6ef8f1d6b06b278feb2ae4bd97b3cf41", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a47fa35c6ef8f1d6b06b278feb2ae4bd97b3cf41", "message": "Fix tests and pom\n\ntests now renamed, use StepVerifier. Core dependency changed, added reactor test as dependency and remove build configs in pom. Refactor swagger readme for captialization.", "committedDate": "2020-08-27T00:22:38Z", "type": "commit"}, {"oid": "3a6632f2941b98a1a3b765c2a820837d16733f85", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a6632f2941b98a1a3b765c2a820837d16733f85", "message": "fix docsettings indenting again", "committedDate": "2020-08-27T16:20:38Z", "type": "commit"}]}