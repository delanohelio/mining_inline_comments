{"pr_number": 8699, "pr_title": "query optimization", "pr_createdAt": "2020-03-04T17:11:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8699", "timeline": [{"oid": "9538f0be640a533ac242823e3fe6ae7896d0c283", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9538f0be640a533ac242823e3fe6ae7896d0c283", "message": "remove intermediate String in serialization/deserialization, use byte[], and remove one unnecessary round of serializaiton/deserialization for query", "committedDate": "2020-03-04T17:10:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjAzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r387992038", "bodyText": "Does this needs to be public ?\nIt exposes ObjectNode to public surface", "author": "kushagraThapar", "createdAt": "2020-03-04T23:17:31Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Database.java", "diffHunk": "@@ -16,6 +18,16 @@\n  */\n public final class Database extends Resource {\n \n+    /**\n+     * Constructor.\n+     *\n+     * @param objectNode the {@link ObjectNode} that represent the\n+     * {@link JsonSerializable}\n+     */\n+    public Database(ObjectNode objectNode) {", "originalCommit": "9538f0be640a533ac242823e3fe6ae7896d0c283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MzQ3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r387993478", "bodyText": "all of the new public constructors are in the implementation package not in the public surface area.", "author": "moderakh", "createdAt": "2020-03-04T23:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjA3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r387992076", "bodyText": "Same here.", "author": "kushagraThapar", "createdAt": "2020-03-04T23:17:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Document.java", "diffHunk": "@@ -21,6 +23,16 @@\n  */\n public class Document extends Resource {\n \n+    /**\n+     * Constructor.\n+     *\n+     * @param objectNode the {@link ObjectNode} that represent the\n+     * {@link JsonSerializable}\n+     */\n+    public Document(ObjectNode objectNode) {", "originalCommit": "9538f0be640a533ac242823e3fe6ae7896d0c283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MzUwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r387993506", "bodyText": "all of the new public constructors are in the implementation package not in the public surface area.", "author": "moderakh", "createdAt": "2020-03-04T23:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjQ0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r387992449", "bodyText": "Same, and everywhere else. azure-core will not allow exposing ObjectNode", "author": "kushagraThapar", "createdAt": "2020-03-04T23:18:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/DocumentCollection.java", "diffHunk": "@@ -27,6 +29,16 @@\n     private UniqueKeyPolicy uniqueKeyPolicy;\n     private PartitionKeyDefinition partitionKeyDefinition;\n \n+    /**\n+     * Constructor.\n+     *\n+     * @param objectNode the {@link ObjectNode} that represent the\n+     * {@link JsonSerializable}\n+     */\n+    public DocumentCollection(ObjectNode objectNode) {", "originalCommit": "9538f0be640a533ac242823e3fe6ae7896d0c283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MzUzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r387993531", "bodyText": "all of the new public constructors are in the implementation package not in the public surface area.", "author": "moderakh", "createdAt": "2020-03-04T23:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MDE3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8699#discussion_r389170177", "bodyText": "When we down cast JsonNode to ObjectNode we should make sure it is never an ArrayNode. Why don't we just use it as JsonNode itself and why do we need to convert it to ObjectNode any reason? I understand that we were previously converting it to a ObjectNode eventually node->json->objectnode. So this might not be an issue but just a thought", "author": "mbhaskar", "createdAt": "2020-03-06T22:14:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceResponse.java", "diffHunk": "@@ -135,18 +138,12 @@ public String getResponseBodyAsString() {\n                 // Aggregate on single partition collection may return the aggregated value only\n                 // In that case it needs to encapsulated in a special document\n \n-                String resourceJson = jToken.isValueNode() || jToken.isArray()// to add nulls, arrays, objects\n-                        ? String.format(\"{\\\"%s\\\": %s}\", Constants.Properties.VALUE, jToken.toString())\n-                                : toJson(jToken);\n-                        T resource = null;\n-                        try {\n-                            resource = c.getConstructor(String.class).newInstance(resourceJson);\n-                        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException\n-                                | InvocationTargetException | NoSuchMethodException | SecurityException e) {\n-                            throw new IllegalStateException(\"Failed to instantiate class object.\", e);\n-                        }\n-\n-                        queryResults.add(resource);\n+                JsonNode resourceJson = jToken.isValueNode() || jToken.isArray()// to add nulls, arrays, objects\n+                        ? fromJson(String.format(\"{\\\"%s\\\": %s}\", Constants.Properties.VALUE, jToken.toString()))\n+                                : jToken;\n+\n+               T resource = (T) BridgeInternal.instantiateJsonSerializable((ObjectNode) resourceJson, c);", "originalCommit": "9538f0be640a533ac242823e3fe6ae7896d0c283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}