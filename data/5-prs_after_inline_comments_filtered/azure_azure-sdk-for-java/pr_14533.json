{"pr_number": 14533, "pr_title": "Implement Models API Part #1", "pr_createdAt": "2020-08-27T21:41:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14533", "timeline": [{"oid": "465543c6db0960703866f987d95f27ffe4f96288", "url": "https://github.com/Azure/azure-sdk-for-java/commit/465543c6db0960703866f987d95f27ffe4f96288", "message": "Implement ListModels API", "committedDate": "2020-08-28T00:08:10Z", "type": "commit"}, {"oid": "cd664bca8c439b5212b7fb9fee50692bff407e4b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd664bca8c439b5212b7fb9fee50692bff407e4b", "message": "Update API design.md", "committedDate": "2020-08-28T00:08:10Z", "type": "commit"}, {"oid": "73ff14cf546c344aedc289620ff51ef2b925a575", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73ff14cf546c344aedc289620ff51ef2b925a575", "message": "Update DigitalTwinsAsyncClient.java", "committedDate": "2020-08-28T00:08:10Z", "type": "commit"}, {"oid": "5468f61e5df61a235f56b6ba0eb2d582328f3d5c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5468f61e5df61a235f56b6ba0eb2d582328f3d5c", "message": "Add createModels API", "committedDate": "2020-08-28T00:08:10Z", "type": "commit"}, {"oid": "7835323364123b3c4c39a3e7ef5444cd71fbf6f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7835323364123b3c4c39a3e7ef5444cd71fbf6f3", "message": "Minor fix to the next link", "committedDate": "2020-08-28T00:08:11Z", "type": "commit"}, {"oid": "68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "message": "Implement Async getModel apis", "committedDate": "2020-08-28T00:08:11Z", "type": "commit"}, {"oid": "68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/68a49c1dc7987b034adcc1c4a9a1d4f48b6c694a", "message": "Implement Async getModel apis", "committedDate": "2020-08-28T00:08:11Z", "type": "forcePushed"}, {"oid": "a5abc00fea8f016b8b4e4e1d839f194313e84391", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a5abc00fea8f016b8b4e4e1d839f194313e84391", "message": "Rebase master, implement context", "committedDate": "2020-08-28T00:41:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478769436", "bodyText": "For the time being I am using List instead of Iterable as the protocol layer also accepts a List, not sure what the value add is for us to use Iterables", "author": "azabbasi", "createdAt": "2020-08-28T00:42:56Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {", "originalCommit": "a5abc00fea8f016b8b4e4e1d839f194313e84391", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5Mjc5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792791", "bodyText": "I agree, we should stick to List.", "author": "abhipsaMisra", "createdAt": "2020-08-28T02:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTU1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478769557", "bodyText": "This will have to return a PagedFlux error. Working on it", "author": "azabbasi", "createdAt": "2020-08-28T00:43:28Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +233,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+    \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return null;", "originalCommit": "a5abc00fea8f016b8b4e4e1d839f194313e84391", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf7d079daf0592cda83b1530c10b02e58503c2cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf7d079daf0592cda83b1530c10b02e58503c2cd", "message": "Update DigitalTwinsAsyncClient.java", "committedDate": "2020-08-28T00:48:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjY4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478792682", "bodyText": "Is supposed to be the java equivalent of #region? \ud83d\ude09", "author": "abhipsaMisra", "createdAt": "2020-08-28T02:14:59Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================", "originalCommit": "cf7d079daf0592cda83b1530c10b02e58503c2cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5NTIzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478795236", "bodyText": "I just wanted to have some API separation to ease locating different APIs, we will remove them once we are ready to ship, I don't feel strongly about this at all though, so if you guys hate it we can totally remove it.", "author": "azabbasi", "createdAt": "2020-08-28T02:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5MjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478798623", "bodyText": "The PL gives us Mono<Response<ModelData>>, so this should be sufficient:\nreturn protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n            .flatMap(modelDataResponse -> Mono.just(modelDataResponse.getValue()));", "author": "abhipsaMisra", "createdAt": "2020-08-28T02:39:05Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));", "originalCommit": "cf7d079daf0592cda83b1530c10b02e58503c2cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTI0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478799245", "bodyText": "You can actually have the API in line 290 updated to call Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context), and get rid of 294-297 entirely", "author": "abhipsaMisra", "createdAt": "2020-08-28T02:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478799310", "bodyText": "@ServiceMethod(returns = ReturnType.SINGLE)\n    public Mono<ModelData> getModel(String modelId) {\n        return withContext(context -> getModelWithResponse(modelId, context))\n            .flatMap(response -> Mono.just(response.getValue()));\n    }", "author": "abhipsaMisra", "createdAt": "2020-08-28T02:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r478800816", "bodyText": "Why not define listModelOptions.getDependenciesFor as a List to begin with? If the PL is restrictive, then any advantage in the public API being flexible?\nIs there a risk of running into conversion errors by simply casting it to a List -> would a for-each loop be better: https://www.baeldung.com/java-iterable-to-collection?", "author": "abhipsaMisra", "createdAt": "2020-08-28T02:48:15Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,126 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModel(modelId, context));\n+    }\n+\n+    Mono<ModelData> getModel(String modelId, Context context){\n+        return protocolLayer.getDigitalTwinModels().getByIdWithResponseAsync(modelId, includeModelDefinition, context)\n+            .flatMap(modelDataResponse -> Mono.just(mapper.convertValue(modelDataResponse.getValue(), ModelData.class)));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The application/json model\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options for the list operation.\n+     * @return A {@link PagedFlux} of ModelData.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            (List<String>) listModelOptions.getDependenciesFor(),", "originalCommit": "cf7d079daf0592cda83b1530c10b02e58503c2cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5OTc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479399766", "bodyText": "I think so too, I will change all the types back to List since that is the input the protocol layer accepts and I don't see a point in going more generic than that", "author": "azabbasi", "createdAt": "2020-08-28T16:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMDgxNg=="}], "type": "inlineReview"}, {"oid": "6954b7b7c58a096c1bbc58440444e72dd8db0abb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6954b7b7c58a096c1bbc58440444e72dd8db0abb", "message": "Address comments.", "committedDate": "2020-08-28T16:29:05Z", "type": "commit"}, {"oid": "9f0dd6798540a26962775677ce7686b9c8549e96", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f0dd6798540a26962775677ce7686b9c8549e96", "message": "Update comments.", "committedDate": "2020-08-28T16:34:34Z", "type": "commit"}, {"oid": "6efdd3acc26c5b46c3894aec029730eb05457aea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6efdd3acc26c5b46c3894aec029730eb05457aea", "message": "Implement deleteModels", "committedDate": "2020-08-28T20:04:38Z", "type": "commit"}, {"oid": "f8134cd35fa978dd34754717e2ae5695ffb4cf05", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8134cd35fa978dd34754717e2ae5695ffb4cf05", "message": "fix comments.", "committedDate": "2020-08-28T20:08:06Z", "type": "commit"}, {"oid": "c0736884fcf1ebbd73b61579eb0791f4eff49604", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0736884fcf1ebbd73b61579eb0791f4eff49604", "message": "Implement Sync APIs", "committedDate": "2020-08-28T21:02:37Z", "type": "commit"}, {"oid": "36b8d0b78706ed663c4ac7683c54c341226136d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36b8d0b78706ed663c4ac7683c54c341226136d8", "message": "Implement contexts for sync client.", "committedDate": "2020-08-28T21:11:07Z", "type": "commit"}, {"oid": "acb56b2cbe0719c1d5d7f2031b072394f50c14b5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acb56b2cbe0719c1d5d7f2031b072394f50c14b5", "message": "Update comments. Remove API design doc for methods that have been implemented.", "committedDate": "2020-08-28T21:40:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r479552393", "bodyText": "do we even need to mention this return?", "author": "bikamani", "createdAt": "2020-08-28T22:00:34Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -228,4 +234,149 @@ public HttpPipeline getHttpPipeline() {\n             });\n     }\n \n+\n+    //==================================================================================================================================================\n+    // Models APIs\n+    //==================================================================================================================================================\n+\n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedFlux} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> createModels(List<String> models) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n+            nextLink -> withContext(context -> Mono.empty()));\n+    }\n+\n+    PagedFlux<ModelData> createModels(List<String> models, Context context){\n+        return new PagedFlux<>(\n+            () -> createModelsSinglePageAsync(models, context),\n+            nextLink -> Mono.empty());\n+    }\n+\n+    Mono<PagedResponse<ModelData>> createModelsSinglePageAsync(List<String> models, Context context)\n+    {\n+        List<Object> modelsPayload = new ArrayList<>();\n+        for (String model: models) {\n+            try {\n+                modelsPayload.add(mapper.readValue(model, Object.class));\n+            }\n+            catch (JsonProcessingException e) {\n+                logger.error(\"Could not parse the model payload [%s]: %s\", model, e);\n+                return Mono.error(e);\n+            }\n+        }\n+\n+        return protocolLayer.getDigitalTwinModels().addWithResponseAsync(modelsPayload, context)\n+            .map(\n+                listResponse -> new PagedResponseBase<>(\n+                    listResponse.getRequest(),\n+                    listResponse.getStatusCode(),\n+                    listResponse.getHeaders(),\n+                    listResponse.getValue(),\n+                    null,\n+                    ((ResponseBase)listResponse).getDeserializedHeaders()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<ModelData> getModel(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context))\n+            .flatMap(response -> Mono.just(response.getValue()));\n+    }\n+\n+    /**\n+     * Gets a model, including the model metadata and the model definition.\n+     * @param modelId The Id of the model.\n+     * @return The ModelData and the http response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<ModelData>> getModelWithResponse(String modelId) {\n+        return withContext(context -> getModelWithResponse(modelId, context));\n+    }\n+\n+    Mono<Response<ModelData>> getModelWithResponse(String modelId, Context context){\n+        return protocolLayer\n+            .getDigitalTwinModels()\n+            .getByIdWithResponseAsync(modelId, includeModelDefinition, context);\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n+            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    }\n+\n+    /**\n+     * Gets the list of models by iterating through a collection.\n+     * @return A {@link PagedFlux} of ModelData and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<ModelData> listModels() {\n+        return listModels(new ListModelOptions());\n+    }\n+\n+    PagedFlux<ModelData> listModels(Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(new ListModelOptions(), context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    PagedFlux<ModelData> listModels(ListModelOptions listModelOptions, Context context){\n+        return new PagedFlux<>(\n+            () -> listModelsSinglePageAsync(listModelOptions, context),\n+            nextLink -> listModelsNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsSinglePageAsync(ListModelOptions listModelOptions, Context context){\n+        return protocolLayer.getDigitalTwinModels().listSinglePageAsync(\n+            listModelOptions.getDependenciesFor(),\n+            listModelOptions.getIncludeModelDefinition(),\n+            new DigitalTwinModelsListOptions().setMaxItemCount(listModelOptions.getMaxItemCount()),\n+            context);\n+    }\n+\n+    Mono<PagedResponse<ModelData>> listModelsNextSinglePageAsync(String nextLink, Context context){\n+        return protocolLayer.getDigitalTwinModels().listNextSinglePageAsync(nextLink, context);\n+    }\n+\n+    /**\n+     * Deletes a model.\n+     * @param modelId The id for the model. The id is globally unique and case sensitive.\n+     * @return An empty Mono", "originalCommit": "36b8d0b78706ed663c4ac7683c54c341226136d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1NTMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14533#discussion_r480255338", "bodyText": "Yes, we will get doc verification errors.", "author": "azabbasi", "createdAt": "2020-08-31T16:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU1MjM5Mw=="}], "type": "inlineReview"}]}