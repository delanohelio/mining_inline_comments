{"pr_number": 14939, "pr_title": "[Service Bus] Enable SAS support in connection string for Service Bus", "pr_createdAt": "2020-09-09T01:39:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14939", "timeline": [{"oid": "568ee17b5535b2235b4ea4887c2df0b65a6dd4aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/568ee17b5535b2235b4ea4887c2df0b65a6dd4aa", "message": "Enable SAS support in connection string for Service Bus", "committedDate": "2020-09-09T01:38:32Z", "type": "commit"}, {"oid": "fa6d0e08e997a28dc0501830004fdc9fd5ec5327", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa6d0e08e997a28dc0501830004fdc9fd5ec5327", "message": "Fix checkstyle", "committedDate": "2020-09-09T02:05:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MTYxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14939#discussion_r485371611", "bodyText": "Can we add one more example where user give bad date time format for example 202012-31T13:37:45Z", "author": "hemanttanwar", "createdAt": "2020-09-09T06:38:14Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/ServiceBusSharedKeyCredentialTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.time.OffsetDateTime;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * Unit tests for {@link ServiceBusSharedKeyCredential}.\n+ */\n+public class ServiceBusSharedKeyCredentialTest {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getSas\")\n+    public void testSharedAccessSignatureCredential(String sas, OffsetDateTime expectedExpirationTime) {\n+        ServiceBusSharedKeyCredential serviceBusSharedKeyCredential = new ServiceBusSharedKeyCredential(sas);\n+        StepVerifier.create(serviceBusSharedKeyCredential.getToken(new TokenRequestContext().addScopes(\"sb://test\"\n+            + \"-entity.servicebus.windows.net/.default\")))\n+            .assertNext(token -> {\n+                assertNotNull(token.getToken());\n+                assertEquals(sas, token.getToken());\n+                assertEquals(expectedExpirationTime, token.getExpiresAt());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    private static Stream<Arguments> getSas() {\n+        String validSas = \"SharedAccessSignature \"\n+            + \"sr=https%3A%2F%2Fentity-name.servicebus.windows.net%2F\"\n+            + \"&sig=encodedsignature%3D\"\n+            + \"&se=1599537084\"\n+            + \"&skn=test-sas-key\";\n+        String validSasWithNoExpirationTime = \"SharedAccessSignature \"\n+            + \"sr=https%3A%2F%2Fentity-name.servicebus.windows.net%2F\"\n+            + \"&sig=encodedsignature%3D\"\n+            + \"&skn=test-sas-key\";\n+        String validSasInvalidExpirationTimeFormat = \"SharedAccessSignature \"\n+            + \"sr=https%3A%2F%2Fentity-name.servicebus.windows.net%2F\"\n+            + \"&sig=encodedsignature%3D\"\n+            + \"&se=se=2020-12-31T13:37:45Z\"", "originalCommit": "fa6d0e08e997a28dc0501830004fdc9fd5ec5327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5NjQzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14939#discussion_r485796433", "bodyText": "Any non-integer format will be ignored and this test is covering that.", "author": "srnagar", "createdAt": "2020-09-09T17:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MjEyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14939#discussion_r485372126", "bodyText": "What if user give a space, will it be valid  for example & se =1599537084 ?", "author": "hemanttanwar", "createdAt": "2020-09-09T06:39:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/ServiceBusSharedKeyCredentialTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.time.OffsetDateTime;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * Unit tests for {@link ServiceBusSharedKeyCredential}.\n+ */\n+public class ServiceBusSharedKeyCredentialTest {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getSas\")\n+    public void testSharedAccessSignatureCredential(String sas, OffsetDateTime expectedExpirationTime) {\n+        ServiceBusSharedKeyCredential serviceBusSharedKeyCredential = new ServiceBusSharedKeyCredential(sas);\n+        StepVerifier.create(serviceBusSharedKeyCredential.getToken(new TokenRequestContext().addScopes(\"sb://test\"\n+            + \"-entity.servicebus.windows.net/.default\")))\n+            .assertNext(token -> {\n+                assertNotNull(token.getToken());\n+                assertEquals(sas, token.getToken());\n+                assertEquals(expectedExpirationTime, token.getExpiresAt());\n+            })\n+            .verifyComplete();\n+    }\n+\n+    private static Stream<Arguments> getSas() {\n+        String validSas = \"SharedAccessSignature \"\n+            + \"sr=https%3A%2F%2Fentity-name.servicebus.windows.net%2F\"\n+            + \"&sig=encodedsignature%3D\"\n+            + \"&se=1599537084\"", "originalCommit": "fa6d0e08e997a28dc0501830004fdc9fd5ec5327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5NTc2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14939#discussion_r485795762", "bodyText": "We do not validate the contents of the SAS token. The service will throw an exception if there are unnecessary chars in the token.", "author": "srnagar", "createdAt": "2020-09-09T17:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MjEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3Nzc0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14939#discussion_r485377749", "bodyText": "Should we log here in case of logger.verbose(\"Could not parse .... \") to give user information that something might be wrong in their string and they have a chance to fix the formatting issue in their string?  But at same time, we do not want to fill logs.", "author": "hemanttanwar", "createdAt": "2020-09-09T06:51:02Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusSharedKeyCredential.java", "diffHunk": "@@ -155,4 +182,22 @@ private AccessToken generateSharedAccessSignature(final String resource) throws\n \n         return new AccessToken(token, expiresOn);\n     }\n+\n+    private OffsetDateTime getExpirationTime(String sharedAccessSignature) {\n+        String[] parts = sharedAccessSignature.split(\"&\");\n+        return Arrays.stream(parts)\n+            .map(part -> part.split(\"=\"))\n+            .filter(pair -> pair.length == 2 && pair[0].equalsIgnoreCase(\"se\"))\n+            .findFirst()\n+            .map(pair -> pair[1])\n+            .map(expirationTimeStr -> {\n+                try {\n+                    long epochSeconds = Long.parseLong(expirationTimeStr);\n+                    return Instant.ofEpochSecond(epochSeconds).atOffset(ZoneOffset.UTC);\n+                } catch (NumberFormatException exception) {\n+                    return OffsetDateTime.MAX;", "originalCommit": "fa6d0e08e997a28dc0501830004fdc9fd5ec5327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5NjUxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14939#discussion_r485796519", "bodyText": "Updated.", "author": "srnagar", "createdAt": "2020-09-09T17:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3Nzc0OQ=="}], "type": "inlineReview"}, {"oid": "4e7f03ac41e623b310c8c4599015fbcdc8818119", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e7f03ac41e623b310c8c4599015fbcdc8818119", "message": "Add logs", "committedDate": "2020-09-09T17:33:12Z", "type": "commit"}]}