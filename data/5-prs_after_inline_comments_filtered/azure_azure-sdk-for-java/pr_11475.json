{"pr_number": 11475, "pr_title": "Split ServiceClient to IndexClient and IndexerClient", "pr_createdAt": "2020-05-27T18:39:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11475", "timeline": [{"oid": "fe4c2980b665414900386b2d386a233eac51dbb3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe4c2980b665414900386b2d386a233eac51dbb3", "message": "Split ServiceClient to IndexClient and IndexerClient", "committedDate": "2020-05-27T18:38:47Z", "type": "commit"}, {"oid": "fb484a2ff65360525155a32785daa1a7d5a72b3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb484a2ff65360525155a32785daa1a7d5a72b3c", "message": "Fixed linting and changelog", "committedDate": "2020-05-27T19:16:07Z", "type": "commit"}, {"oid": "33946a5506d7974f083543535d3dcc732f145411", "url": "https://github.com/Azure/azure-sdk-for-java/commit/33946a5506d7974f083543535d3dcc732f145411", "message": "Fixed typo", "committedDate": "2020-05-27T22:36:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NTAyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431485029", "bodyText": "Need to update the return Javadocs", "author": "alzimmermsft", "createdAt": "2020-05-27T22:46:18Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -162,7 +162,7 @@ public SearchIndexAsyncClient buildAsyncClient() {\n      * @return The updated SearchIndexClientBuilder object.", "originalCommit": "33946a5506d7974f083543535d3dcc732f145411", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NTk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431485948", "bodyText": "Need to update Javadoc", "author": "alzimmermsft", "createdAt": "2020-05-27T22:48:58Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClientBuilder.java", "diffHunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.search.documents.indexes;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.search.documents.SearchServiceVersion;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link\n+ * SearchIndexClient SearchServiceClients} and {@link SearchIndexAsyncClient SearchServiceAsyncClients}. Call {@link\n+ * #buildClient() buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of\n+ * the desired client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n+public final class SearchIndexClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchIndexClient\n+     * SearchServiceClients} and {@link SearchIndexAsyncClient SearchServiceAsyncClients}.\n+     */\n+    public SearchIndexClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchIndexClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchIndexClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline} and {@link #endpoint(String)\n+     * endpoint} are used to create the {@link SearchIndexClient client}. All other builder settings are ignored.\n+     *\n+     * @return A SearchServiceClient with the options set from the builder.\n+     * @throws NullPointerException If {@code endpoint} are {@code null}.\n+     */\n+    public SearchIndexClient buildClient() {\n+        return new SearchIndexClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link SearchIndexAsyncClient} based on options set in the Builder. Every time {@code\n+     * buildAsyncClient()} is called a new instance of {@link SearchIndexAsyncClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline} and {@link #endpoint(String)\n+     * endpoint} are used to create the {@link SearchIndexAsyncClient client}. All other builder settings are\n+     * ignored.\n+     *\n+     * @return A SearchServiceAsyncClient with the options set from the builder.", "originalCommit": "33946a5506d7974f083543535d3dcc732f145411", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NjAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431486009", "bodyText": "Need to update Javadoc", "author": "alzimmermsft", "createdAt": "2020-05-27T22:49:09Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClientBuilder.java", "diffHunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.search.documents.indexes;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.search.documents.SearchServiceVersion;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link\n+ * SearchIndexClient SearchServiceClients} and {@link SearchIndexAsyncClient SearchServiceAsyncClients}. Call {@link\n+ * #buildClient() buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of\n+ * the desired client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n+public final class SearchIndexClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchIndexClient\n+     * SearchServiceClients} and {@link SearchIndexAsyncClient SearchServiceAsyncClients}.\n+     */\n+    public SearchIndexClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchIndexClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchIndexClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline} and {@link #endpoint(String)\n+     * endpoint} are used to create the {@link SearchIndexClient client}. All other builder settings are ignored.\n+     *\n+     * @return A SearchServiceClient with the options set from the builder.", "originalCommit": "33946a5506d7974f083543535d3dcc732f145411", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NjA4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431486081", "bodyText": "Need to update Javadoc", "author": "alzimmermsft", "createdAt": "2020-05-27T22:49:24Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClientBuilder.java", "diffHunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.search.documents.indexes;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.search.documents.SearchServiceVersion;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link\n+ * SearchIndexClient SearchServiceClients} and {@link SearchIndexAsyncClient SearchServiceAsyncClients}. Call {@link\n+ * #buildClient() buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of\n+ * the desired client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchIndexClient.class, SearchIndexAsyncClient.class})\n+public final class SearchIndexClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchIndexClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private RetryPolicy retryPolicy;\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchIndexClient\n+     * SearchServiceClients} and {@link SearchIndexAsyncClient SearchServiceAsyncClients}.\n+     */\n+    public SearchIndexClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchIndexClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchIndexClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline} and {@link #endpoint(String)\n+     * endpoint} are used to create the {@link SearchIndexClient client}. All other builder settings are ignored.\n+     *\n+     * @return A SearchServiceClient with the options set from the builder.\n+     * @throws NullPointerException If {@code endpoint} are {@code null}.\n+     */\n+    public SearchIndexClient buildClient() {\n+        return new SearchIndexClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link SearchIndexAsyncClient} based on options set in the Builder. Every time {@code\n+     * buildAsyncClient()} is called a new instance of {@link SearchIndexAsyncClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline} and {@link #endpoint(String)\n+     * endpoint} are used to create the {@link SearchIndexAsyncClient client}. All other builder settings are\n+     * ignored.\n+     *\n+     * @return A SearchServiceAsyncClient with the options set from the builder.\n+     * @throws NullPointerException If {@code endpoint} are {@code null}.\n+     */\n+    public SearchIndexAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        SearchServiceVersion buildVersion = (serviceVersion == null)\n+            ? SearchServiceVersion.getLatest()\n+            : serviceVersion;\n+\n+        if (httpPipeline != null) {\n+            return new SearchIndexAsyncClient(endpoint, buildVersion, httpPipeline);\n+        }\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+        final List<HttpPipelinePolicy> httpPipelinePolicies = new ArrayList<>();\n+        httpPipelinePolicies.add(new AddHeadersPolicy(headers));\n+        httpPipelinePolicies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(httpPipelinePolicies);\n+        httpPipelinePolicies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n+\n+        httpPipelinePolicies.add(new AddDatePolicy());\n+        if (keyCredential != null) {\n+            this.policies.add(new AzureKeyCredentialPolicy(API_KEY, keyCredential));\n+        }\n+        httpPipelinePolicies.addAll(this.policies);\n+\n+        HttpPolicyProviders.addAfterRetryPolicies(httpPipelinePolicies);\n+\n+        httpPipelinePolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+            buildConfiguration));\n+        httpPipelinePolicies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+        HttpPipeline buildPipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClient)\n+            .policies(httpPipelinePolicies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        return new SearchIndexAsyncClient(endpoint, buildVersion, buildPipeline);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Search instance.\n+     *\n+     * @param endpoint The URL of the Azure Search instance.\n+     * @return The updated SearchServiceClientBuilder object.\n+     * @throws IllegalArgumentException If {@code endpoint} is null or it cannot be parsed into a valid URL.\n+     */\n+    public SearchIndexClientBuilder endpoint(String endpoint) {\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL\"));\n+        }\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link AzureKeyCredential} used to authenticate HTTP requests.\n+     *\n+     * @param keyCredential The {@link AzureKeyCredential} used to authenticate HTTP requests.\n+     * @return The updated SearchServiceClientBuilder object.", "originalCommit": "33946a5506d7974f083543535d3dcc732f145411", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6283508d31db3f449c9369dd7e6bf8605922e915", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6283508d31db3f449c9369dd7e6bf8605922e915", "message": "Make JavaDoc changes", "committedDate": "2020-05-28T02:03:57Z", "type": "commit"}, {"oid": "431eefd1de728ca8488b91bf95d4d9ca41ae04e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/431eefd1de728ca8488b91bf95d4d9ca41ae04e2", "message": "Make JavaDoc changes2", "committedDate": "2020-05-28T02:10:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MjYwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431552602", "bodyText": "Does Search offer anonymous access? I thought a key would always need to be set.", "author": "alzimmermsft", "createdAt": "2020-05-28T02:49:38Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -0,0 +1,311 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link SearchClient\n+ * SearchClients} and {@link SearchAsyncClient SearchAsyncClients}. Call {@link #buildClient()\n+ * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n+ * client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchClient.class, SearchAsyncClient.class})\n+public final class SearchClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private String indexName;\n+    private RetryPolicy retryPolicy;\n+\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchClient SearchClients}\n+     * and {@link SearchAsyncClient SearchAsyncClients}.\n+     */\n+    public SearchClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchClient buildClient() {\n+        return new SearchClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link SearchAsyncClient} based on options set in the Builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link SearchAsyncClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchAsyncClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(indexName, \"'indexName' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        SearchServiceVersion buildVersion = (serviceVersion == null)\n+            ? SearchServiceVersion.getLatest()\n+            : serviceVersion;\n+\n+        if (httpPipeline != null) {\n+            return new SearchAsyncClient(endpoint, indexName, buildVersion, httpPipeline);\n+        }\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        // Closest to API goes first, closest to wire goes last.\n+        final List<HttpPipelinePolicy> httpPipelinePolicies = new ArrayList<>();\n+        httpPipelinePolicies.add(new AddHeadersPolicy(headers));\n+        httpPipelinePolicies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(httpPipelinePolicies);\n+        httpPipelinePolicies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n+\n+        httpPipelinePolicies.add(new AddDatePolicy());\n+        if (keyCredential != null) {", "originalCommit": "431eefd1de728ca8488b91bf95d4d9ca41ae04e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3NjA2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431576063", "bodyText": "Missed the comments here. Will address these in a new PR.", "author": "sima-zhu", "createdAt": "2020-05-28T04:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MjYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3ODI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431578241", "bodyText": "#11497", "author": "sima-zhu", "createdAt": "2020-05-28T04:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MjYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1Mjk0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431552947", "bodyText": "Do we normally add the User-Agent at the end of the pipeline? I thought this normally was added when setting the request ID since it'll be static throughout the request/requests (if retried) being made.", "author": "alzimmermsft", "createdAt": "2020-05-28T02:51:00Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -0,0 +1,311 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link SearchClient\n+ * SearchClients} and {@link SearchAsyncClient SearchAsyncClients}. Call {@link #buildClient()\n+ * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n+ * client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchClient.class, SearchAsyncClient.class})\n+public final class SearchClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private String indexName;\n+    private RetryPolicy retryPolicy;\n+\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchClient SearchClients}\n+     * and {@link SearchAsyncClient SearchAsyncClients}.\n+     */\n+    public SearchClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchClient buildClient() {\n+        return new SearchClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link SearchAsyncClient} based on options set in the Builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link SearchAsyncClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchAsyncClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(indexName, \"'indexName' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        SearchServiceVersion buildVersion = (serviceVersion == null)\n+            ? SearchServiceVersion.getLatest()\n+            : serviceVersion;\n+\n+        if (httpPipeline != null) {\n+            return new SearchAsyncClient(endpoint, indexName, buildVersion, httpPipeline);\n+        }\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        // Closest to API goes first, closest to wire goes last.\n+        final List<HttpPipelinePolicy> httpPipelinePolicies = new ArrayList<>();\n+        httpPipelinePolicies.add(new AddHeadersPolicy(headers));\n+        httpPipelinePolicies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(httpPipelinePolicies);\n+        httpPipelinePolicies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n+\n+        httpPipelinePolicies.add(new AddDatePolicy());\n+        if (keyCredential != null) {\n+            this.policies.add(new AzureKeyCredentialPolicy(API_KEY, keyCredential));\n+        }\n+        httpPipelinePolicies.addAll(this.policies);\n+\n+        HttpPolicyProviders.addAfterRetryPolicies(httpPipelinePolicies);\n+\n+        httpPipelinePolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,", "originalCommit": "431eefd1de728ca8488b91bf95d4d9ca41ae04e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MzE3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431553177", "bodyText": "Should update the exception message here as null with throw a different exception.", "author": "alzimmermsft", "createdAt": "2020-05-28T02:52:05Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -0,0 +1,311 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link SearchClient\n+ * SearchClients} and {@link SearchAsyncClient SearchAsyncClients}. Call {@link #buildClient()\n+ * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n+ * client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchClient.class, SearchAsyncClient.class})\n+public final class SearchClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private String indexName;\n+    private RetryPolicy retryPolicy;\n+\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchClient SearchClients}\n+     * and {@link SearchAsyncClient SearchAsyncClients}.\n+     */\n+    public SearchClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchClient buildClient() {\n+        return new SearchClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link SearchAsyncClient} based on options set in the Builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link SearchAsyncClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchAsyncClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(indexName, \"'indexName' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        SearchServiceVersion buildVersion = (serviceVersion == null)\n+            ? SearchServiceVersion.getLatest()\n+            : serviceVersion;\n+\n+        if (httpPipeline != null) {\n+            return new SearchAsyncClient(endpoint, indexName, buildVersion, httpPipeline);\n+        }\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        // Closest to API goes first, closest to wire goes last.\n+        final List<HttpPipelinePolicy> httpPipelinePolicies = new ArrayList<>();\n+        httpPipelinePolicies.add(new AddHeadersPolicy(headers));\n+        httpPipelinePolicies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(httpPipelinePolicies);\n+        httpPipelinePolicies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n+\n+        httpPipelinePolicies.add(new AddDatePolicy());\n+        if (keyCredential != null) {\n+            this.policies.add(new AzureKeyCredentialPolicy(API_KEY, keyCredential));\n+        }\n+        httpPipelinePolicies.addAll(this.policies);\n+\n+        HttpPolicyProviders.addAfterRetryPolicies(httpPipelinePolicies);\n+\n+        httpPipelinePolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+            buildConfiguration));\n+        httpPipelinePolicies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+        HttpPipeline buildPipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClient)\n+            .policies(httpPipelinePolicies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        return new SearchAsyncClient(endpoint, indexName, buildVersion, buildPipeline);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Search instance.\n+     *\n+     * @param endpoint The URL of the Azure Search instance.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws IllegalArgumentException If {@code endpoint} is null or it cannot be parsed into a valid URL.\n+     */\n+    public SearchClientBuilder endpoint(String endpoint) {\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL\"));\n+        }\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link AzureKeyCredential} used to authenticate HTTP requests.\n+     *\n+     * @param keyCredential The {@link AzureKeyCredential} used to authenticate HTTP requests.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws NullPointerException If {@code keyCredential} is {@code null}.\n+     * @throws IllegalArgumentException If {@link AzureKeyCredential#getKey()} is {@code null} or empty.\n+     */\n+    public SearchClientBuilder credential(AzureKeyCredential keyCredential) {\n+        if (keyCredential == null) {\n+            throw logger.logExceptionAsError(new NullPointerException(\"'keyCredential' cannot be null.\"));\n+        }\n+        if (CoreUtils.isNullOrEmpty(keyCredential.getKey())) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(\"'keyCredential' cannot have a null or empty API key.\"));", "originalCommit": "431eefd1de728ca8488b91bf95d4d9ca41ae04e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MzMxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11475#discussion_r431553311", "bodyText": "Should we look into updating other methods which use Objects.requireNonNull to log their error?", "author": "alzimmermsft", "createdAt": "2020-05-28T02:52:38Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -0,0 +1,311 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.AzureKeyCredentialPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link SearchClient\n+ * SearchClients} and {@link SearchAsyncClient SearchAsyncClients}. Call {@link #buildClient()\n+ * buildClient} and {@link #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired\n+ * client.\n+ * <p>\n+ * The following information must be provided to successfully create a client.\n+ * <ul>\n+ *     <li>{@link #endpoint(String)}</li>\n+ *     <li>{@link #indexName(String)}</li>\n+ *     <li>{@link #credential(AzureKeyCredential)} or {@link #pipeline(HttpPipeline)}</li>\n+ * </ul>\n+ */\n+@ServiceClientBuilder(serviceClients = {SearchClient.class, SearchAsyncClient.class})\n+public final class SearchClientBuilder {\n+    private static final String API_KEY = \"api-key\";\n+\n+    /*\n+     * This header tells the service to return the request ID in the HTTP response. This is useful for correlating the\n+     * request sent to the response.\n+     */\n+    private static final String ECHO_REQUEST_ID_HEADER = \"return-client-request-id\";\n+\n+    private static final String SEARCH_PROPERTIES = \"azure-search-documents.properties\";\n+    private static final String NAME = \"name\";\n+    private static final String VERSION = \"version\";\n+\n+    private final ClientLogger logger = new ClientLogger(SearchClientBuilder.class);\n+    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+    private final HttpHeaders headers = new HttpHeaders().put(ECHO_REQUEST_ID_HEADER, \"true\");\n+\n+    private final String clientName;\n+    private final String clientVersion;\n+\n+    private AzureKeyCredential keyCredential;\n+    private SearchServiceVersion serviceVersion;\n+    private String endpoint;\n+    private HttpClient httpClient;\n+    private HttpPipeline httpPipeline;\n+    private HttpLogOptions httpLogOptions = new HttpLogOptions();\n+    private Configuration configuration;\n+    private String indexName;\n+    private RetryPolicy retryPolicy;\n+\n+\n+    /**\n+     * Creates a builder instance that is able to configure and construct {@link SearchClient SearchClients}\n+     * and {@link SearchAsyncClient SearchAsyncClients}.\n+     */\n+    public SearchClientBuilder() {\n+        Map<String, String> properties = CoreUtils.getProperties(SEARCH_PROPERTIES);\n+        clientName = properties.getOrDefault(NAME, \"UnknownName\");\n+        clientVersion = properties.getOrDefault(VERSION, \"UnknownVersion\");\n+    }\n+\n+    /**\n+     * Creates a {@link SearchClient} based on options set in the Builder. Every time {@code buildClient()} is\n+     * called a new instance of {@link SearchClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchClient buildClient() {\n+        return new SearchClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Creates a {@link SearchAsyncClient} based on options set in the Builder. Every time\n+     * {@code buildAsyncClient()} is called a new instance of {@link SearchAsyncClient} is created.\n+     * <p>\n+     * If {@link #pipeline(HttpPipeline) pipeline} is set, then only the {@code pipeline}, {@link #endpoint(String)\n+     * endpoint}, and {@link #indexName(String) indexName} are used to create the {@link SearchAsyncClient client}.\n+     * All other builder settings are ignored.\n+     *\n+     * @return A SearchClient with the options set from the builder.\n+     * @throws NullPointerException If {@code indexName} or {@code endpoint} are {@code null}.\n+     */\n+    public SearchAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(indexName, \"'indexName' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null.\");\n+\n+        SearchServiceVersion buildVersion = (serviceVersion == null)\n+            ? SearchServiceVersion.getLatest()\n+            : serviceVersion;\n+\n+        if (httpPipeline != null) {\n+            return new SearchAsyncClient(endpoint, indexName, buildVersion, httpPipeline);\n+        }\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        // Closest to API goes first, closest to wire goes last.\n+        final List<HttpPipelinePolicy> httpPipelinePolicies = new ArrayList<>();\n+        httpPipelinePolicies.add(new AddHeadersPolicy(headers));\n+        httpPipelinePolicies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(httpPipelinePolicies);\n+        httpPipelinePolicies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n+\n+        httpPipelinePolicies.add(new AddDatePolicy());\n+        if (keyCredential != null) {\n+            this.policies.add(new AzureKeyCredentialPolicy(API_KEY, keyCredential));\n+        }\n+        httpPipelinePolicies.addAll(this.policies);\n+\n+        HttpPolicyProviders.addAfterRetryPolicies(httpPipelinePolicies);\n+\n+        httpPipelinePolicies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n+            buildConfiguration));\n+        httpPipelinePolicies.add(new HttpLoggingPolicy(httpLogOptions));\n+\n+        HttpPipeline buildPipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClient)\n+            .policies(httpPipelinePolicies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        return new SearchAsyncClient(endpoint, indexName, buildVersion, buildPipeline);\n+    }\n+\n+    /**\n+     * Sets the service endpoint for the Azure Search instance.\n+     *\n+     * @param endpoint The URL of the Azure Search instance.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws IllegalArgumentException If {@code endpoint} is null or it cannot be parsed into a valid URL.\n+     */\n+    public SearchClientBuilder endpoint(String endpoint) {\n+        try {\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"'endpoint' must be a valid URL\"));\n+        }\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link AzureKeyCredential} used to authenticate HTTP requests.\n+     *\n+     * @param keyCredential The {@link AzureKeyCredential} used to authenticate HTTP requests.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws NullPointerException If {@code keyCredential} is {@code null}.\n+     * @throws IllegalArgumentException If {@link AzureKeyCredential#getKey()} is {@code null} or empty.\n+     */\n+    public SearchClientBuilder credential(AzureKeyCredential keyCredential) {\n+        if (keyCredential == null) {", "originalCommit": "431eefd1de728ca8488b91bf95d4d9ca41ae04e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ac1dcbd2ff8abc8a12b34a48e70f144798d709f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ac1dcbd2ff8abc8a12b34a48e70f144798d709f", "message": "Update README.md", "committedDate": "2020-05-28T03:57:16Z", "type": "commit"}]}