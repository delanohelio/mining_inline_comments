{"pr_number": 10597, "pr_title": "Spring Boot migration - KeyVault starter", "pr_createdAt": "2020-04-29T08:19:02Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10597", "timeline": [{"oid": "037068723a4c0377723df867e1aee0f4c97104d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/037068723a4c0377723df867e1aee0f4c97104d2", "message": "add spring boot for key vault", "committedDate": "2020-04-29T07:31:57Z", "type": "commit"}, {"oid": "3210b343dfa3b8c6750aec9259230f1371e265b6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3210b343dfa3b8c6750aec9259230f1371e265b6", "message": "include property file", "committedDate": "2020-04-29T08:38:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODEzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r417448137", "bodyText": "Consider adding java doc for all  (this and other ) the the public API.", "author": "hemanttanwar", "createdAt": "2020-04-29T16:27:35Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.microsoft.azure.utils.Constants;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.context.config.ConfigFileApplicationListener;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.util.ClassUtils;\n+\n+/**\n+ * Leverage {@link EnvironmentPostProcessor} to add Key Vault secrets as a property source.\n+ */\n+public class KeyVaultEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {\n+    public static final int DEFAULT_ORDER = ConfigFileApplicationListener.DEFAULT_ORDER + 1;\n+    private int order = DEFAULT_ORDER;\n+\n+    @Override\n+    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {\n+        if (isKeyVaultEnabled(environment)) {\n+            final KeyVaultEnvironmentPostProcessorHelper helper =\n+                new KeyVaultEnvironmentPostProcessorHelper(environment);\n+            helper.addKeyVaultPropertySource();\n+        }\n+    }\n+\n+    private boolean isKeyVaultEnabled(ConfigurableEnvironment environment) {\n+        if (environment.getProperty(Constants.AZURE_KEYVAULT_VAULT_URI) == null) {\n+            // User doesn't want to enable Key Vault property initializer.\n+            return false;\n+        }\n+        return environment.getProperty(Constants.AZURE_KEYVAULT_ENABLED, Boolean.class, true)\n+            && isKeyVaultClientAvailable();\n+    }\n+\n+    private boolean isKeyVaultClientAvailable() {\n+        return ClassUtils.isPresent(\"com.azure.security.keyvault.secrets.SecretClient\",\n+            KeyVaultEnvironmentPostProcessor.class.getClassLoader());\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(int order) {", "originalCommit": "3210b343dfa3b8c6750aec9259230f1371e265b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDM5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r417450391", "bodyText": "Where ever it make sense, Consider adding codesnippet in java doc. This helps user to see code example in IDE and improve java doc.\nExample : https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java#L25", "author": "hemanttanwar", "createdAt": "2020-04-29T16:31:01Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessorHelper.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.identity.ClientCertificateCredentialBuilder;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import com.azure.identity.ManagedIdentityCredentialBuilder;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.SecretClientBuilder;\n+import com.microsoft.azure.telemetry.TelemetrySender;\n+import com.microsoft.azure.utils.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.microsoft.azure.telemetry.TelemetryData.SERVICE_NAME;\n+import static com.microsoft.azure.telemetry.TelemetryData.getClassPackageSimpleName;\n+import static com.microsoft.azure.utils.Constants.SPRINGBOOT_KEY_VAULT_APPLICATION_ID;\n+\n+/**\n+ * A helper class to initialize the key vault secret client depending on which authentication method users choose.\n+ * Then add key vault as a property source to the environment.\n+ */", "originalCommit": "3210b343dfa3b8c6750aec9259230f1371e265b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3OTE1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418179156", "bodyText": "Do you really need a lock? Can declaring propertyNamesArr as volatile be sufficient?", "author": "srnagar", "createdAt": "2020-04-30T17:39:55Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;\n+    private final String vaultUri;\n+\n+    private ArrayList<String> propertyNames = new ArrayList<>();\n+    private String[] propertyNamesArr;\n+\n+    private final AtomicLong lastUpdateTime = new AtomicLong();\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+\n+    public KeyVaultOperation(final SecretClient keyVaultClient,\n+                             String vaultUri,\n+                             final long refreshInterval,\n+                             final List<String> secretKeys) {\n+        this.cacheRefreshIntervalInMs = refreshInterval;\n+        this.secretKeys = secretKeys;\n+        this.keyVaultClient = keyVaultClient;\n+        // TODO(pan): need to validate why last '/' need to be truncated.\n+        this.vaultUri = StringUtils.trimTrailingCharacter(vaultUri.trim(), '/');\n+        fillSecretsList();\n+    }\n+\n+    public String[] list() {\n+        try {\n+            this.rwLock.readLock().lock();\n+            return propertyNamesArr;\n+        } finally {\n+            this.rwLock.readLock().unlock();\n+        }", "originalCommit": "3210b343dfa3b8c6750aec9259230f1371e265b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NDMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420554300", "bodyText": "Yes, the write method fillSecretsList could be called from multiple threads simultaneously when refreshing propertyNames.", "author": "saragluna", "createdAt": "2020-05-06T05:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3OTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Mjc2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418182762", "bodyText": "Use this consistently. Here one is using this and another is not: this.secretKeys and secretKeys", "author": "srnagar", "createdAt": "2020-04-30T17:46:02Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;\n+    private final String vaultUri;\n+\n+    private ArrayList<String> propertyNames = new ArrayList<>();\n+    private String[] propertyNamesArr;\n+\n+    private final AtomicLong lastUpdateTime = new AtomicLong();\n+    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();\n+\n+    public KeyVaultOperation(final SecretClient keyVaultClient,\n+                             String vaultUri,\n+                             final long refreshInterval,\n+                             final List<String> secretKeys) {\n+        this.cacheRefreshIntervalInMs = refreshInterval;\n+        this.secretKeys = secretKeys;\n+        this.keyVaultClient = keyVaultClient;\n+        // TODO(pan): need to validate why last '/' need to be truncated.\n+        this.vaultUri = StringUtils.trimTrailingCharacter(vaultUri.trim(), '/');\n+        fillSecretsList();\n+    }\n+\n+    public String[] list() {\n+        try {\n+            this.rwLock.readLock().lock();\n+            return propertyNamesArr;\n+        } finally {\n+            this.rwLock.readLock().unlock();\n+        }\n+    }\n+\n+    private String getKeyVaultSecretName(@NonNull String property) {\n+        if (property.matches(\"[a-z0-9A-Z-]+\")) {\n+            return property.toLowerCase(Locale.US);\n+        } else if (property.matches(\"[A-Z0-9_]+\")) {\n+            return property.toLowerCase(Locale.US).replaceAll(\"_\", \"-\");\n+        } else {\n+            return property.toLowerCase(Locale.US)\n+                    .replaceAll(\"-\", \"\")     // my-project -> myproject\n+                    .replaceAll(\"_\", \"\")     // my_project -> myproject\n+                    .replaceAll(\"\\\\.\", \"-\"); // acme.myproject -> acme-myproject\n+        }\n+    }\n+\n+    /**\n+     * For convention we need to support all relaxed binding format from spring, these may include:\n+     * <ul>\n+     * <li>Spring relaxed binding names</li>\n+     * <li>acme.my-project.person.first-name</li>\n+     * <li>acme.myProject.person.firstName</li>\n+     * <li>acme.my_project.person.first_name</li>\n+     * <li>ACME_MYPROJECT_PERSON_FIRSTNAME</li>\n+     * </ul>\n+     * But azure keyvault only allows ^[0-9a-zA-Z-]+$ and case insensitive, so there must be some conversion\n+     * between spring names and azure keyvault names.\n+     * For example, the 4 properties stated above should be convert to acme-myproject-person-firstname in keyvault.\n+     *\n+     * @param property of secret instance.\n+     * @return the value of secret with given name or null.\n+     */\n+    public String get(final String property) {\n+        Assert.hasText(property, \"property should contain text.\");\n+        final String secretName = getKeyVaultSecretName(property);\n+\n+        //if user don't set specific secret keys, then refresh token\n+        if (this.secretKeys == null || secretKeys.size() == 0) {", "originalCommit": "3210b343dfa3b8c6750aec9259230f1371e265b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420568479", "bodyText": "done.", "author": "saragluna", "createdAt": "2020-05-06T06:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Mjc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Njk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418186963", "bodyText": "Is there a reason to not use async clients here? Also, name the variable as secretClient as KeyVault has 4 different types of clients.", "author": "srnagar", "createdAt": "2020-04-30T17:53:03Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultOperation.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+import com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n+import com.azure.security.keyvault.secrets.models.SecretProperties;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Encapsulate key vault secret client in this class to provide a delegate of key vault operations.\n+ */\n+public class KeyVaultOperation {\n+    private final long cacheRefreshIntervalInMs;\n+    private final List<String> secretKeys;\n+\n+    private final Object refreshLock = new Object();\n+    private final SecretClient keyVaultClient;", "originalCommit": "3210b343dfa3b8c6750aec9259230f1371e265b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NjQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420556479", "bodyText": "According to the nature of the Spring property source, it will block until all responses are returned, so we use the sync client.", "author": "saragluna", "createdAt": "2020-05-06T05:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Njk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODU0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420568540", "bodyText": "Changed to secretClient.", "author": "saragluna", "createdAt": "2020-05-06T06:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Njk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NzY3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r418187673", "bodyText": "nit: extra empty line.", "author": "srnagar", "createdAt": "2020-04-30T17:54:12Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/microsoft/azure/keyvault/spring/InitializerTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+", "originalCommit": "3210b343dfa3b8c6750aec9259230f1371e265b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODU5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10597#discussion_r420568593", "bodyText": "removed.", "author": "saragluna", "createdAt": "2020-05-06T06:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NzY3Mw=="}], "type": "inlineReview"}, {"oid": "1d4ce5059af4e9cb8524815959bcafead1476304", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d4ce5059af4e9cb8524815959bcafead1476304", "message": "address review comments", "committedDate": "2020-05-06T05:48:22Z", "type": "commit"}, {"oid": "0933113b22dfab5562aea876225bd093ec400f25", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0933113b22dfab5562aea876225bd093ec400f25", "message": "add azure-spring-boot in jacoco-test-coverage pom file to make build-from-source successful", "committedDate": "2020-05-08T09:51:58Z", "type": "commit"}, {"oid": "6364a5394267693d707ef3ff193ccaa51470df99", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6364a5394267693d707ef3ff193ccaa51470df99", "message": "Merge branch 'master' into feature/spring-boot-keyvault", "committedDate": "2020-05-08T09:53:17Z", "type": "commit"}, {"oid": "ae4c0404931551928fb64851bfc23e85c3fb7d09", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae4c0404931551928fb64851bfc23e85c3fb7d09", "message": "upgrade azure-identity version used in spring-boot", "committedDate": "2020-05-08T13:23:02Z", "type": "commit"}, {"oid": "d8caed5a72f42813e4c7853368f543b800d9f518", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8caed5a72f42813e4c7853368f543b800d9f518", "message": "move Spring versions to version_client.txt to keep consistency", "committedDate": "2020-05-09T01:47:18Z", "type": "commit"}, {"oid": "7538e1295698a7445523a48c5efbf8e37ab3a3ab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7538e1295698a7445523a48c5efbf8e37ab3a3ab", "message": "add CHANGELOG.md", "committedDate": "2020-05-14T07:22:54Z", "type": "commit"}, {"oid": "c4df875836c3510b8228a37471912975c84d98f9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4df875836c3510b8228a37471912975c84d98f9", "message": "add configurations for JavaDoc plugins and entries in jacoco-test-coverage", "committedDate": "2020-05-21T08:53:47Z", "type": "commit"}, {"oid": "15677ebc08bfe0194b5bd5070bbb97399119b1c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/15677ebc08bfe0194b5bd5070bbb97399119b1c6", "message": "fix artifact id of key-vault-starter in docs", "committedDate": "2020-05-22T10:23:34Z", "type": "commit"}, {"oid": "e82344807d618cb56c281e581b2535f45ff4c725", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e82344807d618cb56c281e581b2535f45ff4c725", "message": "fix artifact id of aad-starter in docs", "committedDate": "2020-05-22T10:26:48Z", "type": "commit"}]}