{"pr_number": 13454, "pr_title": "refactoring to move all encryption hooks outside of SDK", "pr_createdAt": "2020-07-23T17:58:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13454", "timeline": [{"oid": "691f8b162dde84440dafd7dd1c27eb397099c308", "url": "https://github.com/Azure/azure-sdk-for-java/commit/691f8b162dde84440dafd7dd1c27eb397099c308", "message": "minor cleanup", "committedDate": "2020-07-17T20:47:17Z", "type": "commit"}, {"oid": "8eda32c50f77257ea46091b21a02819f253e9faf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8eda32c50f77257ea46091b21a02819f253e9faf", "message": "minor cleanup", "committedDate": "2020-07-17T22:12:12Z", "type": "commit"}, {"oid": "ff37289bdc52b165166b69d2ee91420294818f23", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff37289bdc52b165166b69d2ee91420294818f23", "message": "encryptor", "committedDate": "2020-07-17T23:02:00Z", "type": "commit"}, {"oid": "77cf2ec44b4f5aa2c9f572af53485db248b22b71", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77cf2ec44b4f5aa2c9f572af53485db248b22b71", "message": "static field name correction, fixed pre-condition check", "committedDate": "2020-07-17T23:05:10Z", "type": "commit"}, {"oid": "5d41cfff387576767afdf515af4587d323eca03e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d41cfff387576767afdf515af4587d323eca03e", "message": "Merge branch 'master' into users/moderakh/encryption-minor-cleanup", "committedDate": "2020-07-20T16:38:44Z", "type": "commit"}, {"oid": "51f3cdd0fa68f3d7c072e82951be3014935601ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/51f3cdd0fa68f3d7c072e82951be3014935601ba", "message": "Merge branch 'users/moderakh/encryption-minor-cleanup' into users/moderakh/20200717-encryption", "committedDate": "2020-07-20T17:14:58Z", "type": "commit"}, {"oid": "cfc13d2ff2513f21fd461c3a23691de556945c7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfc13d2ff2513f21fd461c3a23691de556945c7a", "message": "move encryption hooks out of sdk", "committedDate": "2020-07-23T17:42:40Z", "type": "commit"}, {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2caa15601ede91a5ad95708843eb96ecd48cb0eb", "message": "Merge branch 'master' into users/moderakh/20200717-encryption", "committedDate": "2020-07-23T17:54:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTM2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459631365", "bodyText": "making this private shortly.", "author": "moderakh", "createdAt": "2020-07-23T18:02:14Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemResponse.java", "diffHunk": "@@ -22,19 +22,27 @@\n  */\n public class CosmosItemResponse<T> {\n     private final Class<T> itemClassType;\n-    private final byte[] responseBodyAsByteArray;\n     private final ItemDeserializer itemDeserializer;\n+    // TODO: make this non public (blocking for merge to master)\n+\n+    public byte[] responseBodyAsByteArray;", "originalCommit": "2caa15601ede91a5ad95708843eb96ecd48cb0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjA4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459652085", "bodyText": "addressed.", "author": "moderakh", "createdAt": "2020-07-23T18:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459631586", "bodyText": "will drop the public constructor change shortly", "author": "moderakh", "createdAt": "2020-07-23T18:02:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemResponse.java", "diffHunk": "@@ -22,19 +22,27 @@\n  */\n public class CosmosItemResponse<T> {\n     private final Class<T> itemClassType;\n-    private final byte[] responseBodyAsByteArray;\n     private final ItemDeserializer itemDeserializer;\n+    // TODO: make this non public (blocking for merge to master)\n+\n+    public byte[] responseBodyAsByteArray;\n     private T item;\n-    private final ResourceResponse<Document> resourceResponse;\n+    public final ResourceResponse<Document> resourceResponse;\n     private InternalObjectNode props;\n \n-    CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {\n+\n+    public CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {", "originalCommit": "2caa15601ede91a5ad95708843eb96ecd48cb0eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTY2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459631664", "bodyText": "will drop the public constructor change shortly", "author": "moderakh", "createdAt": "2020-07-23T18:02:47Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemResponse.java", "diffHunk": "@@ -22,19 +22,27 @@\n  */\n public class CosmosItemResponse<T> {\n     private final Class<T> itemClassType;\n-    private final byte[] responseBodyAsByteArray;\n     private final ItemDeserializer itemDeserializer;\n+    // TODO: make this non public (blocking for merge to master)\n+\n+    public byte[] responseBodyAsByteArray;\n     private T item;\n-    private final ResourceResponse<Document> resourceResponse;\n+    public final ResourceResponse<Document> resourceResponse;\n     private InternalObjectNode props;\n \n-    CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {\n+\n+    public CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {\n+        this(response, response.getBodyAsByteArray(), classType, itemDeserializer);\n+    }\n+\n+    public CosmosItemResponse(ResourceResponse<Document> response, byte[] responseBodyAsByteArray, Class<T> classType, ItemDeserializer itemDeserializer) {", "originalCommit": "2caa15601ede91a5ad95708843eb96ecd48cb0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459652169", "bodyText": "addressed.", "author": "moderakh", "createdAt": "2020-07-23T18:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTY2NA=="}], "type": "inlineReview"}, {"oid": "7b4cd567147799e37418450ed00a2817ced1fdfe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b4cd567147799e37418450ed00a2817ced1fdfe", "message": "encryption", "committedDate": "2020-07-23T18:19:14Z", "type": "commit"}, {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "message": "undid public api change to CosmosItemResponse", "committedDate": "2020-07-23T18:22:42Z", "type": "commit"}, {"oid": "5c17f86d6de14f46671de958b254b3b96d88272b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c17f86d6de14f46671de958b254b3b96d88272b", "message": "cleanup", "committedDate": "2020-07-23T18:29:06Z", "type": "commit"}, {"oid": "6b2e69796dbf9107018009f57ad33e76def18397", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b2e69796dbf9107018009f57ad33e76def18397", "message": "cleanup", "committedDate": "2020-07-23T18:39:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTEzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459645131", "bodyText": "minor typo in classTypee -> classType", "author": "kushagraThapar", "createdAt": "2020-07-23T18:26:52Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/CosmosResponseFactory.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.CosmosItemResponse;\n+\n+/**\n+ * This response factory converts response messages\n+ * to the corresponding type response using the\n+ * CosmosClient serializer\n+ */\n+public interface CosmosResponseFactory {\n+\n+    <T> CosmosItemResponse<T> createItemResponse(CosmosItemResponse<byte[]> responseMessage, Class<T> classTypee);", "originalCommit": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459660975", "bodyText": "haha. thanks for catching that", "author": "moderakh", "createdAt": "2020-07-23T18:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459645846", "bodyText": "minor, option ->  requestOptions  to be more consistent with other APIs.", "author": "kushagraThapar", "createdAt": "2020-07-23T18:28:12Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.encryption.CosmosResponseFactoryCore;\n+import com.azure.cosmos.implementation.encryption.DecryptionResult;\n+import com.azure.cosmos.implementation.encryption.EncryptionItemRequestOptions;\n+import com.azure.cosmos.implementation.encryption.Encryptor;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.EncryptionBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.util.function.Consumer;\n+\n+// TODO: for now basic functionality is in. some APIs and some logic branch is not complete yet.\n+public class EncryptionCosmosAsyncContainer extends CosmosAsyncContainer {\n+    private final Encryptor encryptor;\n+    private final CosmosResponseFactory resposeFactory = new CosmosResponseFactoryCore();\n+\n+    EncryptionCosmosAsyncContainer(String id, CosmosAsyncDatabase database, Encryptor encryptor) {\n+        super(id, database);\n+        this.encryptor = encryptor;\n+    }\n+\n+    private Mono<CosmosItemResponse<byte[]>> createItemStream(byte[] payload,\n+                                                              PartitionKey partitionKey,\n+                                                              CosmosItemRequestOptions requestOptions) {\n+        Preconditions.checkNotNull(payload, \"payload can't be null\");\n+\n+        // TODO: add diagnostics\n+        EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions, EncryptionItemRequestOptions.class);\n+        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n+\n+            payload = EncryptionProcessor.encryptAsync(payload, encryptor, encryptionItemRequestOptions.getEncryptionOptions());\n+\n+            Mono<CosmosItemResponse<byte[]>> response = super.createItem(payload, partitionKey, requestOptions);\n+\n+            return response\n+                .subscribeOn(Schedulers.elastic())\n+                .publishOn(Schedulers.elastic())\n+                .map(rsp -> {\n+                    EncryptionBridgeInternal.setByteArrayContent(rsp, decryptResponseAsync(EncryptionBridgeInternal.getByteArrayContent(rsp), encryptionItemRequestOptions.getDecryptionResultHandler()));\n+                    return rsp;\n+                }\n+            );\n+\n+        } else {\n+            return null;\n+            // TODO\n+            // return super.createItem()\n+        }\n+    }\n+\n+    // TODO ensure all other apis call this guy\n+    public <T> Mono<CosmosItemResponse<T>> createItem(T item,\n+                                                      PartitionKey partitionKey,\n+                                                      CosmosItemRequestOptions option) {", "originalCommit": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTU2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459661562", "bodyText": "thanks.", "author": "moderakh", "createdAt": "2020-07-23T18:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjMyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459646329", "bodyText": "Empty TODOs are dangerous :)", "author": "kushagraThapar", "createdAt": "2020-07-23T18:29:04Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.encryption.CosmosResponseFactoryCore;\n+import com.azure.cosmos.implementation.encryption.DecryptionResult;\n+import com.azure.cosmos.implementation.encryption.EncryptionItemRequestOptions;\n+import com.azure.cosmos.implementation.encryption.Encryptor;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.EncryptionBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.util.function.Consumer;\n+\n+// TODO: for now basic functionality is in. some APIs and some logic branch is not complete yet.\n+public class EncryptionCosmosAsyncContainer extends CosmosAsyncContainer {\n+    private final Encryptor encryptor;\n+    private final CosmosResponseFactory resposeFactory = new CosmosResponseFactoryCore();\n+\n+    EncryptionCosmosAsyncContainer(String id, CosmosAsyncDatabase database, Encryptor encryptor) {\n+        super(id, database);\n+        this.encryptor = encryptor;\n+    }\n+\n+    private Mono<CosmosItemResponse<byte[]>> createItemStream(byte[] payload,\n+                                                              PartitionKey partitionKey,\n+                                                              CosmosItemRequestOptions requestOptions) {\n+        Preconditions.checkNotNull(payload, \"payload can't be null\");\n+\n+        // TODO: add diagnostics\n+        EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions, EncryptionItemRequestOptions.class);\n+        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n+\n+            payload = EncryptionProcessor.encryptAsync(payload, encryptor, encryptionItemRequestOptions.getEncryptionOptions());\n+\n+            Mono<CosmosItemResponse<byte[]>> response = super.createItem(payload, partitionKey, requestOptions);\n+\n+            return response\n+                .subscribeOn(Schedulers.elastic())\n+                .publishOn(Schedulers.elastic())\n+                .map(rsp -> {\n+                    EncryptionBridgeInternal.setByteArrayContent(rsp, decryptResponseAsync(EncryptionBridgeInternal.getByteArrayContent(rsp), encryptionItemRequestOptions.getDecryptionResultHandler()));\n+                    return rsp;\n+                }\n+            );\n+\n+        } else {\n+            return null;\n+            // TODO\n+            // return super.createItem()\n+        }\n+    }\n+\n+    // TODO ensure all other apis call this guy\n+    public <T> Mono<CosmosItemResponse<T>> createItem(T item,\n+                                                      PartitionKey partitionKey,\n+                                                      CosmosItemRequestOptions option) {\n+        Preconditions.checkNotNull(item, \"item\");\n+        if (option == null) {\n+            option = new CosmosItemRequestOptions();\n+        }\n+\n+        EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(option, EncryptionItemRequestOptions.class);\n+\n+        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n+            Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using EncryptionContainer.\");\n+\n+\n+            byte[] payload = cosmosSerializerToStream(item);\n+\n+            String payloadAsString = new String(payload);\n+\n+\n+            Mono<CosmosItemResponse<byte[]>> result = this.createItemStream(payload, partitionKey, option);\n+\n+\n+            return result.map(rsp -> (CosmosItemResponse<T>) this.resposeFactory.createItemResponse(rsp, item.getClass()));\n+\n+        } else {\n+            return super.createItem(item, partitionKey, option);\n+        }\n+    }\n+\n+    private Mono<CosmosItemResponse<byte[]>> readItemStream(String id,\n+                                                              PartitionKey partitionKey,\n+                                                              CosmosItemRequestOptions requestOptions) {\n+\n+\n+        Mono<CosmosItemResponse<byte[]>> responseMessageAsync = super.readItem(id, partitionKey, requestOptions, byte[].class);\n+\n+        return responseMessageAsync\n+            .publishOn(Schedulers.elastic())\n+            .subscribeOn(Schedulers.elastic())\n+            .map(\n+            responseMessage ->\n+\n+            {\n+                Consumer<DecryptionResult> decryptionErroHandler = null;\n+                EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions, EncryptionItemRequestOptions.class);\n+\n+                if (encryptionItemRequestOptions != null)\n+                {\n+                    decryptionErroHandler = encryptionItemRequestOptions.getDecryptionResultHandler();\n+                }\n+\n+                EncryptionBridgeInternal.setByteArrayContent(responseMessage, this.decryptResponseAsync(\n+                    EncryptionBridgeInternal.getByteArrayContent(responseMessage), decryptionErroHandler));\n+\n+                return responseMessage;\n+\n+            }\n+        );\n+\n+    }\n+\n+    @Override\n+    public <T> Mono<CosmosItemResponse<T>> readItem(String id,\n+                                                      PartitionKey partitionKey,\n+                                                      CosmosItemRequestOptions option,\n+                                                        Class<T> classType) {\n+        Mono<CosmosItemResponse<byte[]>> asyncResult = readItemStream(id, partitionKey, option);\n+\n+        return asyncResult.map(\n+            responseMessage -> {\n+\n+                return this.resposeFactory.createItemResponse(responseMessage, classType);\n+            }\n+        );\n+    }\n+\n+    private <T> byte[] cosmosSerializerToStream(T item) {\n+        // TODO:", "originalCommit": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MjEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459662129", "bodyText": "added more info.", "author": "moderakh", "createdAt": "2020-07-23T18:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Njg1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459646851", "bodyText": "By the way - this url doesn't work - https://aka.ms/CosmosClientEncryption", "author": "kushagraThapar", "createdAt": "2020-07-23T18:29:56Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/CosmosEncryptor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.encryption;\n+\n+import com.azure.cosmos.implementation.encryption.api.DataEncryptionKey;\n+import com.azure.cosmos.implementation.encryption.api.DataEncryptionKeyProvider;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+\n+/**\n+ * Provides the default implementation for client-side encryption for Cosmos DB.\n+ * See https://aka.ms/CosmosClientEncryption for more information on client-side encryption support in Azure Cosmos DB.", "originalCommit": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mjg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459662866", "bodyText": "this is coming from our .net friend.\nonce the url is ready for dotnet this will be work too:\nsee dotnet: https://github.com/Azure/azure-cosmos-dotnet-v3/blob/master/Microsoft.Azure.Cosmos.Encryption/src/CosmosEncryptor.cs#L13\nwe are not shipping encryption lib for now anyway.", "author": "moderakh", "createdAt": "2020-07-23T18:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Njg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjYxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459666617", "bodyText": "FYI @j82w @anujtoshniwal the link referenced from dotnet is not functional. please remember to setup link redirect for dotnet", "author": "moderakh", "createdAt": "2020-07-23T19:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Njg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NzA5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459667091", "bodyText": "Sounds good then.", "author": "kushagraThapar", "createdAt": "2020-07-23T19:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Njg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0ODAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459648009", "bodyText": "Please put the warning on this class level as well - I am seeing so many customers using our BridgeInternals.. we need to be more explicit..  like what we have in azure-cosmos\n/**\n\nDO NOT USE.\nThis is meant to be used only internally as a bridge access to classes in implementation\n**/\n@warning(value = INTERNAL_USE_ONLY_WARNING)", "author": "kushagraThapar", "createdAt": "2020-07-23T18:31:55Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/models/EncryptionBridgeInternal.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.Warning;\n+\n+import static com.azure.cosmos.implementation.Warning.INTERNAL_USE_ONLY_WARNING;\n+\n+/**\n+ * This is an internal class in the encryption project\n+ */\n+public class EncryptionBridgeInternal {", "originalCommit": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459663534", "bodyText": "good catch. thanks will do.", "author": "moderakh", "createdAt": "2020-07-23T18:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0ODAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NzMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459657300", "bodyText": "What is the use case of inheritance here?", "author": "kushagraThapar", "createdAt": "2020-07-23T18:48:31Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/EncryptionItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/**\n+ *\n+ * The {@link com.azure.cosmos.models.CosmosItemRequestOptions} that allows to specify options for encryption / decryption.\n+ */\n+package com.azure.cosmos.implementation.encryption;\n+\n+import com.azure.cosmos.implementation.encryption.api.EncryptionOptions;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+\n+import java.util.function.Consumer;\n+\n+// TODO: how invoking setter methods chaining works? parent setters returns CosmosItemRequestOptions\n+// this class setter require EncryptionItemRequestOptions\n+public class EncryptionItemRequestOptions extends CosmosItemRequestOptions {", "originalCommit": "6b2e69796dbf9107018009f57ad33e76def18397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NDg1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459664854", "bodyText": "The use case is to use the same method signature for container.createItem(item, options) and allow passing the encryption option.\nPlease see the .net version doing the same thing, we are trying to be in par with dotnet api:\nhttps://github.com/Azure/azure-cosmos-dotnet-v3/blob/master/Microsoft.Azure.Cosmos.Encryption/src/EncryptionItemRequestOptions.cs#L12", "author": "moderakh", "createdAt": "2020-07-23T19:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NzMwMA=="}], "type": "inlineReview"}, {"oid": "0a6458d95e077faae9e7398237c9461ae57c925d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a6458d95e077faae9e7398237c9461ae57c925d", "message": "code review comments addressed", "committedDate": "2020-07-23T19:02:59Z", "type": "commit"}, {"oid": "9e9d20761317a111cb17ca10ffe1bba4b7c64b1e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e9d20761317a111cb17ca10ffe1bba4b7c64b1e", "message": "fixed compilation error", "committedDate": "2020-07-23T19:16:12Z", "type": "commit"}, {"oid": "f262d5c0dc7059d832be76326dc91cd1ca7484f7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f262d5c0dc7059d832be76326dc91cd1ca7484f7", "message": "minor code style cleanup", "committedDate": "2020-07-23T20:02:10Z", "type": "commit"}, {"oid": "a12d345d635a31d2e46c2e890257513ce4c1001f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a12d345d635a31d2e46c2e890257513ce4c1001f", "message": "check style fix", "committedDate": "2020-07-23T22:06:01Z", "type": "commit"}, {"oid": "7b79a5a8e6dc53abaed90535d10292cd9b99d3ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b79a5a8e6dc53abaed90535d10292cd9b99d3ac", "message": "javadoc fix", "committedDate": "2020-07-23T22:30:53Z", "type": "commit"}, {"oid": "88e984e4e32d11b6560782be1d86bd130edf9245", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88e984e4e32d11b6560782be1d86bd130edf9245", "message": "javadoc fix", "committedDate": "2020-07-23T22:35:26Z", "type": "commit"}, {"oid": "6f7d590dc679c865eb081cc7c8b5acea50b94fec", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f7d590dc679c865eb081cc7c8b5acea50b94fec", "message": "check-style", "committedDate": "2020-07-23T22:49:18Z", "type": "commit"}]}