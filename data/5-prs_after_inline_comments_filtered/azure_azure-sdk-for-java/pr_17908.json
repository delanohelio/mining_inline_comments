{"pr_number": 17908, "pr_title": "Added support to lock on version in BlobInputStream", "pr_createdAt": "2020-12-01T22:44:10Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17908", "timeline": [{"oid": "8da132cd9075156a8b8a1661d98e17b5443aa927", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8da132cd9075156a8b8a1661d98e17b5443aa927", "message": "Added support to lock on version in BlobInputStream", "committedDate": "2020-12-01T22:43:13Z", "type": "commit"}, {"oid": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "message": "Removed imports", "committedDate": "2020-12-01T23:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533788461", "bodyText": "E_TAG or ETAG? In other locations in Storage we already use constants where it doesn't have the _ such as https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/Constants.java#L221", "author": "alzimmermsft", "createdAt": "2020-12-01T23:20:22Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConcurrencyControl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConcurrencyControl.\n+ * {@link #NONE}\n+ * {@link #E_TAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConcurrencyControl {\n+    /**\n+     * No concurrency control. 'requestConditions.ifMatch' and 'client.versionId' must not be set.\n+     */\n+    NONE,\n+\n+    /**\n+     * Default value. Concurrency control based on eTag.\n+     * If {@link BlobRequestConditions#getIfMatch()} is set, the client will honor this value.\n+     * Otherwise, {@link BlobRequestConditions#getIfMatch()} is set to the latest eTag.\n+     */\n+    E_TAG,", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMDk5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533800995", "bodyText": "I think the docs should also specify that we will respect the conditions they pass initially and then we will lock on the etag", "author": "rickle-msft", "createdAt": "2020-12-01T23:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533801174", "bodyText": "And should maybe mention that specifying an etag is mutually exclusive to having a version set.", "author": "rickle-msft", "createdAt": "2020-12-01T23:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDA3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534350073", "bodyText": "I can change it to ETAG", "author": "gapra-msft", "createdAt": "2020-12-02T17:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534350541", "bodyText": "@rickle-msft - Does this line not indicate that we will respect their conditions?\nIf {@link BlobRequestConditions#getIfMatch()} is set, the client will honor this value.\nOtherwise, {@link BlobRequestConditions#getIfMatch()} is set to the latest eTag", "author": "gapra-msft", "createdAt": "2020-12-02T17:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NTYyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534375625", "bodyText": "Yea that's fine. I think when I wrote that, I was thinking about the other comment I left about using the customer's request for the getProperties and applying that here. But anyway. Yea this is fine.", "author": "rickle-msft", "createdAt": "2020-12-02T18:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NzY3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r539677676", "bodyText": "Resolved", "author": "gapra-msft", "createdAt": "2020-12-09T21:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODkxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533788917", "bodyText": "Do we want to log an informational or warning message here instead of throwing?", "author": "alzimmermsft", "createdAt": "2020-12-01T23:21:26Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,60 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConcurrencyControl concurrencyControl = options.getConcurrencyControl() == null ? ConcurrencyControl.E_TAG\n+            : options.getConcurrencyControl();\n \n         BlobProperties properties = getProperties();\n+        String eTag = properties.getETag();\n+        String versionId = properties.getVersionId();\n \n         BlobRange range = options.getRange() == null ? new BlobRange(0) : options.getRange();\n         int chunkSize = options.getBlockSize() == null ? 4 * Constants.MB : options.getBlockSize();\n \n         BlobRequestConditions requestConditions = options.getRequestConditions() == null\n             ? new BlobRequestConditions() : options.getRequestConditions();\n-        // Target the user specified version by default. If not provided, target the latest version.\n-        if (requestConditions.getIfMatch() == null) {\n-            requestConditions.setIfMatch(properties.getETag());\n+        BlobAsyncClientBase client = this.client;\n+\n+        switch (concurrencyControl) {\n+            case NONE:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"requestConditions.ifMatch\", \"E_TAG\"));\n+                }\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"client.versionId\", \"VERSION_ID\"));\n+                }", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NDEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534354132", "bodyText": "I would rather throw. I dont want the user to think they were locking on something but they really werent", "author": "gapra-msft", "createdAt": "2020-12-02T17:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4OTc1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533789750", "bodyText": "Should we make this into two constants as we only have two cases we need to cover and that will eliminate a string format.", "author": "alzimmermsft", "createdAt": "2020-12-01T23:23:33Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,60 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConcurrencyControl concurrencyControl = options.getConcurrencyControl() == null ? ConcurrencyControl.E_TAG\n+            : options.getConcurrencyControl();\n \n         BlobProperties properties = getProperties();\n+        String eTag = properties.getETag();\n+        String versionId = properties.getVersionId();\n \n         BlobRange range = options.getRange() == null ? new BlobRange(0) : options.getRange();\n         int chunkSize = options.getBlockSize() == null ? 4 * Constants.MB : options.getBlockSize();\n \n         BlobRequestConditions requestConditions = options.getRequestConditions() == null\n             ? new BlobRequestConditions() : options.getRequestConditions();\n-        // Target the user specified version by default. If not provided, target the latest version.\n-        if (requestConditions.getIfMatch() == null) {\n-            requestConditions.setIfMatch(properties.getETag());\n+        BlobAsyncClientBase client = this.client;\n+\n+        switch (concurrencyControl) {\n+            case NONE:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"requestConditions.ifMatch\", \"E_TAG\"));\n+                }\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"client.versionId\", \"VERSION_ID\"));\n+                }\n+                break;\n+            case E_TAG:\n+                // Target the user specified eTag by default. If not provided, target the latest eTag.\n+                if (requestConditions.getIfMatch() == null) {\n+                    requestConditions.setIfMatch(eTag);\n+                }\n+                break;\n+            case VERSION_ID:\n+                if (versionId == null) {\n+                    throw logger.logExceptionAsError(\n+                        new UnsupportedOperationException(\"Versioning is not supported on this account.\"));\n+                } else {\n+                    // Target the user specified version by default. If not provided, target the latest version.\n+                    if (this.client.getVersionId() == null) {\n+                        client = this.client.getVersionClient(versionId);\n+                    }\n+                }\n+                break;\n+            default:\n+                throw logger.logExceptionAsError(\n+                    new UnsupportedOperationException(\"Concurrency control type not supported.\"));\n         }\n \n         return new BlobInputStream(client, range.getOffset(), range.getCount(), chunkSize,\n             requestConditions, properties);\n     }\n \n+    private UnsupportedOperationException generateNoneException(String wrongValue, String toSet) {\n+        return new UnsupportedOperationException(String.format(\"'%s' can not be set when 'concurrencyControl'\"\n+            + \" is set to NONE. Set 'concurrencyControl' to %s.\", wrongValue, toSet));", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534350999", "bodyText": "Yeah, this doesn't really need to be a method honestly", "author": "gapra-msft", "createdAt": "2020-12-02T17:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4OTc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2OTgyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534369823", "bodyText": "With the addition of a few more error cases (if you take a second look), I think we should just leave this as a format.", "author": "gapra-msft", "createdAt": "2020-12-02T17:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4OTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MDIyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533790220", "bodyText": "Should the error types being thrown here be IllegalStateException instead of UnsupportedOperationException? They feel more like bad states and not like operations that can't be perfromed.", "author": "alzimmermsft", "createdAt": "2020-12-01T23:24:39Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,60 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConcurrencyControl concurrencyControl = options.getConcurrencyControl() == null ? ConcurrencyControl.E_TAG\n+            : options.getConcurrencyControl();\n \n         BlobProperties properties = getProperties();\n+        String eTag = properties.getETag();\n+        String versionId = properties.getVersionId();\n \n         BlobRange range = options.getRange() == null ? new BlobRange(0) : options.getRange();\n         int chunkSize = options.getBlockSize() == null ? 4 * Constants.MB : options.getBlockSize();\n \n         BlobRequestConditions requestConditions = options.getRequestConditions() == null\n             ? new BlobRequestConditions() : options.getRequestConditions();\n-        // Target the user specified version by default. If not provided, target the latest version.\n-        if (requestConditions.getIfMatch() == null) {\n-            requestConditions.setIfMatch(properties.getETag());\n+        BlobAsyncClientBase client = this.client;\n+\n+        switch (concurrencyControl) {\n+            case NONE:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"requestConditions.ifMatch\", \"E_TAG\"));\n+                }\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"client.versionId\", \"VERSION_ID\"));\n+                }\n+                break;\n+            case E_TAG:\n+                // Target the user specified eTag by default. If not provided, target the latest eTag.\n+                if (requestConditions.getIfMatch() == null) {\n+                    requestConditions.setIfMatch(eTag);\n+                }\n+                break;\n+            case VERSION_ID:\n+                if (versionId == null) {\n+                    throw logger.logExceptionAsError(\n+                        new UnsupportedOperationException(\"Versioning is not supported on this account.\"));\n+                } else {\n+                    // Target the user specified version by default. If not provided, target the latest version.\n+                    if (this.client.getVersionId() == null) {\n+                        client = this.client.getVersionClient(versionId);\n+                    }\n+                }\n+                break;\n+            default:\n+                throw logger.logExceptionAsError(\n+                    new UnsupportedOperationException(\"Concurrency control type not supported.\"));", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NTE1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534355156", "bodyText": "I think its more of a Illegal Argument Exception. I can change it to that", "author": "gapra-msft", "createdAt": "2020-12-02T17:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MDIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMDY4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533800688", "bodyText": "I think we should be using the customer's requestConditions for this call and THEN locking on the resulting etag.", "author": "rickle-msft", "createdAt": "2020-12-01T23:53:26Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,60 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConcurrencyControl concurrencyControl = options.getConcurrencyControl() == null ? ConcurrencyControl.E_TAG\n+            : options.getConcurrencyControl();\n \n         BlobProperties properties = getProperties();", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODM2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r539678365", "bodyText": "Resolved", "author": "gapra-msft", "createdAt": "2020-12-09T21:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMDY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTQ0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533801443", "bodyText": "I think we want to throw here if etag is specified and throw above if version is specified", "author": "rickle-msft", "createdAt": "2020-12-01T23:55:26Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,60 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConcurrencyControl concurrencyControl = options.getConcurrencyControl() == null ? ConcurrencyControl.E_TAG\n+            : options.getConcurrencyControl();\n \n         BlobProperties properties = getProperties();\n+        String eTag = properties.getETag();\n+        String versionId = properties.getVersionId();\n \n         BlobRange range = options.getRange() == null ? new BlobRange(0) : options.getRange();\n         int chunkSize = options.getBlockSize() == null ? 4 * Constants.MB : options.getBlockSize();\n \n         BlobRequestConditions requestConditions = options.getRequestConditions() == null\n             ? new BlobRequestConditions() : options.getRequestConditions();\n-        // Target the user specified version by default. If not provided, target the latest version.\n-        if (requestConditions.getIfMatch() == null) {\n-            requestConditions.setIfMatch(properties.getETag());\n+        BlobAsyncClientBase client = this.client;\n+\n+        switch (concurrencyControl) {\n+            case NONE:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"requestConditions.ifMatch\", \"E_TAG\"));\n+                }\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateNoneException(\"client.versionId\", \"VERSION_ID\"));\n+                }\n+                break;\n+            case E_TAG:\n+                // Target the user specified eTag by default. If not provided, target the latest eTag.\n+                if (requestConditions.getIfMatch() == null) {\n+                    requestConditions.setIfMatch(eTag);\n+                }\n+                break;\n+            case VERSION_ID:\n+                if (versionId == null) {\n+                    throw logger.logExceptionAsError(\n+                        new UnsupportedOperationException(\"Versioning is not supported on this account.\"));\n+                } else {\n+                    // Target the user specified version by default. If not provided, target the latest version.\n+                    if (this.client.getVersionId() == null) {\n+                        client = this.client.getVersionClient(versionId);", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODQ5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r539678498", "bodyText": "Resolved", "author": "gapra-msft", "createdAt": "2020-12-09T21:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r533802961", "bodyText": "I don't love the name concurrency control. I think it's technically correct, but it sounds to me more like it's intended to manage like number of threads or something. And etags are for optimistic concurrency, but I don't think versions fits in that linguistic space. That might just be me. It's more about like ensuring a consistent view of the blob for the whole download. It's also weird because they behave differently. Etag will throw if it changes, but version id will never throw as long as the version is not deleted.\n... I don't have any suggestions here though.", "author": "rickle-msft", "createdAt": "2020-12-01T23:59:25Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConcurrencyControl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConcurrencyControl.\n+ * {@link #NONE}\n+ * {@link #E_TAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConcurrencyControl {", "originalCommit": "5391e4e4e4ad90f0d395afa5132e2823318f7dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2MDI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534360261", "bodyText": "ConsistencyControl?", "author": "gapra-msft", "createdAt": "2020-12-02T17:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NjQzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r534376431", "bodyText": "Yea I think that works better in my mind. Good one.", "author": "rickle-msft", "createdAt": "2020-12-02T18:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NTEyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535375124", "bodyText": "ConsistentReadControl ?", "author": "kasobol-msft", "createdAt": "2020-12-03T16:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MTU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535471572", "bodyText": "I like that as well", "author": "rickle-msft", "createdAt": "2020-12-03T18:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NDg4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535484881", "bodyText": "Going with Kamil's suggestion", "author": "gapra-msft", "createdAt": "2020-12-03T18:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODU4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r539678585", "bodyText": "Resolved", "author": "gapra-msft", "createdAt": "2020-12-09T21:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjk2MQ=="}], "type": "inlineReview"}, {"oid": "09e4eb52057532f3972a86665d4d3c3548a9ea39", "url": "https://github.com/Azure/azure-sdk-for-java/commit/09e4eb52057532f3972a86665d4d3c3548a9ea39", "message": "Merge branch 'master' into storage/inputStreamOptions", "committedDate": "2020-12-02T17:28:27Z", "type": "commit"}, {"oid": "fe4699c480aa71aeb9d7a89359722493b6fa9f54", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe4699c480aa71aeb9d7a89359722493b6fa9f54", "message": "Updated based off review", "committedDate": "2020-12-02T17:53:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NzI1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535377251", "bodyText": "How about other requestConditions?", "author": "kasobol-msft", "createdAt": "2020-12-03T16:17:50Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,71 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConcurrencyControl concurrencyControl = options.getConcurrencyControl() == null ? ConcurrencyControl.ETAG\n+            : options.getConcurrencyControl();\n \n-        BlobProperties properties = getProperties();\n+        BlobProperties properties = getPropertiesWithResponse(options.getRequestConditions(), null, null).getValue();\n+        String eTag = properties.getETag();\n+        String versionId = properties.getVersionId();\n \n         BlobRange range = options.getRange() == null ? new BlobRange(0) : options.getRange();\n         int chunkSize = options.getBlockSize() == null ? 4 * Constants.MB : options.getBlockSize();\n \n         BlobRequestConditions requestConditions = options.getRequestConditions() == null\n             ? new BlobRequestConditions() : options.getRequestConditions();\n-        // Target the user specified version by default. If not provided, target the latest version.\n-        if (requestConditions.getIfMatch() == null) {\n-            requestConditions.setIfMatch(properties.getETag());\n+        BlobAsyncClientBase client = this.client;\n+\n+        switch (concurrencyControl) {\n+            case NONE:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateControlException(\"requestConditions.ifMatch\",\n+                        ConcurrencyControl.NONE.toString(), ConcurrencyControl.ETAG.toString()));\n+                }\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateControlException(\"client.versionId\",\n+                        ConcurrencyControl.NONE.toString(), ConcurrencyControl.VERSION_ID.toString()));\n+                }\n+                break;\n+            case ETAG:\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateControlException(\"client.versionId\",\n+                        ConcurrencyControl.ETAG.toString(), ConcurrencyControl.VERSION_ID.toString()));\n+                }\n+                // Target the user specified eTag by default. If not provided, target the latest eTag.\n+                if (requestConditions.getIfMatch() == null) {\n+                    requestConditions.setIfMatch(eTag);\n+                }\n+                break;\n+            case VERSION_ID:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateControlException(\"requestConditions.ifMatch\",\n+                        ConcurrencyControl.VERSION_ID.toString(), ConcurrencyControl.ETAG.toString()));\n+                }", "originalCommit": "fe4699c480aa71aeb9d7a89359722493b6fa9f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MzU1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535473559", "bodyText": "I think only etag is checked because we only lock on the etag. The other request conditions are only used in the initial get properties and then will be replaced by the etag (if that's the control type specified). Although I can see how it might be odd to specify LMT and version at the same time....", "author": "rickle-msft", "createdAt": "2020-12-03T18:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4MTA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535481066", "bodyText": "Maybe they just want that extra level of assurance :P", "author": "gapra-msft", "createdAt": "2020-12-03T18:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NzI1MQ=="}], "type": "inlineReview"}, {"oid": "cf5d119b830ca3486aff335d068a78e487f33a84", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf5d119b830ca3486aff335d068a78e487f33a84", "message": "renamed enum", "committedDate": "2020-12-03T18:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NTE0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535485148", "bodyText": "Rewrite these docs", "author": "gapra-msft", "createdAt": "2020-12-03T18:36:35Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConsistentReadControl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConcurrencyControl.\n+ * {@link #NONE}\n+ * {@link #ETAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConsistentReadControl {\n+    /**\n+     * No concurrency control. 'requestConditions.ifMatch' and 'client.versionId' must not be set.", "originalCommit": "cf5d119b830ca3486aff335d068a78e487f33a84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODkwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r539678904", "bodyText": "Done", "author": "gapra-msft", "createdAt": "2020-12-09T21:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4NTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMTI3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535501272", "bodyText": "If someone is using both versionid and ifmatch condition this is going to break them.\nMaybe we shouldn't default to \"ETAG\" few lines above but rather apply this switch block only if consistency controll was explicitly set. Otherwise use old logic?", "author": "kasobol-msft", "createdAt": "2020-12-03T19:00:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobClientBase.java", "diffHunk": "@@ -261,23 +262,71 @@ public final BlobInputStream openInputStream(BlobRange range, BlobRequestConditi\n      */\n     public BlobInputStream openInputStream(BlobInputStreamOptions options) {\n         options = options == null ? new BlobInputStreamOptions() : options;\n+        ConsistentReadControl consistentReadControl = options.getConsistentReadControl() == null ? ConsistentReadControl.ETAG\n+            : options.getConsistentReadControl();\n \n-        BlobProperties properties = getProperties();\n+        BlobProperties properties = getPropertiesWithResponse(options.getRequestConditions(), null, null).getValue();\n+        String eTag = properties.getETag();\n+        String versionId = properties.getVersionId();\n \n         BlobRange range = options.getRange() == null ? new BlobRange(0) : options.getRange();\n         int chunkSize = options.getBlockSize() == null ? 4 * Constants.MB : options.getBlockSize();\n \n         BlobRequestConditions requestConditions = options.getRequestConditions() == null\n             ? new BlobRequestConditions() : options.getRequestConditions();\n-        // Target the user specified version by default. If not provided, target the latest version.\n-        if (requestConditions.getIfMatch() == null) {\n-            requestConditions.setIfMatch(properties.getETag());\n+        BlobAsyncClientBase client = this.client;\n+\n+        switch (consistentReadControl) {\n+            case NONE:\n+                if (requestConditions.getIfMatch() != null) {\n+                    throw logger.logExceptionAsError(generateConsistentReadControlException(\"requestConditions.ifMatch\",\n+                        ConsistentReadControl.NONE.toString(), ConsistentReadControl.ETAG.toString()));\n+                }\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateConsistentReadControlException(\"client.versionId\",\n+                        ConsistentReadControl.NONE.toString(), ConsistentReadControl.VERSION_ID.toString()));\n+                }\n+                break;\n+            case ETAG:\n+                if (this.client.getVersionId() != null) {\n+                    throw logger.logExceptionAsError(generateConsistentReadControlException(\"client.versionId\",\n+                        ConsistentReadControl.ETAG.toString(), ConsistentReadControl.VERSION_ID.toString()));\n+                }", "originalCommit": "cf5d119b830ca3486aff335d068a78e487f33a84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwODIyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r535508227", "bodyText": "I think Rick and I already talked about this - there really is no reason to be using both version and ifMatch conditions (since theyre basically duplicating work).", "author": "gapra-msft", "createdAt": "2020-12-03T19:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMTI3Mg=="}], "type": "inlineReview"}, {"oid": "cb28fc7374c60a52de919f2de91bd7b76f3748e9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb28fc7374c60a52de919f2de91bd7b76f3748e9", "message": "Line length", "committedDate": "2020-12-03T20:19:12Z", "type": "commit"}, {"oid": "6b3de8cad8c35b54f54e74bec7ffd79851e8792d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b3de8cad8c35b54f54e74bec7ffd79851e8792d", "message": "Merge branch 'master' into storage/inputStreamOptions", "committedDate": "2020-12-09T21:55:31Z", "type": "commit"}, {"oid": "0f892e19e39d71b8b71c0e9d307ab62945824fd4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0f892e19e39d71b8b71c0e9d307ab62945824fd4", "message": "Made tests not live mode only and recorded them", "committedDate": "2020-12-09T22:55:00Z", "type": "commit"}, {"oid": "c9ed862e3efde0c614f8431ffc0ed61cf2eadc05", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9ed862e3efde0c614f8431ffc0ed61cf2eadc05", "message": "Updated test", "committedDate": "2020-12-09T23:10:18Z", "type": "commit"}, {"oid": "efb61f59733b2c78523d787dfdfb314bc257e334", "url": "https://github.com/Azure/azure-sdk-for-java/commit/efb61f59733b2c78523d787dfdfb314bc257e334", "message": "Added more docs", "committedDate": "2020-12-10T17:45:36Z", "type": "commit"}, {"oid": "683c50df4ed465b98319ea66bef9e79e3cf51b55", "url": "https://github.com/Azure/azure-sdk-for-java/commit/683c50df4ed465b98319ea66bef9e79e3cf51b55", "message": "Redmoved doc", "committedDate": "2020-12-10T17:45:59Z", "type": "commit"}, {"oid": "8a6d2a355f08668b34658b2ec8811f7533daf6c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a6d2a355f08668b34658b2ec8811f7533daf6c6", "message": "Added tests", "committedDate": "2020-12-11T22:38:26Z", "type": "commit"}, {"oid": "7e6a404e7250922e8b81c6f0333830a5d8f9fc31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e6a404e7250922e8b81c6f0333830a5d8f9fc31", "message": "Added version test recorx", "committedDate": "2020-12-14T17:36:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0MzU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r562143586", "bodyText": "locking on etag means we will throw if it changes in the meantime", "author": "gapra-msft", "createdAt": "2021-01-21T19:30:09Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConsistentReadControl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConsistentReadControl.\n+ * {@link #NONE}\n+ * {@link #ETAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConsistentReadControl {\n+    /**\n+     * No consistent read control. 'requestConditions.ifMatch' and 'client.versionId' must not be set.\n+     */\n+    NONE,\n+\n+    /**\n+     * Default value. Consistent read control based on eTag.\n+     * If {@link BlobRequestConditions#getIfMatch()} is set, the client will honor this value.\n+     * Otherwise, {@link BlobRequestConditions#getIfMatch()} is set to the latest eTag.", "originalCommit": "7e6a404e7250922e8b81c6f0333830a5d8f9fc31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE0NDcxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r562144711", "bodyText": "locking on version means you get a consisten read on blob without throwing if it vhanges in the meantime", "author": "gapra-msft", "createdAt": "2021-01-21T19:32:09Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConsistentReadControl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConsistentReadControl.\n+ * {@link #NONE}\n+ * {@link #ETAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConsistentReadControl {\n+    /**\n+     * No consistent read control. 'requestConditions.ifMatch' and 'client.versionId' must not be set.\n+     */\n+    NONE,\n+\n+    /**\n+     * Default value. Consistent read control based on eTag.\n+     * If {@link BlobRequestConditions#getIfMatch()} is set, the client will honor this value.\n+     * Otherwise, {@link BlobRequestConditions#getIfMatch()} is set to the latest eTag.\n+     */\n+    ETAG,\n+\n+    /**\n+     * Consistent control based on versionId. Note: Versioning must be supported by the account to use this value.", "originalCommit": "7e6a404e7250922e8b81c6f0333830a5d8f9fc31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bcb7c652330c8e9d6c96b7bbe216886e41cce67f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bcb7c652330c8e9d6c96b7bbe216886e41cce67f", "message": "Merge branch 'master' into storage/inputStreamOptions", "committedDate": "2021-01-21T20:12:05Z", "type": "commit"}, {"oid": "fff06c1c940056706a5a5c185788e0190f171dab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fff06c1c940056706a5a5c185788e0190f171dab", "message": "Updaed tests", "committedDate": "2021-01-21T22:26:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgwMTgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r562801829", "bodyText": "nit: Should we call out specific exception type that will be thrown?", "author": "kasobol-msft", "createdAt": "2021-01-22T17:50:44Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConsistentReadControl.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConsistentReadControl.\n+ * {@link #NONE}\n+ * {@link #ETAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConsistentReadControl {\n+    /**\n+     * No consistent read control. The client will honor user provided {@link BlobRequestConditions#getIfMatch()} and\n+     * {@link BlobClient#getVersionId()}.\n+     */\n+    NONE,\n+\n+    /**\n+     * Default value. Consistent read control based on eTag.\n+     * If {@link BlobRequestConditions#getIfMatch()} is set, the client will honor this value.\n+     * Otherwise, {@link BlobRequestConditions#getIfMatch()} is set to the latest eTag.\n+     * Note: Modification of the base blob will result in an {@code Exception} if eTag is the only form of consistent", "originalCommit": "fff06c1c940056706a5a5c185788e0190f171dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgxODkwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r562818909", "bodyText": "I think we should add a bit more here: \"Defines values to indicate what strategy the sdk should use when reading from a blob to ensure the view of the data is consistent and not changed during the read.\"", "author": "rickle-msft", "createdAt": "2021-01-22T18:14:47Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConsistentReadControl.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConsistentReadControl.", "originalCommit": "fff06c1c940056706a5a5c185788e0190f171dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgxOTcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17908#discussion_r562819718", "bodyText": "\"... but it may no longer be the latest data.\"", "author": "rickle-msft", "createdAt": "2021-01-22T18:16:08Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ConsistentReadControl.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.storage.blob.BlobClient;\n+\n+/**\n+ * Defines values for ConsistentReadControl.\n+ * {@link #NONE}\n+ * {@link #ETAG}\n+ * {@link #VERSION_ID}\n+ */\n+public enum ConsistentReadControl {\n+    /**\n+     * No consistent read control. The client will honor user provided {@link BlobRequestConditions#getIfMatch()} and\n+     * {@link BlobClient#getVersionId()}.\n+     */\n+    NONE,\n+\n+    /**\n+     * Default value. Consistent read control based on eTag.\n+     * If {@link BlobRequestConditions#getIfMatch()} is set, the client will honor this value.\n+     * Otherwise, {@link BlobRequestConditions#getIfMatch()} is set to the latest eTag.\n+     * Note: Modification of the base blob will result in an {@code Exception} if eTag is the only form of consistent\n+     * read control being employed.\n+     */\n+    ETAG,\n+\n+    /**\n+     * Consistent control based on versionId. Note: Versioning must be supported by the account to use this value.\n+     * If {@link BlobClient#getVersionId()} is set, the client will honor this value.\n+     * Otherwise, {@link BlobClient#getVersionId()} is set to the latest versionId.\n+     * Note: Modification of the base blob will not result in an {@code Exception} and allow you to continue reading the\n+     * entirety of the appropriate version of the blob determined at the time of opening the {@code InputStream}.", "originalCommit": "fff06c1c940056706a5a5c185788e0190f171dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bca079967159c553a93a4a3d11bd544f847508b1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bca079967159c553a93a4a3d11bd544f847508b1", "message": "PR comments", "committedDate": "2021-01-22T19:56:22Z", "type": "commit"}]}