{"pr_number": 12917, "pr_title": "Added script logging enabled API to CosmosStoredProcedureRequestOptions", "pr_createdAt": "2020-07-08T18:57:04Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12917", "timeline": [{"oid": "717e551a2a3bc53fa96667765e99c735d2086035", "url": "https://github.com/Azure/azure-sdk-for-java/commit/717e551a2a3bc53fa96667765e99c735d2086035", "message": "Added script logging enabled API to CosmosStoredProcedureRequestOptions", "committedDate": "2020-07-08T18:56:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTAzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451765032", "bodyText": "Nice.", "author": "kirankumarkolli", "createdAt": "2020-07-08T19:06:02Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosSyncStoredProcTest.java", "diffHunk": "@@ -148,19 +150,59 @@ public void deleteStoredProcedure() throws Exception {\n     }\n     @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n     public void executeStoredProcedure() throws Exception {\n-        CosmosStoredProcedureProperties sproc = new CosmosStoredProcedureProperties(\n+        CosmosStoredProcedureProperties storedProcedure = new CosmosStoredProcedureProperties(\n             UUID.randomUUID().toString(),\n-            \"function() {var x = 10;}\"\n-        );\n-\n-        CosmosStoredProcedureResponse response = container.getScripts().createStoredProcedure(sproc);\n+            \"function() {\" +\n+                \"        var mytext = \\\"x\\\";\" +\n+                \"        var myval = 1;\" +\n+                \"        try {\" +\n+                \"            console.log(\\\"The value of %s is %s.\\\", mytext, myval);\" +\n+                \"            getContext().getResponse().setBody(\\\"Success!\\\");\" +\n+                \"        }\" +\n+                \"        catch(err) {\" +\n+                \"            getContext().getResponse().setBody(\\\"inline err: [\\\" + err.number + \\\"] \\\" + err);\" +\n+                \"        }\" +\n+                \"}\");\n+\n+        container.getScripts().createStoredProcedure(storedProcedure);\n         CosmosStoredProcedureRequestOptions options = new CosmosStoredProcedureRequestOptions();\n         options.setPartitionKey(PartitionKey.NONE);\n         CosmosStoredProcedureResponse executeResponse = container.getScripts()\n-                                                                 .getStoredProcedure(sproc.getId())\n+                                                                 .getStoredProcedure(storedProcedure.getId())\n                                                                  .execute(null, options);\n \n         assertThat(executeResponse.getActivityId()).isNotEmpty();\n+        assertThat(executeResponse.getScriptLog()).isNull();\n+    }\n+\n+    @Test(groups = \"simple\", timeOut = TIMEOUT)\n+    public void executeStoredProcedureWithScriptLoggingEnabled() throws Exception {\n+        // Create a stored procedure\n+        CosmosStoredProcedureProperties storedProcedure = new CosmosStoredProcedureProperties(\n+            UUID.randomUUID().toString(),\n+            \"function() {\" +\n+                \"        var mytext = \\\"x\\\";\" +\n+                \"        var myval = 1;\" +\n+                \"        try {\" +\n+                \"            console.log(\\\"The value of %s is %s.\\\", mytext, myval);\" +\n+                \"            getContext().getResponse().setBody(\\\"Success!\\\");\" +\n+                \"        }\" +\n+                \"        catch(err) {\" +\n+                \"            getContext().getResponse().setBody(\\\"inline err: [\\\" + err.number + \\\"] \\\" + err);\" +\n+                \"        }\" +\n+                \"}\");\n+\n+        container.getScripts().createStoredProcedure(storedProcedure);\n+        CosmosStoredProcedureRequestOptions options = new CosmosStoredProcedureRequestOptions();\n+        options.setScriptLoggingEnabled(true);\n+        options.setPartitionKey(PartitionKey.NONE);\n+\n+        CosmosStoredProcedureResponse executeResponse = container.getScripts()\n+                                                                 .getStoredProcedure(storedProcedure.getId())\n+                                                                 .execute(null, options);\n+\n+        String logResult = \"The value of x is 1.\";\n+        assertThat(URLDecoder.decode(executeResponse.getScriptLog(), StandardCharsets.UTF_8)).isEqualTo(logResult);", "originalCommit": "717e551a2a3bc53fa96667765e99c735d2086035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3MDIwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451770209", "bodyText": "I wonder whose job it is to do the decoding? is it the SDK job to decode scriptLog or the user?", "author": "moderakh", "createdAt": "2020-07-08T19:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTAzMg=="}], "type": "inlineReview"}, {"oid": "db467f69bd574ca118f38dc5830d43ffffaf2d64", "url": "https://github.com/Azure/azure-sdk-for-java/commit/db467f69bd574ca118f38dc5830d43ffffaf2d64", "message": "Fixed java 8 compilation issue", "committedDate": "2020-07-08T19:18:42Z", "type": "commit"}, {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc28a3389c94243758e75f332f155058f5ffe6bd", "message": "Updated getScriptLog API to decode before returning the response", "committedDate": "2020-07-08T20:06:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMTI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451801299", "bodyText": "NIT - add comment for default value", "author": "FabianMeiswinkel", "createdAt": "2020-07-08T20:17:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "diffHunk": "@@ -115,13 +116,36 @@ public CosmosStoredProcedureRequestOptions setSessionToken(String sessionToken)\n         return this;\n     }\n \n+    /**\n+     * Gets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database\n+     * service or not.\n+     *\n+     * @return true if Javascript stored procedure logging is enabled", "originalCommit": "bc28a3389c94243758e75f332f155058f5ffe6bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzI2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451803267", "bodyText": "Good point, added default value to java docs", "author": "kushagraThapar", "createdAt": "2020-07-08T20:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMTI5OQ=="}], "type": "inlineReview"}, {"oid": "d1f7260093c3370e8e9062ea585e828992fa4edd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1f7260093c3370e8e9062ea585e828992fa4edd", "message": "Added default value to java docs", "committedDate": "2020-07-08T20:21:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzMxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451803313", "bodyText": "Can we use StringUtils.isEmpty here ?", "author": "simplynaveen20", "createdAt": "2020-07-08T20:22:00Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -94,6 +100,18 @@ public static String encodeBase64String(byte[] binaryData) {\n         return encodedString;\n     }\n \n+    public static String decodeAsUTF8String(String inputString) {\n+        if (inputString == null || inputString.isEmpty()) {", "originalCommit": "bc28a3389c94243758e75f332f155058f5ffe6bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMTA0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451811047", "bodyText": "Yes, we can do that too.\nSince this is implementation detail, will change it in next PR .", "author": "kushagraThapar", "createdAt": "2020-07-08T20:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDU0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451804543", "bodyText": "How about mentioning default value in documentation ?", "author": "simplynaveen20", "createdAt": "2020-07-08T20:24:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "diffHunk": "@@ -115,13 +116,36 @@ public CosmosStoredProcedureRequestOptions setSessionToken(String sessionToken)\n         return this;\n     }\n \n+    /**\n+     * Gets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database\n+     * service or not.\n+     *\n+     * @return true if Javascript stored procedure logging is enabled\n+     */\n+    public boolean isScriptLoggingEnabled() {\n+        return scriptLoggingEnabled;\n+    }\n+\n+    /**\n+     * Sets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database", "originalCommit": "bc28a3389c94243758e75f332f155058f5ffe6bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDg5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451810896", "bodyText": "Done.", "author": "kushagraThapar", "createdAt": "2020-07-08T20:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDU0Mw=="}], "type": "inlineReview"}]}