{"pr_number": 14910, "pr_title": "feat(digital-twins): Add query API implementation", "pr_createdAt": "2020-09-08T18:05:56Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14910", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNDU4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485104587", "bodyText": "nit: Is there an additional backtick here?", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:07:36Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwOTcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485109727", "bodyText": "ah yes :) You have a good eye!", "author": "vinagesh", "createdAt": "2020-09-08T18:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNDU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNTM4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485105389", "bodyText": "does queryNextPage need the query string again?", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:09:10Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMjQzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485112435", "bodyText": "It does not need it but no harm in passing it as well. To keep it consistent with .net, I will remove it here.", "author": "vinagesh", "createdAt": "2020-09-08T18:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNTM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNjUwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485106504", "bodyText": "Doesn't QuerySpecification have fluent setters?", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:11:07Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNzY3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485107673", "bodyText": "nit: we've followed the pattern where the sync APIs call their next max overloads -> this sync API should call the sync API overload with Context.NONE.", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:13:18Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query));", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwNzg3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485107872", "bodyText": "same here as well", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:13:41Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query, Context context) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedIterable<T> query(String query, Class<T> clazz) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, clazz));", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwOTEwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485109109", "bodyText": "I see that the query API doesn't return a pageable, is it the same for the .net client as well?", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:15:55Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> {\n+                        try {\n+                            return mapper.writeValueAsString(object);\n+                        } catch (JsonProcessingException e) {\n+                            logger.error(\"JsonProcessingException occurred while retrieving query result items: \", e);\n+                            throw new RuntimeException(\"JsonProcessingException occurred while retrieving query result items\", e);\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    <T> Mono<PagedResponse<T>> queryFirstPage(String query, Class<T> clazz, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> mapper.convertValue(object, clazz))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    Mono<PagedResponse<String>> queryNextPage(String query, String nextLink, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query)\n+            .setContinuationToken(nextLink);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMTE0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485111148", "bodyText": "yes it is the same for .net as well. We need to convert it to pageable.", "author": "vinagesh", "createdAt": "2020-09-08T18:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwOTEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMjk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485112943", "bodyText": "From the .NET client, it looks like all we need to supply to the service is the cont. token, we don't need to pass in the query string again: https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/digitaltwins/Azure.DigitalTwins.Core/src/DigitalTwinsClient.cs#L1360-L1363\nAlso, what is our testing strategy with this (the pageable part)? Do we create 100+ twin instances and then query them? The page size isn't configurable yet, correct?", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:23:08Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1067,4 +1068,142 @@ public HttpPipeline getHttpPipeline() {\n                 return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), null, twinHeaders));\n             });\n     }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedFlux} of application/json query result items.`\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> query(String query) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> queryFirstPage(query, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, context)));\n+    }\n+\n+    PagedFlux<String> query(String query, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, context),\n+            nextLink -> queryNextPage(query, nextLink, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedFlux} of application/json of the specified type.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedFlux<T> query(String query, Class<T> clazz) {\n+        return new PagedFlux<T>(\n+            () -> withContext(context -> queryFirstPage(query, clazz, context)),\n+            nextLink -> withContext(context -> queryNextPage(query, nextLink, clazz, context)));\n+    }\n+\n+    <T> PagedFlux<T> query(String query, Class<T> clazz, Context context) {\n+        return new PagedFlux<>(\n+            () -> queryFirstPage(query, clazz, context),\n+            nextLink -> queryNextPage(query, nextLink, clazz, context));\n+    }\n+\n+    Mono<PagedResponse<String>> queryFirstPage(String query, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> {\n+                        try {\n+                            return mapper.writeValueAsString(object);\n+                        } catch (JsonProcessingException e) {\n+                            logger.error(\"JsonProcessingException occurred while retrieving query result items: \", e);\n+                            throw new RuntimeException(\"JsonProcessingException occurred while retrieving query result items\", e);\n+                        }\n+                    })\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    <T> Mono<PagedResponse<T>> queryFirstPage(String query, Class<T> clazz, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query);\n+\n+        return protocolLayer\n+            .getQueries()\n+            .queryTwinsWithResponseAsync(querySpecification, context)\n+            .map(objectPagedResponse -> new PagedResponseBase<>(\n+                objectPagedResponse.getRequest(),\n+                objectPagedResponse.getStatusCode(),\n+                objectPagedResponse.getHeaders(),\n+                objectPagedResponse.getValue().getItems().stream()\n+                    .map(object -> mapper.convertValue(object, clazz))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList()),\n+                objectPagedResponse.getValue().getContinuationToken(),\n+                objectPagedResponse.getDeserializedHeaders()));\n+    }\n+\n+    Mono<PagedResponse<String>> queryNextPage(String query, String nextLink, Context context) {\n+        QuerySpecification querySpecification = new QuerySpecification();\n+\n+        querySpecification\n+            .setQuery(query)\n+            .setContinuationToken(nextLink);", "originalCommit": "b42c0590b284064c1d92f3106c222566e33cf398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTI0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485115249", "bodyText": "yes that is what I replied to your earlier comment. You don't need to pass it but there is no harm in passing it. But to keep consistency I removed it here. The page size is not configurable but we will follow the same strategy as we have in .net. I will look at it as I start implementing samples.", "author": "vinagesh", "createdAt": "2020-09-08T18:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMjk0Mw=="}], "type": "inlineReview"}, {"oid": "065f54d1e0e3f4699ed62cbb541d2521d6973915", "url": "https://github.com/Azure/azure-sdk-for-java/commit/065f54d1e0e3f4699ed62cbb541d2521d6973915", "message": "feat(digital-twins): Add query API implementation", "committedDate": "2020-09-08T18:24:09Z", "type": "forcePushed"}, {"oid": "e0577963c020569b4d5681499b8c0e38eec79f68", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0577963c020569b4d5681499b8c0e38eec79f68", "message": "feat(digital-twins): Add query API implementation", "committedDate": "2020-09-08T18:29:38Z", "type": "forcePushed"}, {"oid": "06b7a60c4fde6e047b718f32b6de2d59c6b5001f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/06b7a60c4fde6e047b718f32b6de2d59c6b5001f", "message": "feat(digital-twins): Add query API implementation", "committedDate": "2020-09-08T18:38:32Z", "type": "forcePushed"}, {"oid": "9102fc0439a5e5caf285f5a6adc2cfc7ba8d258f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9102fc0439a5e5caf285f5a6adc2cfc7ba8d258f", "message": "feat(digital-twins): Add query API implementation", "committedDate": "2020-09-08T18:39:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjAxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485122019", "bodyText": "This can be return query(query, Context.NONE) instead. We can call the sync overload directly, instead of calling the async overload and creating a new PagedIterable.", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:40:25Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, Context.NONE));", "originalCommit": "9102fc0439a5e5caf285f5a6adc2cfc7ba8d258f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjc4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14910#discussion_r485122781", "bodyText": "here as well", "author": "abhipsaMisra", "createdAt": "2020-09-08T18:41:51Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -636,4 +636,54 @@ public void updateComponent(String digitalTwinId, String componentPath, List<Obj\n     public DigitalTwinsResponse<Void> updateComponentWithResponse(String digitalTwinId, String componentPath, List<Object> componentUpdateOperations, UpdateComponentRequestOptions options, Context context) {\n         return digitalTwinsAsyncClient.updateComponentWithResponse(digitalTwinId, componentPath, componentUpdateOperations, options, context).block();\n     }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, Context.NONE));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<String> query(String query, Context context) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, context));\n+    }\n+\n+    /**\n+     * Query digital twins.\n+     *\n+     * @param query The query string, in SQL-like syntax.\n+     * @param clazz The model class to convert the query response to.\n+     * @param <T> The generic type to convert the query response to.\n+     * @return A {@link PagedIterable} of application/json query result items.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public <T> PagedIterable<T> query(String query, Class<T> clazz) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.query(query, clazz, Context.NONE));", "originalCommit": "9102fc0439a5e5caf285f5a6adc2cfc7ba8d258f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0d0ac9cde90fff87af09fee7eaf178e0f17be45c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d0ac9cde90fff87af09fee7eaf178e0f17be45c", "message": "feat(digital-twins): Add query API implementation", "committedDate": "2020-09-08T18:51:02Z", "type": "commit"}, {"oid": "0d0ac9cde90fff87af09fee7eaf178e0f17be45c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d0ac9cde90fff87af09fee7eaf178e0f17be45c", "message": "feat(digital-twins): Add query API implementation", "committedDate": "2020-09-08T18:51:02Z", "type": "forcePushed"}]}