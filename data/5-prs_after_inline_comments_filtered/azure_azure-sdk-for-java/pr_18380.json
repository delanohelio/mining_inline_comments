{"pr_number": 18380, "pr_title": "Add SAS credential and policy.", "pr_createdAt": "2020-12-28T23:20:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18380", "timeline": [{"oid": "546a8c8c71adf49dd26dc2ff703a9162cd164c8e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/546a8c8c71adf49dd26dc2ff703a9162cd164c8e", "message": "Add SAS credential and policy.", "committedDate": "2020-12-28T23:19:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNjI1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549516258", "bodyText": "This check is to prevent multiple appends if request is retried. I.e. Storage scopes auth policy per each retry.", "author": "kasobol-msft", "createdAt": "2020-12-28T23:22:54Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {\n+            signature = signature.substring(1);\n+        }\n+\n+        String query = httpRequest.getUrl().getQuery();\n+        String url = httpRequest.getUrl().toString();\n+        if (query == null || query.isEmpty()) {\n+            url = url + \"?\" + signature;\n+        } else if (!query.contains(signature)) {", "originalCommit": "546a8c8c71adf49dd26dc2ff703a9162cd164c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxOTg3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549519878", "bodyText": "Based on this should this policy implement https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpPipelinePolicy.java#L36 with PER_CALL? Having this logic and the positional change are another route as well, to explicitly prevent duplicate SAS parameters.", "author": "alzimmermsft", "createdAt": "2020-12-28T23:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNjI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyNDI1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549524255", "bodyText": "I took a look how getPipelinePosition is used. It seems to be suited more towards users providing custom policies through client builders. I.e. I don't see any sdk checking this property while adding auth policy to the pipeline. So this wouldn't serve as strong enforcement but rather suggestion. Therefore I'd rather keep this check to prevent surprise should some sdk wrongly scope this.\nI can override the getPipelinePosition to indicate where it should be placed.", "author": "kasobol-msft", "createdAt": "2020-12-29T00:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNjI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwMDA0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549800042", "bodyText": "For this policy I would override getPipelinePosition as we expect to add the SAS token only once for the initial request and any number of retries (unlike shared key where the Date header is taken into account so it needs recalculation per retry).", "author": "alzimmermsft", "createdAt": "2020-12-29T18:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNjI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwMjQ0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549802448", "bodyText": "Sounds good. I removed this check and getPipelinePosition is now overriden in this class.", "author": "kasobol-msft", "createdAt": "2020-12-29T18:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxNjI1OA=="}], "type": "inlineReview"}, {"oid": "11f74d33965a3a56b5bec2ff62920debc9030c20", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11f74d33965a3a56b5bec2ff62920debc9030c20", "message": "fix checkstyle.", "committedDate": "2020-12-28T23:32:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDQ2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549520462", "bodyText": "Do we want to clean the signature on construction of the credential to reduce the number of times we need to substring?", "author": "alzimmermsft", "createdAt": "2020-12-28T23:47:00Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {", "originalCommit": "11f74d33965a3a56b5bec2ff62920debc9030c20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMTA4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549521088", "bodyText": "AzureSasCredential credential = AzureSasCredential(\"?foo\");\nSystem.out.println(credential.getSignature()); // this would print \"foo\"\n\nI was thinking about it but I thought it would be good to make sure that what we feed into constructor is the same what getSignature() returns.", "author": "kasobol-msft", "createdAt": "2020-12-28T23:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwMDEzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549800136", "bodyText": "Makes sense to me, the sub-stringing is only a minor cost anyhow.", "author": "alzimmermsft", "createdAt": "2020-12-29T18:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMDIwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549820207", "bodyText": "Stripping out the leading ? may work for storage but will there be other services where the leading ? would still be required?", "author": "srnagar", "createdAt": "2020-12-29T19:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549520731", "bodyText": "Is there a possible case where we have a URL with an empty query, such as https:://example.com?, where this condition passes and we end up with double ?s", "author": "alzimmermsft", "createdAt": "2020-12-28T23:48:46Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {\n+            signature = signature.substring(1);\n+        }\n+\n+        String query = httpRequest.getUrl().getQuery();\n+        String url = httpRequest.getUrl().toString();\n+        if (query == null || query.isEmpty()) {", "originalCommit": "11f74d33965a3a56b5bec2ff62920debc9030c20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyNDI5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549524296", "bodyText": "good catch.", "author": "kasobol-msft", "createdAt": "2020-12-29T00:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyMDczMQ=="}], "type": "inlineReview"}, {"oid": "cbea95638f93652372e009f1b58625fa9262ed4d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbea95638f93652372e009f1b58625fa9262ed4d", "message": "pr feedback.", "committedDate": "2020-12-29T00:11:08Z", "type": "commit"}, {"oid": "c01c3190ed686516b357d8f15c2249e367ff57b5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c01c3190ed686516b357d8f15c2249e367ff57b5", "message": "poke ci", "committedDate": "2020-12-29T17:20:27Z", "type": "commit"}, {"oid": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654", "url": "https://github.com/Azure/azure-sdk-for-java/commit/42b9a1c4e76c9cb445b2e1fe6d20d3009138e654", "message": "pr feedback.", "committedDate": "2020-12-29T18:20:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMjU5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549822595", "bodyText": "Shouldn't this be PER_RETRY? If the signature is updated during the course of retries, we would want to use the updated signature for the retry instead of the old signature. Also, AzureKeyCredentialPolicy uses PER_RETRY. So, we should make it consistent with that policy.", "author": "srnagar", "createdAt": "2020-12-29T19:32:48Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureSasCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureSasCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpPipelinePosition;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureSasCredential} to set the shared access signature for a request.\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the shared access signature.\n+ */\n+public final class AzureSasCredentialPolicy implements HttpPipelinePolicy {\n+    private final AzureSasCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureSasCredential} to append sas to query string.\n+     *\n+     * @param credential The {@link AzureSasCredential} containing the shared access signature to use.\n+     * @throws NullPointerException If {@code credential} is {@code null}.\n+     */\n+    public AzureSasCredentialPolicy(AzureSasCredential credential) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpRequest httpRequest = context.getHttpRequest();\n+        if (\"http\".equals(httpRequest.getUrl().getProtocol())) {\n+            return Mono.error(new IllegalStateException(\n+                \"Shared access signature credentials require HTTPS to prevent leaking the shared access signature.\"));\n+        }\n+\n+        String signature = credential.getSignature();\n+        if (signature.startsWith(\"?\")) {\n+            signature = signature.substring(1);\n+        }\n+\n+        String query = httpRequest.getUrl().getQuery();\n+        String url = httpRequest.getUrl().toString();\n+        if (query == null || query.isEmpty()) {\n+            if (url.endsWith(\"?\")) {\n+                url = url + signature;\n+            } else {\n+                url = url + \"?\" + signature;\n+            }\n+        } else {\n+            url = url + \"&\" + signature;\n+        }\n+        httpRequest.setUrl(url);\n+\n+        return next.process();\n+    }\n+\n+    @Override\n+    public HttpPipelinePosition getPipelinePosition() {\n+        return HttpPipelinePosition.PER_CALL;", "originalCommit": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyNDMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549824317", "bodyText": "@srnagar Plz take a look at discussion above #18380 (comment) .", "author": "kasobol-msft", "createdAt": "2020-12-29T19:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMjU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyOTAxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549829010", "bodyText": "After discussing with @srnagar I realized the SAS token in the credential could change between retry attempts and we should be using the newest SAS token available. This is safe to do for each retry as the retrying policies should be creating a copy of the HttpRequest URL and headers before each call, so previous SAS tokens shouldn't be carried over between retries.", "author": "alzimmermsft", "createdAt": "2020-12-29T19:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMjU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzMjAxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549832016", "bodyText": "Awesome. That simplifies a lot. I'll remove the override.", "author": "kasobol-msft", "createdAt": "2020-12-29T20:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMjU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMzM2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18380#discussion_r549823361", "bodyText": "nit: this line can be deleted", "author": "srnagar", "createdAt": "2020-12-29T19:35:50Z", "path": "sdk/core/azure-core/src/test/java/com/azure/core/credential/CredentialsTests.java", "diffHunk": "@@ -82,4 +85,45 @@ public void tokenCredentialHttpSchemeTest() throws Exception {\n                 .expectErrorMessage(\"token credentials require a URL using the HTTPS protocol scheme\")\n                 .verify();\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource(\n+        {   \"test_signature,https://localhost,https://localhost?test_signature\",\n+            \"?test_signature,https://localhost,https://localhost?test_signature\",\n+            \"test_signature,https://localhost?,https://localhost?test_signature\",\n+            \"?test_signature,https://localhost?,https://localhost?test_signature\",\n+            \"test_signature,https://localhost?foo=bar,https://localhost?foo=bar&test_signature\",\n+            \"?test_signature,https://localhost?foo=bar,https://localhost?foo=bar&test_signature\"})\n+    public void sasCredentialsTest(String signature, String url, String expectedUrl) throws Exception {\n+        AzureSasCredential credential = new AzureSasCredential(signature);\n+\n+        HttpPipelinePolicy auditorPolicy =  (context, next) -> {\n+            String actualUrl = context.getHttpRequest().getUrl().toString();\n+            Assertions.assertEquals(expectedUrl, actualUrl);\n+            return next.process();\n+        };\n+        //", "originalCommit": "42b9a1c4e76c9cb445b2e1fe6d20d3009138e654", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc49eff2a46d2801991b1318abe09c8cc40fce87", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc49eff2a46d2801991b1318abe09c8cc40fce87", "message": "pr feedback.", "committedDate": "2020-12-29T20:08:46Z", "type": "commit"}, {"oid": "21e1993d73eac696d6057b79998cc77583cca3b6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21e1993d73eac696d6057b79998cc77583cca3b6", "message": "Merge remote-tracking branch 'upstream/master' into sas-credential", "committedDate": "2020-12-30T00:02:11Z", "type": "commit"}]}