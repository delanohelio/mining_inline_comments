{"pr_number": 7749, "pr_title": "Nio path2", "pr_createdAt": "2020-01-27T21:55:09Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7749", "timeline": [{"oid": "7ce57144eea87bb81716a4b0152b1ffa1b249017", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ce57144eea87bb81716a4b0152b1ffa1b249017", "message": "Started on path impl", "committedDate": "2020-01-25T00:04:31Z", "type": "commit"}, {"oid": "0e947fa6000077020207adbd2474bf442907aac2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e947fa6000077020207adbd2474bf442907aac2", "message": "more methods", "committedDate": "2020-01-25T00:04:48Z", "type": "commit"}, {"oid": "4bad0d4101c05b53fc704365af799963c4241fc6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4bad0d4101c05b53fc704365af799963c4241fc6", "message": "More path methods", "committedDate": "2020-01-25T00:05:06Z", "type": "commit"}, {"oid": "38fae9ace938be29b776e8e4f4809f42d9decba4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/38fae9ace938be29b776e8e4f4809f42d9decba4", "message": "Finished path method impls and docs", "committedDate": "2020-01-25T00:05:23Z", "type": "commit"}, {"oid": "5645689129f2ab09111b2434ba90ae3dcf8a2d48", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5645689129f2ab09111b2434ba90ae3dcf8a2d48", "message": "path tests", "committedDate": "2020-01-25T00:05:42Z", "type": "commit"}, {"oid": "d563cb1692f462da79858d0048dcfbf9c5d31b08", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d563cb1692f462da79858d0048dcfbf9c5d31b08", "message": "Pom update", "committedDate": "2020-01-25T00:12:38Z", "type": "commit"}, {"oid": "dba893acc0d20a015489e79055eaf3a0259798b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dba893acc0d20a015489e79055eaf3a0259798b3", "message": "Added design doc to package root", "committedDate": "2020-01-25T00:21:52Z", "type": "commit"}, {"oid": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e0df6409d325e71cee00f1b4690bc0c9634d779", "message": "checkstyle and spotbugs", "committedDate": "2020-01-27T21:52:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNTMxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371505312", "bodyText": "Should log these and others", "author": "rickle-msft", "createdAt": "2020-01-27T21:57:14Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,162 +120,325 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getParent() {\n-        return null;\n+        /*\n+        If this path only has one element, there is no parent. Note the root is included in the parent, so we don't\n+        use getNameCount here.\n+         */\n+        if (this.splitToElements().length == 1) {\n+            return null;\n+        }\n+\n+        return this.parentFileSystem.getPath(\n+            this.pathString.substring(0, this.pathString.lastIndexOf(this.parentFileSystem.getSeparator())));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getNameCount() {\n-        return 0;\n+        return this.splitToElements(this.withoutRoot()).length;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getName(int i) {\n-        return null;\n+        if (i < 0 || i >= this.getNameCount()) {\n+            throw new IllegalArgumentException();", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwNjkyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371506926", "bodyText": "Should use splitToElements", "author": "rickle-msft", "createdAt": "2020-01-27T22:00:48Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -38,18 +89,29 @@ public FileSystem getFileSystem() {\n     }\n \n     /**\n+     * A path is considered absolute in this file system if it contains a root component.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean isAbsolute() {\n-        return false;\n+        return this.getRoot() != null;\n     }\n \n     /**\n+     * The root component of this path also identifies the Azure Storage Container in which the file is stored. This\n+     * method will not validate that the root component corresponds to an actual file store/container in this\n+     * file system. It will simply return the root component of the path if one is present and syntactically valid.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getRoot() {\n+        // Check if the first element of the path is formatted like a root directory.\n+        String firstElement = pathString.split(parentFileSystem.getSeparator())[0];", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwOTMwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371509306", "bodyText": "Just use .equals. It's clear and safer and evidently equivalent.", "author": "rickle-msft", "createdAt": "2020-01-27T22:06:14Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,162 +120,325 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getParent() {\n-        return null;\n+        /*\n+        If this path only has one element, there is no parent. Note the root is included in the parent, so we don't\n+        use getNameCount here.\n+         */\n+        if (this.splitToElements().length == 1) {\n+            return null;\n+        }\n+\n+        return this.parentFileSystem.getPath(\n+            this.pathString.substring(0, this.pathString.lastIndexOf(this.parentFileSystem.getSeparator())));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getNameCount() {\n-        return 0;\n+        return this.splitToElements(this.withoutRoot()).length;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getName(int i) {\n-        return null;\n+        if (i < 0 || i >= this.getNameCount()) {\n+            throw new IllegalArgumentException();\n+        }\n+        return this.parentFileSystem.getPath(this.splitToElements(this.withoutRoot())[i]);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Path subpath(int i, int i1) {\n-        return null;\n+    public Path subpath(int begin, int end) {\n+        if (begin < 0 || begin >= this.getNameCount()\n+            || end <= begin || end > this.getNameCount()) {\n+            throw new IllegalArgumentException(String.format(\"Values of begin: %d and end: %d are invalid\",\n+                begin, end));\n+        }\n+\n+        Iterable<String> subnames = Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .skip(begin)\n+            .take(end - begin)\n+            .toIterable();\n+\n+        return this.parentFileSystem.getPath(String.join(this.parentFileSystem.getSeparator(), subnames));\n     }\n \n     /**\n+     * In this implementation, a root component starts with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwOTc0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371509740", "bodyText": "What about a path with \"..\"? In other words, should we normalize first?", "author": "rickle-msft", "createdAt": "2020-01-27T22:07:07Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,162 +120,325 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getParent() {\n-        return null;\n+        /*\n+        If this path only has one element, there is no parent. Note the root is included in the parent, so we don't\n+        use getNameCount here.\n+         */\n+        if (this.splitToElements().length == 1) {\n+            return null;\n+        }\n+\n+        return this.parentFileSystem.getPath(\n+            this.pathString.substring(0, this.pathString.lastIndexOf(this.parentFileSystem.getSeparator())));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getNameCount() {\n-        return 0;\n+        return this.splitToElements(this.withoutRoot()).length;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getName(int i) {\n-        return null;\n+        if (i < 0 || i >= this.getNameCount()) {\n+            throw new IllegalArgumentException();\n+        }\n+        return this.parentFileSystem.getPath(this.splitToElements(this.withoutRoot())[i]);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Path subpath(int i, int i1) {\n-        return null;\n+    public Path subpath(int begin, int end) {\n+        if (begin < 0 || begin >= this.getNameCount()\n+            || end <= begin || end > this.getNameCount()) {\n+            throw new IllegalArgumentException(String.format(\"Values of begin: %d and end: %d are invalid\",\n+                begin, end));\n+        }\n+\n+        Iterable<String> subnames = Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .skip(begin)\n+            .take(end - begin)\n+            .toIterable();\n+\n+        return this.parentFileSystem.getPath(String.join(this.parentFileSystem.getSeparator(), subnames));\n     }\n \n     /**\n+     * In this implementation, a root component starts with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).splitToElements();\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < otherPathElements.length; i++) {\n+            if (!otherPathElements[i].equals(thisPathElements[i])) {", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMTMxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372021319", "bodyText": "I think it makes sense to normalize before comparing", "author": "gapra-msft", "createdAt": "2020-01-28T19:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwOTc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNzUzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372027533", "bodyText": "It looks like the default system (which I'm generally trying to follow) doesn't normalize and will return false for \"foo/bar\" starts with \"foo/.\", so I'll leave this as is.", "author": "rickle-msft", "createdAt": "2020-01-28T20:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwOTc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxMDM2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371510365", "bodyText": "Can remove the todo as the root validity check is gone.", "author": "rickle-msft", "createdAt": "2020-01-27T22:08:35Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,162 +120,325 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getParent() {\n-        return null;\n+        /*\n+        If this path only has one element, there is no parent. Note the root is included in the parent, so we don't\n+        use getNameCount here.\n+         */\n+        if (this.splitToElements().length == 1) {\n+            return null;\n+        }\n+\n+        return this.parentFileSystem.getPath(\n+            this.pathString.substring(0, this.pathString.lastIndexOf(this.parentFileSystem.getSeparator())));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getNameCount() {\n-        return 0;\n+        return this.splitToElements(this.withoutRoot()).length;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getName(int i) {\n-        return null;\n+        if (i < 0 || i >= this.getNameCount()) {\n+            throw new IllegalArgumentException();\n+        }\n+        return this.parentFileSystem.getPath(this.splitToElements(this.withoutRoot())[i]);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Path subpath(int i, int i1) {\n-        return null;\n+    public Path subpath(int begin, int end) {\n+        if (begin < 0 || begin >= this.getNameCount()\n+            || end <= begin || end > this.getNameCount()) {\n+            throw new IllegalArgumentException(String.format(\"Values of begin: %d and end: %d are invalid\",\n+                begin, end));\n+        }\n+\n+        Iterable<String> subnames = Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .skip(begin)\n+            .take(end - begin)\n+            .toIterable();\n+\n+        return this.parentFileSystem.getPath(String.join(this.parentFileSystem.getSeparator(), subnames));\n     }\n \n     /**\n+     * In this implementation, a root component starts with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).splitToElements();\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < otherPathElements.length; i++) {\n+            if (!otherPathElements[i].equals(thisPathElements[i])) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(String s) {\n-        return false;\n+        return this.startsWith(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * In this implementation, a root component ends with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean endsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).pathString.split(this.parentFileSystem.getSeparator());\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        // If the given path has a root component, the paths must be equal.\n+        if (path.getRoot() != null && otherPathElements.length != thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 1; i <= otherPathElements.length; i++) {\n+            if (!otherPathElements[otherPathElements.length - i]\n+                .equals(thisPathElements[thisPathElements.length - i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean endsWith(String s) {\n-        return false;\n+        return this.endsWith(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * This file system follows the standard practice mentioned in the original docs.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path normalize() {\n-        return null;\n+        Deque<String> stack = new ArrayDeque<>();\n+        String[] pathElements = this.splitToElements();\n+        Path root = this.getRoot(); // Refactor so this doesn't access the fs per docs", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxMTkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371511906", "bodyText": "Add a comment here to explain that this is the special case where we split after removing the root of a path that is just the root.", "author": "rickle-msft", "createdAt": "2020-01-27T22:12:24Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -226,14 +451,89 @@ public WatchKey register(WatchService watchService, WatchEvent.Kind<?>... kinds)\n      */\n     @Override\n     public Iterator<Path> iterator() {\n-        return null;\n+        return Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .map(s -> this.parentFileSystem.getPath(s))\n+            .toIterable()\n+            .iterator();\n     }\n \n     /**\n+     * This result of this method is identical to a string comparison on the underlying path strings.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public int compareTo(Path path) {\n-        return 0;\n+        if (!(path instanceof AzurePath)) {\n+            throw Utility.logError(logger, new ClassCastException(\"Other path is not an instance of AzurePath.\"));\n+        }\n+\n+        return this.pathString.compareTo(((AzurePath) path).pathString);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String toString() {\n+        return this.pathString;\n+    }\n+\n+    /**\n+     * A path is considered equal to another path if it is associated with the same file system instance and if the\n+     * path strings are equivalent.\n+     *\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        AzurePath paths = (AzurePath) o;\n+        return Objects.equals(parentFileSystem, paths.parentFileSystem)\n+            && Objects.equals(pathString, paths.pathString);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(parentFileSystem, pathString);\n+    }\n+\n+    // Used to ensure we only try to access containers that are mounted.\n+    boolean validRoot(String fileStoreName) {\n+        Boolean validRootName = Flux.fromIterable(parentFileSystem.getFileStores())\n+            .map(FileStore::name)\n+            .hasElement(fileStoreName)\n+            .block();\n+        return validRootName != null && validRootName;\n+    }\n+\n+    private String withoutRoot() {\n+        Path root = this.getRoot();\n+        String str = this.pathString;\n+        if (root != null) {\n+            str = this.pathString.substring(root.toString().length());\n+        }\n+        if (str.startsWith(this.parentFileSystem.getSeparator())) {\n+            str = str.substring(1);\n+        }\n+\n+        return str;\n+    }\n+\n+    private String[] splitToElements() {\n+        return this.splitToElements(this.pathString);\n+    }\n+\n+    private String[] splitToElements(String str) {\n+        String[] arr = str.split(this.parentFileSystem.getSeparator());\n+        if (arr.length == 1 && arr[0].isEmpty()) {", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMzQ5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371533499", "bodyText": "is there a reason for the ? or am I misreading this sentence.", "author": "gapra-msft", "createdAt": "2020-01-27T23:09:06Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystem.java", "diffHunk": "@@ -215,6 +215,9 @@ public String getSeparator() {\n     }\n \n     /**\n+     * ':' is only allowed in the root component. Root component will be validated against the list of\n+     * file shares?", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjU1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371536559", "bodyText": "Could this be made into more of a bulleted list, kind of like\nAn error will only be thrown for\n\nan invalid root when trying to access a file in that root if it does not exist\na nonexistent path when trying to access the resource at that location if it does not exist or is inaccessible", "author": "gapra-msft", "createdAt": "2020-01-27T23:17:44Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -3,30 +3,81 @@\n \n package com.azure.storage.blob.nio;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.nio.implementation.util.Utility;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileSystem;\n+import java.nio.file.InvalidPathException;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n+ * The root component, if it is present, is the first element of the path and is denoted by a {@code ':'} as the last\n+ * character. Hence, only one instance of {@code ':'} may appear in a path string and it may only be the last character\n+ * of the first element in the path. The root component is used to identify which container a path belongs to.\n+ * <p>\n+ * Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNzQ2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371537464", "bodyText": "can the name of the strings and s variable be more descriptive? are they paths?", "author": "gapra-msft", "createdAt": "2020-01-27T23:20:34Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -3,30 +3,81 @@\n \n package com.azure.storage.blob.nio;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.nio.implementation.util.Utility;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileSystem;\n+import java.nio.file.InvalidPathException;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n+ * The root component, if it is present, is the first element of the path and is denoted by a {@code ':'} as the last\n+ * character. Hence, only one instance of {@code ':'} may appear in a path string and it may only be the last character\n+ * of the first element in the path. The root component is used to identify which container a path belongs to.\n+ * <p>\n+ * Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will\n+ * only be thrown for an invalid root when trying to access a file in that root if it does not exist and for an\n+ * nonexistent path when trying to access the resource at that location if it does not exist or is inaccessible.\n+ * <p>\n+ * Path names are case sensitive.\n+ * <p>\n+ * If a resource is accessed via a relative path, it will be resolved against the default directory of the file system.\n+ * The default directory is as defined in the {@link AzureFileSystem} docs.\n+ * <p>\n+ * Leading and trailing separators will be stripped. This has the effect of making \"foo/\" and \"foo\" equivalent paths.\n+ *\n  * {@inheritDoc}\n  */\n public final class AzurePath implements Path {\n+    private final ClientLogger logger = new ClientLogger(AzurePath.class);\n+    private static final String ROOT_DIR_SUFFIX = \":\";\n+\n     private final AzureFileSystem parentFileSystem;\n     private final String pathString;\n \n     AzurePath(AzureFileSystem parentFileSystem, String s, String... strings) {", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MDY3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r371540678", "bodyText": "Add Unsupported in javadoc", "author": "gapra-msft", "createdAt": "2020-01-27T23:30:21Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,162 +120,325 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getParent() {\n-        return null;\n+        /*\n+        If this path only has one element, there is no parent. Note the root is included in the parent, so we don't\n+        use getNameCount here.\n+         */\n+        if (this.splitToElements().length == 1) {\n+            return null;\n+        }\n+\n+        return this.parentFileSystem.getPath(\n+            this.pathString.substring(0, this.pathString.lastIndexOf(this.parentFileSystem.getSeparator())));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getNameCount() {\n-        return 0;\n+        return this.splitToElements(this.withoutRoot()).length;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getName(int i) {\n-        return null;\n+        if (i < 0 || i >= this.getNameCount()) {\n+            throw new IllegalArgumentException();\n+        }\n+        return this.parentFileSystem.getPath(this.splitToElements(this.withoutRoot())[i]);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Path subpath(int i, int i1) {\n-        return null;\n+    public Path subpath(int begin, int end) {\n+        if (begin < 0 || begin >= this.getNameCount()\n+            || end <= begin || end > this.getNameCount()) {\n+            throw new IllegalArgumentException(String.format(\"Values of begin: %d and end: %d are invalid\",\n+                begin, end));\n+        }\n+\n+        Iterable<String> subnames = Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .skip(begin)\n+            .take(end - begin)\n+            .toIterable();\n+\n+        return this.parentFileSystem.getPath(String.join(this.parentFileSystem.getSeparator(), subnames));\n     }\n \n     /**\n+     * In this implementation, a root component starts with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).splitToElements();\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < otherPathElements.length; i++) {\n+            if (!otherPathElements[i].equals(thisPathElements[i])) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(String s) {\n-        return false;\n+        return this.startsWith(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * In this implementation, a root component ends with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean endsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).pathString.split(this.parentFileSystem.getSeparator());\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        // If the given path has a root component, the paths must be equal.\n+        if (path.getRoot() != null && otherPathElements.length != thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 1; i <= otherPathElements.length; i++) {\n+            if (!otherPathElements[otherPathElements.length - i]\n+                .equals(thisPathElements[thisPathElements.length - i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean endsWith(String s) {\n-        return false;\n+        return this.endsWith(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * This file system follows the standard practice mentioned in the original docs.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path normalize() {\n-        return null;\n+        Deque<String> stack = new ArrayDeque<>();\n+        String[] pathElements = this.splitToElements();\n+        Path root = this.getRoot(); // Refactor so this doesn't access the fs per docs\n+        String rootStr = root == null ? null : root.toString();\n+        for (String element : pathElements) {\n+            if (element.equals(\".\")) {\n+                continue;\n+            } else if (element.equals(\"..\")) {\n+                if (rootStr != null) {\n+                    // Root path. We never push \"..\".\n+                    if (!stack.isEmpty() && stack.peekLast().equals(rootStr)) {\n+                        // Cannot go higher than root. Ignore.\n+                        continue;\n+                    } else {\n+                        stack.removeLast();\n+                    }\n+                } else {\n+                    // Relative paths can have an arbitrary number of \"..\" at the beginning.\n+                    if (stack.isEmpty()) {\n+                        stack.addLast(element);\n+                    } else if (stack.peek().equals(\"..\")) {\n+                        stack.addLast(element);\n+                    } else {\n+                        stack.removeLast();\n+                    }\n+                }\n+            } else {\n+                stack.addLast(element);\n+            }\n+        }\n+\n+        return this.parentFileSystem.getPath(\"\", Arrays.copyOf(stack.toArray(), stack.size(), String[].class));\n     }\n \n     /**\n+     * If the other path has a root component, it is considered absolute, and it is returned.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolve(Path path) {\n-        return null;\n+        if (path.isAbsolute()) {\n+            return path;\n+        }\n+        if (path.getNameCount() == 0) {\n+            return this;\n+        }\n+        return this.parentFileSystem.getPath(this.toString(), path.toString());\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolve(String s) {\n-        return null;\n+        return this.resolve(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolveSibling(Path path) {\n-        return null;\n+        if (path.isAbsolute()) {\n+            return path;\n+        }\n+\n+        Path parent = this.getParent();\n+        return parent == null ? path : parent.resolve(path);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolveSibling(String s) {\n-        return null;\n+        return this.resolveSibling(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * If both paths have a root component, it is still to relativize one against the other.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path relativize(Path path) {\n-        return null;\n+        if (path.getRoot() == null ^ this.getRoot() == null) {\n+            throw Utility.logError(logger,\n+                new IllegalArgumentException(\"Both paths must be absolute or neither can be\"));\n+        }\n+\n+        AzurePath thisNormalized = (AzurePath) this.normalize();\n+        Path otherNormalized = path.normalize();\n+\n+        Deque<String> deque = new ArrayDeque<>(\n+            Arrays.asList(otherNormalized.toString().split(this.parentFileSystem.getSeparator())));\n+\n+        int i = 0;\n+        String[] thisElements = thisNormalized.splitToElements();\n+        while (i < thisElements.length && !deque.isEmpty() && thisElements[i].equals(deque.peekFirst())) {\n+            deque.removeFirst();\n+            i++;\n+        }\n+        while (i < thisElements.length) {\n+            deque.addFirst(\"..\");\n+            i++;\n+        }\n+\n+        return this.parentFileSystem.getPath(\"\", Arrays.copyOf(deque.toArray(), deque.size(), String[].class));\n     }\n \n     /**\n+     * No authority component is defined for the {@code URI} returned by this method. This implementation offers the\n+     * same equivalence guarantee as the default provider.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public URI toUri() {\n-        return null;\n+        try {\n+            return new URI(this.parentFileSystem.provider().getScheme(), null, \"/\" + this.toAbsolutePath().toString(),\n+                null, null);\n+        } catch (URISyntaxException e) {\n+            throw Utility.logError(logger, new IllegalStateException(\"Unable to create valid URI from path\", e));\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path toAbsolutePath() {\n-        return null;\n+        if (this.isAbsolute()) {\n+            return this;\n+        }\n+        return this.parentFileSystem.getDefaultDirectory().resolve(this);\n     }\n \n     /**\n+     * Unsupported.\n+     * <p>\n      * {@inheritDoc}\n      */\n     @Override\n     public Path toRealPath(LinkOption... linkOptions) throws IOException {\n-        return null;\n+        throw new UnsupportedOperationException();\n     }\n \n     /**", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f848159fd983542bfb4c5ce2ca176ff813ef08f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f848159fd983542bfb4c5ce2ca176ff813ef08f8", "message": "PR feedback", "committedDate": "2020-01-28T21:23:24Z", "type": "commit"}, {"oid": "4f708f160b50e181c7bc9aedc39d7d878b1b0353", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f708f160b50e181c7bc9aedc39d7d878b1b0353", "message": "ci.yml update", "committedDate": "2020-01-28T21:26:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NTExMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372065110", "bodyText": "Does this need to be a Flux? Instead could we use a synchronous Stream? I'm always hesitant on blocking reactive streams as this may be used in a reactive stream which could cause an exception to be thrown.", "author": "alzimmermsft", "createdAt": "2020-01-28T21:23:00Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -3,30 +3,81 @@\n \n package com.azure.storage.blob.nio;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.nio.implementation.util.Utility;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileSystem;\n+import java.nio.file.InvalidPathException;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n+ * The root component, if it is present, is the first element of the path and is denoted by a {@code ':'} as the last\n+ * character. Hence, only one instance of {@code ':'} may appear in a path string and it may only be the last character\n+ * of the first element in the path. The root component is used to identify which container a path belongs to.\n+ * <p>\n+ * Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will\n+ * only be thrown for an invalid root when trying to access a file in that root if it does not exist and for an\n+ * nonexistent path when trying to access the resource at that location if it does not exist or is inaccessible.\n+ * <p>\n+ * Path names are case sensitive.\n+ * <p>\n+ * If a resource is accessed via a relative path, it will be resolved against the default directory of the file system.\n+ * The default directory is as defined in the {@link AzureFileSystem} docs.\n+ * <p>\n+ * Leading and trailing separators will be stripped. This has the effect of making \"foo/\" and \"foo\" equivalent paths.\n+ *\n  * {@inheritDoc}\n  */\n public final class AzurePath implements Path {\n+    private final ClientLogger logger = new ClientLogger(AzurePath.class);\n+    private static final String ROOT_DIR_SUFFIX = \":\";\n+\n     private final AzureFileSystem parentFileSystem;\n     private final String pathString;\n \n     AzurePath(AzureFileSystem parentFileSystem, String s, String... strings) {\n+        if (strings == null) {\n+            strings = new String[0]; // Just to make processing easier later. This wont affect the result.\n+        }\n         this.parentFileSystem = parentFileSystem;\n-        this.pathString = String.join(this.parentFileSystem.getSeparator(),\n-                Flux.just(s).concatWith(Flux.just(strings)).toIterable());\n+        Flux<String> elementFlux =", "originalCommit": "2e0df6409d325e71cee00f1b4690bc0c9634d779", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5Mzk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372093941", "bodyText": "Doesn't have to be a Flux. I can look into switching to a Stream. I'm just more familiar with Flux apis. That's a good point about possible usage in a reactive context.", "author": "rickle-msft", "createdAt": "2020-01-28T22:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDQyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372080428", "bodyText": "Could this be simplified to an iterative approach such as the following?\nList<String> elements = Arrays.asList(first.split(parentFileSystem.getSeparator()));\n\nfor (String next : more) {\n  elements.addAll(Arrays.asList(more.split(parentFileSystem.getSeparator())));\n}\n\nStream elementStream = elements.stream().filter(CoreUtils::isNullOrEmpty);", "author": "alzimmermsft", "createdAt": "2020-01-28T21:55:16Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -3,30 +3,80 @@\n \n package com.azure.storage.blob.nio;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.nio.implementation.util.Utility;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileSystem;\n+import java.nio.file.InvalidPathException;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n+ * The root component, if it is present, is the first element of the path and is denoted by a {@code ':'} as the last\n+ * character. Hence, only one instance of {@code ':'} may appear in a path string and it may only be the last character\n+ * of the first element in the path. The root component is used to identify which container a path belongs to.\n+ * <p>\n+ * Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will\n+ * not be thrown until trying to access an invalid resource, e.g. trying to access a resource that does not exist.\n+ * <p>\n+ * Path names are case sensitive.\n+ * <p>\n+ * If a resource is accessed via a relative path, it will be resolved against the default directory of the file system.\n+ * The default directory is as defined in the {@link AzureFileSystem} docs.\n+ * <p>\n+ * Leading and trailing separators will be stripped. This has the effect of making \"foo/\" and \"foo\" equivalent paths.\n+ *\n  * {@inheritDoc}\n  */\n public final class AzurePath implements Path {\n+    private final ClientLogger logger = new ClientLogger(AzurePath.class);\n+    private static final String ROOT_DIR_SUFFIX = \":\";\n+\n     private final AzureFileSystem parentFileSystem;\n     private final String pathString;\n \n-    AzurePath(AzureFileSystem parentFileSystem, String s, String... strings) {\n+    AzurePath(AzureFileSystem parentFileSystem, String first, String... more) {\n+        if (more == null) {\n+            more = new String[0]; // Just to make processing easier later. This wont affect the result.\n+        }\n         this.parentFileSystem = parentFileSystem;\n-        this.pathString = String.join(this.parentFileSystem.getSeparator(),\n-                Flux.just(s).concatWith(Flux.just(strings)).toIterable());\n+        Flux<String> elementFlux =\n+            // Strip any trailing, leading, or internal delimiters so there are no duplicates when we join.\n+            Flux.fromArray(first.split(this.parentFileSystem.getSeparator()))\n+                .concatWith(Flux.fromArray(more)\n+                    .flatMap(str -> Flux.fromArray(str.split(this.parentFileSystem.getSeparator()))))\n+                .filter(str -> !str.isEmpty());", "originalCommit": "4f708f160b50e181c7bc9aedc39d7d878b1b0353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NjE1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372096155", "bodyText": "I'll switch over this implementation.", "author": "rickle-msft", "createdAt": "2020-01-28T22:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MjM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372082381", "bodyText": "I'm a bit confused on the logic happening here. Is this validating that other than the first element in the stream none may match ROOT_DIR_SUFFIX, then validate that the first element contains ROOT_DIR_SUFFIX and it's last character is that value?\nBased on my other suggestion of using a list instead of a reactive stream would that make this validation much simpler? Would need to access the last element and first element only.", "author": "alzimmermsft", "createdAt": "2020-01-28T21:59:21Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -3,30 +3,80 @@\n \n package com.azure.storage.blob.nio;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.nio.implementation.util.Utility;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileSystem;\n+import java.nio.file.InvalidPathException;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n+ * The root component, if it is present, is the first element of the path and is denoted by a {@code ':'} as the last\n+ * character. Hence, only one instance of {@code ':'} may appear in a path string and it may only be the last character\n+ * of the first element in the path. The root component is used to identify which container a path belongs to.\n+ * <p>\n+ * Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will\n+ * not be thrown until trying to access an invalid resource, e.g. trying to access a resource that does not exist.\n+ * <p>\n+ * Path names are case sensitive.\n+ * <p>\n+ * If a resource is accessed via a relative path, it will be resolved against the default directory of the file system.\n+ * The default directory is as defined in the {@link AzureFileSystem} docs.\n+ * <p>\n+ * Leading and trailing separators will be stripped. This has the effect of making \"foo/\" and \"foo\" equivalent paths.\n+ *\n  * {@inheritDoc}\n  */\n public final class AzurePath implements Path {\n+    private final ClientLogger logger = new ClientLogger(AzurePath.class);\n+    private static final String ROOT_DIR_SUFFIX = \":\";\n+\n     private final AzureFileSystem parentFileSystem;\n     private final String pathString;\n \n-    AzurePath(AzureFileSystem parentFileSystem, String s, String... strings) {\n+    AzurePath(AzureFileSystem parentFileSystem, String first, String... more) {\n+        if (more == null) {\n+            more = new String[0]; // Just to make processing easier later. This wont affect the result.\n+        }\n         this.parentFileSystem = parentFileSystem;\n-        this.pathString = String.join(this.parentFileSystem.getSeparator(),\n-                Flux.just(s).concatWith(Flux.just(strings)).toIterable());\n+        Flux<String> elementFlux =\n+            // Strip any trailing, leading, or internal delimiters so there are no duplicates when we join.\n+            Flux.fromArray(first.split(this.parentFileSystem.getSeparator()))\n+                .concatWith(Flux.fromArray(more)\n+                    .flatMap(str -> Flux.fromArray(str.split(this.parentFileSystem.getSeparator()))))\n+                .filter(str -> !str.isEmpty());\n+\n+        this.pathString = String.join(this.parentFileSystem.getSeparator(), elementFlux.toIterable());\n+\n+        // No element but the first may contain \":\"\n+        elementFlux.skip(1)\n+            .flatMap(str -> str.contains(ROOT_DIR_SUFFIX)\n+                ? Mono.error(Utility.logError(logger, new InvalidPathException(this.pathString, ROOT_DIR_SUFFIX\n+                + \" is an invalid character except to identify the root element of this path if there is one.\")))\n+            : Mono.just(str)).blockLast();\n+\n+        // There may only be at most one instance of \":\" in the root component, and it must be the last character.\n+        elementFlux.take(1)\n+            .flatMap(str -> str.contains(ROOT_DIR_SUFFIX) && str.indexOf(ROOT_DIR_SUFFIX) < str.length() - 1\n+            ? Mono.error(Utility.logError(logger, new InvalidPathException(this.pathString, ROOT_DIR_SUFFIX + \" may\"\n+                + \" only be used as the last character in the root component of a path\")))\n+            : Mono.just(str)).blockLast();", "originalCommit": "4f708f160b50e181c7bc9aedc39d7d878b1b0353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5Nzk4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372097980", "bodyText": "Basically I'm mimicking what windows does with its drives/root directories--using : to double as the name of the root directory. The ':' helps identify that an element is meant to be the root instead of just any old path element. The offshoot as that ':' can only appear in the first element, otherwise it loses its value in distinguishing the root. If it does appear in the first element, it can only appear as the last character in that element. Does that answer your question? The FileSystem.getPath() test cases may also help clarify this. I can clean up the inline docs, too, if you think that would help clarify the logic", "author": "rickle-msft", "createdAt": "2020-01-28T22:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MjM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MjUzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372082538", "bodyText": "What happens here if there is only a single element in the reactive stream?", "author": "alzimmermsft", "createdAt": "2020-01-28T21:59:41Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -3,30 +3,80 @@\n \n package com.azure.storage.blob.nio;\n \n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.nio.implementation.util.Utility;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileStore;\n import java.nio.file.FileSystem;\n+import java.nio.file.InvalidPathException;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n+ * The root component, if it is present, is the first element of the path and is denoted by a {@code ':'} as the last\n+ * character. Hence, only one instance of {@code ':'} may appear in a path string and it may only be the last character\n+ * of the first element in the path. The root component is used to identify which container a path belongs to.\n+ * <p>\n+ * Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will\n+ * not be thrown until trying to access an invalid resource, e.g. trying to access a resource that does not exist.\n+ * <p>\n+ * Path names are case sensitive.\n+ * <p>\n+ * If a resource is accessed via a relative path, it will be resolved against the default directory of the file system.\n+ * The default directory is as defined in the {@link AzureFileSystem} docs.\n+ * <p>\n+ * Leading and trailing separators will be stripped. This has the effect of making \"foo/\" and \"foo\" equivalent paths.\n+ *\n  * {@inheritDoc}\n  */\n public final class AzurePath implements Path {\n+    private final ClientLogger logger = new ClientLogger(AzurePath.class);\n+    private static final String ROOT_DIR_SUFFIX = \":\";\n+\n     private final AzureFileSystem parentFileSystem;\n     private final String pathString;\n \n-    AzurePath(AzureFileSystem parentFileSystem, String s, String... strings) {\n+    AzurePath(AzureFileSystem parentFileSystem, String first, String... more) {\n+        if (more == null) {\n+            more = new String[0]; // Just to make processing easier later. This wont affect the result.\n+        }\n         this.parentFileSystem = parentFileSystem;\n-        this.pathString = String.join(this.parentFileSystem.getSeparator(),\n-                Flux.just(s).concatWith(Flux.just(strings)).toIterable());\n+        Flux<String> elementFlux =\n+            // Strip any trailing, leading, or internal delimiters so there are no duplicates when we join.\n+            Flux.fromArray(first.split(this.parentFileSystem.getSeparator()))\n+                .concatWith(Flux.fromArray(more)\n+                    .flatMap(str -> Flux.fromArray(str.split(this.parentFileSystem.getSeparator()))))\n+                .filter(str -> !str.isEmpty());\n+\n+        this.pathString = String.join(this.parentFileSystem.getSeparator(), elementFlux.toIterable());\n+\n+        // No element but the first may contain \":\"\n+        elementFlux.skip(1)", "originalCommit": "4f708f160b50e181c7bc9aedc39d7d878b1b0353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTc3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372095770", "bodyText": "I do have tests that cover creating a path with only one element, just a root component, and the root component plus one name element. None of them have any problems, so I'm guessing the Flux just completes if it skips 1 and there's only one element.", "author": "rickle-msft", "createdAt": "2020-01-28T22:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MjUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MzE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372083144", "bodyText": "Any reason to use a reactive stream here only to block it? Instead could a Stream be used? Another option, based on the logic here, we could have a local instance of the String[] and just access and return the last element in the list.", "author": "alzimmermsft", "createdAt": "2020-01-28T22:01:03Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,182 +119,422 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());", "originalCommit": "4f708f160b50e181c7bc9aedc39d7d878b1b0353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDIxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372094216", "bodyText": "I think I addressed the Stream concern above and the String[] concern below :)", "author": "rickle-msft", "createdAt": "2020-01-28T22:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MzE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDM5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372084390", "bodyText": "Given there is numerous calls to this method should the split pathString be stored as a field on the instance?", "author": "alzimmermsft", "createdAt": "2020-01-28T22:03:56Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzurePath.java", "diffHunk": "@@ -58,182 +119,422 @@ public Path getRoot() {\n      */\n     @Override\n     public Path getFileName() {\n-        return null;\n+        if (this.withoutRoot().isEmpty()) {\n+            return null;\n+        } else {\n+            return this.parentFileSystem.getPath(Flux.fromArray(this.splitToElements()).last().block());\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getParent() {\n-        return null;\n+        /*\n+        If this path only has one element, there is no parent. Note the root is included in the parent, so we don't\n+        use getNameCount here.\n+         */\n+        if (this.splitToElements().length == 1) {\n+            return null;\n+        }\n+\n+        return this.parentFileSystem.getPath(\n+            this.pathString.substring(0, this.pathString.lastIndexOf(this.parentFileSystem.getSeparator())));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public int getNameCount() {\n-        return 0;\n+        return this.splitToElements(this.withoutRoot()).length;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path getName(int i) {\n-        return null;\n+        if (i < 0 || i >= this.getNameCount()) {\n+            throw Utility.logError(logger, new IllegalArgumentException(String.format(\"Index %d is out of bounds\", i)));\n+        }\n+        return this.parentFileSystem.getPath(this.splitToElements(this.withoutRoot())[i]);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Path subpath(int i, int i1) {\n-        return null;\n+    public Path subpath(int begin, int end) {\n+        if (begin < 0 || begin >= this.getNameCount()\n+            || end <= begin || end > this.getNameCount()) {\n+            throw Utility.logError(logger,\n+                new IllegalArgumentException(String.format(\"Values of begin: %d and end: %d are invalid\", begin, end)));\n+        }\n+\n+        Iterable<String> subnames = Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .skip(begin)\n+            .take(end - begin)\n+            .toIterable();\n+\n+        return this.parentFileSystem.getPath(String.join(this.parentFileSystem.getSeparator(), subnames));\n     }\n \n     /**\n+     * In this implementation, a root component starts with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(Path path) {\n-        return false;\n+        if (!path.getFileSystem().equals(this.parentFileSystem)) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).splitToElements();\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 0; i < otherPathElements.length; i++) {\n+            if (!otherPathElements[i].equals(thisPathElements[i])) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean startsWith(String s) {\n-        return false;\n+        return this.startsWith(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * In this implementation, a root component ends with another root component if the two root components are\n+     * equivalent strings. In other words, if the files are stored in the same container.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean endsWith(Path path) {\n-        return false;\n+        /*\n+        There can only be one instance of a file system with a given id, so comparing object identity is equivalent\n+        to checking ids here.\n+         */\n+        if (path.getFileSystem() != this.parentFileSystem) {\n+            return false;\n+        }\n+\n+        String[] thisPathElements = this.splitToElements();\n+        String[] otherPathElements = ((AzurePath) path).pathString.split(this.parentFileSystem.getSeparator());\n+        if (otherPathElements.length > thisPathElements.length) {\n+            return false;\n+        }\n+        // If the given path has a root component, the paths must be equal.\n+        if (path.getRoot() != null && otherPathElements.length != thisPathElements.length) {\n+            return false;\n+        }\n+        for (int i = 1; i <= otherPathElements.length; i++) {\n+            if (!otherPathElements[otherPathElements.length - i]\n+                .equals(thisPathElements[thisPathElements.length - i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public boolean endsWith(String s) {\n-        return false;\n+        return this.endsWith(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * This file system follows the standard practice mentioned in the original docs.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path normalize() {\n-        return null;\n+        Deque<String> stack = new ArrayDeque<>();\n+        String[] pathElements = this.splitToElements();\n+        Path root = this.getRoot();\n+        String rootStr = root == null ? null : root.toString();\n+        for (String element : pathElements) {\n+            if (element.equals(\".\")) {\n+                continue;\n+            } else if (element.equals(\"..\")) {\n+                if (rootStr != null) {\n+                    // Root path. We never push \"..\".\n+                    if (!stack.isEmpty() && stack.peekLast().equals(rootStr)) {\n+                        // Cannot go higher than root. Ignore.\n+                        continue;\n+                    } else {\n+                        stack.removeLast();\n+                    }\n+                } else {\n+                    // Relative paths can have an arbitrary number of \"..\" at the beginning.\n+                    if (stack.isEmpty()) {\n+                        stack.addLast(element);\n+                    } else if (stack.peek().equals(\"..\")) {\n+                        stack.addLast(element);\n+                    } else {\n+                        stack.removeLast();\n+                    }\n+                }\n+            } else {\n+                stack.addLast(element);\n+            }\n+        }\n+\n+        return this.parentFileSystem.getPath(\"\", Arrays.copyOf(stack.toArray(), stack.size(), String[].class));\n     }\n \n     /**\n+     * If the other path has a root component, it is considered absolute, and it is returned.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolve(Path path) {\n-        return null;\n+        if (path.isAbsolute()) {\n+            return path;\n+        }\n+        if (path.getNameCount() == 0) {\n+            return this;\n+        }\n+        return this.parentFileSystem.getPath(this.toString(), path.toString());\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolve(String s) {\n-        return null;\n+        return this.resolve(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolveSibling(Path path) {\n-        return null;\n+        if (path.isAbsolute()) {\n+            return path;\n+        }\n+\n+        Path parent = this.getParent();\n+        return parent == null ? path : parent.resolve(path);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path resolveSibling(String s) {\n-        return null;\n+        return this.resolveSibling(this.parentFileSystem.getPath(s));\n     }\n \n     /**\n+     * If both paths have a root component, it is still to relativize one against the other.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public Path relativize(Path path) {\n-        return null;\n+        if (path.getRoot() == null ^ this.getRoot() == null) {\n+            throw Utility.logError(logger,\n+                new IllegalArgumentException(\"Both paths must be absolute or neither can be\"));\n+        }\n+\n+        AzurePath thisNormalized = (AzurePath) this.normalize();\n+        Path otherNormalized = path.normalize();\n+\n+        Deque<String> deque = new ArrayDeque<>(\n+            Arrays.asList(otherNormalized.toString().split(this.parentFileSystem.getSeparator())));\n+\n+        int i = 0;\n+        String[] thisElements = thisNormalized.splitToElements();\n+        while (i < thisElements.length && !deque.isEmpty() && thisElements[i].equals(deque.peekFirst())) {\n+            deque.removeFirst();\n+            i++;\n+        }\n+        while (i < thisElements.length) {\n+            deque.addFirst(\"..\");\n+            i++;\n+        }\n+\n+        return this.parentFileSystem.getPath(\"\", Arrays.copyOf(deque.toArray(), deque.size(), String[].class));\n     }\n \n     /**\n+     * No authority component is defined for the {@code URI} returned by this method. This implementation offers the\n+     * same equivalence guarantee as the default provider.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public URI toUri() {\n-        return null;\n+        try {\n+            return new URI(this.parentFileSystem.provider().getScheme(), null, \"/\" + this.toAbsolutePath().toString(),\n+                null, null);\n+        } catch (URISyntaxException e) {\n+            throw Utility.logError(logger, new IllegalStateException(\"Unable to create valid URI from path\", e));\n+        }\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Path toAbsolutePath() {\n-        return null;\n+        if (this.isAbsolute()) {\n+            return this;\n+        }\n+        return this.parentFileSystem.getDefaultDirectory().resolve(this);\n     }\n \n     /**\n+     * Unsupported.\n+     * <p>\n      * {@inheritDoc}\n      */\n     @Override\n     public Path toRealPath(LinkOption... linkOptions) throws IOException {\n-        return null;\n+        throw new UnsupportedOperationException(\"Symbolic links are not supported.\");\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public File toFile() {\n-        return null;\n+        throw new UnsupportedOperationException();\n     }\n \n     /**\n+     * Unsupported.\n+     * <p>\n      * {@inheritDoc}\n      */\n     @Override\n-    public WatchKey register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier... modifiers) throws IOException {\n-        throw new UnsupportedOperationException();\n+    public WatchKey register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier... modifiers)\n+        throws IOException {\n+        throw new UnsupportedOperationException(\"WatchEvents are not supported.\");\n     }\n \n     /**\n+     * Unsupported.\n+     * <p>\n      * {@inheritDoc}\n      */\n     @Override\n     public WatchKey register(WatchService watchService, WatchEvent.Kind<?>... kinds) throws IOException {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(\"WatchEvents are not supported.\");\n     }\n \n     /**\n+     * Unsupported\n+     * <p>\n      * {@inheritDoc}\n      */\n     @Override\n     public Iterator<Path> iterator() {\n-        return null;\n+        return Flux.fromArray(this.splitToElements(this.withoutRoot()))\n+            .map(s -> this.parentFileSystem.getPath(s))\n+            .toIterable()\n+            .iterator();\n     }\n \n     /**\n+     * This result of this method is identical to a string comparison on the underlying path strings.\n+     *\n      * {@inheritDoc}\n      */\n     @Override\n     public int compareTo(Path path) {\n-        return 0;\n+        if (!(path instanceof AzurePath)) {\n+            throw Utility.logError(logger, new ClassCastException(\"Other path is not an instance of AzurePath.\"));\n+        }\n+\n+        return this.pathString.compareTo(((AzurePath) path).pathString);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public String toString() {\n+        return this.pathString;\n+    }\n+\n+    /**\n+     * A path is considered equal to another path if it is associated with the same file system instance and if the\n+     * path strings are equivalent.\n+     *\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        AzurePath paths = (AzurePath) o;\n+        return Objects.equals(parentFileSystem, paths.parentFileSystem)\n+            && Objects.equals(pathString, paths.pathString);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(parentFileSystem, pathString);\n+    }\n+\n+    // Used to ensure we only try to access containers that are mounted.\n+    boolean validRoot(String fileStoreName) {\n+        Boolean validRootName = Flux.fromIterable(parentFileSystem.getFileStores())\n+            .map(FileStore::name)\n+            .hasElement(fileStoreName)\n+            .block();\n+        return validRootName != null && validRootName;\n+    }\n+\n+    private String withoutRoot() {\n+        Path root = this.getRoot();\n+        String str = this.pathString;\n+        if (root != null) {\n+            str = this.pathString.substring(root.toString().length());\n+        }\n+        if (str.startsWith(this.parentFileSystem.getSeparator())) {\n+            str = str.substring(1);\n+        }\n+\n+        return str;\n+    }\n+\n+    private String[] splitToElements() {\n+        return this.splitToElements(this.pathString);", "originalCommit": "4f708f160b50e181c7bc9aedc39d7d878b1b0353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MzU5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372093596", "bodyText": "I was wondering that as I wrote it. The consequence is that these objects basically double their memory usage, right? Since we would then store the pathString as one object and then all of its components again separately. I didn't feel like I had enough knowledge of customer scenarios to know if they were cpu or memory bound, so I was going to defer that decision until we hear one way or the other from customers unless you feel strongly about it. Does that make sense?", "author": "rickle-msft", "createdAt": "2020-01-28T22:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNjA4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7749#discussion_r372116084", "bodyText": "That makes sense to me", "author": "alzimmermsft", "createdAt": "2020-01-28T23:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NDM5MA=="}], "type": "inlineReview"}, {"oid": "64a4e9412eee015ce19efce69d67e56ef66bb852", "url": "https://github.com/Azure/azure-sdk-for-java/commit/64a4e9412eee015ce19efce69d67e56ef66bb852", "message": "PR feedback", "committedDate": "2020-01-28T23:18:42Z", "type": "commit"}, {"oid": "bee4e9483eddaf56d7345ce3918b5385c9b68875", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bee4e9483eddaf56d7345ce3918b5385c9b68875", "message": "Fixed some ci errors", "committedDate": "2020-01-28T23:48:19Z", "type": "commit"}]}