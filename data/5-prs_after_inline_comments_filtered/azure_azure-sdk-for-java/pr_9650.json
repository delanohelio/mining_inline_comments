{"pr_number": 9650, "pr_title": "Add Tests to Azure Core HTTP Response Decoder Classes", "pr_createdAt": "2020-03-27T20:53:46Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9650", "timeline": [{"oid": "bbea3da97fe6479f5c68d5d723e971d7d182a13a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bbea3da97fe6479f5c68d5d723e971d7d182a13a", "message": "Initial tests for HttpResponseBodyDecoder", "committedDate": "2020-03-26T18:45:36Z", "type": "commit"}, {"oid": "33506f5780a10c83839b9480c30c9099095f5de2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/33506f5780a10c83839b9480c30c9099095f5de2", "message": "Merge branch 'master' into AzCore_HttpResponseBodyDecoderTests", "committedDate": "2020-03-26T22:02:43Z", "type": "commit"}, {"oid": "6cefd91c10ff3ec11c30825e94bebe67e2b596bc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cefd91c10ff3ec11c30825e94bebe67e2b596bc", "message": "Removed code paths that shouldn't be reached, fixed serialization for UnixTime, finished adding tests", "committedDate": "2020-03-27T20:11:05Z", "type": "commit"}, {"oid": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ea793f19baf2449307ae6fae2d27f61a2555fa3", "message": "Added tests for HttpResponseHeaderDecoder", "committedDate": "2020-03-27T20:41:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMzAxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9650#discussion_r399533017", "bodyText": "Should this be replaced with a deserializer module for Jackson?", "author": "alzimmermsft", "createdAt": "2020-03-27T20:55:03Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/UnixTime.java", "diffHunk": "@@ -35,21 +35,27 @@ public UnixTime(long unixSeconds) {\n         this.dateTime = OffsetDateTime.ofInstant(Instant.ofEpochSecond(unixSeconds), ZoneOffset.UTC);\n     }\n \n+    /**\n+     * Creates a UnixTime object with the specified epoch.\n+     *\n+     * @param epoch The epoch value represented as a string.\n+     */\n+    public UnixTime(String epoch) {", "originalCommit": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNDEyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9650#discussion_r399534120", "bodyText": "Should never get a result type from here, byte[] is treated as a non-decodeable type in isReturnTypeDecodable.", "author": "alzimmermsft", "createdAt": "2020-03-27T20:57:41Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseBodyDecoder.java", "diffHunk": "@@ -185,60 +162,48 @@ private static Object deserializeBody(String value, Type resultType, Type wireTy\n     }\n \n     /**\n-     * Given:\n-     * (1). the {@code java.lang.reflect.Type} (resultType) of java proxy method return value\n-     * (2). and {@link ReturnValueWireType} annotation value indicating 'entity type' (wireType)\n-     * of same REST API's wire response body\n+     * Given: (1). the {@code java.lang.reflect.Type} (resultType) of java proxy method return value (2). and {@link\n+     * ReturnValueWireType} annotation value indicating 'entity type' (wireType) of same REST API's wire response body\n      * this method construct 'response body Type'.\n      *\n-     * Note: When {@link ReturnValueWireType} annotation is applied to a proxy method, then the raw\n-     * HTTP response content will need to parsed using the derived 'response body Type' then converted\n-     * to actual {@code returnType}.\n+     * Note: When {@link ReturnValueWireType} annotation is applied to a proxy method, then the raw HTTP response\n+     * content will need to parsed using the derived 'response body Type' then converted to actual {@code returnType}.\n      *\n      * @param resultType the {@code java.lang.reflect.Type} of java proxy method return value\n      * @param wireType the {@code java.lang.reflect.Type} of entity in REST API response body\n      * @return the {@code java.lang.reflect.Type} of REST API response body\n      */\n     private static Type constructWireResponseType(Type resultType, Type wireType) {\n-        Objects.requireNonNull(resultType);\n         Objects.requireNonNull(wireType);\n-        //\n-        Type wireResponseType = resultType;\n \n-        if (resultType == byte[].class) {", "originalCommit": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNTMxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9650#discussion_r399535318", "bodyText": "Removed Response.class for a few reasons:\n\nI don't think Response would be a sensible resultType to get here since we unbox Response to its parameterized type in an earlier check, so this would need something like Response<Response<>>.\nThe typeArguments retrieval would fail most of the time here since Response<T> only has a single type argument in the interface class, only ResponseBase<H, T> or a custom type could have enough type arguments to work here.", "author": "alzimmermsft", "createdAt": "2020-03-27T21:00:22Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseBodyDecoder.java", "diffHunk": "@@ -185,60 +162,48 @@ private static Object deserializeBody(String value, Type resultType, Type wireTy\n     }\n \n     /**\n-     * Given:\n-     * (1). the {@code java.lang.reflect.Type} (resultType) of java proxy method return value\n-     * (2). and {@link ReturnValueWireType} annotation value indicating 'entity type' (wireType)\n-     * of same REST API's wire response body\n+     * Given: (1). the {@code java.lang.reflect.Type} (resultType) of java proxy method return value (2). and {@link\n+     * ReturnValueWireType} annotation value indicating 'entity type' (wireType) of same REST API's wire response body\n      * this method construct 'response body Type'.\n      *\n-     * Note: When {@link ReturnValueWireType} annotation is applied to a proxy method, then the raw\n-     * HTTP response content will need to parsed using the derived 'response body Type' then converted\n-     * to actual {@code returnType}.\n+     * Note: When {@link ReturnValueWireType} annotation is applied to a proxy method, then the raw HTTP response\n+     * content will need to parsed using the derived 'response body Type' then converted to actual {@code returnType}.\n      *\n      * @param resultType the {@code java.lang.reflect.Type} of java proxy method return value\n      * @param wireType the {@code java.lang.reflect.Type} of entity in REST API response body\n      * @return the {@code java.lang.reflect.Type} of REST API response body\n      */\n     private static Type constructWireResponseType(Type resultType, Type wireType) {\n-        Objects.requireNonNull(resultType);\n         Objects.requireNonNull(wireType);\n-        //\n-        Type wireResponseType = resultType;\n \n-        if (resultType == byte[].class) {\n-            if (wireType == Base64Url.class) {\n-                wireResponseType = Base64Url.class;\n-            }\n-        } else if (resultType == OffsetDateTime.class) {\n+        Type wireResponseType = resultType;\n+        if (resultType == OffsetDateTime.class) {\n             if (wireType == DateTimeRfc1123.class) {\n                 wireResponseType = DateTimeRfc1123.class;\n             } else if (wireType == UnixTime.class) {\n                 wireResponseType = UnixTime.class;\n             }\n-        } else {\n-            if (TypeUtil.isTypeOrSubTypeOf(resultType, List.class)) {\n-                final Type resultElementType = TypeUtil.getTypeArgument(resultType);\n-                final Type wireResponseElementType = constructWireResponseType(resultElementType, wireType);\n-\n-                wireResponseType = TypeUtil.createParameterizedType(\n-                    (Class<?>) ((ParameterizedType) resultType).getRawType(), wireResponseElementType);\n-            } else if (TypeUtil.isTypeOrSubTypeOf(resultType, Map.class) || TypeUtil.isTypeOrSubTypeOf(resultType,\n-                Response.class)) {", "originalCommit": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNTUwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9650#discussion_r399535507", "bodyText": "Removed byte[] for the same reason mentioned above.", "author": "alzimmermsft", "createdAt": "2020-03-27T21:00:49Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseBodyDecoder.java", "diffHunk": "@@ -274,90 +234,46 @@ private static Object deserializePage(String value, Type resultType, Type wireTy\n      */\n     private static Object convertToResultType(Object wireResponse, Type resultType, Type wireType) {\n         Object result = wireResponse;\n-\n-        if (wireResponse != null) {\n-            if (resultType == byte[].class) {", "originalCommit": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNTc4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9650#discussion_r399535787", "bodyText": "Not sure why we get the and return the OffsetDateTime from DateTimeRfc1123 and UnixTime", "author": "alzimmermsft", "createdAt": "2020-03-27T21:01:33Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseBodyDecoder.java", "diffHunk": "@@ -274,90 +234,46 @@ private static Object deserializePage(String value, Type resultType, Type wireTy\n      */\n     private static Object convertToResultType(Object wireResponse, Type resultType, Type wireType) {\n         Object result = wireResponse;\n-\n-        if (wireResponse != null) {\n-            if (resultType == byte[].class) {\n-                if (wireType == Base64Url.class) {\n-                    result = ((Base64Url) wireResponse).decodedBytes();\n-                }\n-            } else if (resultType == OffsetDateTime.class) {\n-                if (wireType == DateTimeRfc1123.class) {\n-                    result = ((DateTimeRfc1123) wireResponse).getDateTime();", "originalCommit": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzNjE2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9650#discussion_r399536161", "bodyText": "Removed as this should be caught by the check for Page.class and should be deserialized through that code path.", "author": "alzimmermsft", "createdAt": "2020-03-27T21:02:23Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseBodyDecoder.java", "diffHunk": "@@ -274,90 +234,46 @@ private static Object deserializePage(String value, Type resultType, Type wireTy\n      */\n     private static Object convertToResultType(Object wireResponse, Type resultType, Type wireType) {\n         Object result = wireResponse;\n-\n-        if (wireResponse != null) {\n-            if (resultType == byte[].class) {\n-                if (wireType == Base64Url.class) {\n-                    result = ((Base64Url) wireResponse).decodedBytes();\n-                }\n-            } else if (resultType == OffsetDateTime.class) {\n-                if (wireType == DateTimeRfc1123.class) {\n-                    result = ((DateTimeRfc1123) wireResponse).getDateTime();\n-                } else if (wireType == UnixTime.class) {\n-                    result = ((UnixTime) wireResponse).getDateTime();\n+        if (resultType == OffsetDateTime.class) {\n+            if (wireType == DateTimeRfc1123.class) {\n+                result = ((DateTimeRfc1123) wireResponse).getDateTime();\n+            } else if (wireType == UnixTime.class) {\n+                result = ((UnixTime) wireResponse).getDateTime();\n+            }\n+        } else if (TypeUtil.isTypeOrSubTypeOf(resultType, List.class)) {\n+            final Type resultElementType = TypeUtil.getTypeArgument(resultType);\n+\n+            @SuppressWarnings(\"unchecked\") final List<Object> wireResponseList = (List<Object>) wireResponse;\n+\n+            final int wireResponseListSize = wireResponseList.size();\n+            for (int i = 0; i < wireResponseListSize; ++i) {\n+                final Object wireResponseElement = wireResponseList.get(i);\n+                final Object resultElement =\n+                    convertToResultType(wireResponseElement, resultElementType, wireType);\n+                if (wireResponseElement != resultElement) {\n+                    wireResponseList.set(i, resultElement);\n                 }\n-            } else {\n-                if (TypeUtil.isTypeOrSubTypeOf(resultType, List.class)) {\n-                    final Type resultElementType = TypeUtil.getTypeArgument(resultType);\n-\n-                    @SuppressWarnings(\"unchecked\") final List<Object> wireResponseList = (List<Object>) wireResponse;\n-\n-                    final int wireResponseListSize = wireResponseList.size();\n-                    for (int i = 0; i < wireResponseListSize; ++i) {\n-                        final Object wireResponseElement = wireResponseList.get(i);\n-                        final Object resultElement =\n-                            convertToResultType(wireResponseElement, resultElementType, wireType);\n-                        if (wireResponseElement != resultElement) {\n-                            wireResponseList.set(i, resultElement);\n-                        }\n-                    }\n-                    //\n-                    result = wireResponseList;\n-                } else if (TypeUtil.isTypeOrSubTypeOf(resultType, Map.class)) {\n-                    final Type resultValueType = TypeUtil.getTypeArguments(resultType)[1];\n-\n-                    @SuppressWarnings(\"unchecked\") final Map<String, Object> wireResponseMap =\n-                        (Map<String, Object>) wireResponse;\n-\n-                    final Set<Map.Entry<String, Object>> wireResponseEntries = wireResponseMap.entrySet();\n-                    for (Map.Entry<String, Object> wireResponseEntry : wireResponseEntries) {\n-                        final Object wireResponseValue = wireResponseEntry.getValue();\n-                        final Object resultValue = convertToResultType(wireResponseValue, resultValueType, wireType);\n-                        if (wireResponseValue != resultValue) {\n-                            wireResponseMap.put(wireResponseEntry.getKey(), resultValue);\n-                        }\n-                    }\n-                    //\n-                    result = wireResponseMap;\n-                } else if (TypeUtil.isTypeOrSubTypeOf(resultType, PagedResponseBase.class)) {", "originalCommit": "6ea793f19baf2449307ae6fae2d27f61a2555fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3958aa7394f6f9b9d2081b303f3c679ff6d33892", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3958aa7394f6f9b9d2081b303f3c679ff6d33892", "message": "Added back support for byte[], added tests as well", "committedDate": "2020-03-27T21:45:25Z", "type": "commit"}, {"oid": "fce691db09553cff8dbdae168a64853b736cf411", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fce691db09553cff8dbdae168a64853b736cf411", "message": "Fix checkstyle issues and changed UnixTimeSerializer", "committedDate": "2020-03-27T22:22:49Z", "type": "commit"}, {"oid": "cfd13affa647a3027b38f45fcdb3c9068b1df948", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfd13affa647a3027b38f45fcdb3c9068b1df948", "message": "Merged in master", "committedDate": "2020-04-04T01:43:45Z", "type": "commit"}]}