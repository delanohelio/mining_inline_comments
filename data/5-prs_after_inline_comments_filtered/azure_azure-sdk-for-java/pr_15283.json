{"pr_number": 15283, "pr_title": "Patch API support in Java", "pr_createdAt": "2020-09-16T16:48:03Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15283", "timeline": [{"oid": "18d35d71efc7a45921b0ea3a74e48256c1c6ab32", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18d35d71efc7a45921b0ea3a74e48256c1c6ab32", "message": "basic first commit\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-09-16T15:46:23Z", "type": "commit"}, {"oid": "9db799e21b33cc86c6e71cf33f239766b7a48391", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9db799e21b33cc86c6e71cf33f239766b7a48391", "message": "Merge branch 'master' into users/rakkuma/patch-api", "committedDate": "2020-09-16T15:48:37Z", "type": "commit"}, {"oid": "5ff1f51aaa2d0fedbc5bdcb08fc87e7a5044c8e1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ff1f51aaa2d0fedbc5bdcb08fc87e7a5044c8e1", "message": "Minor code fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-09-16T16:32:55Z", "type": "commit"}, {"oid": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "message": "Adding patch for sync client\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-09-17T14:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTY5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492555695", "bodyText": "I assume this will validate that pk is not null, else do it.", "author": "abhijitpai", "createdAt": "2020-09-22T08:22:55Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -671,6 +674,57 @@ public String getId() {\n         return withContext(context -> replaceItemInternal(itemType, itemId, doc, requestOptions, context));\n     }\n \n+    /**\n+     * Run patch operations on an Item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a single Cosmos item response with the replaced item.\n+     *\n+     * @param <T> the type parameter.\n+     * @param itemId the item id.\n+     * @param partitionKey the partition key.\n+     * @param patchOperations patchOperations.\n+     * @param itemType the item type.\n+     * @return an {@link Mono} containing the Cosmos item resource response with the replaced item or an error.\n+     */\n+    public <T> Mono<CosmosItemResponse<T>> patchItem(\n+        String itemId,\n+        PartitionKey partitionKey,\n+        List<PatchOperation<?>> patchOperations,\n+        Class<T> itemType) {\n+        return patchItem(itemId, partitionKey, patchOperations, new CosmosItemRequestOptions(), itemType);\n+    }\n+\n+    /**\n+     * Run patch operations on an Item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a single Cosmos item response with the replaced item.\n+     *\n+     * @param <T> the type parameter.\n+     * @param itemId the item id.\n+     * @param partitionKey the partition key.\n+     * @param patchOperations patchOperations.\n+     * @param options the request options.\n+     * @param itemType the item type.\n+     * @return an {@link Mono} containing the Cosmos item resource response with the replaced item or an error.\n+     */\n+    public <T> Mono<CosmosItemResponse<T>> patchItem(\n+        String itemId,\n+        PartitionKey partitionKey,\n+        List<PatchOperation<?>> patchOperations,\n+        CosmosItemRequestOptions options,\n+        Class<T> itemType) {\n+\n+        if (options == null) {\n+            options = new CosmosItemRequestOptions();\n+        }\n+        ModelBridgeInternal.setPartitionKey(options, partitionKey);", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MjU0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531362545", "bodyText": "Now validating partition key as it is required.", "author": "rakkuma", "createdAt": "2020-11-27T03:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTg4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492555886", "bodyText": "Shouldn't happen.", "author": "abhijitpai", "createdAt": "2020-09-22T08:23:12Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1448,6 +1466,64 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n                 .map(resp -> toResourceResponse(resp, Document.class));} );\n     }\n \n+    @Override\n+    public Mono<ResourceResponse<Document>> patchDocument(String documentLink,\n+                                                          List<PatchOperation<?>> patchOperations,\n+                                                          RequestOptions options) {\n+        DocumentClientRetryPolicy requestRetryPolicy = this.resetSessionTokenRetryPolicy.getRequestPolicy();\n+        if (options == null || options.getPartitionKey() == null) {", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MjU5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531362594", "bodyText": "Ack. Removed it. Thanks.", "author": "rakkuma", "createdAt": "2020-11-27T03:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NjM0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492556347", "bodyText": "Needed?", "author": "abhijitpai", "createdAt": "2020-09-22T08:23:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1448,6 +1466,64 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n                 .map(resp -> toResourceResponse(resp, Document.class));} );\n     }\n \n+    @Override\n+    public Mono<ResourceResponse<Document>> patchDocument(String documentLink,\n+                                                          List<PatchOperation<?>> patchOperations,\n+                                                          RequestOptions options) {\n+        DocumentClientRetryPolicy requestRetryPolicy = this.resetSessionTokenRetryPolicy.getRequestPolicy();\n+        if (options == null || options.getPartitionKey() == null) {\n+            String collectionLink = Utils.getCollectionName(documentLink);\n+            requestRetryPolicy = new PartitionKeyMismatchRetryPolicy(collectionCache, requestRetryPolicy, collectionLink, options);\n+        }\n+\n+        DocumentClientRetryPolicy finalRetryPolicyInstance = requestRetryPolicy;\n+        return ObservableHelper.inlineIfPossibleAsObs(() -> patchDocumentInternal(documentLink, patchOperations, options, finalRetryPolicyInstance), requestRetryPolicy);\n+    }\n+\n+    private Mono<ResourceResponse<Document>> patchDocumentInternal(String documentLink,\n+                                                                   List<PatchOperation<?>> patchOperations,\n+                                                                   RequestOptions options,\n+                                                                   DocumentClientRetryPolicy retryPolicyInstance) {\n+        if (patchOperations == null) {\n+            throw new IllegalArgumentException(\"patchOperations\");\n+        }\n+\n+        logger.debug(\"Running patch operations on document. patch Operations: [{}]\", patchOperations);\n+\n+        final String path = Utils.joinPath(documentLink, null);", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMTU0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r501131546", "bodyText": "This utility append \"/\" if needed and trims whitespace, so seems fine.", "author": "rakkuma", "createdAt": "2020-10-07T16:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NjM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NjQ4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492556488", "bodyText": "Rename Update to Patch.", "author": "abhijitpai", "createdAt": "2020-09-22T08:24:12Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1448,6 +1466,64 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n                 .map(resp -> toResourceResponse(resp, Document.class));} );\n     }\n \n+    @Override\n+    public Mono<ResourceResponse<Document>> patchDocument(String documentLink,\n+                                                          List<PatchOperation<?>> patchOperations,\n+                                                          RequestOptions options) {\n+        DocumentClientRetryPolicy requestRetryPolicy = this.resetSessionTokenRetryPolicy.getRequestPolicy();\n+        if (options == null || options.getPartitionKey() == null) {\n+            String collectionLink = Utils.getCollectionName(documentLink);\n+            requestRetryPolicy = new PartitionKeyMismatchRetryPolicy(collectionCache, requestRetryPolicy, collectionLink, options);\n+        }\n+\n+        DocumentClientRetryPolicy finalRetryPolicyInstance = requestRetryPolicy;\n+        return ObservableHelper.inlineIfPossibleAsObs(() -> patchDocumentInternal(documentLink, patchOperations, options, finalRetryPolicyInstance), requestRetryPolicy);\n+    }\n+\n+    private Mono<ResourceResponse<Document>> patchDocumentInternal(String documentLink,\n+                                                                   List<PatchOperation<?>> patchOperations,\n+                                                                   RequestOptions options,\n+                                                                   DocumentClientRetryPolicy retryPolicyInstance) {\n+        if (patchOperations == null) {\n+            throw new IllegalArgumentException(\"patchOperations\");\n+        }\n+\n+        logger.debug(\"Running patch operations on document. patch Operations: [{}]\", patchOperations);\n+\n+        final String path = Utils.joinPath(documentLink, null);\n+\n+        // OperationType.Update is later used for patch method.\n+        final Map<String, String> requestHeaders = getRequestHeaders(options, ResourceType.Document, OperationType.Update);", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MjY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531362657", "bodyText": "Yeah. Done. Thanks!", "author": "rakkuma", "createdAt": "2020-11-27T03:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NjQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NzcwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492557709", "bodyText": "rename to patch", "author": "abhijitpai", "createdAt": "2020-09-22T08:26:14Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -84,6 +84,10 @@ public RxGatewayStoreModel(\n         return this.performRequest(request, HttpMethod.POST);\n     }\n \n+    private Mono<RxDocumentServiceResponse> update(RxDocumentServiceRequest request) {", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2Mjc4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531362787", "bodyText": "Yeah. Done. Thanks.", "author": "rakkuma", "createdAt": "2020-11-27T03:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NzcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1OTI1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492559253", "bodyText": "shouldn't be public?", "author": "abhijitpai", "createdAt": "2020-09-22T08:28:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/patch/PatchOperationCore.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.patch;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.patch.implementation.PatchOperationType;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument;\n+\n+public class PatchOperationCore<TResource>  extends PatchOperation<TResource> {", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2Mjk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531362985", "bodyText": "It's needed as I am accessing it in another package. But this is in implementation package. So should be fine. I have made it final class so no one can extend it.", "author": "rakkuma", "createdAt": "2020-11-27T03:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1OTI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU2MTAwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r492561002", "bodyText": "Needs to be public?", "author": "abhijitpai", "createdAt": "2020-09-22T08:31:04Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/patch/implementation/PatchOperationType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.patch.implementation;\n+\n+public enum PatchOperationType {", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MzE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531363174", "bodyText": "It's needed as I am accessing it in another package. But this is in implementation package. So should be fine.", "author": "rakkuma", "createdAt": "2020-11-27T03:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU2MTAwMg=="}], "type": "inlineReview"}, {"oid": "7efc1a97c9a9c13d50227d19054d5a2e06307e0d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7efc1a97c9a9c13d50227d19054d5a2e06307e0d", "message": "Merging with master\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-07T15:52:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMjM1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r502612357", "bodyText": "any reason we are not taking similar route as TransactionalBatch where we hide the List of the operations behind a TransactionalBatch Object?\nWe could do something similar here too. We can define Patch class:\nPatch patch = Patch.createPatch(id, partitionKeyValue);\npatch.addOperation(op1)\npatch.addOperation(op2)\nAny reason we are not following similar API?\nthis is for discussion only for now. I am \"not\" requesting to make any code change right now.", "author": "moderakh", "createdAt": "2020-10-09T18:45:30Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -671,6 +674,57 @@ public String getId() {\n         return withContext(context -> replaceItemInternal(itemType, itemId, doc, requestOptions, context));\n     }\n \n+    /**\n+     * Run patch operations on an Item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a single Cosmos item response with the replaced item.\n+     *\n+     * @param <T> the type parameter.\n+     * @param itemId the item id.\n+     * @param partitionKey the partition key.\n+     * @param patchOperations patchOperations.\n+     * @param itemType the item type.\n+     * @return an {@link Mono} containing the Cosmos item resource response with the replaced item or an error.\n+     */\n+    public <T> Mono<CosmosItemResponse<T>> patchItem(\n+        String itemId,\n+        PartitionKey partitionKey,\n+        List<PatchOperation<?>> patchOperations,", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0ODQ2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r503148466", "bodyText": "Yeah. This is what is in Dotnet. But one reason I can think of is let's say user wants to do one increment operation continuously, then they can play around with that patch operation. But I will schedule a meeting and we can finalize it.", "author": "rakkuma", "createdAt": "2020-10-12T09:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMjM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMzk2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r502613969", "bodyText": "we are following a slightly different approach for Patch compared to TransactionalBatch PR.\nin TransactionalBatch the operations could be instantiated using TransactionalBatch as a builder.\nwhereas here Operations have their known way of instantiation.\nAny reason we can't do the same?\nThis is for discussion only for now. I am not requesting we should change this.", "author": "moderakh", "createdAt": "2020-10-09T18:48:50Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/patch/PatchOperation.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.patch;\n+\n+import com.azure.cosmos.patch.implementation.PatchOperationType;\n+\n+public abstract class PatchOperation<TResource> {", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MzM2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531363363", "bodyText": "Yeah. As discussed/finalized in meeting, we have moved to CosmosPatch as a builder approach.", "author": "rakkuma", "createdAt": "2020-11-27T03:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMzk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxNTc4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r502615781", "bodyText": "this is what goes over wire, right?\nif so it is more optimized to encode to byte[] here. otherwise, you are doing toString here and later to byte[] when written on the wire.", "author": "moderakh", "createdAt": "2020-10-09T18:52:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/patch/implementation/PatchUtil.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.patch.implementation;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.patch.PatchOperation;\n+import com.azure.cosmos.patch.PatchOperationCore;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+\n+import java.util.List;\n+\n+public class PatchUtil {\n+\n+    public static String serializePatchOperations(List<PatchOperation<?>> patchOperations, RequestOptions options) {\n+        ArrayNode operations =  Utils.getSimpleObjectMapper().createArrayNode();\n+\n+        for(PatchOperation<?> patchOperation : patchOperations) {\n+\n+            JsonSerializable jsonSerializable = new JsonSerializable();\n+            jsonSerializable.set(PatchConstants.PropertyNames_OperationType, patchOperation.getOperationType().getStringValue());\n+\n+            if(patchOperation instanceof PatchOperationCore) {\n+                jsonSerializable.set(PatchConstants.PropertyNames_Path, ((PatchOperationCore)patchOperation).getPath());\n+            }\n+\n+            jsonSerializable.set(PatchConstants.PropertyNames_Value, patchOperation.getResource());\n+            operations.add(jsonSerializable.getPropertyBag());\n+        }\n+\n+        return operations.toString();", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MzY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531363665", "bodyText": "Agreed. Now I am converting directly to byte[] and returning the same. Thanks.", "author": "rakkuma", "createdAt": "2020-11-27T03:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxNTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxNjE0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r502616149", "bodyText": "you could change it so PatchUtil.serializePatchOperations(patchOperations, options) returns byte[], that would help in perf optimization.", "author": "moderakh", "createdAt": "2020-10-09T18:53:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1448,6 +1466,64 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n                 .map(resp -> toResourceResponse(resp, Document.class));} );\n     }\n \n+    @Override\n+    public Mono<ResourceResponse<Document>> patchDocument(String documentLink,\n+                                                          List<PatchOperation<?>> patchOperations,\n+                                                          RequestOptions options) {\n+        DocumentClientRetryPolicy requestRetryPolicy = this.resetSessionTokenRetryPolicy.getRequestPolicy();\n+        if (options == null || options.getPartitionKey() == null) {\n+            String collectionLink = Utils.getCollectionName(documentLink);\n+            requestRetryPolicy = new PartitionKeyMismatchRetryPolicy(collectionCache, requestRetryPolicy, collectionLink, options);\n+        }\n+\n+        DocumentClientRetryPolicy finalRetryPolicyInstance = requestRetryPolicy;\n+        return ObservableHelper.inlineIfPossibleAsObs(() -> patchDocumentInternal(documentLink, patchOperations, options, finalRetryPolicyInstance), requestRetryPolicy);\n+    }\n+\n+    private Mono<ResourceResponse<Document>> patchDocumentInternal(String documentLink,\n+                                                                   List<PatchOperation<?>> patchOperations,\n+                                                                   RequestOptions options,\n+                                                                   DocumentClientRetryPolicy retryPolicyInstance) {\n+        if (patchOperations == null) {\n+            throw new IllegalArgumentException(\"patchOperations\");\n+        }\n+\n+        logger.debug(\"Running patch operations on document. patch Operations: [{}]\", patchOperations);\n+\n+        final String path = Utils.joinPath(documentLink, null);\n+\n+        // OperationType.Update is later used for patch method.\n+        final Map<String, String> requestHeaders = getRequestHeaders(options, ResourceType.Document, OperationType.Update);\n+        Instant serializationStartTimeUTC = Instant.now();\n+\n+        ByteBuffer content = ByteBuffer.wrap(PatchUtil.serializePatchOperations(patchOperations, options).getBytes(StandardCharsets.UTF_8));", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxNjc5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r502616796", "bodyText": "same as the transactionalBatch PR, please use assertJ instead of testng for assertion in all new tests.", "author": "moderakh", "createdAt": "2020-10-09T18:54:49Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/PatchTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.patch.PatchOperation;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class PatchTest extends TestSuiteBase {\n+\n+    private CosmosClient client;\n+    private CosmosContainer container;\n+\n+    @Factory(dataProvider = \"simpleClientBuildersWithDirect\")\n+    public PatchTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = {\"emulator\"}, timeOut = SETUP_TIMEOUT)\n+    public void before_PatchTest() {\n+        assertThat(this.client).isNull();\n+        this.client = getClientBuilder().contentResponseOnWriteEnabled(true).buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+    }\n+\n+    @AfterClass(groups = {\"emulator\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.client).isNotNull();\n+        this.client.close();\n+    }\n+\n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void itemPatchSuccessTest() {\n+        ToDoActivity testItem = ToDoActivity.createRandomItem(this.container);\n+\n+        int originalTaskNum = testItem.taskNum;\n+        int newTaskNum = originalTaskNum + 1;\n+\n+        Assert.assertNull(testItem.children[1].status);\n+\n+        List<PatchOperation<?>> patchOperations = new ArrayList<>();\n+        patchOperations.add(PatchOperation.createAddOperation(\"/children/1/CamelCase\", \"patched\"));\n+        patchOperations.add(PatchOperation.createRemoveOperation(\"/description\"));\n+        patchOperations.add(PatchOperation.createReplaceOperation(\"/taskNum\", newTaskNum));\n+\n+        CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosItemResponse<ToDoActivity> response = this.container.patchItem(\n+            testItem.id,\n+            new PartitionKey(testItem.status),\n+            patchOperations,\n+            options,\n+            ToDoActivity.class);\n+\n+        assertEquals(HttpResponseStatus.OK.code(), response.getStatusCode());\n+\n+        ToDoActivity patchedItem = response.getItem();\n+        Assert.assertNotNull(patchedItem);\n+        // read resource to validate the patch operation\n+        response = this.container.readItem(\n+            testItem.id,\n+            new PartitionKey(testItem.status),\n+            options, ToDoActivity.class);\n+\n+        assertEquals(HttpResponseStatus.OK.code(), response.getStatusCode());", "originalCommit": "06d8d11c6d6f2b42602d36fd74e855de4d6597c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2OTIyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r531369224", "bodyText": "Ack. Fixed.", "author": "rakkuma", "createdAt": "2020-11-27T03:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxNjc5Ng=="}], "type": "inlineReview"}, {"oid": "13d29eaecb7778c4bcd0c6bb015c88c02f22c554", "url": "https://github.com/Azure/azure-sdk-for-java/commit/13d29eaecb7778c4bcd0c6bb015c88c02f22c554", "message": "Fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-19T07:20:40Z", "type": "commit"}, {"oid": "e74e86ee84409fc501434608a4baee1d6e24d4df", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e74e86ee84409fc501434608a4baee1d6e24d4df", "message": "Merging with master\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-19T07:25:13Z", "type": "commit"}, {"oid": "f7036695361088587947f5e2c5d293db77f7cd18", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7036695361088587947f5e2c5d293db77f7cd18", "message": "Fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-19T07:28:51Z", "type": "commit"}, {"oid": "e11e17ea3b8574e74d286b38c62caba356a8b99c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e11e17ea3b8574e74d286b38c62caba356a8b99c", "message": "Fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-20T15:36:29Z", "type": "commit"}, {"oid": "f477be2613790d96c7ce2a2376bd054f57d2b1b6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f477be2613790d96c7ce2a2376bd054f57d2b1b6", "message": "Patch basic changes\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-28T09:25:10Z", "type": "commit"}, {"oid": "d97d73d49f609766ea06b67869b9af1bc70f55dd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d97d73d49f609766ea06b67869b9af1bc70f55dd", "message": "Merge branch 'master' into users/rakkuma/patch-api", "committedDate": "2020-10-28T09:26:04Z", "type": "commit"}, {"oid": "0118f4307d6e685a165e30c311a3740819b9caab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0118f4307d6e685a165e30c311a3740819b9caab", "message": "Minor changes\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-28T12:04:06Z", "type": "commit"}, {"oid": "0118f4307d6e685a165e30c311a3740819b9caab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0118f4307d6e685a165e30c311a3740819b9caab", "message": "Minor changes\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-10-28T12:04:06Z", "type": "forcePushed"}, {"oid": "bfd9f1dd0fca88fb1dcfb6e38422fb8717d92927", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfd9f1dd0fca88fb1dcfb6e38422fb8717d92927", "message": "Merging with master\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-25T11:52:52Z", "type": "commit"}, {"oid": "ecc4c4b2336449c672a4b5cea523c40319e1f2cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ecc4c4b2336449c672a4b5cea523c40319e1f2cd", "message": "Enable preview test\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T03:47:14Z", "type": "commit"}, {"oid": "2855eb83ad320be6e6ff8f1fe0317158f89f8690", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2855eb83ad320be6e6ff8f1fe0317158f89f8690", "message": "Emulator test\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T07:10:17Z", "type": "commit"}, {"oid": "7cfe584706e854f1cde0e0276b70dce268fb0230", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7cfe584706e854f1cde0e0276b70dce268fb0230", "message": "fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T08:02:20Z", "type": "commit"}, {"oid": "2d1ca4c5a57629ad173bc62ca6f85ffd768a2666", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d1ca4c5a57629ad173bc62ca6f85ffd768a2666", "message": "Fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T08:44:23Z", "type": "commit"}, {"oid": "939c748707fdeb03364181d02c7e2540981a4692", "url": "https://github.com/Azure/azure-sdk-for-java/commit/939c748707fdeb03364181d02c7e2540981a4692", "message": "Patch in batch-bulk and more test cases\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T17:09:48Z", "type": "commit"}, {"oid": "939c748707fdeb03364181d02c7e2540981a4692", "url": "https://github.com/Azure/azure-sdk-for-java/commit/939c748707fdeb03364181d02c7e2540981a4692", "message": "Patch in batch-bulk and more test cases\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T17:09:48Z", "type": "forcePushed"}, {"oid": "11c9095a6e99255b111daad69ab7f39516d6ceba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11c9095a6e99255b111daad69ab7f39516d6ceba", "message": "fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-26T19:42:55Z", "type": "commit"}, {"oid": "471610a5f4c0747df0bb6b6605c911027e8ef24c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/471610a5f4c0747df0bb6b6605c911027e8ef24c", "message": "Update to Patch RNTBD names\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-27T02:17:56Z", "type": "commit"}, {"oid": "9cfc0904632bedf6c711513b2814727ac86e09da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9cfc0904632bedf6c711513b2814727ac86e09da", "message": "Minor code fixes\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-27T03:34:25Z", "type": "commit"}, {"oid": "ef6d45438cf0341453428fc91c151bfa32803894", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef6d45438cf0341453428fc91c151bfa32803894", "message": "Some extra comment\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-11-27T04:16:59Z", "type": "commit"}, {"oid": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "message": "Merge branch 'master' into users/rakkuma/patch-api", "committedDate": "2020-11-27T04:30:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NjcwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r536146707", "bodyText": "The usual naming discussion :-)\nTo me this object represents a Builder/Factory - so CosmosPatchOperationBuilder or CosmosPatchOperationFactory would be more intuitive. But like always - I am not a native speaker maybe patch is not just used as a verb but substantive/noun as well? To me (biased by my Germany linguistic influence a \"patch\" as a noun would be something like a band-aid. In IT a patch could be a bug fix etc. But it always has the connotation of \"healing\" - so using something along the lines of PatchOperation would be more intuitive for me.", "author": "FabianMeiswinkel", "createdAt": "2020-12-04T14:41:04Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPatch.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.implementation.patch.PatchOperation;\n+import com.azure.cosmos.implementation.patch.PatchOperationCore;\n+import com.azure.cosmos.implementation.patch.PatchOperationType;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument;\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Grammar based on RFC: https://tools.ietf.org/html/rfc6902#section-4.1\n+ *\n+ * Contains a list of Patch operations to be applied on an item. It is applied in an atomic manner and the operations\n+ * grammar follows above RFC.\n+ *\n+ * This can be executed in 3 ways:\n+ *  1. Passing this to container in container.patchItem() which requires the id of the item to be patched, partition\n+ *      key, the CosmosPatch instance, any CosmosItemRequestOptions and the class type for which response will be parsed.\n+ *  2. Add CosmosPatch instance in TransactionalBatch using batch.patchItemOperation() which requires the id of the item\n+ *      to be patched, cosmos patch instance and TransactionalBatchItemRequestOptions(if-any) and follow remaining\n+ *      steps for batch for it's execution.\n+ *  3. Create a bulk item using BulkOperations.getPatchItemOperation which requires the id of the item to be patched,\n+ *      cosmos patch instance, partition key and BulkItemRequestOptions(if-any) and follow remaining steps to\n+ *      execute bulk operations.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosPatch {", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NzI5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r539267297", "bodyText": "I am not sure. Since we directly say we support patch operations and HTTP uses it in the same context, so like CRUD operations, patch can be directly considered a verb here.\nWiki: In computing, the PATCH method is a request method supported by the Hypertext Transfer Protocol (HTTP) protocol for making partial changes to an existing resource. - https://en.wikipedia.org/wiki/Patch_verb\nSo may be operation is implicit here? as HTTP considers it directly as a method?\nWhat do you think @moderakh @milismsft ?", "author": "rakkuma", "createdAt": "2020-12-09T12:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NjcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NzM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r539577366", "bodyText": "@rakkuma, I agree with Fabian; lets try to add a suffix to the existing name to make it more specific to our case and avoid any confusion that this might represent an RP action on the respective Cosmos account rather than a document. We can start with \"Operation/Operations/Request/Requests\" or similar.", "author": "milismsft", "createdAt": "2020-12-09T19:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NjcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNjk1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r544006959", "bodyText": "Cool. Have renamed it to CosmosPatchOperations.", "author": "rakkuma", "createdAt": "2020-12-16T06:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NjcwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0OTQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r536149425", "bodyText": "Nice - i appreciate that you added patch support for bulk and batch already - this will allow nice new scenarios in the Spark connector for example!", "author": "FabianMeiswinkel", "createdAt": "2020-12-04T14:44:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPatch.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.implementation.patch.PatchOperation;\n+import com.azure.cosmos.implementation.patch.PatchOperationCore;\n+import com.azure.cosmos.implementation.patch.PatchOperationType;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument;\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Grammar based on RFC: https://tools.ietf.org/html/rfc6902#section-4.1\n+ *\n+ * Contains a list of Patch operations to be applied on an item. It is applied in an atomic manner and the operations\n+ * grammar follows above RFC.\n+ *\n+ * This can be executed in 3 ways:\n+ *  1. Passing this to container in container.patchItem() which requires the id of the item to be patched, partition\n+ *      key, the CosmosPatch instance, any CosmosItemRequestOptions and the class type for which response will be parsed.\n+ *  2. Add CosmosPatch instance in TransactionalBatch using batch.patchItemOperation() which requires the id of the item\n+ *      to be patched, cosmos patch instance and TransactionalBatchItemRequestOptions(if-any) and follow remaining", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MTA1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r536151050", "bodyText": "It makes sense to reference the RFC for the details - but I would expect as a developer to see a brief sample for the common options on how a correct \"path\" value looks like - like how to reference a json property - a nested property - and array value etc. I think a couple of samples in the javadoc would be really helpful.", "author": "FabianMeiswinkel", "createdAt": "2020-12-04T14:46:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPatch.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.implementation.patch.PatchOperation;\n+import com.azure.cosmos.implementation.patch.PatchOperationCore;\n+import com.azure.cosmos.implementation.patch.PatchOperationType;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument;\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Grammar based on RFC: https://tools.ietf.org/html/rfc6902#section-4.1\n+ *\n+ * Contains a list of Patch operations to be applied on an item. It is applied in an atomic manner and the operations\n+ * grammar follows above RFC.\n+ *\n+ * This can be executed in 3 ways:\n+ *  1. Passing this to container in container.patchItem() which requires the id of the item to be patched, partition\n+ *      key, the CosmosPatch instance, any CosmosItemRequestOptions and the class type for which response will be parsed.\n+ *  2. Add CosmosPatch instance in TransactionalBatch using batch.patchItemOperation() which requires the id of the item\n+ *      to be patched, cosmos patch instance and TransactionalBatchItemRequestOptions(if-any) and follow remaining\n+ *      steps for batch for it's execution.\n+ *  3. Create a bulk item using BulkOperations.getPatchItemOperation which requires the id of the item to be patched,\n+ *      cosmos patch instance, partition key and BulkItemRequestOptions(if-any) and follow remaining steps to\n+ *      execute bulk operations.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosPatch {\n+\n+    private final List<PatchOperation> patchOperations;\n+\n+    private CosmosPatch() {\n+        this.patchOperations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Initializes a new instance of {@link CosmosPatch} that will contain operations to be performed on a item atomically.\n+     *\n+     * @return A new instance of {@link CosmosPatch}.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public static CosmosPatch create() {\n+        return new CosmosPatch();\n+    }\n+\n+    /**\n+     * This performs one of the following functions, depending upon what the target location references:\n+     *  1. Target location specifies an array index, a new value is inserted into the array at the specified index.\n+     *  2. Target location specifies an object member that does not already exist, a new member is added to the object.\n+     *  3. Target location specifies an object member that does exist, that member's value is replaced.\n+     *\n+     * @param <T> The type of item to be added.\n+     *\n+     * @param path the operation path.\n+     * @param value the value which will be added.\n+     *\n+     * @return same instance of {@link CosmosPatch}\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <T> CosmosPatch add(String path, T value) {\n+\n+        checkNotNull(value, \"expected non-null value\");\n+        checkArgument(StringUtils.isNotEmpty(path), \"path empty %s\", path);\n+\n+        this.patchOperations.add(\n+            new PatchOperationCore<>(\n+                PatchOperationType.ADD,\n+                path,\n+                value));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * This removes the value at the target location.\n+     *\n+     * @param path the operation path.", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNzY1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r544007650", "bodyText": "Have added patch examples based on a json object mentioned at the class level. This should help. Will take a confirmation from store team before merging for those docs.", "author": "rakkuma", "createdAt": "2020-12-16T06:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MTA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1NjEyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r536156126", "bodyText": "IMO it would be good to add some comments around expectations for idempotency. Most of the patch operations above should be safely retryable without major side effects - like an add is not technically idempotent because the retry might return a 409 conflict instead of 201-created - but the possible side-effects due to retries are low (no data \"corruption\") and can be dealt with. For Increment this is not the case - same as replace when not combined with some condition (etag etc. that prevents changes if the property was changed in the meantime).   I raised some concerns around exposing the Increment in the public surface area before - mostly because I think the semantic isn't very clear and it can easily lead to confusion with customers - only way to minimize the risk is by very explicitly calling out the semantics (idempotency, transactional guarantees, consistency guarantees for concurrent incrmenets etc.) and explaining for which scenarios this is useful - and which scenarios cannot be met with it.", "author": "FabianMeiswinkel", "createdAt": "2020-12-04T14:54:11Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPatch.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.implementation.patch.PatchOperation;\n+import com.azure.cosmos.implementation.patch.PatchOperationCore;\n+import com.azure.cosmos.implementation.patch.PatchOperationType;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkArgument;\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Grammar based on RFC: https://tools.ietf.org/html/rfc6902#section-4.1\n+ *\n+ * Contains a list of Patch operations to be applied on an item. It is applied in an atomic manner and the operations\n+ * grammar follows above RFC.\n+ *\n+ * This can be executed in 3 ways:\n+ *  1. Passing this to container in container.patchItem() which requires the id of the item to be patched, partition\n+ *      key, the CosmosPatch instance, any CosmosItemRequestOptions and the class type for which response will be parsed.\n+ *  2. Add CosmosPatch instance in TransactionalBatch using batch.patchItemOperation() which requires the id of the item\n+ *      to be patched, cosmos patch instance and TransactionalBatchItemRequestOptions(if-any) and follow remaining\n+ *      steps for batch for it's execution.\n+ *  3. Create a bulk item using BulkOperations.getPatchItemOperation which requires the id of the item to be patched,\n+ *      cosmos patch instance, partition key and BulkItemRequestOptions(if-any) and follow remaining steps to\n+ *      execute bulk operations.\n+ */\n+@Beta(Beta.SinceVersion.V4_9_0)\n+public final class CosmosPatch {\n+\n+    private final List<PatchOperation> patchOperations;\n+\n+    private CosmosPatch() {\n+        this.patchOperations = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Initializes a new instance of {@link CosmosPatch} that will contain operations to be performed on a item atomically.\n+     *\n+     * @return A new instance of {@link CosmosPatch}.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public static CosmosPatch create() {\n+        return new CosmosPatch();\n+    }\n+\n+    /**\n+     * This performs one of the following functions, depending upon what the target location references:\n+     *  1. Target location specifies an array index, a new value is inserted into the array at the specified index.\n+     *  2. Target location specifies an object member that does not already exist, a new member is added to the object.\n+     *  3. Target location specifies an object member that does exist, that member's value is replaced.\n+     *\n+     * @param <T> The type of item to be added.\n+     *\n+     * @param path the operation path.\n+     * @param value the value which will be added.\n+     *\n+     * @return same instance of {@link CosmosPatch}\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <T> CosmosPatch add(String path, T value) {\n+\n+        checkNotNull(value, \"expected non-null value\");\n+        checkArgument(StringUtils.isNotEmpty(path), \"path empty %s\", path);\n+\n+        this.patchOperations.add(\n+            new PatchOperationCore<>(\n+                PatchOperationType.ADD,\n+                path,\n+                value));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * This removes the value at the target location.\n+     *\n+     * @param path the operation path.\n+     *\n+     * @return same instance of {@link CosmosPatch}\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public CosmosPatch remove(String path) {\n+\n+        checkArgument(StringUtils.isNotEmpty(path), \"path empty %s\", path);\n+\n+        this.patchOperations.add(\n+            new PatchOperationCore<>(\n+                PatchOperationType.REMOVE,\n+                path,\n+                null));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * This replaces the value at the target location with a new value.\n+     *\n+     * @param <T> The type of item to be replaced.\n+     *\n+     * @param path the operation path.\n+     * @param value the value which will be replaced.\n+     *\n+     * @return same instance of {@link CosmosPatch}\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <T> CosmosPatch replace(String path, T value) {\n+\n+        checkArgument(StringUtils.isNotEmpty(path), \"path empty %s\", path);\n+\n+        this.patchOperations.add(\n+            new PatchOperationCore<>(\n+                PatchOperationType.REPLACE,\n+                path,\n+                value));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * This sets the value at the target location with a new value.\n+     *\n+     * @param <T> The type of item to be set.\n+     *\n+     * @param path the operation path.\n+     * @param value the value which will be set.\n+     *\n+     * @return same instance of {@link CosmosPatch}\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public <T> CosmosPatch set(String path, T value) {\n+\n+        checkNotNull(value, \"expected non-null value\");\n+        checkArgument(StringUtils.isNotEmpty(path), \"path empty %s\", path);\n+\n+        this.patchOperations.add(\n+            new PatchOperationCore<>(\n+                PatchOperationType.SET,\n+                path,\n+                value));\n+\n+        return this;\n+    }\n+\n+    /**\n+     * This increment the value at the target location.\n+     *\n+     * @param path the operation path.\n+     * @param value the value which will be incremented.\n+     *\n+     * @return same instance of {@link CosmosPatch}", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MDU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r536160577", "bodyText": "OperationType Patch should be added -not replace Update?", "author": "FabianMeiswinkel", "createdAt": "2020-12-04T15:00:28Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RxDocumentServiceRequestTest.java", "diffHunk": "@@ -97,15 +97,15 @@\n                 { TRIGGER_URL, ResourceType.Trigger, OperationType.Query },\n                 { CONFLICT_URL, ResourceType.Conflict, OperationType.Query },\n \n-                { DATABASE_URL, ResourceType.Database, OperationType.Update },", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTAxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r536161014", "bodyText": "never mind - saw that you simply renamed it below.", "author": "FabianMeiswinkel", "createdAt": "2020-12-04T15:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MDU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODM0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537828344", "bodyText": "id and partition key are the identifiers, shouldn't id and partition key go before cosmosPatch?\nany reason we are not going with the following order?\nString id, PartitionKey partitionKey, CosmosPatch cosmosPatch\nsame for other apis as well.", "author": "moderakh", "createdAt": "2020-12-07T20:59:14Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BulkOperations.java", "diffHunk": "@@ -272,4 +272,60 @@ public static CosmosItemOperation getReadItemOperation(\n             item\n         );\n     }\n+\n+    /**\n+     * Instantiate an operation for a patch in Bulk execution.\n+     *\n+     * @param id  the item id.\n+     * @param cosmosPatch Represents a container having list of operations to be sequentially applied to the referred Cosmos item.\n+     * @param partitionKey the partition key for the operation.\n+     *\n+     * @return the bulk operation.\n+     */\n+    @Beta(Beta.SinceVersion.V4_9_0)\n+    public static CosmosItemOperation getPatchItemOperation(\n+        String id,\n+        CosmosPatch cosmosPatch,\n+        PartitionKey partitionKey) {", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNTU0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r544005546", "bodyText": "Yeah. Fixed. Thanks.", "author": "rakkuma", "createdAt": "2020-12-16T06:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537836836", "bodyText": "where did update go? don't se support Update?", "author": "moderakh", "createdAt": "2020-12-07T21:13:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/OperationType.java", "diffHunk": "@@ -40,7 +40,7 @@\n     QueryPlan,\n     Stop,\n     Throttle,\n-    Update,", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4NDI2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537984268", "bodyText": "Operation type update was renamed to Patch in Backend, .net.\nPR: https://msdata.visualstudio.com/DefaultCollection/CosmosDB/_git/CosmosDB/pullrequest/190858", "author": "rakkuma", "createdAt": "2020-12-08T02:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjkwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537836900", "bodyText": "ditto", "author": "moderakh", "createdAt": "2020-12-07T21:13:30Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/OperationType.java", "diffHunk": "@@ -50,7 +50,7 @@ public boolean isWriteOperation() {\n                 this == ExecuteJavaScript ||\n                 this == Replace ||\n                 this == Upsert ||\n-                this == Update ||", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4NTU0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537985549", "bodyText": "Operation type update was renamed to Patch in Backend, .net.", "author": "rakkuma", "createdAt": "2020-12-08T02:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NTE5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537845193", "bodyText": "please add a test for conflict case where you are attempting to add a field which already exists in the document.", "author": "moderakh", "createdAt": "2020-12-07T21:27:25Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/PatchTest.java", "diffHunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class PatchTest extends TestSuiteBase {", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4NzM3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r537987370", "bodyText": "Add op won't cause conflict, as it just replaces the value. But we have added test case where parent doesn't exist, so it return Bad request. But will ask if we can induce some conflict. Thanks.", "author": "rakkuma", "createdAt": "2020-12-08T02:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMTc4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r538611787", "bodyText": "we don't add \"Test\" as prefix nor suffix to the test methods. Please remove the suffix for all the test methods here and elsewhere.", "author": "moderakh", "createdAt": "2020-12-08T17:07:26Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/PatchAsyncTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.PartitionKey;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PatchAsyncTest extends BatchTestBase {\n+    private CosmosAsyncClient client;\n+    private CosmosAsyncContainer container;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public PatchAsyncTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"emulator\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_PatchAsyncTest() {\n+        assertThat(this.client).isNull();\n+        this.client = getClientBuilder().contentResponseOnWriteEnabled(true).buildAsyncClient();\n+        container = getSharedMultiPartitionCosmosContainer(this.client);\n+    }\n+\n+    @AfterClass(groups = { \"emulator\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.client).isNotNull();\n+        this.client.close();\n+    }\n+\n+    @Test(groups = {  \"emulator\"  }, timeOut = TIMEOUT)\n+    public void patchInBatchTest() {", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNjAwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r544006007", "bodyText": "Fixed. Thanks.", "author": "rakkuma", "createdAt": "2020-12-16T06:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMjIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15283#discussion_r538612229", "bodyText": "ditto on the Test suffix please remove here and elsewhere.", "author": "moderakh", "createdAt": "2020-12-08T17:07:50Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/PatchTest.java", "diffHunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class PatchTest extends TestSuiteBase {\n+\n+    private CosmosClient client;\n+    private CosmosContainer container;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public PatchTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"emulator\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_PatchTest() {\n+        assertThat(this.client).isNull();\n+        this.client = getClientBuilder().contentResponseOnWriteEnabled(true).buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+    }\n+\n+    @AfterClass(groups = { \"emulator\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.client).isNotNull();\n+        this.client.close();\n+    }\n+\n+    @Test(groups = {  \"emulator\"  }, timeOut = TIMEOUT * 100)\n+    public void itemPatchSuccessTest() {", "originalCommit": "2b38fb7b4dd71e2d3991cadaeb434f5496d0740d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ab4db2ae00f294ade51c7b42cc69bd8efb5a6f25", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab4db2ae00f294ade51c7b42cc69bd8efb5a6f25", "message": "Code review changes\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-12-16T04:06:00Z", "type": "commit"}, {"oid": "5c1fb864d70f780b3ea60637b7c0da19efe3d202", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c1fb864d70f780b3ea60637b7c0da19efe3d202", "message": "Merge branch 'master' into users/rakkuma/patch-api", "committedDate": "2020-12-16T04:16:17Z", "type": "commit"}, {"oid": "582c0c7914056961312d2785f47a35602ba3cf13", "url": "https://github.com/Azure/azure-sdk-for-java/commit/582c0c7914056961312d2785f47a35602ba3cf13", "message": "Code review changes\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-12-16T05:05:26Z", "type": "commit"}, {"oid": "02bffc3afc6796ad1cda6faa72ddba3085d4f395", "url": "https://github.com/Azure/azure-sdk-for-java/commit/02bffc3afc6796ad1cda6faa72ddba3085d4f395", "message": "Comments around idempotency and concurreny for increment\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2020-12-18T04:50:09Z", "type": "commit"}, {"oid": "b805392b9625665e957f1af1dd55e834486324af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b805392b9625665e957f1af1dd55e834486324af", "message": "Merge branch 'master' into users/rakkuma/patch-api", "committedDate": "2021-01-08T11:19:20Z", "type": "commit"}, {"oid": "f9a44d268522bcae2773c5c9dab9e1cd0f6045ae", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9a44d268522bcae2773c5c9dab9e1cd0f6045ae", "message": "Minor comment fix\n\nSigned-off-by: Rakesh Kumar <rakkuma@microsoft.com>", "committedDate": "2021-01-08T11:51:59Z", "type": "commit"}, {"oid": "0393df28e3fcb58e090a5002743a5329968c4579", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0393df28e3fcb58e090a5002743a5329968c4579", "message": "Merge branch 'master' into users/rakkuma/patch-api", "committedDate": "2021-01-11T06:59:17Z", "type": "commit"}]}