{"pr_number": 5483, "pr_title": "Add QueryContext to replace BrokerRequest in the query engine", "pr_createdAt": "2020-06-02T02:26:46Z", "pr_url": "https://github.com/apache/pinot/pull/5483", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MzA2Mw==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r433593063", "bodyText": "Why call this ServerQuery?", "author": "kishoreg", "createdAt": "2020-06-02T02:54:24Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/request/v2/ServerQuery.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.request.v2;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+public class ServerQuery {", "originalCommit": "9c80df275a64781fad00b35fe18a44e7af6fb480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNTAzMQ==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r433615031", "bodyText": "This object can have some Server specific optimizations or pre-computed result, which might not apply to Broker. For example, we don't need to compile the filter for broker. We can add a separate BrokerQuery which only contain the information that Broker needs.\nExpression, Function are common and shared for both Broker and Server.", "author": "Jackie-Jiang", "createdAt": "2020-06-02T04:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MzA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzA2OA==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r434193068", "bodyText": "@kishoreg After reconsideration, changed it to QueryRequest and use it on both Broker and Server side. We can use a wrapper class on server side (E.g. ServerQueryRequest) to store the server specific helper variables.", "author": "Jackie-Jiang", "createdAt": "2020-06-02T21:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MzA2Mw=="}], "type": "inlineReview"}, {"oid": "b526863d6104baff3602ae2b0d972f9884f262f9", "url": "https://github.com/apache/pinot/commit/b526863d6104baff3602ae2b0d972f9884f262f9", "message": "Add ServerQuery to replace BrokerRequest in server execution engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\nIn this PR, we introduced a new Object - ServerQuery to represent the\nquery request on server side. It is already fully compiled and can be\nshared by all the segments.\nWe can also add helper variables into this class to cache the result\nof the common operations for all segments to improve the performance.\nThe new ServerQuery can also help isolating the execution layer from\nthe transport layer. In the future if we decide to switch to another\nprotocol for Broker-Server communication, we don't need to change\nanything for the execution layer. All we need is a new converter to\nconvert the transport Object to ServerQuery.\n\nMinor fixes:\n- Support transform expression for IN and BETWEEN predicate", "committedDate": "2020-06-02T04:27:06Z", "type": "forcePushed"}, {"oid": "087337ae392d6f9b212fdd5e0d077a5a3601a22a", "url": "https://github.com/apache/pinot/commit/087337ae392d6f9b212fdd5e0d077a5a3601a22a", "message": "Add QueryRequest to replace BrokerRequest in query execution engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\nIn this PR, we introduced a new Object - QueryRequest to represent the\nquery request. It is already fully compiled and can be shared by all the\nsegments.\nThe new QueryRequest can also help isolating the execution layer from the\ntransport layer. In the future if we decide to switch to another protocol\nfor Broker-Server communication, we don't need to change anything for the\nexecution layer. All we need is a new converter to convert the transport\nObject to QueryRequest.\n\nThis PR only introduces the new QueryRequest and the converter from\nBorkerRequest to QueryRequest. The following PRs will make incremental\nchanges to move the query engine to use the new QueryRequest.\n\nMinor fixes:\n- Support transform expression for IN and BETWEEN predicate", "committedDate": "2020-06-02T21:37:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxODU2NA==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r434318564", "bodyText": "Isn't the damage already done when an expression from PinotQuery was converted to a string in BrokerRequest? Can we always get back the original expression from the string inside BrokerRequest (I recently ran into an issue where we lost the info whether a token was literal or not, will dig up the details).", "author": "mayankshriv", "createdAt": "2020-06-03T05:37:23Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/request/v2/utils/BrokerRequestToQueryRequestConverter.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.request.v2.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.pinot.common.request.AggregationInfo;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.GroupBy;\n+import org.apache.pinot.common.request.Selection;\n+import org.apache.pinot.common.request.SelectionSort;\n+import org.apache.pinot.common.request.v2.Expression;\n+import org.apache.pinot.common.request.v2.FilterFunction;\n+import org.apache.pinot.common.request.v2.Function;\n+import org.apache.pinot.common.request.v2.OrderByExpression;\n+import org.apache.pinot.common.request.v2.QueryRequest;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.apache.pinot.pql.parsers.pql2.ast.AstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.FunctionCallAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.LiteralAstNode;\n+\n+\n+public class BrokerRequestToQueryRequestConverter {", "originalCommit": "087337ae392d6f9b212fdd5e0d077a5a3601a22a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "42f1675f355e2975b4b20ef0c62d97a5c5c93c3b", "url": "https://github.com/apache/pinot/commit/42f1675f355e2975b4b20ef0c62d97a5c5c93c3b", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\n QueryContext.\n\nMinor fixes:\n- Support transform expression for IN and BETWEEN predicate\n- Support escape single quote in SQL String literal", "committedDate": "2020-06-05T05:59:26Z", "type": "forcePushed"}, {"oid": "89a6e6e0a92a1c87956050eb60e76683713a70cc", "url": "https://github.com/apache/pinot/commit/89a6e6e0a92a1c87956050eb60e76683713a70cc", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\n QueryContext.\n\nMinor fixes:\n- Support transform expression for IN and BETWEEN predicate\n- Support escape single quote in SQL String literal", "committedDate": "2020-06-05T06:20:41Z", "type": "forcePushed"}, {"oid": "9c535a1e8775ac8db1ee18707fd044dfd692cfcb", "url": "https://github.com/apache/pinot/commit/9c535a1e8775ac8db1ee18707fd044dfd692cfcb", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-08T18:46:08Z", "type": "forcePushed"}, {"oid": "993bd2bf1296d3f7061c47a846e8d254b05b943e", "url": "https://github.com/apache/pinot/commit/993bd2bf1296d3f7061c47a846e8d254b05b943e", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-10T20:00:16Z", "type": "forcePushed"}, {"oid": "9a111e48040063fe4a071e6b84d5de4724290a13", "url": "https://github.com/apache/pinot/commit/9a111e48040063fe4a071e6b84d5de4724290a13", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-10T20:12:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDg4Mw==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r438794883", "bodyText": "We already have this class right? The Calcite SQL compilation path uses Expression already. Why add it again?", "author": "siddharthteotia", "createdAt": "2020-06-11T13:44:47Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/Expression.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+\n+/**\n+ * The {@code Expression} class represents an expression in the query.", "originalCommit": "9a111e48040063fe4a071e6b84d5de4724290a13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NDIxNQ==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r438964215", "bodyText": "Added this new Expression class for 2 reasons:\n\nThe function is represented with the new added FunctionInfo class (Pinot domain class which identifies whether the function is Aggregation or Transform before sending the query to each segment)\nCalcite Expression is a Thrift object which we use for wiring. It cannot be evolved along with the query execution engine. We should have a separate POJO class to encapsulate the information needed by the query engine, and perform the pre-computation before getting into each segment if possible.\n\nThis Expression class will replace the TransformExpressionTree in the following PRs of deprecating BrokerRequest.", "author": "Jackie-Jiang", "createdAt": "2020-06-11T17:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3NzMwMA==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r439577300", "bodyText": "I agree with the change, however, can we rename one of them (I am guessing we can't rename thrift one). It becomes very confusion with two classes of same name.", "author": "mayankshriv", "createdAt": "2020-06-12T18:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDk5Mw==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r438794993", "bodyText": "Today execution engine is based on FilterQueryTree. So the wire request contains FilterQuery and FilterSubqueryMap. On the server, FilterPlanNode converts these into FilterQueryTree for each segment level execution.\nWhy can't we continue to leverage FilterQueryTree? We should just create it once (since it is segment independent) and stash it away in QueryContext. It already encapsulates all the information that this class seems to provide.", "author": "siddharthteotia", "createdAt": "2020-06-11T13:44:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/FilterInfo.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.pinot.core.query.request.context.predicate.Predicate;\n+\n+\n+/**\n+ * The {@code FilterInfo} class encapsulates the information of the filter in the query. Both WHERE clause and HAVING\n+ * clause are modeled as a filter.\n+ */\n+public class FilterInfo {", "originalCommit": "9a111e48040063fe4a071e6b84d5de4724290a13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MTU4MA==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r438971580", "bodyText": "FilterQueryTree will be replaced with the FilterInfo in the following PRs of deprecating BrokerRequest.\nWe want to replace FilterQueryTree for the following reasons:\n\nIt has the Thrift object FilterOperator\nThe value is not a good abstraction for Predicate (e.g. for RANGE, it is a single string of [a\\t\\tb])\nThe predicate is not pre-computed", "author": "Jackie-Jiang", "createdAt": "2020-06-11T17:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NDk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NTEzMg==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r438795132", "bodyText": "Is it correct to say that that this can be constructed on the server regardless of whether the wire object is BrokeRequest or PinotQuery. So we need to have 2 converters to be used upon request deserialization on the server side?\n\nBrokerRequest to QueryRequest\nPinotQuery to QueryRequest", "author": "siddharthteotia", "createdAt": "2020-06-11T13:45:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/QueryContext.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+/**\n+ * The {@code QueryContext} class encapsulates all the query related information extracted from the wiring Object.", "originalCommit": "9a111e48040063fe4a071e6b84d5de4724290a13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NDk1Ng==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r438974956", "bodyText": "Yes and no. We always use BrokerRequest as the wire object right now, and it has the PinotQuery inside for SQL queries. We only need one converter from BrokerRequest to QueryRequest, but when PinotQuery exists, it will try to convert from PinotQuery.\nWhen we switch the wire object, all we need to do is add a new converter without any change on the query engine", "author": "Jackie-Jiang", "createdAt": "2020-06-11T18:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NTEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4Mjg2Nw==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r439082867", "bodyText": "what about SCALAR functions", "author": "kishoreg", "createdAt": "2020-06-11T21:35:05Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/FunctionInfo.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+\n+/**\n+ * The {@code FunctionInfo} class represents the function in the Expression.\n+ * <p>Pinot currently supports 2 types of functions: Aggregation (e.g. SUM, MAX) and Transform (e.g. ADD, SUB).\n+ */\n+public class FunctionInfo {\n+  public enum Type {\n+    AGGREGATION, TRANSFORM", "originalCommit": "9a111e48040063fe4a071e6b84d5de4724290a13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzU0MQ==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r439133541", "bodyText": "Scalar function is one type of Transform function", "author": "Jackie-Jiang", "createdAt": "2020-06-12T00:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4Mjg2Nw=="}], "type": "inlineReview"}, {"oid": "6e570f816ae61d0405d9db2817ffa6e5751a85c3", "url": "https://github.com/apache/pinot/commit/6e570f816ae61d0405d9db2817ffa6e5751a85c3", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-11T23:56:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3Nzk1OQ==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r439577959", "bodyText": "Same here, please avoid classes with same names.", "author": "mayankshriv", "createdAt": "2020-06-12T18:25:06Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/Function.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+\n+/**\n+ * The {@code Function} class represents the function in the Expression.\n+ * <p>Pinot currently supports 2 types of functions: Aggregation (e.g. SUM, MAX) and Transform (e.g. ADD, SUB).\n+ */\n+public class Function {", "originalCommit": "6e570f816ae61d0405d9db2817ffa6e5751a85c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ec8a569922f30835592f6ea8ff4b80bb520b719", "url": "https://github.com/apache/pinot/commit/8ec8a569922f30835592f6ea8ff4b80bb520b719", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-12T23:55:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwNjIwNQ==", "url": "https://github.com/apache/pinot/pull/5483#discussion_r439706205", "bodyText": "I would highly suggest to use a different suffix otherwise we will end up using these package absolute references in this class since this is referring to both query context pojos as well as their thrift counterparts.\nMay be choose \"info\" as the suffix. For the predicate classes that are duplicated, are we going to delete them at some point. I think we need to after query engine starts using predicate from the context. So may be until then let's keep a different name and then start using a suitable names once existing classes are deleted.\nI am not good with names so \"info\" is the suffix that comes to mind.", "author": "siddharthteotia", "createdAt": "2020-06-13T03:54:37Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverter.java", "diffHunk": "@@ -0,0 +1,423 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.FunctionDefinitionRegistry;\n+import org.apache.pinot.common.request.AggregationInfo;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.request.ExpressionType;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.GroupBy;\n+import org.apache.pinot.common.request.PinotQuery;\n+import org.apache.pinot.common.request.Selection;\n+import org.apache.pinot.common.request.SelectionSort;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.core.query.exception.BadQueryRequestException;\n+import org.apache.pinot.core.query.request.context.Expression;\n+import org.apache.pinot.core.query.request.context.Filter;\n+import org.apache.pinot.core.query.request.context.Function;\n+import org.apache.pinot.core.query.request.context.OrderByExpression;\n+import org.apache.pinot.core.query.request.context.QueryContext;\n+import org.apache.pinot.core.query.request.context.predicate.EqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.InPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNotNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotEqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotInPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RangePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RegexpLikePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.TextMatchPredicate;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.apache.pinot.pql.parsers.pql2.ast.AstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.pql.parsers.pql2.ast.FunctionCallAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.LiteralAstNode;\n+\n+\n+public class BrokerRequestToQueryContextConverter {\n+  private BrokerRequestToQueryContextConverter() {\n+  }\n+\n+  private static final Pql2Compiler PQL_COMPILER = new Pql2Compiler();\n+\n+  /**\n+   * Converts the given BrokerRequest to a QueryContext.\n+   * <p>Use PinotQuery if available to avoid the unnecessary parsing of the expression.\n+   * <p>TODO: We cannot use PinotQuery to generate the {@code filter} because {@code BrokerRequestOptimizer} only\n+   *          optimizes the BrokerRequest but not the PinotQuery.\n+   */\n+  public static QueryContext convertToQueryContext(BrokerRequest brokerRequest) {\n+    PinotQuery pinotQuery = brokerRequest.getPinotQuery();\n+\n+    List<Expression> selectExpressions;\n+    Map<Expression, String> aliasMap;\n+    List<Expression> groupByExpressions = null;\n+    int limit;\n+    int offset = 0;\n+    if (pinotQuery != null) {\n+      aliasMap = new HashMap<>();\n+      List<org.apache.pinot.common.request.Expression> selectList = pinotQuery.getSelectList();\n+      int numExpressions = selectList.size();", "originalCommit": "8ec8a569922f30835592f6ea8ff4b80bb520b719", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cfaaac372b1d4474fcbb78e7198bbec507085d6c", "url": "https://github.com/apache/pinot/commit/cfaaac372b1d4474fcbb78e7198bbec507085d6c", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-15T04:07:34Z", "type": "forcePushed"}, {"oid": "c740836ba76df30eacbc66ee4606c51c87736253", "url": "https://github.com/apache/pinot/commit/c740836ba76df30eacbc66ee4606c51c87736253", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-15T04:08:49Z", "type": "commit"}, {"oid": "c740836ba76df30eacbc66ee4606c51c87736253", "url": "https://github.com/apache/pinot/commit/c740836ba76df30eacbc66ee4606c51c87736253", "message": "Add QueryContext to replace BrokerRequest in the query engine\n\nMotivation:\nFor historic reason, BrokerRequest does not support expressions natively.\nIn order to support expressions (transform), the current solution is to\nstore the expressions as String and compile them when constructing the\noperators.\nThe problem with this approach is that the same compilation is performed\nmultiple times on EACH segment. This could cause performance degradation\nwhen each server is hosting lots of segments.\n\nIn this PR, we introduced a new Object - QueryContext to encapsulate all\nthe query related information to be used by the query engine. It is\nalready fully compiled and can be shared by all the segments.\nThe reason of introducing the new QueryContext over using the PinotQuery\nis that with QueryContext:\n- It is not used in the wiring layer so that execution layer can be\n  decoupled from the wiring layer, and changes for one layer won't affect\n  the other layer.\n- It is very hard to change wiring Object (PinotQuery) because it involves\n  protocol change, so we should make it as generic as possible to support\n  future features. Instead, QueryContext can be upgraded along with the\n  new future support in query engine as needed, and we don't have to make\n  it very generic, which can help save the overhead of handling generic\n  Objects.\n- In case we need to change the wiring Object (e.g. switch from Thrift to\n  Protobuf), we don't need to change the whole query engine.\n- We can add some helper variables or methods in the context classes which\n  can be shared for all segments to reduce the repetitive work for each\n  segment.\n\nThis PR only introduces the new QueryContext, the related context classes\nand a Util class to get QueryContext from BrokerRequest. The following PRs\nwill make incremental changes to move the query engine to use the new\nQueryContext.", "committedDate": "2020-06-15T04:08:49Z", "type": "forcePushed"}]}