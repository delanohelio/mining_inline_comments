{"pr_number": 5046, "pr_title": "Re-design the broker routing", "pr_createdAt": "2020-02-03T23:09:08Z", "pr_url": "https://github.com/apache/pinot/pull/5046", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4MjI5NA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375682294", "bodyText": "+1 on this idea. This can potentially help use cases that are using onheap dictionary with very high qps.", "author": "snleee", "createdAt": "2020-02-06T07:52:12Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/segmentselector/OfflineSegmentSelector.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.segmentselector;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+public class OfflineSegmentSelector implements SegmentSelector {\n+  private volatile List<String> _segments;\n+\n+  @Override\n+  public void init(ExternalView externalView, Set<String> onlineSegments) {\n+    onExternalViewChange(externalView, onlineSegments);\n+  }\n+\n+  @Override\n+  public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {\n+    Set<String> externalViewSegments = externalView.getPartitionSet();\n+    List<String> segments = new ArrayList<>(externalViewSegments.size());\n+\n+    for (String segment : externalViewSegments) {\n+      // Keep segments in both external view and ideal state\n+      // - New added segment might only exist in ideal state\n+      // - New removed segment might only exist in external view\n+      if (!onlineSegments.contains(segment)) {\n+        continue;\n+      }\n+\n+      // TODO: for new added segments, before all replicas are up, consider not selecting them to avoid causing", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjEyMA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375686120", "bodyText": "The segments selected should the whole dataset (table) without overlap is a bit vague. This statement naturally makes me think of the selection step for merge/roll up use case where we can have segments with duplicate data within the same table. If I look at the actual offline, realtime segment selector implementation, it currently handles \"OFFLINE/ONLINE/ERROR/CONSUMING\" issues, which is slightly different from selecting whole dataset. Current code looks more like filtering out invalid segments.\nAlso, the definition of whole dataset can be either all segments from idealstate or all segments in external view with at least one ONLINE and so on.  Are we considering this as the implementation specific issue for each type of segment selector?", "author": "snleee", "createdAt": "2020-02-06T08:03:41Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/segmentselector/SegmentSelector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.segmentselector;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+/**\n+ * The segment selector selects the segments for the query. The segments selected should cover the whole dataset (table)", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTE2MQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376149161", "bodyText": "Only LLC realtime table looks at the external view CONSUMING state to ensure only the first CONSUMING segment for each partition getting selected to prevent overlap data. It will not look at other states, which will be handled by the instance selector instead.", "author": "Jackie-Jiang", "createdAt": "2020-02-06T23:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NjEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5MDcyNA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375690724", "bodyText": "We should consider to make this to List<SegmentPruner>.\nFor instance, it's a valid use case to do the pruning on both partition and time column value.", "author": "snleee", "createdAt": "2020-02-06T08:16:27Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/RoutingManager.java", "diffHunk": "@@ -0,0 +1,481 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Nullable;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.HelixConstants;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.broker.broker.helix.ClusterChangeHandler;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelector;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPruner;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPrunerFactory;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelector;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryInfo;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryManager;\n+import org.apache.pinot.common.config.TableConfig;\n+import org.apache.pinot.common.config.TableNameBuilder;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metrics.BrokerMeter;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.RealtimeSegmentOnlineOfflineStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+import org.apache.pinot.core.transport.ServerInstance;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@code RoutingManager} manages the routing of all tables hosted by the broker instance.\n+ */\n+public class RoutingManager implements ClusterChangeHandler {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(RoutingManager.class);\n+\n+  private final BrokerMetrics _brokerMetrics;\n+  private final Map<String, RoutingEntry> _routingEntryMap = new ConcurrentHashMap<>();\n+  private final Map<String, ServerInstance> _enabledServerInstanceMap = new ConcurrentHashMap<>();\n+\n+  private BaseDataAccessor<ZNRecord> _zkDataAccessor;\n+  private String _externalViewPathPrefix;\n+  private String _idealStatePathPrefix;\n+  private String _instanceConfigsPath;\n+  private ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public RoutingManager(BrokerMetrics brokerMetrics) {\n+    _brokerMetrics = brokerMetrics;\n+  }\n+\n+  @Override\n+  public void init(HelixManager helixManager) {\n+    HelixDataAccessor helixDataAccessor = helixManager.getHelixDataAccessor();\n+    _zkDataAccessor = helixDataAccessor.getBaseDataAccessor();\n+    _externalViewPathPrefix = helixDataAccessor.keyBuilder().externalViews().getPath() + \"/\";\n+    _idealStatePathPrefix = helixDataAccessor.keyBuilder().idealStates().getPath() + \"/\";\n+    _instanceConfigsPath = helixDataAccessor.keyBuilder().instanceConfigs().getPath();\n+    _propertyStore = helixManager.getHelixPropertyStore();\n+  }\n+\n+  @Override\n+  public synchronized void processClusterChange(HelixConstants.ChangeType changeType) {\n+    Preconditions.checkState(changeType == HelixConstants.ChangeType.EXTERNAL_VIEW\n+        || changeType == HelixConstants.ChangeType.INSTANCE_CONFIG, \"Illegal change type: \" + changeType);\n+    if (changeType == HelixConstants.ChangeType.EXTERNAL_VIEW) {\n+      processExternalViewChange();\n+    } else {\n+      processInstanceConfigChange();\n+    }\n+  }\n+\n+  private void processExternalViewChange() {\n+    LOGGER.info(\"Processing external view change\");\n+    long startTimeMs = System.currentTimeMillis();\n+\n+    int numTables = _routingEntryMap.size();\n+    if (numTables == 0) {\n+      LOGGER.info(\"No table exists in the routing, skipping processing external view change\");\n+      return;\n+    }\n+\n+    List<RoutingEntry> routingEntries = new ArrayList<>(numTables);\n+    List<String> externalViewPaths = new ArrayList<>(numTables);\n+    for (Map.Entry<String, RoutingEntry> entry : _routingEntryMap.entrySet()) {\n+      String tableNameWithType = entry.getKey();\n+      routingEntries.add(entry.getValue());\n+      externalViewPaths.add(_externalViewPathPrefix + tableNameWithType);\n+    }\n+    Stat[] stats = _zkDataAccessor.getStats(externalViewPaths, AccessOption.PERSISTENT);\n+    long fetchStatsEndTimeMs = System.currentTimeMillis();\n+\n+    int numRoutingEntriesToUpdate = 0;\n+    for (int i = 0; i < numTables; i++) {\n+      Stat stat = stats[i];\n+      if (stat != null) {\n+        RoutingEntry routingEntry = routingEntries.get(i);\n+        if (stat.getVersion() != routingEntry.getLastUpdateExternalViewVersion()) {\n+          numRoutingEntriesToUpdate++;\n+          try {\n+            updateRoutingEntryOnExternalViewChange(routingEntry);\n+          } catch (Exception e) {\n+            LOGGER\n+                .error(\"Caught unexpected exception while updating routing entry on external view change for table: {}\",\n+                    routingEntry.getTableNameWithType(), e);\n+          }\n+        }\n+      }\n+    }\n+    long updateRoutingEntriesEndTimeMs = System.currentTimeMillis();\n+\n+    LOGGER.info(\n+        \"Processed external view change in {}ms (fetch {} external view stats: {}ms, update {} routing entries: {}ms)\",\n+        updateRoutingEntriesEndTimeMs - startTimeMs, numTables, fetchStatsEndTimeMs - startTimeMs,\n+        numRoutingEntriesToUpdate, updateRoutingEntriesEndTimeMs - fetchStatsEndTimeMs);\n+  }\n+\n+  private void updateRoutingEntryOnExternalViewChange(RoutingEntry routingEntry) {\n+    String tableNameWithType = routingEntry.getTableNameWithType();\n+    ExternalView externalView = getExternalView(tableNameWithType);\n+    if (externalView == null) {\n+      LOGGER.warn(\"Failed to find external view for table: {}, skipping updating routing entry\", tableNameWithType);\n+      return;\n+    }\n+    Set<String> onlineSegments = getOnlineSegments(tableNameWithType);\n+    if (onlineSegments == null) {\n+      LOGGER.warn(\"Failed to find ideal state for table: {}, skipping updating routing entry\", tableNameWithType);\n+      return;\n+    }\n+    routingEntry.onExternalViewChange(externalView, onlineSegments);\n+  }\n+\n+  @Nullable\n+  private ExternalView getExternalView(String tableNameWithType) {\n+    Stat stat = new Stat();\n+    ZNRecord znRecord = _zkDataAccessor.get(_externalViewPathPrefix + tableNameWithType, stat, AccessOption.PERSISTENT);\n+    if (znRecord != null) {\n+      znRecord.setVersion(stat.getVersion());\n+      return new ExternalView(znRecord);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Nullable\n+  private Set<String> getOnlineSegments(String tableNameWithType) {\n+    ZNRecord znRecord = _zkDataAccessor.get(_idealStatePathPrefix + tableNameWithType, null, AccessOption.PERSISTENT);\n+    if (znRecord != null) {\n+      Map<String, Map<String, String>> segmentAssignment = znRecord.getMapFields();\n+      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n+      for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n+        Map<String, String> instanceStateMap = entry.getValue();\n+        if (instanceStateMap.containsValue(RealtimeSegmentOnlineOfflineStateModel.ONLINE) || instanceStateMap\n+            .containsValue(RealtimeSegmentOnlineOfflineStateModel.CONSUMING)) {\n+          onlineSegments.add(entry.getKey());\n+        }\n+      }\n+      return onlineSegments;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  private void processInstanceConfigChange() {\n+    LOGGER.info(\"Processing instance config change\");\n+    long startTimeMs = System.currentTimeMillis();\n+\n+    List<ZNRecord> instanceConfigZNRecords =\n+        _zkDataAccessor.getChildren(_instanceConfigsPath, null, AccessOption.PERSISTENT);\n+    long fetchInstanceConfigsEndTimeMs = System.currentTimeMillis();\n+\n+    // Calculate new enabled and disabled instances\n+    Set<String> enabledInstances = new HashSet<>();\n+    List<String> newEnabledInstances = new ArrayList<>();\n+    for (ZNRecord instanceConfigZNRecord : instanceConfigZNRecords) {\n+      String instance = instanceConfigZNRecord.getId();\n+      if (isInstanceEnabled(instanceConfigZNRecord)) {\n+        enabledInstances.add(instance);\n+\n+        // Always refresh the server instance with the latest instance config in case it changes\n+        ServerInstance serverInstance = new ServerInstance(new InstanceConfig(instanceConfigZNRecord));\n+        if (_enabledServerInstanceMap.put(instance, serverInstance) == null) {\n+          newEnabledInstances.add(instance);\n+        }\n+      }\n+    }\n+    List<String> newDisabledInstances = new ArrayList<>();\n+    for (String instance : _enabledServerInstanceMap.keySet()) {\n+      if (!enabledInstances.contains(instance)) {\n+        newDisabledInstances.add(instance);\n+      }\n+    }\n+    List<String> changedInstances = new ArrayList<>(newEnabledInstances.size() + newDisabledInstances.size());\n+    changedInstances.addAll(newEnabledInstances);\n+    changedInstances.addAll(newDisabledInstances);\n+    long calculateChangedInstancesEndTimeMs = System.currentTimeMillis();\n+\n+    // Update routing entry for all tables\n+    for (RoutingEntry routingEntry : _routingEntryMap.values()) {\n+      try {\n+        routingEntry.onInstancesChange(enabledInstances, changedInstances);\n+      } catch (Exception e) {\n+        LOGGER.error(\"Caught unexpected exception while updating routing entry on instances change for table: {}\",\n+            routingEntry.getTableNameWithType(), e);\n+      }\n+    }\n+    long updateRoutingEntriesEndTimeMs = System.currentTimeMillis();\n+\n+    // Remove new disabled instances from _enabledServerInstanceMap after updating all routing entries to ensure it\n+    // always contains the selected instances\n+    _enabledServerInstanceMap.keySet().removeAll(newDisabledInstances);\n+\n+    LOGGER.info(\n+        \"Processed instance config change in {}ms (fetch {} instance configs: {}ms, calculate changed instances: {}ms, update {} routing entries: {}ms), new enabled instances: {}, new disabled instances: {}\",\n+        updateRoutingEntriesEndTimeMs - startTimeMs, instanceConfigZNRecords.size(),\n+        fetchInstanceConfigsEndTimeMs - startTimeMs, calculateChangedInstancesEndTimeMs - fetchInstanceConfigsEndTimeMs,\n+        _routingEntryMap.size(), updateRoutingEntriesEndTimeMs - calculateChangedInstancesEndTimeMs,\n+        newEnabledInstances, newDisabledInstances);\n+  }\n+\n+  private static boolean isInstanceEnabled(ZNRecord instanceConfigZNRecord) {\n+    if (\"false\"\n+        .equals(instanceConfigZNRecord.getSimpleField(InstanceConfig.InstanceConfigProperty.HELIX_ENABLED.name()))) {\n+      return false;\n+    }\n+    if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.IS_SHUTDOWN_IN_PROGRESS))) {\n+      return false;\n+    }\n+    if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.QUERIES_DISABLED))) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Builds/rebuilds the routing for the given table.\n+   */\n+  public synchronized void buildRouting(String tableNameWithType) {\n+    LOGGER.info(\"Building routing for table: {}\", tableNameWithType);\n+\n+    TableConfig tableConfig = ZKMetadataProvider.getTableConfig(_propertyStore, tableNameWithType);\n+    Preconditions.checkState(tableConfig != null, \"Failed to find table config for table: {}\", tableNameWithType);\n+    ExternalView externalView = getExternalView(tableNameWithType);\n+    Preconditions.checkState(externalView != null, \"Failed to find external view for table: {}\", tableNameWithType);\n+    Set<String> onlineSegments = getOnlineSegments(tableNameWithType);\n+    Preconditions.checkState(onlineSegments != null, \"Failed to find ideal state for table: {}\", tableNameWithType);\n+    Set<String> enabledInstances = _enabledServerInstanceMap.keySet();\n+\n+    SegmentSelector segmentSelector = SegmentSelectorFactory.getSegmentSelector(tableConfig);\n+    segmentSelector.init(externalView, onlineSegments);\n+    SegmentPruner segmentPruner = SegmentPrunerFactory.getSegmentPruner(tableConfig, _propertyStore);\n+    segmentPruner.init(externalView, onlineSegments);\n+    InstanceSelector instanceSelector = InstanceSelectorFactory.getInstanceSelector(tableConfig, _brokerMetrics);\n+    instanceSelector.init(enabledInstances, externalView, onlineSegments);\n+    int externalViewVersion = externalView.getRecord().getVersion();\n+\n+    // Add time boundary manager if both offline and real-time part exist for a hybrid table\n+    TimeBoundaryManager timeBoundaryManager = null;\n+    String rawTableName = TableNameBuilder.extractRawTableName(tableNameWithType);\n+    if (TableNameBuilder.isOfflineTableResource(tableNameWithType)) {\n+      // Current table is offline\n+      String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n+      if (_routingEntryMap.containsKey(realtimeTableName)) {\n+        LOGGER.info(\"Adding time boundary manager for table: {}\", tableNameWithType);\n+        timeBoundaryManager = new TimeBoundaryManager(tableConfig, _propertyStore);\n+        timeBoundaryManager.init(externalView, onlineSegments);\n+      }\n+    } else {\n+      // Current table is real-time\n+      String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n+      RoutingEntry offlineTableRoutingEntry = _routingEntryMap.get(offlineTableName);\n+      if (offlineTableRoutingEntry != null && offlineTableRoutingEntry.getTimeBoundaryManager() == null) {\n+        LOGGER.info(\"Adding time boundary manager for table: {}\", offlineTableName);\n+\n+        // NOTE: Add time boundary manager to the offline part before adding the routing for the real-time part to\n+        // ensure no overlapping data getting queried\n+        TableConfig offlineTableConfig = ZKMetadataProvider.getTableConfig(_propertyStore, offlineTableName);\n+        Preconditions\n+            .checkState(offlineTableConfig != null, \"Failed to find table config for table: {}\", offlineTableName);\n+        ExternalView offlineTableExternalView = getExternalView(offlineTableName);\n+        Preconditions.checkState(offlineTableExternalView != null, \"Failed to find external view for table: {}\",\n+            offlineTableName);\n+        Set<String> offlineTableOnlineSegments = getOnlineSegments(offlineTableName);\n+        Preconditions.checkState(offlineTableOnlineSegments != null, \"Failed to find ideal state for table: {}\",\n+            offlineTableName);\n+        TimeBoundaryManager offlineTableTimeBoundaryManager =\n+            new TimeBoundaryManager(offlineTableConfig, _propertyStore);\n+        offlineTableTimeBoundaryManager.init(offlineTableExternalView, offlineTableOnlineSegments);\n+        offlineTableRoutingEntry.setTimeBoundaryManager(offlineTableTimeBoundaryManager);\n+      }\n+    }\n+\n+    RoutingEntry routingEntry =\n+        new RoutingEntry(tableNameWithType, segmentSelector, segmentPruner, instanceSelector, externalViewVersion,\n+            timeBoundaryManager);\n+    if (_routingEntryMap.put(tableNameWithType, routingEntry) == null) {\n+      LOGGER.info(\"Built routing for table: {}\", tableNameWithType);\n+    } else {\n+      LOGGER.info(\"Rebuilt routing for table: {}\", tableNameWithType);\n+    }\n+  }\n+\n+  /**\n+   * Removes the routing for the given table.\n+   */\n+  public synchronized void removeRouting(String tableNameWithType) {\n+    LOGGER.info(\"Removing routing for table: {}\", tableNameWithType);\n+    if (_routingEntryMap.remove(tableNameWithType) != null) {\n+      LOGGER.info(\"Removed routing for table: {}\", tableNameWithType);\n+\n+      // Remove time boundary manager for the offline part routing if the removed routing is the real-time part of a\n+      // hybrid table\n+      if (TableNameBuilder.isRealtimeTableResource(tableNameWithType)) {\n+        String offlineTableName =\n+            TableNameBuilder.OFFLINE.tableNameWithType(TableNameBuilder.extractRawTableName(tableNameWithType));\n+        RoutingEntry routingEntry = _routingEntryMap.get(offlineTableName);\n+        if (routingEntry != null) {\n+          routingEntry.setTimeBoundaryManager(null);\n+          LOGGER.info(\"Removed time boundary manager for table: {}\", offlineTableName);\n+        }\n+      }\n+    } else {\n+      LOGGER.warn(\"Routing does not exist for table: {}, skipping removing routing\", tableNameWithType);\n+    }\n+  }\n+\n+  /**\n+   * Refreshes the metadata for the given segment (called when segment is getting refreshed).\n+   */\n+  public synchronized void refreshSegment(String tableNameWithType, String segment) {\n+    LOGGER.info(\"Refreshing segment: {} for table: {}\", segment, tableNameWithType);\n+    RoutingEntry routingEntry = _routingEntryMap.get(tableNameWithType);\n+    if (routingEntry != null) {\n+      routingEntry.refreshSegment(segment);\n+      LOGGER.info(\"Refreshed segment: {} for table: {}\", segment, tableNameWithType);\n+    } else {\n+      LOGGER.warn(\"Routing does not exist for table: {}, skipping refreshing segment\", tableNameWithType);\n+    }\n+  }\n+\n+  /**\n+   * Returns {@code true} if the routing exists for the given table.\n+   */\n+  public boolean routingExists(String tableNameWithType) {\n+    return _routingEntryMap.containsKey(tableNameWithType);\n+  }\n+\n+  /**\n+   * Returns the routing table (map from server instance to list of segments hosted by the server) based on the broker\n+   * request.\n+   * <p>NOTE: The broker request should already have the table suffix (_OFFLINE or _REALTIME) appended.\n+   */\n+  public Map<ServerInstance, List<String>> getRoutingTable(BrokerRequest brokerRequest) {\n+    String tableNameWithType = brokerRequest.getQuerySource().getTableName();\n+    RoutingEntry routingEntry = _routingEntryMap.get(tableNameWithType);\n+    Preconditions.checkState(routingEntry != null, \"Failed to find routing for table: %s\", tableNameWithType);\n+\n+    Map<String, String> segmentToInstanceMap = routingEntry.calculateSegmentToInstanceMap(brokerRequest);\n+    Map<ServerInstance, List<String>> routingTable = new HashMap<>();\n+    for (Map.Entry<String, String> entry : segmentToInstanceMap.entrySet()) {\n+      ServerInstance serverInstance = _enabledServerInstanceMap.get(entry.getValue());\n+      if (serverInstance != null) {\n+        routingTable.computeIfAbsent(serverInstance, k -> new ArrayList<>()).add(entry.getKey());\n+      } else {\n+        // Should not happen in normal case unless encountered unexpected exception when updating routing entries\n+        _brokerMetrics.addMeteredTableValue(tableNameWithType, BrokerMeter.SERVER_MISSING_FOR_ROUTING, 1L);\n+      }\n+    }\n+    return routingTable;\n+  }\n+\n+  /**\n+   * Returns the time boundary info for the given offline table name.\n+   * <p>NOTE: Time boundary info is only available for the offline part of the hybrid table.\n+   */\n+  @Nullable\n+  public TimeBoundaryInfo getTimeBoundaryInfo(String offlineTableName) {\n+    RoutingEntry routingEntry = _routingEntryMap.get(offlineTableName);\n+    Preconditions.checkState(routingEntry != null, \"Failed to find routing for table: %s\", offlineTableName);\n+    TimeBoundaryManager timeBoundaryManager = routingEntry.getTimeBoundaryManager();\n+    return timeBoundaryManager != null ? timeBoundaryManager.getTimeBoundaryInfo() : null;\n+  }\n+\n+  private static class RoutingEntry {\n+    final String _tableNameWithType;\n+    final SegmentSelector _segmentSelector;\n+    final SegmentPruner _segmentPruner;", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMzQwMQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376013401", "bodyText": "Good point. I was planning to add this later when more segment pruners are implemented, but I can also add them now to avoid unnecessary config change in the future", "author": "Jackie-Jiang", "createdAt": "2020-02-06T18:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5MDcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODM4Nw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376618387", "bodyText": "Added", "author": "Jackie-Jiang", "createdAt": "2020-02-07T21:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5MDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5NTY5Nw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375695697", "bodyText": "does this mean that all the v2 broker routing approaches compute the final mapping on the fly (no pre-computed routing tables)?", "author": "snleee", "createdAt": "2020-02-06T08:28:45Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/RoutingConfig.java", "diffHunk": "@@ -25,25 +25,48 @@\n \n \n public class RoutingConfig extends BaseJsonConfig {\n+  public static final String PARTITION_AWARE_SEGMENT_PRUNER_TYPE = \"partitionAware\";\n+  public static final String REPLICA_GROUP_INSTANCE_SELECTOR_TYPE = \"replicaGroup\";\n+\n+  @Deprecated", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTQxNw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376149417", "bodyText": "Yes.\nRemoved the deprecated key now, and will deprecate it once the new implementation getting plugged in.", "author": "Jackie-Jiang", "createdAt": "2020-02-07T00:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5NTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5NjkxNQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375696915", "bodyText": "IMO partition segment pruner seems to be better name? up to you.", "author": "snleee", "createdAt": "2020-02-06T08:31:36Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/RoutingConfig.java", "diffHunk": "@@ -25,25 +25,48 @@\n \n \n public class RoutingConfig extends BaseJsonConfig {\n+  public static final String PARTITION_AWARE_SEGMENT_PRUNER_TYPE = \"partitionAware\";", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MjkzMw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376662933", "bodyText": "Done", "author": "Jackie-Jiang", "createdAt": "2020-02-08T00:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5NjkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5ODA1OA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375698058", "bodyText": "Let's add @Deprecated with the PR that will hook this up with the real routing. Technically, we still depend on routingTableBuilderName.", "author": "snleee", "createdAt": "2020-02-06T08:34:25Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/RoutingConfig.java", "diffHunk": "@@ -25,25 +25,48 @@\n \n \n public class RoutingConfig extends BaseJsonConfig {\n+  public static final String PARTITION_AWARE_SEGMENT_PRUNER_TYPE = \"partitionAware\";\n+  public static final String REPLICA_GROUP_INSTANCE_SELECTOR_TYPE = \"replicaGroup\";\n+\n+  @Deprecated\n   public static final String ENABLE_DYNAMIC_COMPUTING_KEY = \"enableDynamicComputing\";\n \n   private final String _routingTableBuilderName;\n   private final Map<String, String> _routingTableBuilderOptions;\n \n+  private final String _segmentPrunerType;\n+  private final String _instanceSelectorType;\n+\n   @JsonCreator\n   public RoutingConfig(@JsonProperty(\"routingTableBuilderName\") @Nullable String routingTableBuilderName,\n-      @JsonProperty(\"routingTableBuilderOptions\") @Nullable Map<String, String> routingTableBuilderOptions) {\n+      @JsonProperty(\"routingTableBuilderOptions\") @Nullable Map<String, String> routingTableBuilderOptions,\n+      @JsonProperty(\"segmentPrunerType\") @Nullable String segmentPrunerType,\n+      @JsonProperty(\"instanceSelectorType\") @Nullable String instanceSelectorType) {\n     _routingTableBuilderName = routingTableBuilderName;\n     _routingTableBuilderOptions = routingTableBuilderOptions;\n+    _segmentPrunerType = segmentPrunerType;\n+    _instanceSelectorType = instanceSelectorType;\n   }\n \n+  @Deprecated", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2Mjk5Mw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376662993", "bodyText": "Good point", "author": "Jackie-Jiang", "createdAt": "2020-02-08T00:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5ODA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5ODYyOA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375698628", "bodyText": "Does this introduce any different behavior compared to the existing time boundary manager?", "author": "snleee", "createdAt": "2020-02-06T08:36:02Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/timeboundary/TimeBoundaryManager.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.timeboundary;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.config.TableConfig;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.TableType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@code TimeBoundaryManager} class manages the time boundary information for a table.\n+ * <p>TODO: Support SDF (simple date format) time column\n+ */\n+public class TimeBoundaryManager {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2Mjg1OQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376662859", "bodyText": "No, they are the same functioning wise. We make it table level so that we can rebuild it if necessary.", "author": "Jackie-Jiang", "createdAt": "2020-02-08T00:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY5ODYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwNjA3NQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375706075", "bodyText": "What if calculateSegmentToInstanceMap() got hit while we are processing onExternalViewChange() in the middle? (e.g. segment selector/pruner got updated while instance selector not updated. So, in the instance selection phase, some new segments came as part of prunedSegments but they don't exist in cached information in the instance selector -- probably the answer is simply not to route to new segments...).  - I'm pretty sure you already thought all of about this :)", "author": "snleee", "createdAt": "2020-02-06T08:53:21Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/RoutingManager.java", "diffHunk": "@@ -0,0 +1,481 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Nullable;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.HelixConstants;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.broker.broker.helix.ClusterChangeHandler;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelector;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPruner;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPrunerFactory;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelector;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryInfo;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryManager;\n+import org.apache.pinot.common.config.TableConfig;\n+import org.apache.pinot.common.config.TableNameBuilder;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metrics.BrokerMeter;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.RealtimeSegmentOnlineOfflineStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+import org.apache.pinot.core.transport.ServerInstance;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@code RoutingManager} manages the routing of all tables hosted by the broker instance.\n+ */\n+public class RoutingManager implements ClusterChangeHandler {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(RoutingManager.class);\n+\n+  private final BrokerMetrics _brokerMetrics;\n+  private final Map<String, RoutingEntry> _routingEntryMap = new ConcurrentHashMap<>();\n+  private final Map<String, ServerInstance> _enabledServerInstanceMap = new ConcurrentHashMap<>();\n+\n+  private BaseDataAccessor<ZNRecord> _zkDataAccessor;\n+  private String _externalViewPathPrefix;\n+  private String _idealStatePathPrefix;\n+  private String _instanceConfigsPath;\n+  private ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public RoutingManager(BrokerMetrics brokerMetrics) {\n+    _brokerMetrics = brokerMetrics;\n+  }\n+\n+  @Override\n+  public void init(HelixManager helixManager) {\n+    HelixDataAccessor helixDataAccessor = helixManager.getHelixDataAccessor();\n+    _zkDataAccessor = helixDataAccessor.getBaseDataAccessor();\n+    _externalViewPathPrefix = helixDataAccessor.keyBuilder().externalViews().getPath() + \"/\";\n+    _idealStatePathPrefix = helixDataAccessor.keyBuilder().idealStates().getPath() + \"/\";\n+    _instanceConfigsPath = helixDataAccessor.keyBuilder().instanceConfigs().getPath();\n+    _propertyStore = helixManager.getHelixPropertyStore();\n+  }\n+\n+  @Override\n+  public synchronized void processClusterChange(HelixConstants.ChangeType changeType) {\n+    Preconditions.checkState(changeType == HelixConstants.ChangeType.EXTERNAL_VIEW\n+        || changeType == HelixConstants.ChangeType.INSTANCE_CONFIG, \"Illegal change type: \" + changeType);\n+    if (changeType == HelixConstants.ChangeType.EXTERNAL_VIEW) {\n+      processExternalViewChange();\n+    } else {\n+      processInstanceConfigChange();\n+    }\n+  }\n+\n+  private void processExternalViewChange() {\n+    LOGGER.info(\"Processing external view change\");\n+    long startTimeMs = System.currentTimeMillis();\n+\n+    int numTables = _routingEntryMap.size();\n+    if (numTables == 0) {\n+      LOGGER.info(\"No table exists in the routing, skipping processing external view change\");\n+      return;\n+    }\n+\n+    List<RoutingEntry> routingEntries = new ArrayList<>(numTables);\n+    List<String> externalViewPaths = new ArrayList<>(numTables);\n+    for (Map.Entry<String, RoutingEntry> entry : _routingEntryMap.entrySet()) {\n+      String tableNameWithType = entry.getKey();\n+      routingEntries.add(entry.getValue());\n+      externalViewPaths.add(_externalViewPathPrefix + tableNameWithType);\n+    }\n+    Stat[] stats = _zkDataAccessor.getStats(externalViewPaths, AccessOption.PERSISTENT);\n+    long fetchStatsEndTimeMs = System.currentTimeMillis();\n+\n+    int numRoutingEntriesToUpdate = 0;\n+    for (int i = 0; i < numTables; i++) {\n+      Stat stat = stats[i];\n+      if (stat != null) {\n+        RoutingEntry routingEntry = routingEntries.get(i);\n+        if (stat.getVersion() != routingEntry.getLastUpdateExternalViewVersion()) {\n+          numRoutingEntriesToUpdate++;\n+          try {\n+            updateRoutingEntryOnExternalViewChange(routingEntry);\n+          } catch (Exception e) {\n+            LOGGER\n+                .error(\"Caught unexpected exception while updating routing entry on external view change for table: {}\",\n+                    routingEntry.getTableNameWithType(), e);\n+          }\n+        }\n+      }\n+    }\n+    long updateRoutingEntriesEndTimeMs = System.currentTimeMillis();\n+\n+    LOGGER.info(\n+        \"Processed external view change in {}ms (fetch {} external view stats: {}ms, update {} routing entries: {}ms)\",\n+        updateRoutingEntriesEndTimeMs - startTimeMs, numTables, fetchStatsEndTimeMs - startTimeMs,\n+        numRoutingEntriesToUpdate, updateRoutingEntriesEndTimeMs - fetchStatsEndTimeMs);\n+  }\n+\n+  private void updateRoutingEntryOnExternalViewChange(RoutingEntry routingEntry) {\n+    String tableNameWithType = routingEntry.getTableNameWithType();\n+    ExternalView externalView = getExternalView(tableNameWithType);\n+    if (externalView == null) {\n+      LOGGER.warn(\"Failed to find external view for table: {}, skipping updating routing entry\", tableNameWithType);\n+      return;\n+    }\n+    Set<String> onlineSegments = getOnlineSegments(tableNameWithType);\n+    if (onlineSegments == null) {\n+      LOGGER.warn(\"Failed to find ideal state for table: {}, skipping updating routing entry\", tableNameWithType);\n+      return;\n+    }\n+    routingEntry.onExternalViewChange(externalView, onlineSegments);\n+  }\n+\n+  @Nullable\n+  private ExternalView getExternalView(String tableNameWithType) {\n+    Stat stat = new Stat();\n+    ZNRecord znRecord = _zkDataAccessor.get(_externalViewPathPrefix + tableNameWithType, stat, AccessOption.PERSISTENT);\n+    if (znRecord != null) {\n+      znRecord.setVersion(stat.getVersion());\n+      return new ExternalView(znRecord);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Nullable\n+  private Set<String> getOnlineSegments(String tableNameWithType) {\n+    ZNRecord znRecord = _zkDataAccessor.get(_idealStatePathPrefix + tableNameWithType, null, AccessOption.PERSISTENT);\n+    if (znRecord != null) {\n+      Map<String, Map<String, String>> segmentAssignment = znRecord.getMapFields();\n+      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n+      for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n+        Map<String, String> instanceStateMap = entry.getValue();\n+        if (instanceStateMap.containsValue(RealtimeSegmentOnlineOfflineStateModel.ONLINE) || instanceStateMap\n+            .containsValue(RealtimeSegmentOnlineOfflineStateModel.CONSUMING)) {\n+          onlineSegments.add(entry.getKey());\n+        }\n+      }\n+      return onlineSegments;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  private void processInstanceConfigChange() {\n+    LOGGER.info(\"Processing instance config change\");\n+    long startTimeMs = System.currentTimeMillis();\n+\n+    List<ZNRecord> instanceConfigZNRecords =\n+        _zkDataAccessor.getChildren(_instanceConfigsPath, null, AccessOption.PERSISTENT);\n+    long fetchInstanceConfigsEndTimeMs = System.currentTimeMillis();\n+\n+    // Calculate new enabled and disabled instances\n+    Set<String> enabledInstances = new HashSet<>();\n+    List<String> newEnabledInstances = new ArrayList<>();\n+    for (ZNRecord instanceConfigZNRecord : instanceConfigZNRecords) {\n+      String instance = instanceConfigZNRecord.getId();\n+      if (isInstanceEnabled(instanceConfigZNRecord)) {\n+        enabledInstances.add(instance);\n+\n+        // Always refresh the server instance with the latest instance config in case it changes\n+        ServerInstance serverInstance = new ServerInstance(new InstanceConfig(instanceConfigZNRecord));\n+        if (_enabledServerInstanceMap.put(instance, serverInstance) == null) {\n+          newEnabledInstances.add(instance);\n+        }\n+      }\n+    }\n+    List<String> newDisabledInstances = new ArrayList<>();\n+    for (String instance : _enabledServerInstanceMap.keySet()) {\n+      if (!enabledInstances.contains(instance)) {\n+        newDisabledInstances.add(instance);\n+      }\n+    }\n+    List<String> changedInstances = new ArrayList<>(newEnabledInstances.size() + newDisabledInstances.size());\n+    changedInstances.addAll(newEnabledInstances);\n+    changedInstances.addAll(newDisabledInstances);\n+    long calculateChangedInstancesEndTimeMs = System.currentTimeMillis();\n+\n+    // Update routing entry for all tables\n+    for (RoutingEntry routingEntry : _routingEntryMap.values()) {\n+      try {\n+        routingEntry.onInstancesChange(enabledInstances, changedInstances);\n+      } catch (Exception e) {\n+        LOGGER.error(\"Caught unexpected exception while updating routing entry on instances change for table: {}\",\n+            routingEntry.getTableNameWithType(), e);\n+      }\n+    }\n+    long updateRoutingEntriesEndTimeMs = System.currentTimeMillis();\n+\n+    // Remove new disabled instances from _enabledServerInstanceMap after updating all routing entries to ensure it\n+    // always contains the selected instances\n+    _enabledServerInstanceMap.keySet().removeAll(newDisabledInstances);\n+\n+    LOGGER.info(\n+        \"Processed instance config change in {}ms (fetch {} instance configs: {}ms, calculate changed instances: {}ms, update {} routing entries: {}ms), new enabled instances: {}, new disabled instances: {}\",\n+        updateRoutingEntriesEndTimeMs - startTimeMs, instanceConfigZNRecords.size(),\n+        fetchInstanceConfigsEndTimeMs - startTimeMs, calculateChangedInstancesEndTimeMs - fetchInstanceConfigsEndTimeMs,\n+        _routingEntryMap.size(), updateRoutingEntriesEndTimeMs - calculateChangedInstancesEndTimeMs,\n+        newEnabledInstances, newDisabledInstances);\n+  }\n+\n+  private static boolean isInstanceEnabled(ZNRecord instanceConfigZNRecord) {\n+    if (\"false\"\n+        .equals(instanceConfigZNRecord.getSimpleField(InstanceConfig.InstanceConfigProperty.HELIX_ENABLED.name()))) {\n+      return false;\n+    }\n+    if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.IS_SHUTDOWN_IN_PROGRESS))) {\n+      return false;\n+    }\n+    if (\"true\".equals(instanceConfigZNRecord.getSimpleField(CommonConstants.Helix.QUERIES_DISABLED))) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Builds/rebuilds the routing for the given table.\n+   */\n+  public synchronized void buildRouting(String tableNameWithType) {\n+    LOGGER.info(\"Building routing for table: {}\", tableNameWithType);\n+\n+    TableConfig tableConfig = ZKMetadataProvider.getTableConfig(_propertyStore, tableNameWithType);\n+    Preconditions.checkState(tableConfig != null, \"Failed to find table config for table: {}\", tableNameWithType);\n+    ExternalView externalView = getExternalView(tableNameWithType);\n+    Preconditions.checkState(externalView != null, \"Failed to find external view for table: {}\", tableNameWithType);\n+    Set<String> onlineSegments = getOnlineSegments(tableNameWithType);\n+    Preconditions.checkState(onlineSegments != null, \"Failed to find ideal state for table: {}\", tableNameWithType);\n+    Set<String> enabledInstances = _enabledServerInstanceMap.keySet();\n+\n+    SegmentSelector segmentSelector = SegmentSelectorFactory.getSegmentSelector(tableConfig);\n+    segmentSelector.init(externalView, onlineSegments);\n+    SegmentPruner segmentPruner = SegmentPrunerFactory.getSegmentPruner(tableConfig, _propertyStore);\n+    segmentPruner.init(externalView, onlineSegments);\n+    InstanceSelector instanceSelector = InstanceSelectorFactory.getInstanceSelector(tableConfig, _brokerMetrics);\n+    instanceSelector.init(enabledInstances, externalView, onlineSegments);\n+    int externalViewVersion = externalView.getRecord().getVersion();\n+\n+    // Add time boundary manager if both offline and real-time part exist for a hybrid table\n+    TimeBoundaryManager timeBoundaryManager = null;\n+    String rawTableName = TableNameBuilder.extractRawTableName(tableNameWithType);\n+    if (TableNameBuilder.isOfflineTableResource(tableNameWithType)) {\n+      // Current table is offline\n+      String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);\n+      if (_routingEntryMap.containsKey(realtimeTableName)) {\n+        LOGGER.info(\"Adding time boundary manager for table: {}\", tableNameWithType);\n+        timeBoundaryManager = new TimeBoundaryManager(tableConfig, _propertyStore);\n+        timeBoundaryManager.init(externalView, onlineSegments);\n+      }\n+    } else {\n+      // Current table is real-time\n+      String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);\n+      RoutingEntry offlineTableRoutingEntry = _routingEntryMap.get(offlineTableName);\n+      if (offlineTableRoutingEntry != null && offlineTableRoutingEntry.getTimeBoundaryManager() == null) {\n+        LOGGER.info(\"Adding time boundary manager for table: {}\", offlineTableName);\n+\n+        // NOTE: Add time boundary manager to the offline part before adding the routing for the real-time part to\n+        // ensure no overlapping data getting queried\n+        TableConfig offlineTableConfig = ZKMetadataProvider.getTableConfig(_propertyStore, offlineTableName);\n+        Preconditions\n+            .checkState(offlineTableConfig != null, \"Failed to find table config for table: {}\", offlineTableName);\n+        ExternalView offlineTableExternalView = getExternalView(offlineTableName);\n+        Preconditions.checkState(offlineTableExternalView != null, \"Failed to find external view for table: {}\",\n+            offlineTableName);\n+        Set<String> offlineTableOnlineSegments = getOnlineSegments(offlineTableName);\n+        Preconditions.checkState(offlineTableOnlineSegments != null, \"Failed to find ideal state for table: {}\",\n+            offlineTableName);\n+        TimeBoundaryManager offlineTableTimeBoundaryManager =\n+            new TimeBoundaryManager(offlineTableConfig, _propertyStore);\n+        offlineTableTimeBoundaryManager.init(offlineTableExternalView, offlineTableOnlineSegments);\n+        offlineTableRoutingEntry.setTimeBoundaryManager(offlineTableTimeBoundaryManager);\n+      }\n+    }\n+\n+    RoutingEntry routingEntry =\n+        new RoutingEntry(tableNameWithType, segmentSelector, segmentPruner, instanceSelector, externalViewVersion,\n+            timeBoundaryManager);\n+    if (_routingEntryMap.put(tableNameWithType, routingEntry) == null) {\n+      LOGGER.info(\"Built routing for table: {}\", tableNameWithType);\n+    } else {\n+      LOGGER.info(\"Rebuilt routing for table: {}\", tableNameWithType);\n+    }\n+  }\n+\n+  /**\n+   * Removes the routing for the given table.\n+   */\n+  public synchronized void removeRouting(String tableNameWithType) {\n+    LOGGER.info(\"Removing routing for table: {}\", tableNameWithType);\n+    if (_routingEntryMap.remove(tableNameWithType) != null) {\n+      LOGGER.info(\"Removed routing for table: {}\", tableNameWithType);\n+\n+      // Remove time boundary manager for the offline part routing if the removed routing is the real-time part of a\n+      // hybrid table\n+      if (TableNameBuilder.isRealtimeTableResource(tableNameWithType)) {\n+        String offlineTableName =\n+            TableNameBuilder.OFFLINE.tableNameWithType(TableNameBuilder.extractRawTableName(tableNameWithType));\n+        RoutingEntry routingEntry = _routingEntryMap.get(offlineTableName);\n+        if (routingEntry != null) {\n+          routingEntry.setTimeBoundaryManager(null);\n+          LOGGER.info(\"Removed time boundary manager for table: {}\", offlineTableName);\n+        }\n+      }\n+    } else {\n+      LOGGER.warn(\"Routing does not exist for table: {}, skipping removing routing\", tableNameWithType);\n+    }\n+  }\n+\n+  /**\n+   * Refreshes the metadata for the given segment (called when segment is getting refreshed).\n+   */\n+  public synchronized void refreshSegment(String tableNameWithType, String segment) {\n+    LOGGER.info(\"Refreshing segment: {} for table: {}\", segment, tableNameWithType);\n+    RoutingEntry routingEntry = _routingEntryMap.get(tableNameWithType);\n+    if (routingEntry != null) {\n+      routingEntry.refreshSegment(segment);\n+      LOGGER.info(\"Refreshed segment: {} for table: {}\", segment, tableNameWithType);\n+    } else {\n+      LOGGER.warn(\"Routing does not exist for table: {}, skipping refreshing segment\", tableNameWithType);\n+    }\n+  }\n+\n+  /**\n+   * Returns {@code true} if the routing exists for the given table.\n+   */\n+  public boolean routingExists(String tableNameWithType) {\n+    return _routingEntryMap.containsKey(tableNameWithType);\n+  }\n+\n+  /**\n+   * Returns the routing table (map from server instance to list of segments hosted by the server) based on the broker\n+   * request.\n+   * <p>NOTE: The broker request should already have the table suffix (_OFFLINE or _REALTIME) appended.\n+   */\n+  public Map<ServerInstance, List<String>> getRoutingTable(BrokerRequest brokerRequest) {\n+    String tableNameWithType = brokerRequest.getQuerySource().getTableName();\n+    RoutingEntry routingEntry = _routingEntryMap.get(tableNameWithType);\n+    Preconditions.checkState(routingEntry != null, \"Failed to find routing for table: %s\", tableNameWithType);\n+\n+    Map<String, String> segmentToInstanceMap = routingEntry.calculateSegmentToInstanceMap(brokerRequest);\n+    Map<ServerInstance, List<String>> routingTable = new HashMap<>();\n+    for (Map.Entry<String, String> entry : segmentToInstanceMap.entrySet()) {\n+      ServerInstance serverInstance = _enabledServerInstanceMap.get(entry.getValue());\n+      if (serverInstance != null) {\n+        routingTable.computeIfAbsent(serverInstance, k -> new ArrayList<>()).add(entry.getKey());\n+      } else {\n+        // Should not happen in normal case unless encountered unexpected exception when updating routing entries\n+        _brokerMetrics.addMeteredTableValue(tableNameWithType, BrokerMeter.SERVER_MISSING_FOR_ROUTING, 1L);\n+      }\n+    }\n+    return routingTable;\n+  }\n+\n+  /**\n+   * Returns the time boundary info for the given offline table name.\n+   * <p>NOTE: Time boundary info is only available for the offline part of the hybrid table.\n+   */\n+  @Nullable\n+  public TimeBoundaryInfo getTimeBoundaryInfo(String offlineTableName) {\n+    RoutingEntry routingEntry = _routingEntryMap.get(offlineTableName);\n+    Preconditions.checkState(routingEntry != null, \"Failed to find routing for table: %s\", offlineTableName);\n+    TimeBoundaryManager timeBoundaryManager = routingEntry.getTimeBoundaryManager();\n+    return timeBoundaryManager != null ? timeBoundaryManager.getTimeBoundaryInfo() : null;\n+  }\n+\n+  private static class RoutingEntry {\n+    final String _tableNameWithType;\n+    final SegmentSelector _segmentSelector;\n+    final SegmentPruner _segmentPruner;\n+    final InstanceSelector _instanceSelector;\n+\n+    // Cache the ExternalView version for the last update\n+    transient int _lastUpdateExternalViewVersion;\n+    // Time boundary manager is only available for the offline part of the hybrid table\n+    transient TimeBoundaryManager _timeBoundaryManager;\n+\n+    RoutingEntry(String tableNameWithType, SegmentSelector segmentSelector, SegmentPruner segmentPruner,\n+        InstanceSelector instanceSelector, int lastUpdateExternalViewVersion,\n+        @Nullable TimeBoundaryManager timeBoundaryManager) {\n+      _tableNameWithType = tableNameWithType;\n+      _segmentSelector = segmentSelector;\n+      _segmentPruner = segmentPruner;\n+      _instanceSelector = instanceSelector;\n+      _lastUpdateExternalViewVersion = lastUpdateExternalViewVersion;\n+      _timeBoundaryManager = timeBoundaryManager;\n+    }\n+\n+    String getTableNameWithType() {\n+      return _tableNameWithType;\n+    }\n+\n+    int getLastUpdateExternalViewVersion() {\n+      return _lastUpdateExternalViewVersion;\n+    }\n+\n+    void setTimeBoundaryManager(@Nullable TimeBoundaryManager timeBoundaryManager) {\n+      _timeBoundaryManager = timeBoundaryManager;\n+    }\n+\n+    @Nullable\n+    TimeBoundaryManager getTimeBoundaryManager() {\n+      return _timeBoundaryManager;\n+    }\n+\n+    void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNjY0Mg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376016642", "bodyText": "Yes, we won't route to the new segments before the whole routing entry gets updated. Will add some comments here", "author": "Jackie-Jiang", "createdAt": "2020-02-06T18:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwNjA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwNjc0Mw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r375706743", "bodyText": "I see some very similar code from Offline/Realtime Segment Selector. It's inevitable to put on both?", "author": "snleee", "createdAt": "2020-02-06T08:54:46Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.metrics.BrokerMeter;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.RealtimeSegmentOnlineOfflineStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+abstract class BaseInstanceSelector implements InstanceSelector {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BaseInstanceSelector.class);\n+\n+  // To prevent int overflow, reset the request id once it reaches this value\n+  private static final int MAX_REQUEST_ID = 1_000_000_000;\n+\n+  private final AtomicLong _requestId = new AtomicLong();\n+  private final String _tableNameWithType;\n+  private final BrokerMetrics _brokerMetrics;\n+\n+  private volatile Set<String> _enabledInstances;\n+  private volatile Map<String, List<String>> _segmentToInstancesMap;\n+  private volatile Map<String, List<String>> _instanceToSegmentsMap;\n+  private volatile Map<String, List<String>> _segmentToEnabledInstancesMap;\n+\n+  BaseInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    _tableNameWithType = tableNameWithType;\n+    _brokerMetrics = brokerMetrics;\n+  }\n+\n+  @Override\n+  public void init(Set<String> enabledInstances, ExternalView externalView, Set<String> onlineSegments) {\n+    _enabledInstances = enabledInstances;\n+    onExternalViewChange(externalView, onlineSegments);\n+  }\n+\n+  @Override\n+  public void onInstancesChange(Set<String> enabledInstances, List<String> changedInstances) {\n+    _enabledInstances = enabledInstances;\n+\n+    // Update all segments served by the changed instances\n+    Set<String> segmentsToUpdate = new HashSet<>();\n+    Map<String, List<String>> instanceToSegmentsMap = _instanceToSegmentsMap;\n+    for (String instance : changedInstances) {\n+      List<String> segments = instanceToSegmentsMap.get(instance);\n+      if (segments != null) {\n+        segmentsToUpdate.addAll(segments);\n+      }\n+    }\n+\n+    // Directly return if no segment needs to be updated\n+    if (segmentsToUpdate.isEmpty()) {\n+      return;\n+    }\n+\n+    // Generate a new map from segment to enabled instances\n+    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Map<String, List<String>> newSegmentToEnabledInstancesMap =\n+        new HashMap<>(HashUtil.getHashMapCapacity(segmentToEnabledInstancesMap.size()));\n+    for (Map.Entry<String, List<String>> entry : segmentToEnabledInstancesMap.entrySet()) {\n+      String segment = entry.getKey();\n+      if (segmentsToUpdate.contains(segment)) {\n+        newSegmentToEnabledInstancesMap.put(segment,\n+            calculateEnabledInstancesForSegment(segment, segmentToInstancesMap.get(segment), enabledInstances));\n+      } else {\n+        newSegmentToEnabledInstancesMap.put(segment, entry.getValue());\n+      }\n+    }\n+    _segmentToEnabledInstancesMap = newSegmentToEnabledInstancesMap;\n+  }\n+\n+  @Override\n+  public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {\n+    Map<String, Map<String, String>> segmentAssignment = externalView.getRecord().getMapFields();\n+    Map<String, List<String>> segmentToInstancesMap =\n+        new HashMap<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n+    Map<String, List<String>> instanceToSegmentsMap = new HashMap<>();\n+\n+    for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n+      // Keep segments in both external view and ideal state", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1MDEwNg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376650106", "bodyText": "We don't need to skip segments not in the ideal state here. Updated", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwNjc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDcxOQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376034719", "bodyText": "why is this static?", "author": "mcvsubbu", "createdAt": "2020-02-06T19:25:48Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/RoutingManager.java", "diffHunk": "@@ -0,0 +1,481 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Nullable;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.HelixConstants;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.broker.broker.helix.ClusterChangeHandler;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelector;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPruner;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPrunerFactory;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelector;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryInfo;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryManager;\n+import org.apache.pinot.common.config.TableConfig;\n+import org.apache.pinot.common.config.TableNameBuilder;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metrics.BrokerMeter;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.RealtimeSegmentOnlineOfflineStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+import org.apache.pinot.core.transport.ServerInstance;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@code RoutingManager} manages the routing of all tables hosted by the broker instance.\n+ */\n+public class RoutingManager implements ClusterChangeHandler {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(RoutingManager.class);\n+\n+  private final BrokerMetrics _brokerMetrics;\n+  private final Map<String, RoutingEntry> _routingEntryMap = new ConcurrentHashMap<>();\n+  private final Map<String, ServerInstance> _enabledServerInstanceMap = new ConcurrentHashMap<>();\n+\n+  private BaseDataAccessor<ZNRecord> _zkDataAccessor;\n+  private String _externalViewPathPrefix;\n+  private String _idealStatePathPrefix;\n+  private String _instanceConfigsPath;\n+  private ZkHelixPropertyStore<ZNRecord> _propertyStore;\n+\n+  public RoutingManager(BrokerMetrics brokerMetrics) {\n+    _brokerMetrics = brokerMetrics;\n+  }\n+\n+  @Override\n+  public void init(HelixManager helixManager) {\n+    HelixDataAccessor helixDataAccessor = helixManager.getHelixDataAccessor();\n+    _zkDataAccessor = helixDataAccessor.getBaseDataAccessor();\n+    _externalViewPathPrefix = helixDataAccessor.keyBuilder().externalViews().getPath() + \"/\";\n+    _idealStatePathPrefix = helixDataAccessor.keyBuilder().idealStates().getPath() + \"/\";\n+    _instanceConfigsPath = helixDataAccessor.keyBuilder().instanceConfigs().getPath();\n+    _propertyStore = helixManager.getHelixPropertyStore();\n+  }\n+\n+  @Override\n+  public synchronized void processClusterChange(HelixConstants.ChangeType changeType) {\n+    Preconditions.checkState(changeType == HelixConstants.ChangeType.EXTERNAL_VIEW\n+        || changeType == HelixConstants.ChangeType.INSTANCE_CONFIG, \"Illegal change type: \" + changeType);\n+    if (changeType == HelixConstants.ChangeType.EXTERNAL_VIEW) {\n+      processExternalViewChange();\n+    } else {\n+      processInstanceConfigChange();\n+    }\n+  }\n+\n+  private void processExternalViewChange() {\n+    LOGGER.info(\"Processing external view change\");\n+    long startTimeMs = System.currentTimeMillis();\n+\n+    int numTables = _routingEntryMap.size();\n+    if (numTables == 0) {\n+      LOGGER.info(\"No table exists in the routing, skipping processing external view change\");\n+      return;\n+    }\n+\n+    List<RoutingEntry> routingEntries = new ArrayList<>(numTables);\n+    List<String> externalViewPaths = new ArrayList<>(numTables);\n+    for (Map.Entry<String, RoutingEntry> entry : _routingEntryMap.entrySet()) {\n+      String tableNameWithType = entry.getKey();\n+      routingEntries.add(entry.getValue());\n+      externalViewPaths.add(_externalViewPathPrefix + tableNameWithType);\n+    }\n+    Stat[] stats = _zkDataAccessor.getStats(externalViewPaths, AccessOption.PERSISTENT);\n+    long fetchStatsEndTimeMs = System.currentTimeMillis();\n+\n+    int numRoutingEntriesToUpdate = 0;\n+    for (int i = 0; i < numTables; i++) {\n+      Stat stat = stats[i];\n+      if (stat != null) {\n+        RoutingEntry routingEntry = routingEntries.get(i);\n+        if (stat.getVersion() != routingEntry.getLastUpdateExternalViewVersion()) {\n+          numRoutingEntriesToUpdate++;\n+          try {\n+            updateRoutingEntryOnExternalViewChange(routingEntry);\n+          } catch (Exception e) {\n+            LOGGER\n+                .error(\"Caught unexpected exception while updating routing entry on external view change for table: {}\",\n+                    routingEntry.getTableNameWithType(), e);\n+          }\n+        }\n+      }\n+    }\n+    long updateRoutingEntriesEndTimeMs = System.currentTimeMillis();\n+\n+    LOGGER.info(\n+        \"Processed external view change in {}ms (fetch {} external view stats: {}ms, update {} routing entries: {}ms)\",\n+        updateRoutingEntriesEndTimeMs - startTimeMs, numTables, fetchStatsEndTimeMs - startTimeMs,\n+        numRoutingEntriesToUpdate, updateRoutingEntriesEndTimeMs - fetchStatsEndTimeMs);\n+  }\n+\n+  private void updateRoutingEntryOnExternalViewChange(RoutingEntry routingEntry) {\n+    String tableNameWithType = routingEntry.getTableNameWithType();\n+    ExternalView externalView = getExternalView(tableNameWithType);\n+    if (externalView == null) {\n+      LOGGER.warn(\"Failed to find external view for table: {}, skipping updating routing entry\", tableNameWithType);\n+      return;\n+    }\n+    Set<String> onlineSegments = getOnlineSegments(tableNameWithType);\n+    if (onlineSegments == null) {\n+      LOGGER.warn(\"Failed to find ideal state for table: {}, skipping updating routing entry\", tableNameWithType);\n+      return;\n+    }\n+    routingEntry.onExternalViewChange(externalView, onlineSegments);\n+  }\n+\n+  @Nullable\n+  private ExternalView getExternalView(String tableNameWithType) {\n+    Stat stat = new Stat();\n+    ZNRecord znRecord = _zkDataAccessor.get(_externalViewPathPrefix + tableNameWithType, stat, AccessOption.PERSISTENT);\n+    if (znRecord != null) {\n+      znRecord.setVersion(stat.getVersion());\n+      return new ExternalView(znRecord);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Nullable\n+  private Set<String> getOnlineSegments(String tableNameWithType) {\n+    ZNRecord znRecord = _zkDataAccessor.get(_idealStatePathPrefix + tableNameWithType, null, AccessOption.PERSISTENT);\n+    if (znRecord != null) {\n+      Map<String, Map<String, String>> segmentAssignment = znRecord.getMapFields();\n+      Set<String> onlineSegments = new HashSet<>(HashUtil.getHashMapCapacity(segmentAssignment.size()));\n+      for (Map.Entry<String, Map<String, String>> entry : segmentAssignment.entrySet()) {\n+        Map<String, String> instanceStateMap = entry.getValue();\n+        if (instanceStateMap.containsValue(RealtimeSegmentOnlineOfflineStateModel.ONLINE) || instanceStateMap\n+            .containsValue(RealtimeSegmentOnlineOfflineStateModel.CONSUMING)) {\n+          onlineSegments.add(entry.getKey());\n+        }\n+      }\n+      return onlineSegments;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  private void processInstanceConfigChange() {\n+    LOGGER.info(\"Processing instance config change\");\n+    long startTimeMs = System.currentTimeMillis();\n+\n+    List<ZNRecord> instanceConfigZNRecords =\n+        _zkDataAccessor.getChildren(_instanceConfigsPath, null, AccessOption.PERSISTENT);\n+    long fetchInstanceConfigsEndTimeMs = System.currentTimeMillis();\n+\n+    // Calculate new enabled and disabled instances\n+    Set<String> enabledInstances = new HashSet<>();\n+    List<String> newEnabledInstances = new ArrayList<>();\n+    for (ZNRecord instanceConfigZNRecord : instanceConfigZNRecords) {\n+      String instance = instanceConfigZNRecord.getId();\n+      if (isInstanceEnabled(instanceConfigZNRecord)) {\n+        enabledInstances.add(instance);\n+\n+        // Always refresh the server instance with the latest instance config in case it changes\n+        ServerInstance serverInstance = new ServerInstance(new InstanceConfig(instanceConfigZNRecord));\n+        if (_enabledServerInstanceMap.put(instance, serverInstance) == null) {\n+          newEnabledInstances.add(instance);\n+        }\n+      }\n+    }\n+    List<String> newDisabledInstances = new ArrayList<>();\n+    for (String instance : _enabledServerInstanceMap.keySet()) {\n+      if (!enabledInstances.contains(instance)) {\n+        newDisabledInstances.add(instance);\n+      }\n+    }\n+    List<String> changedInstances = new ArrayList<>(newEnabledInstances.size() + newDisabledInstances.size());\n+    changedInstances.addAll(newEnabledInstances);\n+    changedInstances.addAll(newDisabledInstances);\n+    long calculateChangedInstancesEndTimeMs = System.currentTimeMillis();\n+\n+    // Update routing entry for all tables\n+    for (RoutingEntry routingEntry : _routingEntryMap.values()) {\n+      try {\n+        routingEntry.onInstancesChange(enabledInstances, changedInstances);\n+      } catch (Exception e) {\n+        LOGGER.error(\"Caught unexpected exception while updating routing entry on instances change for table: {}\",\n+            routingEntry.getTableNameWithType(), e);\n+      }\n+    }\n+    long updateRoutingEntriesEndTimeMs = System.currentTimeMillis();\n+\n+    // Remove new disabled instances from _enabledServerInstanceMap after updating all routing entries to ensure it\n+    // always contains the selected instances\n+    _enabledServerInstanceMap.keySet().removeAll(newDisabledInstances);\n+\n+    LOGGER.info(\n+        \"Processed instance config change in {}ms (fetch {} instance configs: {}ms, calculate changed instances: {}ms, update {} routing entries: {}ms), new enabled instances: {}, new disabled instances: {}\",\n+        updateRoutingEntriesEndTimeMs - startTimeMs, instanceConfigZNRecords.size(),\n+        fetchInstanceConfigsEndTimeMs - startTimeMs, calculateChangedInstancesEndTimeMs - fetchInstanceConfigsEndTimeMs,\n+        _routingEntryMap.size(), updateRoutingEntriesEndTimeMs - calculateChangedInstancesEndTimeMs,\n+        newEnabledInstances, newDisabledInstances);\n+  }\n+\n+  private static boolean isInstanceEnabled(ZNRecord instanceConfigZNRecord) {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTk5OQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376149999", "bodyText": "Because it does not rely on any member variable (helper util method)", "author": "Jackie-Jiang", "createdAt": "2020-02-07T00:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjg0Mg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376122842", "bodyText": "It would be helpful to document how the set of offline segments is used", "author": "siddharthteotia", "createdAt": "2020-02-06T22:41:31Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/segmentpruner/SegmentPruner.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.segmentpruner;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+/**\n+ * The segment pruner prunes the selected segments based on the query.\n+ */\n+public interface SegmentPruner {\n+\n+  /**\n+   * Initializes the segment pruner with the external view and online segments (segments with ONLINE/CONSUMING instances\n+   * in ideal state). Should be called only once before calling other methods.\n+   */\n+  void init(ExternalView externalView, Set<String> onlineSegments);\n+\n+  /**\n+   * Processes the external view change based on the given online segments (segments with ONLINE/CONSUMING instances in\n+   * ideal state).", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MDg4OA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376660888", "bodyText": "externalView is not used. Added the doc", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjkwMg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376122902", "bodyText": "(nit) Javadoc would be good", "author": "siddharthteotia", "createdAt": "2020-02-06T22:41:43Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/segmentpruner/PartitionAwareSegmentPruner.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.segmentpruner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Nullable;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metadata.segment.ColumnPartitionMetadata;\n+import org.apache.pinot.common.metadata.segment.SegmentPartitionMetadata;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.common.utils.request.RequestUtils;\n+import org.apache.pinot.core.data.partition.PartitionFunction;\n+import org.apache.pinot.core.data.partition.PartitionFunctionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PartitionAwareSegmentPruner implements SegmentPruner {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MDUzOA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376660538", "bodyText": "Added", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjk0OQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376122949", "bodyText": "What is meant by picking up the same replica group id?\nIf we have 3 replica groups RG1, RG2 and RG3, each with 2 hosts (S1, S2), (S3, S4), (S5, S6) respectively then the problem of evenly distributing the queries boils down to evenly picking up replica groups assuming the mirror segment assignment did the right thing. Correct?\nSo let's say we have 3 queries (exact same) touching the same number of segment fired concurrently. Can we say that each query will go to a different replica group?", "author": "siddharthteotia", "createdAt": "2020-02-06T22:41:49Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/instanceselector/ReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.instanceselector;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for replica-group routing strategy.\n+ * <p>The selection algorithm will always evenly distribute the traffic to all replicas of each segment, and will select\n+ * the same replica id for all segments with the same number of replicas. The algorithm is very light-weight and will\n+ * do best effort to select the least servers for the request.\n+ * <p>The algorithm relies on the mirror segment assignment from replica-group segment assignment strategy. With mirror\n+ * segment assignment, any server in one replica-group will always have a corresponding server in other replica-groups\n+ * that have the same segments assigned. For an example, if S1 is a server in replica-group 1, and it has mirror server\n+ * S2 in replica-group 2 and S3 in replica-group 3. All segments assigned to S1 will also be assigned to S2 and S3. In\n+ * stable scenario (external view matches ideal state), if we always pick the same replica id for all segments, only", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1OTQyNA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376659424", "bodyText": "There is no guarantee on selecting the servers from the same replica-group, but it is guaranteed that only 2 servers are selected for each query, and each server only need to answer 1 query.\nUpdated the doc for more explaination", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjk3NQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376122975", "bodyText": "This might be a dumb question: As per the existing design, don't we have a table level constraint that each segment will have the same number of replicas?", "author": "siddharthteotia", "createdAt": "2020-02-06T22:41:52Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/instanceselector/ReplicaGroupInstanceSelector.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.instanceselector;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector for replica-group routing strategy.\n+ * <p>The selection algorithm will always evenly distribute the traffic to all replicas of each segment, and will select\n+ * the same replica id for all segments with the same number of replicas. The algorithm is very light-weight and will", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1NDcwOA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376654708", "bodyText": "Yes, but no guarantee on the number of replicas up in external view", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzAyMw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376123023", "bodyText": "Same here.. I think it will be great to explain the relevance of onlineSegments for future readers. We should indicate how they are used and when will they be empty/null", "author": "siddharthteotia", "createdAt": "2020-02-06T22:41:59Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/instanceselector/InstanceSelector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.instanceselector;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+/**\n+ * The instance selector selects server instances to serve the query based on the selected segments.\n+ */\n+public interface InstanceSelector {\n+\n+  /**\n+   * Initializes the instance selector with the enabled instances, external view and online segments (segments with\n+   * ONLINE/CONSUMING instances in ideal state). Should be called only once before calling other methods.\n+   */\n+  void init(Set<String> enabledInstances, ExternalView externalView, Set<String> onlineSegments);\n+\n+  /**\n+   * Processes the instances change. Changed instances are pre-computed based on the current and previous enabled\n+   * instances only once on the caller side and passed to all the instance selectors.\n+   */\n+  void onInstancesChange(Set<String> enabledInstances, List<String> changedInstances);\n+\n+  /**\n+   * Processes the external view change based on the given online segments (segments with ONLINE/CONSUMING instances in\n+   * ideal state).\n+   */\n+  void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments);", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1Mzc0NQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376653745", "bodyText": "It won't be null if it is not annotated as nullable. We don't use it right now, but maybe useful for future implementations. Added some description", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzA3NQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376123075", "bodyText": "Can we add some documentation here explaining how the \"onlineSegments\" is used? It will empty or null if the table is offline?", "author": "siddharthteotia", "createdAt": "2020-02-06T22:42:07Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/instanceselector/BaseInstanceSelector.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.instanceselector;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.metrics.BrokerMeter;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.RealtimeSegmentOnlineOfflineStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+abstract class BaseInstanceSelector implements InstanceSelector {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(BaseInstanceSelector.class);\n+\n+  // To prevent int overflow, reset the request id once it reaches this value\n+  private static final int MAX_REQUEST_ID = 1_000_000_000;\n+\n+  private final AtomicLong _requestId = new AtomicLong();\n+  private final String _tableNameWithType;\n+  private final BrokerMetrics _brokerMetrics;\n+\n+  private volatile Set<String> _enabledInstances;\n+  private volatile Map<String, List<String>> _segmentToInstancesMap;\n+  private volatile Map<String, List<String>> _instanceToSegmentsMap;\n+  private volatile Map<String, List<String>> _segmentToEnabledInstancesMap;\n+\n+  BaseInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    _tableNameWithType = tableNameWithType;\n+    _brokerMetrics = brokerMetrics;\n+  }\n+\n+  @Override\n+  public void init(Set<String> enabledInstances, ExternalView externalView, Set<String> onlineSegments) {\n+    _enabledInstances = enabledInstances;\n+    onExternalViewChange(externalView, onlineSegments);\n+  }\n+\n+  @Override\n+  public void onInstancesChange(Set<String> enabledInstances, List<String> changedInstances) {\n+    _enabledInstances = enabledInstances;\n+\n+    // Update all segments served by the changed instances\n+    Set<String> segmentsToUpdate = new HashSet<>();\n+    Map<String, List<String>> instanceToSegmentsMap = _instanceToSegmentsMap;\n+    for (String instance : changedInstances) {\n+      List<String> segments = instanceToSegmentsMap.get(instance);\n+      if (segments != null) {\n+        segmentsToUpdate.addAll(segments);\n+      }\n+    }\n+\n+    // Directly return if no segment needs to be updated\n+    if (segmentsToUpdate.isEmpty()) {\n+      return;\n+    }\n+\n+    // Generate a new map from segment to enabled instances\n+    Map<String, List<String>> segmentToInstancesMap = _segmentToInstancesMap;\n+    Map<String, List<String>> segmentToEnabledInstancesMap = _segmentToEnabledInstancesMap;\n+    Map<String, List<String>> newSegmentToEnabledInstancesMap =\n+        new HashMap<>(HashUtil.getHashMapCapacity(segmentToEnabledInstancesMap.size()));\n+    for (Map.Entry<String, List<String>> entry : segmentToEnabledInstancesMap.entrySet()) {\n+      String segment = entry.getKey();\n+      if (segmentsToUpdate.contains(segment)) {\n+        newSegmentToEnabledInstancesMap.put(segment,\n+            calculateEnabledInstancesForSegment(segment, segmentToInstancesMap.get(segment), enabledInstances));\n+      } else {\n+        newSegmentToEnabledInstancesMap.put(segment, entry.getValue());\n+      }\n+    }\n+    _segmentToEnabledInstancesMap = newSegmentToEnabledInstancesMap;\n+  }\n+\n+  @Override\n+  public void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments) {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0ODU0OQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376648549", "bodyText": "onlineSegments are segments with ONLINE/CONSUMING instances in ideal state. There are javadoc in the interface", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1MTQ2Nw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376651467", "bodyText": "We don't need to skip segments not in the ideal state in the instance selector because they won't be selected in the instance selector. I excluded them to save the calculation for the unnecessary segments. While, maybe the overhead of the map lookup is higher, and because that is causing confusion, I just removed this check.", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzEzMQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376123131", "bodyText": "Can this really be null? Before we enter this function, we already selected the segments to use for a given query. Right? This function selects the hosts/instances for those set of selected segments. There should be at least one instance on which the segment is enabled right?\nAlso, javadoc for this function would be good for future readers.", "author": "siddharthteotia", "createdAt": "2020-02-06T22:42:16Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/instanceselector/BalancedInstanceSelector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.instanceselector;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.utils.HashUtil;\n+\n+\n+/**\n+ * Instance selector to balance the number of segments served by each selected server instance.\n+ * <p>The selection algorithm will always evenly distribute the traffic to all replicas of each segment, and will try\n+ * to select different replica id for each segment. The algorithm is very light-weight and will do best effort to\n+ * balance the number of segments served by each selected server instance.\n+ */\n+public class BalancedInstanceSelector extends BaseInstanceSelector {\n+\n+  public BalancedInstanceSelector(String tableNameWithType, BrokerMetrics brokerMetrics) {\n+    super(tableNameWithType, brokerMetrics);\n+  }\n+\n+  @Override\n+  Map<String, String> select(List<String> segments, int requestId,\n+      Map<String, List<String>> segmentToEnabledInstancesMap) {\n+    Map<String, String> segmentToSelectedInstanceMap = new HashMap<>(HashUtil.getHashMapCapacity(segments.size()));\n+    for (String segment : segments) {\n+      List<String> enabledInstances = segmentToEnabledInstancesMap.get(segment);\n+      if (enabledInstances != null) {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NzgxNQ==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376647815", "bodyText": "No, this can be null when there is no enabled instances for the segment (in which case we log a warning and emit metrics), or the instance selector has not been updated (we update all components for routing in sequence).\nAdded comments", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzIxOA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376123218", "bodyText": "With this new class, what happens to HelixExternalViewBasedRouiting? How is this different from HelixExternalViewBasedRouting?\nThat class also implements ClusterChangeHandler interface. Is the plan to make this an abstract class and have HelixExternalViewBasedRouting extend it or do we plan to remove it?", "author": "siddharthteotia", "createdAt": "2020-02-06T22:42:29Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/RoutingManager.java", "diffHunk": "@@ -0,0 +1,481 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Nullable;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.BaseDataAccessor;\n+import org.apache.helix.HelixConstants;\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.helix.model.InstanceConfig;\n+import org.apache.helix.store.zk.ZkHelixPropertyStore;\n+import org.apache.pinot.broker.broker.helix.ClusterChangeHandler;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelector;\n+import org.apache.pinot.broker.routing.v2.instanceselector.InstanceSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPruner;\n+import org.apache.pinot.broker.routing.v2.segmentpruner.SegmentPrunerFactory;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelector;\n+import org.apache.pinot.broker.routing.v2.segmentselector.SegmentSelectorFactory;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryInfo;\n+import org.apache.pinot.broker.routing.v2.timeboundary.TimeBoundaryManager;\n+import org.apache.pinot.common.config.TableConfig;\n+import org.apache.pinot.common.config.TableNameBuilder;\n+import org.apache.pinot.common.metadata.ZKMetadataProvider;\n+import org.apache.pinot.common.metrics.BrokerMeter;\n+import org.apache.pinot.common.metrics.BrokerMetrics;\n+import org.apache.pinot.common.request.BrokerRequest;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.CommonConstants.Helix.StateModel.RealtimeSegmentOnlineOfflineStateModel;\n+import org.apache.pinot.common.utils.HashUtil;\n+import org.apache.pinot.core.transport.ServerInstance;\n+import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@code RoutingManager} manages the routing of all tables hosted by the broker instance.\n+ */\n+public class RoutingManager implements ClusterChangeHandler {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTUwMw==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376611503", "bodyText": "The implementation in this pr will replace everything under the package org.apache.pinot.broker.routing once we plug them in", "author": "Jackie-Jiang", "createdAt": "2020-02-07T21:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzgyMA==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376123820", "bodyText": "Can we not enhance the existing SegmentSelector?", "author": "siddharthteotia", "createdAt": "2020-02-06T22:43:59Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/segmentselector/SegmentSelector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.segmentselector;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.helix.model.ExternalView;\n+import org.apache.pinot.common.request.BrokerRequest;\n+\n+\n+/**\n+ * The segment selector selects the segments for the query. The segments selected should cover the whole dataset (table)\n+ * without overlap.\n+ */\n+public interface SegmentSelector {", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MTQxMg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376661412", "bodyText": "The current SegmentSelector is not wired up, and serves different purpose. In the future, that should be integrated into this segment selector.", "author": "Jackie-Jiang", "createdAt": "2020-02-07T23:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDEyMg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376124122", "bodyText": "This exact same class is already there in the code", "author": "siddharthteotia", "createdAt": "2020-02-06T22:44:48Z", "path": "pinot-broker/src/main/java/org/apache/pinot/broker/routing/v2/timeboundary/TimeBoundaryInfo.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.broker.routing.v2.timeboundary;", "originalCommit": "e60e9f19a7cca30a2f7950f6094c72a3d37c20f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MTgxMg==", "url": "https://github.com/apache/pinot/pull/5046#discussion_r376661812", "bodyText": "Yes. The purpose of this pr is to directly replace all the existing implementation, so I made a copy of all the needed classes. (Also don't want to make it a sub-class of an interface).", "author": "Jackie-Jiang", "createdAt": "2020-02-08T00:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDEyMg=="}], "type": "inlineReview"}, {"oid": "6003efbe2cd2c37a628426140c7092f8e7906fe4", "url": "https://github.com/apache/pinot/commit/6003efbe2cd2c37a628426140c7092f8e7906fe4", "message": "Re-design the broker routing\n\nMotivation:\n- De-couple the partition pruning from the replica-group routing\n- Support real-time replica-group routing\n- Handle the scenario of external view not matching instance partitions\n- Reduce the number of ZK accesses when processing cluster changes\n- Support segment refresh for routing purposr (time boundary info & partitioning info)\n- Support routing rebuild without restarting broker\n\nAdded RoutingManager as the instance level entry of the routing with the following methods:\n- buildRouting()\n- removeRouting()\n- refreshSegment()\n- routingExists()\n- getRoutingTable()\n- getTimeBoundaryInfo()\n\nBreak the routing table calculation into 3 steps:\n- Segment selection\n- Segment pruning\n- Instance selection\n\nThis PR includes the implementation and tests\nWill plug the new broker routing in the following PR", "committedDate": "2020-02-08T00:59:05Z", "type": "forcePushed"}, {"oid": "094f675571641deae642c4f42cfafc3e0f0013ad", "url": "https://github.com/apache/pinot/commit/094f675571641deae642c4f42cfafc3e0f0013ad", "message": "Re-design the broker routing\n\nMotivation:\n- De-couple the partition pruning from the replica-group routing\n- Support real-time replica-group routing\n- Handle the scenario of external view not matching instance partitions\n- Reduce the number of ZK accesses when processing cluster changes\n- Support segment refresh for routing purposr (time boundary info & partitioning info)\n- Support routing rebuild without restarting broker\n\nAdded RoutingManager as the instance level entry of the routing with the following methods:\n- buildRouting()\n- removeRouting()\n- refreshSegment()\n- routingExists()\n- getRoutingTable()\n- getTimeBoundaryInfo()\n\nBreak the routing table calculation into 3 steps:\n- Segment selection\n- Segment pruning\n- Instance selection\n\nThis PR includes the implementation and tests\nWill plug the new broker routing in the following PR", "committedDate": "2020-02-08T01:13:48Z", "type": "commit"}, {"oid": "094f675571641deae642c4f42cfafc3e0f0013ad", "url": "https://github.com/apache/pinot/commit/094f675571641deae642c4f42cfafc3e0f0013ad", "message": "Re-design the broker routing\n\nMotivation:\n- De-couple the partition pruning from the replica-group routing\n- Support real-time replica-group routing\n- Handle the scenario of external view not matching instance partitions\n- Reduce the number of ZK accesses when processing cluster changes\n- Support segment refresh for routing purposr (time boundary info & partitioning info)\n- Support routing rebuild without restarting broker\n\nAdded RoutingManager as the instance level entry of the routing with the following methods:\n- buildRouting()\n- removeRouting()\n- refreshSegment()\n- routingExists()\n- getRoutingTable()\n- getTimeBoundaryInfo()\n\nBreak the routing table calculation into 3 steps:\n- Segment selection\n- Segment pruning\n- Instance selection\n\nThis PR includes the implementation and tests\nWill plug the new broker routing in the following PR", "committedDate": "2020-02-08T01:13:48Z", "type": "forcePushed"}]}