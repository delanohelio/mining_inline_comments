{"pr_number": 5602, "pr_title": "Adding support for JDBC", "pr_createdAt": "2020-06-22T17:03:37Z", "pr_url": "https://github.com/apache/pinot/pull/5602", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443757851", "bodyText": "Any reason why this has to use pinot.client.ResultSet (which seems like a really old class). We have ResultTable used for returning responses that is a more recent code, you may want to check it out.", "author": "mayankshriv", "createdAt": "2020-06-22T18:47:23Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  private final org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {", "originalCommit": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDk3Mw==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445750973", "bodyText": "+1, lets use resultTable. Its ok to say we support jdbc only on SQL endpoint", "author": "kishoreg", "createdAt": "2020-06-25T18:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMTMyNA==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445821324", "bodyText": "Since I am using Java client to run queries, it is currently returning ResultSet.\nShould I create a seperate PR making changes in the Java client first so that it returns ResultTable?", "author": "KKcorps", "createdAt": "2020-06-25T20:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3NTIyMw==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446675223", "bodyText": "sorry, my bad, ResultSet is still the right interface for the client. We need to deprecate few methods like\n  int getGroupKeyLength();\n  String getGroupKeyColumnName(int groupKeyColumnIndex);\n  int getGroupKeyInt(int rowIndex, int groupKeyColumnIndex);\n  long getGroupKeyLong(int rowIndex, int groupKeyColumnIndex);\n  float getGroupKeyFloat(int rowIndex, int groupKeyColumnIndex);\n  double getGroupKeyDouble(int rowIndex, int groupKeyColumnIndex);\n  String getGroupKeyString(int rowIndex, int groupKeyColumnIndex);\n\njdbc driver code is not using any of them. so we are good here.", "author": "kishoreg", "createdAt": "2020-06-28T17:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1Nzg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODYxNw==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443758617", "bodyText": "_queryFormat can be a static final, instead of initializing in constructor?", "author": "mayankshriv", "createdAt": "2020-06-22T18:48:54Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotStatement.java", "diffHunk": "@@ -0,0 +1,309 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.Statement;\n+\n+\n+public class PinotStatement implements Statement {\n+\n+  private final org.apache.pinot.client.Connection _connection;\n+  private final String _queryFormat;\n+  private ResultSetGroup _resultSetGroup;\n+\n+  public PinotStatement(org.apache.pinot.client.Connection connection) {\n+    _connection = connection;\n+    _queryFormat = \"sql\";", "originalCommit": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1OTE1Mw==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443759153", "bodyText": "Does it make sense to make it case insensitive check?", "author": "mayankshriv", "createdAt": "2020-06-22T18:49:52Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.utils;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class DriverUtils {\n+\n+  public static List<String> getBrokersFromURL(String url) {\n+    if (url.startsWith(\"jdbc:\")) {", "originalCommit": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1OTU3Ng==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443759576", "bodyText": "Private constructor, if you don't want this class instantiated.", "author": "mayankshriv", "createdAt": "2020-06-22T18:50:42Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.utils;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class DriverUtils {", "originalCommit": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDQ4Mg==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r443760482", "bodyText": "Use Collections.singletonList() instead?", "author": "mayankshriv", "createdAt": "2020-06-22T18:52:29Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/DriverUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client.utils;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+public class DriverUtils {\n+\n+  public static List<String> getBrokersFromURL(String url) {\n+    if (url.startsWith(\"jdbc:\")) {\n+      url = url.substring(5);\n+    }\n+    URI uri = URI.create(url);\n+    return getBrokersFromURI(uri);\n+  }\n+\n+  public static List<String> getBrokersFromURI(URI uri) {\n+    List<String> brokerList = new ArrayList<>();", "originalCommit": "f33c79f1e6f8048ad90c6e806c0d8092b7f0037a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDQ5OA==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445750498", "bodyText": "what should this return according to the spec", "author": "kishoreg", "createdAt": "2020-06-25T18:19:53Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotDriver.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.net.URI;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import org.apache.pinot.client.utils.DriverUtils;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class PinotDriver implements Driver {\n+  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(PinotDriver.class);\n+  private final String SCHEME = \"pinot\";\n+\n+  @Override\n+  public Connection connect(String url, Properties info)\n+      throws SQLException {\n+    try {\n+      PinotClientTransport pinotClientTransport = new JsonAsyncHttpPinotClientTransportFactory().buildTransport();\n+      List<String> brokerList = DriverUtils.getBrokersFromURL(url);\n+      return new PinotConnection(brokerList, pinotClientTransport);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Failed to connect to url : {}\", url, e);\n+      throw new SQLException(\"Failed to connect to url : {}\", url, e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean acceptsURL(String url)\n+      throws SQLException {\n+    String cleanURI = url.substring(5);\n+    URI uri = URI.create(cleanURI);\n+    return uri.getScheme().contentEquals(SCHEME);\n+  }\n+\n+  @Override\n+  public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)\n+      throws SQLException {\n+    return new DriverPropertyInfo[0];\n+  }\n+\n+  @Override\n+  public int getMajorVersion() {", "originalCommit": "4974a66a0efaea752da6aa10828383f4f0deca9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzOTY4NQ==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446639685", "bodyText": "It should return 1 only as per the spec. We can bump up the numbers in future releases of the driver.", "author": "KKcorps", "createdAt": "2020-06-28T11:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjExNg==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445752116", "bodyText": "better to cache this", "author": "kishoreg", "createdAt": "2020-06-25T18:22:52Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1317 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLType;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+\n+\n+public class PinotResultSet implements ResultSet {\n+  public static final String TIMESTAMP_FORMAT = \"dd-mm-yyyy HH:MM:SS\";\n+  public static final String DATE_FORMAT = \"dd-mm-yyyy\";\n+  private org.apache.pinot.client.ResultSet _resultSet;\n+  private int _totalRows;\n+  private int _currentRow;\n+  private Map<String, Integer> _columns = new HashMap<>();\n+\n+  public PinotResultSet(org.apache.pinot.client.ResultSet resultSet) {\n+    _resultSet = resultSet;\n+    _totalRows = _resultSet.getRowCount();\n+    _currentRow = -1;\n+    for (int i = 0; i < _resultSet.getColumnCount(); i++) {\n+      _columns.put(_resultSet.getColumnName(i), i);\n+    }\n+  }\n+\n+  @Override\n+  public boolean absolute(int row)\n+      throws SQLException {\n+    if (row >= 0 && row < _totalRows) {\n+      _currentRow = row;\n+      return true;\n+    } else if (row < 0 && Math.abs(row) <= _totalRows) {\n+      _currentRow = _totalRows + row;\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  @Override\n+  public void afterLast()\n+      throws SQLException {\n+    _currentRow = _totalRows;\n+  }\n+\n+  @Override\n+  public void beforeFirst()\n+      throws SQLException {\n+    _currentRow = -1;\n+  }\n+\n+  @Override\n+  public void cancelRowUpdates()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void clearWarnings()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void close()\n+      throws SQLException {\n+      _resultSet = null;\n+      _totalRows = 0;\n+      _currentRow = -1;\n+      _columns.clear();;\n+  }\n+\n+  @Override\n+  public void deleteRow()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int findColumn(String columnLabel)\n+      throws SQLException {\n+    if (_columns.containsKey(columnLabel)) {\n+      return _columns.get(columnLabel);\n+    } else {\n+      throw new SQLException(\"Column with label {} not found in ResultSet\", columnLabel);\n+    }\n+  }\n+\n+  @Override\n+  public boolean first()\n+      throws SQLException {\n+    _currentRow = 0;\n+    return true;\n+  }\n+\n+  @Override\n+  public Array getArray(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Array getArray(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(int columnIndex)\n+      throws SQLException {\n+    String value = getString(columnIndex);\n+    InputStream in = new ByteArrayInputStream(value.getBytes(StandardCharsets.US_ASCII));\n+    return in;\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(String columnLabel)\n+      throws SQLException {\n+    return getAsciiStream(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int columnIndex)\n+      throws SQLException {\n+    return getBigDecimal(columnIndex, 0);\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String columnLabel)\n+      throws SQLException {\n+    return getBigDecimal(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int columnIndex, int scale)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      BigDecimal bigDecimal = new BigDecimal(value).setScale(scale);\n+      return bigDecimal;\n+    }catch (Exception e){\n+      throw new SQLException(\"Unable to fetch BigDecimal value\", e);\n+    }\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String columnLabel, int scale)\n+      throws SQLException {\n+    return getBigDecimal(findColumn(columnLabel), scale);\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Blob getBlob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Blob getBlob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public boolean getBoolean(int columnIndex)\n+      throws SQLException {\n+    return Boolean.parseBoolean(_resultSet.getString(_currentRow, columnIndex));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(String columnLabel)\n+      throws SQLException {\n+    return getBoolean(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public byte getByte(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte getByte(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(int columnIndex)\n+      throws SQLException {\n+    try {\n+      String value = _resultSet.getString(_currentRow, columnIndex);\n+      return Hex.decodeHex(value.toCharArray());\n+    } catch (Exception e) {\n+      throw new SQLException(String.format(\"Unable to fetch value for column %d\", columnIndex), e);\n+    }\n+  }\n+\n+  @Override\n+  public byte[] getBytes(String columnLabel)\n+      throws SQLException {\n+    return getBytes(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(int columnIndex)\n+      throws SQLException {\n+    InputStream in = getUnicodeStream(columnIndex);\n+    Reader reader = new InputStreamReader(in, StandardCharsets.UTF_8);\n+    return reader;\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(String columnLabel)\n+      throws SQLException {\n+    return getCharacterStream(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Clob getClob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Clob getClob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getConcurrency()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getCursorName()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Date getDate(int columnIndex)\n+      throws SQLException {\n+    return getDate(columnIndex, Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Date getDate(String columnLabel)\n+      throws SQLException {\n+    return getDate(findColumn(columnLabel), Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Date getDate(int columnIndex, Calendar cal)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);\n+      java.util.Date date = dateFormat.parse(value);\n+      cal.setTime(date);\n+      Date sqlDate = new Date(cal.getTimeInMillis());\n+      return sqlDate;\n+    } catch (Exception e) {\n+      throw new SQLException(\"Unable to fetch date\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Date getDate(String columnLabel, Calendar cal)\n+      throws SQLException {\n+    return getDate(findColumn(columnLabel), cal);\n+  }\n+\n+  @Override\n+  public double getDouble(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getDouble(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public double getDouble(String columnLabel)\n+      throws SQLException {\n+    return getDouble(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public int getFetchDirection()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void setFetchDirection(int direction)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getFetchSize()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public void setFetchSize(int rows)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public float getFloat(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getFloat(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public float getFloat(String columnLabel)\n+      throws SQLException {\n+    return getFloat(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public int getHoldability()\n+      throws SQLException {\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getInt(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getInt(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public int getInt(String columnLabel)\n+      throws SQLException {\n+    return getInt(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public long getLong(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getLong(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public long getLong(String columnLabel)\n+      throws SQLException {\n+    return getLong(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public ResultSetMetaData getMetaData()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getNCharacterStream(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getNCharacterStream(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public NClob getNClob(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public NClob getNClob(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getNString(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getNString(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex, Map<String, Class<?>> map)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Object getObject(String columnLabel, Map<String, Class<?>> map)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public <T> T getObject(int columnIndex, Class<T> type)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public <T> T getObject(String columnLabel, Class<T> type)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Ref getRef(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Ref getRef(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int getRow()\n+      throws SQLException {\n+    return _currentRow;\n+  }\n+\n+  @Override\n+  public RowId getRowId(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public RowId getRowId(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLXML getSQLXML(int columnIndex)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLXML getSQLXML(String columnLabel)\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public short getShort(String columnLabel)\n+      throws SQLException {\n+    return getShort(columnLabel);\n+  }\n+\n+  @Override\n+  public short getShort(int columnIndex)\n+      throws SQLException {\n+    Integer value = getInt(columnIndex);\n+    return value.shortValue();\n+  }\n+\n+  @Override\n+  public Statement getStatement()\n+      throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getString(int columnIndex)\n+      throws SQLException {\n+    return _resultSet.getString(_currentRow, columnIndex);\n+  }\n+\n+  @Override\n+  public String getString(String columnLabel)\n+      throws SQLException {\n+    return getString(findColumn(columnLabel));\n+  }\n+\n+  @Override\n+  public Time getTime(int columnIndex)\n+      throws SQLException {\n+    return getTime(columnIndex, Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Time getTime(String columnLabel)\n+      throws SQLException {\n+    return getTime(findColumn(columnLabel), Calendar.getInstance());\n+  }\n+\n+  @Override\n+  public Time getTime(int columnIndex, Calendar cal)\n+      throws SQLException {\n+    try {\n+      String value = getString(columnIndex);\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(TIMESTAMP_FORMAT);", "originalCommit": "4974a66a0efaea752da6aa10828383f4f0deca9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzOTY5Mg==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446639692", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-06-28T11:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MzQ1OA==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r445753458", "bodyText": "can we create AbstractBaseResultSet and implement all unsupported exceptions in that class. this will improve readability in this class", "author": "kishoreg", "createdAt": "2020-06-25T18:25:17Z", "path": "pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/PinotResultSet.java", "diffHunk": "@@ -0,0 +1,1317 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLType;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Hex;\n+\n+\n+public class PinotResultSet implements ResultSet {", "originalCommit": "4974a66a0efaea752da6aa10828383f4f0deca9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzOTcwOA==", "url": "https://github.com/apache/pinot/pull/5602#discussion_r446639708", "bodyText": "done", "author": "KKcorps", "createdAt": "2020-06-28T11:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MzQ1OA=="}], "type": "inlineReview"}, {"oid": "ada4250e53682a62919aaded5369d35e9915980b", "url": "https://github.com/apache/pinot/commit/ada4250e53682a62919aaded5369d35e9915980b", "message": "adding close function for connections", "committedDate": "2020-06-28T17:33:56Z", "type": "forcePushed"}, {"oid": "574221c72dd11bca1cd9949a93c491972bf02ab0", "url": "https://github.com/apache/pinot/commit/574221c72dd11bca1cd9949a93c491972bf02ab0", "message": "Adding jdbc driver", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "39e1333d165f06bde1e7ddcd1ad4397935311535", "url": "https://github.com/apache/pinot/commit/39e1333d165f06bde1e7ddcd1ad4397935311535", "message": "changing function parameter names", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "a8f8556eb2be9413f77d76c9c6a84568174efcc6", "url": "https://github.com/apache/pinot/commit/a8f8556eb2be9413f77d76c9c6a84568174efcc6", "message": "adding unsuported exceptions to methods", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "2d657ca30d4fcfaf6313528ede043849e031ed1d", "url": "https://github.com/apache/pinot/commit/2d657ca30d4fcfaf6313528ede043849e031ed1d", "message": "implementing various data types for ResultSet", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "2f9ababab82296eb66b15b5e14ff18eb90ee9885", "url": "https://github.com/apache/pinot/commit/2f9ababab82296eb66b15b5e14ff18eb90ee9885", "message": "adding missing definitions", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "68030b0e3b2f884db02f8b285b98f2596f642444", "url": "https://github.com/apache/pinot/commit/68030b0e3b2f884db02f8b285b98f2596f642444", "message": "moving unsupported and overloaded functions to abstract class", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "f1b43141afcafe078d18639fad9c0716ed73a51f", "url": "https://github.com/apache/pinot/commit/f1b43141afcafe078d18639fad9c0716ed73a51f", "message": "adding validation for closed state", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "180190d7474e8b3cc68d2cad1920df8119777d5c", "url": "https://github.com/apache/pinot/commit/180190d7474e8b3cc68d2cad1920df8119777d5c", "message": "adding unit tests for result set", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "3f2d601e4c67d491ca78c2c2c641655a3c2caf84", "url": "https://github.com/apache/pinot/commit/3f2d601e4c67d491ca78c2c2c641655a3c2caf84", "message": "added missing license headers", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "99bbe4d69e5fd2e65be927e25b3cb0e4285ac519", "url": "https://github.com/apache/pinot/commit/99bbe4d69e5fd2e65be927e25b3cb0e4285ac519", "message": "bug fix and unit tests for result set", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "ccf7eeda98977027ad72d678d5417bbbf95a6689", "url": "https://github.com/apache/pinot/commit/ccf7eeda98977027ad72d678d5417bbbf95a6689", "message": "adding test for statement", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "bb0cb26032f537227d8437e1cef76211fa86b148", "url": "https://github.com/apache/pinot/commit/bb0cb26032f537227d8437e1cef76211fa86b148", "message": "adding more tests", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "24f1ed12448f34e262d8b4b6559f721b0f527bec", "url": "https://github.com/apache/pinot/commit/24f1ed12448f34e262d8b4b6559f721b0f527bec", "message": "adding prepared statement and fix license headers", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "9f1c89351884b431d298eb3cdc6f5b256f4918d3", "url": "https://github.com/apache/pinot/commit/9f1c89351884b431d298eb3cdc6f5b256f4918d3", "message": "refactoring", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "f230bb5ec5eb7290f915b190a3db450ae36885e4", "url": "https://github.com/apache/pinot/commit/f230bb5ec5eb7290f915b190a3db450ae36885e4", "message": "Adding license headers", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "08307662d77ec31d4a6fc80f51f725dc49021b76", "url": "https://github.com/apache/pinot/commit/08307662d77ec31d4a6fc80f51f725dc49021b76", "message": "adding unit tests for prepared statements", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "b59766f46d178d646d84fc3c60e0c76e45ada71c", "url": "https://github.com/apache/pinot/commit/b59766f46d178d646d84fc3c60e0c76e45ada71c", "message": "adding close function for connections", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "997e471eb8c0ae6e0da8ced092f6d4f2538d35b0", "url": "https://github.com/apache/pinot/commit/997e471eb8c0ae6e0da8ced092f6d4f2538d35b0", "message": "fixing unit test", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "02d74ddb9da3bd4d25d8cd769743a14b03ae1bd4", "url": "https://github.com/apache/pinot/commit/02d74ddb9da3bd4d25d8cd769743a14b03ae1bd4", "message": "adding code to register driver", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "fd48095728dd9449e49db58194d99962d86b4a23", "url": "https://github.com/apache/pinot/commit/fd48095728dd9449e49db58194d99962d86b4a23", "message": "adding META-INF for driver manager", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "44427a497a09bf8482062a809ac4e7b75797f26e", "url": "https://github.com/apache/pinot/commit/44427a497a09bf8482062a809ac4e7b75797f26e", "message": "bug fix", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "f6e2e6db9aadf135e5c435e8a168bb3009dccd42", "url": "https://github.com/apache/pinot/commit/f6e2e6db9aadf135e5c435e8a168bb3009dccd42", "message": "adding metadata to connections", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "64d6435bb9bfcafdb95d69ea7ab58e26513603da", "url": "https://github.com/apache/pinot/commit/64d6435bb9bfcafdb95d69ea7ab58e26513603da", "message": "bug fixes and metadata implementation", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "985830a20117b4094afcd82d7634a4460e052681", "url": "https://github.com/apache/pinot/commit/985830a20117b4094afcd82d7634a4460e052681", "message": "refactoring", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "3abf33140f4cd5534e20aab18b2d1fb30058137f", "url": "https://github.com/apache/pinot/commit/3abf33140f4cd5534e20aab18b2d1fb30058137f", "message": "Adding connection metadata", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "8c997130cd28780a2eca543493f3edf857be854a", "url": "https://github.com/apache/pinot/commit/8c997130cd28780a2eca543493f3edf857be854a", "message": "moving default methods to abstract class", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "dab43cbca9e73d7d67cfa8c731ec94268b8ab0fb", "url": "https://github.com/apache/pinot/commit/dab43cbca9e73d7d67cfa8c731ec94268b8ab0fb", "message": "removing main function from test", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "6d6cbd62dd7b87c2a5df39097bcac606a5af90fa", "url": "https://github.com/apache/pinot/commit/6d6cbd62dd7b87c2a5df39097bcac606a5af90fa", "message": "removing unused import", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "a5f49e4791c6a95d5004db5689c5279d9031948d", "url": "https://github.com/apache/pinot/commit/a5f49e4791c6a95d5004db5689c5279d9031948d", "message": "adding license header", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "414ac462ea36ee79dc071f1dfd2152f1a5ae15fa", "url": "https://github.com/apache/pinot/commit/414ac462ea36ee79dc071f1dfd2152f1a5ae15fa", "message": "adding support for fetching column data type", "committedDate": "2020-07-10T06:40:26Z", "type": "commit"}, {"oid": "c1a68b63615a1c7e74d4e9fa6876572f93ab7045", "url": "https://github.com/apache/pinot/commit/c1a68b63615a1c7e74d4e9fa6876572f93ab7045", "message": "removing catalog and schema", "committedDate": "2020-07-11T21:29:57Z", "type": "commit"}, {"oid": "c1a68b63615a1c7e74d4e9fa6876572f93ab7045", "url": "https://github.com/apache/pinot/commit/c1a68b63615a1c7e74d4e9fa6876572f93ab7045", "message": "removing catalog and schema", "committedDate": "2020-07-11T21:29:57Z", "type": "forcePushed"}]}