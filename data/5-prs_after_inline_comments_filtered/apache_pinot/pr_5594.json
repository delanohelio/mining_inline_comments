{"pr_number": 5594, "pr_title": "[QueryContext] Enhance Predicate.toString() to return valid expression", "pr_createdAt": "2020-06-19T19:38:19Z", "pr_url": "https://github.com/apache/pinot/pull/5594", "timeline": [{"oid": "e2e0bfca3b7f52c344840beb06446b410eaba083", "url": "https://github.com/apache/pinot/commit/e2e0bfca3b7f52c344840beb06446b410eaba083", "message": "[QueryContext] Enhance Predicate.toString() to return valid expression\n\n- The expression returned can be parsed back to the same predicate\n- The expression returned is the standardized string representation of the predicate\n- This change can help solve the predicate standardization problem in DistinctCountThetaSketch\n\nAlso extract the common converter methods in BrokerRequestToQueryContextConverter into QueryContextConverterUtils so that they can be used by other classes", "committedDate": "2020-06-19T19:39:08Z", "type": "commit"}, {"oid": "e2e0bfca3b7f52c344840beb06446b410eaba083", "url": "https://github.com/apache/pinot/commit/e2e0bfca3b7f52c344840beb06446b410eaba083", "message": "[QueryContext] Enhance Predicate.toString() to return valid expression\n\n- The expression returned can be parsed back to the same predicate\n- The expression returned is the standardized string representation of the predicate\n- This change can help solve the predicate standardization problem in DistinctCountThetaSketch\n\nAlso extract the common converter methods in BrokerRequestToQueryContextConverter into QueryContextConverterUtils so that they can be used by other classes", "committedDate": "2020-06-19T19:39:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzNzI2Ng==", "url": "https://github.com/apache/pinot/pull/5594#discussion_r443037266", "bodyText": "Checkout ParserUtils to see if there's any overlap.", "author": "mayankshriv", "createdAt": "2020-06-19T20:45:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/request/context/utils/QueryContextConverterUtils.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.request.context.utils;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.function.FunctionDefinitionRegistry;\n+import org.apache.pinot.common.request.Expression;\n+import org.apache.pinot.common.request.ExpressionType;\n+import org.apache.pinot.common.request.FilterOperator;\n+import org.apache.pinot.common.request.Function;\n+import org.apache.pinot.common.utils.request.FilterQueryTree;\n+import org.apache.pinot.core.query.exception.BadQueryRequestException;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.core.query.request.context.FilterContext;\n+import org.apache.pinot.core.query.request.context.FunctionContext;\n+import org.apache.pinot.core.query.request.context.predicate.EqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.InPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNotNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.IsNullPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotEqPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.NotInPredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RangePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.RegexpLikePredicate;\n+import org.apache.pinot.core.query.request.context.predicate.TextMatchPredicate;\n+import org.apache.pinot.pql.parsers.Pql2Compiler;\n+import org.apache.pinot.pql.parsers.pql2.ast.AstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.FilterKind;\n+import org.apache.pinot.pql.parsers.pql2.ast.FunctionCallAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.IdentifierAstNode;\n+import org.apache.pinot.pql.parsers.pql2.ast.LiteralAstNode;\n+\n+\n+public class QueryContextConverterUtils {", "originalCommit": "e2e0bfca3b7f52c344840beb06446b410eaba083", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA0NzIwNA==", "url": "https://github.com/apache/pinot/pull/5594#discussion_r443047204", "bodyText": "The method return value type of this class is always the new context classes, so there is no overlap. ParserUtils is mainly for PinotQuery to BrokerRequest.", "author": "Jackie-Jiang", "createdAt": "2020-06-19T21:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAzNzI2Ng=="}], "type": "inlineReview"}]}