{"pr_number": 5706, "pr_title": "DateTimeFieldSpec validation in schema validate", "pr_createdAt": "2020-07-15T01:04:28Z", "pr_url": "https://github.com/apache/pinot/pull/5706", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc2OTI2Mg==", "url": "https://github.com/apache/pinot/pull/5706#discussion_r454769262", "bodyText": "Let's keep this method for simplicity", "author": "Jackie-Jiang", "createdAt": "2020-07-15T03:31:40Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/SchemaUtils.java", "diffHunk": "@@ -39,65 +46,99 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(SchemaUtils.class);\n \n-  /**\n-   * Validates that for a field spec with transform function, the source column name and destination column name are exclusive\n-   * i.e. do not allow using source column name for destination column\n-   */\n-  public static boolean validate(Schema schema) {", "originalCommit": "4742325a49b2767e19aadf15a35748cd34bc0d88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3MDQ5MA==", "url": "https://github.com/apache/pinot/pull/5706#discussion_r454770490", "bodyText": "Recommend using exception to pass the failure message instead of passing in a logger. The problem of using logger is that the caller cannot control the logging level. For user input, in most cases we don't want to log error which usually stands for severe problems.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static boolean isValidGranularity(String granularity, Logger ctxLogger) {\n          \n          \n            \n              public static void validateGranularity(String granularity) {", "author": "Jackie-Jiang", "createdAt": "2020-07-15T03:36:23Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/DateTimeGranularitySpec.java", "diffHunk": "@@ -87,33 +85,43 @@ public TimeUnit getTimeUnit() {\n    * <ul>\n    * <li>Convert a granularity to millis.\n    * This method should not do validation of outputGranularity.\n-   * The validation should be handled by caller using {@link #isValidGranularity(String)}</li>\n+   * The validation should be handled by caller using {@link #isValidGranularity}</li>\n    * <ul>\n    * <li>1) granularityToMillis(1:HOURS) = 3600000 (60*60*1000)</li>\n    * <li>2) granularityToMillis(1:MILLISECONDS) = 1</li>\n    * <li>3) granularityToMillis(15:MINUTES) = 900000 (15*60*1000)</li>\n    * </ul>\n    * </ul>\n-   * @return\n    */\n   public Long granularityToMillis() {\n     return TimeUnit.MILLISECONDS.convert(_size, _timeUnit);\n   }\n \n   /**\n    * Check correctness of granularity of {@link DateTimeFieldSpec}\n-   * @param granularity\n-   * @return\n    */\n-  public static boolean isValidGranularity(String granularity) {\n-    Preconditions.checkNotNull(granularity);\n+  public static boolean isValidGranularity(String granularity, Logger ctxLogger) {", "originalCommit": "4742325a49b2767e19aadf15a35748cd34bc0d88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "url": "https://github.com/apache/pinot/commit/8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "message": "DateTimeFieldSpec validation in SchemaUtils validate", "committedDate": "2020-07-16T18:36:26Z", "type": "commit"}, {"oid": "8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "url": "https://github.com/apache/pinot/commit/8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "message": "DateTimeFieldSpec validation in SchemaUtils validate", "committedDate": "2020-07-16T18:36:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNzc5MA==", "url": "https://github.com/apache/pinot/pull/5706#discussion_r456137790", "bodyText": "(nit) Space after ':' and no '.' after the schema name for readability. Same for other exceptions\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new ControllerApplicationException(LOGGER, String.format(\"Invalid schema:%s.\", schema.getSchemaName()),\n          \n          \n            \n                  throw new ControllerApplicationException(LOGGER, \"Invalid schema: \" + schema.getSchemaName()),", "author": "Jackie-Jiang", "createdAt": "2020-07-16T23:42:16Z", "path": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java", "diffHunk": "@@ -170,9 +170,11 @@ public SuccessResponse addSchema(\n   @ApiResponses(value = {@ApiResponse(code = 200, message = \"Successfully validated schema\"), @ApiResponse(code = 400, message = \"Missing or invalid request body\"), @ApiResponse(code = 500, message = \"Internal error\")})\n   public String validateSchema(FormDataMultiPart multiPart) {\n     Schema schema = getSchemaFromMultiPart(multiPart);\n-    if (!SchemaUtils.validate(schema, LOGGER)) {\n-      throw new ControllerApplicationException(LOGGER, \"Invalid schema. Check controller logs\",\n-          Response.Status.BAD_REQUEST);\n+    try {\n+      SchemaUtils.validate(schema);\n+    } catch (Exception e) {\n+      throw new ControllerApplicationException(LOGGER, String.format(\"Invalid schema:%s.\", schema.getSchemaName()),", "originalCommit": "8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzODc5Mw==", "url": "https://github.com/apache/pinot/pull/5706#discussion_r456138793", "bodyText": "Log the exception here", "author": "Jackie-Jiang", "createdAt": "2020-07-16T23:45:23Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -417,10 +415,11 @@ private boolean isValid(Schema schema, IndexingConfig indexingConfig) {\n       }\n     }\n     // 2. We want to get the schema errors, if any, even if isValid is false;\n-    if (!SchemaUtils.validate(schema, _logger)) {\n+    try {\n+      SchemaUtils.validate(schema);\n+    } catch (Exception e) {\n       isValid = false;", "originalCommit": "8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzOTQ2Mg==", "url": "https://github.com/apache/pinot/pull/5706#discussion_r456139462", "bodyText": "For readability. Same for other checks\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (arguments.contains(column)) {\n          \n          \n            \n                          throw new IllegalStateException(\"The arguments of transform function '\" + transformFunction\n          \n          \n            \n                              + \"' should not contain the destination column '\" + column + \"'\");\n          \n          \n            \n                        }\n          \n          \n            \n                        Preconditions.checkState(arguments.contains(column), \"The arguments of transform function '%s' should not contain the destination column '%s'\", transformFunction, column);", "author": "Jackie-Jiang", "createdAt": "2020-07-16T23:47:40Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/SchemaUtils.java", "diffHunk": "@@ -37,67 +41,87 @@\n   public static final String MAP_KEY_COLUMN_SUFFIX = \"__KEYS\";\n   public static final String MAP_VALUE_COLUMN_SUFFIX = \"__VALUES\";\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(SchemaUtils.class);\n-\n   /**\n-   * Validates that for a field spec with transform function, the source column name and destination column name are exclusive\n-   * i.e. do not allow using source column name for destination column\n+   * Validates the following:\n+   * 1) Checks valid transform function -\n+   *   for a field spec with transform function, the source column name and destination column name are exclusive i.e. do not allow using source column name for destination column\n+   *   ensure transform function string can be used to create a {@link FunctionEvaluator}\n+   * 2) Checks for chained transforms/derived transform - not supported yet\n+   * TODO: Transform functions have moved to table config. Once we stop supporting them in schema, remove the validations 1 and 2\n+   * 3) Checks valid timeFieldSpec - if incoming and outgoing granularity spec are different a) the names cannot be same b) cannot use SIMPLE_DATE_FORMAT for conversion\n+   * 4) Checks valid dateTimeFieldSpecs - checks format and granularity string\n+   * 5) Schema validations from {@link Schema#validate}\n    */\n-  public static boolean validate(Schema schema) {\n-    return validate(schema, LOGGER);\n+  public static void validate(Schema schema) {\n+    schema.validate();\n+\n+    Set<String> transformedColumns = new HashSet<>();\n+    Set<String> argumentColumns = new HashSet<>();\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      if (!fieldSpec.isVirtualColumn()) {\n+        String column = fieldSpec.getName();\n+        String transformFunction = fieldSpec.getTransformFunction();\n+        if (transformFunction != null) {\n+          try {\n+            List<String> arguments = FunctionEvaluatorFactory.getExpressionEvaluator(fieldSpec).getArguments();\n+            if (arguments.contains(column)) {\n+              throw new IllegalStateException(\"The arguments of transform function '\" + transformFunction\n+                  + \"' should not contain the destination column '\" + column + \"'\");\n+            }", "originalCommit": "8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0MDg1Ng==", "url": "https://github.com/apache/pinot/pull/5706#discussion_r456140856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"Incorrect granularity:%. Must be of format size:timeunit\", granularity);\n          \n          \n            \n                    \"Incorrect granularity: %s. Must be of format 'size:timeunit'\", granularity);", "author": "Jackie-Jiang", "createdAt": "2020-07-16T23:51:46Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/data/DateTimeGranularitySpec.java", "diffHunk": "@@ -87,34 +80,33 @@ public TimeUnit getTimeUnit() {\n    * <ul>\n    * <li>Convert a granularity to millis.\n    * This method should not do validation of outputGranularity.\n-   * The validation should be handled by caller using {@link #isValidGranularity(String)}</li>\n+   * The validation should be handled by caller using {@link #validateGranularity}</li>\n    * <ul>\n    * <li>1) granularityToMillis(1:HOURS) = 3600000 (60*60*1000)</li>\n    * <li>2) granularityToMillis(1:MILLISECONDS) = 1</li>\n    * <li>3) granularityToMillis(15:MINUTES) = 900000 (15*60*1000)</li>\n    * </ul>\n    * </ul>\n-   * @return\n    */\n   public Long granularityToMillis() {\n     return TimeUnit.MILLISECONDS.convert(_size, _timeUnit);\n   }\n \n   /**\n    * Check correctness of granularity of {@link DateTimeFieldSpec}\n-   * @param granularity\n-   * @return\n    */\n-  public static boolean isValidGranularity(String granularity) {\n-    Preconditions.checkNotNull(granularity);\n+  public static void validateGranularity(String granularity) {\n+    Preconditions.checkNotNull(granularity, \"Granularity string in dateTimeFieldSpec must not be null\");\n+\n     String[] granularityTokens = granularity.split(COLON_SEPARATOR);\n-    Preconditions.checkArgument(granularityTokens.length == MAX_GRANULARITY_TOKENS, GRANULARITY_TOKENS_ERROR_STR);\n+    Preconditions.checkArgument(granularityTokens.length == MAX_GRANULARITY_TOKENS,\n+        \"Incorrect granularity:%. Must be of format size:timeunit\", granularity);", "originalCommit": "8d1000e5cfa5cdcf38c6c21c9f0148321ee939c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be2bcf4f6fa383d4e569ac154157feca0e6b612e", "url": "https://github.com/apache/pinot/commit/be2bcf4f6fa383d4e569ac154157feca0e6b612e", "message": "Fix typos in error template, change throw new IllegalStateArgument to Preconditions.checkState", "committedDate": "2020-07-17T01:22:08Z", "type": "commit"}, {"oid": "e8e79c5b647d8b17e72bf0c554596cfb8a1fa71d", "url": "https://github.com/apache/pinot/commit/e8e79c5b647d8b17e72bf0c554596cfb8a1fa71d", "message": "Fix test exception", "committedDate": "2020-07-17T03:59:26Z", "type": "commit"}]}