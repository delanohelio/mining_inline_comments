{"pr_number": 5147, "pr_title": "Support default star-tree", "pr_createdAt": "2020-03-12T19:40:23Z", "pr_url": "https://github.com/apache/pinot/pull/5147", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNjY0Mw==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r391916643", "bodyText": "If both are defined, you should pay attention to the specific start tree definition requested. This will keep backward compat also.", "author": "mcvsubbu", "createdAt": "2020-03-12T21:43:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/indexsegment/generator/SegmentGeneratorConfig.java", "diffHunk": "@@ -190,13 +190,17 @@ public SegmentGeneratorConfig(@Nullable TableConfig tableConfig, Schema schema)\n     _segmentPartitionConfig = indexingConfig.getSegmentPartitionConfig();\n \n     // Star-tree V2 configs\n-    List<StarTreeIndexConfig> starTreeIndexConfigs = indexingConfig.getStarTreeIndexConfigs();\n-    if (starTreeIndexConfigs != null && !starTreeIndexConfigs.isEmpty()) {\n-      List<StarTreeV2BuilderConfig> starTreeV2BuilderConfigs = new ArrayList<>(starTreeIndexConfigs.size());\n-      for (StarTreeIndexConfig starTreeIndexConfig : starTreeIndexConfigs) {\n-        starTreeV2BuilderConfigs.add(StarTreeV2BuilderConfig.fromIndexConfig(starTreeIndexConfig));\n+    if (indexingConfig.isEnableDefaultStarTree()) {", "originalCommit": "42fd0e9b29f2c49965c06721ffc1a075b1d96e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzOTc3OQ==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r391939779", "bodyText": "This won't have backward compatible issue because default star-tree is not enabled by default.\nBut this is a great question, and we should not ignore the explicitly configured star-tree. Modify the code to generate star-tree for both configs (if both are defined, generate both default and customized).", "author": "Jackie-Jiang", "createdAt": "2020-03-12T22:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNjY0Mw=="}], "type": "inlineReview"}, {"oid": "08095da9159a7847599c2d8c1989acc74b0addeb", "url": "https://github.com/apache/pinot/commit/08095da9159a7847599c2d8c1989acc74b0addeb", "message": "Support default star-tree\n\nSupport generating default star-tree config with the following rules:\n- All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal to the threshold (10000) will be included in the split order, sorted by their cardinality in descending order\n- Time column (if exists and dictionary-encoded) will be appended to the split order as the last element\n- Use COUNT(*) and SUM for all numeric metrics as function column pairs\n- Use default value (10000) for max leaf records", "committedDate": "2020-03-12T22:32:57Z", "type": "forcePushed"}, {"oid": "03f2fae7a37e568ac22817c2fe683ec8cff38acf", "url": "https://github.com/apache/pinot/commit/03f2fae7a37e568ac22817c2fe683ec8cff38acf", "message": "Support default star-tree\n\nSupport generating default star-tree config with the following rules:\n- All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal to the threshold (10000) will be included in the split order, sorted by their cardinality in descending order\n- Time column (if exists and dictionary-encoded) will be appended to the split order as the last element\n- Use COUNT(*) and SUM for all numeric metrics as function column pairs\n- Use default value (10000) for max leaf records", "committedDate": "2020-03-12T22:48:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1NjIxNw==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r391956217", "bodyText": "Another way to add this config may be to add a \"mode\" field in StarTreeIndexConfig. If mode is set to \"auto\" then ignore other settings. Otherwise, follow the other serttings.", "author": "mcvsubbu", "createdAt": "2020-03-12T23:24:36Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/IndexingConfig.java", "diffHunk": "@@ -145,6 +146,14 @@ public void setOnHeapDictionaryColumns(List<String> onHeapDictionaryColumns) {\n     _onHeapDictionaryColumns = onHeapDictionaryColumns;\n   }\n \n+  public boolean isEnableDefaultStarTree() {\n+    return _enableDefaultStarTree;\n+  }\n+\n+  public void setEnableDefaultStarTree(boolean enableDefaultStarTree) {\n+    _enableDefaultStarTree = enableDefaultStarTree;", "originalCommit": "03f2fae7a37e568ac22817c2fe683ec8cff38acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NjEyMg==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r391966122", "bodyText": "I prefer the current way so that the default star-tree can be enabled by one boolean flag. Don't want to change the existing StarTreeIndexConfig because adding a mode seems more confusing to me.", "author": "Jackie-Jiang", "createdAt": "2020-03-13T00:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1NjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyNjg2Mg==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r393226862", "bodyText": "@Jackie-Jiang will be good to get user feedback on this. @elonazoulay - you have used this feature - your inputs will be valuable.", "author": "kishoreg", "createdAt": "2020-03-16T18:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1NjIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMzk4Mw==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r393223983", "bodyText": "isDefaultStarTreeEnabled", "author": "kishoreg", "createdAt": "2020-03-16T18:16:33Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/IndexingConfig.java", "diffHunk": "@@ -145,6 +146,14 @@ public void setOnHeapDictionaryColumns(List<String> onHeapDictionaryColumns) {\n     _onHeapDictionaryColumns = onHeapDictionaryColumns;\n   }\n \n+  public boolean isEnableDefaultStarTree() {", "originalCommit": "03f2fae7a37e568ac22817c2fe683ec8cff38acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3NTYwNw==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r399875607", "bodyText": "This has to match the variable name (key of the config), and I prefer the config to be \"enableDefaultStarTree\": true", "author": "Jackie-Jiang", "createdAt": "2020-03-30T00:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMzk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0NzE4OA==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r393247188", "bodyText": "why are we checking the cardinality threshold for date_time but not for time?", "author": "kishoreg", "createdAt": "2020-03-16T18:58:30Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/startree/v2/builder/StarTreeV2BuilderConfig.java", "diffHunk": "@@ -58,6 +69,73 @@ public static StarTreeV2BuilderConfig fromIndexConfig(StarTreeIndexConfig indexC\n     return builder.build();\n   }\n \n+  /**\n+   * Generates default config based on the segment metadata.\n+   * <ul>\n+   *   <li>\n+   *     All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal\n+   *     to the threshold will be included in the split order, sorted by their cardinality in descending order\n+   *   </li>\n+   *   <li>Time column (if exists and dictionary-encoded) will be appended to the split order as the last element</li>\n+   *   <li>Use COUNT(*) and SUM for all numeric metrics as function column pairs</li>\n+   *   <li>Use default value for max leaf records</li>\n+   * </ul>\n+   */\n+  public static StarTreeV2BuilderConfig generateDefaultConfig(SegmentMetadataImpl segmentMetadata) {\n+    Schema schema = segmentMetadata.getSchema();\n+    List<ColumnMetadata> dimensionColumnMetadataList = new ArrayList<>();\n+    String timeColumn = null;\n+    List<String> numericMetrics = new ArrayList<>();\n+\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      if (!fieldSpec.isSingleValueField() || fieldSpec.isVirtualColumn()) {\n+        continue;\n+      }\n+      String column = fieldSpec.getName();\n+      switch (fieldSpec.getFieldType()) {\n+        case DIMENSION:\n+        case DATE_TIME:\n+          ColumnMetadata columnMetadata = segmentMetadata.getColumnMetadataFor(column);", "originalCommit": "03f2fae7a37e568ac22817c2fe683ec8cff38acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3OTY4Mw==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r399879683", "bodyText": "Here I assume time will be included in most queries and in the range filter or group by, so I decide to always include time column as the last dimension to split.\nFor DATE_TIME, I assume the query pattern should be similar to other dimensions, so use the same rule for them.\nUpdated the comments for this.\nAnother way is to just treat all of them the same, but IMO always putting time column last should suit a wider range of use cases.", "author": "Jackie-Jiang", "createdAt": "2020-03-30T00:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0NzE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0ODE4NA==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r393248184", "bodyText": "we cannot generate star tree on a column that's not dictionary encoded?", "author": "kishoreg", "createdAt": "2020-03-16T18:59:39Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/startree/v2/builder/StarTreeV2BuilderConfig.java", "diffHunk": "@@ -58,6 +69,73 @@ public static StarTreeV2BuilderConfig fromIndexConfig(StarTreeIndexConfig indexC\n     return builder.build();\n   }\n \n+  /**\n+   * Generates default config based on the segment metadata.\n+   * <ul>\n+   *   <li>\n+   *     All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal\n+   *     to the threshold will be included in the split order, sorted by their cardinality in descending order\n+   *   </li>\n+   *   <li>Time column (if exists and dictionary-encoded) will be appended to the split order as the last element</li>\n+   *   <li>Use COUNT(*) and SUM for all numeric metrics as function column pairs</li>\n+   *   <li>Use default value for max leaf records</li>\n+   * </ul>\n+   */\n+  public static StarTreeV2BuilderConfig generateDefaultConfig(SegmentMetadataImpl segmentMetadata) {\n+    Schema schema = segmentMetadata.getSchema();\n+    List<ColumnMetadata> dimensionColumnMetadataList = new ArrayList<>();\n+    String timeColumn = null;\n+    List<String> numericMetrics = new ArrayList<>();\n+\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      if (!fieldSpec.isSingleValueField() || fieldSpec.isVirtualColumn()) {\n+        continue;\n+      }\n+      String column = fieldSpec.getName();\n+      switch (fieldSpec.getFieldType()) {\n+        case DIMENSION:\n+        case DATE_TIME:\n+          ColumnMetadata columnMetadata = segmentMetadata.getColumnMetadataFor(column);\n+          if (columnMetadata.hasDictionary()\n+              && columnMetadata.getCardinality() <= DIMENSION_CARDINALITY_THRESHOLD_FOR_DEFAULT_CONFIG) {\n+            dimensionColumnMetadataList.add(columnMetadata);\n+          }\n+          break;\n+        case TIME:\n+          columnMetadata = segmentMetadata.getColumnMetadataFor(column);\n+          if (columnMetadata.hasDictionary()) {", "originalCommit": "03f2fae7a37e568ac22817c2fe683ec8cff38acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3NTk3OA==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r399875978", "bodyText": "Yes, the dimension must be dictionary encoded because we only store dictionary id in star-tree.", "author": "Jackie-Jiang", "createdAt": "2020-03-30T00:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0ODE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0ODQ0NQ==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r393248445", "bodyText": "what about hyperloglog", "author": "kishoreg", "createdAt": "2020-03-16T18:59:58Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/startree/v2/builder/StarTreeV2BuilderConfig.java", "diffHunk": "@@ -58,6 +69,73 @@ public static StarTreeV2BuilderConfig fromIndexConfig(StarTreeIndexConfig indexC\n     return builder.build();\n   }\n \n+  /**\n+   * Generates default config based on the segment metadata.\n+   * <ul>\n+   *   <li>\n+   *     All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal\n+   *     to the threshold will be included in the split order, sorted by their cardinality in descending order\n+   *   </li>\n+   *   <li>Time column (if exists and dictionary-encoded) will be appended to the split order as the last element</li>\n+   *   <li>Use COUNT(*) and SUM for all numeric metrics as function column pairs</li>\n+   *   <li>Use default value for max leaf records</li>\n+   * </ul>\n+   */\n+  public static StarTreeV2BuilderConfig generateDefaultConfig(SegmentMetadataImpl segmentMetadata) {\n+    Schema schema = segmentMetadata.getSchema();\n+    List<ColumnMetadata> dimensionColumnMetadataList = new ArrayList<>();\n+    String timeColumn = null;\n+    List<String> numericMetrics = new ArrayList<>();\n+\n+    for (FieldSpec fieldSpec : schema.getAllFieldSpecs()) {\n+      if (!fieldSpec.isSingleValueField() || fieldSpec.isVirtualColumn()) {\n+        continue;\n+      }\n+      String column = fieldSpec.getName();\n+      switch (fieldSpec.getFieldType()) {\n+        case DIMENSION:\n+        case DATE_TIME:\n+          ColumnMetadata columnMetadata = segmentMetadata.getColumnMetadataFor(column);\n+          if (columnMetadata.hasDictionary()\n+              && columnMetadata.getCardinality() <= DIMENSION_CARDINALITY_THRESHOLD_FOR_DEFAULT_CONFIG) {\n+            dimensionColumnMetadataList.add(columnMetadata);\n+          }\n+          break;\n+        case TIME:\n+          columnMetadata = segmentMetadata.getColumnMetadataFor(column);\n+          if (columnMetadata.hasDictionary()) {\n+            timeColumn = column;\n+          }\n+          break;\n+        case METRIC:\n+          if (fieldSpec.getDataType().isNumeric()) {", "originalCommit": "03f2fae7a37e568ac22817c2fe683ec8cff38acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3NjQ5Nw==", "url": "https://github.com/apache/pinot/pull/5147#discussion_r399876497", "bodyText": "For BYTES column, there is no way to tell what type of data it represents from the metadata. Similar to all other aggregation types (such as MIN, MAX, etc.), DICTINCTCOUNTHLL needs to be configured through the customized star-tree config.", "author": "Jackie-Jiang", "createdAt": "2020-03-30T00:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0ODQ0NQ=="}], "type": "inlineReview"}, {"oid": "3ae1065d5ee80e4de737997f5bacda85710a80d6", "url": "https://github.com/apache/pinot/commit/3ae1065d5ee80e4de737997f5bacda85710a80d6", "message": "Support default star-tree\n\nSupport generating default star-tree config with the following rules:\n- All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal to the threshold (10000) will be included in the split order, sorted by their cardinality in descending order\n- Time column (if exists and dictionary-encoded) will be appended to the split order as the last element\n- Use COUNT(*) and SUM for all numeric metrics as function column pairs\n- Use default value (10000) for max leaf records", "committedDate": "2020-03-30T00:53:20Z", "type": "forcePushed"}, {"oid": "f2c78e09bbdb128f05389cbfab71c0e337c9eae1", "url": "https://github.com/apache/pinot/commit/f2c78e09bbdb128f05389cbfab71c0e337c9eae1", "message": "Support default star-tree\n\nSupport generating default star-tree config with the following rules:\n- All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal to the threshold (10000) will be included in the split order, sorted by their cardinality in descending order\n- Time column (if exists and dictionary-encoded) will be appended to the split order as the last element\n- Use COUNT(*) and SUM for all numeric metrics as function column pairs\n- Use default value (10000) for max leaf records", "committedDate": "2020-03-30T00:56:47Z", "type": "forcePushed"}, {"oid": "274a212b14caaf665b2454bf16442e8cb81f357a", "url": "https://github.com/apache/pinot/commit/274a212b14caaf665b2454bf16442e8cb81f357a", "message": "Support default star-tree\n\nSupport generating default star-tree config with the following rules:\n- All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal to the threshold (10000) will be included in the split order, sorted by their cardinality in descending order\n- Time column (if exists and dictionary-encoded) will be appended to the split order as the last element\n- Use COUNT(*) and SUM for all numeric metrics as function column pairs\n- Use default value (10000) for max leaf records", "committedDate": "2020-05-12T01:45:55Z", "type": "commit"}, {"oid": "274a212b14caaf665b2454bf16442e8cb81f357a", "url": "https://github.com/apache/pinot/commit/274a212b14caaf665b2454bf16442e8cb81f357a", "message": "Support default star-tree\n\nSupport generating default star-tree config with the following rules:\n- All dictionary-encoded single-value dimensions (including date-time columns) with cardinality smaller or equal to the threshold (10000) will be included in the split order, sorted by their cardinality in descending order\n- Time column (if exists and dictionary-encoded) will be appended to the split order as the last element\n- Use COUNT(*) and SUM for all numeric metrics as function column pairs\n- Use default value (10000) for max leaf records", "committedDate": "2020-05-12T01:45:55Z", "type": "forcePushed"}]}