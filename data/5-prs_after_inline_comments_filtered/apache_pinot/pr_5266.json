{"pr_number": 5266, "pr_title": "Add PinotServiceManager to start Pinot components", "pr_createdAt": "2020-04-17T06:46:12Z", "pr_url": "https://github.com/apache/pinot/pull/5266", "timeline": [{"oid": "ffed9d22afe0e751c3c8aea4e5fa9ce3a91a12bc", "url": "https://github.com/apache/pinot/commit/ffed9d22afe0e751c3c8aea4e5fa9ce3a91a12bc", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle", "committedDate": "2020-04-17T07:16:31Z", "type": "forcePushed"}, {"oid": "c3663447abb9e9a774e7a1a7248fc1fd9dd34602", "url": "https://github.com/apache/pinot/commit/c3663447abb9e9a774e7a1a7248fc1fd9dd34602", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle", "committedDate": "2020-04-17T07:45:10Z", "type": "forcePushed"}, {"oid": "b44fe54949bd329b49c63d07430c902fce4f0284", "url": "https://github.com/apache/pinot/commit/b44fe54949bd329b49c63d07430c902fce4f0284", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-04-21T07:19:47Z", "type": "forcePushed"}, {"oid": "22d82374d2f42be9e27684a54d5d72ffb5fe70b8", "url": "https://github.com/apache/pinot/commit/22d82374d2f42be9e27684a54d5d72ffb5fe70b8", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-04-21T08:33:53Z", "type": "forcePushed"}, {"oid": "31c6bf4210c511e0366d79c2164f993cce3dfde2", "url": "https://github.com/apache/pinot/commit/31c6bf4210c511e0366d79c2164f993cce3dfde2", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-04-22T01:07:53Z", "type": "forcePushed"}, {"oid": "80a943501464d983396ae935b1ca7061d94ade37", "url": "https://github.com/apache/pinot/commit/80a943501464d983396ae935b1ca7061d94ade37", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-04-26T01:31:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExOTM1Mg==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421119352", "bodyText": "remove static imports?", "author": "npawar", "createdAt": "2020-05-06T22:04:29Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/service/api/resources/PinotServiceManagerInstanceResource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.tools.service.api.resources;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Controller.CONFIG_OF_CONTROLLER_METRICS_PREFIX;", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTU2OQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429111569", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-05-22T08:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExOTM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyMzU5NQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421123595", "bodyText": "Could you add an example in the description of how to run this command\n\nWhen providing multiple bootstrapConfigPath\nWhen starting multiple roles with default configs\n\nOr if there's any documentation, having the link here also works", "author": "npawar", "createdAt": "2020-05-06T22:14:40Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.StringArrayOptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.PINOT_SERVICE_ROLE;\n+\n+\n+/**\n+ * Class to implement StartPinotService command.\n+ *\n+ */\n+public class StartServiceManagerCommand extends AbstractBaseAdminCommand implements Command {", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTUzNQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429111535", "bodyText": "added examples", "author": "xiangfu0", "createdAt": "2020-05-22T08:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyMzU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyNDk1MA==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421124950", "bodyText": "this description is not very clear. \"Starts the PinotServiceManager...\" ?", "author": "npawar", "createdAt": "2020-05-06T22:18:07Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.StringArrayOptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.PINOT_SERVICE_ROLE;\n+\n+\n+/**\n+ * Class to implement StartPinotService command.\n+ *\n+ */\n+public class StartServiceManagerCommand extends AbstractBaseAdminCommand implements Command {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StartServiceManagerCommand.class);\n+  private final List<Configuration> _bootstrapConfigurations = new ArrayList<>();\n+  private final String[] BOOTSTRAP_SERVICES = new String[]{\"CONTROLLER\", \"BROKER\", \"SERVER\"};\n+\n+  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n+  private boolean _help;\n+  @Option(name = \"-zkAddress\", required = true, metaVar = \"<http>\", usage = \"Http address of Zookeeper.\")\n+  private String _zkAddress = DEFAULT_ZK_ADDRESS;\n+  @Option(name = \"-clusterName\", required = true, metaVar = \"<String>\", usage = \"Pinot cluster name.\")\n+  private String _clusterName = DEFAULT_CLUSTER_NAME;\n+  @Option(name = \"-port\", required = true, metaVar = \"<int>\", usage = \"Pinot service manager admin port, -1 means disable, 0 means a random available port.\")\n+  private int _port;\n+  @Option(name = \"-bootstrapConfigPaths\", handler = StringArrayOptionHandler.class, required = false, usage = \"A list of Pinot service config file paths. Each config file requires an extra config: 'pinot.service.role' to indicate which service to start.\", forbids = {\"-bootstrapServices\"})\n+  private String[] _bootstrapConfigPaths;\n+  @Option(name = \"-bootstrapServices\", handler = StringArrayOptionHandler.class, required = false, usage = \"A list of Pinot service roles to start with default config. E.g. CONTROLLER/BROKER/SERVER\", forbids = {\"-bootstrapConfigPaths\"})\n+  private String[] _bootstrapServices = BOOTSTRAP_SERVICES;\n+\n+  private PinotServiceManager _pinotServiceManager;\n+\n+  public String getZkAddress() {\n+    return _zkAddress;\n+  }\n+\n+  public StartServiceManagerCommand setZkAddress(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    return this;\n+  }\n+\n+  public String getClusterName() {\n+    return _clusterName;\n+  }\n+\n+  public StartServiceManagerCommand setClusterName(String clusterName) {\n+    _clusterName = clusterName;\n+    return this;\n+  }\n+\n+  public int getPort() {\n+    return _port;\n+  }\n+\n+  public StartServiceManagerCommand setPort(int port) {\n+    _port = port;\n+    return this;\n+  }\n+\n+  public String[] getBootstrapConfigPaths() {\n+    return _bootstrapConfigPaths;\n+  }\n+\n+  public StartServiceManagerCommand setBootstrapConfigPaths(String[] bootstrapConfigPaths) {\n+    _bootstrapConfigPaths = bootstrapConfigPaths;\n+    return this;\n+  }\n+\n+  public String[] getBootstrapServices() {\n+    return _bootstrapServices;\n+  }\n+\n+  public StartServiceManagerCommand setBootstrapServices(String[] bootstrapServices) {\n+    _bootstrapServices = bootstrapServices;\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean getHelp() {\n+    return _help;\n+  }\n+\n+  public void setHelp(boolean help) {\n+    _help = help;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"StartPinotService\";\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder()\n+        .append(\"StartServiceManager -clusterName \" + _clusterName + \" -zkAddress \" + _zkAddress + \" -port \" + _port);\n+    if (_bootstrapConfigPaths != null) {\n+      sb.append(\" -bootstrapConfigPaths \" + Arrays.toString(_bootstrapConfigPaths));\n+    } else if (_bootstrapServices != null) {\n+      sb.append(\" -bootstrapServices \" + Arrays.toString(_bootstrapServices));\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public void cleanup() {\n+  }\n+\n+  @Override\n+  public String description() {\n+    return \"Start the Pinot Service Process at the specified port.\";", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzODQ1NA==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423438454", "bodyText": "Yes. Let's please add documentation here describing the usage of this command", "author": "siddharthteotia", "createdAt": "2020-05-12T03:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyNDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTI0MA==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429111240", "bodyText": "added", "author": "xiangfu0", "createdAt": "2020-05-22T08:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyNDk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyODI5Mw==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421128293", "bodyText": "Some javadoc?", "author": "npawar", "createdAt": "2020-05-06T22:26:43Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/service/PinotServiceManagerAdminApiApplication.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.tools.service;\n+\n+import com.google.common.base.Preconditions;\n+import io.swagger.jaxrs.config.BeanConfig;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import org.glassfish.grizzly.http.server.CLStaticHttpHandler;\n+import org.glassfish.grizzly.http.server.HttpHandler;\n+import org.glassfish.grizzly.http.server.HttpServer;\n+import org.glassfish.hk2.utilities.binding.AbstractBinder;\n+import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;\n+import org.glassfish.jersey.jackson.JacksonFeature;\n+import org.glassfish.jersey.server.ResourceConfig;\n+\n+", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTE5MA==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429111190", "bodyText": "added", "author": "xiangfu0", "createdAt": "2020-05-22T08:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyODI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMTI0NA==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421131244", "bodyText": "Some javadoc for this?\nAlso, where is it used?", "author": "npawar", "createdAt": "2020-05-06T22:34:33Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/EnumArrayOptionHandler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.kohsuke.args4j.OptionDef;\n+import org.kohsuke.args4j.spi.OptionHandler;\n+import org.kohsuke.args4j.spi.Parameters;\n+import org.kohsuke.args4j.spi.Setter;\n+\n+\n+public class EnumArrayOptionHandler<T extends Enum<T>> extends OptionHandler<T> {", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTEwMg==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429111102", "bodyText": "this is not used. will delete", "author": "xiangfu0", "createdAt": "2020-05-22T08:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMTI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMTM2OQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421131369", "bodyText": "new line", "author": "npawar", "createdAt": "2020-05-06T22:34:49Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/EnumArrayOptionHandler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.kohsuke.args4j.OptionDef;\n+import org.kohsuke.args4j.spi.OptionHandler;\n+import org.kohsuke.args4j.spi.Parameters;\n+import org.kohsuke.args4j.spi.Setter;\n+\n+\n+public class EnumArrayOptionHandler<T extends Enum<T>> extends OptionHandler<T> {\n+\n+  public EnumArrayOptionHandler(CmdLineParser parser, OptionDef option, Setter<T> setter) {\n+    super(parser, option, setter);\n+  }\n+\n+  /**\n+   * Returns {@code \"T[]\"}.\n+   *\n+   * @return return \"T[]\";\n+   */\n+  @Override\n+  public String getDefaultMetaVariable() {\n+    return setter.getType().getName() + \"[]\";\n+  }\n+\n+  /**\n+   * Tries to parse {@code String[]} argument from {@link Parameters}.\n+   */\n+  @Override\n+  public int parseArguments(Parameters params)\n+      throws CmdLineException {\n+    int counter = 0;\n+    for (; counter < params.size(); counter++) {\n+      String param = params.getParameter(counter);\n+\n+      if (param.startsWith(\"-\")) {\n+        break;\n+      }\n+\n+      for (String p : param.split(\" \")) {\n+        Class<T> t = (Class<T>) setter.getType();\n+        setter.addValue(Enum.valueOf(t, p));\n+      }\n+    }\n+\n+    return counter;\n+  }\n+}", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDk1Mg==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421134952", "bodyText": "I couldn't find the logic which handles port=-1.\nI see port being set as -1 in StartControllerCommnad, StartBrokerCommand etc. But in PinotServiceManager I didn't find any special handling for it?", "author": "npawar", "createdAt": "2020-05-06T22:44:33Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.StringArrayOptionHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Helix.PINOT_SERVICE_ROLE;\n+\n+\n+/**\n+ * Class to implement StartPinotService command.\n+ *\n+ */\n+public class StartServiceManagerCommand extends AbstractBaseAdminCommand implements Command {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StartServiceManagerCommand.class);\n+  private final List<Configuration> _bootstrapConfigurations = new ArrayList<>();\n+  private final String[] BOOTSTRAP_SERVICES = new String[]{\"CONTROLLER\", \"BROKER\", \"SERVER\"};\n+\n+  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n+  private boolean _help;\n+  @Option(name = \"-zkAddress\", required = true, metaVar = \"<http>\", usage = \"Http address of Zookeeper.\")\n+  private String _zkAddress = DEFAULT_ZK_ADDRESS;\n+  @Option(name = \"-clusterName\", required = true, metaVar = \"<String>\", usage = \"Pinot cluster name.\")\n+  private String _clusterName = DEFAULT_CLUSTER_NAME;\n+  @Option(name = \"-port\", required = true, metaVar = \"<int>\", usage = \"Pinot service manager admin port, -1 means disable, 0 means a random available port.\")", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTAwNw==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429111007", "bodyText": "it's in PinotServiceManager", "author": "xiangfu0", "createdAt": "2020-05-22T08:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODk4Mw==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r421138983", "bodyText": "is it possible to add \"stopAllServers\" \"stopAllBrokers\" etc, and \"stopAll\"", "author": "npawar", "createdAt": "2020-05-06T22:55:26Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/service/api/resources/PinotServiceManagerInstanceResource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.pinot.tools.service.api.resources;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.common.utils.NetUtil;\n+import org.apache.pinot.controller.ControllerConf;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.spi.utils.JsonUtils;\n+import org.apache.pinot.tools.service.PinotServiceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.pinot.common.utils.CommonConstants.Controller.CONFIG_OF_CONTROLLER_METRICS_PREFIX;\n+import static org.apache.pinot.common.utils.CommonConstants.Controller.DEFAULT_METRICS_PREFIX;\n+import static org.apache.pinot.tools.utils.PinotConfigUtils.TMP_DIR;\n+import static org.apache.pinot.tools.utils.PinotConfigUtils.getAvailablePort;\n+\n+\n+@Api(tags = \"Startable\")\n+@Path(\"/\")\n+public class PinotServiceManagerInstanceResource {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PinotServiceManagerInstanceResource.class);\n+\n+  @Inject\n+  private PinotServiceManager _pinotServiceManager;\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/instances\")\n+  @ApiOperation(value = \"Get Pinot Instances Status\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Instance Status\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public Map<String, PinotInstanceStatus> getPinotAllInstancesStatus() {\n+    Map<String, PinotInstanceStatus> results = new HashMap<>();\n+    for (String instanceId : _pinotServiceManager.getRunningInstanceIds()) {\n+      results.put(instanceId, _pinotServiceManager.getInstanceStatus(instanceId));\n+    }\n+    return results;\n+  }\n+\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @Path(\"/instances/{instanceName}\")\n+  @ApiOperation(value = \"Get Pinot Instance Status\")\n+  @ApiResponses(value = {@ApiResponse(code = 200, message = \"Instance Status\"), @ApiResponse(code = 404, message = \"Instance Not Found\"), @ApiResponse(code = 500, message = \"Internal server error\")})\n+  public PinotInstanceStatus getPinotInstanceStatus(\n+      @ApiParam(value = \"Name of the instance\") @PathParam(\"instanceName\") String instanceName) {\n+    List<String> instanceIds = _pinotServiceManager.getRunningInstanceIds();\n+    if (instanceIds.contains(instanceName)) {\n+      return _pinotServiceManager.getInstanceStatus(instanceName);\n+    }\n+    throw new WebApplicationException(String.format(\"Instance [%s] not found.\", instanceName),\n+        Response.Status.NOT_FOUND);\n+  }\n+\n+  @DELETE", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExOTY5MA==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429119690", "bodyText": "added stopAllPinotInstances and stopPinotInstancesByRole", "author": "xiangfu0", "createdAt": "2020-05-22T08:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MTQ5NQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423151495", "bodyText": "This should never happen. Can you add an error log here with the exception stack?\nAlso, please modify the return string to be \"Exception while getting service status: \" + e.getMessage()", "author": "mcvsubbu", "createdAt": "2020-05-11T16:08:03Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java", "diffHunk": "@@ -43,17 +44,79 @@\n  */\n @SuppressWarnings(\"unused\")\n public class ServiceStatus {\n+  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n+  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n+  public static final String STATUS_DESCRIPTION_STARTED = \"Started\";\n+  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceStatus.class);\n+  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  private static final Map<String, ServiceStatusCallback> serviceStatusCallbackMap = new ConcurrentHashMap<>();\n+  private static final ServiceStatusCallback serviceStatusCallback =\n+      new MapBasedMultipleCallbackServiceStatusCallback(serviceStatusCallbackMap);\n \n-  public enum Status {\n-    STARTING, GOOD, BAD\n+  public static void setServiceStatusCallback(String name, ServiceStatusCallback serviceStatusCallback) {\n+    ServiceStatus.serviceStatusCallbackMap.put(name, serviceStatusCallback);\n   }\n \n-  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n-  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n-  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n+  public static void removeServiceStatusCallback(String name) {\n+    ServiceStatus.serviceStatusCallbackMap.remove(name);\n+  }\n \n-  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  public static Status getServiceStatus() {\n+    return getServiceStatus(serviceStatusCallback);\n+  }\n+\n+  public static Status getServiceStatus(String name) {\n+    if (serviceStatusCallbackMap.containsKey(name)) {\n+      return getServiceStatus(serviceStatusCallbackMap.get(name));\n+    } else {\n+      return Status.NOT_STARTED;\n+    }\n+  }\n+\n+  private static Status getServiceStatus(ServiceStatusCallback callback) {\n+    try {\n+      return callback.getServiceStatus();\n+    } catch (Exception e) {\n+      LOGGER.warn(\"Caught exception while reading the service status\", e);\n+      return Status.BAD;\n+    }\n+  }\n+\n+  public static String getStatusDescription() {\n+    return getStatusDescription(serviceStatusCallback);\n+  }\n+\n+  public static String getStatusDescription(String name) {\n+    if (serviceStatusCallbackMap.containsKey(name)) {\n+      return getStatusDescription(serviceStatusCallbackMap.get(name));\n+    } else {\n+      return STATUS_DESCRIPTION_NONE;\n+    }\n+  }\n+\n+  private static String getStatusDescription(ServiceStatusCallback callback) {\n+    try {\n+      return callback.getStatusDescription();\n+    } catch (Exception e) {\n+      return \"Exception: \" + e.getMessage();", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMDYwNg==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429120606", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-05-22T08:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTg4NQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423155885", "bodyText": "We add it to the map when we call start() and remove it from the map when we call stop(). So,  the status here can either be NOT_STARTED, or SHUTTING_DOWN.\nI suggest you add it to the map in the constructor, and return SHUTTING_DOWN here once you remove from the map.", "author": "mcvsubbu", "createdAt": "2020-05-11T16:15:01Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java", "diffHunk": "@@ -43,17 +44,79 @@\n  */\n @SuppressWarnings(\"unused\")\n public class ServiceStatus {\n+  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n+  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n+  public static final String STATUS_DESCRIPTION_STARTED = \"Started\";\n+  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n   private static final Logger LOGGER = LoggerFactory.getLogger(ServiceStatus.class);\n+  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  private static final Map<String, ServiceStatusCallback> serviceStatusCallbackMap = new ConcurrentHashMap<>();\n+  private static final ServiceStatusCallback serviceStatusCallback =\n+      new MapBasedMultipleCallbackServiceStatusCallback(serviceStatusCallbackMap);\n \n-  public enum Status {\n-    STARTING, GOOD, BAD\n+  public static void setServiceStatusCallback(String name, ServiceStatusCallback serviceStatusCallback) {\n+    ServiceStatus.serviceStatusCallbackMap.put(name, serviceStatusCallback);\n   }\n \n-  public static final String STATUS_DESCRIPTION_NONE = \"None\";\n-  public static final String STATUS_DESCRIPTION_INIT = \"Init\";\n-  public static final String STATUS_DESCRIPTION_NO_HELIX_STATE = \"Helix state does not exist\";\n+  public static void removeServiceStatusCallback(String name) {\n+    ServiceStatus.serviceStatusCallbackMap.remove(name);\n+  }\n \n-  private static final int MAX_RESOURCE_NAMES_TO_LOG = 5;\n+  public static Status getServiceStatus() {\n+    return getServiceStatus(serviceStatusCallback);\n+  }\n+\n+  public static Status getServiceStatus(String name) {\n+    if (serviceStatusCallbackMap.containsKey(name)) {\n+      return getServiceStatus(serviceStatusCallbackMap.get(name));\n+    } else {\n+      return Status.NOT_STARTED;", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzI1Ng==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429123256", "bodyText": "We  have status of NOT_STARTED, STARTING, GOOD, BAD for now.\nI feel it's ok to say NOT_STARTED after we stop an instance, as it's still possible to start a new instance later on.", "author": "xiangfu0", "createdAt": "2020-05-22T08:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzODE5MQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r430838191", "bodyText": "But then the shut down sequence is not instantaneous. You call shutdown and then wait for it to shutdown. During that time, the status should be SHUTTING_DOWN. And then you can change it to NOT_STARTED when the shutdown is complete.", "author": "mcvsubbu", "createdAt": "2020-05-27T03:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODgxNw==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r430928817", "bodyText": "Got it. Added SHUTTING_DOWN status.\nMy feeling is that during shutting down phase, the getServiceStatus(serviceStatusCallbackMap.get(name)) should return SHUTTING_DOWN.\nOnce server is completely shutdown, it will be removed from the serviceStatusCallbackMap so the status will be NOT_STARTED", "author": "xiangfu0", "createdAt": "2020-05-27T08:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNjg2NQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423436865", "bodyText": "Let's enhance this by saying these are the roles that a node in pinot cluster can take?", "author": "siddharthteotia", "createdAt": "2020-05-12T03:13:27Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/services/ServiceRole.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.services;\n+\n+/**\n+ * ServiceRole defines a role that Pinot Service could start/stop.", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzOTEwNQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r423439105", "bodyText": "Can we just have this as Service or may be StartableService?", "author": "siddharthteotia", "createdAt": "2020-05-12T03:22:41Z", "path": "pinot-spi/src/main/java/org/apache/pinot/spi/services/ServiceStartable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.spi.services;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+\n+/**\n+ * ServiceStartable is the general interface to manage a Pinot instance lifecycle for a specific ServiceRole.\n+ * E.g. Controller/Broker/Server/Minion.\n+ *\n+ */\n+public interface ServiceStartable {", "originalCommit": "80a943501464d983396ae935b1ca7061d94ade37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyMjE2NQ==", "url": "https://github.com/apache/pinot/pull/5266#discussion_r429422165", "bodyText": "Changed to StartableService", "author": "xiangfu0", "createdAt": "2020-05-22T19:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzOTEwNQ=="}], "type": "inlineReview"}, {"oid": "4e545cff9a2464b2b7802c54cab705c31edb633c", "url": "https://github.com/apache/pinot/commit/4e545cff9a2464b2b7802c54cab705c31edb633c", "message": "Address comments", "committedDate": "2020-05-22T08:25:20Z", "type": "forcePushed"}, {"oid": "167dfbae4fa6d47faa092d5177eba89096eaa0ea", "url": "https://github.com/apache/pinot/commit/167dfbae4fa6d47faa092d5177eba89096eaa0ea", "message": "Address comments", "committedDate": "2020-05-22T08:52:15Z", "type": "forcePushed"}, {"oid": "112870b84b484a4346db98510d5b66768d161714", "url": "https://github.com/apache/pinot/commit/112870b84b484a4346db98510d5b66768d161714", "message": "Address comments", "committedDate": "2020-05-22T09:04:23Z", "type": "forcePushed"}, {"oid": "723c2aeae0a631919d12c921709e55797789ce4e", "url": "https://github.com/apache/pinot/commit/723c2aeae0a631919d12c921709e55797789ce4e", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-05-27T08:02:20Z", "type": "forcePushed"}, {"oid": "dc7cc256525d0b323f7756961586998d21cc0f2a", "url": "https://github.com/apache/pinot/commit/dc7cc256525d0b323f7756961586998d21cc0f2a", "message": "Make ServiceStatus takes into account multiple services", "committedDate": "2020-05-27T08:03:23Z", "type": "commit"}, {"oid": "93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "url": "https://github.com/apache/pinot/commit/93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-05-27T08:04:10Z", "type": "commit"}, {"oid": "93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "url": "https://github.com/apache/pinot/commit/93c5c9b38ebc1dcddc8d243f43bb649caafc9b6e", "message": "Adding PinotServiceManager to manage Pinot Startable lifecycle.", "committedDate": "2020-05-27T08:04:10Z", "type": "forcePushed"}]}