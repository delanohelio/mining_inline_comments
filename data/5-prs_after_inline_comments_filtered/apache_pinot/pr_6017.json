{"pr_number": 6017, "pr_title": "Table indexing config validation", "pr_createdAt": "2020-09-15T04:41:52Z", "pr_url": "https://github.com/apache/pinot/pull/6017", "timeline": [{"oid": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d", "url": "https://github.com/apache/pinot/commit/139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d", "message": "Adding validation for table indexing config to check for valid column names", "committedDate": "2020-09-15T04:38:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MTc0Nw==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r488791747", "bodyText": "Can you also add FieldConfig validation here?", "author": "mcvsubbu", "createdAt": "2020-09-15T16:13:10Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +229,54 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {", "originalCommit": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDY4Mg==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490584682", "bodyText": "Done", "author": "icefury71", "createdAt": "2020-09-17T21:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MTc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODQ4Ng==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r488818486", "bodyText": "Could you update the description of the method validate as well?", "author": "jackjlli", "createdAt": "2020-09-15T16:55:47Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -65,6 +68,7 @@ public static void validate(TableConfig tableConfig, @Nullable Schema schema) {\n     validateValidationConfig(tableConfig, schema);\n     validateIngestionConfig(tableConfig.getIngestionConfig(), schema);\n     validateTierConfigList(tableConfig.getTierConfigsList());\n+    validateIndexingConfig(tableConfig.getIndexingConfig(), schema);", "originalCommit": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDYzNQ==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490584635", "bodyText": "Done", "author": "icefury71", "createdAt": "2020-09-17T21:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxODQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNzMxNA==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r489027314", "bodyText": "can we include star tree index columns here?", "author": "npawar", "createdAt": "2020-09-15T22:24:32Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +229,54 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {\n+      return;\n+    }\n+    Map<String, String> columnNameToConfigMap = new HashMap<>();\n+\n+    if (indexingConfig.getBloomFilterColumns() != null) {\n+      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      }\n+    }\n+    if (indexingConfig.getInvertedIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getInvertedIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Inverted Index Config\");\n+      }\n+    }\n+    if (indexingConfig.getNoDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getNoDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"No Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getOnHeapDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getOnHeapDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"On Heap Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getRangeIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getRangeIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Range Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getSortedColumn() != null) {\n+      for (String columnName : indexingConfig.getSortedColumn()) {\n+        columnNameToConfigMap.put(columnName, \"Sorted Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getVarLengthDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getVarLengthDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Var Length Column Config\");\n+      }\n+    }\n+", "originalCommit": "139cfdbfcf10872ce12e7ebb0d4f9bf2b778b05d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDU5OA==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490584598", "bodyText": "Added. Please review", "author": "icefury71", "createdAt": "2020-09-17T21:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNzMxNA=="}], "type": "inlineReview"}, {"oid": "0ba0dd38be3ef120c3765af45a2c8a10258b7431", "url": "https://github.com/apache/pinot/commit/0ba0dd38be3ef120c3765af45a2c8a10258b7431", "message": "* Addressing review comments: adding validation for FieldConfigList. Adding javadocs\n* Bug fix in integration test regarding removal of existing column from schema", "committedDate": "2020-09-17T21:06:53Z", "type": "commit"}, {"oid": "b553b44bdaf79a7e23b91e811d9c87d04f3cef24", "url": "https://github.com/apache/pinot/commit/b553b44bdaf79a7e23b91e811d9c87d04f3cef24", "message": "Adding validation for StarTreeIndexingConfig", "committedDate": "2020-09-17T21:56:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjI2OA==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490616268", "bodyText": "can we use the AggregationFunctionColumnPair#fromColumnName or reuse the delimiter field in this class?", "author": "npawar", "createdAt": "2020-09-17T23:28:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -225,4 +233,99 @@ private static void validateTierConfigList(@Nullable List<TierConfig> tierConfig\n       }\n     }\n   }\n+\n+  /**\n+   * Validates the Indexing Config\n+   * Ensures that every referred column name exists in the corresponding schema\n+   */\n+  private static void validateIndexingConfig(@Nullable IndexingConfig indexingConfig, @Nullable Schema schema) {\n+    if (indexingConfig == null || schema == null) {\n+      return;\n+    }\n+    Map<String, String> columnNameToConfigMap = new HashMap<>();\n+\n+    if (indexingConfig.getBloomFilterColumns() != null) {\n+      for (String columnName : indexingConfig.getBloomFilterColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Bloom Filter Config\");\n+      }\n+    }\n+    if (indexingConfig.getInvertedIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getInvertedIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Inverted Index Config\");\n+      }\n+    }\n+    if (indexingConfig.getNoDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getNoDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"No Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getOnHeapDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getOnHeapDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"On Heap Dictionary Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getRangeIndexColumns() != null) {\n+      for (String columnName : indexingConfig.getRangeIndexColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Range Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getSortedColumn() != null) {\n+      for (String columnName : indexingConfig.getSortedColumn()) {\n+        columnNameToConfigMap.put(columnName, \"Sorted Column Config\");\n+      }\n+    }\n+    if (indexingConfig.getVarLengthDictionaryColumns() != null) {\n+      for (String columnName : indexingConfig.getVarLengthDictionaryColumns()) {\n+        columnNameToConfigMap.put(columnName, \"Var Length Column Config\");\n+      }\n+    }\n+    List<StarTreeIndexConfig> starTreeIndexConfigList = indexingConfig.getStarTreeIndexConfigs();\n+    if (starTreeIndexConfigList != null) {\n+      for (StarTreeIndexConfig starTreeIndexConfig : starTreeIndexConfigList) {\n+        // Dimension split order cannot be null\n+        for (String columnName : starTreeIndexConfig.getDimensionsSplitOrder()) {\n+          columnNameToConfigMap.put(columnName, \"StarTreeIndex Config\");\n+        }\n+        // Function column pairs cannot be null\n+        for (String functionColumnPair : starTreeIndexConfig.getFunctionColumnPairs()) {\n+          String[] functionColumnArray = functionColumnPair.split(\"__\");", "originalCommit": "b553b44bdaf79a7e23b91e811d9c87d04f3cef24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY2NDQyMQ==", "url": "https://github.com/apache/pinot/pull/6017#discussion_r490664421", "bodyText": "Done", "author": "icefury71", "createdAt": "2020-09-18T02:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjI2OA=="}], "type": "inlineReview"}, {"oid": "917b8f671ac7c4a39d76e869ef29ef42e75ea27d", "url": "https://github.com/apache/pinot/commit/917b8f671ac7c4a39d76e869ef29ef42e75ea27d", "message": "Addressing review comments", "committedDate": "2020-09-18T02:27:31Z", "type": "commit"}]}