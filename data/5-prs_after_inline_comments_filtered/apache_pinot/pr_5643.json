{"pr_number": 5643, "pr_title": "SQL Compilation Fixes", "pr_createdAt": "2020-07-01T07:51:44Z", "pr_url": "https://github.com/apache/pinot/pull/5643", "timeline": [{"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "url": "https://github.com/apache/pinot/commit/ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "message": "SQL compilation fixes", "committedDate": "2020-07-01T07:47:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNjEyNw==", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448526127", "bodyText": "(nit) empty line", "author": "Jackie-Jiang", "createdAt": "2020-07-01T17:54:02Z", "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1664,4 +1664,64 @@ public void testLiteralExpressionCheck() throws SqlParseException {\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"a+B\")));\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"c+1\")));\n   }\n+\n+  @Test\n+  public void testCaseInsensitiveFilter() {\n+    String query = \"SELECT count(*) FROM foo where text_match(col, 'expr')\";\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();\n+    BrokerRequest brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where TEXT_MATCH(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where regexp_like(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where REGEXP_LIKE(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where col is not null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NOT NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col is null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+  }\n }", "originalCommit": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODAyOA==", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448528028", "bodyText": "(nit) Change line 270 as well\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //first operand is the always the column\n          \n          \n            \n                        // First operand is the left-hand side column/expression of the predicate", "author": "Jackie-Jiang", "createdAt": "2020-07-01T17:57:28Z", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -272,7 +271,11 @@ private FilterQuery traverseFilterExpression(Expression filterExpression, Filter\n             filterQuery.setColumn(ParserUtils.standardizeExpression(operands.get(0), false));\n             filterQuery.setValue(ParserUtils.getFilterValues(filterKind, operands));\n             break;\n-\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            //first operand is the always the column", "originalCommit": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "500c7c266dcef729a872bad51b7d2afebea6d1d0", "url": "https://github.com/apache/pinot/commit/500c7c266dcef729a872bad51b7d2afebea6d1d0", "message": "Fix tests", "committedDate": "2020-07-02T00:41:40Z", "type": "commit"}]}