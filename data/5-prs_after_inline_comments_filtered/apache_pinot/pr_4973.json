{"pr_number": 4973, "pr_title": "Add confluent schema registry message decoder", "pr_createdAt": "2020-01-12T12:26:31Z", "pr_url": "https://github.com/apache/pinot/pull/4973", "timeline": [{"oid": "3f2de0707f1b6828f6c1f50496994b773c432be2", "url": "https://github.com/apache/pinot/commit/3f2de0707f1b6828f6c1f50496994b773c432be2", "message": "Add Avro Schema Registry Message Decoder", "committedDate": "2020-01-12T12:28:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NzYyOQ==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r365597629", "bodyText": "Please move this to kafka plugins, see KafkaAvroMessageDecoder", "author": "mcvsubbu", "createdAt": "2020-01-12T17:13:17Z", "path": "pinot-plugins/pinot-input-format/pinot-avro/src/main/java/org/apache/pinot/plugin/inputformat/avro/KafkaConfluentSchemaRegistryAvroMessageDecoder.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.avro;\n+\n+import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import org.apache.avro.generic.GenericData.Record;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.spi.stream.StreamMessageDecoder;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KafkaConfluentSchemaRegistryAvroMessageDecoder implements StreamMessageDecoder<byte[]> {", "originalCommit": "3f2de0707f1b6828f6c1f50496994b773c432be2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxNzIyNA==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r365617224", "bodyText": "This is in the same package as KafkaAvroMessageDecoder - do you mean have it in a separate module under pinot-input-format?", "author": "elonazoulay", "createdAt": "2020-01-12T22:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NzYyOQ=="}], "type": "inlineReview"}, {"oid": "8b9acd1ef4da3d4f532d3da002fa131a0786b65f", "url": "https://github.com/apache/pinot/commit/8b9acd1ef4da3d4f532d3da002fa131a0786b65f", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-01-13T01:31:28Z", "type": "forcePushed"}, {"oid": "f41c9f79f0f2625d3fc2fc778aad94aad0245d8e", "url": "https://github.com/apache/pinot/commit/f41c9f79f0f2625d3fc2fc778aad94aad0245d8e", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-01-13T04:30:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NzgxMg==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r367167812", "bodyText": "can you add some comments on how this is different from AvroDecoder we have in pinot-avro or point to some external link", "author": "kishoreg", "createdAt": "2020-01-15T23:53:12Z", "path": "pinot-plugins/pinot-input-format/pinot-confluent-avro/src/main/java/org/apache/pinot/plugin/inputformat/avro/confluent/KafkaConfluentSchemaRegistryAvroMessageDecoder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.avro.confluent;\n+\n+import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import org.apache.avro.generic.GenericData.Record;\n+import org.apache.pinot.plugin.inputformat.avro.AvroRecordExtractor;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.spi.stream.StreamMessageDecoder;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KafkaConfluentSchemaRegistryAvroMessageDecoder implements StreamMessageDecoder<byte[]> {", "originalCommit": "f41c9f79f0f2625d3fc2fc778aad94aad0245d8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNDgwMQ==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r374424801", "bodyText": "Added in pluggablestreams.rst", "author": "elonazoulay", "createdAt": "2020-02-04T00:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NzgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2ODI4NA==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r367168284", "bodyText": "Its probably ok to duplicate the AvroRecordExtractor. Plugin depending on another plugin will probably make things harder. For e.g. Avro versions might be different between pinot-avro and pinot-confluent-avro", "author": "kishoreg", "createdAt": "2020-01-15T23:55:05Z", "path": "pinot-plugins/pinot-input-format/pinot-confluent-avro/src/main/java/org/apache/pinot/plugin/inputformat/avro/confluent/KafkaConfluentSchemaRegistryAvroMessageDecoder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.avro.confluent;\n+\n+import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import org.apache.avro.generic.GenericData.Record;\n+import org.apache.pinot.plugin.inputformat.avro.AvroRecordExtractor;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.spi.stream.StreamMessageDecoder;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KafkaConfluentSchemaRegistryAvroMessageDecoder implements StreamMessageDecoder<byte[]> {\n+    private static final String SCHEMA_REGISTRY_REST_URL = \"schema.registry.rest.url\";\n+    private KafkaAvroDeserializer deserializer;\n+    private RecordExtractor<Record> avroRecordConvetrer;\n+    private String topicName;\n+    private Schema pinotSchema;\n+\n+    @Override\n+    public void init(Map<String, String> props, Schema indexingSchema, String topicName) throws Exception {\n+        checkState(props.containsKey(SCHEMA_REGISTRY_REST_URL), \"Missing required property '%s'\", SCHEMA_REGISTRY_REST_URL);\n+        String schemaRegistryUrl = props.get(SCHEMA_REGISTRY_REST_URL);\n+        pinotSchema = requireNonNull(indexingSchema, \"indexingSchema is null\");\n+        SchemaRegistryClient schemaRegistryClient = new CachedSchemaRegistryClient(schemaRegistryUrl, 1000);\n+        deserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n+        this.topicName = requireNonNull(topicName, \"topicName is null\");\n+        this.avroRecordConvetrer = PluginManager.get().createInstance(AvroRecordExtractor.class.getName());", "originalCommit": "f41c9f79f0f2625d3fc2fc778aad94aad0245d8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2ODc0MA==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r367168740", "bodyText": "Another option is to create a separate module(not a plugin) called pinot-avro-utils let both pinot-avro and pinot-confluent-avro share that.", "author": "kishoreg", "createdAt": "2020-01-15T23:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2ODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NjIxNA==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r369746214", "bodyText": "Created pinot-avro-base that both pinot-avro and pinot-confluent-avro plugins use.", "author": "elonazoulay", "createdAt": "2020-01-22T19:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2ODI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2ODM3Mg==", "url": "https://github.com/apache/pinot/pull/4973#discussion_r367168372", "bodyText": "typo avroRecordConvetrer", "author": "kishoreg", "createdAt": "2020-01-15T23:55:23Z", "path": "pinot-plugins/pinot-input-format/pinot-confluent-avro/src/main/java/org/apache/pinot/plugin/inputformat/avro/confluent/KafkaConfluentSchemaRegistryAvroMessageDecoder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.plugin.inputformat.avro.confluent;\n+\n+import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import org.apache.avro.generic.GenericData.Record;\n+import org.apache.pinot.plugin.inputformat.avro.AvroRecordExtractor;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.GenericRow;\n+import org.apache.pinot.spi.data.readers.RecordExtractor;\n+import org.apache.pinot.spi.plugin.PluginManager;\n+import org.apache.pinot.spi.stream.StreamMessageDecoder;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KafkaConfluentSchemaRegistryAvroMessageDecoder implements StreamMessageDecoder<byte[]> {\n+    private static final String SCHEMA_REGISTRY_REST_URL = \"schema.registry.rest.url\";\n+    private KafkaAvroDeserializer deserializer;\n+    private RecordExtractor<Record> avroRecordConvetrer;\n+    private String topicName;\n+    private Schema pinotSchema;\n+\n+    @Override\n+    public void init(Map<String, String> props, Schema indexingSchema, String topicName) throws Exception {\n+        checkState(props.containsKey(SCHEMA_REGISTRY_REST_URL), \"Missing required property '%s'\", SCHEMA_REGISTRY_REST_URL);\n+        String schemaRegistryUrl = props.get(SCHEMA_REGISTRY_REST_URL);\n+        pinotSchema = requireNonNull(indexingSchema, \"indexingSchema is null\");\n+        SchemaRegistryClient schemaRegistryClient = new CachedSchemaRegistryClient(schemaRegistryUrl, 1000);\n+        deserializer = new KafkaAvroDeserializer(schemaRegistryClient);\n+        this.topicName = requireNonNull(topicName, \"topicName is null\");\n+        this.avroRecordConvetrer = PluginManager.get().createInstance(AvroRecordExtractor.class.getName());\n+    }\n+\n+    @Override\n+    public GenericRow decode(byte[] payload, GenericRow destination) {\n+        Record avroRecord = (Record) deserializer.deserialize(topicName, payload);\n+        return avroRecordConvetrer.extract(pinotSchema, avroRecord, destination);", "originalCommit": "f41c9f79f0f2625d3fc2fc778aad94aad0245d8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d37346748586cb4cb6bbcc4c5cb608cfe8685224", "url": "https://github.com/apache/pinot/commit/d37346748586cb4cb6bbcc4c5cb608cfe8685224", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-01-22T11:23:46Z", "type": "forcePushed"}, {"oid": "38e3cde702e785ea2f40247664ac07123ac96c6a", "url": "https://github.com/apache/pinot/commit/38e3cde702e785ea2f40247664ac07123ac96c6a", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-02-04T00:27:01Z", "type": "forcePushed"}, {"oid": "801ddaf5ad5508194bbc695552cd7fd5e76b2d27", "url": "https://github.com/apache/pinot/commit/801ddaf5ad5508194bbc695552cd7fd5e76b2d27", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-02-04T13:27:28Z", "type": "forcePushed"}, {"oid": "5aa3026316642172d53585e41d4bef4f45fce10e", "url": "https://github.com/apache/pinot/commit/5aa3026316642172d53585e41d4bef4f45fce10e", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-02-24T08:53:06Z", "type": "forcePushed"}, {"oid": "8968e54bf9362559d6462ed4c61af1b85b266dfc", "url": "https://github.com/apache/pinot/commit/8968e54bf9362559d6462ed4c61af1b85b266dfc", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-02-24T09:15:36Z", "type": "forcePushed"}, {"oid": "543056e1a928d611c2ea65da4fa52545fc598b5d", "url": "https://github.com/apache/pinot/commit/543056e1a928d611c2ea65da4fa52545fc598b5d", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-02-24T22:00:54Z", "type": "commit"}, {"oid": "543056e1a928d611c2ea65da4fa52545fc598b5d", "url": "https://github.com/apache/pinot/commit/543056e1a928d611c2ea65da4fa52545fc598b5d", "message": "Add Confluent Schema Registry Avro Message Decoder", "committedDate": "2020-02-24T22:00:54Z", "type": "forcePushed"}]}