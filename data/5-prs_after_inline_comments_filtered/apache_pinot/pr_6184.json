{"pr_number": 6184, "pr_title": "Minion command line starter for issue #6111", "pr_createdAt": "2020-10-23T18:01:09Z", "pr_url": "https://github.com/apache/pinot/pull/6184", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1MjM5NA==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511052394", "bodyText": "Is this for testing? If so, can you remove this?", "author": "snleee", "createdAt": "2020-10-23T18:04:10Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/PinotMinion.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+/**\n+ * Simple shim so that jps -l shows PinotMinion instead of PinotAdministrator\n+ */\n+public class PinotMinion {", "originalCommit": "d47a2cb703c895812cd7a1ec9a3356df05c9ecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4NzEwMg==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511187102", "bodyText": "For other components e.g. server. We can starts with both bin/start-server.sh and bin/pinot-admin.sh. I create this so users can starts with bin/start-minion.sh also.", "author": "jtao15", "createdAt": "2020-10-23T22:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1MjM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxODIwMA==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511218200", "bodyText": "Ah i see, that makes sense.", "author": "snleee", "createdAt": "2020-10-24T00:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1MjM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxODU2NA==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511218564", "bodyText": "The constructor for MinionStarter looks like the following:\n  public MinionStarter(String zkAddress, String helixClusterName, PinotConfiguration config)\n\nAm I missing something?", "author": "snleee", "createdAt": "2020-10-24T00:54:08Z", "path": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java", "diffHunk": "@@ -184,7 +184,7 @@ protected void startMinion(@Nullable Map<String, PinotTaskExecutorFactory> taskE\n     FileUtils.deleteQuietly(new File(Minion.DEFAULT_INSTANCE_BASE_DIR));\n     try {\n       _minionStarter =\n-          new MinionStarter(ZkStarter.DEFAULT_ZK_STR, getHelixClusterName(), new PinotConfiguration());\n+          new MinionStarter(getHelixClusterName(), ZkStarter.DEFAULT_ZK_STR, new PinotConfiguration());", "originalCommit": "d47a2cb703c895812cd7a1ec9a3356df05c9ecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzNDYyMQ==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511234621", "bodyText": "I switched the order of the first 2 parameters for MinionStarter to be consistent with other starters constructors.", "author": "jtao15", "createdAt": "2020-10-24T01:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxODU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxOTA3MA==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511219070", "bodyText": "host name -> Host name", "author": "snleee", "createdAt": "2020-10-24T00:55:54Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartMinionCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.util.Map;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.minion.MinionStarter;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Class to implement StartMinion command.\n+ *\n+ */\n+public class StartMinionCommand extends AbstractBaseAdminCommand implements Command {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StartMinionCommand.class);\n+  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n+  private boolean _help = false;\n+  @Option(name = \"-minionHost\", required = false, metaVar = \"<String>\", usage = \"host name for minion.\")", "originalCommit": "d47a2cb703c895812cd7a1ec9a3356df05c9ecd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIyMDE5MQ==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511220191", "bodyText": "Why don't we pass minionHost and apply it on the minionConf? For instance, _minionHost is only used for logging once.", "author": "snleee", "createdAt": "2020-10-24T00:58:49Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartMinionCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools.admin.command;\n+\n+import java.io.File;\n+import java.util.Map;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.pinot.common.utils.CommonConstants;\n+import org.apache.pinot.minion.MinionStarter;\n+import org.apache.pinot.spi.services.ServiceRole;\n+import org.apache.pinot.tools.Command;\n+import org.apache.pinot.tools.utils.PinotConfigUtils;\n+import org.kohsuke.args4j.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * Class to implement StartMinion command.\n+ *\n+ */\n+public class StartMinionCommand extends AbstractBaseAdminCommand implements Command {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StartMinionCommand.class);\n+  @Option(name = \"-help\", required = false, help = true, aliases = {\"-h\", \"--h\", \"--help\"}, usage = \"Print this message.\")\n+  private boolean _help = false;\n+  @Option(name = \"-minionHost\", required = false, metaVar = \"<String>\", usage = \"host name for minion.\")\n+  private String _minionHost;\n+  @Option(name = \"-minionPort\", required = false, metaVar = \"<int>\", usage = \"Port number to start the minion at.\")\n+  private int _minionPort = CommonConstants.Minion.DEFAULT_HELIX_PORT;\n+  @Option(name = \"-zkAddress\", required = false, metaVar = \"<http>\", usage = \"HTTP address of Zookeeper.\")\n+  private String _zkAddress = DEFAULT_ZK_ADDRESS;\n+  @Option(name = \"-clusterName\", required = false, metaVar = \"<String>\", usage = \"Pinot cluster name.\")\n+  private String _clusterName = \"PinotCluster\";\n+  @Option(name = \"-configFileName\", required = false, metaVar = \"<Config File Name>\", usage = \"Minion Starter Config file.\", forbids = {\"-minionHost\", \"-minionPort\"})\n+  private String _configFileName;\n+  private MinionStarter _minionStarter;\n+\n+  public boolean getHelp() {\n+    return _help;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"StartMinion\";\n+  }\n+\n+  @Override\n+  public String toString() {\n+    if (_configFileName != null) {\n+      return (\"StartMinion -zkAddress \" + _zkAddress + \" -configFileName \" + _configFileName);\n+    } else {\n+      return (\"StartMinion -minionHost \" + _minionHost + \" -minionPort \" + _minionPort + \" -zkAddress \" + _zkAddress);\n+    }\n+  }\n+\n+  @Override\n+  public void cleanup() {\n+    if (_minionStarter != null) {\n+      _minionStarter.stop();\n+    }\n+  }\n+\n+  @Override\n+  public String description() {\n+    return \"Start the Pinot Minion process at the specified port\";\n+  }\n+\n+  @Override\n+  public boolean execute()\n+      throws Exception {\n+    try {\n+      LOGGER.info(\"Executing command: \" + toString());\n+      StartServiceManagerCommand startServiceManagerCommand =\n+          new StartServiceManagerCommand().setZkAddress(_zkAddress).setClusterName(_clusterName).setPort(-1)\n+              .setBootstrapServices(new String[0]).addBootstrapService(ServiceRole.MINION, getMinionConf());\n+      startServiceManagerCommand.execute();\n+      String pidFile = \".pinotAdminMinion-\" + System.currentTimeMillis() + \".pid\";\n+      savePID(System.getProperty(\"java.io.tmpdir\") + File.separator + pidFile);\n+      return true;\n+    } catch (Exception e) {\n+      LOGGER.error(\"Caught exception while starting minion, exiting\", e);\n+      System.exit(-1);\n+      return false;\n+    }\n+  }\n+\n+  private Map<String, Object> getMinionConf()\n+      throws ConfigurationException {\n+    if (_configFileName != null) {\n+      return PinotConfigUtils.readConfigFromFile(_configFileName);\n+    }\n+    return PinotConfigUtils.generateMinionConf(_minionPort);", "originalCommit": "d47a2cb703c895812cd7a1ec9a3356df05c9ecd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIzNTkzNA==", "url": "https://github.com/apache/pinot/pull/6184#discussion_r511235934", "bodyText": "Yes, I think we can do that.", "author": "jtao15", "createdAt": "2020-10-24T01:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIyMDE5MQ=="}], "type": "inlineReview"}, {"oid": "1ee4e162f161599fb769ce12cfa2ad55dd14eece", "url": "https://github.com/apache/pinot/commit/1ee4e162f161599fb769ce12cfa2ad55dd14eece", "message": "Minion command line starter for issue #6111", "committedDate": "2020-10-24T01:51:05Z", "type": "commit"}, {"oid": "1ee4e162f161599fb769ce12cfa2ad55dd14eece", "url": "https://github.com/apache/pinot/commit/1ee4e162f161599fb769ce12cfa2ad55dd14eece", "message": "Minion command line starter for issue #6111", "committedDate": "2020-10-24T01:51:05Z", "type": "forcePushed"}]}