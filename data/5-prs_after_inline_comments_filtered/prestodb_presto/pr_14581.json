{"pr_number": 14581, "pr_title": "Support all types for temporary hive table", "pr_createdAt": "2020-05-27T00:37:11Z", "pr_url": "https://github.com/prestodb/presto/pull/14581", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjQyNw==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r431206427", "bodyText": "I would simply change the signature of the first method to Optional<TypeInfo> tryTranslate(Type type)", "author": "arhimondr", "createdAt": "2020-05-27T14:59:07Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/TypeTranslator.java", "diffHunk": "@@ -16,7 +16,11 @@\n import com.facebook.presto.common.type.Type;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n+import java.util.Optional;\n+\n public interface TypeTranslator\n {\n     TypeInfo translate(Type type);\n+\n+    TypeInfo translate(Type type, Optional<HiveType> defaultHiveType);", "originalCommit": "6f9e0ddc0d0c868c60502509ef6a54f9075f3713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MTM4MQ==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r431341381", "bodyText": "I want to keep the old behavior to throw an error inside translate function, so that 1.  all call sites don't need to check returned TypeInfo. 2,  HiveType's constructor method and HiveType::toHiveType(TypeTranslator,  Type) are not affected.\nDefaultHiveType is optional, caller will make decision on throwing an error or convert to default.", "author": "viczhang861", "createdAt": "2020-05-27T18:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4MDc0Ng==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r431980746", "bodyText": "How about adding Optional<TypeInfo> tryTranslate(Type type)? This signature might be more flexible, as it allows the caller to figure out what to do if the type mapping hasn't been satisfied.", "author": "arhimondr", "createdAt": "2020-05-28T16:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDUyMw==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432010523", "bodyText": "translate function calls itself a couple of times, handling of failed translation inside function is unavoidable.", "author": "viczhang861", "createdAt": "2020-05-28T17:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjYzMA==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432632630", "bodyText": "I'm slow. You are right, the method is recursive.", "author": "arhimondr", "createdAt": "2020-05-29T17:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDIzOA==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432634238", "bodyText": "Maybe add some comment explaining what is going on. The defaultHiveType might be really confusing.", "author": "arhimondr", "createdAt": "2020-05-29T17:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjk2Mw==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r431206963", "bodyText": "Let's do this only for temporary table", "author": "arhimondr", "createdAt": "2020-05-27T14:59:36Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveType.java", "diffHunk": "@@ -199,11 +200,27 @@ private static HiveType toHiveType(TypeInfo typeInfo)\n         return new HiveType(typeInfo);\n     }\n \n-    public static HiveType toHiveType(TypeTranslator typeTranslator, Type type)\n+    public static HiveType toHiveType(\n+            TypeTranslator typeTranslator,\n+            Type type)\n+    {\n+        return toHiveType(typeTranslator, type, Optional.empty());\n+    }\n+\n+    public static HiveType toHiveType(\n+            TypeTranslator typeTranslator,\n+            Type type,\n+            Optional<HiveType> defaultHiveType)\n     {\n         requireNonNull(typeTranslator, \"typeTranslator is null\");\n         requireNonNull(type, \"type is null\");\n-        return new HiveType(typeTranslator.translate(type));\n+        requireNonNull(defaultHiveType, \"defaultHiveType is null\");\n+        return new HiveType(typeTranslator.translate(type, defaultHiveType));\n+    }\n+\n+    public static Optional<HiveType> getDefaultHiveType(HiveStorageFormat storageFormat)\n+    {\n+        return storageFormat == PAGEFILE ? Optional.of(HIVE_BINARY) : Optional.empty();", "originalCommit": "6f9e0ddc0d0c868c60502509ef6a54f9075f3713", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzODUzMg==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r431338532", "bodyText": "It is only used for temporary table, I renamed this function to make it clear.", "author": "viczhang861", "createdAt": "2020-05-27T17:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwNjk2Mw=="}], "type": "inlineReview"}, {"oid": "d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "url": "https://github.com/prestodb/presto/commit/d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "message": "Support all types for temporary hive table\n\nConvert unsupported hive type to binary in PageFile format.", "committedDate": "2020-05-27T17:49:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjE4OQ==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432632189", "bodyText": "Let this thing fail for now. Ideally the HivePartitioningHandle  shouldn't contain the hive types if the partition handle is for materialized exchange.", "author": "arhimondr", "createdAt": "2020-05-29T17:27:01Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2213,7 +2215,10 @@ public ConnectorPartitioningHandle getPartitioningHandleForExchange(ConnectorSes\n         return new HivePartitioningHandle(\n                 partitionCount,\n                 partitionTypes.stream()\n-                        .map(type -> toHiveType(typeTranslator, translateHiveUnsupportedTypeForTemporaryTable(type, typeManager)))\n+                        .map(type -> toHiveType(", "originalCommit": "d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjMxNA==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432632314", "bodyText": "Let's inline the getDefaultHiveTypeForTemporaryTable", "author": "arhimondr", "createdAt": "2020-05-29T17:27:13Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -867,7 +868,8 @@ public ConnectorTableHandle createTemporaryTable(ConnectorSession session, List<\n                 // type to the boolean type that is binary compatible\n                 translateHiveUnsupportedTypesForTemporaryTable(columns, typeManager),\n                 ImmutableSet.of(),\n-                typeTranslator);\n+                typeTranslator,\n+                getDefaultHiveTypeForTemporaryTable(storageFormat));", "originalCommit": "d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMjg4OQ==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432632889", "bodyText": "Let's set a default implementation here that calls  translate(type, Optional.empty())", "author": "arhimondr", "createdAt": "2020-05-29T17:28:09Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/TypeTranslator.java", "diffHunk": "@@ -16,7 +16,11 @@\n import com.facebook.presto.common.type.Type;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n \n+import java.util.Optional;\n+\n public interface TypeTranslator\n {\n     TypeInfo translate(Type type);", "originalCommit": "d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMzEwNw==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432633107", "bodyText": "Let's move this implementation as a default implementation in the interface", "author": "arhimondr", "createdAt": "2020-05-29T17:28:33Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveTypeTranslator.java", "diffHunk": "@@ -64,6 +66,12 @@\n {\n     @Override\n     public TypeInfo translate(Type type)\n+    {\n+        return translate(type, Optional.empty());", "originalCommit": "d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMzUyMg==", "url": "https://github.com/prestodb/presto/pull/14581#discussion_r432633522", "bodyText": "nit: let's wrap it\nreturn defaultHiveType\n  .orElseThrow(() -> new PrestoException(NOT_SUPPORTED, format(\"Unsupported Hive type: %s\", type)))\n  .getTypeInfo();", "author": "arhimondr", "createdAt": "2020-05-29T17:29:20Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveTypeTranslator.java", "diffHunk": "@@ -146,9 +154,9 @@ else if (varcharLength == VarcharType.UNBOUNDED_LENGTH) {\n             return getStructTypeInfo(\n                     fieldNames.build(),\n                     type.getTypeParameters().stream()\n-                            .map(this::translate)\n+                            .map(t -> translate(t, defaultHiveType))\n                             .collect(toList()));\n         }\n-        throw new PrestoException(NOT_SUPPORTED, format(\"Unsupported Hive type: %s\", type));\n+        return defaultHiveType.orElseThrow(() -> new PrestoException(NOT_SUPPORTED, format(\"Unsupported Hive type: %s\", type))).getTypeInfo();", "originalCommit": "d18ea7528b6b27521f5f055dbe1286ed5bc9d929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abcd63a02630e18221b8d2bd2019bf724a97c3f4", "url": "https://github.com/prestodb/presto/commit/abcd63a02630e18221b8d2bd2019bf724a97c3f4", "message": "Support all types for temporary hive table\n\nContext\n - Hive connector translates PrestoType to corresponding HiveType in\n   Hive type system, for example, HiveType for VARCHAR in Presto\n   is STRING in Hive.\n - Temporary hive table is used to store intermediate data for\n   materialized exchanges. It reuses data structure in Hive connector\n   such as ColumnHandle, TableHandle. Therefore, type translation\n   is required for temporary table to initialize conventional\n   Hive file format readers/writers, etc.\n\nProblem\n - PrestoType that fails to be translated to HiveType cannot be stored\n   in temporary table.\n - With PageFile format, all column types can be supported since the\n   column type metadata is not needed for encoding/decoding. As a\n   result, type translation is not needed for PageFile format.\n\nSolution\n Translate unsupported hive type to HIVE_BINARY.\n - Pros\n   - Reuse existing code and easy to implement.\n - Cons\n   - Complete translation by translating to a never used HiveType is\n     unintuitive.\n\nOther Solutions\n Extract temporary table related code into a separate connector\n - Pros\n   - Support all column types in temporary table by definition without\n     dependency on existing requirements.\n - Cons\n   - Only PageFile format benefits from this change.\n   - For non PageFile format, type translation is still required in\n     readers/writer.\n   - Create a lot duplicated code.\n\n Factor out HiveType from Hive connector, do the translation later when\n actual encoding/decoding or communication with the Metastore happens\n - Pros\n  - Make Hive connector flexible for both temporary and permanent table.\n - Cons\n  - Only PageFile format benefits from this change.\n  - Implementation is complicated as too many components are affected.\n  - Type translation could be delayed but type check is still useful\n    for the purpose of fail early.", "committedDate": "2020-06-01T21:57:04Z", "type": "commit"}, {"oid": "abcd63a02630e18221b8d2bd2019bf724a97c3f4", "url": "https://github.com/prestodb/presto/commit/abcd63a02630e18221b8d2bd2019bf724a97c3f4", "message": "Support all types for temporary hive table\n\nContext\n - Hive connector translates PrestoType to corresponding HiveType in\n   Hive type system, for example, HiveType for VARCHAR in Presto\n   is STRING in Hive.\n - Temporary hive table is used to store intermediate data for\n   materialized exchanges. It reuses data structure in Hive connector\n   such as ColumnHandle, TableHandle. Therefore, type translation\n   is required for temporary table to initialize conventional\n   Hive file format readers/writers, etc.\n\nProblem\n - PrestoType that fails to be translated to HiveType cannot be stored\n   in temporary table.\n - With PageFile format, all column types can be supported since the\n   column type metadata is not needed for encoding/decoding. As a\n   result, type translation is not needed for PageFile format.\n\nSolution\n Translate unsupported hive type to HIVE_BINARY.\n - Pros\n   - Reuse existing code and easy to implement.\n - Cons\n   - Complete translation by translating to a never used HiveType is\n     unintuitive.\n\nOther Solutions\n Extract temporary table related code into a separate connector\n - Pros\n   - Support all column types in temporary table by definition without\n     dependency on existing requirements.\n - Cons\n   - Only PageFile format benefits from this change.\n   - For non PageFile format, type translation is still required in\n     readers/writer.\n   - Create a lot duplicated code.\n\n Factor out HiveType from Hive connector, do the translation later when\n actual encoding/decoding or communication with the Metastore happens\n - Pros\n  - Make Hive connector flexible for both temporary and permanent table.\n - Cons\n  - Only PageFile format benefits from this change.\n  - Implementation is complicated as too many components are affected.\n  - Type translation could be delayed but type check is still useful\n    for the purpose of fail early.", "committedDate": "2020-06-01T21:57:04Z", "type": "forcePushed"}]}