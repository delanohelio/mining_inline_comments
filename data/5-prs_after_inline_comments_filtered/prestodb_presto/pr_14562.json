{"pr_number": 14562, "pr_title": "Streamlined implementation of core control flow and logical operators", "pr_createdAt": "2020-05-20T16:33:41Z", "pr_url": "https://github.com/prestodb/presto/pull/14562", "timeline": [{"oid": "7f87c7927ffb093f0a12cb13ac745b7d4faac343", "url": "https://github.com/prestodb/presto/commit/7f87c7927ffb093f0a12cb13ac745b7d4faac343", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-20T16:36:21Z", "type": "forcePushed"}, {"oid": "ed008a179e20381abad73be1957108ec5b18301c", "url": "https://github.com/prestodb/presto/commit/ed008a179e20381abad73be1957108ec5b18301c", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-20T16:38:13Z", "type": "forcePushed"}, {"oid": "42f6c6d7835efeaa14e2878c7090333b83b3edc0", "url": "https://github.com/prestodb/presto/commit/42f6c6d7835efeaa14e2878c7090333b83b3edc0", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-20T16:39:04Z", "type": "forcePushed"}, {"oid": "05c93893fb6d75dcc6e020d3c3666863280c6070", "url": "https://github.com/prestodb/presto/commit/05c93893fb6d75dcc6e020d3c3666863280c6070", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-20T16:40:03Z", "type": "forcePushed"}, {"oid": "f738add47f311365f553f888eb24912848a6105c", "url": "https://github.com/prestodb/presto/commit/f738add47f311365f553f888eb24912848a6105c", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-20T16:41:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r430626982", "bodyText": "Maybe put this in .comment so people can see this in bytecode dump.", "author": "rongrong", "createdAt": "2020-05-26T18:39:43Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -36,68 +38,74 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();\n+        do {\n+            RowExpression operand = stack.pop();\n+            if (operand instanceof SpecialFormExpression &&\n+                    ((SpecialFormExpression) operand).getForm() == SpecialFormExpression.Form.AND) {\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(1));\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(0));\n+            }\n+            else {\n+                flattenedArgs.add(operand);\n+            }\n+        } while (!stack.empty());\n+\n         BytecodeBlock block = new BytecodeBlock()\n                 .comment(\"AND\")\n                 .setDescription(\"AND\");\n \n-        BytecodeNode left = generator.generate(arguments.get(0), Optional.empty());\n-        BytecodeNode right = generator.generate(arguments.get(1), Optional.empty());\n-\n-        block.append(left);\n-\n-        IfStatement ifLeftIsNull = new IfStatement(\"if left wasNull...\")\n-                .condition(wasNull);\n-\n-        LabelNode end = new LabelNode(\"end\");\n-        ifLeftIsNull.ifTrue()\n-                .comment(\"clear the null flag, pop left value off stack, and push left null flag on the stack (true)\")\n-                .append(wasNull.set(constantFalse()))\n-                .pop(arguments.get(0).getType().getJavaType()) // discard left value\n-                .push(true);\n+        LabelNode falseLabel = new LabelNode(\"false\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+        Variable wasNull = generator.wasNull();\n \n-        LabelNode leftIsTrue = new LabelNode(\"leftIsTrue\");\n-        ifLeftIsNull.ifFalse()\n-                .comment(\"if left is false, push false, and goto end\")\n-                .ifTrueGoto(leftIsTrue)\n-                .push(false)\n-                .gotoLabel(end)\n-                .comment(\"left was true; push left null flag on the stack (false)\")\n-                .visitLabel(leftIsTrue)\n+        // boolean hasNulls = false; do { eval arg; if (false) goto ret_false; if (wasNull) hasNulls = true; }", "originalCommit": "f738add47f311365f553f888eb24912848a6105c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NDczMQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r431174731", "bodyText": "It's too long. And also who can see the bytecode anyway. Also I gave comments on all important bytecodes.", "author": "kaikalur", "createdAt": "2020-05-27T14:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDkwMA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r431514900", "bodyText": "I don't understand the bytecode here. It seems to be different from what's described here? My read of the bytecode is\ndo {\n  eval arg;\n  if (wasNull) {\n    hasNull = true;\n    wasNull = false;\n    pop eval result;\n  }\n  else {\n    goto ret_false;\n  }\n}\n\nwhich doesn't make sense to me...", "author": "rongrong", "createdAt": "2020-05-28T00:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNTQ2OA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r431515468", "bodyText": "Also, can you end this loop early if hasNull is true already? Result will be null at that point right?", "author": "rongrong", "createdAt": "2020-05-28T00:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxODA4OQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r431518089", "bodyText": "No. That's the really bad part of SQL - for AND if any of them is false, you need to return false irrespective of other parts. But if none of them is false but some are null, you need to return go all the way and return null - similarly true for OR", "author": "kaikalur", "createdAt": "2020-05-28T00:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxODUwMw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r431518503", "bodyText": "I don't understand the bytecode here. It seems to be different from what's described here? My read of the bytecode is\ndo {\n  eval arg;\n  if (wasNull) {\n    hasNull = true;\n    wasNull = false;\n    pop eval result;\n  }\n  else {\n    goto ret_false;\n\n\nHere else if (value_on_stack is false) { goto ret_false; }\notherwise, continue\n\n}\n}\n\nwhich doesn't make sense to me...", "author": "kaikalur", "createdAt": "2020-05-28T00:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxOTI0MQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r431519241", "bodyText": "No. That's the really bad part of SQL - for AND if any of them is false, you need to return false irrespective of other parts. But if none of them is false but some are null, you need to return go all the way and return null - similarly true for OR\n\n\ud83d\ude2f", "author": "rongrong", "createdAt": "2020-05-28T00:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNDgxNg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432104816", "bodyText": "It might worth putting the SQL AND eval logic in comment since it's not intuitive. Also please change the comment to be consistent with code do { eval arg; if (wasNull) hasNull = true; else if (false) goto ret_false; } (or change the code to be the same order with comment.", "author": "rongrong", "createdAt": "2020-05-28T20:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4OTYyMg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432689622", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-29T19:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjk4Mg=="}], "type": "inlineReview"}, {"oid": "bb3d4d6664b4272a7aeab98a6f2c302cc1f2d653", "url": "https://github.com/prestodb/presto/commit/bb3d4d6664b4272a7aeab98a6f2c302cc1f2d653", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-26T20:56:26Z", "type": "forcePushed"}, {"oid": "ab69cf3ec00cb85daea2915cb009c5efa6635327", "url": "https://github.com/prestodb/presto/commit/ab69cf3ec00cb85daea2915cb009c5efa6635327", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-27T00:37:40Z", "type": "forcePushed"}, {"oid": "e35877c3a1de89f812e3a71343dc6b3ececf08c9", "url": "https://github.com/prestodb/presto/commit/e35877c3a1de89f812e3a71343dc6b3ececf08c9", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-27T03:57:06Z", "type": "forcePushed"}, {"oid": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "url": "https://github.com/prestodb/presto/commit/813213baa1925479a9b0cd8daf2e1ccfb918816c", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-27T14:27:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwOTk3OA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432109978", "bodyText": "I found it more fluent to read when written in the format of\nblock.append(ifHasNulls)\n    .gotoLabel(endLabel)\n    .visitLabel(falseLabel)\n    .comment(...)\n    ...\n    .visitLabel(endLabel);\n\nIt's more obvious that this is the same code block.", "author": "rongrong", "createdAt": "2020-05-28T20:39:19Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -36,68 +38,74 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();\n+        do {\n+            RowExpression operand = stack.pop();\n+            if (operand instanceof SpecialFormExpression &&\n+                    ((SpecialFormExpression) operand).getForm() == SpecialFormExpression.Form.AND) {\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(1));\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(0));\n+            }\n+            else {\n+                flattenedArgs.add(operand);\n+            }\n+        } while (!stack.empty());\n+\n         BytecodeBlock block = new BytecodeBlock()\n                 .comment(\"AND\")\n                 .setDescription(\"AND\");\n \n-        BytecodeNode left = generator.generate(arguments.get(0), Optional.empty());\n-        BytecodeNode right = generator.generate(arguments.get(1), Optional.empty());\n-\n-        block.append(left);\n-\n-        IfStatement ifLeftIsNull = new IfStatement(\"if left wasNull...\")\n-                .condition(wasNull);\n-\n-        LabelNode end = new LabelNode(\"end\");\n-        ifLeftIsNull.ifTrue()\n-                .comment(\"clear the null flag, pop left value off stack, and push left null flag on the stack (true)\")\n-                .append(wasNull.set(constantFalse()))\n-                .pop(arguments.get(0).getType().getJavaType()) // discard left value\n-                .push(true);\n+        LabelNode falseLabel = new LabelNode(\"false\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+        Variable wasNull = generator.wasNull();\n \n-        LabelNode leftIsTrue = new LabelNode(\"leftIsTrue\");\n-        ifLeftIsNull.ifFalse()\n-                .comment(\"if left is false, push false, and goto end\")\n-                .ifTrueGoto(leftIsTrue)\n-                .push(false)\n-                .gotoLabel(end)\n-                .comment(\"left was true; push left null flag on the stack (false)\")\n-                .visitLabel(leftIsTrue)\n+        // boolean hasNulls = false; do { eval arg; if (false) goto ret_false; if (wasNull) hasNulls = true; }\n+        // if (hasNulls) return null\n+        // push true;\n+        // ret_false: push false;\n+        // end: store in output if needed\n+        Variable hasNulls = generator.getScope().createTempVariable(boolean.class);\n+        block.initializeVariable(hasNulls);\n+        for (int i = 0; i < flattenedArgs.size(); i++) {\n+            block.append(generator.generate(flattenedArgs.get(i), Optional.empty()));\n+            IfStatement ifOperandIsNull = new IfStatement(\"if left wasNulll...\")\n+                    .condition(wasNull);\n+            ifOperandIsNull.ifTrue()\n+                    .comment(\"clear the null flag and remember there was a null\")\n+                    .putVariable(hasNulls, true)\n+                    .putVariable(wasNull, false)\n+                    .pop(boolean.class);\n+\n+            ifOperandIsNull\n+                    .ifFalse()\n+                    .ifFalseGoto(falseLabel);\n+\n+            block.append(ifOperandIsNull);\n+        }\n+\n+        // We evaluated all operands. So check if any of them was null\n+        IfStatement ifHasNulls = new IfStatement(\"hasNulls is true\");\n+        ifHasNulls.condition().append(hasNulls);\n+        ifHasNulls.ifTrue()\n+                .comment(\"at least one of the arguments is null and none of them is false. So set wasNull to true\")\n+                .putVariable(wasNull, true)\n                 .push(false);\n+        ifHasNulls.ifFalse().push(true);\n \n-        block.append(ifLeftIsNull);\n-\n-        // At this point we know the left expression was either NULL or TRUE.  The stack contains a single boolean\n-        // value for this expression which indicates if the left value was NULL.\n-\n-        // eval right!\n-        block.append(right);\n+        block.append(ifHasNulls);", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MTEyMA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432691120", "bodyText": "Yes for the first part. For the second, I was kind of structuring to reflect the generated code so one sequence for one \"block\" in the generated code. So false_label starts a new control flow point so I split into different sequence. Similarly for the endLabel.", "author": "kaikalur", "createdAt": "2020-05-29T19:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwOTk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMDk5Mg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432110992", "bodyText": "I'd just merge the following into a single statement\nblock.append(ifStatement)\n    .visitLabel(...)\n    .append(...)\n    .visitLabel(...);", "author": "rongrong", "createdAt": "2020-05-28T20:41:31Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/IfCodeGenerator.java", "diffHunk": "@@ -35,19 +35,29 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext context, Type re\n         Preconditions.checkArgument(arguments.size() == 3);\n \n         Variable wasNull = context.wasNull();\n-        BytecodeBlock condition = new BytecodeBlock()\n-                .append(context.generate(arguments.get(0), Optional.empty()))\n-                .comment(\"... and condition value was not null\")\n-                .append(wasNull)\n-                .invokeStatic(CompilerOperations.class, \"not\", boolean.class, boolean.class)\n-                .invokeStatic(CompilerOperations.class, \"and\", boolean.class, boolean.class, boolean.class)\n-                .append(wasNull.set(constantFalse()));\n-\n+        LabelNode falseLabel = new LabelNode(\"false\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n         BytecodeBlock block = new BytecodeBlock()\n-                .append(new IfStatement()\n-                        .condition(condition)\n-                        .ifTrue(context.generate(arguments.get(1), Optional.empty()))\n-                        .ifFalse(context.generate(arguments.get(2), Optional.empty())));\n+                .append(context.generate(arguments.get(0), Optional.empty()));\n+\n+        IfStatement ifStatement = new IfStatement(\"... and condition value was not null\")\n+                .condition(wasNull);\n+\n+        ifStatement.ifTrue()\n+                .putVariable(wasNull, false)\n+                .pop(boolean.class)\n+                .gotoLabel(falseLabel);\n+\n+        ifStatement.ifFalse()\n+                .ifFalseGoto(falseLabel)\n+                .append(context.generate(arguments.get(1), Optional.empty()))\n+                .gotoLabel(endLabel);\n+\n+        block.append(ifStatement);", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwMDEzOQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432700139", "bodyText": "Same logic as I said for the previous comment.", "author": "kaikalur", "createdAt": "2020-05-29T19:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMDk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMTYyMA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432111620", "bodyText": "Same as the AndCodeGenerator, maybe explain how OR works and update the comment to be consistent with code order.", "author": "rongrong", "createdAt": "2020-05-28T20:42:50Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/OrCodeGenerator.java", "diffHunk": "@@ -36,67 +38,74 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();\n+        do {\n+            RowExpression operand = stack.pop();\n+            if (operand instanceof SpecialFormExpression &&\n+                    ((SpecialFormExpression) operand).getForm() == SpecialFormExpression.Form.OR) {\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(1));\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(0));\n+            }\n+            else {\n+                flattenedArgs.add(operand);\n+            }\n+        } while (!stack.empty());\n+\n         BytecodeBlock block = new BytecodeBlock()\n                 .comment(\"OR\")\n                 .setDescription(\"OR\");\n \n-        BytecodeNode left = generator.generate(arguments.get(0), Optional.empty());\n-        BytecodeNode right = generator.generate(arguments.get(1), Optional.empty());\n-\n-        block.append(left);\n-\n-        IfStatement ifLeftIsNull = new IfStatement(\"if left wasNull...\")\n-                .condition(wasNull);\n-\n-        LabelNode end = new LabelNode(\"end\");\n-        ifLeftIsNull.ifTrue(new BytecodeBlock()\n-                .comment(\"clear the null flag, pop left value off stack, and push left null flag on the stack (true)\")\n-                .append(wasNull.set(constantFalse()))\n-                .pop(arguments.get(0).getType().getJavaType()) // discard left value\n-                .push(true));\n-\n-        LabelNode leftIsFalse = new LabelNode(\"leftIsFalse\");\n-        ifLeftIsNull.ifFalse(new BytecodeBlock()\n-                .comment(\"if left is true, push true, and goto end\")\n-                .ifFalseGoto(leftIsFalse)\n-                .push(true)\n-                .gotoLabel(end)\n-                .comment(\"left was false; push left null flag on the stack (false)\")\n-                .visitLabel(leftIsFalse)\n-                .push(false));\n-\n-        block.append(ifLeftIsNull);\n-\n-        // At this point we know the left expression was either NULL or FALSE.  The stack contains a single boolean\n-        // value for this expression which indicates if the left value was NULL.\n-\n-        // eval right!\n-        block.append(right);\n+        LabelNode trueLabel = new LabelNode(\"true\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+        Variable wasNull = generator.wasNull();\n \n-        IfStatement ifRightIsNull = new IfStatement(\"if right wasNull...\")\n-                .condition(wasNull);\n+        // boolean hasNulls = false; do { eval arg; if (false) goto ret_false; if (wasNull) hasNulls = true; }", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MTgzNA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432691834", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-29T19:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMjQ4MQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432112481", "bodyText": "Is this used?", "author": "rongrong", "createdAt": "2020-05-28T20:44:35Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -41,47 +45,27 @@\n public class SwitchCodeGenerator\n         implements SpecialFormBytecodeGenerator\n {\n+    private static final String CASE_LABEL_PREFIX = \"_case_\";\n+    private static final String RESULT_LABEL_PREFIX = \"_result_\";\n+\n+    // TODO - move this to a RowExpressionUtil class\n+    private static boolean isEqualsExpression(RowExpression expression)\n+    {\n+        return expression instanceof CallExpression\n+                && ((CallExpression) expression).getDisplayName().equals(EQUAL.getFunctionName().getFunctionName())\n+                && ((CallExpression) expression).getArguments().size() == 2;\n+    }\n+\n     @Override\n     public BytecodeNode generateExpression(BytecodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments, Optional<Variable> outputBlockVariable)\n     {\n-        // TODO: compile as\n-        /*\n-            hashCode = hashCode(<value>)\n-\n-            // all constant expressions before a non-constant\n-            switch (hashCode) {\n-                case ...:\n-                    if (<value> == <constant1>) {\n-                       ...\n-                    }\n-                    else if (<value> == <constant2>) {\n-                       ...\n-                    }\n-                    else if (...) {\n-                    }\n-                case ...:\n-                    ...\n-            }\n-\n-            if (<value> == <non-constant1>) {\n-                ...\n-            }\n-            else if (<value> == <non-constant2>) {\n-                ...\n-            }\n-            ...\n-\n-            // repeat with next sequence of constant expressions\n-         */\n-\n-        Scope scope = generatorContext.getScope();\n-\n         // process value, else, and all when clauses\n         RowExpression value = arguments.get(0);\n-        BytecodeNode valueBytecode = generatorContext.generate(value, Optional.empty());\n+        Scope scope = generatorContext.getScope();\n         BytecodeNode elseValue;\n-\n         List<RowExpression> whenClauses;\n+        RowExpressionDeterminismEvaluator rowExpressionDeterminismEvaluator = new RowExpressionDeterminismEvaluator(generatorContext.getFunctionManager());", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTU5Mg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885592", "bodyText": "Removed cruft", "author": "kaikalur", "createdAt": "2020-05-30T20:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMjQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MDIzNg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432680236", "bodyText": "Can we move the declaration of value here or move this up? It took me a while to find where value is defined \ud83d\ude02", "author": "rongrong", "createdAt": "2020-05-29T19:04:23Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -97,49 +81,84 @@ else if (<value> == <non-constant2>) {\n         // determine the type of the value and result\n         Class<?> valueType = value.getType().getJavaType();\n \n+        // We generate SearchedCase as CASE TRUE WHEN p1 THEN v1 WHEN p2 THEN p2...\n+        boolean searchedCase = (value instanceof ConstantExpression && ((ConstantExpression) value).getType() == BOOLEAN &&", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTcyMg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885722", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MDIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MTkxMw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432681913", "bodyText": "We normally would use a Optional<BytecodeNode> in this situation rather than using null.", "author": "rongrong", "createdAt": "2020-05-29T19:08:11Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -97,49 +81,84 @@ else if (<value> == <non-constant2>) {\n         // determine the type of the value and result\n         Class<?> valueType = value.getType().getJavaType();\n \n+        // We generate SearchedCase as CASE TRUE WHEN p1 THEN v1 WHEN p2 THEN p2...\n+        boolean searchedCase = (value instanceof ConstantExpression && ((ConstantExpression) value).getType() == BOOLEAN &&\n+                ((ConstantExpression) value).getValue() == Boolean.TRUE);\n+\n         // evaluate the value and store it in a variable\n-        LabelNode nullValue = new LabelNode(\"nullCondition\");\n-        Variable tempVariable = scope.createTempVariable(valueType);\n-        BytecodeBlock block = new BytecodeBlock()\n-                .append(valueBytecode)\n-                .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, nullValue, void.class, valueType))\n-                .putVariable(tempVariable);\n-\n-        BytecodeNode getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n-\n-        // build the statements\n-        elseValue = new BytecodeBlock().visitLabel(nullValue).append(elseValue);\n-        // reverse list because current if statement builder doesn't support if/else so we need to build the if statements bottom up\n-        for (RowExpression clause : Lists.reverse(whenClauses)) {\n+        LabelNode elseLabel = new LabelNode(\"else\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+\n+        BytecodeBlock block = new BytecodeBlock();\n+        BytecodeNode getTempVariableNode = null;", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTg0MQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885841", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MTkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MjU4NA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432682584", "bodyText": "You can just do\n= new IfStatement()\n    .condition(...)\n....", "author": "rongrong", "createdAt": "2020-05-29T19:09:48Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -97,49 +81,84 @@ else if (<value> == <non-constant2>) {\n         // determine the type of the value and result\n         Class<?> valueType = value.getType().getJavaType();\n \n+        // We generate SearchedCase as CASE TRUE WHEN p1 THEN v1 WHEN p2 THEN p2...\n+        boolean searchedCase = (value instanceof ConstantExpression && ((ConstantExpression) value).getType() == BOOLEAN &&\n+                ((ConstantExpression) value).getValue() == Boolean.TRUE);\n+\n         // evaluate the value and store it in a variable\n-        LabelNode nullValue = new LabelNode(\"nullCondition\");\n-        Variable tempVariable = scope.createTempVariable(valueType);\n-        BytecodeBlock block = new BytecodeBlock()\n-                .append(valueBytecode)\n-                .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, nullValue, void.class, valueType))\n-                .putVariable(tempVariable);\n-\n-        BytecodeNode getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n-\n-        // build the statements\n-        elseValue = new BytecodeBlock().visitLabel(nullValue).append(elseValue);\n-        // reverse list because current if statement builder doesn't support if/else so we need to build the if statements bottom up\n-        for (RowExpression clause : Lists.reverse(whenClauses)) {\n+        LabelNode elseLabel = new LabelNode(\"else\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+\n+        BytecodeBlock block = new BytecodeBlock();\n+        BytecodeNode getTempVariableNode = null;\n+        if (!searchedCase) {\n+            BytecodeNode valueBytecode = generatorContext.generate(value, Optional.empty());\n+            Variable tempVariable = scope.createTempVariable(valueType);\n+            block.append(valueBytecode)\n+                    .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, elseLabel, void.class, valueType))\n+                    .putVariable(tempVariable);\n+            getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n+        }\n+\n+        Variable wasNull = generatorContext.wasNull();\n+        block.putVariable(wasNull, false);\n+\n+        Map<RowExpression, LabelNode> resultLabels = new HashMap<RowExpression, LabelNode>();\n+        // We already know the P1 .. Pn are all boolean just call them and search for true (false/null don't matter).\n+        for (RowExpression clause : whenClauses) {\n             checkArgument(clause instanceof SpecialFormExpression && ((SpecialFormExpression) clause).getForm().equals(WHEN));\n \n             RowExpression operand = ((SpecialFormExpression) clause).getArguments().get(0);\n+            BytecodeNode operandBytecode;\n+\n+            if (searchedCase) {\n+                operandBytecode = generatorContext.generate(operand, Optional.empty());\n+            }\n+            else {\n+                // call equals(value, operandBytecode)\n+                FunctionHandle equalsFunction = generatorContext.getFunctionManager().resolveOperator(EQUAL, fromTypes(value.getType(), operand.getType()));\n+                operandBytecode = generatorContext.generateCall(\n+                        EQUAL.name(),\n+                        generatorContext.getFunctionManager().getBuiltInScalarFunctionImplementation(equalsFunction),\n+                        ImmutableList.of(\n+                                generatorContext.generate(operand,\n+                                Optional.empty()),\n+                                getTempVariableNode));\n+            }\n+\n+            block.append(operandBytecode);\n+\n+            IfStatement ifWasNull = new IfStatement();", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwMDA4NA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432700084", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-29T19:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MjU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzA4MQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432683081", "bodyText": "resultLabels.putIfAbsent(...)?", "author": "rongrong", "createdAt": "2020-05-29T19:10:59Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -97,49 +81,84 @@ else if (<value> == <non-constant2>) {\n         // determine the type of the value and result\n         Class<?> valueType = value.getType().getJavaType();\n \n+        // We generate SearchedCase as CASE TRUE WHEN p1 THEN v1 WHEN p2 THEN p2...\n+        boolean searchedCase = (value instanceof ConstantExpression && ((ConstantExpression) value).getType() == BOOLEAN &&\n+                ((ConstantExpression) value).getValue() == Boolean.TRUE);\n+\n         // evaluate the value and store it in a variable\n-        LabelNode nullValue = new LabelNode(\"nullCondition\");\n-        Variable tempVariable = scope.createTempVariable(valueType);\n-        BytecodeBlock block = new BytecodeBlock()\n-                .append(valueBytecode)\n-                .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, nullValue, void.class, valueType))\n-                .putVariable(tempVariable);\n-\n-        BytecodeNode getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n-\n-        // build the statements\n-        elseValue = new BytecodeBlock().visitLabel(nullValue).append(elseValue);\n-        // reverse list because current if statement builder doesn't support if/else so we need to build the if statements bottom up\n-        for (RowExpression clause : Lists.reverse(whenClauses)) {\n+        LabelNode elseLabel = new LabelNode(\"else\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+\n+        BytecodeBlock block = new BytecodeBlock();\n+        BytecodeNode getTempVariableNode = null;\n+        if (!searchedCase) {\n+            BytecodeNode valueBytecode = generatorContext.generate(value, Optional.empty());\n+            Variable tempVariable = scope.createTempVariable(valueType);\n+            block.append(valueBytecode)\n+                    .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, elseLabel, void.class, valueType))\n+                    .putVariable(tempVariable);\n+            getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n+        }\n+\n+        Variable wasNull = generatorContext.wasNull();\n+        block.putVariable(wasNull, false);\n+\n+        Map<RowExpression, LabelNode> resultLabels = new HashMap<RowExpression, LabelNode>();\n+        // We already know the P1 .. Pn are all boolean just call them and search for true (false/null don't matter).\n+        for (RowExpression clause : whenClauses) {\n             checkArgument(clause instanceof SpecialFormExpression && ((SpecialFormExpression) clause).getForm().equals(WHEN));\n \n             RowExpression operand = ((SpecialFormExpression) clause).getArguments().get(0);\n+            BytecodeNode operandBytecode;\n+\n+            if (searchedCase) {\n+                operandBytecode = generatorContext.generate(operand, Optional.empty());\n+            }\n+            else {\n+                // call equals(value, operandBytecode)\n+                FunctionHandle equalsFunction = generatorContext.getFunctionManager().resolveOperator(EQUAL, fromTypes(value.getType(), operand.getType()));\n+                operandBytecode = generatorContext.generateCall(\n+                        EQUAL.name(),\n+                        generatorContext.getFunctionManager().getBuiltInScalarFunctionImplementation(equalsFunction),\n+                        ImmutableList.of(\n+                                generatorContext.generate(operand,\n+                                Optional.empty()),\n+                                getTempVariableNode));\n+            }\n+\n+            block.append(operandBytecode);\n+\n+            IfStatement ifWasNull = new IfStatement();\n+            ifWasNull.condition(wasNull)\n+                    .ifTrue()\n+                    .putVariable(wasNull, false)\n+                    .pop(Boolean.class); // pop the result of the predicate eval\n+\n+            // Here the TOS  is the result of the predicate.\n             RowExpression result = ((SpecialFormExpression) clause).getArguments().get(1);\n+            LabelNode target = resultLabels.get(result);", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5NDE2Ng==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432694166", "bodyText": "As you can see I left Java at jdk 5 :) thanks for teaching me some new/cool patterns!", "author": "kaikalur", "createdAt": "2020-05-29T19:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwMDA2Mw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432700063", "bodyText": "Except in this case it's a bit awkward to do it because of the new call (and also putIfAbsent returning null). So I'm just keeping the onld one.", "author": "kaikalur", "createdAt": "2020-05-29T19:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzM4Ng==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432683386", "bodyText": "Prefer chaining the calls.", "author": "rongrong", "createdAt": "2020-05-29T19:11:40Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -97,49 +81,84 @@ else if (<value> == <non-constant2>) {\n         // determine the type of the value and result\n         Class<?> valueType = value.getType().getJavaType();\n \n+        // We generate SearchedCase as CASE TRUE WHEN p1 THEN v1 WHEN p2 THEN p2...\n+        boolean searchedCase = (value instanceof ConstantExpression && ((ConstantExpression) value).getType() == BOOLEAN &&\n+                ((ConstantExpression) value).getValue() == Boolean.TRUE);\n+\n         // evaluate the value and store it in a variable\n-        LabelNode nullValue = new LabelNode(\"nullCondition\");\n-        Variable tempVariable = scope.createTempVariable(valueType);\n-        BytecodeBlock block = new BytecodeBlock()\n-                .append(valueBytecode)\n-                .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, nullValue, void.class, valueType))\n-                .putVariable(tempVariable);\n-\n-        BytecodeNode getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n-\n-        // build the statements\n-        elseValue = new BytecodeBlock().visitLabel(nullValue).append(elseValue);\n-        // reverse list because current if statement builder doesn't support if/else so we need to build the if statements bottom up\n-        for (RowExpression clause : Lists.reverse(whenClauses)) {\n+        LabelNode elseLabel = new LabelNode(\"else\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+\n+        BytecodeBlock block = new BytecodeBlock();\n+        BytecodeNode getTempVariableNode = null;\n+        if (!searchedCase) {\n+            BytecodeNode valueBytecode = generatorContext.generate(value, Optional.empty());\n+            Variable tempVariable = scope.createTempVariable(valueType);\n+            block.append(valueBytecode)\n+                    .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, elseLabel, void.class, valueType))\n+                    .putVariable(tempVariable);\n+            getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n+        }\n+\n+        Variable wasNull = generatorContext.wasNull();\n+        block.putVariable(wasNull, false);\n+\n+        Map<RowExpression, LabelNode> resultLabels = new HashMap<RowExpression, LabelNode>();\n+        // We already know the P1 .. Pn are all boolean just call them and search for true (false/null don't matter).\n+        for (RowExpression clause : whenClauses) {\n             checkArgument(clause instanceof SpecialFormExpression && ((SpecialFormExpression) clause).getForm().equals(WHEN));\n \n             RowExpression operand = ((SpecialFormExpression) clause).getArguments().get(0);\n+            BytecodeNode operandBytecode;\n+\n+            if (searchedCase) {\n+                operandBytecode = generatorContext.generate(operand, Optional.empty());\n+            }\n+            else {\n+                // call equals(value, operandBytecode)\n+                FunctionHandle equalsFunction = generatorContext.getFunctionManager().resolveOperator(EQUAL, fromTypes(value.getType(), operand.getType()));\n+                operandBytecode = generatorContext.generateCall(\n+                        EQUAL.name(),\n+                        generatorContext.getFunctionManager().getBuiltInScalarFunctionImplementation(equalsFunction),\n+                        ImmutableList.of(\n+                                generatorContext.generate(operand,\n+                                Optional.empty()),\n+                                getTempVariableNode));\n+            }\n+\n+            block.append(operandBytecode);\n+\n+            IfStatement ifWasNull = new IfStatement();\n+            ifWasNull.condition(wasNull)\n+                    .ifTrue()\n+                    .putVariable(wasNull, false)\n+                    .pop(Boolean.class); // pop the result of the predicate eval\n+\n+            // Here the TOS  is the result of the predicate.\n             RowExpression result = ((SpecialFormExpression) clause).getArguments().get(1);\n+            LabelNode target = resultLabels.get(result);\n+            if (target == null) {\n+                target = new LabelNode(RESULT_LABEL_PREFIX + resultLabels.size());\n+                resultLabels.put(result, target);\n+            }\n \n-            // call equals(value, operand)\n-            FunctionHandle equalsFunction = generatorContext.getFunctionManager().resolveOperator(EQUAL, fromTypes(value.getType(), operand.getType()));\n-\n-            // TODO: what if operand is null? It seems that the call will return \"null\" (which is cleared below)\n-            // and the code only does the right thing because the value in the stack for that scenario is\n-            // Java's default for boolean == false\n-            // This code should probably be checking for wasNull after the call and \"failing\" the equality\n-            // check if wasNull is true\n-            BytecodeNode equalsCall = generatorContext.generateCall(\n-                    EQUAL.name(),\n-                    generatorContext.getFunctionManager().getBuiltInScalarFunctionImplementation(equalsFunction),\n-                    ImmutableList.of(generatorContext.generate(operand, Optional.empty()), getTempVariableNode));\n-\n-            BytecodeBlock condition = new BytecodeBlock()\n-                    .append(equalsCall)\n-                    .append(generatorContext.wasNull().set(constantFalse()));\n-\n-            elseValue = new IfStatement(\"when\")\n-                    .condition(condition)\n-                    .ifTrue(generatorContext.generate(result, Optional.empty()))\n-                    .ifFalse(elseValue);\n+            ifWasNull.ifFalse().ifTrueGoto(target);\n+            block.append(ifWasNull);\n         }\n \n+        // Here we evaluate the else result.\n+        block.visitLabel(elseLabel);", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwMDA0MQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432700041", "bodyText": "done", "author": "kaikalur", "createdAt": "2020-05-29T19:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzQyNQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432683425", "bodyText": "Same here.", "author": "rongrong", "createdAt": "2020-05-29T19:11:46Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/SwitchCodeGenerator.java", "diffHunk": "@@ -97,49 +81,84 @@ else if (<value> == <non-constant2>) {\n         // determine the type of the value and result\n         Class<?> valueType = value.getType().getJavaType();\n \n+        // We generate SearchedCase as CASE TRUE WHEN p1 THEN v1 WHEN p2 THEN p2...\n+        boolean searchedCase = (value instanceof ConstantExpression && ((ConstantExpression) value).getType() == BOOLEAN &&\n+                ((ConstantExpression) value).getValue() == Boolean.TRUE);\n+\n         // evaluate the value and store it in a variable\n-        LabelNode nullValue = new LabelNode(\"nullCondition\");\n-        Variable tempVariable = scope.createTempVariable(valueType);\n-        BytecodeBlock block = new BytecodeBlock()\n-                .append(valueBytecode)\n-                .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, nullValue, void.class, valueType))\n-                .putVariable(tempVariable);\n-\n-        BytecodeNode getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n-\n-        // build the statements\n-        elseValue = new BytecodeBlock().visitLabel(nullValue).append(elseValue);\n-        // reverse list because current if statement builder doesn't support if/else so we need to build the if statements bottom up\n-        for (RowExpression clause : Lists.reverse(whenClauses)) {\n+        LabelNode elseLabel = new LabelNode(\"else\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+\n+        BytecodeBlock block = new BytecodeBlock();\n+        BytecodeNode getTempVariableNode = null;\n+        if (!searchedCase) {\n+            BytecodeNode valueBytecode = generatorContext.generate(value, Optional.empty());\n+            Variable tempVariable = scope.createTempVariable(valueType);\n+            block.append(valueBytecode)\n+                    .append(BytecodeUtils.ifWasNullClearPopAndGoto(scope, elseLabel, void.class, valueType))\n+                    .putVariable(tempVariable);\n+            getTempVariableNode = VariableInstruction.loadVariable(tempVariable);\n+        }\n+\n+        Variable wasNull = generatorContext.wasNull();\n+        block.putVariable(wasNull, false);\n+\n+        Map<RowExpression, LabelNode> resultLabels = new HashMap<RowExpression, LabelNode>();\n+        // We already know the P1 .. Pn are all boolean just call them and search for true (false/null don't matter).\n+        for (RowExpression clause : whenClauses) {\n             checkArgument(clause instanceof SpecialFormExpression && ((SpecialFormExpression) clause).getForm().equals(WHEN));\n \n             RowExpression operand = ((SpecialFormExpression) clause).getArguments().get(0);\n+            BytecodeNode operandBytecode;\n+\n+            if (searchedCase) {\n+                operandBytecode = generatorContext.generate(operand, Optional.empty());\n+            }\n+            else {\n+                // call equals(value, operandBytecode)\n+                FunctionHandle equalsFunction = generatorContext.getFunctionManager().resolveOperator(EQUAL, fromTypes(value.getType(), operand.getType()));\n+                operandBytecode = generatorContext.generateCall(\n+                        EQUAL.name(),\n+                        generatorContext.getFunctionManager().getBuiltInScalarFunctionImplementation(equalsFunction),\n+                        ImmutableList.of(\n+                                generatorContext.generate(operand,\n+                                Optional.empty()),\n+                                getTempVariableNode));\n+            }\n+\n+            block.append(operandBytecode);\n+\n+            IfStatement ifWasNull = new IfStatement();\n+            ifWasNull.condition(wasNull)\n+                    .ifTrue()\n+                    .putVariable(wasNull, false)\n+                    .pop(Boolean.class); // pop the result of the predicate eval\n+\n+            // Here the TOS  is the result of the predicate.\n             RowExpression result = ((SpecialFormExpression) clause).getArguments().get(1);\n+            LabelNode target = resultLabels.get(result);\n+            if (target == null) {\n+                target = new LabelNode(RESULT_LABEL_PREFIX + resultLabels.size());\n+                resultLabels.put(result, target);\n+            }\n \n-            // call equals(value, operand)\n-            FunctionHandle equalsFunction = generatorContext.getFunctionManager().resolveOperator(EQUAL, fromTypes(value.getType(), operand.getType()));\n-\n-            // TODO: what if operand is null? It seems that the call will return \"null\" (which is cleared below)\n-            // and the code only does the right thing because the value in the stack for that scenario is\n-            // Java's default for boolean == false\n-            // This code should probably be checking for wasNull after the call and \"failing\" the equality\n-            // check if wasNull is true\n-            BytecodeNode equalsCall = generatorContext.generateCall(\n-                    EQUAL.name(),\n-                    generatorContext.getFunctionManager().getBuiltInScalarFunctionImplementation(equalsFunction),\n-                    ImmutableList.of(generatorContext.generate(operand, Optional.empty()), getTempVariableNode));\n-\n-            BytecodeBlock condition = new BytecodeBlock()\n-                    .append(equalsCall)\n-                    .append(generatorContext.wasNull().set(constantFalse()));\n-\n-            elseValue = new IfStatement(\"when\")\n-                    .condition(condition)\n-                    .ifTrue(generatorContext.generate(result, Optional.empty()))\n-                    .ifFalse(elseValue);\n+            ifWasNull.ifFalse().ifTrueGoto(target);\n+            block.append(ifWasNull);\n         }\n \n+        // Here we evaluate the else result.\n+        block.visitLabel(elseLabel);\n         block.append(elseValue);\n+        block.gotoLabel(endLabel);\n+\n+        // Now generate the result expression code.\n+        for (Map.Entry<RowExpression, LabelNode> resultLabel : resultLabels.entrySet()) {\n+            block.visitLabel(resultLabel.getValue());", "originalCommit": "813213baa1925479a9b0cd8daf2e1ccfb918816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5NDgzMg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432694832", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-29T19:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MzQyNQ=="}], "type": "inlineReview"}, {"oid": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "url": "https://github.com/prestodb/presto/commit/d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-29T19:51:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjgyMg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432866822", "bodyText": "Let's do not use Stack class. It is not recommended in Java docs. Use ArrayDeque for the impl.", "author": "highker", "createdAt": "2020-05-30T16:10:37Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -20,12 +20,14 @@\n import com.facebook.presto.bytecode.instruction.LabelNode;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n import com.google.common.base.Preconditions;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Stack;", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTE0Mw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885143", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjkyNw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432866927", "bodyText": "flattenedArguments", "author": "highker", "createdAt": "2020-05-30T16:12:13Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -36,68 +38,71 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTI5Nw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885297", "bodyText": "Done and also using the ImmutableList. Forgot about that earlier", "author": "kaikalur", "createdAt": "2020-05-30T20:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NjkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2Njk3Nw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432866977", "bodyText": "same line", "author": "highker", "createdAt": "2020-05-30T16:13:00Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -36,68 +38,71 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();\n+        do {\n+            RowExpression operand = stack.pop();\n+            if (operand instanceof SpecialFormExpression &&\n+                    ((SpecialFormExpression) operand).getForm() == SpecialFormExpression.Form.AND) {\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(1));\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(0));\n+            }\n+            else {\n+                flattenedArgs.add(operand);\n+            }\n+        } while (!stack.empty());\n+\n         BytecodeBlock block = new BytecodeBlock()\n                 .comment(\"AND\")\n                 .setDescription(\"AND\");\n \n-        BytecodeNode left = generator.generate(arguments.get(0), Optional.empty());\n-        BytecodeNode right = generator.generate(arguments.get(1), Optional.empty());\n-\n-        block.append(left);\n-\n-        IfStatement ifLeftIsNull = new IfStatement(\"if left wasNull...\")\n-                .condition(wasNull);\n-\n-        LabelNode end = new LabelNode(\"end\");\n-        ifLeftIsNull.ifTrue()\n-                .comment(\"clear the null flag, pop left value off stack, and push left null flag on the stack (true)\")\n-                .append(wasNull.set(constantFalse()))\n-                .pop(arguments.get(0).getType().getJavaType()) // discard left value\n-                .push(true);\n+        LabelNode falseLabel = new LabelNode(\"false\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+        Variable wasNull = generator.wasNull();\n \n-        LabelNode leftIsTrue = new LabelNode(\"leftIsTrue\");\n-        ifLeftIsNull.ifFalse()\n-                .comment(\"if left is false, push false, and goto end\")\n-                .ifTrueGoto(leftIsTrue)\n-                .push(false)\n-                .gotoLabel(end)\n-                .comment(\"left was true; push left null flag on the stack (false)\")\n-                .visitLabel(leftIsTrue)\n+        Variable hasNulls = generator.getScope().createTempVariable(boolean.class);\n+        block.initializeVariable(hasNulls);\n+        for (int i = 0; i < flattenedArgs.size(); i++) {\n+            block.comment(\"do { eval arg; if (wasNull) { hasNull = true; wasNull = false; } else if (false) goto ret_false; }\")\n+                    .append(generator.generate(flattenedArgs.get(i), Optional.empty()));\n+\n+            IfStatement ifOperandIsNull = new IfStatement(\"if left wasNulll...\")\n+                    .condition(wasNull);", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTMwNA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885304", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2Njk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2Njk5OQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432866999", "bodyText": "put .ifFalse() in the previous line", "author": "highker", "createdAt": "2020-05-30T16:13:17Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -36,68 +38,71 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();\n+        do {\n+            RowExpression operand = stack.pop();\n+            if (operand instanceof SpecialFormExpression &&\n+                    ((SpecialFormExpression) operand).getForm() == SpecialFormExpression.Form.AND) {\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(1));\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(0));\n+            }\n+            else {\n+                flattenedArgs.add(operand);\n+            }\n+        } while (!stack.empty());\n+\n         BytecodeBlock block = new BytecodeBlock()\n                 .comment(\"AND\")\n                 .setDescription(\"AND\");\n \n-        BytecodeNode left = generator.generate(arguments.get(0), Optional.empty());\n-        BytecodeNode right = generator.generate(arguments.get(1), Optional.empty());\n-\n-        block.append(left);\n-\n-        IfStatement ifLeftIsNull = new IfStatement(\"if left wasNull...\")\n-                .condition(wasNull);\n-\n-        LabelNode end = new LabelNode(\"end\");\n-        ifLeftIsNull.ifTrue()\n-                .comment(\"clear the null flag, pop left value off stack, and push left null flag on the stack (true)\")\n-                .append(wasNull.set(constantFalse()))\n-                .pop(arguments.get(0).getType().getJavaType()) // discard left value\n-                .push(true);\n+        LabelNode falseLabel = new LabelNode(\"false\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+        Variable wasNull = generator.wasNull();\n \n-        LabelNode leftIsTrue = new LabelNode(\"leftIsTrue\");\n-        ifLeftIsNull.ifFalse()\n-                .comment(\"if left is false, push false, and goto end\")\n-                .ifTrueGoto(leftIsTrue)\n-                .push(false)\n-                .gotoLabel(end)\n-                .comment(\"left was true; push left null flag on the stack (false)\")\n-                .visitLabel(leftIsTrue)\n+        Variable hasNulls = generator.getScope().createTempVariable(boolean.class);\n+        block.initializeVariable(hasNulls);\n+        for (int i = 0; i < flattenedArgs.size(); i++) {\n+            block.comment(\"do { eval arg; if (wasNull) { hasNull = true; wasNull = false; } else if (false) goto ret_false; }\")\n+                    .append(generator.generate(flattenedArgs.get(i), Optional.empty()));\n+\n+            IfStatement ifOperandIsNull = new IfStatement(\"if left wasNulll...\")\n+                    .condition(wasNull);\n+            ifOperandIsNull.ifTrue()\n+                    .comment(\"clear the null flag and remember there was a null\")\n+                    .putVariable(hasNulls, true)\n+                    .putVariable(wasNull, false)\n+                    .pop(boolean.class);\n+\n+            ifOperandIsNull\n+                    .ifFalse()", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTQ2NQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885465", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2Njk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzA0NA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432867044", "bodyText": "same", "author": "highker", "createdAt": "2020-05-30T16:14:03Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/OrCodeGenerator.java", "diffHunk": "@@ -36,67 +38,70 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTQ3Ng==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885476", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzA1NA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432867054", "bodyText": "same", "author": "highker", "createdAt": "2020-05-30T16:14:16Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/OrCodeGenerator.java", "diffHunk": "@@ -36,67 +38,70 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        Stack<RowExpression> stack = new Stack<RowExpression>();\n+        stack.push(arguments.get(1));\n+        stack.push(arguments.get(0));\n+\n+        List<RowExpression> flattenedArgs = new ArrayList<RowExpression>();\n+        do {\n+            RowExpression operand = stack.pop();\n+            if (operand instanceof SpecialFormExpression &&\n+                    ((SpecialFormExpression) operand).getForm() == SpecialFormExpression.Form.OR) {\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(1));\n+                stack.push(((SpecialFormExpression) operand).getArguments().get(0));\n+            }\n+            else {\n+                flattenedArgs.add(operand);\n+            }\n+        } while (!stack.empty());\n+\n         BytecodeBlock block = new BytecodeBlock()\n                 .comment(\"OR\")\n                 .setDescription(\"OR\");\n \n-        BytecodeNode left = generator.generate(arguments.get(0), Optional.empty());\n-        BytecodeNode right = generator.generate(arguments.get(1), Optional.empty());\n-\n-        block.append(left);\n-\n-        IfStatement ifLeftIsNull = new IfStatement(\"if left wasNull...\")\n-                .condition(wasNull);\n-\n-        LabelNode end = new LabelNode(\"end\");\n-        ifLeftIsNull.ifTrue(new BytecodeBlock()\n-                .comment(\"clear the null flag, pop left value off stack, and push left null flag on the stack (true)\")\n-                .append(wasNull.set(constantFalse()))\n-                .pop(arguments.get(0).getType().getJavaType()) // discard left value\n-                .push(true));\n-\n-        LabelNode leftIsFalse = new LabelNode(\"leftIsFalse\");\n-        ifLeftIsNull.ifFalse(new BytecodeBlock()\n-                .comment(\"if left is true, push true, and goto end\")\n-                .ifFalseGoto(leftIsFalse)\n-                .push(true)\n-                .gotoLabel(end)\n-                .comment(\"left was false; push left null flag on the stack (false)\")\n-                .visitLabel(leftIsFalse)\n-                .push(false));\n-\n-        block.append(ifLeftIsNull);\n-\n-        // At this point we know the left expression was either NULL or FALSE.  The stack contains a single boolean\n-        // value for this expression which indicates if the left value was NULL.\n-\n-        // eval right!\n-        block.append(right);\n+        LabelNode trueLabel = new LabelNode(\"true\");\n+        LabelNode endLabel = new LabelNode(\"end\");\n+        Variable wasNull = generator.wasNull();\n \n-        IfStatement ifRightIsNull = new IfStatement(\"if right wasNull...\")\n-                .condition(wasNull);\n+        Variable hasNulls = generator.getScope().createTempVariable(boolean.class);\n+        block.initializeVariable(hasNulls);\n+        for (int i = 0; i < flattenedArgs.size(); i++) {\n+            block.comment(\"do { eval arg; if (wasNull) { hasNull = true; wasNull = false; } else if (true) goto ret_true; }\")\n+                    .append(generator.generate(flattenedArgs.get(i), Optional.empty()));\n+            IfStatement ifOperandIsNull = new IfStatement(\"if left wasNulll...\")\n+                    .condition(wasNull);\n+            ifOperandIsNull.ifTrue()\n+                    .comment(\"clear the null flag and remember there was a null\")\n+                    .putVariable(hasNulls, true)\n+                    .putVariable(wasNull, false)\n+                    .pop(boolean.class);\n+\n+            ifOperandIsNull\n+                    .ifFalse()", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTQ5NQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885495", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzI0MA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432867240", "bodyText": "move EQUAL.getOperator() to its own line", "author": "highker", "createdAt": "2020-05-30T16:16:55Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -653,12 +610,27 @@ protected RowExpression visitTryExpression(TryExpression node, Void context)\n             throw new UnsupportedOperationException(\"Must desugar TryExpression before translate it into RowExpression\");\n         }\n \n+        private RowExpression buildEquals(RowExpression lhs, RowExpression rhs)\n+        {\n+            return call(EQUAL.getOperator(),", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTk0Nw==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432885947", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzI1NQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432867255", "bodyText": "lhs -> value", "author": "highker", "createdAt": "2020-05-30T16:17:10Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -653,12 +610,27 @@ protected RowExpression visitTryExpression(TryExpression node, Void context)\n             throw new UnsupportedOperationException(\"Must desugar TryExpression before translate it into RowExpression\");\n         }\n \n+        private RowExpression buildEquals(RowExpression lhs, RowExpression rhs)\n+        {\n+            return call(EQUAL.getOperator(),\n+                    functionResolution.comparisonFunction(ComparisonExpression.Operator.EQUAL, lhs.getType(), rhs.getType()),\n+                    BOOLEAN,\n+                    lhs,\n+                    rhs);\n+        }\n+\n         @Override\n         protected RowExpression visitInPredicate(InPredicate node, Void context)\n         {\n             ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-            arguments.add(process(node.getValue(), context));\n+            RowExpression lhs = process(node.getValue(), context);", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NjA0NQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432886045", "bodyText": "Done. What can I say? I'm compiler guy and lhs and rhs are the only way to refer to expression operands! :)", "author": "kaikalur", "createdAt": "2020-05-30T20:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzQzNQ==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432867435", "bodyText": "Always keep the same line empty. The first arg should start with its own line.", "author": "highker", "createdAt": "2020-05-30T16:19:47Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8348,6 +8348,46 @@ public void testRowExpressionInterpreterStackOverflow()\n         assertQuery(stringBuilder.toString(), \"values -1\");\n     }\n \n+    @Test\n+    public void testSwitchOptimization()\n+    {\n+        assertQuery(\"select 1\", \"select 1\");\n+        assertQuery(\"SELECT CASE WHEN x = 1 THEN 1 WHEN x = 5 THEN 5 WHEN x = IF(RANDOM() >= 0, 3, 5) THEN 10 ELSE -1 END FROM (SELECT ORDERKEY x FROM orders where orderkey <= 10)\",\n+                \"SELECT CASE x WHEN 1 THEN 1 WHEN 5 THEN 5 WHEN 3 THEN 10 ELSE -1 END FROM (SELECT ORDERKEY x FROM orders where orderkey <= 10)\");\n+\n+        assertQuery(\"SELECT CASE x WHEN 1 THEN 1 WHEN 5 THEN 5 WHEN 3 THEN 10 ELSE -1 END FROM (SELECT ORDERKEY x FROM orders where orderkey <= 10)\",\n+                \"SELECT CASE x WHEN 1 THEN 1 WHEN 5 THEN 5 WHEN 3 THEN 10 ELSE -1 END FROM (SELECT ORDERKEY x FROM orders where orderkey <= 10)\");\n+    }\n+\n+    @Test\n+    public void testSwitchReturnsNull()\n+    {\n+        assertQuery(\"SELECT CASE true WHEN random() < 0 THEN true END\",\n+                \"SELECT CAST(NULL AS BOOLEAN)\");\n+\n+        assertQuery(\"SELECT TRUE AND CAST(NULL AS BOOLEAN) AND RANDOM() >= 0\",\n+                \"SELECT CAST(NULL AS BOOLEAN)\");\n+\n+        assertQuery(\"SELECT TRUE AND CAST(NULL AS BOOLEAN) AND RANDOM() < 0\",\n+                \"SELECT FALSE\");\n+\n+        assertQuery(\"SELECT TRUE AND CAST(NULL AS BOOLEAN) IS NULL AND RANDOM() >= 0\",\n+                \"SELECT TRUE\");\n+\n+        assertQuery(\"SELECT 1 = ALL (SELECT CAST(NULL AS INTEGER))\",\n+                \"SELECT CAST(NULL AS BOOLEAN)\");\n+    }\n+\n+    @Test\n+    public void testAndInFilter()\n+    {\n+        assertQuery(\"SELECT count() from (select * from orders where orderkey < random(10)) where ((orderkey > 100 and custkey > 100) or (orderkey > 200 and custkey < 200))\",\n+                \"values 0\");\n+\n+        assertQuery(\"SELECT ((orderkey > 100 and custkey > 100) or (orderkey > 200 and custkey < 200)) from (select * from orders where orderkey < random(10) limit 1)\",\n+                \"values false\");", "originalCommit": "d45dd7ee8f3840fe8b5fc632d8947c445cccf98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NjE0Mg==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r432886142", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-05-30T20:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzQzNQ=="}], "type": "inlineReview"}, {"oid": "cafefe46aed37859c446416871e4d7757a582c46", "url": "https://github.com/prestodb/presto/commit/cafefe46aed37859c446416871e4d7757a582c46", "message": "Streamlined implementation of core control operators", "committedDate": "2020-05-30T20:52:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzM1Ng==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r434063356", "bodyText": "Deque<RowExpression> stack = new ArrayDeque<>();", "author": "highker", "createdAt": "2020-06-02T17:52:24Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/AndCodeGenerator.java", "diffHunk": "@@ -36,68 +38,69 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n     {\n         Preconditions.checkArgument(arguments.size() == 2);\n \n-        Variable wasNull = generator.wasNull();\n+        // We flatten the AND here.\n+        ArrayDeque<RowExpression> stack = new ArrayDeque<>();", "originalCommit": "cafefe46aed37859c446416871e4d7757a582c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2OTE5NA==", "url": "https://github.com/prestodb/presto/pull/14562#discussion_r434069194", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-06-02T18:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzM1Ng=="}], "type": "inlineReview"}, {"oid": "03b9eabe880af848e4d6846896f6288cc753d246", "url": "https://github.com/prestodb/presto/commit/03b9eabe880af848e4d6846896f6288cc753d246", "message": "Streamlined implementation of core control operators", "committedDate": "2020-06-02T18:00:06Z", "type": "commit"}, {"oid": "03b9eabe880af848e4d6846896f6288cc753d246", "url": "https://github.com/prestodb/presto/commit/03b9eabe880af848e4d6846896f6288cc753d246", "message": "Streamlined implementation of core control operators", "committedDate": "2020-06-02T18:00:06Z", "type": "forcePushed"}]}