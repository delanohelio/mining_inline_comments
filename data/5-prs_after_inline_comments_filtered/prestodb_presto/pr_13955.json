{"pr_number": 13955, "pr_title": "Refactor ReorderJoins to use RowExpressions", "pr_createdAt": "2020-01-11T00:53:48Z", "pr_url": "https://github.com/prestodb/presto/pull/13955", "timeline": [{"oid": "4ef07e29575910b1f4f0288ca05dcba977b956e1", "url": "https://github.com/prestodb/presto/commit/4ef07e29575910b1f4f0288ca05dcba977b956e1", "message": "Refactor ReorderJoins to use RowExpressions", "committedDate": "2020-01-14T00:31:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMDIwOA==", "url": "https://github.com/prestodb/presto/pull/13955#discussion_r366130208", "bodyText": "Use left and right", "author": "highker", "createdAt": "2020-01-14T02:46:19Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestReorderJoins.java", "diffHunk": "@@ -495,6 +502,11 @@ public void testReplicatesWhenNotRestricted()\n \n     private RuleAssert assertReorderJoins()\n     {\n-        return tester.assertThat(new ReorderJoins(new CostComparator(1, 1, 1)));\n+        return tester.assertThat(new ReorderJoins(new CostComparator(1, 1, 1), tester.getMetadata()));\n+    }\n+\n+    private RowExpression comparisonRowExpression(OperatorType type, RowExpression arg1, RowExpression arg2)", "originalCommit": "4ef07e29575910b1f4f0288ca05dcba977b956e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMDM4Mg==", "url": "https://github.com/prestodb/presto/pull/13955#discussion_r366130382", "bodyText": "Use Expressions.variable. Same for other places.", "author": "highker", "createdAt": "2020-01-14T02:47:12Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestReorderJoins.java", "diffHunk": "@@ -397,7 +404,7 @@ public void testSmallerJoinFirst()\n                                 ImmutableList.of(\n                                         new EquiJoinClause(p.variable(\"B2\"), p.variable(\"C1\"))),\n                                 ImmutableList.of(p.variable(\"A1\")),\n-                                Optional.of(castToRowExpression(new ComparisonExpression(EQUAL, new SymbolReference(\"A1\"), new SymbolReference(\"B1\"))))))\n+                                Optional.of(comparisonRowExpression(EQUAL, new VariableReferenceExpression(\"A1\", BIGINT), new VariableReferenceExpression(\"B1\", BIGINT)))))", "originalCommit": "4ef07e29575910b1f4f0288ca05dcba977b956e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bb4eb2b183c0a31e08543e9a2cc0cca8e05e3a2", "url": "https://github.com/prestodb/presto/commit/2bb4eb2b183c0a31e08543e9a2cc0cca8e05e3a2", "message": "Refactor ReorderJoins to use RowExpressions", "committedDate": "2020-01-14T19:57:04Z", "type": "commit"}, {"oid": "2bb4eb2b183c0a31e08543e9a2cc0cca8e05e3a2", "url": "https://github.com/prestodb/presto/commit/2bb4eb2b183c0a31e08543e9a2cc0cca8e05e3a2", "message": "Refactor ReorderJoins to use RowExpressions", "committedDate": "2020-01-14T19:57:04Z", "type": "forcePushed"}]}