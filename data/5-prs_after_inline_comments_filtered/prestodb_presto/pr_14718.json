{"pr_number": 14718, "pr_title": "Remote function planning", "pr_createdAt": "2020-06-24T22:16:40Z", "pr_url": "https://github.com/prestodb/presto/pull/14718", "timeline": [{"oid": "f21530d812cbd2b95d0e8978a0eb57eba926c92e", "url": "https://github.com/prestodb/presto/commit/f21530d812cbd2b95d0e8978a0eb57eba926c92e", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-06-25T00:56:15Z", "type": "forcePushed"}, {"oid": "cd20f3bbf0d40e2c1d4126092b63eeea385c9a1f", "url": "https://github.com/prestodb/presto/commit/cd20f3bbf0d40e2c1d4126092b63eeea385c9a1f", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-06-25T01:14:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3NTc0MQ==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450475741", "bodyText": "Again. Transaction must be present when running a query. We shouldn't change the behavior of Presto only to make unit tests happy. Instead, why can't we use a session with a transaction ID in our unit tests?", "author": "caithagoras", "createdAt": "2020-07-06T20:56:57Z", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -138,18 +138,24 @@ public final void abort(FunctionNamespaceTransactionHandle transactionHandle)\n     public final Collection<SqlInvokedFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n     {\n         checkCatalog(functionName);\n-        checkArgument(transactionHandle.isPresent(), \"missing transactionHandle\");\n-        return transactions.get(transactionHandle.get()).loadAndGetFunctionsTransactional(functionName);\n+        if (transactionHandle.isPresent()) {\n+            return transactions.get(transactionHandle.get()).loadAndGetFunctionsTransactional(functionName);\n+        }\n+        return fetchFunctionsDirect(functionName);\n     }\n \n     @Override\n     public final FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n     {\n         checkCatalog(signature.getName());\n-        checkArgument(transactionHandle.isPresent(), \"missing transactionHandle\");\n         // This is the only assumption in this class that we're dealing with sql-invoked regular function.\n         SqlFunctionId functionId = new SqlFunctionId(signature.getName(), signature.getArgumentTypes());\n-        return transactions.get(transactionHandle.get()).getFunctionHandle(functionId);\n+        if (transactionHandle.isPresent()) {\n+            return transactions.get(transactionHandle.get()).getFunctionHandle(functionId);\n+        }\n+        FunctionCollection collection = new FunctionCollection();\n+        collection.loadAndGetFunctionsTransactional(signature.getName());\n+        return collection.getFunctionHandle(functionId);", "originalCommit": "4c58325441c9618c4ca4b90a97c9c74ab042bf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMTE0MQ==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450501141", "bodyText": "Is transaction must exist we should change it to be not optional. As long as it's Optional it's strange to argue that it has to exist.", "author": "rongrong", "createdAt": "2020-07-06T21:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3NTc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3ODc2Nw==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450478767", "bodyText": "Those exact setups have already been done in the constructor.", "author": "caithagoras", "createdAt": "2020-07-06T21:03:31Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestPlanRemoteProjections.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.metadata.MetadataManager;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.PlanNodeIdAllocator;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.facebook.presto.sql.planner.assertions.ExpressionMatcher;\n+import com.facebook.presto.sql.planner.assertions.PlanMatchPattern;\n+import com.facebook.presto.sql.planner.iterative.rule.test.BaseRuleTest;\n+import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SessionTestUtils.TEST_SESSION;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.DOUBLE;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.iterative.rule.PlanRemotePojections.ProjectionContext;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPlanRemoteProjections\n+        extends BaseRuleTest\n+{\n+    public static final QualifiedFunctionName REMOTE_FOO = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"remote_foo\");\n+    public static final RoutineCharacteristics.Language JAVA = new RoutineCharacteristics.Language(\"java\");\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_0 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo()\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_1 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(StandardTypes.INTEGER))),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo(x)\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setDeterminism(DETERMINISTIC).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_2 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(StandardTypes.INTEGER)), new Parameter(\"y\", parseTypeSignature(StandardTypes.INTEGER))),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo(x, y)\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setDeterminism(DETERMINISTIC).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_3 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(StandardTypes.INTEGER)), new Parameter(\"y\", parseTypeSignature(StandardTypes.INTEGER)), new Parameter(\"z\", parseTypeSignature(DOUBLE))),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo(x, y, z)\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    private static final Metadata METADATA = MetadataManager.createTestMetadataManager();\n+\n+    public TestPlanRemoteProjections()\n+    {\n+        FunctionManager functionManager = METADATA.getFunctionManager();\n+        functionManager.addTestFunctionNamespace(\"unittest\", new InMemoryFunctionNamespaceManager(\"unittest\", new SqlInvokedFunctionNamespaceManagerConfig().setSupportedFunctionLanguages(\"sql,java\")));\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_0, true);\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_1, true);\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_2, true);\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_3, true);\n+    }\n+\n+    @BeforeClass\n+    public void setup()\n+    {\n+        FunctionManager functionManager = getFunctionManager();\n+        functionManager.addTestFunctionNamespace(\"unittest\", new InMemoryFunctionNamespaceManager(\"unittest\", new SqlInvokedFunctionNamespaceManagerConfig().setSupportedFunctionLanguages(\"sql,java\")));\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_0, true);\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_1, true);\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_2, true);\n+        functionManager.createFunction(FUNCTION_REMOTE_FOO_3, true);", "originalCommit": "4c58325441c9618c4ca4b90a97c9c74ab042bf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMjE4OA==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450502188", "bodyText": "The two types of tests are setup differently. They are not using the same function manager. I don't remember the specifics. If you really care I can see what I can do about it.", "author": "rongrong", "createdAt": "2020-07-06T22:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3ODc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3OTYwMQ==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450479601", "bodyText": "Let's use H2 FNM, which is designed for testing purpose. We can then avoid adding test-related method addTestFunctionNamespace in our production code.\nYou can do that by first adding the factory:\nstatic {\n    METADATA.getFunctionManager().addFunctionNamespaceFactory(new H2FunctionNamespaceManagerFactory());\n}\nYou'll then be able to add a function namespace by\nfunctionManager.loadFunctionNamespaceManager(\n    H2FunctionNamespaceManagerFactory.NAME,\n    \"unittest\",\n    ImmutableMap.of(<config key>, <config value>))", "author": "caithagoras", "createdAt": "2020-07-06T21:05:20Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestPlanRemoteProjections.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.metadata.MetadataManager;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.plan.Assignments;\n+import com.facebook.presto.spi.plan.PlanNodeIdAllocator;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.facebook.presto.sql.planner.assertions.ExpressionMatcher;\n+import com.facebook.presto.sql.planner.assertions.PlanMatchPattern;\n+import com.facebook.presto.sql.planner.iterative.rule.test.BaseRuleTest;\n+import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SessionTestUtils.TEST_SESSION;\n+import static com.facebook.presto.common.type.BooleanType.BOOLEAN;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.DOUBLE;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.iterative.rule.PlanRemotePojections.ProjectionContext;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPlanRemoteProjections\n+        extends BaseRuleTest\n+{\n+    public static final QualifiedFunctionName REMOTE_FOO = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"remote_foo\");\n+    public static final RoutineCharacteristics.Language JAVA = new RoutineCharacteristics.Language(\"java\");\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_0 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo()\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_1 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(StandardTypes.INTEGER))),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo(x)\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setDeterminism(DETERMINISTIC).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_2 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(StandardTypes.INTEGER)), new Parameter(\"y\", parseTypeSignature(StandardTypes.INTEGER))),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo(x, y)\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setDeterminism(DETERMINISTIC).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    public static final SqlInvokedFunction FUNCTION_REMOTE_FOO_3 = new SqlInvokedFunction(\n+            REMOTE_FOO,\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(StandardTypes.INTEGER)), new Parameter(\"y\", parseTypeSignature(StandardTypes.INTEGER)), new Parameter(\"z\", parseTypeSignature(DOUBLE))),\n+            parseTypeSignature(StandardTypes.INTEGER),\n+            \"remote_foo(x, y, z)\",\n+            RoutineCharacteristics.builder().setLanguage(JAVA).setNullCallClause(RETURNS_NULL_ON_NULL_INPUT).build(),\n+            \"\",\n+            Optional.empty());\n+\n+    private static final Metadata METADATA = MetadataManager.createTestMetadataManager();\n+\n+    public TestPlanRemoteProjections()\n+    {\n+        FunctionManager functionManager = METADATA.getFunctionManager();\n+        functionManager.addTestFunctionNamespace(\"unittest\", new InMemoryFunctionNamespaceManager(\"unittest\", new SqlInvokedFunctionNamespaceManagerConfig().setSupportedFunctionLanguages(\"sql,java\")));", "originalCommit": "4c58325441c9618c4ca4b90a97c9c74ab042bf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMzEwNg==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450503106", "bodyText": "I remember I tried that but it didn't work. But I don't remember what didn't work. This is the problem of delayed review... Let me try again I guess...", "author": "rongrong", "createdAt": "2020-07-06T22:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3OTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MjM2MA==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r453942360", "bodyText": "I think the reason to not use H2FunctionNamespaceManagerFactory is dependencies. This test is in presto-main. H2FunctionNamespaceManagerFactory is in presto-tests.", "author": "rongrong", "createdAt": "2020-07-13T21:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3OTYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MDkyNQ==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450480925", "bodyText": "nit, for better readability of the constructed error message:\nExternal functions in [%s] is not supported: %s", "author": "caithagoras", "createdAt": "2020-07-06T21:08:19Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java", "diffHunk": "@@ -107,4 +109,12 @@ static void verifyNoAggregateWindowOrGroupingFunctions(Map<NodeRef<FunctionCall>\n             throw new SemanticException(CANNOT_HAVE_AGGREGATIONS_WINDOWS_OR_GROUPING, predicate, \"%s cannot contain aggregations, window functions or grouping operations: %s\", clause, found);\n         }\n     }\n+\n+    static void verifyNoExternalFunctions(Map<NodeRef<FunctionCall>, FunctionHandle> functionHandles, FunctionManager functionManager, Expression predicate, String clause)\n+    {\n+        List<FunctionCall> externalFunctions = extractExternalFunctions(functionHandles, ImmutableList.of(predicate), functionManager);\n+        if (!externalFunctions.isEmpty()) {\n+            throw new SemanticException(NOT_SUPPORTED, predicate, \"External functions in %s is not supported: %s\", clause, externalFunctions);", "originalCommit": "cd20f3bbf0d40e2c1d4126092b63eeea385c9a1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4Mjk0NQ==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450482945", "bodyText": "There is no unit test coverage for this commit. Can we add some.", "author": "caithagoras", "createdAt": "2020-07-06T21:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MDkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2MDU1Mg==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r453960552", "bodyText": "nit, for better readability of the constructed error message:\nExternal functions in [%s] is not supported: %s\n\n\nI don't think the [] is useful. It would make the error message like this:\nExternal functions in [Lambda expression] is not supported:....", "author": "rongrong", "createdAt": "2020-07-13T21:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MDkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MTg4Nw==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450481887", "bodyText": "This private helper method is only used once. Just inline?", "author": "caithagoras", "createdAt": "2020-07-06T21:10:32Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -67,6 +72,11 @@ private static boolean isWindowFunction(FunctionCall functionCall)\n         return functionCall.getWindow().isPresent();\n     }\n \n+    private static Predicate<FunctionCall> isExternalFunctionPredicate(Map<NodeRef<FunctionCall>, FunctionHandle> functionHandles, FunctionManager functionManager)", "originalCommit": "cd20f3bbf0d40e2c1d4126092b63eeea385c9a1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NzA2Nw==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r453957067", "bodyText": "All the other predicates in this class are only used once. I'm just keeping them consistent (including the style) with the rest of the file.", "author": "rongrong", "createdAt": "2020-07-13T21:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MTg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4MjE2OA==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r450482168", "bodyText": "Remove redundant parenthesis:\nreturn function -> functionManager.getFunctionMetadata ...", "author": "caithagoras", "createdAt": "2020-07-06T21:11:05Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -67,6 +72,11 @@ private static boolean isWindowFunction(FunctionCall functionCall)\n         return functionCall.getWindow().isPresent();\n     }\n \n+    private static Predicate<FunctionCall> isExternalFunctionPredicate(Map<NodeRef<FunctionCall>, FunctionHandle> functionHandles, FunctionManager functionManager)\n+    {\n+        return ((functionCall) -> (functionManager.getFunctionMetadata(functionHandles.get(NodeRef.of(functionCall))).getImplementationType().isExternal()));", "originalCommit": "cd20f3bbf0d40e2c1d4126092b63eeea385c9a1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd2775c70597ad50751327bbb45a451f72553c25", "url": "https://github.com/prestodb/presto/commit/cd2775c70597ad50751327bbb45a451f72553c25", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-13T23:11:23Z", "type": "forcePushed"}, {"oid": "3c4eab579f38b6277120810671088b7ce613052f", "url": "https://github.com/prestodb/presto/commit/3c4eab579f38b6277120810671088b7ce613052f", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-13T23:31:08Z", "type": "forcePushed"}, {"oid": "ef66bcdf35f8b1339efef97648f76eaced6e7158", "url": "https://github.com/prestodb/presto/commit/ef66bcdf35f8b1339efef97648f76eaced6e7158", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-13T23:42:37Z", "type": "forcePushed"}, {"oid": "7b3e57c51ff895c343a71345e75a78e72f6596b0", "url": "https://github.com/prestodb/presto/commit/7b3e57c51ff895c343a71345e75a78e72f6596b0", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-14T00:28:04Z", "type": "forcePushed"}, {"oid": "5a488ba0ab65d4b7426467c0d8def31ac568e0ad", "url": "https://github.com/prestodb/presto/commit/5a488ba0ab65d4b7426467c0d8def31ac568e0ad", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-15T20:06:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMjExNw==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r455322117", "bodyText": "Maybe add a default:?", "author": "highker", "createdAt": "2020-07-15T20:28:02Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/VerifyProjectionLocality.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.SimplePlanVisitor;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.optimizations.ExternalCallExpressionChecker;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class VerifyProjectionLocality\n+        implements PlanChecker.Checker\n+{\n+    @Override\n+    public void validate(PlanNode planNode, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        planNode.accept(new Visitor(metadata.getFunctionManager()), null);\n+    }\n+\n+    private static class Visitor\n+            extends SimplePlanVisitor<Void>\n+    {\n+        private final ExternalCallExpressionChecker externalCallExpressionChecker;\n+\n+        Visitor(FunctionManager functionManager)\n+        {\n+            this.externalCallExpressionChecker = new ExternalCallExpressionChecker(requireNonNull(functionManager, \"functionManager is null\"));\n+        }\n+\n+        @Override\n+        public Void visitProject(ProjectNode node, Void context)\n+        {\n+            switch (node.getLocality()) {\n+                case LOCAL:\n+                    checkState(node.getAssignments().getExpressions().stream().noneMatch(expression -> expression.accept(externalCallExpressionChecker, null)), format(\"ProjectNode with LOCAL locality has remote functions. Assignments are: %s\", node.getAssignments()));\n+                    break;\n+                case REMOTE:\n+                    node.getAssignments().getExpressions().forEach(expression -> {\n+                        checkState(expression instanceof VariableReferenceExpression || expression instanceof CallExpression, format(\"Expect VariableReferenceExpression or CallExpression, got %s\", expression.getClass().getName()));\n+                        if (expression instanceof CallExpression) {\n+                            checkState(expression.accept(externalCallExpressionChecker, null), format(\"Expect expression %s to be an external function\", expression));\n+                        }\n+                    });\n+                    break;\n+                case UNKNOWN:\n+                    throw new IllegalStateException(\"ProjectNode should have locality LOCAL or REMOTE\");\n+            }", "originalCommit": "1796d6b4e65c619b4833a4c58f9dc1b151a74209", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f06cf7bce2978fa93d4f5d3a92a1317c37863256", "url": "https://github.com/prestodb/presto/commit/f06cf7bce2978fa93d4f5d3a92a1317c37863256", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-15T20:58:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NDc5OA==", "url": "https://github.com/prestodb/presto/pull/14718#discussion_r455344798", "bodyText": "addFunctionNamespace should be good enough given it's for testing only", "author": "highker", "createdAt": "2020-07-15T21:05:52Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -169,6 +169,15 @@ public void loadFunctionNamespaceManager(\n         }\n     }\n \n+    @VisibleForTesting\n+    public void addTestFunctionNamespace(String catalogName, FunctionNamespaceManager functionNamespaceManager)", "originalCommit": "b3792655dc3f5b29fc34cd7d90c03766584fdea7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4ac04add0e9564b2e97dd926a5bc353ba560057", "url": "https://github.com/prestodb/presto/commit/d4ac04add0e9564b2e97dd926a5bc353ba560057", "message": "Add Locality to ProjectNode", "committedDate": "2020-07-15T22:12:09Z", "type": "commit"}, {"oid": "fac8b4ea9b066c9679722ac8a4e64f1218e6a298", "url": "https://github.com/prestodb/presto/commit/fac8b4ea9b066c9679722ac8a4e64f1218e6a298", "message": "Plan projection with remote functions", "committedDate": "2020-07-15T22:12:09Z", "type": "commit"}, {"oid": "846accea8949046e372d96a22bbe569e799f5913", "url": "https://github.com/prestodb/presto/commit/846accea8949046e372d96a22bbe569e799f5913", "message": "Add rule to rewrite filter with remote function to project", "committedDate": "2020-07-15T22:12:09Z", "type": "commit"}, {"oid": "b460e101963b41d492e5c5cc7b31267031507be7", "url": "https://github.com/prestodb/presto/commit/b460e101963b41d492e5c5cc7b31267031507be7", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-15T22:12:09Z", "type": "commit"}, {"oid": "b460e101963b41d492e5c5cc7b31267031507be7", "url": "https://github.com/prestodb/presto/commit/b460e101963b41d492e5c5cc7b31267031507be7", "message": "Explicitly not supporting external functions in lambda and join filter\n\nWe check the filter predicate in JOIN in PlanSanityChecker so we can cover\ncorrelated IN and lateral join that are converted to JOIN with filter predicate.", "committedDate": "2020-07-15T22:12:09Z", "type": "forcePushed"}]}