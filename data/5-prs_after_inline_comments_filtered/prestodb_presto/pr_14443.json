{"pr_number": 14443, "pr_title": "Add function scale_qdigest", "pr_createdAt": "2020-04-27T02:06:44Z", "pr_url": "https://github.com/prestodb/presto/pull/14443", "timeline": [{"oid": "62e6ea808bcd60572b35ad34a3ca78c7b3381cc2", "url": "https://github.com/prestodb/presto/commit/62e6ea808bcd60572b35ad34a3ca78c7b3381cc2", "message": "Fix invalid quantile to be a user error", "committedDate": "2020-04-27T02:09:54Z", "type": "forcePushed"}, {"oid": "e4a1a295c121b22b60164c692e8ae2837bb16723", "url": "https://github.com/prestodb/presto/commit/e4a1a295c121b22b60164c692e8ae2837bb16723", "message": "Fix invalid quantile to be a user error", "committedDate": "2020-04-27T18:01:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTMzNQ==", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069335", "bodyText": "private static", "author": "caithagoras", "createdAt": "2020-04-27T18:57:10Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileBelowZero()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), -0.2)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test\n+    public void testValueAtQuantileBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                5L);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testScaleNegative()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+    }\n+\n+    @Test\n+    public void testScale()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        // Before scaling.\n+        assertEquals(qdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(1, 0),\n+                        new QuantileDigest.Bucket(1, 1),\n+                        new QuantileDigest.Bucket(1, 2),\n+                        new QuantileDigest.Bucket(1, 3),\n+                        new QuantileDigest.Bucket(1, 4),\n+                        new QuantileDigest.Bucket(1, 5),\n+                        new QuantileDigest.Bucket(1, 6),\n+                        new QuantileDigest.Bucket(1, 7),\n+                        new QuantileDigest.Bucket(1, 8),\n+                        new QuantileDigest.Bucket(1, 9)));\n+\n+        // Scale up.\n+        SqlVarbinary sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 2)\", toHexString(qdigest)),\n+                QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        QuantileDigest scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(2, 0),\n+                        new QuantileDigest.Bucket(2, 1),\n+                        new QuantileDigest.Bucket(2, 2),\n+                        new QuantileDigest.Bucket(2, 3),\n+                        new QuantileDigest.Bucket(2, 4),\n+                        new QuantileDigest.Bucket(2, 5),\n+                        new QuantileDigest.Bucket(2, 6),\n+                        new QuantileDigest.Bucket(2, 7),\n+                        new QuantileDigest.Bucket(2, 8),\n+                        new QuantileDigest.Bucket(2, 9)));\n+\n+        // Scale down.\n+        sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(0.5, 0),\n+                        new QuantileDigest.Bucket(0.5, 1),\n+                        new QuantileDigest.Bucket(0.5, 2),\n+                        new QuantileDigest.Bucket(0.5, 3),\n+                        new QuantileDigest.Bucket(0.5, 4),\n+                        new QuantileDigest.Bucket(0.5, 5),\n+                        new QuantileDigest.Bucket(0.5, 6),\n+                        new QuantileDigest.Bucket(0.5, 7),\n+                        new QuantileDigest.Bucket(0.5, 8),\n+                        new QuantileDigest.Bucket(0.5, 9)));\n+    }\n+\n+    private void addAll(QuantileDigest digest, long... values)\n+    {\n+        requireNonNull(values, \"values is null\");\n+        for (long value : values) {\n+            digest.add(value);\n+        }\n+    }\n+\n+    private String toHexString(QuantileDigest qdigest)", "originalCommit": "e4a1a295c121b22b60164c692e8ae2837bb16723", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTQzMw==", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069433", "bodyText": "private static", "author": "caithagoras", "createdAt": "2020-04-27T18:57:19Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileBelowZero()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), -0.2)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test\n+    public void testValueAtQuantileBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                5L);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testScaleNegative()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+    }\n+\n+    @Test\n+    public void testScale()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        // Before scaling.\n+        assertEquals(qdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(1, 0),\n+                        new QuantileDigest.Bucket(1, 1),\n+                        new QuantileDigest.Bucket(1, 2),\n+                        new QuantileDigest.Bucket(1, 3),\n+                        new QuantileDigest.Bucket(1, 4),\n+                        new QuantileDigest.Bucket(1, 5),\n+                        new QuantileDigest.Bucket(1, 6),\n+                        new QuantileDigest.Bucket(1, 7),\n+                        new QuantileDigest.Bucket(1, 8),\n+                        new QuantileDigest.Bucket(1, 9)));\n+\n+        // Scale up.\n+        SqlVarbinary sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 2)\", toHexString(qdigest)),\n+                QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        QuantileDigest scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(2, 0),\n+                        new QuantileDigest.Bucket(2, 1),\n+                        new QuantileDigest.Bucket(2, 2),\n+                        new QuantileDigest.Bucket(2, 3),\n+                        new QuantileDigest.Bucket(2, 4),\n+                        new QuantileDigest.Bucket(2, 5),\n+                        new QuantileDigest.Bucket(2, 6),\n+                        new QuantileDigest.Bucket(2, 7),\n+                        new QuantileDigest.Bucket(2, 8),\n+                        new QuantileDigest.Bucket(2, 9)));\n+\n+        // Scale down.\n+        sqlVarbinary = functionAssertions.selectSingleValue(format(\"scale_qdigest(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)), QDIGEST_BIGINT, SqlVarbinary.class);\n+\n+        scaledQdigest = new QuantileDigest(wrappedBuffer(sqlVarbinary.getBytes()));\n+\n+        assertEquals(scaledQdigest.getHistogram(asList(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)),\n+                asList(new QuantileDigest.Bucket(0, Double.NaN),\n+                        new QuantileDigest.Bucket(0.5, 0),\n+                        new QuantileDigest.Bucket(0.5, 1),\n+                        new QuantileDigest.Bucket(0.5, 2),\n+                        new QuantileDigest.Bucket(0.5, 3),\n+                        new QuantileDigest.Bucket(0.5, 4),\n+                        new QuantileDigest.Bucket(0.5, 5),\n+                        new QuantileDigest.Bucket(0.5, 6),\n+                        new QuantileDigest.Bucket(0.5, 7),\n+                        new QuantileDigest.Bucket(0.5, 8),\n+                        new QuantileDigest.Bucket(0.5, 9)));\n+    }\n+\n+    private void addAll(QuantileDigest digest, long... values)", "originalCommit": "e4a1a295c121b22b60164c692e8ae2837bb16723", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTc2OQ==", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069769", "bodyText": "add expected regexp", "author": "caithagoras", "createdAt": "2020-04-27T18:57:49Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileBelowZero()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), -0.2)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test\n+    public void testValueAtQuantileBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 0.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                5L);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)", "originalCommit": "e4a1a295c121b22b60164c692e8ae2837bb16723", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2OTkxMw==", "url": "https://github.com/prestodb/presto/pull/14443#discussion_r416069913", "bodyText": "add expected regexp, to avoid future changes change the actual exception being thrown.", "author": "caithagoras", "createdAt": "2020-04-27T18:58:02Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.airlift.stats.QuantileDigest;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.type.SqlVarbinary;\n+import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.TypeParameter;\n+import com.facebook.presto.type.TypeRegistry;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.QuantileDigestParametricType.QDIGEST;\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestQuantileDigestFunctions\n+        extends AbstractTestFunctions\n+{\n+    private static final TypeRegistry TYPE_REGISTRY = new TypeRegistry();\n+    private static final Type QDIGEST_BIGINT = QDIGEST.createType(TYPE_REGISTRY, ImmutableList.of(TypeParameter.of(BIGINT)));\n+\n+    @Test\n+    public void testNullQuantileDigestGetValueAtQuantile()\n+    {\n+        functionAssertions.assertFunction(\"value_at_quantile(CAST(NULL AS qdigest(bigint)), 0.3)\", BIGINT, null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testGetValueAtQuantileOverOne()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(bigint)), 1.5)\", toHexString(qdigest)),\n+                BIGINT,\n+                null);\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)", "originalCommit": "e4a1a295c121b22b60164c692e8ae2837bb16723", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5723283a13afc6da8139b0710fb0d03e991d578", "url": "https://github.com/prestodb/presto/commit/d5723283a13afc6da8139b0710fb0d03e991d578", "message": "Fix invalid quantile to be a user error", "committedDate": "2020-04-27T20:16:42Z", "type": "forcePushed"}, {"oid": "64a6346f45f92406fbf7a6bbda04b3477cef1577", "url": "https://github.com/prestodb/presto/commit/64a6346f45f92406fbf7a6bbda04b3477cef1577", "message": "Add function scale_qdigest\n\nThis function scale all the counts of a qdigest by a given factor.\nOne example use case would be to add a decaying weight to daily summary values, which are then merged into a single digest.\nThe proposed scalar function signature is as follows\n\n  scale_qdigest(qdigest, w) -> qdigest\n\nCo-authored-by: Trong Nguyen <trongdn@fb.com>", "committedDate": "2020-04-29T19:29:55Z", "type": "commit"}, {"oid": "89a628ed73d6dab12c4048870413d0d5fd44baaf", "url": "https://github.com/prestodb/presto/commit/89a628ed73d6dab12c4048870413d0d5fd44baaf", "message": "Fix invalid quantile to be a user error", "committedDate": "2020-04-29T19:29:55Z", "type": "commit"}, {"oid": "89a628ed73d6dab12c4048870413d0d5fd44baaf", "url": "https://github.com/prestodb/presto/commit/89a628ed73d6dab12c4048870413d0d5fd44baaf", "message": "Fix invalid quantile to be a user error", "committedDate": "2020-04-29T19:29:55Z", "type": "forcePushed"}]}