{"pr_number": 14789, "pr_title": "Allow DictionaryBlock for MinMaxBy aggregation", "pr_createdAt": "2020-07-06T19:15:51Z", "pr_url": "https://github.com/prestodb/presto/pull/14789", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMzYzMw==", "url": "https://github.com/prestodb/presto/pull/14789#discussion_r450433633", "bodyText": "How is it possible that the block itself is null? Isn't that a bug?", "author": "arhimondr", "createdAt": "2020-07-06T19:26:17Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/builder/InMemoryHashAggregationBuilder.java", "diffHunk": "@@ -429,7 +430,10 @@ public void processPage(GroupByIdBlock groupIds, Page page)\n                 aggregation.addInput(groupIds, page);\n             }\n             else {\n-                aggregation.addIntermediate(groupIds, page.getBlock(intermediateChannel));\n+                Block block = page.getBlock(intermediateChannel);", "originalCommit": "6d983fb2b3841465d06beca0114496ea88255d12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "858021a1d85cb72d8d1e06af9224b1a6c9adfa8d", "url": "https://github.com/prestodb/presto/commit/858021a1d85cb72d8d1e06af9224b1a6c9adfa8d", "message": "Allow DictionaryBlock for MinMaxBy aggregation\n\nWhen a Page is written by multiple writers, Page is split using\ndictionary blocks. It is valid to support page with DicitonaryBlock\nduring deserialization for MinMaxBy aggregation.", "committedDate": "2020-07-08T22:22:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MTcyOQ==", "url": "https://github.com/prestodb/presto/pull/14789#discussion_r451951729", "bodyText": "Inline this variable", "author": "highker", "createdAt": "2020-07-09T04:06:12Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -575,6 +584,32 @@ public void testMaxUnknownLongArray()\n                 createArrayBigintBlock(asList(null, null, null)));\n     }\n \n+    @Test\n+    public void testLongAndBlockPositionValueStateSerialization()\n+    {\n+        Type bigintType = BIGINT;", "originalCommit": "858021a1d85cb72d8d1e06af9224b1a6c9adfa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MTkzOQ==", "url": "https://github.com/prestodb/presto/pull/14789#discussion_r451951939", "bodyText": "mapType(VARCHAR, BOOLEAN) -> mapType", "author": "highker", "createdAt": "2020-07-09T04:07:11Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -575,6 +584,32 @@ public void testMaxUnknownLongArray()\n                 createArrayBigintBlock(asList(null, null, null)));\n     }\n \n+    @Test\n+    public void testLongAndBlockPositionValueStateSerialization()\n+    {\n+        Type bigintType = BIGINT;\n+        Type mapType = mapType(VARCHAR, BOOLEAN);\n+        Map<String, Type> fieldMap = ImmutableMap.of(\"Key\", bigintType, \"Value\", mapType);\n+        AccumulatorStateFactory<LongAndBlockPositionValueState> factory = StateCompiler.generateStateFactory(LongAndBlockPositionValueState.class, fieldMap, new DynamicClassLoader(LongAndBlockPositionValueState.class.getClassLoader()));\n+        KeyAndBlockPositionValueStateSerializer<LongAndBlockPositionValueState> serializer = new LongAndBlockPositionStateSerializer(BIGINT, mapType(VARCHAR, BOOLEAN));", "originalCommit": "858021a1d85cb72d8d1e06af9224b1a6c9adfa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MjEzMQ==", "url": "https://github.com/prestodb/presto/pull/14789#discussion_r451952131", "bodyText": "Inline this variable", "author": "highker", "createdAt": "2020-07-09T04:08:00Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -575,6 +584,32 @@ public void testMaxUnknownLongArray()\n                 createArrayBigintBlock(asList(null, null, null)));\n     }\n \n+    @Test\n+    public void testLongAndBlockPositionValueStateSerialization()\n+    {\n+        Type bigintType = BIGINT;\n+        Type mapType = mapType(VARCHAR, BOOLEAN);\n+        Map<String, Type> fieldMap = ImmutableMap.of(\"Key\", bigintType, \"Value\", mapType);\n+        AccumulatorStateFactory<LongAndBlockPositionValueState> factory = StateCompiler.generateStateFactory(LongAndBlockPositionValueState.class, fieldMap, new DynamicClassLoader(LongAndBlockPositionValueState.class.getClassLoader()));\n+        KeyAndBlockPositionValueStateSerializer<LongAndBlockPositionValueState> serializer = new LongAndBlockPositionStateSerializer(BIGINT, mapType(VARCHAR, BOOLEAN));\n+        LongAndBlockPositionValueState singleState = factory.createSingleState();\n+        LongAndBlockPositionValueState deserializedState = factory.createSingleState();\n+        singleState.setFirst(2020);\n+        singleState.setFirstNull(false);\n+\n+        BlockBuilder builder = RowType.anonymous(ImmutableList.of(BOOLEAN, BOOLEAN, BIGINT, mapType))\n+                .createBlockBuilder(null, 1);\n+        serializer.serialize(singleState, builder);\n+\n+        Block rowBlock = builder.build();\n+        int[] positions = new int[]{0};", "originalCommit": "858021a1d85cb72d8d1e06af9224b1a6c9adfa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea211e92189886b5e7c04c2e0e408c2b97ebea12", "url": "https://github.com/prestodb/presto/commit/ea211e92189886b5e7c04c2e0e408c2b97ebea12", "message": "Allow DictionaryBlock for MinMaxBy aggregation\n\nWhen a Page is written by multiple writers, Page is split using\ndictionary blocks. It is valid to support page with DicitonaryBlock\nduring deserialization for MinMaxBy aggregation.", "committedDate": "2020-07-09T12:02:41Z", "type": "commit"}, {"oid": "ea211e92189886b5e7c04c2e0e408c2b97ebea12", "url": "https://github.com/prestodb/presto/commit/ea211e92189886b5e7c04c2e0e408c2b97ebea12", "message": "Allow DictionaryBlock for MinMaxBy aggregation\n\nWhen a Page is written by multiple writers, Page is split using\ndictionary blocks. It is valid to support page with DicitonaryBlock\nduring deserialization for MinMaxBy aggregation.", "committedDate": "2020-07-09T12:02:41Z", "type": "forcePushed"}]}