{"pr_number": 14608, "pr_title": "Create quantile_at_value function for QDigest type", "pr_createdAt": "2020-06-04T14:43:42Z", "pr_url": "https://github.com/prestodb/presto/pull/14608", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5OTY3NA==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435599674", "bodyText": "You don't need two extra functions, you can put them together to reuse the same qdigest.\nassertFunction( .. value 6 )\nassertFunction( .. value 20 )\nassertFunction( .. value -1 )", "author": "viczhang861", "createdAt": "2020-06-04T23:05:33Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -82,6 +92,16 @@ public void testQuantileAtValueBigint()\n                 1.0);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigintSmallerThanMin()", "originalCommit": "1afbff658014f8f13751bf7460bec9afbf1412df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMzM4Nw==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435603387", "bodyText": "We always use braces for if statement,  here is example of code style https://github.com/airlift/codestyle", "author": "viczhang861", "createdAt": "2020-06-04T23:17:57Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios\n+        if (digest.getCount() == 0) return 1.0;", "originalCommit": "1bbfec54ac21f35985ef89794e4200b2fa0daf69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435604664", "bodyText": "Could you explain what the non-empty scenario is ?", "author": "viczhang861", "createdAt": "2020-06-04T23:22:22Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios", "originalCommit": "1bbfec54ac21f35985ef89794e4200b2fa0daf69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NTA2NA==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435655064", "bodyText": "For non-empty scenarios, suppose there are 100 values with 40 of them smaller than value X, then the quantile number returned is 0.4\nI think maybe it is better to set empty scenario to return 0.0 instead of 1.0? because for non-empty scenario, if no values in the digest is smaller than X, it will return 0.0", "author": "pguofb", "createdAt": "2020-06-05T02:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NjIxNg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435996216", "bodyText": "Yes, return 0 for empty qdigest makes more sense.\nCould you combine to a single commit for better readability in commit history?", "author": "viczhang861", "createdAt": "2020-06-05T15:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA=="}], "type": "inlineReview"}, {"oid": "8f4a02c850869ba8cd1b19e74890763783c90d48", "url": "https://github.com/prestodb/presto/commit/8f4a02c850869ba8cd1b19e74890763783c90d48", "message": "adjust function description, fix empty digest behavior, and merge unit tests in one test function.", "committedDate": "2020-06-05T02:35:39Z", "type": "forcePushed"}, {"oid": "5dcc028179581ea706595b2ce53a867a133ce793", "url": "https://github.com/prestodb/presto/commit/5dcc028179581ea706595b2ce53a867a133ce793", "message": "add quantile_at_value function and unit tests.", "committedDate": "2020-06-05T18:06:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNjExMg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436106112", "bodyText": "When no value in the non-empty qdigest is larger than the input value,  we actually return 1. Thus, I recommend to remove this comment and just document the behavior in qdigest.rst file is enough. Zero is chosen since it is more like empty.\n\n\nThrow an error for empty qdigest is also not ideal,  since value_at_quantile function doesn't throw error for empty qdigest.", "author": "viczhang861", "createdAt": "2020-06-05T18:52:59Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,36 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // to be consistent with non-empty scenarios. When no value in the digest is smaller than the input, always return 0.0", "originalCommit": "5dcc028179581ea706595b2ce53a867a133ce793", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819", "url": "https://github.com/prestodb/presto/commit/4360e42e3413a08a9bcd1a5d78632ac718cb1819", "message": "Add quantile_at_value function", "committedDate": "2020-06-05T19:59:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436145158", "bodyText": "I see some surprising results here when adding additional test cases for doubles:\n\nDouble.NaN as the input value returns 1.0\n(Edit: Double.MIN_VALUE is fine, I forgot this was just slightly greater than 0)", "author": "tdcmeehan", "createdAt": "2020-06-05T20:19:12Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "originalCommit": "4360e42e3413a08a9bcd1a5d78632ac718cb1819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1MTA0Mw==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436151043", "bodyText": "Yes, this is expected. The Double type is not directly interfaced with the qdigest, but encoded in a special way. If you try to test the already existing value_at_quantile function, e.g., something like\n@Test\n    public void testValueAtQuantileDouble()\n    {\n        QuantileDigest qdigest = new QuantileDigest(1);\n        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(double)), 0.5)\", toHexString(qdigest)),\n                DOUBLE,\n                5L);\n    }\n\nyou will find that the output is 2.5E-323, not 5.0", "author": "pguofb", "createdAt": "2020-06-05T20:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1NDA2Nw==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436154067", "bodyText": "Suppose you were to wrap each of those integer literals into doubleToSortableLong, as the QDigest aggregation function does, you'll still see this result.", "author": "tdcmeehan", "createdAt": "2020-06-05T20:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTMyMg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436159322", "bodyText": "I tried this example:\n@Test\n    public void testQuantileAtValueDouble()\n    {\n        QuantileDigest qdigest = new QuantileDigest(1);\n        addAll(qdigest, doubleToSortableLong(0.0),doubleToSortableLong(1),doubleToSortableLong(2),doubleToSortableLong(3),doubleToSortableLong(4),doubleToSortableLong(5),doubleToSortableLong(6),doubleToSortableLong(7),doubleToSortableLong(8),doubleToSortableLong(9));\n        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(double)), 6)\", toHexString(qdigest)),\n                DOUBLE,\n                0.6);\n    }\n\nAnd it gives me the right output 0.6 as expected.", "author": "pguofb", "createdAt": "2020-06-05T20:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDc4Mg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436160782", "bodyText": "Yes, that's expected.  However, if you try to replace 0.6 with nan() in the assert above, it will return 1.0--this is strange because it implies NaN is greater than all of the values in the digest.", "author": "tdcmeehan", "createdAt": "2020-06-05T20:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDEwMg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436164102", "bodyText": "Ok, I see you point. I'm not quite familiar with the internals of QDigest data structure, do you have any suggestion on what is the min/max range for it? I have a rough guess of [-2^63,  2^63 - 1] ?", "author": "pguofb", "createdAt": "2020-06-05T21:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTA3Mg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436165072", "bodyText": "There is a getMax and getMin on the data structure which will tell you what is the max/min for the specific one you are using.", "author": "tdcmeehan", "createdAt": "2020-06-05T21:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NDEyMQ==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436194121", "bodyText": "Added checking on current min/max range of the QDigest, and will return null when the input value is beyond the range. And also added the nan() test case in the unit test, and verified it is now returning null.", "author": "pguofb", "createdAt": "2020-06-05T22:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}], "type": "inlineReview"}, {"oid": "c573acab680c607c119c639e1c02087443c2d686", "url": "https://github.com/prestodb/presto/commit/c573acab680c607c119c639e1c02087443c2d686", "message": "Add quantile_at_value function", "committedDate": "2020-06-05T22:30:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0ODQyMA==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436948420", "bodyText": "I think this should be treated like a value outside of the range of the qdigest (null), because really this is just a special case of the below check.  Actually, we could just remove this first check, because when it's empty the digest's max value is Long.MIN_VALUE and its min value is Long.MAX_VALUE.", "author": "tdcmeehan", "createdAt": "2020-06-08T19:25:59Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +68,41 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        if (digest.getCount() == 0) {", "originalCommit": "c573acab680c607c119c639e1c02087443c2d686", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NTAxNg==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436975016", "bodyText": "Sure, I agree returning null for empty digest, and merged into one if-block check.", "author": "pguofb", "createdAt": "2020-06-08T20:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0ODQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MDMzOA==", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436950338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    QuantileDigest qdigest = new QuantileDigest(1);\n          \n          \n            \n                    addAll(qdigest, doubleToSortableLong(0), doubleToSortableLong(1), doubleToSortableLong(2),\n          \n          \n            \n                            doubleToSortableLong(3), doubleToSortableLong(4), doubleToSortableLong(5),\n          \n          \n            \n                            doubleToSortableLong(6), doubleToSortableLong(7), doubleToSortableLong(8),\n          \n          \n            \n                            doubleToSortableLong(9));\n          \n          \n            \n                    QuantileDigest qdigest = new QuantileDigest(1);\n          \n          \n            \n                            ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).stream()\n          \n          \n            \n                                    .mapToLong(FloatingPointBitsConverterUtil::doubleToSortableLong)\n          \n          \n            \n                                    .forEach(qdigest::add);", "author": "tdcmeehan", "createdAt": "2020-06-08T19:29:29Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +73,53 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)\", toHexString(qdigest)),\n+                DOUBLE,\n+                null);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)\", toHexString(qdigest)),\n+                DOUBLE,\n+                0.6);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)),\n+                DOUBLE,\n+                null);\n+    }\n+\n+    @Test\n+    public void testQuantileAtValueDouble()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, doubleToSortableLong(0), doubleToSortableLong(1), doubleToSortableLong(2),\n+                doubleToSortableLong(3), doubleToSortableLong(4), doubleToSortableLong(5),\n+                doubleToSortableLong(6), doubleToSortableLong(7), doubleToSortableLong(8),\n+                doubleToSortableLong(9));", "originalCommit": "c573acab680c607c119c639e1c02087443c2d686", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "url": "https://github.com/prestodb/presto/commit/4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "message": "Add quantile_at_value function", "committedDate": "2020-06-08T20:15:09Z", "type": "commit"}, {"oid": "4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "url": "https://github.com/prestodb/presto/commit/4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "message": "Add quantile_at_value function", "committedDate": "2020-06-08T20:15:09Z", "type": "forcePushed"}]}