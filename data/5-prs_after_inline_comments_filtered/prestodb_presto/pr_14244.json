{"pr_number": 14244, "pr_title": "Add ExtendedFileSystem", "pr_createdAt": "2020-03-13T05:15:26Z", "pr_url": "https://github.com/prestodb/presto/pull/14244", "timeline": [{"oid": "41f442e17ccfdb4d2f642abd67b99df42505bfc1", "url": "https://github.com/prestodb/presto/commit/41f442e17ccfdb4d2f642abd67b99df42505bfc1", "message": "Add BridgingFileSystem", "committedDate": "2020-03-13T17:25:18Z", "type": "forcePushed"}, {"oid": "4b1eafe5a44d31ca5b8c9d52e83b68ef92b0a2ae", "url": "https://github.com/prestodb/presto/commit/4b1eafe5a44d31ca5b8c9d52e83b68ef92b0a2ae", "message": "Add BridgingFileSystem", "committedDate": "2020-03-13T19:57:30Z", "type": "forcePushed"}, {"oid": "1185b6920231fdf168a3de45dc9c6190f464d665", "url": "https://github.com/prestodb/presto/commit/1185b6920231fdf168a3de45dc9c6190f464d665", "message": "Add BridgingFileSystem", "committedDate": "2020-03-13T21:31:08Z", "type": "forcePushed"}, {"oid": "fcabd24a2cd0195d089e3dcd46521c51066a07dd", "url": "https://github.com/prestodb/presto/commit/fcabd24a2cd0195d089e3dcd46521c51066a07dd", "message": "Add BridgingFileSystem", "committedDate": "2020-03-13T22:43:53Z", "type": "forcePushed"}, {"oid": "5630b67c4f9ea79bd176be6208d4ea4cb0c32d0e", "url": "https://github.com/prestodb/presto/commit/5630b67c4f9ea79bd176be6208d4ea4cb0c32d0e", "message": "Add BridgingFileSystem", "committedDate": "2020-03-14T02:10:56Z", "type": "forcePushed"}, {"oid": "1e481b82ea3f8cce5ba9c1f7983c2fa055e9ea25", "url": "https://github.com/prestodb/presto/commit/1e481b82ea3f8cce5ba9c1f7983c2fa055e9ea25", "message": "Add BridgingFileSystem", "committedDate": "2020-03-14T02:35:01Z", "type": "forcePushed"}, {"oid": "e6c8531ff54e9ae55384ece949f1fae593136786", "url": "https://github.com/prestodb/presto/commit/e6c8531ff54e9ae55384ece949f1fae593136786", "message": "Random changes", "committedDate": "2020-03-17T01:04:45Z", "type": "forcePushed"}, {"oid": "9b02e2a018de3a099c1a7bd1d1cf21c5f84647f4", "url": "https://github.com/prestodb/presto/commit/9b02e2a018de3a099c1a7bd1d1cf21c5f84647f4", "message": "Random changes", "committedDate": "2020-03-18T21:31:49Z", "type": "forcePushed"}, {"oid": "110fed282843e93ceca48f48f5a69f1adfcc7045", "url": "https://github.com/prestodb/presto/commit/110fed282843e93ceca48f48f5a69f1adfcc7045", "message": "Random changes", "committedDate": "2020-03-18T21:52:16Z", "type": "forcePushed"}, {"oid": "00f6f0d35c3312cf6df858ff7d3b58b5a1daa490", "url": "https://github.com/prestodb/presto/commit/00f6f0d35c3312cf6df858ff7d3b58b5a1daa490", "message": "Random changes", "committedDate": "2020-03-18T21:55:27Z", "type": "forcePushed"}, {"oid": "46836dffb291be50485ac52e8e2be54dd8160fc1", "url": "https://github.com/prestodb/presto/commit/46836dffb291be50485ac52e8e2be54dd8160fc1", "message": "Random changes", "committedDate": "2020-03-18T23:19:55Z", "type": "forcePushed"}, {"oid": "72ea7592ad917a24799c527b4fb0a0b1c86954d8", "url": "https://github.com/prestodb/presto/commit/72ea7592ad917a24799c527b4fb0a0b1c86954d8", "message": "Random changes", "committedDate": "2020-03-20T18:31:41Z", "type": "forcePushed"}, {"oid": "07968dad4c4cc4fe0acff90b871006f979696b41", "url": "https://github.com/prestodb/presto/commit/07968dad4c4cc4fe0acff90b871006f979696b41", "message": "Random changes", "committedDate": "2020-03-24T02:44:48Z", "type": "forcePushed"}, {"oid": "f17360caac1a9e775c53fa47b8713a06c5e90a00", "url": "https://github.com/prestodb/presto/commit/f17360caac1a9e775c53fa47b8713a06c5e90a00", "message": "Random changes", "committedDate": "2020-03-24T05:17:03Z", "type": "forcePushed"}, {"oid": "3e46ce349a9b19e2eea0959dca5d3954e715ea56", "url": "https://github.com/prestodb/presto/commit/3e46ce349a9b19e2eea0959dca5d3954e715ea56", "message": "Random changes", "committedDate": "2020-03-24T05:28:13Z", "type": "forcePushed"}, {"oid": "8dab29e45be27d18f58333acf4578711496dc49b", "url": "https://github.com/prestodb/presto/commit/8dab29e45be27d18f58333acf4578711496dc49b", "message": "Refactor DirectoryLister", "committedDate": "2020-03-26T20:29:20Z", "type": "forcePushed"}, {"oid": "e7614aed05415fd7d902a09f52aaa3963669aa83", "url": "https://github.com/prestodb/presto/commit/e7614aed05415fd7d902a09f52aaa3963669aa83", "message": "Refactor DirectoryLister", "committedDate": "2020-03-27T15:19:52Z", "type": "forcePushed"}, {"oid": "0c41bc933096025b61cf6a95b10ef38fc20a5c48", "url": "https://github.com/prestodb/presto/commit/0c41bc933096025b61cf6a95b10ef38fc20a5c48", "message": "Refactor DirectoryLister", "committedDate": "2020-03-28T02:44:04Z", "type": "forcePushed"}, {"oid": "87f9307c5af52e2313b4658e3cdac6859794aad3", "url": "https://github.com/prestodb/presto/commit/87f9307c5af52e2313b4658e3cdac6859794aad3", "message": "Refactor DirectoryLister", "committedDate": "2020-03-29T04:32:12Z", "type": "forcePushed"}, {"oid": "56c9872a0238521238627fb628dce6e0e5f44425", "url": "https://github.com/prestodb/presto/commit/56c9872a0238521238627fb628dce6e0e5f44425", "message": "Refactor DirectoryLister", "committedDate": "2020-03-29T05:57:01Z", "type": "forcePushed"}, {"oid": "7be1a67e51f904980099437ec9b9c698fea6eac0", "url": "https://github.com/prestodb/presto/commit/7be1a67e51f904980099437ec9b9c698fea6eac0", "message": "Refactor DirectoryLister", "committedDate": "2020-03-29T06:50:57Z", "type": "forcePushed"}, {"oid": "539f969ddcdc26239a4d7bc9df42ebdabb33e93d", "url": "https://github.com/prestodb/presto/commit/539f969ddcdc26239a4d7bc9df42ebdabb33e93d", "message": "Refactor DirectoryLister", "committedDate": "2020-03-30T02:27:02Z", "type": "forcePushed"}, {"oid": "ee0298a44a7456763b22c80a0fa3f6434411074c", "url": "https://github.com/prestodb/presto/commit/ee0298a44a7456763b22c80a0fa3f6434411074c", "message": "Refactor DirectoryLister", "committedDate": "2020-03-30T02:53:45Z", "type": "forcePushed"}, {"oid": "c1990aa2428f2b5d3031a7b92a32ce8f77ab8601", "url": "https://github.com/prestodb/presto/commit/c1990aa2428f2b5d3031a7b92a32ce8f77ab8601", "message": "Refactor DirectoryLister", "committedDate": "2020-03-30T03:53:06Z", "type": "forcePushed"}, {"oid": "ea4fd5c5e051428424d977485436c7105b677e88", "url": "https://github.com/prestodb/presto/commit/ea4fd5c5e051428424d977485436c7105b677e88", "message": "Refactor DirectoryLister", "committedDate": "2020-03-30T03:58:55Z", "type": "forcePushed"}, {"oid": "514e88110ba485608ce93c36613087e6bea41ae1", "url": "https://github.com/prestodb/presto/commit/514e88110ba485608ce93c36613087e6bea41ae1", "message": "Add ExtendedFileSystem\n\nAdding ExtendedFileSystem support.\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem operations have been removed.\nA necessary refactoring was required hence few classess have been moved to presto-hive-common.\n\nRandom changes\n\nRefactor DirectoryLister", "committedDate": "2020-03-30T04:17:26Z", "type": "forcePushed"}, {"oid": "417b3c3a2dd02421de40c5649a39ac2e18eb5d79", "url": "https://github.com/prestodb/presto/commit/417b3c3a2dd02421de40c5649a39ac2e18eb5d79", "message": "Add ExtendedFileSystem\n\nAdding ExtendedFileSystem support.\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem operations have been removed.\nA necessary refactoring was required hence few classess have been moved to presto-hive-common.", "committedDate": "2020-03-30T04:19:06Z", "type": "forcePushed"}, {"oid": "8b3fa0252fa791ba9ee445e443fb6df337a61d38", "url": "https://github.com/prestodb/presto/commit/8b3fa0252fa791ba9ee445e443fb6df337a61d38", "message": "Add ExtendedFileSystem\n\nAdding ExtendedFileSystem support.\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem operations have been removed.\nA necessary refactoring was required hence few classes have been moved to presto-hive-common.", "committedDate": "2020-03-30T04:34:59Z", "type": "forcePushed"}, {"oid": "7c26e6882ef4bea720b4263ad7adb54ae175096a", "url": "https://github.com/prestodb/presto/commit/7c26e6882ef4bea720b4263ad7adb54ae175096a", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem operations have been removed.\nA necessary refactoring was required hence few classes have been moved to presto-hive-common.", "committedDate": "2020-03-30T04:45:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1ODY3MA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400358670", "bodyText": "Maybe I'm missing something, but could you explain the motivation for this class and the introduction of reflection?", "author": "shixuan-fan", "createdAt": "2020-03-30T17:15:50Z", "path": "presto-hive-common/src/main/java/org/apache/hadoop/fs/HadoopExtendedFileSystemCache.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+public class HadoopExtendedFileSystemCache", "originalCommit": "7c26e6882ef4bea720b4263ad7adb54ae175096a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3ODg5MA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400378890", "bodyText": "These are created to use our own PrestoExtendedFileSystemWrapper which is based on ExtendedFileSystem. Have a look at HadoopFileSystemCache.", "author": "jainxrohit", "createdAt": "2020-03-30T17:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1ODY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MTU5Ng==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400361596", "bodyText": "The TODO here is for this PR right? :D", "author": "shixuan-fan", "createdAt": "2020-03-30T17:20:11Z", "path": "presto-hive-common/src/main/java/org/apache/hadoop/fs/PrestoExtendedFileSystemWrapper.java", "diffHunk": "@@ -0,0 +1,642 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.HiveFileInfo;\n+import com.facebook.presto.hive.NamenodeStats;\n+import com.facebook.presto.hive.NestedDirectoryPolicy;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.DirectoryLister;\n+import com.facebook.presto.hive.util.HadoopFileInfoIterator;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.permission.AclEntry;\n+import org.apache.hadoop.fs.permission.AclStatus;\n+import org.apache.hadoop.fs.permission.FsAction;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.util.Progressable;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.EnumSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PrestoExtendedFileSystemWrapper\n+        extends ExtendedFileSystem\n+{\n+    private FileSystem fs;\n+    private String swapScheme;\n+\n+    public PrestoExtendedFileSystemWrapper(FileSystem fs)\n+    {\n+        this.fs = fs;\n+        this.statistics = fs.statistics;\n+    }\n+\n+    @Override\n+    public void initialize(URI name, Configuration conf)\n+            throws IOException\n+    {\n+        super.initialize(name, conf);\n+        // this is less than ideal, but existing filesystems sometimes neglect\n+        // to initialize the embedded filesystem\n+        if (fs.getConf() == null) {\n+            fs.initialize(name, conf);\n+        }\n+        String scheme = name.getScheme();\n+        if (!scheme.equals(fs.getUri().getScheme())) {\n+            swapScheme = scheme;\n+        }\n+    }\n+\n+    @Override\n+    public URI getUri()\n+    {\n+        return fs.getUri();\n+    }\n+\n+    @Override\n+    protected URI getCanonicalUri()\n+    {\n+        return fs.getCanonicalUri();\n+    }\n+\n+    @Override\n+    protected URI canonicalizeUri(URI uri)\n+    {\n+        return fs.canonicalizeUri(uri);\n+    }\n+\n+    @Override\n+    public Path makeQualified(Path path)\n+    {\n+        Path fqPath = fs.makeQualified(path);\n+        // swap in our scheme if the filtered fs is using a different scheme\n+        if (swapScheme != null) {\n+            try {\n+                // NOTE: should deal with authority, but too much other stuff is broken\n+                fqPath = new Path(new URI(swapScheme, fqPath.toUri().getSchemeSpecificPart(), null));\n+            }\n+            catch (URISyntaxException e) {\n+                throw new IllegalArgumentException(e);\n+            }\n+        }\n+        return fqPath;\n+    }\n+\n+    @Override\n+    protected void checkPath(Path path)\n+    {\n+        fs.checkPath(path);\n+    }\n+\n+    @Override\n+    public BlockLocation[] getFileBlockLocations(FileStatus file, long start,\n+            long len)\n+            throws IOException\n+    {\n+        return fs.getFileBlockLocations(file, start, len);\n+    }\n+\n+    @Override\n+    public Path resolvePath(final Path p)\n+            throws IOException\n+    {\n+        return fs.resolvePath(p);\n+    }\n+\n+    @Override\n+    public FSDataInputStream open(Path f, int bufferSize)\n+            throws IOException\n+    {\n+        return fs.open(f, bufferSize);\n+    }\n+\n+    @Override\n+    public FSDataOutputStream append(Path f, int bufferSize,\n+            Progressable progress)\n+            throws IOException\n+    {\n+        return fs.append(f, bufferSize, progress);\n+    }\n+\n+    @Override\n+    public void concat(Path f, Path[] psrcs)\n+            throws IOException\n+    {\n+        fs.concat(f, psrcs);\n+    }\n+\n+    @Override\n+    public FSDataOutputStream create(Path f, FsPermission permission,\n+            boolean overwrite, int bufferSize, short replication, long blockSize,\n+            Progressable progress)\n+            throws IOException\n+    {\n+        return fs.create(f, permission,\n+                overwrite, bufferSize, replication, blockSize, progress);\n+    }\n+\n+    @Override\n+    public FSDataOutputStream create(Path f,\n+            FsPermission permission,\n+            EnumSet<CreateFlag> flags,\n+            int bufferSize,\n+            short replication,\n+            long blockSize,\n+            Progressable progress,\n+            Options.ChecksumOpt checksumOpt)\n+            throws IOException\n+    {\n+        return fs.create(f, permission,\n+                flags, bufferSize, replication, blockSize, progress, checksumOpt);\n+    }\n+\n+    @Override\n+    @Deprecated\n+    public FSDataOutputStream createNonRecursive(Path f, FsPermission permission,\n+            EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize,\n+            Progressable progress)\n+            throws IOException\n+    {\n+        return fs.createNonRecursive(f, permission, flags, bufferSize, replication, blockSize, progress);\n+    }\n+\n+    @Override\n+    public boolean setReplication(Path src, short replication)\n+            throws IOException\n+    {\n+        return fs.setReplication(src, replication);\n+    }\n+\n+    @Override\n+    public boolean rename(Path src, Path dst)\n+            throws IOException\n+    {\n+        return fs.rename(src, dst);\n+    }\n+\n+    @Override\n+    protected void rename(Path src, Path dst, Options.Rename... options)\n+            throws IOException\n+    {\n+        fs.rename(src, dst, options);\n+    }\n+\n+    @Override\n+    public boolean truncate(Path f, final long newLength)\n+            throws IOException\n+    {\n+        return fs.truncate(f, newLength);\n+    }\n+\n+    @Override\n+    public boolean delete(Path f, boolean recursive)\n+            throws IOException\n+    {\n+        return fs.delete(f, recursive);\n+    }\n+\n+    @Override\n+    public FileStatus[] listStatus(Path f)\n+            throws IOException\n+    {\n+        return fs.listStatus(f);\n+    }\n+\n+    @Override\n+    public RemoteIterator<Path> listCorruptFileBlocks(Path path)\n+            throws IOException\n+    {\n+        return fs.listCorruptFileBlocks(path);\n+    }\n+\n+    @Override\n+    public RemoteIterator<LocatedFileStatus> listLocatedStatus(Path f)\n+            throws IOException\n+    {\n+        return fs.listLocatedStatus(f);\n+    }\n+\n+    @Override\n+    public RemoteIterator<FileStatus> listStatusIterator(Path f)\n+            throws IOException\n+    {\n+        return fs.listStatusIterator(f);\n+    }\n+\n+    @Override\n+    public Path getHomeDirectory()\n+    {\n+        return fs.getHomeDirectory();\n+    }\n+\n+    @Override\n+    public void setWorkingDirectory(Path newDir)\n+    {\n+        fs.setWorkingDirectory(newDir);\n+    }\n+\n+    @Override\n+    public Path getWorkingDirectory()\n+    {\n+        return fs.getWorkingDirectory();\n+    }\n+\n+    @Override\n+    protected Path getInitialWorkingDirectory()\n+    {\n+        return fs.getInitialWorkingDirectory();\n+    }\n+\n+    @Override\n+    public FsStatus getStatus(Path p)\n+            throws IOException\n+    {\n+        return fs.getStatus(p);\n+    }\n+\n+    @Override\n+    public boolean mkdirs(Path f, FsPermission permission)\n+            throws IOException\n+    {\n+        return fs.mkdirs(f, permission);\n+    }\n+\n+    @Override\n+    public void copyFromLocalFile(boolean delSrc, Path src, Path dst)\n+            throws IOException\n+    {\n+        fs.copyFromLocalFile(delSrc, src, dst);\n+    }\n+\n+    @Override\n+    public void copyFromLocalFile(boolean delSrc, boolean overwrite,\n+            Path[] srcs, Path dst)\n+            throws IOException\n+    {\n+        fs.copyFromLocalFile(delSrc, overwrite, srcs, dst);\n+    }\n+\n+    @Override\n+    public void copyFromLocalFile(boolean delSrc, boolean overwrite,\n+            Path src, Path dst)\n+            throws IOException\n+    {\n+        fs.copyFromLocalFile(delSrc, overwrite, src, dst);\n+    }\n+\n+    @Override\n+    public void copyToLocalFile(boolean delSrc, Path src, Path dst)\n+            throws IOException\n+    {\n+        fs.copyToLocalFile(delSrc, src, dst);\n+    }\n+\n+    @Override\n+    public Path startLocalOutput(Path fsOutputFile, Path tmpLocalFile)\n+            throws IOException\n+    {\n+        return fs.startLocalOutput(fsOutputFile, tmpLocalFile);\n+    }\n+\n+    @Override\n+    public void completeLocalOutput(Path fsOutputFile, Path tmpLocalFile)\n+            throws IOException\n+    {\n+        fs.completeLocalOutput(fsOutputFile, tmpLocalFile);\n+    }\n+\n+    @Override\n+    public long getUsed()\n+            throws IOException\n+    {\n+        return fs.getUsed();\n+    }\n+\n+    @Override\n+    public long getDefaultBlockSize()\n+    {\n+        return fs.getDefaultBlockSize();\n+    }\n+\n+    @Override\n+    public short getDefaultReplication()\n+    {\n+        return fs.getDefaultReplication();\n+    }\n+\n+    @Override\n+    public FsServerDefaults getServerDefaults()\n+            throws IOException\n+    {\n+        return fs.getServerDefaults();\n+    }\n+\n+    // path variants delegate to underlying filesystem\n+    @Override\n+    public long getDefaultBlockSize(Path f)\n+    {\n+        return fs.getDefaultBlockSize(f);\n+    }\n+\n+    @Override\n+    public short getDefaultReplication(Path f)\n+    {\n+        return fs.getDefaultReplication(f);\n+    }\n+\n+    @Override\n+    public FsServerDefaults getServerDefaults(Path f)\n+            throws IOException\n+    {\n+        return fs.getServerDefaults(f);\n+    }\n+\n+    @Override\n+    public FileStatus getFileStatus(Path f)\n+            throws IOException\n+    {\n+        return fs.getFileStatus(f);\n+    }\n+\n+    @Override\n+    public void access(Path path, FsAction mode)\n+            throws IOException\n+    {\n+        fs.access(path, mode);\n+    }\n+\n+    public void createSymlink(final Path target, final Path link,\n+            final boolean createParent)\n+            throws IOException\n+    {\n+        fs.createSymlink(target, link, createParent);\n+    }\n+\n+    public FileStatus getFileLinkStatus(final Path f)\n+            throws IOException\n+    {\n+        return fs.getFileLinkStatus(f);\n+    }\n+\n+    public boolean supportsSymlinks()\n+    {\n+        return fs.supportsSymlinks();\n+    }\n+\n+    public Path getLinkTarget(Path f)\n+            throws IOException\n+    {\n+        return fs.getLinkTarget(f);\n+    }\n+\n+    protected Path resolveLink(Path f)\n+            throws IOException\n+    {\n+        return fs.resolveLink(f);\n+    }\n+\n+    @Override\n+    public FileChecksum getFileChecksum(Path f)\n+            throws IOException\n+    {\n+        return fs.getFileChecksum(f);\n+    }\n+\n+    @Override\n+    public FileChecksum getFileChecksum(Path f, long length)\n+            throws IOException\n+    {\n+        return fs.getFileChecksum(f, length);\n+    }\n+\n+    @Override\n+    public void setVerifyChecksum(boolean verifyChecksum)\n+    {\n+        fs.setVerifyChecksum(verifyChecksum);\n+    }\n+\n+    @Override\n+    public void setWriteChecksum(boolean writeChecksum)\n+    {\n+        fs.setWriteChecksum(writeChecksum);\n+    }\n+\n+    @Override\n+    public Configuration getConf()\n+    {\n+        return fs.getConf();\n+    }\n+\n+    @Override\n+    public void close()\n+            throws IOException\n+    {\n+        super.close();\n+        fs.close();\n+    }\n+\n+    @Override\n+    public void setOwner(Path path, String user, String group)\n+            throws IOException\n+    {\n+        fs.setOwner(path, user, group);\n+    }\n+\n+    @Override\n+    public void setTimes(Path p, long mtime, long atime)\n+            throws IOException\n+    {\n+        fs.setTimes(p, mtime, atime);\n+    }\n+\n+    @Override\n+    public void setPermission(Path p, FsPermission permission)\n+            throws IOException\n+    {\n+        fs.setPermission(p, permission);\n+    }\n+\n+    @Override\n+    protected FSDataOutputStream primitiveCreate(Path f,\n+            FsPermission absolutePermission, EnumSet<CreateFlag> flag,\n+            int bufferSize, short replication, long blockSize,\n+            Progressable progress, Options.ChecksumOpt checksumOpt)\n+            throws IOException\n+    {\n+        return fs.primitiveCreate(f, absolutePermission, flag,\n+                bufferSize, replication, blockSize, progress, checksumOpt);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"deprecation\")\n+    protected boolean primitiveMkdir(Path f, FsPermission abdolutePermission)\n+            throws IOException\n+    {\n+        return fs.primitiveMkdir(f, abdolutePermission);\n+    }\n+\n+    @Override // FileSystem\n+    public FileSystem[] getChildFileSystems()\n+    {\n+        return new FileSystem[] {fs};\n+    }\n+\n+    @Override // FileSystem\n+    public Path createSnapshot(Path path, String snapshotName)\n+            throws IOException\n+    {\n+        return fs.createSnapshot(path, snapshotName);\n+    }\n+\n+    @Override // FileSystem\n+    public void renameSnapshot(Path path, String snapshotOldName,\n+            String snapshotNewName)\n+            throws IOException\n+    {\n+        fs.renameSnapshot(path, snapshotOldName, snapshotNewName);\n+    }\n+\n+    @Override // FileSystem\n+    public void deleteSnapshot(Path path, String snapshotName)\n+            throws IOException\n+    {\n+        fs.deleteSnapshot(path, snapshotName);\n+    }\n+\n+    @Override\n+    public void modifyAclEntries(Path path, List<AclEntry> aclSpec)\n+            throws IOException\n+    {\n+        fs.modifyAclEntries(path, aclSpec);\n+    }\n+\n+    @Override\n+    public void removeAclEntries(Path path, List<AclEntry> aclSpec)\n+            throws IOException\n+    {\n+        fs.removeAclEntries(path, aclSpec);\n+    }\n+\n+    @Override\n+    public void removeDefaultAcl(Path path)\n+            throws IOException\n+    {\n+        fs.removeDefaultAcl(path);\n+    }\n+\n+    @Override\n+    public void removeAcl(Path path)\n+            throws IOException\n+    {\n+        fs.removeAcl(path);\n+    }\n+\n+    @Override\n+    public void setAcl(Path path, List<AclEntry> aclSpec)\n+            throws IOException\n+    {\n+        fs.setAcl(path, aclSpec);\n+    }\n+\n+    @Override\n+    public AclStatus getAclStatus(Path path)\n+            throws IOException\n+    {\n+        return fs.getAclStatus(path);\n+    }\n+\n+    @Override\n+    public void setXAttr(Path path, String name, byte[] value)\n+            throws IOException\n+    {\n+        fs.setXAttr(path, name, value);\n+    }\n+\n+    @Override\n+    public void setXAttr(Path path, String name, byte[] value,\n+            EnumSet<XAttrSetFlag> flag)\n+            throws IOException\n+    {\n+        fs.setXAttr(path, name, value, flag);\n+    }\n+\n+    @Override\n+    public byte[] getXAttr(Path path, String name)\n+            throws IOException\n+    {\n+        return fs.getXAttr(path, name);\n+    }\n+\n+    @Override\n+    public Map<String, byte[]> getXAttrs(Path path)\n+            throws IOException\n+    {\n+        return fs.getXAttrs(path);\n+    }\n+\n+    @Override\n+    public Map<String, byte[]> getXAttrs(Path path, List<String> names)\n+            throws IOException\n+    {\n+        return fs.getXAttrs(path, names);\n+    }\n+\n+    @Override\n+    public List<String> listXAttrs(Path path)\n+            throws IOException\n+    {\n+        return fs.listXAttrs(path);\n+    }\n+\n+    @Override\n+    public void removeXAttr(Path path, String name)\n+            throws IOException\n+    {\n+        fs.removeXAttr(path, name);\n+    }\n+\n+    @Override\n+    public RemoteIterator<LocatedFileStatus> listDirectory(Path path)\n+    {\n+        //TODO: Fill it", "originalCommit": "7c26e6882ef4bea720b4263ad7adb54ae175096a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7573554af88fa9f50444bb7bcc2a8bd5a09b8825", "url": "https://github.com/prestodb/presto/commit/7573554af88fa9f50444bb7bcc2a8bd5a09b8825", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem operations have been removed.\nA necessary refactoring was required hence few classes have been moved to presto-hive-common.", "committedDate": "2020-03-30T18:15:25Z", "type": "forcePushed"}, {"oid": "72912d8dace59edf6beae7cdc4c8f62bcf059120", "url": "https://github.com/prestodb/presto/commit/72912d8dace59edf6beae7cdc4c8f62bcf059120", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem operations have been removed.\nA necessary refactoring was required hence few classes have been moved to presto-hive-common.", "committedDate": "2020-03-30T18:19:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MDIzMw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r399970233", "bodyText": "Don't we need to do the caching here?", "author": "highker", "createdAt": "2020-03-30T07:10:36Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CachingFileSystem.java", "diffHunk": "@@ -498,4 +508,37 @@ public boolean isCacheValidationEnabled()\n     {\n         return cacheValidationEnabled;\n     }\n+\n+    @Override\n+    public RemoteIterator<LocatedFileStatus> listDirectory(Path path)\n+            throws IOException\n+    {\n+        return dataTier.listDirectory(path);\n+    }\n+\n+    @Override\n+    public RemoteIterator<HiveFileInfo> listFiles(Path path)\n+            throws IOException\n+    {\n+        return dataTier.listFiles(path);\n+    }\n+\n+    @Override\n+    public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception\n+    {\n+        return dataTier.openFile(path, hiveFileContext);", "originalCommit": "7c26e6882ef4bea720b4263ad7adb54ae175096a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMDAwNQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400520005", "bodyText": "Good catch. Will fix it.", "author": "jainxrohit", "createdAt": "2020-03-30T21:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MDIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMjMxOA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400422318", "bodyText": "This is a weird interface; we don't need DirectoryLister as a param. Shouldn't we bind DirectoryLister to a concrete FS and avoid passing it in dynamically? DirectoryLister are fixed during config time.", "author": "highker", "createdAt": "2020-03-30T18:58:31Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/filesystem/ExtendedFileSystem.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.filesystem;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.HiveFileInfo;\n+import com.facebook.presto.hive.NamenodeStats;\n+import com.facebook.presto.hive.NestedDirectoryPolicy;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.DirectoryLister;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.fs.RemoteIterator;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public abstract class ExtendedFileSystem\n+        extends FileSystem\n+{\n+    public abstract RemoteIterator<LocatedFileStatus> listDirectory(Path path)\n+            throws IOException;\n+\n+    public abstract RemoteIterator<HiveFileInfo> listFiles(Path path)\n+            throws IOException;\n+\n+    public abstract FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception;\n+\n+    public abstract Iterator<HiveFileInfo> list(\n+            Table table,\n+            Path path,\n+            DirectoryLister directoryLister,", "originalCommit": "72912d8dace59edf6beae7cdc4c8f62bcf059120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMjUyNw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400522527", "bodyText": "It is little weird.\nI started this with binding DirectoryLister to concrete FS directly, but it was more messy.\nThe main reason was that we don't create the FileSystem through Injections, hence for the FS to use DirectoryLister, it would need to be passed to constructor directory.\nThis creates weird flows, especially for FileSystemWrapper.\nPlease note that in this case DIrectoryLister is just a utility providing specific functionality such as Timeout and caching.", "author": "jainxrohit", "createdAt": "2020-03-30T22:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMjMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2ODYwOA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400468608", "bodyText": "This is also a weird interface where the input is a iterator supplier and the output is the iterator.... I think both CachingDirectoryLister and TimeoutDirectoryLister should take a 'delegate\" in their constructors rather than providing a supplier here. The supplier passed in from PrestoExtendedFileSystemWrapper or any other FS should create their own generic DirectoryLister.\nThe old logic is exactly like that, isn't it?", "author": "highker", "createdAt": "2020-03-30T20:19:50Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/util/DirectoryLister.java", "diffHunk": "@@ -11,18 +11,16 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.hive;\n+package com.facebook.presto.hive.util;\n \n+import com.facebook.presto.hive.HiveFileInfo;\n import com.facebook.presto.hive.metastore.Table;\n-import org.apache.hadoop.fs.FileSystem;\n+import com.google.common.base.Supplier;\n import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.fs.PathFilter;\n \n import java.util.Iterator;\n \n-import static com.facebook.presto.hive.util.HiveFileIterator.NestedDirectoryPolicy;\n-\n public interface DirectoryLister\n {\n-    Iterator<HiveFileInfo> list(FileSystem fileSystem, Table table, Path path, NamenodeStats namenodeStats, NestedDirectoryPolicy nestedDirectoryPolicy, PathFilter pathFilter);\n+    Iterator<HiveFileInfo> list(Path path, Table table, Supplier<Iterator<HiveFileInfo>> hiveFileInfoSupplier);", "originalCommit": "72912d8dace59edf6beae7cdc4c8f62bcf059120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNzY5OA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400527698", "bodyText": "Yes the old logic was that. The reason this is different because the initiator here is the FS rather DirectoryLister.\nThe DirectoryLister is a utility which takes an iterator of HiveFileInfo and then depending on its own logic uses this input iterator supplier conditionally and return to the consumer.", "author": "jainxrohit", "createdAt": "2020-03-30T22:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2ODYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTQwOA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400529408", "bodyText": "The other way to clean this would be to have two list methods in the ExtendedFileSystem, or single one with a parameter to signal if the DirectoryLister should be used or not. Then it would look like following:\nExtendedFS::listwithDL => DirectoryLister::list => ExtendedFS::listwithoutDL", "author": "jainxrohit", "createdAt": "2020-03-30T22:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2ODYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2OTU2Ng==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400469566", "bodyText": "Maybe call it HadoopExtendedFileSystemr", "author": "highker", "createdAt": "2020-03-30T20:21:34Z", "path": "presto-hive-common/src/main/java/org/apache/hadoop/fs/PrestoExtendedFileSystemWrapper.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.HiveFileInfo;\n+import com.facebook.presto.hive.NamenodeStats;\n+import com.facebook.presto.hive.NestedDirectoryPolicy;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.DirectoryLister;\n+import com.facebook.presto.hive.util.HadoopFileInfoIterator;\n+import com.facebook.presto.hive.util.HiveFileIterator;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.permission.AclEntry;\n+import org.apache.hadoop.fs.permission.AclStatus;\n+import org.apache.hadoop.fs.permission.FsAction;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.util.Progressable;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.EnumSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PrestoExtendedFileSystemWrapper", "originalCommit": "72912d8dace59edf6beae7cdc4c8f62bcf059120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2OTg1MQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400469851", "bodyText": "We may still need the delegate model", "author": "highker", "createdAt": "2020-03-30T20:22:10Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/CachingDirectoryLister.java", "diffHunk": "@@ -45,23 +44,19 @@\n     private final Cache<Path, List<HiveFileInfo>> cache;\n     private final Set<SchemaTableName> cachedTableNames;\n \n-    protected final DirectoryLister delegate;\n-\n     @Inject\n-    public CachingDirectoryLister(@ForCachingDirectoryLister DirectoryLister delegate, HiveClientConfig hiveClientConfig)", "originalCommit": "72912d8dace59edf6beae7cdc4c8f62bcf059120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDQwNg==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r400584406", "bodyText": "In future yes, but not required for now.", "author": "jainxrohit", "createdAt": "2020-03-31T01:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2OTg1MQ=="}], "type": "inlineReview"}, {"oid": "7ca81431c4eaceba49bf81923454eb7b0ba657aa", "url": "https://github.com/prestodb/presto/commit/7ca81431c4eaceba49bf81923454eb7b0ba657aa", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from\nthe ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem\noperations have been removed.\nA necessary refactoring was required hence few classes have been\nmoved to presto-hive-common.", "committedDate": "2020-03-30T21:53:51Z", "type": "forcePushed"}, {"oid": "6e53bed14f940391b855a52f6a5126477daecb8f", "url": "https://github.com/prestodb/presto/commit/6e53bed14f940391b855a52f6a5126477daecb8f", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from\nthe ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem\noperations have been removed.\nA necessary refactoring was required hence few classes have been\nmoved to presto-hive-common.", "committedDate": "2020-03-31T01:12:15Z", "type": "forcePushed"}, {"oid": "9711ebd414af43c370a760f4212f1a4c972bc8b1", "url": "https://github.com/prestodb/presto/commit/9711ebd414af43c370a760f4212f1a4c972bc8b1", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from\nthe ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem\noperations have been removed.\nA necessary refactoring was required hence few classes have been\nmoved to presto-hive-common.", "committedDate": "2020-03-31T01:20:02Z", "type": "forcePushed"}, {"oid": "d929ece0a8068d1cb920b69ae8c96a4108035faa", "url": "https://github.com/prestodb/presto/commit/d929ece0a8068d1cb920b69ae8c96a4108035faa", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from\nthe ExtendedFileSystem.\nFileOpener and DirectoryLister classes to support FileSystem\noperations have been removed.\nA necessary refactoring was required hence few classes have been\nmoved to presto-hive-common.", "committedDate": "2020-03-31T04:49:49Z", "type": "forcePushed"}, {"oid": "9ba3dc626bd6c59fa8cebe2a53d71c99a446bac4", "url": "https://github.com/prestodb/presto/commit/9ba3dc626bd6c59fa8cebe2a53d71c99a446bac4", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from\nthe ExtendedFileSystem.\nFileOpener classes to support FileSystem\noperations have been removed.\nA necessary refactoring was required hence few classes have been\nmoved to presto-hive-common.", "committedDate": "2020-03-31T04:49:58Z", "type": "forcePushed"}, {"oid": "eeabbe6d00eb44eabe6c2762d9107d008b231a1c", "url": "https://github.com/prestodb/presto/commit/eeabbe6d00eb44eabe6c2762d9107d008b231a1c", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-03-31T05:20:11Z", "type": "forcePushed"}, {"oid": "ff4aac456fcd51fe575f4eb155464261e63f9935", "url": "https://github.com/prestodb/presto/commit/ff4aac456fcd51fe575f4eb155464261e63f9935", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-03-31T18:23:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNTE0OA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401115148", "bodyText": "DirectoryLister should belong to filesystem", "author": "highker", "createdAt": "2020-03-31T18:12:10Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/util/DirectoryLister.java", "diffHunk": "@@ -11,18 +11,25 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.hive;\n+package com.facebook.presto.hive.util;", "originalCommit": "eeabbe6d00eb44eabe6c2762d9107d008b231a1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NTYzMg==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401165632", "bodyText": "Will remove the util package completely.", "author": "jainxrohit", "createdAt": "2020-03-31T19:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjg0Ng==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401116846", "bodyText": "Inject DirectoryLister to each HdfsConfiguration impl (e.g., HiveCachingHdfsConfiguration). Then creating the ExtendedFileSystem with the injected DirectoryLister. That will avoid the param for this interface.", "author": "highker", "createdAt": "2020-03-31T18:15:01Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/filesystem/ExtendedFileSystem.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.filesystem;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.HiveFileInfo;\n+import com.facebook.presto.hive.NamenodeStats;\n+import com.facebook.presto.hive.NestedDirectoryPolicy;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.DirectoryLister;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.fs.RemoteIterator;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public abstract class ExtendedFileSystem\n+        extends FileSystem\n+{\n+    public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception\n+    {\n+        return open(path);\n+    }\n+\n+    public Iterator<HiveFileInfo> list(\n+            DirectoryLister directoryLister,", "originalCommit": "eeabbe6d00eb44eabe6c2762d9107d008b231a1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NDgzOQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401164839", "bodyText": "I thought we discussed about this. This approach results in to lot of mess. Please remember we need the DirectoryLister for HadoopExtendedFileSystem as well.", "author": "jainxrohit", "createdAt": "2020-03-31T19:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MTc4MA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401181780", "bodyText": "I haven't compiled or tested yet. But do you think this would work: highker@8784c41 ?", "author": "highker", "createdAt": "2020-03-31T20:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTY1Mw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401185653", "bodyText": "It would work. I had started with this approach only.  However I don't like the idea of HdfsEnvironment and PrestoExtendedFileSystemCache dealing with DirectoryLister. It makes Directory lister sit at the core. Also with this too many components, who have nothing to do with list interface, deals with directorylister.", "author": "jainxrohit", "createdAt": "2020-03-31T20:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4Nzk0Mw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401187943", "bodyText": "That is fine. Having the dirty implementation is better than a confusing interface IMHO. Also, given DirectoryLister is already in presto-hive-common (which I'm not a big fan frankly), we have already put DirectoryLister as a first-class citizen. If there is a way to avoid that, it might be fine with other approaches.", "author": "highker", "createdAt": "2020-03-31T20:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MDA4NA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401260084", "bodyText": "James and I discussed and we agreed to switch the list interface to the older way. Basically relying on the directorylister for list functionality.", "author": "jainxrohit", "createdAt": "2020-03-31T22:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401116940", "bodyText": "What's this?", "author": "highker", "createdAt": "2020-03-31T18:15:10Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/filesystem/ExtendedFileSystem.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.filesystem;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.HiveFileInfo;\n+import com.facebook.presto.hive.NamenodeStats;\n+import com.facebook.presto.hive.NestedDirectoryPolicy;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.DirectoryLister;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.fs.RemoteIterator;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public abstract class ExtendedFileSystem\n+        extends FileSystem\n+{\n+    public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception\n+    {\n+        return open(path);\n+    }\n+\n+    public Iterator<HiveFileInfo> list(\n+            DirectoryLister directoryLister,\n+            Table table,\n+            Path path,\n+            NamenodeStats namenodeStats,\n+            NestedDirectoryPolicy nestedDirectoryPolicy,\n+            PathFilter pathFilter)\n+    {\n+        return directoryLister.list(this, table, path, namenodeStats, nestedDirectoryPolicy, pathFilter);\n+    }\n+\n+    public RemoteIterator<LocatedFileStatus> listDirectory(Path path)\n+            throws IOException\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public RemoteIterator<HiveFileInfo> listFiles(Path path)\n+            throws IOException\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public RemoteIterator<LocatedFileStatus> listByPrefix(Path path)", "originalCommit": "eeabbe6d00eb44eabe6c2762d9107d008b231a1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MjYxNQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401142615", "bodyText": "It's a method used in the tempfs.", "author": "jainxrohit", "createdAt": "2020-03-31T18:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NDU2Nw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401144567", "bodyText": "Is it a common interface or something really specific to one FS? If it is the latter case, it is better not to open a backdoor at the interface only to tunnel through the functionality for that specific impl.", "author": "highker", "createdAt": "2020-03-31T19:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzMzMA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401147330", "bodyText": "The interface seems generic enough to me, however at present it is only supported by one FS. I am okay with either.", "author": "jainxrohit", "createdAt": "2020-03-31T19:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzY5Mw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401147693", "bodyText": "How about internal tempfs implementing listFiles/listDirectory using listByPrefix? listByPrefix is tempfs's version of list because there is no directory concept there.", "author": "shixuan-fan", "createdAt": "2020-03-31T19:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2Mzg0Mw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401163843", "bodyText": "@shixuan-fan  Not sure, if I follow. Are you saying to use listFiles/listDirectory as the interface for listByPrefix for the tempfs?", "author": "jainxrohit", "createdAt": "2020-03-31T19:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzODg2OA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401238868", "bodyText": "I have removed this interface.", "author": "jainxrohit", "createdAt": "2020-03-31T21:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NjMxMg==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401746312", "bodyText": "@shixuan-fan Not sure, if I follow. Are you saying to use listFiles/listDirectory as the interface for listByPrefix for the tempfs?\n\nYeah exactly :D", "author": "shixuan-fan", "createdAt": "2020-04-01T16:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjQ1NA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401122454", "bodyText": "Remove default behavior", "author": "highker", "createdAt": "2020-03-31T18:24:33Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/filesystem/ExtendedFileSystem.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.filesystem;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.HiveFileInfo;\n+import com.facebook.presto.hive.NamenodeStats;\n+import com.facebook.presto.hive.NestedDirectoryPolicy;\n+import com.facebook.presto.hive.metastore.Table;\n+import com.facebook.presto.hive.util.DirectoryLister;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.LocatedFileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+import org.apache.hadoop.fs.RemoteIterator;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public abstract class ExtendedFileSystem\n+        extends FileSystem\n+{\n+    public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception\n+    {\n+        return open(path);\n+    }\n+\n+    public Iterator<HiveFileInfo> list(\n+            DirectoryLister directoryLister,\n+            Table table,\n+            Path path,\n+            NamenodeStats namenodeStats,\n+            NestedDirectoryPolicy nestedDirectoryPolicy,\n+            PathFilter pathFilter)\n+    {\n+        return directoryLister.list(this, table, path, namenodeStats, nestedDirectoryPolicy, pathFilter);", "originalCommit": "ff4aac456fcd51fe575f4eb155464261e63f9935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MjAzMQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401142031", "bodyText": "Why?", "author": "jainxrohit", "createdAt": "2020-03-31T18:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NzE0OA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401147148", "bodyText": "It forces each impl to have this method implemented; unless the default behavior is frequently reused.", "author": "highker", "createdAt": "2020-03-31T19:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0ODA3NA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401148074", "bodyText": "All the default implemented are used in most FS, some e.g. list used in almost all.", "author": "jainxrohit", "createdAt": "2020-03-31T19:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMzA5Mg==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401123092", "bodyText": "util packages are mostly for static helper functions; this belongs to filesystem", "author": "highker", "createdAt": "2020-03-31T18:25:38Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/util/HadoopFileInfoIterator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.util;", "originalCommit": "ff4aac456fcd51fe575f4eb155464261e63f9935", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0ODUyNg==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401148526", "bodyText": "I anyways dont like util name. I think I carried the name from previous packages. I will remove it.", "author": "jainxrohit", "createdAt": "2020-03-31T19:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMzA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMzM2Nw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r401123367", "bodyText": "Remove Wrapper", "author": "highker", "createdAt": "2020-03-31T18:26:05Z", "path": "presto-hive-common/src/main/java/org/apache/hadoop/fs/HadoopExtendedFileSystemWrapper.java", "diffHunk": "@@ -0,0 +1,625 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.fs;\n+\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.permission.AclEntry;\n+import org.apache.hadoop.fs.permission.AclStatus;\n+import org.apache.hadoop.fs.permission.FsAction;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.util.Progressable;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HadoopExtendedFileSystemWrapper", "originalCommit": "ff4aac456fcd51fe575f4eb155464261e63f9935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "234d10c7ca1167b147e8e1281eb6c1b995326669", "url": "https://github.com/prestodb/presto/commit/234d10c7ca1167b147e8e1281eb6c1b995326669", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-03-31T19:56:44Z", "type": "forcePushed"}, {"oid": "d52b6d614b51eb0b529b2f7cda68091c98771e48", "url": "https://github.com/prestodb/presto/commit/d52b6d614b51eb0b529b2f7cda68091c98771e48", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-03-31T21:53:57Z", "type": "forcePushed"}, {"oid": "fc0b8ad75b7b28e016e456ad2e3567b1bca502e9", "url": "https://github.com/prestodb/presto/commit/fc0b8ad75b7b28e016e456ad2e3567b1bca502e9", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-03-31T23:54:02Z", "type": "forcePushed"}, {"oid": "64bab966d82afb40afe56aa429650d790b3cc042", "url": "https://github.com/prestodb/presto/commit/64bab966d82afb40afe56aa429650d790b3cc042", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-03T22:44:12Z", "type": "forcePushed"}, {"oid": "1027ba169718b06b65a95b0629643af74dfa6e14", "url": "https://github.com/prestodb/presto/commit/1027ba169718b06b65a95b0629643af74dfa6e14", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-03T23:07:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NDU5MA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r403644590", "bodyText": "You don't need to move DirectoryLister to presto-hive-common, right? Just keep it in presto-hive.", "author": "highker", "createdAt": "2020-04-05T03:46:10Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/filesystem/DirectoryLister.java", "diffHunk": "@@ -11,18 +11,24 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.hive;\n+package com.facebook.presto.hive.filesystem;", "originalCommit": "1027ba169718b06b65a95b0629643af74dfa6e14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNjA3MQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r404206071", "bodyText": "Yeah, most of the refactoring came because of directorylister changes.\nHowever the reason I didn't move back, because our initial idea was to keep most of the common models to hive-common.", "author": "jainxrohit", "createdAt": "2020-04-06T16:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NDU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMDMxNw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r404230317", "bodyText": "presto-hive-common will become too thick. Let's only move necessary classes to this module. DirectoryLister can now live in presto-hive", "author": "highker", "createdAt": "2020-04-06T16:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NDU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMTQ1OA==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r404231458", "bodyText": "ok.", "author": "jainxrohit", "createdAt": "2020-04-06T16:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NDU5MA=="}], "type": "inlineReview"}, {"oid": "69671a56fafe7b87f26434cab8b91e8fa60acf27", "url": "https://github.com/prestodb/presto/commit/69671a56fafe7b87f26434cab8b91e8fa60acf27", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T18:43:35Z", "type": "forcePushed"}, {"oid": "9f9a76ae1ff68468563b621471dbf47893db5c79", "url": "https://github.com/prestodb/presto/commit/9f9a76ae1ff68468563b621471dbf47893db5c79", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T18:52:04Z", "type": "forcePushed"}, {"oid": "3702f97960e2b2955d2b862398d853e7cf8a107c", "url": "https://github.com/prestodb/presto/commit/3702f97960e2b2955d2b862398d853e7cf8a107c", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T18:53:24Z", "type": "forcePushed"}, {"oid": "d6ceed6914f9edd1ce8f3bea370443c41d729828", "url": "https://github.com/prestodb/presto/commit/d6ceed6914f9edd1ce8f3bea370443c41d729828", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T18:59:49Z", "type": "forcePushed"}, {"oid": "1ec714ede0e06cdb4b73ec2d85052c90a1823368", "url": "https://github.com/prestodb/presto/commit/1ec714ede0e06cdb4b73ec2d85052c90a1823368", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T19:01:35Z", "type": "forcePushed"}, {"oid": "e77c9b78aae670ec7af7e3db737a0f831b26a7b1", "url": "https://github.com/prestodb/presto/commit/e77c9b78aae670ec7af7e3db737a0f831b26a7b1", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T19:05:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyODgyMw==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r404328823", "bodyText": "You need to check hiveFileContext.isCacheable() to decide if to cache right?", "author": "highker", "createdAt": "2020-04-06T19:17:04Z", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CachingFileSystem.java", "diffHunk": "@@ -498,4 +501,25 @@ public boolean isCacheValidationEnabled()\n     {\n         return cacheValidationEnabled;\n     }\n+\n+    @Override\n+    public RemoteIterator<LocatedFileStatus> listDirectory(Path path)\n+            throws IOException\n+    {\n+        return dataTier.listDirectory(path);\n+    }\n+\n+    @Override\n+    public RemoteIterator<HiveFileInfo> listFiles(Path path)\n+            throws IOException\n+    {\n+        return dataTier.listFiles(path);\n+    }\n+\n+    @Override\n+    public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception\n+    {\n+        return new CachingInputStream(dataTier.openFile(path, hiveFileContext), cacheManager, path, cacheValidationEnabled);", "originalCommit": "e77c9b78aae670ec7af7e3db737a0f831b26a7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0MzAwNQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r404343005", "bodyText": "good catch.", "author": "jainxrohit", "createdAt": "2020-04-06T19:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyODgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyOTM3NQ==", "url": "https://github.com/prestodb/presto/pull/14244#discussion_r404329375", "bodyText": "Remove them given they are default", "author": "highker", "createdAt": "2020-04-06T19:18:04Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -587,5 +587,23 @@ public URI getUri()\n         {\n             throw new UnsupportedOperationException();\n         }\n+\n+        @Override\n+        public RemoteIterator<LocatedFileStatus> listDirectory(Path path)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public RemoteIterator<HiveFileInfo> listFiles(Path path)\n+        {\n+            throw new UnsupportedOperationException();\n+        }", "originalCommit": "e77c9b78aae670ec7af7e3db737a0f831b26a7b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c991f74b09a5ded81db7755adf3f8c8963d255b5", "url": "https://github.com/prestodb/presto/commit/c991f74b09a5ded81db7755adf3f8c8963d255b5", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T23:39:43Z", "type": "forcePushed"}, {"oid": "9f9ae5829b95fe9817bcf17b29ad09c834498a6a", "url": "https://github.com/prestodb/presto/commit/9f9ae5829b95fe9817bcf17b29ad09c834498a6a", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-06T23:45:57Z", "type": "forcePushed"}, {"oid": "a11803078f8a96629466e9adbdc27ea3400f333d", "url": "https://github.com/prestodb/presto/commit/a11803078f8a96629466e9adbdc27ea3400f333d", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-07T00:14:42Z", "type": "forcePushed"}, {"oid": "079483d9310d57ad42bae81479fa789277ef58de", "url": "https://github.com/prestodb/presto/commit/079483d9310d57ad42bae81479fa789277ef58de", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-07T19:54:04Z", "type": "commit"}, {"oid": "079483d9310d57ad42bae81479fa789277ef58de", "url": "https://github.com/prestodb/presto/commit/079483d9310d57ad42bae81479fa789277ef58de", "message": "Add ExtendedFileSystem\n\nExtendedFileSystem is an extension of the FileSystem, which supports\nadditional APIs earlier supported by FileOpener and DirectoryLister.\nAll internal Filesystem used in the Presto is extended from the\nExtendedFileSystem. FileOpener classes to support FileSystem operations\nhave been removed. A necessary refactoring was required hence few\nclasses have been moved to presto-hive-common.", "committedDate": "2020-04-07T19:54:04Z", "type": "forcePushed"}]}