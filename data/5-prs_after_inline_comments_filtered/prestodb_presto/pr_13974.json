{"pr_number": 13974, "pr_title": "Extend SHOW FUNCTIONS", "pr_createdAt": "2020-01-16T20:41:39Z", "pr_url": "https://github.com/prestodb/presto/pull/13974", "timeline": [{"oid": "9a2dd91d072a0230952eee121defc7b000caf5c3", "url": "https://github.com/prestodb/presto/commit/9a2dd91d072a0230952eee121defc7b000caf5c3", "message": "Extend SHOW FUNCTIONS to display whether functions have variable arity", "committedDate": "2020-01-16T20:43:34Z", "type": "forcePushed"}, {"oid": "7a92bccc8bed5cc1ce2938b43a60f4a4b457f5cb", "url": "https://github.com/prestodb/presto/commit/7a92bccc8bed5cc1ce2938b43a60f4a4b457f5cb", "message": "Extend SHOW FUNCTIONS to display whether functions have variable arity", "committedDate": "2020-01-16T22:22:54Z", "type": "forcePushed"}, {"oid": "59dffa1a32a5bf40af09e7506980b7e9501a1af1", "url": "https://github.com/prestodb/presto/commit/59dffa1a32a5bf40af09e7506980b7e9501a1af1", "message": "Extend SHOW FUNCTIONS to display whether functions have variable arity", "committedDate": "2020-01-16T22:37:23Z", "type": "forcePushed"}, {"oid": "cdf07df6ca97f1d607edda0301ffa76ec6a7d0d1", "url": "https://github.com/prestodb/presto/commit/cdf07df6ca97f1d607edda0301ffa76ec6a7d0d1", "message": "Extend SHOW FUNCTIONS to display whether functions have variable arity", "committedDate": "2020-01-16T23:52:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0MzE2OA==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r369843168", "bodyText": "Put the new columns at the end to minimize the possibility of breaking things. I don't think it's necessary to add config property and session property for these. Just add the information to SHOW FUNCTION is enough.", "author": "rongrong", "createdAt": "2020-01-22T22:35:47Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -525,24 +529,37 @@ protected Node visitShowFunctions(ShowFunctions node, Void context)\n         {\n             ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n             for (SqlFunction function : metadata.listFunctions(session)) {\n-                rows.add(row(\n-                        function.getSignature().getName().getFunctionNamespace().equals(DEFAULT_NAMESPACE) ?\n-                                new StringLiteral(function.getSignature().getNameSuffix()) :\n-                                new StringLiteral(function.getSignature().getName().toString()),\n-                        new StringLiteral(function.getSignature().getReturnType().toString()),\n-                        new StringLiteral(Joiner.on(\", \").join(function.getSignature().getArgumentTypes())),\n-                        new StringLiteral(getFunctionType(function)),\n-                        function.isDeterministic() ? TRUE_LITERAL : FALSE_LITERAL,\n-                        new StringLiteral(nullToEmpty(function.getDescription()))));\n+                Signature signature = function.getSignature();\n+                boolean builtIn = signature.getName().getFunctionNamespace().equals(DEFAULT_NAMESPACE);\n+                ImmutableList.Builder<Expression> values = ImmutableList.<Expression>builder()\n+                        .add(new StringLiteral(builtIn ? signature.getNameSuffix() : signature.getName().toString()))\n+                        .add(new StringLiteral(signature.getReturnType().toString()))\n+                        .add(new StringLiteral(Joiner.on(\", \").join(signature.getArgumentTypes())))\n+                        .add(new StringLiteral(getFunctionType(function)))\n+                        .add(function.isDeterministic() ? TRUE_LITERAL : FALSE_LITERAL);\n+                if (isShowBuiltInColumn(session)) {\n+                    values.add(builtIn ? TRUE_LITERAL : FALSE_LITERAL);\n+                }\n+                if (isShowVariableArityInColumn(session)) {\n+                    values.add(signature.isVariableArity() ? TRUE_LITERAL : FALSE_LITERAL);\n+                }\n+                values.add(new StringLiteral(nullToEmpty(function.getDescription())));\n+                rows.add(new Row(values.build()));\n             }\n \n-            Map<String, String> columns = ImmutableMap.<String, String>builder()\n+            ImmutableMap.Builder<String, String> columnsBuilder = ImmutableMap.<String, String>builder()\n                     .put(\"function_name\", \"Function\")\n                     .put(\"return_type\", \"Return Type\")\n                     .put(\"argument_types\", \"Argument Types\")\n                     .put(\"function_type\", \"Function Type\")\n-                    .put(\"deterministic\", \"Deterministic\")\n-                    .put(\"description\", \"Description\")\n+                    .put(\"deterministic\", \"Deterministic\");\n+            if (isShowBuiltInColumn(session)) {", "originalCommit": "cdf07df6ca97f1d607edda0301ffa76ec6a7d0d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9805999f8fb0c30843982ebccb733ff6e89bc9d4", "url": "https://github.com/prestodb/presto/commit/9805999f8fb0c30843982ebccb733ff6e89bc9d4", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T08:04:18Z", "type": "forcePushed"}, {"oid": "f634fd670437c4eb579b4c69f1ec253647e9a87c", "url": "https://github.com/prestodb/presto/commit/f634fd670437c4eb579b4c69f1ec253647e9a87c", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T08:05:29Z", "type": "forcePushed"}, {"oid": "c22948b5e8faa31278319323d36c1855f2e9613d", "url": "https://github.com/prestodb/presto/commit/c22948b5e8faa31278319323d36c1855f2e9613d", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T08:05:47Z", "type": "forcePushed"}, {"oid": "9e664a16b116a3005eec7962a22ccd7a3ded607b", "url": "https://github.com/prestodb/presto/commit/9e664a16b116a3005eec7962a22ccd7a3ded607b", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T08:08:42Z", "type": "forcePushed"}, {"oid": "d4d0abb31977fdb3cc19947a5502bcb0e03eb869", "url": "https://github.com/prestodb/presto/commit/d4d0abb31977fdb3cc19947a5502bcb0e03eb869", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T09:24:07Z", "type": "forcePushed"}, {"oid": "e87a31e62d8bd4913a862ac9fecf1f20a1da6b06", "url": "https://github.com/prestodb/presto/commit/e87a31e62d8bd4913a862ac9fecf1f20a1da6b06", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T09:26:16Z", "type": "forcePushed"}, {"oid": "ba6221db7065787eb16595798a4f32b9d7cb6174", "url": "https://github.com/prestodb/presto/commit/ba6221db7065787eb16595798a4f32b9d7cb6174", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-23T09:26:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NDYzMA==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r370344630", "bodyText": "This should be a function derived from RoutineCharacteristics.language. Actually is it better to expose language rather than implementation type?", "author": "rongrong", "createdAt": "2020-01-23T20:44:20Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlInvokedFunction.java", "diffHunk": "@@ -109,6 +110,12 @@ public String getDescription()\n         return description;\n     }\n \n+    @Override\n+    public FunctionImplementationType getFunctionImplementationType()", "originalCommit": "0627c838a051eab36957f2619eb20bdbdd3569cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2OTEzMQ==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r370369131", "bodyText": "Language is an attribute for SqlInvokedFunction only. If we expose this information as an agglomerated enum such as in (BUILTIN, SQL, PYTHON, JS...), I would avoid reuse the name language, maybe function type?\nAlso, as you mentioned, we may also want to ship SqlInvokedFunctions that are static and packaged within Presto, which type value do we give them? They are both BUILTIN and SQL, so use a new enum BUILTIN_SQL, or PREPACKAGED_SQL?\nAn alternative I would prefer is to introduce 2 columns instead.\n\nboolean built_in:\n\ntrue: hard-coded functions, and pre-packaged SqlInvokedFunctions\nfalse: user-defined functions.\n\n\nvarchar language:\n\nnull: hard-coded functions\nnon-null values (SQL, Python, etc...): all SqlInvokedFunctions, including pre-packaged and user-defined.\n\n\n\nI'm essentially defining \"built_in\" as anything that comes in with the presto installation, which I think does make sense.", "author": "caithagoras", "createdAt": "2020-01-23T21:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NDYzMA=="}], "type": "inlineReview"}, {"oid": "767984066242426c004a2ea30afffdbf7d901ef3", "url": "https://github.com/prestodb/presto/commit/767984066242426c004a2ea30afffdbf7d901ef3", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T01:11:28Z", "type": "forcePushed"}, {"oid": "4bc99f6f9df58610e2bd611b4c99af475a4f38f6", "url": "https://github.com/prestodb/presto/commit/4bc99f6f9df58610e2bd611b4c99af475a4f38f6", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T01:25:43Z", "type": "forcePushed"}, {"oid": "60cfbef4285aa786c66afad097ebe618336e7b33", "url": "https://github.com/prestodb/presto/commit/60cfbef4285aa786c66afad097ebe618336e7b33", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T01:27:40Z", "type": "forcePushed"}, {"oid": "893ac4585974cda3de85f19c59d7038b14069e1e", "url": "https://github.com/prestodb/presto/commit/893ac4585974cda3de85f19c59d7038b14069e1e", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T07:12:29Z", "type": "forcePushed"}, {"oid": "5b1ac8c68756fa85d6068400a5c1fbfbc6167818", "url": "https://github.com/prestodb/presto/commit/5b1ac8c68756fa85d6068400a5c1fbfbc6167818", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T07:15:00Z", "type": "forcePushed"}, {"oid": "acdcb2e90c40c9b4f94073544d5a3082b88449f7", "url": "https://github.com/prestodb/presto/commit/acdcb2e90c40c9b4f94073544d5a3082b88449f7", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T07:16:39Z", "type": "forcePushed"}, {"oid": "73cd82ffbf11d6ceb10aded7a95b552247ac8b57", "url": "https://github.com/prestodb/presto/commit/73cd82ffbf11d6ceb10aded7a95b552247ac8b57", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T07:16:59Z", "type": "forcePushed"}, {"oid": "e28612eed14f257c9f7cd88d5560b8ca33327729", "url": "https://github.com/prestodb/presto/commit/e28612eed14f257c9f7cd88d5560b8ca33327729", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T07:17:47Z", "type": "forcePushed"}, {"oid": "3b1b35b7c5e916819e8e3e77b12113d3e9f8cb95", "url": "https://github.com/prestodb/presto/commit/3b1b35b7c5e916819e8e3e77b12113d3e9f8cb95", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T20:28:15Z", "type": "forcePushed"}, {"oid": "c5c4fdd6e645d8cecfa98dce8f1909a6ace9788b", "url": "https://github.com/prestodb/presto/commit/c5c4fdd6e645d8cecfa98dce8f1909a6ace9788b", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T21:52:02Z", "type": "forcePushed"}, {"oid": "dd684b5b01fd79f9487b01316cdeae631a38872d", "url": "https://github.com/prestodb/presto/commit/dd684b5b01fd79f9487b01316cdeae631a38872d", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T21:52:35Z", "type": "forcePushed"}, {"oid": "264b1c0865c6a43e41d58bf866b649a4c4dbf358", "url": "https://github.com/prestodb/presto/commit/264b1c0865c6a43e41d58bf866b649a4c4dbf358", "message": "Fix testShowFunctions\n\nAlso, added additional assertions.", "committedDate": "2020-01-24T21:52:53Z", "type": "commit"}, {"oid": "647ebefafecc93443a0bb6078d138e9677a74510", "url": "https://github.com/prestodb/presto/commit/647ebefafecc93443a0bb6078d138e9677a74510", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T21:52:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NDQ2Ng==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r370864466", "bodyText": "Maybe you also want to use nullToEmpty as in description?", "author": "rongrong", "createdAt": "2020-01-24T22:08:56Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -527,16 +529,19 @@ protected Node visitShowFunctions(ShowFunctions node, Void context)\n             ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n             for (SqlFunction function : metadata.listFunctions(session)) {\n                 Signature signature = function.getSignature();\n+                boolean builtIn = signature.getName().getFunctionNamespace().equals(DEFAULT_NAMESPACE);\n                 rows.add(row(\n-                        signature.getName().getFunctionNamespace().equals(DEFAULT_NAMESPACE) ?\n-                                new StringLiteral(signature.getNameSuffix()) :\n-                                new StringLiteral(signature.getName().toString()),\n+                        builtIn ? new StringLiteral(signature.getNameSuffix()) : new StringLiteral(signature.getName().toString()),\n                         new StringLiteral(signature.getReturnType().toString()),\n                         new StringLiteral(Joiner.on(\", \").join(signature.getArgumentTypes())),\n                         new StringLiteral(getFunctionType(function)),\n                         function.isDeterministic() ? TRUE_LITERAL : FALSE_LITERAL,\n                         new StringLiteral(nullToEmpty(function.getDescription())),\n-                        signature.isVariableArity() ? TRUE_LITERAL : FALSE_LITERAL));\n+                        signature.isVariableArity() ? TRUE_LITERAL : FALSE_LITERAL,\n+                        builtIn ? TRUE_LITERAL : FALSE_LITERAL,\n+                        function instanceof SqlInvokedFunction\n+                                ? new StringLiteral(((SqlInvokedFunction) function).getRoutineCharacteristics().getLanguage().name().toLowerCase(ENGLISH))\n+                                : new NullLiteral()));", "originalCommit": "647ebefafecc93443a0bb6078d138e9677a74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDg0Mw==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r370874843", "bodyText": "I think it make sense to have empty description, but for a more enum-like metadata, maybe we want to keep it as null?", "author": "caithagoras", "createdAt": "2020-01-24T22:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NDQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MjM0NA==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r370882344", "bodyText": "I prefer null when programmatically read it but it hurts my eyes \ud83d\ude02. Maybe we should say the language is JAVA for builtin functions then? Your call.", "author": "rongrong", "createdAt": "2020-01-24T23:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NDQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4ODY0OQ==", "url": "https://github.com/prestodb/presto/pull/13974#discussion_r370888649", "bodyText": "I would prefer empty string then, as a form of emptiness.", "author": "caithagoras", "createdAt": "2020-01-24T23:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NDQ2Ng=="}], "type": "inlineReview"}, {"oid": "f4ef2c87ed71feda7895569bac93f2c00e47824a", "url": "https://github.com/prestodb/presto/commit/f4ef2c87ed71feda7895569bac93f2c00e47824a", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T23:25:18Z", "type": "forcePushed"}, {"oid": "16b3f7c9af6f8a34edd000b2514eee4a3927ce25", "url": "https://github.com/prestodb/presto/commit/16b3f7c9af6f8a34edd000b2514eee4a3927ce25", "message": "Extend SHOW FUNCTIONS to display whether functions have variable arity", "committedDate": "2020-01-24T23:26:44Z", "type": "commit"}, {"oid": "0ffe51d8c5fcbeef37bd7b96cfec23486de1b31a", "url": "https://github.com/prestodb/presto/commit/0ffe51d8c5fcbeef37bd7b96cfec23486de1b31a", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T23:27:04Z", "type": "forcePushed"}, {"oid": "8c0409bab47a59b5794c51e53751dacef62065e5", "url": "https://github.com/prestodb/presto/commit/8c0409bab47a59b5794c51e53751dacef62065e5", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-24T23:44:30Z", "type": "forcePushed"}, {"oid": "445f25da47d32978f62346204a9cb7307c957944", "url": "https://github.com/prestodb/presto/commit/445f25da47d32978f62346204a9cb7307c957944", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-26T01:13:36Z", "type": "commit"}, {"oid": "445f25da47d32978f62346204a9cb7307c957944", "url": "https://github.com/prestodb/presto/commit/445f25da47d32978f62346204a9cb7307c957944", "message": "Extend SHOW FUNCTIONS to display whether functions are built-in", "committedDate": "2020-01-26T01:13:36Z", "type": "forcePushed"}]}