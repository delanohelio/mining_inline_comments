{"pr_number": 14597, "pr_title": "Do not create Slice objects when seeking map keys", "pr_createdAt": "2020-06-02T08:01:36Z", "pr_url": "https://github.com/prestodb/presto/pull/14597", "timeline": [{"oid": "3321447f860b49afc12452901cca9e9398329e21", "url": "https://github.com/prestodb/presto/commit/3321447f860b49afc12452901cca9e9398329e21", "message": "Use Block.equals() when seeking keys of VARCHAR type for maps\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.", "committedDate": "2020-06-02T19:39:02Z", "type": "forcePushed"}, {"oid": "d97ff0df90c688734b3fc3ef33d2bf3980fd2d0e", "url": "https://github.com/prestodb/presto/commit/d97ff0df90c688734b3fc3ef33d2bf3980fd2d0e", "message": "Use Block.equals() when seeking keys of VARCHAR type for maps\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.", "committedDate": "2020-06-03T04:00:01Z", "type": "forcePushed"}, {"oid": "e318fb2fbf844de2bf552683200cfe723e05ad0f", "url": "https://github.com/prestodb/presto/commit/e318fb2fbf844de2bf552683200cfe723e05ad0f", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-03T08:03:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3Nzc4MA==", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r435277780", "bodyText": "nit: perhaps, inline this variable", "author": "mbasmanova", "createdAt": "2020-06-04T13:56:41Z", "path": "presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java", "diffHunk": "@@ -352,7 +352,8 @@ public int seekKeyExact(Slice nativeValue)\n             Boolean match;\n             try {\n                 // assuming maps with indeterminate keys are not supported\n-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);\n+                Block keyBlock = mapBlock.getRawKeyBlock();", "originalCommit": "e318fb2fbf844de2bf552683200cfe723e05ad0f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "75a361c66eb61cbd7233c01ba4ba6b15597a0963", "url": "https://github.com/prestodb/presto/commit/75a361c66eb61cbd7233c01ba4ba6b15597a0963", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-05T02:03:39Z", "type": "forcePushed"}, {"oid": "f38163797838d27cd94fcecc5370c77c787a62df", "url": "https://github.com/prestodb/presto/commit/f38163797838d27cd94fcecc5370c77c787a62df", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-05T03:43:24Z", "type": "forcePushed"}, {"oid": "3335cac856b6d569f52f9912c83b834080972fda", "url": "https://github.com/prestodb/presto/commit/3335cac856b6d569f52f9912c83b834080972fda", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-06T02:03:28Z", "type": "forcePushed"}, {"oid": "ce44597fd329dd7b31eab6844a7b555083f905c1", "url": "https://github.com/prestodb/presto/commit/ce44597fd329dd7b31eab6844a7b555083f905c1", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-06T06:58:07Z", "type": "forcePushed"}, {"oid": "6b0eb076ae7b7aa9107b86fcbdd0ad0b511a7fee", "url": "https://github.com/prestodb/presto/commit/6b0eb076ae7b7aa9107b86fcbdd0ad0b511a7fee", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-09T01:08:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNzcwNA==", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r437717704", "bodyText": "@yingsu00 Is this code commented out on purpose?", "author": "mbasmanova", "createdAt": "2020-06-09T20:57:47Z", "path": "presto-main/src/test/java/com/facebook/presto/block/AbstractTestBlock.java", "diffHunk": "@@ -72,8 +72,8 @@\n \n     protected <T> void assertBlock(Block block, Supplier<BlockBuilder> newBlockBuilder, T[] expectedValues)\n     {\n-        assertBlockSize(block);\n-        assertRetainedSize(block);\n+//        assertBlockSize(block);", "originalCommit": "96f00aa6465e74b7bf937b128175b0bb0e31d382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTUyMA==", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r437995520", "bodyText": "@yingsu00 Is this code commented out on purpose?\n\n@mbasmanova  Thanks for catching this. I updated the PR and made sure there are no other commented out lines.", "author": "yingsu00", "createdAt": "2020-06-10T09:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNzcwNA=="}], "type": "inlineReview"}, {"oid": "f465d069737656bc448241e0e1f8c256e4c0cfb3", "url": "https://github.com/prestodb/presto/commit/f465d069737656bc448241e0e1f8c256e4c0cfb3", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-10T06:29:27Z", "type": "forcePushed"}, {"oid": "2428c704f0a02bd8574b37d63e347e1dd2df86e9", "url": "https://github.com/prestodb/presto/commit/2428c704f0a02bd8574b37d63e347e1dd2df86e9", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-10T08:57:30Z", "type": "forcePushed"}, {"oid": "cc5b017a1ee2f9a974f111ca9a4ad90878039927", "url": "https://github.com/prestodb/presto/commit/cc5b017a1ee2f9a974f111ca9a4ad90878039927", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-10T09:15:57Z", "type": "forcePushed"}, {"oid": "67926ccbe924f578c70103f223e81cd61310bad9", "url": "https://github.com/prestodb/presto/commit/67926ccbe924f578c70103f223e81cd61310bad9", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-10T09:28:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzYyMQ==", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r437997621", "bodyText": "@yingsu00 Can this method be implemented as assertSlicePosition(block, internalPosition - block.getOffsetBase(), expectedSliceValue)?", "author": "mbasmanova", "createdAt": "2020-06-10T09:44:03Z", "path": "presto-main/src/test/java/com/facebook/presto/block/TestInt128ArrayBlock.java", "diffHunk": "@@ -165,6 +168,36 @@ protected boolean isAlignedLongAccessSupported()\n     @Override\n     protected boolean isSliceAccessSupported()\n     {\n-        return false;\n+        return true;\n+    }\n+\n+    @Override\n+    protected void assertSlicePosition(Block block, int position, Slice expectedSliceValue)\n+    {\n+        int num128Integers = Math.min(getNum128Integers(expectedSliceValue.length()), block.getPositionCount() - position);\n+        for (int offset = 0; offset < num128Integers; offset++) {\n+            assertEquals(expectedSliceValue.length(), SIZE_OF_LONG * 2);\n+\n+            assertEquals(block.getSlice(position, offset, SIZE_OF_LONG * 2), expectedSliceValue.slice(offset, SIZE_OF_LONG * 2));\n+            assertEquals(block.getSliceLength(position), SIZE_OF_LONG * 2);\n+\n+            assertTrue(block.bytesEqual(position, offset, expectedSliceValue, 0, SIZE_OF_LONG * 2));\n+            assertFalse(block.bytesEqual(position, offset, Slices.utf8Slice(\"XXXXXXXXXXXXXXXX\"), 0, SIZE_OF_LONG * 2));\n+        }\n+    }\n+\n+    @Override\n+    protected void assertSlicePositionUnchecked(Block block, int internalPosition, Slice expectedSliceValue)", "originalCommit": "c33e30b02cd0de31c7bdee208fb770d45f8a7904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwMDgwNw==", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r438000807", "bodyText": "@mbasmanova Oh yes. I updated the PR with it. Thanks!", "author": "yingsu00", "createdAt": "2020-06-10T09:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzYyMQ=="}], "type": "inlineReview"}, {"oid": "5eb9c2addc2bcb9e0b27665d285984aa9e885d6d", "url": "https://github.com/prestodb/presto/commit/5eb9c2addc2bcb9e0b27665d285984aa9e885d6d", "message": "Implement Slice operations for Int128ArrayBlock(Builder)", "committedDate": "2020-06-10T09:47:47Z", "type": "commit"}, {"oid": "4ef7053c985dc198ef00146c8b8f1eee5a71771a", "url": "https://github.com/prestodb/presto/commit/4ef7053c985dc198ef00146c8b8f1eee5a71771a", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-10T09:47:47Z", "type": "commit"}, {"oid": "4ef7053c985dc198ef00146c8b8f1eee5a71771a", "url": "https://github.com/prestodb/presto/commit/4ef7053c985dc198ef00146c8b8f1eee5a71771a", "message": "Do not create Slice while comparing keys in SingleMapBlock\n\nWhen seeking a key represented in Slice format, the comparison of the\nkey value and the value in the SingleMapBlock at the position of the\nhashCode was done through keyBlockNativeEquals.invokeExact(), which\ncreates a new Slice object. When there are many map subscript operations\nin a query, many small Slice objects are created and this causes high\nGC overhead which may lead to reliability problems. This commit uses\nthe newly introduced Block.equals(int, Slice) to do the comparison and\nit does not create the Slice objects.\n\nIt also improves the map subscript operation on varchars by up to 30%.\n\nBefore:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score     Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    43.658 \u00b1   2.070  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    76.798 \u00b1   1.174  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    71.693 \u00b1   1.728  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   673.659 \u00b1  35.320  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1549.805 \u00b1 114.924  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1505.389 \u00b1  55.895  ns/op\nAfter:\n\nBenchmark                           (mapSize)      (name)  Mode  Cnt     Score    Error  Units\nBenchmarkMapSubscript.mapSubscript          1   fix-width  avgt   20    31.709 \u00b1  1.050  ns/op\nBenchmarkMapSubscript.mapSubscript          1   var-width  avgt   20    56.716 \u00b1  1.767  ns/op\nBenchmarkMapSubscript.mapSubscript          1  dictionary  avgt   20    66.426 \u00b1  2.030  ns/op\nBenchmarkMapSubscript.mapSubscript         13   fix-width  avgt   20   569.891 \u00b1 21.386  ns/op\nBenchmarkMapSubscript.mapSubscript         13   var-width  avgt   20  1061.052 \u00b1 49.004  ns/op\nBenchmarkMapSubscript.mapSubscript         13  dictionary  avgt   20  1118.587 \u00b1 71.122  ns/op", "committedDate": "2020-06-10T09:47:47Z", "type": "forcePushed"}]}