{"pr_number": 14302, "pr_title": "Add ST_Centroid for points, multi-points on a sphere", "pr_createdAt": "2020-03-27T19:32:05Z", "pr_url": "https://github.com/prestodb/presto/pull/14302", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjE3OA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404296178", "bodyText": "Prefer checking for OGCPoint explicitly, to be defensive against allowing more types later.", "author": "jagill", "createdAt": "2020-04-06T18:20:54Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -378,6 +388,100 @@ public static Slice stCentroid(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n         return serialize(geometry.getCentroid());\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return null;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (! (geometry instanceof OGCGeometryCollection)) {", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMzMwNg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404513306", "bodyText": "Good point", "author": "DTAIEB", "createdAt": "2020-04-07T03:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjMyNg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404296326", "bodyText": "I would separate out this change into a separate commit.", "author": "jagill", "createdAt": "2020-04-06T18:21:07Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -322,6 +324,14 @@ public static Slice stAsText(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n         return utf8Slice(wktFromJtsGeometry(deserialize(input)));\n     }\n \n+    @Description(\"Returns the Well-Known Text (WKT) representation of the geometry\")", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMzc4OA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404513788", "bodyText": "This minor change is needed for the tests which are using ST_AsText", "author": "DTAIEB", "createdAt": "2020-04-07T03:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NzQxNA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404297414", "bodyText": "When the geography is a MultiPoint with a single point, this will return a MultiPoint (with one constituent), which is against the contract of returning a Point.", "author": "jagill", "createdAt": "2020-04-06T18:22:57Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -378,6 +388,100 @@ public static Slice stCentroid(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n         return serialize(geometry.getCentroid());\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return null;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (! (geometry instanceof OGCGeometryCollection)) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection)geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLatitude(p.getX());\n+            checkLongitude(p.getY());\n+        }\n+\n+        Point centroid = null;\n+        if (geometryCollection.numGeometries() == 1) {\n+            return input;", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMzkyNg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404513926", "bodyText": "Good call, will make the change", "author": "DTAIEB", "createdAt": "2020-04-07T03:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NzQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NTAyMg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404365022", "bodyText": "Please add tests for 'POINT EMPTY', 'MULTIPOINT EMPTY', the 0-entry 'MULTIPOINT()' (maybe that's a syntax error),  and the single entry 'MULTIPOINT (30, 30)'.", "author": "jagill", "createdAt": "2020-04-06T20:23:49Z", "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestGeoFunctions.java", "diffHunk": "@@ -242,13 +242,26 @@ public void testSTCentroid()\n         assertApproximateCentroid(\n                 \"POLYGON ((-81.0387349 29.20822, -81.039974 29.210597, -81.0410331 29.2101579, -81.0404758 29.2090879, -81.0404618 29.2090609, -81.040433 29.209005, -81.0404269 29.208993, -81.0404161 29.2089729, -81.0398001 29.20779, -81.0387349 29.20822), (-81.0404229 29.208986, -81.04042 29.2089809, -81.0404269 29.208993, -81.0404229 29.208986))\",\n                 new Point(-81.039885, 29.209191), 1e-6);\n+\n+        // Spherical centroid testing", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MzI1NQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405053255", "bodyText": "0-entry 'MULTIPOINT()' doesn't seem to be a valid expression", "author": "DTAIEB", "createdAt": "2020-04-07T19:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NTg2MQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404365861", "bodyText": "p.getX() will return the x-coordinate, or longitude.", "author": "jagill", "createdAt": "2020-04-06T20:25:19Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1681,4 +1785,41 @@ public OGCGeometry next()\n             return geometriesDeque.pop();\n         }\n     }\n+\n+    private static class CartesianPoint\n+    {\n+        public double x;\n+        public double y;\n+        public double z;\n+\n+        public CartesianPoint(Point p) {\n+            // Angle from North Pole down to Latitude, in Radians\n+            double phi = toRadians(90 - p.getX());", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNDUyOQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404514529", "bodyText": "Good catch, I reviewed https://prestodb.io/docs/current/functions/geospatial.html and how Presto uses (long, lat) instead of (lat,long). will make the change", "author": "DTAIEB", "createdAt": "2020-04-07T03:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NjA4MA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404366080", "bodyText": "p.getY() will return the y-coordinate, or latitude.", "author": "jagill", "createdAt": "2020-04-06T20:25:42Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1681,4 +1785,41 @@ public OGCGeometry next()\n             return geometriesDeque.pop();\n         }\n     }\n+\n+    private static class CartesianPoint\n+    {\n+        public double x;\n+        public double y;\n+        public double z;\n+\n+        public CartesianPoint(Point p) {\n+            // Angle from North Pole down to Latitude, in Radians\n+            double phi = toRadians(90 - p.getX());\n+            double sinPhi = Math.sin(phi);\n+            // Angle from Greenwich to Longitude, in Radians\n+            double theta = toRadians(p.getY());", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NzAyNQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404367025", "bodyText": "This will generally be on the chord between cp1 and cp2, which won't be on the sphere.  I think you need to normalize here?", "author": "jagill", "createdAt": "2020-04-06T20:27:26Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -378,6 +388,100 @@ public static Slice stCentroid(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n         return serialize(geometry.getCentroid());\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return null;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (! (geometry instanceof OGCGeometryCollection)) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection)geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLatitude(p.getX());\n+            checkLongitude(p.getY());\n+        }\n+\n+        Point centroid = null;\n+        if (geometryCollection.numGeometries() == 1) {\n+            return input;\n+        }else if(geometryCollection.numGeometries() == 2) {\n+            // 2 points\n+            CartesianPoint cp1 = new CartesianPoint((Point)geometryCollection.geometryN(0).getEsriGeometry());\n+            CartesianPoint cp2 = new CartesianPoint((Point)geometryCollection.geometryN(1).getEsriGeometry());\n+            centroid = CartesianPoint.convertToLatLong(", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxODE3Mg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404518172", "bodyText": "Right the assumption is that since we have a sphere,  the centroid of the chord between cp1 and cp2 has the same (long, lat) as the centroid on the sphere.", "author": "DTAIEB", "createdAt": "2020-04-07T03:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NzAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NzI1OA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404367258", "bodyText": "This seems like a good method on CartesianPoint, or even a normalized function that returns a unit vector in the same direction as CartesianPoint.", "author": "jagill", "createdAt": "2020-04-06T20:27:47Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -378,6 +388,100 @@ public static Slice stCentroid(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n         return serialize(geometry.getCentroid());\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return null;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (! (geometry instanceof OGCGeometryCollection)) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection)geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLatitude(p.getX());\n+            checkLongitude(p.getY());\n+        }\n+\n+        Point centroid = null;\n+        if (geometryCollection.numGeometries() == 1) {\n+            return input;\n+        }else if(geometryCollection.numGeometries() == 2) {\n+            // 2 points\n+            CartesianPoint cp1 = new CartesianPoint((Point)geometryCollection.geometryN(0).getEsriGeometry());\n+            CartesianPoint cp2 = new CartesianPoint((Point)geometryCollection.geometryN(1).getEsriGeometry());\n+            centroid = CartesianPoint.convertToLatLong(\n+                    (cp1.x + cp2.x)/2,\n+                    (cp1.y + cp2.y)/2,\n+                    (cp1.z + cp2.z)/2\n+            );\n+        }else if(geometryCollection.numGeometries() == 3) {\n+            // Triangle\n+            CartesianPoint cp1 = new CartesianPoint((Point)geometryCollection.geometryN(0).getEsriGeometry());\n+            CartesianPoint cp2 = new CartesianPoint((Point)geometryCollection.geometryN(1).getEsriGeometry());\n+            CartesianPoint cp3 = new CartesianPoint((Point)geometryCollection.geometryN(2).getEsriGeometry());\n+            double x3D = (cp1.x + cp2.x + cp3.x)/3;\n+            double y3D = (cp1.y + cp2.y + cp3.y)/3;\n+            double z3D = (cp1.z + cp2.z + cp3.z)/3;\n+            double centroidVectorLength = Math.sqrt(x3D*x3D + y3D*y3D + z3D*z3D);", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NTEyNA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404375124", "bodyText": "Honest question here:  Why use the centroids of our spherical triangles, rather than just taking the average of the points?", "author": "jagill", "createdAt": "2020-04-06T20:41:54Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -378,6 +388,100 @@ public static Slice stCentroid(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n         return serialize(geometry.getCentroid());\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return null;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (! (geometry instanceof OGCGeometryCollection)) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection)geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLatitude(p.getX());\n+            checkLongitude(p.getY());\n+        }\n+\n+        Point centroid = null;\n+        if (geometryCollection.numGeometries() == 1) {\n+            return input;\n+        }else if(geometryCollection.numGeometries() == 2) {\n+            // 2 points\n+            CartesianPoint cp1 = new CartesianPoint((Point)geometryCollection.geometryN(0).getEsriGeometry());\n+            CartesianPoint cp2 = new CartesianPoint((Point)geometryCollection.geometryN(1).getEsriGeometry());\n+            centroid = CartesianPoint.convertToLatLong(\n+                    (cp1.x + cp2.x)/2,\n+                    (cp1.y + cp2.y)/2,\n+                    (cp1.z + cp2.z)/2\n+            );\n+        }else if(geometryCollection.numGeometries() == 3) {\n+            // Triangle\n+            CartesianPoint cp1 = new CartesianPoint((Point)geometryCollection.geometryN(0).getEsriGeometry());\n+            CartesianPoint cp2 = new CartesianPoint((Point)geometryCollection.geometryN(1).getEsriGeometry());\n+            CartesianPoint cp3 = new CartesianPoint((Point)geometryCollection.geometryN(2).getEsriGeometry());\n+            double x3D = (cp1.x + cp2.x + cp3.x)/3;\n+            double y3D = (cp1.y + cp2.y + cp3.y)/3;\n+            double z3D = (cp1.z + cp2.z + cp3.z)/3;\n+            double centroidVectorLength = Math.sqrt(x3D*x3D + y3D*y3D + z3D*z3D);\n+            centroid = CartesianPoint.convertToLatLong(\n+                    x3D / centroidVectorLength,\n+                    y3D / centroidVectorLength,\n+                    z3D / centroidVectorLength\n+            );\n+        }else {", "originalCommit": "81655c453e212dcb8977cc62434abc460e23b687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyMTk4OQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r404521989", "bodyText": "Yes, it would definitely be simpler, but there are degenerate cases that would give the wrong answer e.g. opposite point which would resolve to the center of the earth.", "author": "DTAIEB", "createdAt": "2020-04-07T04:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NTEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODk0Mg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405118942", "bodyText": "Updated to take the average of the points", "author": "DTAIEB", "createdAt": "2020-04-07T21:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NTEyNA=="}], "type": "inlineReview"}, {"oid": "30f8ad0d0bc29a49bb496347b9c436b1d81c9299", "url": "https://github.com/prestodb/presto/commit/30f8ad0d0bc29a49bb496347b9c436b1d81c9299", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-07T21:12:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTA4OQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405161089", "bodyText": "Why return an EMPTY_SLICE here and not null?", "author": "jagill", "createdAt": "2020-04-07T22:56:04Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SphericalGeoFunctions.java", "diffHunk": "@@ -236,6 +256,55 @@ public static Double stSphericalLength(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) S\n         return sum * 1000;\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return Slices.EMPTY_SLICE;", "originalCommit": "30f8ad0d0bc29a49bb496347b9c436b1d81c9299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NjI1Ng==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405246256", "bodyText": "Returning null will cause an NPE by the interpreter when it calls writeSlice to to write the results to the BlockBuilder (see SphericalGeographyType#writeSlice). However, returning null seems to be ok for methods that return Slices by primitives (Bool, double, long) as is the case for stSphericalDistance.", "author": "DTAIEB", "createdAt": "2020-04-08T04:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NTU4MA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405575580", "bodyText": "You can use @SqlNullable to allow a null return value.", "author": "jagill", "createdAt": "2020-04-08T14:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTMwMw==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405161303", "bodyText": "Make these private and final with getters (but no setters).", "author": "jagill", "createdAt": "2020-04-07T22:56:39Z", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -113,4 +114,35 @@ public static void validateSphericalType(String function, OGCGeometry geometry,\n             throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"When applied to SphericalGeography inputs, %s only supports %s. Input type is: %s\", function, OR_JOINER.join(validTypes), type));\n         }\n     }\n+\n+    public static class CartesianPoint\n+    {\n+        public double x;", "originalCommit": "30f8ad0d0bc29a49bb496347b9c436b1d81c9299", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjI3NQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405162275", "bodyText": "I think either we should:\n\nHave CartesianPoint have two constructors (Point, and (x, y, z)), and an asPoint() method that returns a point, or\njust have two static helper methods in SphericalGeographyUtils (no CartesianPoint) that convert between cartesian (x, y, z) and Point.\n\n2 seems like the right solution, since we're never using the class as such, but I think either way would work.", "author": "jagill", "createdAt": "2020-04-07T22:59:06Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SphericalGeoFunctions.java", "diffHunk": "@@ -236,6 +256,55 @@ public static Double stSphericalLength(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) S\n         return sum * 1000;\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return Slices.EMPTY_SLICE;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (geometry instanceof OGCPoint) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection) geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLongitude(p.getX());\n+            checkLatitude(p.getY());\n+        }\n+\n+        Point centroid;\n+        if (geometryCollection.numGeometries() == 1) {\n+            centroid = (Point) geometryCollection.geometryN(0).getEsriGeometry();\n+        }\n+        else {\n+            double x3DTotal = 0;\n+            double y3DTotal = 0;\n+            double z3DTotal = 0;\n+\n+            for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+                SphericalGeographyUtils.CartesianPoint cp = new SphericalGeographyUtils.CartesianPoint((Point) geometryCollection.geometryN(i).getEsriGeometry());", "originalCommit": "30f8ad0d0bc29a49bb496347b9c436b1d81c9299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTE3Mw==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405249173", "bodyText": "Went with 1 because 2 would still require to create a tuple to hold the cartesian (x,y,z).", "author": "DTAIEB", "createdAt": "2020-04-08T04:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjU5NA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405162594", "bodyText": "Also, prefer static imports such that CartesianPoint (or the static helper methods) are imported at top level.", "author": "jagill", "createdAt": "2020-04-07T22:59:53Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SphericalGeoFunctions.java", "diffHunk": "@@ -236,6 +256,55 @@ public static Double stSphericalLength(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) S\n         return sum * 1000;\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return Slices.EMPTY_SLICE;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (geometry instanceof OGCPoint) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection) geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLongitude(p.getX());\n+            checkLatitude(p.getY());\n+        }\n+\n+        Point centroid;\n+        if (geometryCollection.numGeometries() == 1) {\n+            centroid = (Point) geometryCollection.geometryN(0).getEsriGeometry();\n+        }\n+        else {\n+            double x3DTotal = 0;\n+            double y3DTotal = 0;\n+            double z3DTotal = 0;\n+\n+            for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+                SphericalGeographyUtils.CartesianPoint cp = new SphericalGeographyUtils.CartesianPoint((Point) geometryCollection.geometryN(i).getEsriGeometry());", "originalCommit": "30f8ad0d0bc29a49bb496347b9c436b1d81c9299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTM1Mg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405249352", "bodyText": "Fixed but I blame the intellij editor who refuses to use import static :-)", "author": "DTAIEB", "createdAt": "2020-04-08T04:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjU5NA=="}], "type": "inlineReview"}, {"oid": "fdd924abeaec9ea514e403b8c9dfa50cb1d376b3", "url": "https://github.com/prestodb/presto/commit/fdd924abeaec9ea514e403b8c9dfa50cb1d376b3", "message": "Add ST_Centroid for points and multipoints on a sphere\n\ndoc update\n\nminor refactor", "committedDate": "2020-04-08T04:34:18Z", "type": "forcePushed"}, {"oid": "fd31854a52615e36f6ffc39ece5cc237931eea5e", "url": "https://github.com/prestodb/presto/commit/fd31854a52615e36f6ffc39ece5cc237931eea5e", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-08T04:54:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NDA4MQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405554081", "bodyText": "Make these final.", "author": "jagill", "createdAt": "2020-04-08T14:09:13Z", "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -113,4 +114,66 @@ public static void validateSphericalType(String function, OGCGeometry geometry,\n             throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"When applied to SphericalGeography inputs, %s only supports %s. Input type is: %s\", function, OR_JOINER.join(validTypes), type));\n         }\n     }\n+\n+    public static final class CartesianPoint\n+    {\n+        private double x;\n+        private double y;\n+        private double z;", "originalCommit": "fd31854a52615e36f6ffc39ece5cc237931eea5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NTc0Mg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405555742", "bodyText": "If the input is null, the output should be null.  ScalarFunctions do this automatically, unless you use the @SqlNullable annotation.", "author": "jagill", "createdAt": "2020-04-08T14:11:41Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SphericalGeoFunctions.java", "diffHunk": "@@ -105,6 +115,17 @@ public static Slice toGeometry(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice inp\n         return input;\n     }\n \n+    @Description(\"Returns the Well-Known Text (WKT) representation of the geometry\")\n+    @ScalarFunction(\"ST_AsText\")\n+    @SqlType(VARCHAR)\n+    public static Slice stSphericalAsText(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        if (input == null) {\n+            return utf8Slice(\"POINT EMPTY\");", "originalCommit": "fd31854a52615e36f6ffc39ece5cc237931eea5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NDQ1Mw==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405594453", "bodyText": "Removed it", "author": "DTAIEB", "createdAt": "2020-04-08T15:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NjEzNg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405576136", "bodyText": "Remove this by returning null above.", "author": "jagill", "createdAt": "2020-04-08T14:39:37Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SphericalGeographyType.java", "diffHunk": "@@ -75,6 +76,9 @@ public Object getObjectValue(ConnectorSession session, Block block, int position\n             return null;\n         }\n         Slice slice = block.getSlice(position, 0, block.getSliceLength(position));\n+        if (slice == Slices.EMPTY_SLICE) {\n+            return null;\n+        }", "originalCommit": "fd31854a52615e36f6ffc39ece5cc237931eea5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMDY5Nw==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405600697", "bodyText": "I don't think @SqlNullable is applicable here, the input is not null but rather the underlying geometry is empty. Also as mentioned above,  returning null would cause a crash in the SQL engine when trying to write the result (most likely due to the fact that the return type is not a primitive). I haven't been able to find an easy way to prevent the engine from calling SphericalGeographyType#writeSlice.", "author": "DTAIEB", "createdAt": "2020-04-08T15:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNjI5Mw==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405636293", "bodyText": "From the @SqlNullable documentation (https://prestodb.io/docs/current/develop/functions.html):\n\nThe method must be annotated with @SqlNullable if it can return NULL when the arguments are non-null.\n\nSince you are having trouble returning null when the input is not null, and we return null when the input is not null in other functions decorated by @SqlNullable, I'd still try that.", "author": "jagill", "createdAt": "2020-04-08T16:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2NDEzNg==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405664136", "bodyText": "Read the doc, looks like I misinterpreted the semantic of SqlNullable. I confirm that adding SqlNullable enables me to return null, which is awesome.", "author": "DTAIEB", "createdAt": "2020-04-08T16:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NjEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3Nzg1Nw==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405577857", "bodyText": "Let's explicitly check for centroidVectorLength == 0.0 here; I'm worried that some float precision is hiding a possible div-by-0 bug.", "author": "jagill", "createdAt": "2020-04-08T14:42:05Z", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SphericalGeoFunctions.java", "diffHunk": "@@ -236,6 +257,55 @@ public static Double stSphericalLength(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) S\n         return sum * 1000;\n     }\n \n+    @Description(\"Returns the Point value that is the mathematical centroid of a Spherical Geography\")\n+    @ScalarFunction(\"ST_Centroid\")\n+    @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME)\n+    public static Slice stSphericalCentroid(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice input)\n+    {\n+        OGCGeometry geometry = EsriGeometrySerde.deserialize(input);\n+        if (geometry.isEmpty()) {\n+            return Slices.EMPTY_SLICE;\n+        }\n+        // TODO: add support for other types e.g. POLYGON\n+        validateSphericalType(\"ST_Centroid\", geometry, EnumSet.of(POINT, MULTI_POINT));\n+        if (geometry instanceof OGCPoint) {\n+            return input;\n+        }\n+\n+        OGCGeometryCollection geometryCollection = (OGCGeometryCollection) geometry;\n+        for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+            OGCGeometry g = geometryCollection.geometryN(i);\n+            validateSphericalType(\"ST_Centroid\", g, EnumSet.of(POINT));\n+            Point p = (Point) g.getEsriGeometry();\n+            checkLongitude(p.getX());\n+            checkLatitude(p.getY());\n+        }\n+\n+        Point centroid;\n+        if (geometryCollection.numGeometries() == 1) {\n+            centroid = (Point) geometryCollection.geometryN(0).getEsriGeometry();\n+        }\n+        else {\n+            double x3DTotal = 0;\n+            double y3DTotal = 0;\n+            double z3DTotal = 0;\n+\n+            for (int i = 0; i < geometryCollection.numGeometries(); i++) {\n+                CartesianPoint cp = new CartesianPoint((Point) geometryCollection.geometryN(i).getEsriGeometry());\n+                x3DTotal += cp.getX();\n+                y3DTotal += cp.getY();\n+                z3DTotal += cp.getZ();\n+            }\n+\n+            double centroidVectorLength = Math.sqrt(x3DTotal * x3DTotal + y3DTotal * y3DTotal + z3DTotal * z3DTotal);", "originalCommit": "fd31854a52615e36f6ffc39ece5cc237931eea5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNjQyOA==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405606428", "bodyText": "I think this would be very unlikely as it's a sum of squares. The only way it could happen would be that all the coordinates are actually zero (center of earth). Nonetheless, I've added a check that throws an exception if it happens.", "author": "DTAIEB", "createdAt": "2020-04-08T15:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3Nzg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNzM0OQ==", "url": "https://github.com/prestodb/presto/pull/14302#discussion_r405637349", "bodyText": "When you have queries with 10's of billions of rows, and millions of queries per day, \"very unlikely\" happens surprisingly frequently!  And propagating NaN's are quite annoying to track down.", "author": "jagill", "createdAt": "2020-04-08T16:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3Nzg1Nw=="}], "type": "inlineReview"}, {"oid": "723e9d8a329a507de6849bd3c3192e35204b0196", "url": "https://github.com/prestodb/presto/commit/723e9d8a329a507de6849bd3c3192e35204b0196", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-08T15:24:50Z", "type": "forcePushed"}, {"oid": "957ca54284285678130c518b036bfeba8fb189bc", "url": "https://github.com/prestodb/presto/commit/957ca54284285678130c518b036bfeba8fb189bc", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-08T15:28:54Z", "type": "forcePushed"}, {"oid": "1bc7af46d823df28f19937fe0c590bba6d5bdb32", "url": "https://github.com/prestodb/presto/commit/1bc7af46d823df28f19937fe0c590bba6d5bdb32", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-08T16:37:29Z", "type": "forcePushed"}, {"oid": "34e79e5bf342ef2e02629d2d8a33b62e425a51d3", "url": "https://github.com/prestodb/presto/commit/34e79e5bf342ef2e02629d2d8a33b62e425a51d3", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-08T16:39:21Z", "type": "commit"}, {"oid": "34e79e5bf342ef2e02629d2d8a33b62e425a51d3", "url": "https://github.com/prestodb/presto/commit/34e79e5bf342ef2e02629d2d8a33b62e425a51d3", "message": "Add ST_Centroid for points and multipoints on a sphere", "committedDate": "2020-04-08T16:39:21Z", "type": "forcePushed"}]}