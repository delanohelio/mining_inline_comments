{"pr_number": 14095, "pr_title": "Add soft affinity in scheduling bucketed split for Hive Connector", "pr_createdAt": "2020-02-13T08:45:08Z", "pr_url": "https://github.com/prestodb/presto/pull/14095", "timeline": [{"oid": "7200e44e194304de3864d1315b273a846c95c788", "url": "https://github.com/prestodb/presto/commit/7200e44e194304de3864d1315b273a846c95c788", "message": "Add SoftAffinityNodeSelection ability for bucketed splits", "committedDate": "2020-02-14T02:39:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyNzc0OA==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r379227748", "bodyText": "break a line", "author": "highker", "createdAt": "2020-02-14T02:49:28Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotNodePartitioningProvider.java", "diffHunk": "@@ -32,7 +33,7 @@\n     public ConnectorBucketNodeMap getBucketNodeMap(\n             ConnectorTransactionHandle transactionHandle,\n             ConnectorSession session,\n-            ConnectorPartitioningHandle partitioningHandle)\n+            ConnectorPartitioningHandle partitioningHandle, List<Node> sortedNodes)", "originalCommit": "7200e44e194304de3864d1315b273a846c95c788", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1MzE1MQ==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r379553151", "bodyText": "Since we are already splitting this from the #13966 , let's make sure we don't create a FixedBucketNodeMap for SOFT_AFFINITY so it would play well with DynamicLifespanScheduler, and thus this pull request is self-consistent. Basically we need the functionality in DynamicBucketNodeMap to be able to accept a map as initial state and allow further updates to the map as scheduler sees fit.", "author": "shixuan-fan", "createdAt": "2020-02-14T17:26:31Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -151,21 +165,30 @@ public NodePartitionMap getNodePartitioningMap(Session session, PartitioningHand\n \n     public BucketNodeMap getBucketNodeMap(Session session, PartitioningHandle partitioningHandle, boolean preferDynamic)\n     {\n-        ConnectorBucketNodeMap connectorBucketNodeMap = getConnectorBucketNodeMap(session, partitioningHandle);\n-\n-        if (connectorBucketNodeMap.hasFixedMapping()) {\n-            return new FixedBucketNodeMap(getSplitToBucket(session, partitioningHandle), getFixedMapping(connectorBucketNodeMap));\n-        }\n-\n-        if (preferDynamic) {\n-            return new DynamicBucketNodeMap(getSplitToBucket(session, partitioningHandle), connectorBucketNodeMap.getBucketCount());\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+        List<Node> sortedNodes = sortedNodes(connectorId);\n+\n+        ConnectorBucketNodeMap connectorBucketNodeMap = getConnectorBucketNodeMap(session, partitioningHandle, sortedNodes);\n+\n+        NodeSelectionStrategy nodeSelectionStrategy = connectorBucketNodeMap.getNodeSelectionStrategy();\n+        switch (nodeSelectionStrategy) {\n+            case HARD_AFFINITY:\n+            case SOFT_AFFINITY:\n+                // todo for soft affinity, we need to add logic if preferDynamic is true", "originalCommit": "7200e44e194304de3864d1315b273a846c95c788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODQwMQ==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382728401", "bodyText": "Consider removing TODO here assuming it is supported in the following commit?", "author": "shixuan-fan", "createdAt": "2020-02-21T18:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1MzE1MQ=="}], "type": "inlineReview"}, {"oid": "6fc2e1734ef97a1966d6fb74a40dde2221b4d986", "url": "https://github.com/prestodb/presto/commit/6fc2e1734ef97a1966d6fb74a40dde2221b4d986", "message": "Add dynamic schedule logic in soft affinity for bucketed splits", "committedDate": "2020-02-18T07:12:59Z", "type": "forcePushed"}, {"oid": "586776b22c337a768e330278538b44907e48f018", "url": "https://github.com/prestodb/presto/commit/586776b22c337a768e330278538b44907e48f018", "message": "Add dynamic schedule logic in soft affinity for bucketed splits", "committedDate": "2020-02-18T20:48:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NzE4Mg==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r380867182", "bodyText": "nit: this.fixedMappingNodes = Optional.of(requireNonNull(fixedMappingNodes, \"fixedMappingNodes is null\"));", "author": "shixuan-fan", "createdAt": "2020-02-18T18:52:09Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -30,12 +32,23 @@\n {\n     private final int bucketCount;\n     private final Int2ObjectMap<InternalNode> bucketToNode = new Int2ObjectOpenHashMap<>();\n+    private final Optional<List<InternalNode>> fixedMappingNodes;\n \n     public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount)\n     {\n         super(splitToBucket);\n         checkArgument(bucketCount > 0, \"bucketCount must be positive\");\n         this.bucketCount = bucketCount;\n+        this.fixedMappingNodes = Optional.empty();\n+    }\n+\n+    public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount, List<InternalNode> fixedMappingNodes)\n+    {\n+        super(splitToBucket);\n+        checkArgument(bucketCount > 0, \"bucketCount must be positive\");\n+        this.bucketCount = bucketCount;\n+        requireNonNull(fixedMappingNodes, \"fixedMappingNodes is null\");\n+        this.fixedMappingNodes = Optional.of(fixedMappingNodes);", "originalCommit": "6fc2e1734ef97a1966d6fb74a40dde2221b4d986", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3MDY0Mg==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r380870642", "bodyText": "I don't think this is correct because nodeByTaskId is mapped by task id, yet bucketToNode is mapped by buckets. In most cases one task would handle multiple buckets sequentially, at least in facebook's setup.\nThe expected changes should happen in scheduleInitial and schedule. Basically when try to assign a driverGroup (i.e. worker concept of hive bucket), try to first check bucketNodeMap to find a preferred node. If the task on that node failed, then just select a random node.", "author": "shixuan-fan", "createdAt": "2020-02-18T18:58:25Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -73,7 +73,12 @@ public DynamicLifespanScheduler(\n             OptionalInt concurrentLifespansPerTask)\n     {\n         this.bucketNodeMap = requireNonNull(bucketNodeMap, \"bucketNodeMap is null\");\n-        this.nodeByTaskId = requireNonNull(nodeByTaskId, \"nodeByTaskId is null\");\n+        if (bucketNodeMap.isDynamic() && bucketNodeMap.getBucketToNode().size() != 0) {", "originalCommit": "6fc2e1734ef97a1966d6fb74a40dde2221b4d986", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c07b2c397314df3a5cd76920934328d84b0c783", "url": "https://github.com/prestodb/presto/commit/8c07b2c397314df3a5cd76920934328d84b0c783", "message": "Add SoftAffinity ability for bucketed splits on engine side", "committedDate": "2020-02-18T20:48:54Z", "type": "forcePushed"}, {"oid": "bf37435a828a645e2b4bf2b3fc1f9c5fc6c9084d", "url": "https://github.com/prestodb/presto/commit/bf37435a828a645e2b4bf2b3fc1f9c5fc6c9084d", "message": "Add dynamic schedule logic in soft affinity for bucketed splits", "committedDate": "2020-02-21T00:27:20Z", "type": "forcePushed"}, {"oid": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "url": "https://github.com/prestodb/presto/commit/daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "message": "Add dynamic schedule logic in soft affinity for bucketed splits", "committedDate": "2020-02-21T00:38:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjkyNA==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382732924", "bodyText": "nit: bucketToNodeList is a bit ambiguous given we already have bucketToNode. How about BucketToPreferredNode?", "author": "shixuan-fan", "createdAt": "2020-02-21T18:19:41Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicBucketNodeMap.java", "diffHunk": "@@ -38,6 +39,17 @@ public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount)\n         this.bucketCount = bucketCount;\n     }\n \n+    public DynamicBucketNodeMap(ToIntFunction<Split> splitToBucket, int bucketCount, List<InternalNode> bucketToNodeList)", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNDA1Mg==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382734052", "bodyText": "Maybe this should be a local variable?", "author": "shixuan-fan", "createdAt": "2020-02-21T18:22:03Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -45,12 +49,14 @@\n \n     private final BucketNodeMap bucketNodeMap;\n     private final List<InternalNode> nodeByTaskId;\n+    private final Set<InternalNode> nodeSet;", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNDQ0Mw==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382734443", "bodyText": "How about nodeToPreferredDriverGroupQueue?", "author": "shixuan-fan", "createdAt": "2020-02-21T18:22:59Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -45,12 +49,14 @@\n \n     private final BucketNodeMap bucketNodeMap;\n     private final List<InternalNode> nodeByTaskId;\n+    private final Set<InternalNode> nodeSet;\n     private final List<ConnectorPartitionHandle> partitionHandles;\n     private final OptionalInt concurrentLifespansPerTask;\n \n     private final IntSet[] runningDriverGroupIdsByTask;\n     private final int[] taskByDriverGroup;\n-    private final IntArrayFIFOQueue driverGroupQueue;\n+    private final IntArrayFIFOQueue driverGroupNoPreferenceQueue;\n+    private final Map<InternalNode, IntArrayFIFOQueue> driverGroupWithPreferenceMapQueue;", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczOTE1Mg==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382739152", "bodyText": "This seems to be a bit inefficient when there is no preferredNodes, which is the default setting. Could we instead iterate on nodes? We probably would need to have a reverse mapping (node -> buckets) in DynamicBucketNodeMap.", "author": "shixuan-fan", "createdAt": "2020-02-21T18:33:04Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -87,11 +94,23 @@ public DynamicLifespanScheduler(\n             runningDriverGroupIdsByTask[i] = new IntOpenHashSet();\n         }\n         this.taskByDriverGroup = new int[bucketCount];\n-        this.driverGroupQueue = new IntArrayFIFOQueue(bucketCount);\n         for (int i = 0; i < bucketCount; i++) {\n             taskByDriverGroup[i] = NOT_ASSIGNED;\n-            driverGroupQueue.enqueue(i);\n         }\n+\n+        this.driverGroupNoPreferenceQueue = new IntArrayFIFOQueue();\n+        this.driverGroupWithPreferenceMapQueue = new HashMap<>();\n+        for (int driverGroup = 0; driverGroup < bucketCount; driverGroup++) {", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDcwMg==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382740702", "bodyText": "Instead of magical -1, how about returning OptionalInt?", "author": "shixuan-fan", "createdAt": "2020-02-21T18:36:34Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -102,14 +121,16 @@ public void scheduleInitial(SourceScheduler scheduler)\n \n         int driverGroupsScheduledPerTask = 0;\n         synchronized (this) {\n-            while (!driverGroupQueue.isEmpty()) {\n-                for (int i = 0; i < nodeByTaskId.size() && !driverGroupQueue.isEmpty(); i++) {\n-                    int driverGroupId = driverGroupQueue.dequeueInt();\n-                    checkState(!bucketNodeMap.getAssignedNode(driverGroupId).isPresent());\n-                    bucketNodeMap.assignOrUpdateBucketToNode(driverGroupId, nodeByTaskId.get(i));\n+            while (!driverGroupNoPreferenceQueue.isEmpty() || !driverGroupWithPreferenceMapQueue.isEmpty()) {\n+                for (int taskId = 0; taskId < nodeByTaskId.size() && (!driverGroupNoPreferenceQueue.isEmpty() || !driverGroupWithPreferenceMapQueue.isEmpty()); taskId++) {\n+                    InternalNode node = nodeByTaskId.get(taskId);\n+                    int driverGroupId = pickDriverGroupForNode(node);\n+                    if (driverGroupId == -1) {", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzI0MQ==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382743241", "bodyText": "Let's write it in this way:\nif (nodeToPreferredDriverGroupQueue.containsKey(nodeByTaskId.get(taskId)) {\n  Queue<...> preferredDriverGroupQueue = nodeToPreferredDriverGroupQueue.get(...);\n  while (!preferredDriverGroupQueue.isEmpty()) {\n    driverGroupNoPreferenceQueue.enqueue(preferredDriverGroupQueue.deque());\n  }\n}\n\nAlso add a comment explaining what the purpose is for this piece of code :)", "author": "shixuan-fan", "createdAt": "2020-02-21T18:42:13Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -151,8 +172,12 @@ public void onTaskFailed(int taskId, List<SourceScheduler> sourceSchedulers)\n                 for (SourceScheduler sourceScheduler : sourceSchedulers) {\n                     sourceScheduler.rewindLifespan(Lifespan.driverGroup(driverGroupId), partitionHandles.get(driverGroupId));\n                 }\n-                driverGroupQueue.enqueue(driverGroupId);\n+                driverGroupNoPreferenceQueue.enqueue(driverGroupId);\n+            }\n+            while (driverGroupWithPreferenceMapQueue.get(nodeByTaskId.get(taskId)) != null && !driverGroupWithPreferenceMapQueue.get(nodeByTaskId.get(taskId)).isEmpty()) {", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4ODM2Nw==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382788367", "bodyText": "Let's make it clearer, for example:\nTODO: After initial scheduling, tasks would only be available after they finished at least one bucket. This is not necessarily the case if the initial scheduling covered all buckets and the available slots is not fully utilized (concurrentLifespansPerTask is large or infinite). In this case if a task failed, the recovered driver groups have to wait for tasks to be available again after finishing at least one bucket, even though by definition of concurrentLifespansPerTask they are already available.", "author": "shixuan-fan", "createdAt": "2020-02-21T20:23:06Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -162,20 +187,23 @@ public SettableFuture schedule(SourceScheduler scheduler)\n     {\n         // Return a new future even if newDriverGroupReady has not finished.\n         // Returning the same SettableFuture instance could lead to ListenableFuture retaining too many listener objects.\n+        // todo resolve availableTasks being limited for unlimited execution", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MTAwMQ==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382791001", "bodyText": "How about naming this getNextDriverGroup?", "author": "shixuan-fan", "createdAt": "2020-02-21T20:29:42Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -189,4 +217,23 @@ public synchronized boolean allLifespanExecutionFinished()\n     {\n         return totalLifespanExecutionFinished == partitionHandles.size();\n     }\n+\n+    private int pickDriverGroupForNode(InternalNode node)", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MjYwNA==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r382792604", "bodyText": "Let's just put test introduced here into TestDynamicLifespanScheduler.", "author": "shixuan-fan", "createdAt": "2020-02-21T20:33:44Z", "path": "presto-main/src/test/java/com/facebook/presto/execution/scheduler/group/TestAffinityDynamicLifespanScheduler.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.group;\n+\n+import com.facebook.presto.client.NodeVersion;\n+import com.facebook.presto.execution.Lifespan;\n+import com.facebook.presto.execution.scheduler.BucketNodeMap;\n+import com.facebook.presto.execution.scheduler.ScheduleResult;\n+import com.facebook.presto.execution.scheduler.SourceScheduler;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.HostAddress;\n+import com.facebook.presto.spi.connector.ConnectorPartitionHandle;\n+import com.facebook.presto.spi.plan.PlanNodeId;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.OptionalInt;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.SOFT_AFFINITY;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestAffinityDynamicLifespanScheduler", "originalCommit": "daa9c786e6fd3d0e3545d507797f90f8b69e5a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "84ae8566d709c15f89d24a39ebc8a8a6360b027c", "url": "https://github.com/prestodb/presto/commit/84ae8566d709c15f89d24a39ebc8a8a6360b027c", "message": "Support sort affinity in DynamicLifespanScheduler", "committedDate": "2020-02-21T23:38:47Z", "type": "forcePushed"}, {"oid": "be7ccae82d0674e4f3a7905d03959b804ffef355", "url": "https://github.com/prestodb/presto/commit/be7ccae82d0674e4f3a7905d03959b804ffef355", "message": "Support sort affinity in DynamicLifespanScheduler", "committedDate": "2020-02-21T23:43:30Z", "type": "forcePushed"}, {"oid": "6d1908f0da88dd572989fb025281663e908d296e", "url": "https://github.com/prestodb/presto/commit/6d1908f0da88dd572989fb025281663e908d296e", "message": "Support soft affinity for bucketed splits", "committedDate": "2020-02-21T23:44:53Z", "type": "commit"}, {"oid": "4616b0f42e82132d66e96c17365e2dbbc1570a0c", "url": "https://github.com/prestodb/presto/commit/4616b0f42e82132d66e96c17365e2dbbc1570a0c", "message": "Support sort affinity in DynamicLifespanScheduler", "committedDate": "2020-02-21T23:45:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MDQ4OA==", "url": "https://github.com/prestodb/presto/pull/14095#discussion_r383440488", "bodyText": "nit: Let's follow the other comments' pattern and capitalize the first character of the sentence :)", "author": "shixuan-fan", "createdAt": "2020-02-24T18:36:08Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/group/DynamicLifespanScheduler.java", "diffHunk": "@@ -151,8 +167,19 @@ public void onTaskFailed(int taskId, List<SourceScheduler> sourceSchedulers)\n                 for (SourceScheduler sourceScheduler : sourceSchedulers) {\n                     sourceScheduler.rewindLifespan(Lifespan.driverGroup(driverGroupId), partitionHandles.get(driverGroupId));\n                 }\n-                driverGroupQueue.enqueue(driverGroupId);\n+                noPreferenceDriverGroups.enqueue(driverGroupId);\n+            }\n+\n+            // when a task fails, all driverGroups that prefer this task/node would be not able to execute", "originalCommit": "4616b0f42e82132d66e96c17365e2dbbc1570a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9fcd9430a8c086bdc88d37ebd8cbbd83e3932bce", "url": "https://github.com/prestodb/presto/commit/9fcd9430a8c086bdc88d37ebd8cbbd83e3932bce", "message": "Support soft affinity in DynamicLifespanScheduler", "committedDate": "2020-02-24T18:44:35Z", "type": "commit"}, {"oid": "9fcd9430a8c086bdc88d37ebd8cbbd83e3932bce", "url": "https://github.com/prestodb/presto/commit/9fcd9430a8c086bdc88d37ebd8cbbd83e3932bce", "message": "Support soft affinity in DynamicLifespanScheduler", "committedDate": "2020-02-24T18:44:35Z", "type": "forcePushed"}]}