{"pr_number": 14836, "pr_title": "Implement ORDER BY spilling", "pr_createdAt": "2020-07-13T22:39:07Z", "pr_url": "https://github.com/prestodb/presto/pull/14836", "timeline": [{"oid": "b5ba14420f8299181c88925d5caf9465567ff99a", "url": "https://github.com/prestodb/presto/commit/b5ba14420f8299181c88925d5caf9465567ff99a", "message": "Extract order by queries tests to separate class\nCherry-pick of https://github.com/prestosql/presto/commit/94b4d0a42f8c86b95b6c3664c5cd83b6eab7297a Co-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-13T23:30:31Z", "type": "forcePushed"}, {"oid": "fbb49765c6ebb152726b14dffb7acaebfe5156a4", "url": "https://github.com/prestodb/presto/commit/fbb49765c6ebb152726b14dffb7acaebfe5156a4", "message": "Extract order by queries tests to separate class\nCherry-pick of https://github.com/prestosql/presto/commit/94b4d0a42f8c86b95b6c3664c5cd83b6eab7297a Co-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-13T23:31:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczOTU5OA==", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r456739598", "bodyText": "The entire commit \"Add feature toggle for ORDER BY spill\" doesn't seem to be necessary given the existing join spilling is buggy. So the legacy spilling doesn't work anyway. No need to use another guard.", "author": "highker", "createdAt": "2020-07-18T02:49:40Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -113,6 +113,7 @@\n     public static final String FAST_INEQUALITY_JOINS = \"fast_inequality_joins\";\n     public static final String QUERY_PRIORITY = \"query_priority\";\n     public static final String SPILL_ENABLED = \"spill_enabled\";\n+    public static final String SPILL_ORDER_BY = \"spill_order_by\";", "originalCommit": "2d0a5a40091558f28ccaf42304aeccf0cc88a342", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MDcxMw==", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r456740713", "bodyText": "i++", "author": "highker", "createdAt": "2020-07-18T03:03:57Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "diffHunk": "@@ -41,44 +43,91 @@\n import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.operator.OperatorAssertion.assertOperatorEquals;\n+import static com.facebook.presto.operator.OperatorAssertion.toMaterializedResult;\n import static com.facebook.presto.operator.OperatorAssertion.toPages;\n import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static com.facebook.presto.testing.TestingTaskContext.createTaskContext;\n+import static io.airlift.units.DataSize.succinctBytes;\n+import static java.lang.String.format;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.Executors.newScheduledThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n \n @Test(singleThreaded = true)\n public class TestOrderByOperator\n {\n     private ExecutorService executor;\n     private ScheduledExecutorService scheduledExecutor;\n-    private DriverContext driverContext;\n+    private DummySpillerFactory spillerFactory;\n \n     @DataProvider\n     public static Object[][] spillEnabled()\n     {\n-        return new Object[][] {{false}, {true}};\n+        return new Object[][] {\n+                {false, false, 0},\n+                {true, false, 8},\n+                {true, true, 8},\n+                {true, false, 0},\n+                {true, true, 0}};\n     }\n \n     @BeforeMethod\n     public void setUp()\n     {\n         executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n         scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n-        driverContext = createTaskContext(executor, scheduledExecutor, TEST_SESSION)\n-                .addPipelineContext(0, true, true, false)\n-                .addDriverContext();\n+        spillerFactory = new DummySpillerFactory();\n     }\n \n     @AfterMethod\n     public void tearDown()\n     {\n         executor.shutdownNow();\n         scheduledExecutor.shutdownNow();\n+        spillerFactory = null;\n     }\n \n     @Test(dataProvider = \"spillEnabled\")\n-    public void testSingleFieldKey(boolean spillEnabled)\n+    public void testMultipleOutputPages(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)\n+    {\n+        // make operator produce multiple pages during finish phase\n+        int numberOfRows = 80_000;\n+        List<Page> input = rowPagesBuilder(BIGINT, DOUBLE)\n+                .addSequencePage(numberOfRows, 0, 0)\n+                .build();\n+\n+        OrderByOperatorFactory operatorFactory = new OrderByOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BIGINT, DOUBLE),\n+                ImmutableList.of(1),\n+                10,\n+                ImmutableList.of(0),\n+                ImmutableList.of(DESC_NULLS_LAST),\n+                new PagesIndex.TestingFactory(false),\n+                spillEnabled,\n+                Optional.of(spillerFactory),\n+                new OrderingCompiler());\n+\n+        DriverContext driverContext = createDriverContext(memoryLimit);\n+        MaterializedResult.Builder expectedBuilder = resultBuilder(driverContext.getSession(), DOUBLE);\n+        for (int i = 0; i < numberOfRows; ++i) {", "originalCommit": "44e5153db0cb439a59bd483774022a418990fef8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MDcyOA==", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r456740728", "bodyText": "assertEquals", "author": "highker", "createdAt": "2020-07-18T03:04:28Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "diffHunk": "@@ -41,44 +43,91 @@\n import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.operator.OperatorAssertion.assertOperatorEquals;\n+import static com.facebook.presto.operator.OperatorAssertion.toMaterializedResult;\n import static com.facebook.presto.operator.OperatorAssertion.toPages;\n import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static com.facebook.presto.testing.TestingTaskContext.createTaskContext;\n+import static io.airlift.units.DataSize.succinctBytes;\n+import static java.lang.String.format;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.Executors.newScheduledThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n \n @Test(singleThreaded = true)\n public class TestOrderByOperator\n {\n     private ExecutorService executor;\n     private ScheduledExecutorService scheduledExecutor;\n-    private DriverContext driverContext;\n+    private DummySpillerFactory spillerFactory;\n \n     @DataProvider\n     public static Object[][] spillEnabled()\n     {\n-        return new Object[][] {{false}, {true}};\n+        return new Object[][] {\n+                {false, false, 0},\n+                {true, false, 8},\n+                {true, true, 8},\n+                {true, false, 0},\n+                {true, true, 0}};\n     }\n \n     @BeforeMethod\n     public void setUp()\n     {\n         executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n         scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n-        driverContext = createTaskContext(executor, scheduledExecutor, TEST_SESSION)\n-                .addPipelineContext(0, true, true, false)\n-                .addDriverContext();\n+        spillerFactory = new DummySpillerFactory();\n     }\n \n     @AfterMethod\n     public void tearDown()\n     {\n         executor.shutdownNow();\n         scheduledExecutor.shutdownNow();\n+        spillerFactory = null;\n     }\n \n     @Test(dataProvider = \"spillEnabled\")\n-    public void testSingleFieldKey(boolean spillEnabled)\n+    public void testMultipleOutputPages(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)\n+    {\n+        // make operator produce multiple pages during finish phase\n+        int numberOfRows = 80_000;\n+        List<Page> input = rowPagesBuilder(BIGINT, DOUBLE)\n+                .addSequencePage(numberOfRows, 0, 0)\n+                .build();\n+\n+        OrderByOperatorFactory operatorFactory = new OrderByOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BIGINT, DOUBLE),\n+                ImmutableList.of(1),\n+                10,\n+                ImmutableList.of(0),\n+                ImmutableList.of(DESC_NULLS_LAST),\n+                new PagesIndex.TestingFactory(false),\n+                spillEnabled,\n+                Optional.of(spillerFactory),\n+                new OrderingCompiler());\n+\n+        DriverContext driverContext = createDriverContext(memoryLimit);\n+        MaterializedResult.Builder expectedBuilder = resultBuilder(driverContext.getSession(), DOUBLE);\n+        for (int i = 0; i < numberOfRows; ++i) {\n+            expectedBuilder.row((double) numberOfRows - i - 1);\n+        }\n+        MaterializedResult expected = expectedBuilder.build();\n+\n+        List<Page> pages = toPages(operatorFactory, driverContext, input, revokeMemoryWhenAddingPages);\n+        assertGreaterThan(pages.size(), 1, \"Expected more than one output page\");\n+\n+        MaterializedResult actual = toMaterializedResult(driverContext.getSession(), expected.getTypes(), pages);\n+        assertEquals(actual.getMaterializedRows(), expected.getMaterializedRows());\n+\n+        assertTrue(spillEnabled == (spillerFactory.getSpillsCount() > 0), format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()));", "originalCommit": "44e5153db0cb439a59bd483774022a418990fef8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "155efc31477748123999c3f5ad261314ffce30e5", "url": "https://github.com/prestodb/presto/commit/155efc31477748123999c3f5ad261314ffce30e5", "message": "Extract order by queries tests to separate class\nCherry-pick of https://github.com/prestosql/presto/commit/94b4d0a42f8c86b95b6c3664c5cd83b6eab7297a Co-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-22T21:32:42Z", "type": "forcePushed"}, {"oid": "11e84aeaead1aa8dff19b467deebe952cfdefdc5", "url": "https://github.com/prestodb/presto/commit/11e84aeaead1aa8dff19b467deebe952cfdefdc5", "message": "Extract order by queries tests to separate class\n\nCherry-pick of https://github.com/prestosql/presto/commit/94b4d0a42f8c86b95b6c3664c5cd83b6eab7297a\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-22T21:38:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNTM5NQ==", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r459115395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(spillEnabled, spillerFactory.getSpillsCount() > 0, format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()))\n          \n          \n            \n                    ;\n          \n          \n            \n                    assertEquals(spillEnabled, spillerFactory.getSpillsCount() > 0, format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()));", "author": "tdcmeehan", "createdAt": "2020-07-22T22:18:12Z", "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "diffHunk": "@@ -41,44 +43,91 @@\n import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.operator.OperatorAssertion.assertOperatorEquals;\n+import static com.facebook.presto.operator.OperatorAssertion.toMaterializedResult;\n import static com.facebook.presto.operator.OperatorAssertion.toPages;\n import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static com.facebook.presto.testing.TestingTaskContext.createTaskContext;\n+import static io.airlift.units.DataSize.succinctBytes;\n+import static java.lang.String.format;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.Executors.newScheduledThreadPool;\n+import static org.testng.Assert.assertEquals;\n \n @Test(singleThreaded = true)\n public class TestOrderByOperator\n {\n     private ExecutorService executor;\n     private ScheduledExecutorService scheduledExecutor;\n-    private DriverContext driverContext;\n+    private DummySpillerFactory spillerFactory;\n \n     @DataProvider\n     public static Object[][] spillEnabled()\n     {\n-        return new Object[][] {{false}, {true}};\n+        return new Object[][] {\n+                {false, false, 0},\n+                {true, false, 8},\n+                {true, true, 8},\n+                {true, false, 0},\n+                {true, true, 0}};\n     }\n \n     @BeforeMethod\n     public void setUp()\n     {\n         executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n         scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n-        driverContext = createTaskContext(executor, scheduledExecutor, TEST_SESSION)\n-                .addPipelineContext(0, true, true, false)\n-                .addDriverContext();\n+        spillerFactory = new DummySpillerFactory();\n     }\n \n     @AfterMethod\n     public void tearDown()\n     {\n         executor.shutdownNow();\n         scheduledExecutor.shutdownNow();\n+        spillerFactory = null;\n     }\n \n     @Test(dataProvider = \"spillEnabled\")\n-    public void testSingleFieldKey(boolean spillEnabled)\n+    public void testMultipleOutputPages(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)\n+    {\n+        // make operator produce multiple pages during finish phase\n+        int numberOfRows = 80_000;\n+        List<Page> input = rowPagesBuilder(BIGINT, DOUBLE)\n+                .addSequencePage(numberOfRows, 0, 0)\n+                .build();\n+\n+        OrderByOperatorFactory operatorFactory = new OrderByOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BIGINT, DOUBLE),\n+                ImmutableList.of(1),\n+                10,\n+                ImmutableList.of(0),\n+                ImmutableList.of(DESC_NULLS_LAST),\n+                new PagesIndex.TestingFactory(false),\n+                spillEnabled,\n+                Optional.of(spillerFactory),\n+                new OrderingCompiler());\n+\n+        DriverContext driverContext = createDriverContext(memoryLimit);\n+        MaterializedResult.Builder expectedBuilder = resultBuilder(driverContext.getSession(), DOUBLE);\n+        for (int i = 0; i < numberOfRows; i++) {\n+            expectedBuilder.row((double) numberOfRows - i - 1);\n+        }\n+        MaterializedResult expected = expectedBuilder.build();\n+\n+        List<Page> pages = toPages(operatorFactory, driverContext, input, revokeMemoryWhenAddingPages);\n+        assertGreaterThan(pages.size(), 1, \"Expected more than one output page\");\n+\n+        MaterializedResult actual = toMaterializedResult(driverContext.getSession(), expected.getTypes(), pages);\n+        assertEquals(actual.getMaterializedRows(), expected.getMaterializedRows());\n+\n+        assertEquals(spillEnabled, spillerFactory.getSpillsCount() > 0, format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()))\n+        ;", "originalCommit": "216455e336e1490d68346f58dc97dc0de8297acf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNjY3OQ==", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r459116679", "bodyText": "Should this be squashed with Add Spill To Disk for ORDER BY?", "author": "tdcmeehan", "createdAt": "2020-07-22T22:21:08Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/OrderByOperator.java", "diffHunk": "@@ -380,5 +380,6 @@ public void close()\n     {\n         pageIndex.clear();\n         sortedPages = null;\n+        spiller.ifPresent(Spiller::close);", "originalCommit": "3fff9b1e02e40327099ca1d4e6882870993218a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNTMwNQ==", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r459625305", "bodyText": "I added this as a separate commit since it was a bug fixed in a later commit. However, that later commit also fixes the equivalent bug for window spilling. So, to make it explicit I just created a new commit. Can either squash this or leave it, no opinion on this.", "author": "sachdevs", "createdAt": "2020-07-23T17:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNjY3OQ=="}], "type": "inlineReview"}, {"oid": "d46f4827e3557cd9c391387d3d3f973ed465d646", "url": "https://github.com/prestodb/presto/commit/d46f4827e3557cd9c391387d3d3f973ed465d646", "message": "Close spiller on Operator#close for ORDER BY spilling", "committedDate": "2020-07-23T18:16:17Z", "type": "forcePushed"}, {"oid": "f2e6a83f4829388609da69997a97065748f01819", "url": "https://github.com/prestodb/presto/commit/f2e6a83f4829388609da69997a97065748f01819", "message": "Revoke memory after initial output page has been produced in tests\n\nCherry-pick of https://github.com/prestosql/presto/commit/0a9b8047f36fd22fd33193d1a9e3fea4e88efb4b\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "80890daea7f0528c99bc7e90bc31c0708eaa449d", "url": "https://github.com/prestodb/presto/commit/80890daea7f0528c99bc7e90bc31c0708eaa449d", "message": "Allow memory revoke only during operator finish phase\n\nCherry-pick of https://github.com/prestosql/presto/commit/5fef5aa58626286d2952a2008ee8598232cd954c\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "df4ae85b0dd0118713b7bf768efc26a5f2c58e28", "url": "https://github.com/prestodb/presto/commit/df4ae85b0dd0118713b7bf768efc26a5f2c58e28", "message": "Produce more than single page in testHashAggregation\n\nCherry-pick of https://github.com/prestosql/presto/commit/e69b66863126e8a82c62f5538d12a032a66dd662\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "9aa39fb4893a71c7ac2f2070e987d8f389918ee2", "url": "https://github.com/prestodb/presto/commit/9aa39fb4893a71c7ac2f2070e987d8f389918ee2", "message": "Extract DummySpillerFactory from TestHashAggregationOperator\n\nCherry-pick of https://github.com/prestosql/presto/commit/f01067ba9dda7f4a1bbcabcaf901b3c008969207\n\nCo-authored-by: Atri Sharma <atri@linux.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "3af951b6a96b219164f5b67aac1366d7615cb83e", "url": "https://github.com/prestodb/presto/commit/3af951b6a96b219164f5b67aac1366d7615cb83e", "message": "Use WorkProcessor in OrderByOperator\n\nCherry-pick of https://github.com/prestosql/presto/commit/e7d8dd5e7035520d1dbb7990803b51383cc11aae\n\nCo-authored-by: Piotr Findeisen <piotr.findeisen@gmail.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "e24359d19908df10d879164f4f64a3ee1e4a50ab", "url": "https://github.com/prestodb/presto/commit/e24359d19908df10d879164f4f64a3ee1e4a50ab", "message": "Add Spill To Disk for ORDER BY\nORDER BY currently will error out if the data being processed exceeds\nquery memory limit. This commit introduces paging from disk and ensures\nthat ORDER BY is limited only by the amount of disk present.\n\nCherry-pick of https://github.com/prestosql/presto/commit/24868b3481a974f3e068197d9c432788de9ddacb\n\nCo-authored-by: Piotr Findeisen <piotr.findeisen@gmail.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "52adeba9d527dce64ceeabeac3e4ac1dc5c642d7", "url": "https://github.com/prestodb/presto/commit/52adeba9d527dce64ceeabeac3e4ac1dc5c642d7", "message": "Use OrderingCompiler in OrderBy spilling\n\nCherry-pick of https://github.com/prestosql/presto/commit/472fb5ad36cb0e0fea0a2cf5f90e598b28ce01fe\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-23T20:24:47Z", "type": "commit"}, {"oid": "28962d5b23751ee4289698876c01c333fb5255e4", "url": "https://github.com/prestodb/presto/commit/28962d5b23751ee4289698876c01c333fb5255e4", "message": "Convert revocable memory to user memory on OrderBy finish\n\nCherry-pick of https://github.com/prestosql/presto/commit/d35e5fb834ef93ccadea5bf76739ab9e814e5eac\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-23T20:24:48Z", "type": "commit"}, {"oid": "1dc65c617652f0fd9bd2cd101fbeafd4d63a097b", "url": "https://github.com/prestodb/presto/commit/1dc65c617652f0fd9bd2cd101fbeafd4d63a097b", "message": "Extract order by queries tests to separate class\n\nCherry-pick of https://github.com/prestosql/presto/commit/94b4d0a42f8c86b95b6c3664c5cd83b6eab7297a\n\nCo-authored-by: Karol Sobczak <karol.sobczak@karolsobczak.com>", "committedDate": "2020-07-23T20:24:48Z", "type": "commit"}, {"oid": "13db5e5b137e06d6bee7081b8bd760b02040381e", "url": "https://github.com/prestodb/presto/commit/13db5e5b137e06d6bee7081b8bd760b02040381e", "message": "Close spiller on Operator#close for ORDER BY spilling", "committedDate": "2020-07-23T20:24:48Z", "type": "commit"}, {"oid": "13db5e5b137e06d6bee7081b8bd760b02040381e", "url": "https://github.com/prestodb/presto/commit/13db5e5b137e06d6bee7081b8bd760b02040381e", "message": "Close spiller on Operator#close for ORDER BY spilling", "committedDate": "2020-07-23T20:24:48Z", "type": "forcePushed"}]}