{"pr_number": 14793, "pr_title": "Fix bytecode generation for SQL functions", "pr_createdAt": "2020-07-06T23:03:19Z", "pr_url": "https://github.com/prestodb/presto/pull/14793", "timeline": [{"oid": "b60d657148d4e2403eb3df9960792bfeee442ac3", "url": "https://github.com/prestodb/presto/commit/b60d657148d4e2403eb3df9960792bfeee442ac3", "message": "Fix bytecode generation for SQL functions\n\nA lambda expression inside the body of a SQL function might have\nthe same argument name, as one of the arguments of the function\nitself. Bytecode generation fails in this case.\n\nExample:\nCREATE FUNCTION testing.test.array_sum(x array<int>) RETURNS int\nRETURN reduce(x, 0, (s, x) -> s + x, s -> s)\n\nHere \"x\" is an argument for both the function and the lambda\nexpression in the function body. This change fixes the bug by\nproperly scoping variables in the lambda expression body, so that\nthere is no conflict with variables of the same name defined\noutside the lambda expression's scope.", "committedDate": "2020-07-07T02:34:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDU1Mg==", "url": "https://github.com/prestodb/presto/pull/14793#discussion_r451824552", "bodyText": "You can write this with stream api as\ncontext.entrySet().stream()\n        .filter(entry -> !lambdaArguments.contains(entry.getKey()))\n        .collect(toImmutableMap(Entry::getKey, Entry::getValue)).", "author": "rongrong", "createdAt": "2020-07-08T21:04:43Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -239,6 +240,20 @@ public static RowExpression bindFunctionArguments(RowExpression function, List<O\n             }\n             return RowExpressionTreeRewriter.rewriteWith(new RowExpressionRewriter<Map<String, RowExpression>>()\n             {\n+                @Override\n+                public RowExpression rewriteLambda(LambdaDefinitionExpression lambda, Map<String, RowExpression> context, RowExpressionTreeRewriter<Map<String, RowExpression>> treeRewriter)\n+                {\n+                    List<String> lambdaArguments = lambda.getArguments();\n+                    ImmutableMap.Builder<String, RowExpression> lambdaContext = ImmutableMap.builder();\n+                    for (Map.Entry<String, RowExpression> entry : context.entrySet()) {", "originalCommit": "b60d657148d4e2403eb3df9960792bfeee442ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MDExMA==", "url": "https://github.com/prestodb/presto/pull/14793#discussion_r452460110", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-07-09T20:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDU1Mg=="}], "type": "inlineReview"}, {"oid": "3b05824ba863f93b448814e4edd618896ed3ebd4", "url": "https://github.com/prestodb/presto/commit/3b05824ba863f93b448814e4edd618896ed3ebd4", "message": "Fix bytecode generation for SQL functions\n\nA lambda expression inside the body of a SQL function might have\nthe same argument name, as one of the arguments of the function\nitself. Bytecode generation fails in this case.\n\nExample:\nCREATE FUNCTION testing.test.array_sum(x array<int>) RETURNS int\nRETURN reduce(x, 0, (s, x) -> s + x, s -> s)\n\nHere \"x\" is an argument for both the function and the lambda\nexpression in the function body. This change fixes the bug by\nproperly scoping variables in the lambda expression body, so that\nthere is no conflict with variables of the same name defined\noutside the lambda expression's scope.", "committedDate": "2020-07-09T20:04:43Z", "type": "commit"}, {"oid": "3b05824ba863f93b448814e4edd618896ed3ebd4", "url": "https://github.com/prestodb/presto/commit/3b05824ba863f93b448814e4edd618896ed3ebd4", "message": "Fix bytecode generation for SQL functions\n\nA lambda expression inside the body of a SQL function might have\nthe same argument name, as one of the arguments of the function\nitself. Bytecode generation fails in this case.\n\nExample:\nCREATE FUNCTION testing.test.array_sum(x array<int>) RETURNS int\nRETURN reduce(x, 0, (s, x) -> s + x, s -> s)\n\nHere \"x\" is an argument for both the function and the lambda\nexpression in the function body. This change fixes the bug by\nproperly scoping variables in the lambda expression body, so that\nthere is no conflict with variables of the same name defined\noutside the lambda expression's scope.", "committedDate": "2020-07-09T20:04:43Z", "type": "forcePushed"}]}