{"pr_number": 7827, "pr_title": "NodeDiffQuery - join #7768", "pr_createdAt": "2020-01-22T20:45:54Z", "pr_url": "https://github.com/enonic/xp/pull/7827", "timeline": [{"oid": "25a0c69254f3509ee18cfc81ec6418d2712af3d0", "url": "https://github.com/enonic/xp/commit/25a0c69254f3509ee18cfc81ec6418d2712af3d0", "message": "NodeDiffQuery - join #7768", "committedDate": "2020-01-22T20:44:08Z", "type": "commit"}, {"oid": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "url": "https://github.com/enonic/xp/commit/95fff6bfc22558201466fef13b0c03ff6fe31ea8", "message": "NodeDiffQuery - join #7768", "committedDate": "2020-01-22T21:01:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjI4Mg==", "url": "https://github.com/enonic/xp/pull/7827#discussion_r369802282", "bodyText": "Issue found: Name 'NON_PUBLISHED_NODES_ROOT' must match pattern '^[a-z][a-zA-Z0-9]*$'.", "author": "jsi", "createdAt": "2020-01-22T21:04:54Z", "path": "modules/perftest/perftest-core-repo/src/test/java/com/enonic/xp/repo/bootstrap/PerformanceTestBootstrap.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.enonic.xp.repo.bootstrap;\n+\n+import java.io.File;\n+\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.branch.Branches;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextAccessor;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.elasticsearch.client.impl.EsClient;\n+import com.enonic.xp.event.EventPublisher;\n+import com.enonic.xp.index.PatternIndexConfigDocument;\n+import com.enonic.xp.internal.blobstore.cache.CachedBlobStore;\n+import com.enonic.xp.internal.blobstore.file.FileBlobStore;\n+import com.enonic.xp.node.CreateNodeParams;\n+import com.enonic.xp.node.CreateRootNodeParams;\n+import com.enonic.xp.node.FindNodesByParentParams;\n+import com.enonic.xp.node.FindNodesByParentResult;\n+import com.enonic.xp.node.Node;\n+import com.enonic.xp.node.NodeBranchEntry;\n+import com.enonic.xp.node.NodeId;\n+import com.enonic.xp.node.NodeIds;\n+import com.enonic.xp.node.NodePath;\n+import com.enonic.xp.node.NodeVersionMetadata;\n+import com.enonic.xp.node.RefreshMode;\n+import com.enonic.xp.repo.impl.InternalContext;\n+import com.enonic.xp.repo.impl.binary.BinaryServiceImpl;\n+import com.enonic.xp.repo.impl.branch.storage.BranchServiceImpl;\n+import com.enonic.xp.repo.impl.commit.CommitServiceImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.IndexServiceInternalImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.search.SearchDaoImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.storage.StorageDaoImpl;\n+import com.enonic.xp.repo.impl.index.IndexServiceImpl;\n+import com.enonic.xp.repo.impl.node.CreateNodeCommand;\n+import com.enonic.xp.repo.impl.node.CreateRootNodeCommand;\n+import com.enonic.xp.repo.impl.node.HasUnpublishedChildrenCommand;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repo.impl.node.NodeServiceImpl;\n+import com.enonic.xp.repo.impl.node.ResolveSyncWorkCommand;\n+import com.enonic.xp.repo.impl.node.dao.NodeVersionServiceImpl;\n+import com.enonic.xp.repo.impl.repository.NodeRepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryEntryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.SystemRepoInitializer;\n+import com.enonic.xp.repo.impl.search.NodeSearchServiceImpl;\n+import com.enonic.xp.repo.impl.storage.IndexDataServiceImpl;\n+import com.enonic.xp.repo.impl.storage.NodeStorageServiceImpl;\n+import com.enonic.xp.repo.impl.version.VersionServiceImpl;\n+import com.enonic.xp.repository.CreateBranchParams;\n+import com.enonic.xp.repository.CreateRepositoryParams;\n+import com.enonic.xp.repository.Repository;\n+import com.enonic.xp.repository.RepositoryConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.acl.AccessControlEntry;\n+import com.enonic.xp.security.acl.AccessControlList;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class PerformanceTestBootstrap\n+{\n+    public static final User TEST_DEFAULT_USER =\n+        User.create().key( PrincipalKey.ofUser( IdProviderKey.system(), \"test-user\" ) ).login( \"test-user\" ).build();\n+\n+    protected static final Repository MY_REPO = Repository.create().\n+        id( RepositoryId.from( \"myrepo\" ) ).\n+        branches( Branches.from( ContentConstants.BRANCH_DRAFT, ContentConstants.BRANCH_MASTER ) ).\n+        build();\n+\n+    public static final Context CONTEXT_DRAFT = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_DRAFT ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    public static final Context CONTEXT_MASTER = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_MASTER ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    private final int NODE_SIZE = 22000;\n+\n+    protected Node ROOT_NODE;\n+\n+    protected Node NON_PUBLISHED_NODES_ROOT;", "originalCommit": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjI5Nw==", "url": "https://github.com/enonic/xp/pull/7827#discussion_r369802297", "bodyText": "Issue found: Name 'PUBLISHED_NODES_ROOT' must match pattern '^[a-z][a-zA-Z0-9]*$'.", "author": "jsi", "createdAt": "2020-01-22T21:04:56Z", "path": "modules/perftest/perftest-core-repo/src/test/java/com/enonic/xp/repo/bootstrap/PerformanceTestBootstrap.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.enonic.xp.repo.bootstrap;\n+\n+import java.io.File;\n+\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.branch.Branches;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextAccessor;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.elasticsearch.client.impl.EsClient;\n+import com.enonic.xp.event.EventPublisher;\n+import com.enonic.xp.index.PatternIndexConfigDocument;\n+import com.enonic.xp.internal.blobstore.cache.CachedBlobStore;\n+import com.enonic.xp.internal.blobstore.file.FileBlobStore;\n+import com.enonic.xp.node.CreateNodeParams;\n+import com.enonic.xp.node.CreateRootNodeParams;\n+import com.enonic.xp.node.FindNodesByParentParams;\n+import com.enonic.xp.node.FindNodesByParentResult;\n+import com.enonic.xp.node.Node;\n+import com.enonic.xp.node.NodeBranchEntry;\n+import com.enonic.xp.node.NodeId;\n+import com.enonic.xp.node.NodeIds;\n+import com.enonic.xp.node.NodePath;\n+import com.enonic.xp.node.NodeVersionMetadata;\n+import com.enonic.xp.node.RefreshMode;\n+import com.enonic.xp.repo.impl.InternalContext;\n+import com.enonic.xp.repo.impl.binary.BinaryServiceImpl;\n+import com.enonic.xp.repo.impl.branch.storage.BranchServiceImpl;\n+import com.enonic.xp.repo.impl.commit.CommitServiceImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.IndexServiceInternalImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.search.SearchDaoImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.storage.StorageDaoImpl;\n+import com.enonic.xp.repo.impl.index.IndexServiceImpl;\n+import com.enonic.xp.repo.impl.node.CreateNodeCommand;\n+import com.enonic.xp.repo.impl.node.CreateRootNodeCommand;\n+import com.enonic.xp.repo.impl.node.HasUnpublishedChildrenCommand;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repo.impl.node.NodeServiceImpl;\n+import com.enonic.xp.repo.impl.node.ResolveSyncWorkCommand;\n+import com.enonic.xp.repo.impl.node.dao.NodeVersionServiceImpl;\n+import com.enonic.xp.repo.impl.repository.NodeRepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryEntryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.SystemRepoInitializer;\n+import com.enonic.xp.repo.impl.search.NodeSearchServiceImpl;\n+import com.enonic.xp.repo.impl.storage.IndexDataServiceImpl;\n+import com.enonic.xp.repo.impl.storage.NodeStorageServiceImpl;\n+import com.enonic.xp.repo.impl.version.VersionServiceImpl;\n+import com.enonic.xp.repository.CreateBranchParams;\n+import com.enonic.xp.repository.CreateRepositoryParams;\n+import com.enonic.xp.repository.Repository;\n+import com.enonic.xp.repository.RepositoryConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.acl.AccessControlEntry;\n+import com.enonic.xp.security.acl.AccessControlList;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class PerformanceTestBootstrap\n+{\n+    public static final User TEST_DEFAULT_USER =\n+        User.create().key( PrincipalKey.ofUser( IdProviderKey.system(), \"test-user\" ) ).login( \"test-user\" ).build();\n+\n+    protected static final Repository MY_REPO = Repository.create().\n+        id( RepositoryId.from( \"myrepo\" ) ).\n+        branches( Branches.from( ContentConstants.BRANCH_DRAFT, ContentConstants.BRANCH_MASTER ) ).\n+        build();\n+\n+    public static final Context CONTEXT_DRAFT = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_DRAFT ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    public static final Context CONTEXT_MASTER = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_MASTER ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    private final int NODE_SIZE = 22000;\n+\n+    protected Node ROOT_NODE;\n+\n+    protected Node NON_PUBLISHED_NODES_ROOT;\n+\n+    protected Node HALF_PUBLISHED_NODES_ROOT;\n+\n+    protected Node PUBLISHED_NODES_ROOT;", "originalCommit": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjMwNQ==", "url": "https://github.com/enonic/xp/pull/7827#discussion_r369802305", "bodyText": "Issue found: Name 'HALF_PUBLISHED_NODES_ROOT' must match pattern '^[a-z][a-zA-Z0-9]*$'.", "author": "jsi", "createdAt": "2020-01-22T21:04:57Z", "path": "modules/perftest/perftest-core-repo/src/test/java/com/enonic/xp/repo/bootstrap/PerformanceTestBootstrap.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.enonic.xp.repo.bootstrap;\n+\n+import java.io.File;\n+\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.branch.Branches;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextAccessor;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.elasticsearch.client.impl.EsClient;\n+import com.enonic.xp.event.EventPublisher;\n+import com.enonic.xp.index.PatternIndexConfigDocument;\n+import com.enonic.xp.internal.blobstore.cache.CachedBlobStore;\n+import com.enonic.xp.internal.blobstore.file.FileBlobStore;\n+import com.enonic.xp.node.CreateNodeParams;\n+import com.enonic.xp.node.CreateRootNodeParams;\n+import com.enonic.xp.node.FindNodesByParentParams;\n+import com.enonic.xp.node.FindNodesByParentResult;\n+import com.enonic.xp.node.Node;\n+import com.enonic.xp.node.NodeBranchEntry;\n+import com.enonic.xp.node.NodeId;\n+import com.enonic.xp.node.NodeIds;\n+import com.enonic.xp.node.NodePath;\n+import com.enonic.xp.node.NodeVersionMetadata;\n+import com.enonic.xp.node.RefreshMode;\n+import com.enonic.xp.repo.impl.InternalContext;\n+import com.enonic.xp.repo.impl.binary.BinaryServiceImpl;\n+import com.enonic.xp.repo.impl.branch.storage.BranchServiceImpl;\n+import com.enonic.xp.repo.impl.commit.CommitServiceImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.IndexServiceInternalImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.search.SearchDaoImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.storage.StorageDaoImpl;\n+import com.enonic.xp.repo.impl.index.IndexServiceImpl;\n+import com.enonic.xp.repo.impl.node.CreateNodeCommand;\n+import com.enonic.xp.repo.impl.node.CreateRootNodeCommand;\n+import com.enonic.xp.repo.impl.node.HasUnpublishedChildrenCommand;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repo.impl.node.NodeServiceImpl;\n+import com.enonic.xp.repo.impl.node.ResolveSyncWorkCommand;\n+import com.enonic.xp.repo.impl.node.dao.NodeVersionServiceImpl;\n+import com.enonic.xp.repo.impl.repository.NodeRepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryEntryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.SystemRepoInitializer;\n+import com.enonic.xp.repo.impl.search.NodeSearchServiceImpl;\n+import com.enonic.xp.repo.impl.storage.IndexDataServiceImpl;\n+import com.enonic.xp.repo.impl.storage.NodeStorageServiceImpl;\n+import com.enonic.xp.repo.impl.version.VersionServiceImpl;\n+import com.enonic.xp.repository.CreateBranchParams;\n+import com.enonic.xp.repository.CreateRepositoryParams;\n+import com.enonic.xp.repository.Repository;\n+import com.enonic.xp.repository.RepositoryConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.acl.AccessControlEntry;\n+import com.enonic.xp.security.acl.AccessControlList;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class PerformanceTestBootstrap\n+{\n+    public static final User TEST_DEFAULT_USER =\n+        User.create().key( PrincipalKey.ofUser( IdProviderKey.system(), \"test-user\" ) ).login( \"test-user\" ).build();\n+\n+    protected static final Repository MY_REPO = Repository.create().\n+        id( RepositoryId.from( \"myrepo\" ) ).\n+        branches( Branches.from( ContentConstants.BRANCH_DRAFT, ContentConstants.BRANCH_MASTER ) ).\n+        build();\n+\n+    public static final Context CONTEXT_DRAFT = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_DRAFT ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    public static final Context CONTEXT_MASTER = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_MASTER ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    private final int NODE_SIZE = 22000;\n+\n+    protected Node ROOT_NODE;\n+\n+    protected Node NON_PUBLISHED_NODES_ROOT;\n+\n+    protected Node HALF_PUBLISHED_NODES_ROOT;", "originalCommit": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjMxNQ==", "url": "https://github.com/enonic/xp/pull/7827#discussion_r369802315", "bodyText": "Issue found: Name 'ROOT_NODE' must match pattern '^[a-z][a-zA-Z0-9]*$'.", "author": "jsi", "createdAt": "2020-01-22T21:04:58Z", "path": "modules/perftest/perftest-core-repo/src/test/java/com/enonic/xp/repo/bootstrap/PerformanceTestBootstrap.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.enonic.xp.repo.bootstrap;\n+\n+import java.io.File;\n+\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.branch.Branches;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextAccessor;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.elasticsearch.client.impl.EsClient;\n+import com.enonic.xp.event.EventPublisher;\n+import com.enonic.xp.index.PatternIndexConfigDocument;\n+import com.enonic.xp.internal.blobstore.cache.CachedBlobStore;\n+import com.enonic.xp.internal.blobstore.file.FileBlobStore;\n+import com.enonic.xp.node.CreateNodeParams;\n+import com.enonic.xp.node.CreateRootNodeParams;\n+import com.enonic.xp.node.FindNodesByParentParams;\n+import com.enonic.xp.node.FindNodesByParentResult;\n+import com.enonic.xp.node.Node;\n+import com.enonic.xp.node.NodeBranchEntry;\n+import com.enonic.xp.node.NodeId;\n+import com.enonic.xp.node.NodeIds;\n+import com.enonic.xp.node.NodePath;\n+import com.enonic.xp.node.NodeVersionMetadata;\n+import com.enonic.xp.node.RefreshMode;\n+import com.enonic.xp.repo.impl.InternalContext;\n+import com.enonic.xp.repo.impl.binary.BinaryServiceImpl;\n+import com.enonic.xp.repo.impl.branch.storage.BranchServiceImpl;\n+import com.enonic.xp.repo.impl.commit.CommitServiceImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.IndexServiceInternalImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.search.SearchDaoImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.storage.StorageDaoImpl;\n+import com.enonic.xp.repo.impl.index.IndexServiceImpl;\n+import com.enonic.xp.repo.impl.node.CreateNodeCommand;\n+import com.enonic.xp.repo.impl.node.CreateRootNodeCommand;\n+import com.enonic.xp.repo.impl.node.HasUnpublishedChildrenCommand;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repo.impl.node.NodeServiceImpl;\n+import com.enonic.xp.repo.impl.node.ResolveSyncWorkCommand;\n+import com.enonic.xp.repo.impl.node.dao.NodeVersionServiceImpl;\n+import com.enonic.xp.repo.impl.repository.NodeRepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryEntryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.SystemRepoInitializer;\n+import com.enonic.xp.repo.impl.search.NodeSearchServiceImpl;\n+import com.enonic.xp.repo.impl.storage.IndexDataServiceImpl;\n+import com.enonic.xp.repo.impl.storage.NodeStorageServiceImpl;\n+import com.enonic.xp.repo.impl.version.VersionServiceImpl;\n+import com.enonic.xp.repository.CreateBranchParams;\n+import com.enonic.xp.repository.CreateRepositoryParams;\n+import com.enonic.xp.repository.Repository;\n+import com.enonic.xp.repository.RepositoryConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.acl.AccessControlEntry;\n+import com.enonic.xp.security.acl.AccessControlList;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class PerformanceTestBootstrap\n+{\n+    public static final User TEST_DEFAULT_USER =\n+        User.create().key( PrincipalKey.ofUser( IdProviderKey.system(), \"test-user\" ) ).login( \"test-user\" ).build();\n+\n+    protected static final Repository MY_REPO = Repository.create().\n+        id( RepositoryId.from( \"myrepo\" ) ).\n+        branches( Branches.from( ContentConstants.BRANCH_DRAFT, ContentConstants.BRANCH_MASTER ) ).\n+        build();\n+\n+    public static final Context CONTEXT_DRAFT = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_DRAFT ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    public static final Context CONTEXT_MASTER = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_MASTER ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    private final int NODE_SIZE = 22000;\n+\n+    protected Node ROOT_NODE;", "originalCommit": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjMyNg==", "url": "https://github.com/enonic/xp/pull/7827#discussion_r369802326", "bodyText": "Issue found: Name 'NODE_SIZE' must match pattern '^[a-z][a-zA-Z0-9]*$'.", "author": "jsi", "createdAt": "2020-01-22T21:04:59Z", "path": "modules/perftest/perftest-core-repo/src/test/java/com/enonic/xp/repo/bootstrap/PerformanceTestBootstrap.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.enonic.xp.repo.bootstrap;\n+\n+import java.io.File;\n+\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.branch.Branches;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextAccessor;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.elasticsearch.client.impl.EsClient;\n+import com.enonic.xp.event.EventPublisher;\n+import com.enonic.xp.index.PatternIndexConfigDocument;\n+import com.enonic.xp.internal.blobstore.cache.CachedBlobStore;\n+import com.enonic.xp.internal.blobstore.file.FileBlobStore;\n+import com.enonic.xp.node.CreateNodeParams;\n+import com.enonic.xp.node.CreateRootNodeParams;\n+import com.enonic.xp.node.FindNodesByParentParams;\n+import com.enonic.xp.node.FindNodesByParentResult;\n+import com.enonic.xp.node.Node;\n+import com.enonic.xp.node.NodeBranchEntry;\n+import com.enonic.xp.node.NodeId;\n+import com.enonic.xp.node.NodeIds;\n+import com.enonic.xp.node.NodePath;\n+import com.enonic.xp.node.NodeVersionMetadata;\n+import com.enonic.xp.node.RefreshMode;\n+import com.enonic.xp.repo.impl.InternalContext;\n+import com.enonic.xp.repo.impl.binary.BinaryServiceImpl;\n+import com.enonic.xp.repo.impl.branch.storage.BranchServiceImpl;\n+import com.enonic.xp.repo.impl.commit.CommitServiceImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.IndexServiceInternalImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.search.SearchDaoImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.storage.StorageDaoImpl;\n+import com.enonic.xp.repo.impl.index.IndexServiceImpl;\n+import com.enonic.xp.repo.impl.node.CreateNodeCommand;\n+import com.enonic.xp.repo.impl.node.CreateRootNodeCommand;\n+import com.enonic.xp.repo.impl.node.HasUnpublishedChildrenCommand;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repo.impl.node.NodeServiceImpl;\n+import com.enonic.xp.repo.impl.node.ResolveSyncWorkCommand;\n+import com.enonic.xp.repo.impl.node.dao.NodeVersionServiceImpl;\n+import com.enonic.xp.repo.impl.repository.NodeRepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryEntryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.SystemRepoInitializer;\n+import com.enonic.xp.repo.impl.search.NodeSearchServiceImpl;\n+import com.enonic.xp.repo.impl.storage.IndexDataServiceImpl;\n+import com.enonic.xp.repo.impl.storage.NodeStorageServiceImpl;\n+import com.enonic.xp.repo.impl.version.VersionServiceImpl;\n+import com.enonic.xp.repository.CreateBranchParams;\n+import com.enonic.xp.repository.CreateRepositoryParams;\n+import com.enonic.xp.repository.Repository;\n+import com.enonic.xp.repository.RepositoryConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.acl.AccessControlEntry;\n+import com.enonic.xp.security.acl.AccessControlList;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class PerformanceTestBootstrap\n+{\n+    public static final User TEST_DEFAULT_USER =\n+        User.create().key( PrincipalKey.ofUser( IdProviderKey.system(), \"test-user\" ) ).login( \"test-user\" ).build();\n+\n+    protected static final Repository MY_REPO = Repository.create().\n+        id( RepositoryId.from( \"myrepo\" ) ).\n+        branches( Branches.from( ContentConstants.BRANCH_DRAFT, ContentConstants.BRANCH_MASTER ) ).\n+        build();\n+\n+    public static final Context CONTEXT_DRAFT = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_DRAFT ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    public static final Context CONTEXT_MASTER = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_MASTER ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    private final int NODE_SIZE = 22000;", "originalCommit": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjMzMw==", "url": "https://github.com/enonic/xp/pull/7827#discussion_r369802333", "bodyText": "Issue found: Name 'PUBLISHED_DYNAMIC_ROOT' must match pattern '^[a-z][a-zA-Z0-9]*$'.", "author": "jsi", "createdAt": "2020-01-22T21:05:00Z", "path": "modules/perftest/perftest-core-repo/src/test/java/com/enonic/xp/repo/bootstrap/PerformanceTestBootstrap.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package com.enonic.xp.repo.bootstrap;\n+\n+import java.io.File;\n+\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.blob.BlobStore;\n+import com.enonic.xp.branch.Branches;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextAccessor;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.elasticsearch.client.impl.EsClient;\n+import com.enonic.xp.event.EventPublisher;\n+import com.enonic.xp.index.PatternIndexConfigDocument;\n+import com.enonic.xp.internal.blobstore.cache.CachedBlobStore;\n+import com.enonic.xp.internal.blobstore.file.FileBlobStore;\n+import com.enonic.xp.node.CreateNodeParams;\n+import com.enonic.xp.node.CreateRootNodeParams;\n+import com.enonic.xp.node.FindNodesByParentParams;\n+import com.enonic.xp.node.FindNodesByParentResult;\n+import com.enonic.xp.node.Node;\n+import com.enonic.xp.node.NodeBranchEntry;\n+import com.enonic.xp.node.NodeId;\n+import com.enonic.xp.node.NodeIds;\n+import com.enonic.xp.node.NodePath;\n+import com.enonic.xp.node.NodeVersionMetadata;\n+import com.enonic.xp.node.RefreshMode;\n+import com.enonic.xp.repo.impl.InternalContext;\n+import com.enonic.xp.repo.impl.binary.BinaryServiceImpl;\n+import com.enonic.xp.repo.impl.branch.storage.BranchServiceImpl;\n+import com.enonic.xp.repo.impl.commit.CommitServiceImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.IndexServiceInternalImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.search.SearchDaoImpl;\n+import com.enonic.xp.repo.impl.elasticsearch.storage.StorageDaoImpl;\n+import com.enonic.xp.repo.impl.index.IndexServiceImpl;\n+import com.enonic.xp.repo.impl.node.CreateNodeCommand;\n+import com.enonic.xp.repo.impl.node.CreateRootNodeCommand;\n+import com.enonic.xp.repo.impl.node.HasUnpublishedChildrenCommand;\n+import com.enonic.xp.repo.impl.node.NodeConstants;\n+import com.enonic.xp.repo.impl.node.NodeServiceImpl;\n+import com.enonic.xp.repo.impl.node.ResolveSyncWorkCommand;\n+import com.enonic.xp.repo.impl.node.dao.NodeVersionServiceImpl;\n+import com.enonic.xp.repo.impl.repository.NodeRepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryEntryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.RepositoryServiceImpl;\n+import com.enonic.xp.repo.impl.repository.SystemRepoInitializer;\n+import com.enonic.xp.repo.impl.search.NodeSearchServiceImpl;\n+import com.enonic.xp.repo.impl.storage.IndexDataServiceImpl;\n+import com.enonic.xp.repo.impl.storage.NodeStorageServiceImpl;\n+import com.enonic.xp.repo.impl.version.VersionServiceImpl;\n+import com.enonic.xp.repository.CreateBranchParams;\n+import com.enonic.xp.repository.CreateRepositoryParams;\n+import com.enonic.xp.repository.Repository;\n+import com.enonic.xp.repository.RepositoryConstants;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.acl.AccessControlEntry;\n+import com.enonic.xp.security.acl.AccessControlList;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class PerformanceTestBootstrap\n+{\n+    public static final User TEST_DEFAULT_USER =\n+        User.create().key( PrincipalKey.ofUser( IdProviderKey.system(), \"test-user\" ) ).login( \"test-user\" ).build();\n+\n+    protected static final Repository MY_REPO = Repository.create().\n+        id( RepositoryId.from( \"myrepo\" ) ).\n+        branches( Branches.from( ContentConstants.BRANCH_DRAFT, ContentConstants.BRANCH_MASTER ) ).\n+        build();\n+\n+    public static final Context CONTEXT_DRAFT = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_DRAFT ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    public static final Context CONTEXT_MASTER = ContextBuilder.create().\n+        branch( ContentConstants.BRANCH_MASTER ).\n+        repositoryId( MY_REPO.getId() ).\n+        authInfo( NodeConstants.NODE_SU_AUTH_INFO ).\n+        build();\n+\n+    private final int NODE_SIZE = 22000;\n+\n+    protected Node ROOT_NODE;\n+\n+    protected Node NON_PUBLISHED_NODES_ROOT;\n+\n+    protected Node HALF_PUBLISHED_NODES_ROOT;\n+\n+    protected Node PUBLISHED_NODES_ROOT;\n+\n+    protected Node PUBLISHED_DYNAMIC_ROOT;", "originalCommit": "95fff6bfc22558201466fef13b0c03ff6fe31ea8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}