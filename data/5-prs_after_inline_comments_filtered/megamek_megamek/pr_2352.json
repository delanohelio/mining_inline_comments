{"pr_number": 2352, "pr_title": "File Factory Standardization", "pr_createdAt": "2020-10-22T19:13:36Z", "pr_url": "https://github.com/MegaMek/megamek/pull/2352", "timeline": [{"oid": "f92e7fe935492b0b9c74cba75a912a0e5dea20cf", "url": "https://github.com/MegaMek/megamek/commit/f92e7fe935492b0b9c74cba75a912a0e5dea20cf", "message": "File reorganization and code cleanup", "committedDate": "2020-10-22T18:20:15Z", "type": "commit"}, {"oid": "05d36041767569151ec4ed3f929efa9a0ad37966", "url": "https://github.com/MegaMek/megamek/commit/05d36041767569151ec4ed3f929efa9a0ad37966", "message": "Simplifying FileFactories", "committedDate": "2020-10-22T19:04:48Z", "type": "commit"}, {"oid": "f88c203a82d14d46ff98f5304e313a4756524816", "url": "https://github.com/MegaMek/megamek/commit/f88c203a82d14d46ff98f5304e313a4756524816", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_FileFactory", "committedDate": "2020-10-22T19:21:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyOTU0MA==", "url": "https://github.com/MegaMek/megamek/pull/2352#discussion_r510529540", "bodyText": "Should we be caching the scaled image as long as height/width don't change? Or do we scale them a lot?", "author": "sixlettervariables", "createdAt": "2020-10-23T00:18:35Z", "path": "megamek/src/megamek/common/util/fileUtils/ScaledImageFileFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright (C) 2004 - Ben Mazur (bmazur@sev.org)\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MegaMek.\n+ *\n+ * MegaMek is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MegaMek is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package megamek.common.util.fileUtils;\n+\n+import java.awt.Image;\n+import java.io.File;\n+import java.util.Objects;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import megamek.common.util.ImageUtil;\n+\n+/**\n+ * This class will produce <code>Image</code> objects from files. If an image\n+ * file is inside of JAR and ZIP file, then it must save the contents to a\n+ * temporary file. Created on January 18, 2004\n+ * \n+ * @author James Damour\n+ * @version 1\n+ */\n+public class ScaledImageFileFactory extends ImageFileFactory {\n+    //region Variable Declarations\n+    protected int width;\n+    protected int height;\n+    //endregion Variable Declarations\n+\n+    //region Constructors\n+    public ScaledImageFileFactory() {\n+        this(84, 72);\n+    }\n+\n+    public ScaledImageFileFactory(int width, int height) {\n+        super();\n+        setWidth(width);\n+        setHeight(height);\n+    }\n+    //endregion Constructors\n+\n+    //region Getters/Setters\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    public void setWidth(int width) {\n+        this.width = width;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public void setHeight(int height) {\n+        this.height = height;\n+    }\n+    //endregion Getters/Setters\n+\n+    /**\n+     * Get the <code>ItemFile</code> for the given <code>File</code>.\n+     *\n+     * @param file The input <code>File</code> object that will be read to produce the item.\n+     *             This value must not be <code>null</code>.\n+     * @return an <code>ItemFile</code> for the given file.\n+     */\n+    @Override\n+    public ItemFile getItemFile(final File file) {\n+        // Validate the input.\n+        Objects.requireNonNull(file, \"A null image file was passed.\");\n+\n+        // Construct an anonymous class that gets an Image for the file.\n+        return new ItemFile() {\n+            private File itemFile = file; // copy the file entry\n+            private Image image = null; // cache the Image\n+\n+            @Override\n+            public Object getItem() {\n+                // Cache the image on first use.\n+                if (image == null) {\n+                    String name = itemFile.getAbsolutePath();\n+                    image = ImageUtil.loadImageFromFile(name);\n+                }\n+                // Return a copy of the image.\n+                return ImageUtil.getScaledImage(image, getWidth(), getHeight());\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Get the <code>ItemFile</code> for the given <code>ZipEntry</code> in the <code>ZipFile</code>.\n+     *\n+     * @param zipEntry The <code>ZipEntry</code> that will be read to produce the item. This value\n+     *                 must not be <code>null</code>.\n+     * @param zipFile The <code>ZipFile</code> object that contains the <code>ZipEntry</code>\n+     *                that will produce the item. This value must not be <code>null</code>.\n+     * @return an <code>ItemFile</code> for the given zip file entry.\n+     */\n+    @Override\n+    public ItemFile getItemFile(final ZipEntry zipEntry, final ZipFile zipFile) {\n+        // Validate the input.\n+        Objects.requireNonNull(zipEntry, \"A null ZIP entry was passed.\");\n+        Objects.requireNonNull(zipFile, \"A null ZIP file was passed.\");\n+\n+        // Construct an anonymous class that gets an Image for the file.\n+        return new ItemFile() {\n+            private ZipEntry itemEntry = zipEntry; // copy the ZipEntry\n+            private Image image = null; // cache the Image\n+\n+            @Override\n+            public Object getItem() throws Exception {\n+                // Cache the image on first use.\n+                if (image == null) {\n+                    image = createZippedImage(itemEntry, zipFile);\n+                }\n+                // Return a copy of the image.\n+                return ImageUtil.getScaledImage(image, getWidth(), getHeight());\n+            }", "originalCommit": "f88c203a82d14d46ff98f5304e313a4756524816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzMTY1Ng==", "url": "https://github.com/MegaMek/megamek/pull/2352#discussion_r510531656", "bodyText": "Pre-existing... but good point. Will swap that over", "author": "Windchild292", "createdAt": "2020-10-23T00:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyOTU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzMjYzOA==", "url": "https://github.com/MegaMek/megamek/pull/2352#discussion_r510532638", "bodyText": "It has to do with cloning the image. I'll check and see if that's required anywhere else.", "author": "Windchild292", "createdAt": "2020-10-23T00:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyOTU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxOTI2OQ==", "url": "https://github.com/MegaMek/megamek/pull/2352#discussion_r511019269", "bodyText": "From testing it does not appear to be required, and thus I've pushed that change.", "author": "Windchild292", "createdAt": "2020-10-23T17:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyOTU0MA=="}], "type": "inlineReview"}, {"oid": "3be75a048e56d5f6c5687a48f6641e5f5654ff26", "url": "https://github.com/MegaMek/megamek/commit/3be75a048e56d5f6c5687a48f6641e5f5654ff26", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_FileFactory", "committedDate": "2020-10-23T00:28:05Z", "type": "commit"}, {"oid": "aea08f704e740436513243b1b6202c73c28ad1d1", "url": "https://github.com/MegaMek/megamek/commit/aea08f704e740436513243b1b6202c73c28ad1d1", "message": "Storing as scaled instead of rescaling each time", "committedDate": "2020-10-23T17:01:35Z", "type": "commit"}]}