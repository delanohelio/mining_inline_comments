{"pr_number": 1115, "pr_title": "Refactor TableScan optional arguments into an immutable context object", "pr_createdAt": "2020-06-15T20:37:45Z", "pr_url": "https://github.com/apache/iceberg/pull/1115", "timeline": [{"oid": "8718d1637d90137278a72509f573a15d27aabe47", "url": "https://github.com/apache/iceberg/commit/8718d1637d90137278a72509f573a15d27aabe47", "message": "Refactor TableScan to use context object for args", "committedDate": "2020-06-14T20:31:30Z", "type": "commit"}, {"oid": "6eb0cda065df99962a370ac3c271324735d6410a", "url": "https://github.com/apache/iceberg/commit/6eb0cda065df99962a370ac3c271324735d6410a", "message": "Add from/to snapshot Ids for incremental data scans", "committedDate": "2020-06-15T19:11:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4MDgzMw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r440480833", "bodyText": "I think a builder makes this refactor more awkward because the context is always copied twice. Once in the builder, then once when copy is called on the builder's result. It would be simpler to keep the refinement pattern, where every method that alters the context returns a new context. Like this:\n  TableScanContext caseSensitive() {\n    if (this.caseSensitive) {\n      return this;\n    } else {\n      return new TableScanContext(..., true /* case sensitive */, ...);\n    }\n  }", "author": "rdblue", "createdAt": "2020-06-15T22:25:58Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  private TableScanContext(Long snapshotId, Expression rowFilter, boolean ignoreResiduals,\n+                           boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n+                           ImmutableMap<String, String> options, Long fromSnapshotId, Long toSnapshotId) {\n+    this.snapshotId = snapshotId;\n+    this.rowFilter = rowFilter;\n+    this.ignoreResiduals = ignoreResiduals;\n+    this.caseSensitive = caseSensitive;\n+    this.colStats = colStats;\n+    this.selectedColumns = selectedColumns;\n+    this.options = options;\n+    this.fromSnapshotId = fromSnapshotId;\n+    this.toSnapshotId = toSnapshotId;\n+  }\n+\n+  Long snapshotId() {\n+    return snapshotId;\n+  }\n+\n+  Expression rowFilter() {\n+    return rowFilter;\n+  }\n+\n+  boolean ignoreResiduals() {\n+    return ignoreResiduals;\n+  }\n+\n+  boolean caseSensitive() {\n+    return caseSensitive;\n+  }\n+\n+  boolean colStats() {\n+    return colStats;\n+  }\n+\n+  Collection<String> selectedColumns() {\n+    return selectedColumns;\n+  }\n+\n+  ImmutableMap<String, String> options() {\n+    return options;\n+  }\n+\n+  Long fromSnapshotId() {\n+    return fromSnapshotId;\n+  }\n+\n+  Long toSnapshotId() {\n+    return toSnapshotId;\n+  }\n+\n+  TableScanContext copy() {\n+    return TableScanContext.builder(this).build();\n+  }\n+\n+  static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  static Builder builder(TableScanContext other) {\n+    return new Builder(other);\n+  }\n+\n+  static class Builder {", "originalCommit": "6eb0cda065df99962a370ac3c271324735d6410a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4ODEyMw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r440488123", "bodyText": "Yeah, that's another option. I can change it to use that pattern.", "author": "edgarRd", "createdAt": "2020-06-15T22:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4MDgzMw=="}], "type": "inlineReview"}, {"oid": "b4705304263f439f774c88273e7a9dbd114a462b", "url": "https://github.com/apache/iceberg/commit/b4705304263f439f774c88273e7a9dbd114a462b", "message": "Remove builder", "committedDate": "2020-06-16T00:15:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyOTExMA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441029110", "bodyText": "If the context is immutable, we don't need to call copy, right?", "author": "rdblue", "createdAt": "2020-06-16T17:41:45Z", "path": "core/src/main/java/org/apache/iceberg/AllEntriesTable.java", "diffHunk": "@@ -81,23 +79,14 @@ public Schema schema() {\n       super(ops, table, schema);\n     }\n \n-    private Scan(\n-        TableOperations ops, Table table, Long snapshotId, Schema schema, Expression rowFilter,\n-        boolean ignoreResiduals, boolean caseSensitive, boolean colStats,\n-        Collection<String> selectedColumns, ImmutableMap<String, String> options) {\n-      super(\n-          ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-          caseSensitive, colStats, selectedColumns, options);\n+    private Scan(TableOperations ops, Table table, Schema schema, TableScanContext context) {\n+      super(ops, table, schema, context);\n     }\n \n     @Override\n-    protected TableScan newRefinedScan(\n-        TableOperations ops, Table table, Long snapshotId, Schema schema, Expression rowFilter,\n-        boolean ignoreResiduals, boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n-        ImmutableMap<String, String> options) {\n-      return new Scan(\n-          ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-          caseSensitive, colStats, selectedColumns, options);\n+    protected TableScan newRefinedScan(TableOperations ops, Table table, Schema schema,\n+                                       TableScanContext context) {\n+      return new Scan(ops, table, schema, context.copy());", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMDIyOA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441030228", "bodyText": "I think this should continue to be an IllegalArgumentException because it is validating the argument passed into useSnapshot. The problem is not with the context, it is with how the user is trying to modify that context.", "author": "rdblue", "createdAt": "2020-06-16T17:43:43Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -135,19 +123,18 @@ public TableScan appendsAfter(long fromSnapshotId) {\n \n   @Override\n   public TableScan useSnapshot(long scanSnapshotId) {\n-    Preconditions.checkArgument(this.snapshotId == null,\n-        \"Cannot override snapshot, already set to id=%s\", snapshotId);\n+    Preconditions.checkState(context.snapshotId() == null,", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMTQ5NA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441031494", "bodyText": "I think it would be better to add withOption(String property, String value) to context and move the map builder there, instead of replacing all options. That keeps this simple and delegates work to the class with the most context (tell, don't ask).", "author": "rdblue", "createdAt": "2020-06-16T17:45:51Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -167,59 +154,52 @@ public TableScan asOfTime(long timestampMillis) {\n   @Override\n   public TableScan option(String property, String value) {\n     ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n-    builder.putAll(options);\n+    builder.putAll(context.options());\n     builder.put(property, value);\n \n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, builder.build());\n+        ops, table, schema, context.options(builder.build()));", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMTk2OA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441031968", "bodyText": "What is your rationale for not making projectedSchema part of context?", "author": "rdblue", "createdAt": "2020-06-16T17:46:33Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -167,59 +154,52 @@ public TableScan asOfTime(long timestampMillis) {\n   @Override\n   public TableScan option(String property, String value) {\n     ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n-    builder.putAll(options);\n+    builder.putAll(context.options());\n     builder.put(property, value);\n \n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, builder.build());\n+        ops, table, schema, context.options(builder.build()));\n   }\n \n   @Override\n   public TableScan project(Schema projectedSchema) {\n     return newRefinedScan(\n-        ops, table, snapshotId, projectedSchema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, options);\n+        ops, table, projectedSchema, context.copy());", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2ODExOA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441068118", "bodyText": "Schema does not have a default value like  the elements in the context, hence it would always need to be specified when creating the context.\nIn this refinement call, projectedSchema is not an additional context field but takes over schema in TableScan.", "author": "edgarRd", "createdAt": "2020-06-16T18:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMTk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMzMyMg==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441033322", "bodyText": "I think it is worth renaming some of these methods; selectedColumns is a noun, not a verb. I would expect a method to be phrased using a verb, like selectColumns(columns). Otherwise, this is just dropping set from a setter method.", "author": "rdblue", "createdAt": "2020-06-16T17:48:50Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -167,59 +154,52 @@ public TableScan asOfTime(long timestampMillis) {\n   @Override\n   public TableScan option(String property, String value) {\n     ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n-    builder.putAll(options);\n+    builder.putAll(context.options());\n     builder.put(property, value);\n \n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, builder.build());\n+        ops, table, schema, context.options(builder.build()));\n   }\n \n   @Override\n   public TableScan project(Schema projectedSchema) {\n     return newRefinedScan(\n-        ops, table, snapshotId, projectedSchema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, options);\n+        ops, table, projectedSchema, context.copy());\n   }\n \n   @Override\n   public TableScan caseSensitive(boolean scanCaseSensitive) {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        scanCaseSensitive, colStats, selectedColumns, options);\n+        ops, table, schema, context.caseSensitive(scanCaseSensitive));\n   }\n \n   @Override\n   public TableScan includeColumnStats() {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, true, selectedColumns, options);\n+        ops, table, schema, context.colStats(true));\n   }\n \n   @Override\n   public TableScan select(Collection<String> columns) {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, columns, options);\n+        ops, table, schema, context.selectedColumns(columns));", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMzcwMw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441033703", "bodyText": "Since ignoreResiduals is a verb, it would be more consistent to make all of the methods verbs.", "author": "rdblue", "createdAt": "2020-06-16T17:49:29Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -167,59 +154,52 @@ public TableScan asOfTime(long timestampMillis) {\n   @Override\n   public TableScan option(String property, String value) {\n     ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n-    builder.putAll(options);\n+    builder.putAll(context.options());\n     builder.put(property, value);\n \n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, builder.build());\n+        ops, table, schema, context.options(builder.build()));\n   }\n \n   @Override\n   public TableScan project(Schema projectedSchema) {\n     return newRefinedScan(\n-        ops, table, snapshotId, projectedSchema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, selectedColumns, options);\n+        ops, table, projectedSchema, context.copy());\n   }\n \n   @Override\n   public TableScan caseSensitive(boolean scanCaseSensitive) {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        scanCaseSensitive, colStats, selectedColumns, options);\n+        ops, table, schema, context.caseSensitive(scanCaseSensitive));\n   }\n \n   @Override\n   public TableScan includeColumnStats() {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, true, selectedColumns, options);\n+        ops, table, schema, context.colStats(true));\n   }\n \n   @Override\n   public TableScan select(Collection<String> columns) {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-        caseSensitive, colStats, columns, options);\n+        ops, table, schema, context.selectedColumns(columns));\n   }\n \n   @Override\n   public TableScan filter(Expression expr) {\n-    return newRefinedScan(\n-        ops, table, snapshotId, schema, Expressions.and(rowFilter, expr),\n-        ignoreResiduals, caseSensitive, colStats, selectedColumns, options);\n+    return newRefinedScan(ops, table, schema,\n+        context.rowFilter(Expressions.and(context.rowFilter(), expr)));\n   }\n \n   @Override\n   public Expression filter() {\n-    return rowFilter;\n+    return context.rowFilter();\n   }\n \n   @Override\n   public TableScan ignoreResiduals() {\n     return newRefinedScan(\n-        ops, table, snapshotId, schema, rowFilter, true,\n-        caseSensitive, colStats, selectedColumns, options);\n+        ops, table, schema, context.ignoreResiduals(true));", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwOTIwNA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441109204", "bodyText": "Done.", "author": "edgarRd", "createdAt": "2020-06-16T20:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMzcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNDMzMA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441034330", "bodyText": "We avoid leaking specific classes through the API. Can you update this to use Map instead? The getter method options should also only return Map.", "author": "rdblue", "createdAt": "2020-06-16T17:50:32Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -243,6 +224,7 @@ public TableScan ignoreResiduals() {\n \n   @Override\n   public CloseableIterable<CombinedScanTask> planTasks() {\n+    ImmutableMap<String, String> options = context.options();", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzQwMQ==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441087401", "bodyText": "I guess this also applies to the already existing BaseTableScan#options().", "author": "edgarRd", "createdAt": "2020-06-16T19:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNDMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNDc3Mw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441034773", "bodyText": "This use of selectedColumns works because it is a getter.", "author": "rdblue", "createdAt": "2020-06-16T17:51:15Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -304,16 +286,18 @@ public String toString() {\n    * @return the Schema to project\n    */\n   private Schema lazyColumnProjection() {\n+    Collection<String> selectedColumns = context.selectedColumns();", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4ODkzNQ==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441088935", "bodyText": "I wonder if it would be valuable to publish (add in repo) a naming style guide to standardize this and save time. What do you think?", "author": "edgarRd", "createdAt": "2020-06-16T19:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNDc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNTA2Nw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441035067", "bodyText": "Nit: Does this need a newline?", "author": "rdblue", "createdAt": "2020-06-16T17:51:43Z", "path": "core/src/main/java/org/apache/iceberg/DataFilesTable.java", "diffHunk": "@@ -76,24 +74,17 @@ public Schema schema() {\n       this.fileSchema = fileSchema;\n     }\n \n-    private FilesTableScan(\n-        TableOperations ops, Table table, Long snapshotId, Schema schema, Expression rowFilter,\n-        boolean ignoreResiduals, boolean caseSensitive, boolean colStats,\n-        Collection<String> selectedColumns, Schema fileSchema, ImmutableMap<String, String> options) {\n-      super(\n-          ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-          caseSensitive, colStats, selectedColumns, options);\n+    private FilesTableScan(TableOperations ops, Table table, Schema schema, Schema fileSchema,\n+                           TableScanContext context) {\n+      super(ops, table, schema, context);\n       this.fileSchema = fileSchema;\n     }\n \n     @Override\n-    protected TableScan newRefinedScan(\n-        TableOperations ops, Table table, Long snapshotId, Schema schema, Expression rowFilter,\n-        boolean ignoreResiduals, boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n-        ImmutableMap<String, String> options) {\n+    protected TableScan newRefinedScan(TableOperations ops, Table table, Schema schema,\n+                                       TableScanContext context) {", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNTEzNQ==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441035135", "bodyText": "Same here: can we remove this newline?", "author": "rdblue", "createdAt": "2020-06-16T17:51:52Z", "path": "core/src/main/java/org/apache/iceberg/DataFilesTable.java", "diffHunk": "@@ -76,24 +74,17 @@ public Schema schema() {\n       this.fileSchema = fileSchema;\n     }\n \n-    private FilesTableScan(\n-        TableOperations ops, Table table, Long snapshotId, Schema schema, Expression rowFilter,\n-        boolean ignoreResiduals, boolean caseSensitive, boolean colStats,\n-        Collection<String> selectedColumns, Schema fileSchema, ImmutableMap<String, String> options) {\n-      super(\n-          ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-          caseSensitive, colStats, selectedColumns, options);\n+    private FilesTableScan(TableOperations ops, Table table, Schema schema, Schema fileSchema,\n+                           TableScanContext context) {\n+      super(ops, table, schema, context);\n       this.fileSchema = fileSchema;\n     }\n \n     @Override\n-    protected TableScan newRefinedScan(\n-        TableOperations ops, Table table, Long snapshotId, Schema schema, Expression rowFilter,\n-        boolean ignoreResiduals, boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n-        ImmutableMap<String, String> options) {\n+    protected TableScan newRefinedScan(TableOperations ops, Table table, Schema schema,\n+                                       TableScanContext context) {\n       return new FilesTableScan(\n-          ops, table, snapshotId, schema, rowFilter, ignoreResiduals,\n-          caseSensitive, colStats, selectedColumns, fileSchema, options);\n+          ops, table, schema, fileSchema, context.copy());", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNjcwMA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441036700", "bodyText": "I think it would be more clear and maintainable if this didn't use this(...). When new options are added, this list will need to change and it is easy to get off by one when passing in nulls. If instead this set each field default individually, it would be easier to read and avoid update errors.", "author": "rdblue", "createdAt": "2020-06-16T17:54:33Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  TableScanContext() {\n+    this(null, Expressions.alwaysTrue(), false, true, false, null, ImmutableMap.of(), null, null);", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNzE0MQ==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441037141", "bodyText": "How about scanSnapshotId?\nAlso, why is id a boxed Long? If this is called, it should be non-null, right?\nWe always prefer primitive types so we can guarantee they are non-null.", "author": "rdblue", "createdAt": "2020-06-16T17:55:22Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  TableScanContext() {\n+    this(null, Expressions.alwaysTrue(), false, true, false, null, ImmutableMap.of(), null, null);\n+  }\n+\n+  private TableScanContext(Long snapshotId, Expression rowFilter, boolean ignoreResiduals,\n+                           boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n+                           ImmutableMap<String, String> options, Long fromSnapshotId, Long toSnapshotId) {\n+    this.snapshotId = snapshotId;\n+    this.rowFilter = rowFilter;\n+    this.ignoreResiduals = ignoreResiduals;\n+    this.caseSensitive = caseSensitive;\n+    this.colStats = colStats;\n+    this.selectedColumns = selectedColumns;\n+    this.options = options;\n+    this.fromSnapshotId = fromSnapshotId;\n+    this.toSnapshotId = toSnapshotId;\n+  }\n+\n+  Long snapshotId() {\n+    return snapshotId;\n+  }\n+\n+  TableScanContext snapshotId(Long id) {", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NjQ1MA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441096450", "bodyText": "If this is called, it should be non-null, right?\n\nNo, it is set to null in the constructor of IncrementalDataTableScan: \n  \n    \n      iceberg/core/src/main/java/org/apache/iceberg/IncrementalDataTableScan.java\n    \n    \n         Line 44\n      in\n      e0180f7\n    \n    \n    \n    \n\n        \n          \n           super(ops, table, null, schema, rowFilter, ignoreResiduals, caseSensitive, colStats, selectedColumns, options);", "author": "edgarRd", "createdAt": "2020-06-16T19:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNzE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNzMyNw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441037327", "bodyText": "To make this a verb, how about filterRows?", "author": "rdblue", "createdAt": "2020-06-16T17:55:38Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  TableScanContext() {\n+    this(null, Expressions.alwaysTrue(), false, true, false, null, ImmutableMap.of(), null, null);\n+  }\n+\n+  private TableScanContext(Long snapshotId, Expression rowFilter, boolean ignoreResiduals,\n+                           boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n+                           ImmutableMap<String, String> options, Long fromSnapshotId, Long toSnapshotId) {\n+    this.snapshotId = snapshotId;\n+    this.rowFilter = rowFilter;\n+    this.ignoreResiduals = ignoreResiduals;\n+    this.caseSensitive = caseSensitive;\n+    this.colStats = colStats;\n+    this.selectedColumns = selectedColumns;\n+    this.options = options;\n+    this.fromSnapshotId = fromSnapshotId;\n+    this.toSnapshotId = toSnapshotId;\n+  }\n+\n+  Long snapshotId() {\n+    return snapshotId;\n+  }\n+\n+  TableScanContext snapshotId(Long id) {\n+    return new TableScanContext(id, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Expression rowFilter() {\n+    return rowFilter;\n+  }\n+\n+  TableScanContext rowFilter(Expression filter) {", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzODcwNg==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441038706", "bodyText": "This controls whether or not column stats are returned in the DataFile instances in the resulting splits, not whether column stats should be used in planning. Columns stats are always used in planning. To avoid confusion, can you rename this to shouldReturnColumnStats? A similar update for the getter would be useful as well.", "author": "rdblue", "createdAt": "2020-06-16T17:57:47Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  TableScanContext() {\n+    this(null, Expressions.alwaysTrue(), false, true, false, null, ImmutableMap.of(), null, null);\n+  }\n+\n+  private TableScanContext(Long snapshotId, Expression rowFilter, boolean ignoreResiduals,\n+                           boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n+                           ImmutableMap<String, String> options, Long fromSnapshotId, Long toSnapshotId) {\n+    this.snapshotId = snapshotId;\n+    this.rowFilter = rowFilter;\n+    this.ignoreResiduals = ignoreResiduals;\n+    this.caseSensitive = caseSensitive;\n+    this.colStats = colStats;\n+    this.selectedColumns = selectedColumns;\n+    this.options = options;\n+    this.fromSnapshotId = fromSnapshotId;\n+    this.toSnapshotId = toSnapshotId;\n+  }\n+\n+  Long snapshotId() {\n+    return snapshotId;\n+  }\n+\n+  TableScanContext snapshotId(Long id) {\n+    return new TableScanContext(id, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Expression rowFilter() {\n+    return rowFilter;\n+  }\n+\n+  TableScanContext rowFilter(Expression filter) {\n+    return new TableScanContext(snapshotId, filter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean ignoreResiduals() {\n+    return ignoreResiduals;\n+  }\n+\n+  TableScanContext ignoreResiduals(boolean shouldIgnoreResiduals) {\n+    return new TableScanContext(snapshotId, rowFilter, shouldIgnoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean caseSensitive() {\n+    return caseSensitive;\n+  }\n+\n+  TableScanContext caseSensitive(boolean isCaseSensitive) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        isCaseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean colStats() {\n+    return colStats;\n+  }\n+\n+  TableScanContext colStats(boolean shouldUseColumnStats) {", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzODgyNg==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441038826", "bodyText": "As I noted above, how about selectColumns?", "author": "rdblue", "createdAt": "2020-06-16T17:57:59Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  TableScanContext() {\n+    this(null, Expressions.alwaysTrue(), false, true, false, null, ImmutableMap.of(), null, null);\n+  }\n+\n+  private TableScanContext(Long snapshotId, Expression rowFilter, boolean ignoreResiduals,\n+                           boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n+                           ImmutableMap<String, String> options, Long fromSnapshotId, Long toSnapshotId) {\n+    this.snapshotId = snapshotId;\n+    this.rowFilter = rowFilter;\n+    this.ignoreResiduals = ignoreResiduals;\n+    this.caseSensitive = caseSensitive;\n+    this.colStats = colStats;\n+    this.selectedColumns = selectedColumns;\n+    this.options = options;\n+    this.fromSnapshotId = fromSnapshotId;\n+    this.toSnapshotId = toSnapshotId;\n+  }\n+\n+  Long snapshotId() {\n+    return snapshotId;\n+  }\n+\n+  TableScanContext snapshotId(Long id) {\n+    return new TableScanContext(id, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Expression rowFilter() {\n+    return rowFilter;\n+  }\n+\n+  TableScanContext rowFilter(Expression filter) {\n+    return new TableScanContext(snapshotId, filter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean ignoreResiduals() {\n+    return ignoreResiduals;\n+  }\n+\n+  TableScanContext ignoreResiduals(boolean shouldIgnoreResiduals) {\n+    return new TableScanContext(snapshotId, rowFilter, shouldIgnoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean caseSensitive() {\n+    return caseSensitive;\n+  }\n+\n+  TableScanContext caseSensitive(boolean isCaseSensitive) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        isCaseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean colStats() {\n+    return colStats;\n+  }\n+\n+  TableScanContext colStats(boolean shouldUseColumnStats) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        caseSensitive, shouldUseColumnStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Collection<String> selectedColumns() {\n+    return selectedColumns;\n+  }\n+\n+  TableScanContext selectedColumns(Collection<String> columns) {", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzOTE3Nw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441039177", "bodyText": "I'm not sure this is needed if the context is immutable.", "author": "rdblue", "createdAt": "2020-06-16T17:58:33Z", "path": "core/src/main/java/org/apache/iceberg/TableScanContext.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import org.apache.iceberg.expressions.Expression;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Context object with optional arguments for a TableScan.\n+ */\n+final class TableScanContext {\n+  private final Long snapshotId;\n+  private final Expression rowFilter;\n+  private final boolean ignoreResiduals;\n+  private final boolean caseSensitive;\n+  private final boolean colStats;\n+  private final Collection<String> selectedColumns;\n+  private final ImmutableMap<String, String> options;\n+  private final Long fromSnapshotId;\n+  private final Long toSnapshotId;\n+\n+  TableScanContext() {\n+    this(null, Expressions.alwaysTrue(), false, true, false, null, ImmutableMap.of(), null, null);\n+  }\n+\n+  private TableScanContext(Long snapshotId, Expression rowFilter, boolean ignoreResiduals,\n+                           boolean caseSensitive, boolean colStats, Collection<String> selectedColumns,\n+                           ImmutableMap<String, String> options, Long fromSnapshotId, Long toSnapshotId) {\n+    this.snapshotId = snapshotId;\n+    this.rowFilter = rowFilter;\n+    this.ignoreResiduals = ignoreResiduals;\n+    this.caseSensitive = caseSensitive;\n+    this.colStats = colStats;\n+    this.selectedColumns = selectedColumns;\n+    this.options = options;\n+    this.fromSnapshotId = fromSnapshotId;\n+    this.toSnapshotId = toSnapshotId;\n+  }\n+\n+  Long snapshotId() {\n+    return snapshotId;\n+  }\n+\n+  TableScanContext snapshotId(Long id) {\n+    return new TableScanContext(id, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Expression rowFilter() {\n+    return rowFilter;\n+  }\n+\n+  TableScanContext rowFilter(Expression filter) {\n+    return new TableScanContext(snapshotId, filter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean ignoreResiduals() {\n+    return ignoreResiduals;\n+  }\n+\n+  TableScanContext ignoreResiduals(boolean shouldIgnoreResiduals) {\n+    return new TableScanContext(snapshotId, rowFilter, shouldIgnoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean caseSensitive() {\n+    return caseSensitive;\n+  }\n+\n+  TableScanContext caseSensitive(boolean isCaseSensitive) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        isCaseSensitive, colStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  boolean colStats() {\n+    return colStats;\n+  }\n+\n+  TableScanContext colStats(boolean shouldUseColumnStats) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        caseSensitive, shouldUseColumnStats, selectedColumns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Collection<String> selectedColumns() {\n+    return selectedColumns;\n+  }\n+\n+  TableScanContext selectedColumns(Collection<String> columns) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, columns, options, fromSnapshotId, toSnapshotId);\n+  }\n+\n+  ImmutableMap<String, String> options() {\n+    return options;\n+  }\n+\n+  TableScanContext options(Map<String, String> extraOptions) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, ImmutableMap.copyOf(extraOptions),\n+        fromSnapshotId, toSnapshotId);\n+  }\n+\n+  Long fromSnapshotId() {\n+    return fromSnapshotId;\n+  }\n+\n+  TableScanContext fromSnapshotId(Long id) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, id, toSnapshotId);\n+  }\n+\n+  Long toSnapshotId() {\n+    return toSnapshotId;\n+  }\n+\n+  TableScanContext toSnapshotId(Long id) {\n+    return new TableScanContext(snapshotId, rowFilter, ignoreResiduals,\n+        caseSensitive, colStats, selectedColumns, options, fromSnapshotId, id);\n+  }\n+\n+  TableScanContext copy() {", "originalCommit": "b4705304263f439f774c88273e7a9dbd114a462b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjQ0Nw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441116447", "bodyText": "Using the prefix is normal signals a boolean getter, not a setter. What about setCaseSensitive or just caseSensitive?", "author": "rdblue", "createdAt": "2020-06-16T20:17:39Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -153,47 +153,43 @@ public TableScan asOfTime(long timestampMillis) {\n \n   @Override\n   public TableScan option(String property, String value) {\n-    ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();\n-    builder.putAll(context.options());\n-    builder.put(property, value);\n-\n     return newRefinedScan(\n-        ops, table, schema, context.options(builder.build()));\n+        ops, table, schema, context.withOption(property, value));\n   }\n \n   @Override\n   public TableScan project(Schema projectedSchema) {\n     return newRefinedScan(\n-        ops, table, projectedSchema, context.copy());\n+        ops, table, projectedSchema, context);\n   }\n \n   @Override\n   public TableScan caseSensitive(boolean scanCaseSensitive) {\n     return newRefinedScan(\n-        ops, table, schema, context.caseSensitive(scanCaseSensitive));\n+        ops, table, schema, context.isCaseSensitive(scanCaseSensitive));", "originalCommit": "ef702ab87fc9cc8c4778f1499bd4a1a032db6d66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjk1MA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441116950", "bodyText": "The rowFilter getter doesn't need to change. It is still getting the row filter. Just the setter should be a verb.", "author": "rdblue", "createdAt": "2020-06-16T20:18:39Z", "path": "core/src/main/java/org/apache/iceberg/BaseTableScan.java", "diffHunk": "@@ -273,7 +269,7 @@ public String toString() {\n     return MoreObjects.toStringHelper(this)\n         .add(\"table\", table)\n         .add(\"projection\", schema().asStruct())\n-        .add(\"filter\", context.rowFilter())\n+        .add(\"filter\", context.filterRows())", "originalCommit": "ef702ab87fc9cc8c4778f1499bd4a1a032db6d66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTAxMw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441119013", "bodyText": "Doesn't the snapshot ID start off as null? It seems like we don't need to set it here.", "author": "rdblue", "createdAt": "2020-06-16T20:22:33Z", "path": "core/src/main/java/org/apache/iceberg/IncrementalDataTableScan.java", "diffHunk": "@@ -19,55 +19,43 @@\n \n package org.apache.iceberg;\n \n-import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n-import org.apache.iceberg.expressions.Expression;\n import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.relocated.com.google.common.collect.FluentIterable;\n-import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n import org.apache.iceberg.util.SnapshotUtil;\n import org.apache.iceberg.util.ThreadPools;\n \n class IncrementalDataTableScan extends DataTableScan {\n-  private long fromSnapshotId;\n-  private long toSnapshotId;\n-\n-  IncrementalDataTableScan(TableOperations ops, Table table, Schema schema, Expression rowFilter,\n-                           boolean ignoreResiduals, boolean caseSensitive, boolean colStats,\n-                           Collection<String> selectedColumns, ImmutableMap<String, String> options,\n-                           long fromSnapshotId, long toSnapshotId) {\n-    super(ops, table, null, schema, rowFilter, ignoreResiduals, caseSensitive, colStats, selectedColumns, options);\n-    validateSnapshotIds(table, fromSnapshotId, toSnapshotId);\n-    this.fromSnapshotId = fromSnapshotId;\n-    this.toSnapshotId = toSnapshotId;\n+\n+  IncrementalDataTableScan(TableOperations ops, Table table, Schema schema, TableScanContext context) {\n+    super(ops, table, schema, context.useSnapshotId(null));", "originalCommit": "ef702ab87fc9cc8c4778f1499bd4a1a032db6d66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1ODg2Ng==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441158866", "bodyText": "This change was done following the previous code that did pass null in the super constructor. TableScanContext does start as null, but there's no guarantee that it's still null in this part since it's only receiving a context as argument, not creating one from scratch, right?", "author": "edgarRd", "createdAt": "2020-06-16T21:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NjQxMw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441176413", "bodyText": "The guarantee that the snapshot ID is currently null is the check done in the refinement methods that create an incremental scan. I think those validations should be done in the context because the context should be responsible for knowing what is a valid scan. If a table doesn't support incremental scanning, then it can have additional validations, but anything common should be in the context.\nThat would allow you to not set the snapshot to null here. We may also want to get rid of IncrementalDataTableScan, though probably not in this PR. I think the purpose of it was to minimize changes to BaseTableScan. But this refactor makes that much less necessary.", "author": "rdblue", "createdAt": "2020-06-16T22:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTM1Mw==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441119353", "bodyText": "Shouldn't validations be done in the context? I don't see why the context would allow a change that is invalid and needs to be enforced in different scans.", "author": "rdblue", "createdAt": "2020-06-16T20:23:14Z", "path": "core/src/main/java/org/apache/iceberg/IncrementalDataTableScan.java", "diffHunk": "@@ -19,55 +19,43 @@\n \n package org.apache.iceberg;\n \n-import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n-import org.apache.iceberg.expressions.Expression;\n import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.relocated.com.google.common.collect.FluentIterable;\n-import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n import org.apache.iceberg.util.SnapshotUtil;\n import org.apache.iceberg.util.ThreadPools;\n \n class IncrementalDataTableScan extends DataTableScan {\n-  private long fromSnapshotId;\n-  private long toSnapshotId;\n-\n-  IncrementalDataTableScan(TableOperations ops, Table table, Schema schema, Expression rowFilter,\n-                           boolean ignoreResiduals, boolean caseSensitive, boolean colStats,\n-                           Collection<String> selectedColumns, ImmutableMap<String, String> options,\n-                           long fromSnapshotId, long toSnapshotId) {\n-    super(ops, table, null, schema, rowFilter, ignoreResiduals, caseSensitive, colStats, selectedColumns, options);\n-    validateSnapshotIds(table, fromSnapshotId, toSnapshotId);\n-    this.fromSnapshotId = fromSnapshotId;\n-    this.toSnapshotId = toSnapshotId;\n+\n+  IncrementalDataTableScan(TableOperations ops, Table table, Schema schema, TableScanContext context) {\n+    super(ops, table, schema, context.useSnapshotId(null));\n+    validateSnapshotIds(table, context.fromSnapshotId(), context.toSnapshotId());", "originalCommit": "ef702ab87fc9cc8c4778f1499bd4a1a032db6d66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mjc3MA==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441162770", "bodyText": "I'm not sure about pushing logic to the TableScanContext object, specially validation logic that requires another state for context. I'd agree with validations only for the values of the snapshotIds or from within TableScanContext, e.g. being different, or non-null, snapshotId not being set if to/from snaphosts are set. However, any other logic dependent of another context like table could be specific to where this is being used, for which I'd rather keep TableScanContext as simple as possible.", "author": "edgarRd", "createdAt": "2020-06-16T21:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3NzExNQ==", "url": "https://github.com/apache/iceberg/pull/1115#discussion_r441177115", "bodyText": "I agree with you. If the validation is checking that to and from snapshot IDs are valid, then that makes sense. But for validations like snapshot ID should be null if from snapshot ID is set can be done in the context.", "author": "rdblue", "createdAt": "2020-06-16T22:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTM1Mw=="}], "type": "inlineReview"}, {"oid": "67b3a30c69b593d4d1f8722c48a8b5c7c00cdf16", "url": "https://github.com/apache/iceberg/commit/67b3a30c69b593d4d1f8722c48a8b5c7c00cdf16", "message": "PR review", "committedDate": "2020-06-16T21:54:21Z", "type": "commit"}, {"oid": "67b3a30c69b593d4d1f8722c48a8b5c7c00cdf16", "url": "https://github.com/apache/iceberg/commit/67b3a30c69b593d4d1f8722c48a8b5c7c00cdf16", "message": "PR review", "committedDate": "2020-06-16T21:54:21Z", "type": "forcePushed"}]}