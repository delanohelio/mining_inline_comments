{"pr_number": 1243, "pr_title": "Hive: Add support for custom catalog to Iceberg StorageHandler (#1155)", "pr_createdAt": "2020-07-24T21:33:09Z", "pr_url": "https://github.com/apache/iceberg/pull/1243", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5OTE0Mg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460299142", "bodyText": "I have decided to remove readFrom(String ...) since the string can be ambiguously an identifier or a location.", "author": "guilload", "createdAt": "2020-07-24T21:37:38Z", "path": "mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java", "diffHunk": "@@ -95,15 +93,12 @@ public ConfigBuilder schema(Schema schema) {\n     }\n \n     public ConfigBuilder readFrom(TableIdentifier identifier) {\n-      return readFrom(identifier.toString());\n-    }\n-\n-    public ConfigBuilder readFrom(File path) {\n-      return readFrom(path.toString());\n+      conf.set(TABLE_IDENTIFIER, identifier.toString());\n+      return this;\n     }\n \n-    public ConfigBuilder readFrom(String path) {", "originalCommit": "04b276d726da7621619e090a52bd90bcf8a504c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NTEwMg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460585102", "bodyText": "nit: blank line. Also javadoc on this method", "author": "rdsr", "createdAt": "2020-07-26T23:11:52Z", "path": "mr/src/main/java/org/apache/iceberg/mr/CatalogLoader.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.catalog.Catalog;\n+\n+public interface CatalogLoader {\n+\n+  Catalog load(Configuration conf);\n+", "originalCommit": "04b276d726da7621619e090a52bd90bcf8a504c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NjA4OA==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460586088", "bodyText": "How's the name property used to specify a table ?", "author": "rdsr", "createdAt": "2020-07-26T23:21:45Z", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.common.DynConstructors;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public final class Catalogs {\n+\n+  private static final String HADOOP = \"hadoop\";\n+  private static final String HIVE = \"hive\";\n+\n+  private static final String NAME = \"name\";\n+  private static final String LOCATION = \"location\";\n+\n+  private Catalogs() {}\n+\n+  /**\n+   * Load an Iceberg table using the catalog and table identifier (or table path) specified by the configuration.\n+   * Catalog resolution happens in this order:\n+   * 1. Custom catalog if specified by {@link InputFormatConfig#CATALOG_LOADER_CLASS}\n+   * 2. Hadoop or Hive catalog if specified by {@link InputFormatConfig#CATALOG}\n+   * 3. Hadoop Tables\n+   * @param conf a Hadoop conf\n+   * @return an Iceberg table\n+   */\n+  public static Table loadTable(Configuration conf) {\n+    // A bit of a hack to make this function work transparently with Hive without having to remap the \"name\" and\n+    // \"location\" properties.\n+    if (HiveConf.getVar(conf, HiveConf.ConfVars.HIVEQUERYID).length() > 0) {\n+      return loadTable(conf, conf.get(NAME), conf.get(LOCATION));", "originalCommit": "04b276d726da7621619e090a52bd90bcf8a504c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0Njk5Mg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460646992", "bodyText": "Where is this conf coming from? Is this a query conf? Or this is some feature of Hive I am not aware of? Then this does not seem too future proof. What happens if there are multiple Iceberg tables are in a single query?", "author": "pvary", "createdAt": "2020-07-27T04:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NjA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczOTk2Mg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460739962", "bodyText": "A useful test could be to add a HiveRunner test which does a join between multiple tables, each one loaded with a different catalog. We definitely found some issues in our earlier implementation of this that didn't hold once more than one table was involved in the query.", "author": "massdosage", "createdAt": "2020-07-27T08:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NjA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NjMzNQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460586335", "bodyText": "Shouldn't this be InputFile?", "author": "rdsr", "createdAt": "2020-07-26T23:24:10Z", "path": "mr/src/main/java/org/apache/iceberg/mr/InputFormatConfig.java", "diffHunk": "@@ -95,15 +93,12 @@ public ConfigBuilder schema(Schema schema) {\n     }\n \n     public ConfigBuilder readFrom(TableIdentifier identifier) {\n-      return readFrom(identifier.toString());\n-    }\n-\n-    public ConfigBuilder readFrom(File path) {\n-      return readFrom(path.toString());\n+      conf.set(TABLE_IDENTIFIER, identifier.toString());\n+      return this;\n     }\n \n-    public ConfigBuilder readFrom(String path) {\n-      conf.set(TABLE_PATH, path);\n+    public ConfigBuilder readFrom(File location) {", "originalCommit": "04b276d726da7621619e090a52bd90bcf8a504c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NzMwNg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460587306", "bodyText": "I don't think so. I think it should be String location because it identifies a table by location (like HadoopTables) right?", "author": "rdblue", "createdAt": "2020-07-26T23:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NjMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyNjEwNA==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r460626104", "bodyText": "Yes, you are right! I just wanted this to not be a java.io.File type", "author": "rdsr", "createdAt": "2020-07-27T03:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU4NjMzNQ=="}], "type": "inlineReview"}, {"oid": "78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "url": "https://github.com/apache/iceberg/commit/78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "message": "Forward conf properties in HiveIcebergStorageHandler", "committedDate": "2020-07-30T21:06:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MTQwNA==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463781404", "bodyText": "can't we replace TABLE_LOCATION, TABLE_IDENTIFIER and TABLE_PATH with just TABLE_PATH?\ne.g see org.apache.iceberg.spark.source.IcebergSource#findTable", "author": "rdsr", "createdAt": "2020-07-31T19:04:35Z", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.common.DynConstructors;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public final class Catalogs {\n+\n+  private static final String HADOOP = \"hadoop\";\n+  private static final String HIVE = \"hive\";\n+\n+  private static final String NAME = \"name\";\n+  private static final String LOCATION = \"location\";\n+\n+  private Catalogs() {}\n+\n+  /**\n+   * Load an Iceberg table using the catalog and table identifier (or table path) specified by the configuration.\n+   * Catalog resolution happens in this order:\n+   * 1. Custom catalog if specified by {@link InputFormatConfig#CATALOG_LOADER_CLASS}\n+   * 2. Hadoop or Hive catalog if specified by {@link InputFormatConfig#CATALOG}\n+   * 3. Hadoop Tables\n+   * @param conf a Hadoop conf\n+   * @return an Iceberg table\n+   */\n+  public static Table loadTable(Configuration conf) {\n+    return loadTable(conf, conf.get(InputFormatConfig.TABLE_IDENTIFIER), conf.get(InputFormatConfig.TABLE_LOCATION));", "originalCommit": "78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwMjc0MQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463902741", "bodyText": "We can ignore this in light of further comments below.", "author": "rdsr", "createdAt": "2020-08-01T01:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NDMxMw==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463784313", "bodyText": "Does it make sense to do something similar to what spark does?\nprotected Table findTable(Map<String, String> options, Configuration conf) {\n    Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n    String path = options.get(\"path\");\n\n    if (path.contains(\"/\")) {\n      HadoopTables tables = new HadoopTables(conf);\n      return tables.load(path);\n    } else {\n      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n      return hiveCatalog.loadTable(tableIdentifier);\n    }\n  }\n\nuse TABLE_PATH to determine whether we need to use Hadoop or Hive catalog first and only then try custom catalog in the end. Seems like custom catalog would be used very rarely, if at all.", "author": "rdsr", "createdAt": "2020-07-31T19:11:21Z", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.common.DynConstructors;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public final class Catalogs {\n+\n+  private static final String HADOOP = \"hadoop\";\n+  private static final String HIVE = \"hive\";\n+\n+  private static final String NAME = \"name\";\n+  private static final String LOCATION = \"location\";\n+\n+  private Catalogs() {}\n+\n+  /**\n+   * Load an Iceberg table using the catalog and table identifier (or table path) specified by the configuration.\n+   * Catalog resolution happens in this order:\n+   * 1. Custom catalog if specified by {@link InputFormatConfig#CATALOG_LOADER_CLASS}\n+   * 2. Hadoop or Hive catalog if specified by {@link InputFormatConfig#CATALOG}\n+   * 3. Hadoop Tables\n+   * @param conf a Hadoop conf\n+   * @return an Iceberg table\n+   */\n+  public static Table loadTable(Configuration conf) {\n+    return loadTable(conf, conf.get(InputFormatConfig.TABLE_IDENTIFIER), conf.get(InputFormatConfig.TABLE_LOCATION));\n+  }\n+\n+  // For use in HiveIcebergSerDe and HiveIcebergStorageHandler\n+  public static Table loadTable(Configuration conf, Properties props) {\n+    return loadTable(conf, props.getProperty(NAME), props.getProperty(LOCATION));\n+  }\n+\n+  private static Table loadTable(Configuration conf, String tableIdentifier, String tableLocation) {", "originalCommit": "78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzNjk5Mg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463836992", "bodyText": "I think what's happening here makes sense because configuration is done separately using either readFrom(location) or readFrom(identifier).", "author": "rdblue", "createdAt": "2020-07-31T20:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NDMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTI1NQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463785255", "bodyText": "might require a rebase", "author": "rdsr", "createdAt": "2020-07-31T19:13:33Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergSerDe.java", "diffHunk": "@@ -39,13 +38,7 @@\n \n   @Override\n   public void initialize(@Nullable Configuration configuration, Properties serDeProperties) throws SerDeException {\n-    final Table table;\n-\n-    try {\n-      table = TableResolver.resolveTableFromConfiguration(configuration, serDeProperties);\n-    } catch (IOException e) {\n-      throw new UncheckedIOException(\"Unable to resolve table from configuration: \", e);\n-    }\n+    Table table = Catalogs.loadTable(configuration, serDeProperties);", "originalCommit": "78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzNjQyMw==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463836423", "bodyText": "There are two relevant configs in addition to the type: uri for Hive and warehouse for Hadoop. Hive defaults to the value in configuration of hive.metastore.uris from hive-site.xml, so it makes sense to not pass it explicitly here.\nBut, the Hadoop catalog doesn't really have a standard warehouse path. It just has a default. Should we add a configuration option to set up the warehouse when using a HadoopCatalog?", "author": "rdblue", "createdAt": "2020-07-31T20:58:56Z", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.util.Optional;\n+import java.util.Properties;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.catalog.Catalog;\n+import org.apache.iceberg.catalog.TableIdentifier;\n+import org.apache.iceberg.common.DynConstructors;\n+import org.apache.iceberg.exceptions.NoSuchNamespaceException;\n+import org.apache.iceberg.hadoop.HadoopCatalog;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.hive.HiveCatalogs;\n+import org.apache.iceberg.relocated.com.google.common.annotations.VisibleForTesting;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public final class Catalogs {\n+\n+  private static final String HADOOP = \"hadoop\";\n+  private static final String HIVE = \"hive\";\n+\n+  private static final String NAME = \"name\";\n+  private static final String LOCATION = \"location\";\n+\n+  private Catalogs() {}\n+\n+  /**\n+   * Load an Iceberg table using the catalog and table identifier (or table path) specified by the configuration.\n+   * Catalog resolution happens in this order:\n+   * 1. Custom catalog if specified by {@link InputFormatConfig#CATALOG_LOADER_CLASS}\n+   * 2. Hadoop or Hive catalog if specified by {@link InputFormatConfig#CATALOG}\n+   * 3. Hadoop Tables\n+   * @param conf a Hadoop conf\n+   * @return an Iceberg table\n+   */\n+  public static Table loadTable(Configuration conf) {\n+    return loadTable(conf, conf.get(InputFormatConfig.TABLE_IDENTIFIER), conf.get(InputFormatConfig.TABLE_LOCATION));\n+  }\n+\n+  // For use in HiveIcebergSerDe and HiveIcebergStorageHandler\n+  public static Table loadTable(Configuration conf, Properties props) {\n+    return loadTable(conf, props.getProperty(NAME), props.getProperty(LOCATION));\n+  }\n+\n+  private static Table loadTable(Configuration conf, String tableIdentifier, String tableLocation) {\n+    Optional<Catalog> catalog = loadCatalog(conf);\n+\n+    if (catalog.isPresent()) {\n+      Preconditions.checkArgument(tableIdentifier != null, \"Table identifier not set\");\n+      return catalog.get().loadTable(TableIdentifier.parse(tableIdentifier));\n+    }\n+\n+    Preconditions.checkArgument(tableLocation != null, \"Table location not set\");\n+    return new HadoopTables(conf).load(tableLocation);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<Catalog> loadCatalog(Configuration conf) {\n+    String catalogLoaderClass = conf.get(InputFormatConfig.CATALOG_LOADER_CLASS);\n+\n+    if (catalogLoaderClass != null) {\n+      CatalogLoader loader = (CatalogLoader) DynConstructors.builder(CatalogLoader.class)\n+              .impl(catalogLoaderClass)\n+              .build()\n+              .newInstance();\n+      return Optional.of(loader.load(conf));\n+    }\n+\n+    String catalogName = conf.get(InputFormatConfig.CATALOG);\n+\n+    if (catalogName != null) {\n+      switch (catalogName.toLowerCase()) {\n+        case HADOOP:\n+          return Optional.of(new HadoopCatalog(conf));", "originalCommit": "78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5Nzg5OQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r468197899", "bodyText": "Yes, that would be useful. I've just pushed 90ccd39 for that purpose.", "author": "guilload", "createdAt": "2020-08-10T21:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzNjQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzODAwMA==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463838000", "bodyText": "Doesn't this also need to forward the catalog loader class?", "author": "rdblue", "createdAt": "2020-07-31T21:01:05Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergStorageHandler.java", "diffHunk": "@@ -66,7 +73,12 @@ public HiveAuthorizationProvider getAuthorizationProvider() throws HiveException\n \n   @Override\n   public void configureInputJobProperties(TableDesc tableDesc, Map<String, String> map) {\n+    Properties props = tableDesc.getProperties();\n+    Table table = Catalogs.loadTable(conf, props);\n \n+    map.put(InputFormatConfig.TABLE_IDENTIFIER, props.getProperty(NAME));\n+    map.put(InputFormatConfig.TABLE_LOCATION, table.location());\n+    map.put(InputFormatConfig.TABLE_SCHEMA, SchemaParser.toJson(table.schema()));", "originalCommit": "78ca70c450ebf2d976a2981f3bb1ac38dd2dafde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg1NDUxMg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463854512", "bodyText": "Depends upon where we set the catalog loader class.   If we set it in HiveConf, then it will always be available by default in configuration. If we want to expose catalog loader class as a table property, e.g to load different tables differently, then we can forward it here.", "author": "rdsr", "createdAt": "2020-07-31T21:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzODAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg2NzA5NQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r463867095", "bodyText": "It seems like it would always comes from table properties to me, since we might have tables from different Iceberg catalogs.", "author": "rdblue", "createdAt": "2020-07-31T22:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzODAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NzIwMA==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r464367200", "bodyText": "Yes, and ideally we'd have a unit test which uses multiple tables which are set up differently and checks that the properties that are unique to each table are honoured properly.", "author": "massdosage", "createdAt": "2020-08-03T11:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzODAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjA5Mg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r468202092", "bodyText": "The current implement of the catalog loader reads directly from the HiveConf and ignores the table properties, that why the catalog loader class is not forwarded here.\nI'm planning to add the ability to declare the catalog in the table properties but I'd rather do so in a follow-up PR because that requires a refactor of the current test suite. I'll make sure to add a test that reads from multiples tables set up with different catalogs.", "author": "guilload", "createdAt": "2020-08-10T21:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzODAwMA=="}], "type": "inlineReview"}, {"oid": "0380666d4eb5bf8131cf856d5014e852b656e893", "url": "https://github.com/apache/iceberg/commit/0380666d4eb5bf8131cf856d5014e852b656e893", "message": "Add support for custom catalog to Iceberg StorageHandler (closes #1155)", "committedDate": "2020-08-10T20:06:06Z", "type": "commit"}, {"oid": "a0947ed76f9fc557277411f7ea231c68095d5cfc", "url": "https://github.com/apache/iceberg/commit/a0947ed76f9fc557277411f7ea231c68095d5cfc", "message": "Forward conf properties in HiveIcebergStorageHandler", "committedDate": "2020-08-10T20:06:06Z", "type": "commit"}, {"oid": "90ccd39b8e349b3506c9866e179112a408447bfa", "url": "https://github.com/apache/iceberg/commit/90ccd39b8e349b3506c9866e179112a408447bfa", "message": "Add warehouse location configuration setting for Hadoop catalog", "committedDate": "2020-08-10T20:06:41Z", "type": "commit"}, {"oid": "90ccd39b8e349b3506c9866e179112a408447bfa", "url": "https://github.com/apache/iceberg/commit/90ccd39b8e349b3506c9866e179112a408447bfa", "message": "Add warehouse location configuration setting for Hadoop catalog", "committedDate": "2020-08-10T20:06:41Z", "type": "forcePushed"}, {"oid": "2500efb57f3aa2385409a0894e144b5da9348846", "url": "https://github.com/apache/iceberg/commit/2500efb57f3aa2385409a0894e144b5da9348846", "message": "Run Hive test suite against multiple catalog implementations", "committedDate": "2020-08-11T22:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2NzQzNw==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r470367437", "bodyText": "it is kinda weird that we are calling this class TestHiveIcebergInputFormat instead of say TestHiveStorageHandler or something similar.", "author": "rdsr", "createdAt": "2020-08-14T01:51:44Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergInputFormat.java", "diffHunk": "@@ -45,9 +47,9 @@\n import static org.apache.iceberg.types.Types.NestedField.required;\n \n @RunWith(StandaloneHiveRunner.class)\n-public class TestHiveIcebergInputFormat {\n+public abstract class TestHiveIcebergInputFormat {", "originalCommit": "2500efb57f3aa2385409a0894e144b5da9348846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTU1Mg==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r470761552", "bodyText": "That's because this test class was added before the storage handler. I'll rename it.", "author": "guilload", "createdAt": "2020-08-14T17:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2NzQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MDEzMQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r470370131", "bodyText": "shouldn't we set the  custom catalog loader  by setting a table property catalog.loader.class here?", "author": "rdsr", "createdAt": "2020-08-14T02:03:23Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergInputFormat.java", "diffHunk": "@@ -155,11 +157,31 @@ public void testJoinTables() {\n     Assert.assertArrayEquals(new Object[] {1L, \"Bob\", 102L, 33.33d}, rows.get(2));\n   }\n \n-  private void createHiveTable(String table, String location) {\n+  protected void createTable(String tableName, Schema schema, List<Record> records)\n+          throws IOException {\n+    Table table = createIcebergTable(tableName, schema, records);\n+    createHiveTable(tableName, table.location());\n+  }\n+\n+  protected Table createIcebergTable(String tableName, Schema schema, List<Record> records)\n+          throws IOException {\n+    String identifier = testTables.identifier(\"default.\" + tableName);\n+    TestHelper helper = new TestHelper(\n+            metastore.hiveConf(), testTables.tables(), identifier, schema, SPEC, FileFormat.PARQUET, temp);\n+    Table table = helper.createTable();\n+\n+    if (!records.isEmpty()) {\n+      helper.appendToTable(helper.writeFile(null, records));\n+    }\n+\n+    return table;\n+  }\n+\n+  protected void createHiveTable(String tableName, String location) {\n     shell.execute(String.format(", "originalCommit": "2500efb57f3aa2385409a0894e144b5da9348846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MDg4MQ==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r470370881", "bodyText": "I think if we make createHiveTable [and maybe createIcebergTable] abstract, each implementation can set the right configuration in table properties. We can then test custom catalog and other configs without explicitly passing as properties from TestTables . What do you think?", "author": "rdsr", "createdAt": "2020-08-14T02:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MTM2Ng==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r470371366", "bodyText": "If that works [maybe we also have to abstract Configuration creation] then I think we can drop the TestTables class as well", "author": "rdsr", "createdAt": "2020-08-14T02:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2Nzk5Nw==", "url": "https://github.com/apache/iceberg/pull/1243#discussion_r470767997", "bodyText": "Yeah, I think that will work once the catalog loader handles catalog settings defined at the table properties level. I'll add this refactor in the follow up PR.", "author": "guilload", "createdAt": "2020-08-14T17:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MDEzMQ=="}], "type": "inlineReview"}, {"oid": "1d1e3fb78fecd388ff9a544e9a9e086c207f156a", "url": "https://github.com/apache/iceberg/commit/1d1e3fb78fecd388ff9a544e9a9e086c207f156a", "message": "Rename Hive storage handler test classes", "committedDate": "2020-08-14T17:59:19Z", "type": "commit"}]}