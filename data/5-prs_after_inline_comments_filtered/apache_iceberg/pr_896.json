{"pr_number": 896, "pr_title": "Avro: Support partition values using a constants map", "pr_createdAt": "2020-04-06T20:50:18Z", "pr_url": "https://github.com/apache/iceberg/pull/896", "timeline": [{"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "url": "https://github.com/apache/iceberg/commit/d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "message": "Avro: Support partition values using a constants map.", "committedDate": "2020-04-06T20:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MjIzNg==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404382236", "bodyText": "I did a quick check on this method to make sure the incoming buffer is not modified and found that it is for off-heap buffers. This fixes the problem, but isn't really related. If anyone prefers, I can move this to a separate PR.", "author": "rdblue", "createdAt": "2020-04-06T20:55:29Z", "path": "core/src/main/java/org/apache/iceberg/util/ByteBuffers.java", "diffHunk": "@@ -41,7 +41,7 @@\n       }\n     } else {\n       byte[] bytes = new byte[buffer.remaining()];\n-      buffer.get(bytes);\n+      buffer.asReadOnlyBuffer().get(bytes);", "originalCommit": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NDAyMw==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404794023", "bodyText": "Is this true only for identity partitioning or in general?", "author": "rdsr", "createdAt": "2020-04-07T13:08:12Z", "path": "core/src/main/java/org/apache/iceberg/util/PartitionUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.FileScanTask;\n+import org.apache.iceberg.PartitionField;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.StructLike;\n+\n+public class PartitionUtil {\n+  private PartitionUtil() {\n+  }\n+\n+  public static Map<Integer, ?> constantsMap(FileScanTask task) {\n+    return constantsMap(task.spec(), task.file().partition());\n+  }\n+\n+  private static Map<Integer, ?> constantsMap(PartitionSpec spec, StructLike partitionData) {\n+    // use java.util.HashMap because partition data may contain null values", "originalCommit": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MDk4Nw==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404950987", "bodyText": "In general. All partition functions are required to return null when applied to null.", "author": "rdblue", "createdAt": "2020-04-07T16:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NDAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5ODE2MA==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404798160", "bodyText": "no longer required?", "author": "rdsr", "createdAt": "2020-04-07T13:14:12Z", "path": "data/src/main/java/org/apache/iceberg/data/TableScanIterable.java", "diffHunk": "@@ -74,13 +76,15 @@\n \n   private CloseableIterable<Record> open(FileScanTask task) {\n     InputFile input = ops.io().newInputFile(task.file().path().toString());\n+    Map<Integer, ?> partition = PartitionUtil.constantsMap(task);\n \n     // TODO: join to partition data from the manifest file", "originalCommit": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTY2MA==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404951660", "bodyText": "We still need to for Parquet (#585) and ORC (#897).", "author": "rdblue", "createdAt": "2020-04-07T16:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5ODE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5OTMxMw==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404799313", "bodyText": "nit: idToConstants like other places?", "author": "rdsr", "createdAt": "2020-04-07T13:15:51Z", "path": "data/src/main/java/org/apache/iceberg/data/avro/DataReader.java", "diffHunk": "@@ -45,17 +46,23 @@\n       ThreadLocal.withInitial(() -> new MapMaker().weakKeys().makeMap());\n \n   public static <D> DataReader<D> create(org.apache.iceberg.Schema expectedSchema, Schema readSchema) {\n-    return new DataReader<>(expectedSchema, readSchema);\n+    return create(expectedSchema, readSchema, ImmutableMap.of());\n+  }\n+\n+  public static <D> DataReader<D> create(org.apache.iceberg.Schema expectedSchema, Schema readSchema,\n+                                         Map<Integer, ?> constants) {", "originalCommit": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MjM1NQ==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404992355", "bodyText": "Fixed", "author": "rdblue", "createdAt": "2020-04-07T17:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5OTMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0ODA5MQ==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404948091", "bodyText": "Should we return the obj at pos here?", "author": "rdsr", "createdAt": "2020-04-07T16:31:02Z", "path": "spark/src/main/java/org/apache/iceberg/spark/data/SparkValueReaders.java", "diffHunk": "@@ -253,46 +258,59 @@ public ArrayBasedMapData read(Decoder decoder, Object reuse) throws IOException\n     }\n   }\n \n-  static class StructReader implements ValueReader<InternalRow> {\n-    private final ValueReader<?>[] readers;\n+  static class StructReader extends ValueReaders.StructReader<InternalRow> {\n+    private final int numFields;\n \n-    private StructReader(List<ValueReader<?>> readers) {\n-      this.readers = new ValueReader[readers.size()];\n-      for (int i = 0; i < this.readers.length; i += 1) {\n-        this.readers[i] = readers.get(i);\n-      }\n+    protected StructReader(List<ValueReader<?>> readers, Types.StructType struct, Map<Integer, ?> idToConstant) {\n+      super(readers, struct, idToConstant);\n+      this.numFields = readers.size();\n     }\n \n-    ValueReader<?>[] readers() {\n-      return readers;\n+    @Override\n+    protected InternalRow reuseOrCreate(Object reuse) {\n+      if (reuse instanceof GenericInternalRow && ((GenericInternalRow) reuse).numFields() == numFields) {\n+        return (InternalRow) reuse;\n+      }\n+      return new GenericInternalRow(numFields);\n     }\n \n     @Override\n-    public InternalRow read(Decoder decoder, Object reuse) throws IOException {\n-      GenericInternalRow row = new GenericInternalRow(readers.length);\n-      if (decoder instanceof ResolvingDecoder) {\n-        // this may not set all of the fields. nulls are set by default.\n-        for (Schema.Field field : ((ResolvingDecoder) decoder).readFieldOrder()) {\n-          Object value = readers[field.pos()].read(decoder, null);\n-          if (value != null) {\n-            row.update(field.pos(), value);\n-          } else {\n-            row.setNullAt(field.pos());\n-          }\n-        }\n+    protected Object get(InternalRow struct, int pos) {\n+      return null;", "originalCommit": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MjQyNg==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404952426", "bodyText": "The previous version of this code didn't implement reuse, probably because it needs the Spark type to correctly fetch the value. Rather than fix that in this PR, we can implement reuse in another one.", "author": "rdblue", "createdAt": "2020-04-07T16:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0ODA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MzYwOQ==", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404953609", "bodyText": "Sounds good!", "author": "rdsr", "createdAt": "2020-04-07T16:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0ODA5MQ=="}], "type": "inlineReview"}, {"oid": "7a50f583d511435bcb2c43e0b02ddb722db32fc0", "url": "https://github.com/apache/iceberg/commit/7a50f583d511435bcb2c43e0b02ddb722db32fc0", "message": "Fix checkstyle and review issues.", "committedDate": "2020-04-07T17:38:25Z", "type": "commit"}, {"oid": "f2227e60dbe8eeba289934b5dcacd6674c8700b9", "url": "https://github.com/apache/iceberg/commit/f2227e60dbe8eeba289934b5dcacd6674c8700b9", "message": "Fix checkstyle problems.", "committedDate": "2020-04-07T21:32:22Z", "type": "commit"}]}