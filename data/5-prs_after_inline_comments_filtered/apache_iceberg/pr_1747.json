{"pr_number": 1747, "pr_title": "API: add isNaN and notNaN predicates", "pr_createdAt": "2020-11-10T01:23:46Z", "pr_url": "https://github.com/apache/iceberg/pull/1747", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTg0Mw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521651843", "bodyText": "I think new methods should throw UnsupportedOperationException so that visitors must be updated to work with isNaN.", "author": "rdblue", "createdAt": "2020-11-11T21:34:44Z", "path": "api/src/main/java/org/apache/iceberg/expressions/ExpressionVisitors.java", "diffHunk": "@@ -75,6 +75,14 @@ public R or(R leftResult, R rightResult) {\n       return null;\n     }\n \n+    public <T> R isNaN(BoundReference<T> ref) {\n+      return null;\n+    }\n+\n+    public <T> R notNaN(BoundReference<T> ref) {\n+      return null;", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzYxMw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521837613", "bodyText": "I initially made these methods abstract to ensure I implemented them in all the child classes, but UnsupportedOperationException is definitely a better idea!", "author": "yyanyy", "createdAt": "2020-11-12T04:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MzMxMA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521653310", "bodyText": "I think \"accepts\" isn't quite the right verb. What about \"includes\" instead?", "author": "rdblue", "createdAt": "2020-11-11T21:37:23Z", "path": "api/src/main/java/org/apache/iceberg/expressions/UnboundPredicate.java", "diffHunk": "@@ -127,11 +128,27 @@ private Expression bindUnaryOperation(BoundTerm<T> boundTerm) {\n           return Expressions.alwaysTrue();\n         }\n         return new BoundUnaryPredicate<>(Operation.NOT_NULL, boundTerm);\n+      case IS_NAN:\n+        if (typeAcceptsNaN(boundTerm.type().typeId())) {\n+          return new BoundUnaryPredicate<>(Operation.IS_NAN, boundTerm);\n+        } else {\n+          return Expressions.alwaysFalse();\n+        }\n+      case NOT_NAN:\n+        if (typeAcceptsNaN(boundTerm.type().typeId())) {\n+          return new BoundUnaryPredicate<>(Operation.NOT_NAN, boundTerm);\n+        } else {\n+          return Expressions.alwaysTrue();\n+        }\n       default:\n-        throw new ValidationException(\"Operation must be IS_NULL or NOT_NULL\");\n+        throw new ValidationException(\"Operation must be IS_NULL, NOT_NULL, IS_NAN, or NOT_NAN\");\n     }\n   }\n \n+  private boolean typeAcceptsNaN(Type.TypeID typeID) {", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDQxNw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521654417", "bodyText": "Should this be a static helper somewhere since it is duplicated here and in Evaluator?", "author": "rdblue", "createdAt": "2020-11-11T21:39:17Z", "path": "api/src/main/java/org/apache/iceberg/expressions/BoundUnaryPredicate.java", "diffHunk": "@@ -46,18 +46,35 @@ public boolean test(T value) {\n         return value == null;\n       case NOT_NULL:\n         return value != null;\n+      case IS_NAN:\n+        return isNaN(value);\n+      case NOT_NAN:\n+        return !isNaN(value);\n       default:\n         throw new IllegalStateException(\"Invalid operation for BoundUnaryPredicate: \" + op());\n     }\n   }\n \n+  private boolean isNaN(T value) {", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTY2Ng==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521655666", "bodyText": "Should we define a similar containsNaNsOnly method to use in notNaN and for a similar use in isNull?", "author": "rdblue", "createdAt": "2020-11-11T21:41:57Z", "path": "api/src/main/java/org/apache/iceberg/expressions/InclusiveMetricsEvaluator.java", "diffHunk": "@@ -150,6 +152,53 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_MATCH;\n     }\n \n+    @Override\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      Integer id = ref.fieldId();\n+\n+      if (nanCounts != null && nanCounts.containsKey(id) && nanCounts.get(id) == 0) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      // when there's no nanCounts information, but we already know the column only contains null,\n+      // it's guaranteed that there's no NaN value\n+      if (containsNullsOnly(id)) {", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzg3Nw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521837877", "bodyText": "I didn't define notNaN originally as I could directly return ROWS_CANNOT_MATCH when both nanCounts and valueCounts contain this column but numbers don't match, without going into the next block of logic (of checking upper == lower == NaN and null count == 0); but this advantage no longer exists since that block needs to be removed.\nBut I wasn't sure if we need it for isNull: currently in isNull() we are checking if nullCounts == 0 to return ROWS_CANNOT_MATCH, and I guess the only chance where we rely on containsNaNsOnly to return ROWS_CANNOT_MATCH is nullCounts for this column doesn't exist but nanCounts does. I personally feel the chance of this happening would be small, do you think we will run into this case often?", "author": "yyanyy", "createdAt": "2020-11-12T04:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MjgwNA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528452804", "bodyText": "I agree that the containsNaNsOnly logic will not be very useful as Yan said, but I think it is also valuable to have that private method just for readability.\nThen the question reduces to: do we need to consider the case that null value metrics do not exist but NaN metrics do. For now I think the answer is no, because in all metrics modes NaN and null counters either both exist or both not exist.", "author": "jackye1995", "createdAt": "2020-11-23T03:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyOTk0Ng==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528929946", "bodyText": "Sounds good, I'll create a containsNaNsOnly for readability. Ryan, do you have comment on the other point?", "author": "yyanyy", "createdAt": "2020-11-23T19:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMzA4OA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529013088", "bodyText": "I agree with the reasoning. If we have NaN counts, then we should have null counts. No need to over-complicated the null logic with a check for when we don't have null counts but do have NaN counts. Good catch!", "author": "rdblue", "createdAt": "2020-11-23T21:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NjU0MA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521656540", "bodyText": "I don't think this is true. This test shows an ORC case where upper and lower are NaN, but there are non-NaN values in the column.", "author": "rdblue", "createdAt": "2020-11-11T21:44:00Z", "path": "api/src/main/java/org/apache/iceberg/expressions/InclusiveMetricsEvaluator.java", "diffHunk": "@@ -150,6 +152,53 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_MATCH;\n     }\n \n+    @Override\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      Integer id = ref.fieldId();\n+\n+      if (nanCounts != null && nanCounts.containsKey(id) && nanCounts.get(id) == 0) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      // when there's no nanCounts information, but we already know the column only contains null,\n+      // it's guaranteed that there's no NaN value\n+      if (containsNullsOnly(id)) {\n+        return ROWS_CANNOT_MATCH;\n+      }\n+\n+      return ROWS_MIGHT_MATCH;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"checkstyle:CyclomaticComplexity\")\n+    public <T> Boolean notNaN(BoundReference<T> ref) {\n+      Integer id = ref.fieldId();\n+\n+      if (nanCounts != null && nanCounts.containsKey(id) &&\n+          valueCounts != null && valueCounts.containsKey(id)) {\n+        if (nanCounts.get(id).equals(valueCounts.get(id))) {\n+          return ROWS_CANNOT_MATCH;\n+        }\n+\n+        return ROWS_MIGHT_MATCH;\n+      }\n+\n+      // for v1 table, when NaN could still be upper/lower bound,\n+      // if upper == lower == NaN and null count == 0, the column will only contain NaN", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzkyNA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521837924", "bodyText": "I totally forgot that, thanks for reminding this! Will remove this logic.", "author": "yyanyy", "createdAt": "2020-11-12T04:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NjU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521660826", "bodyText": "Do we also need to update the equality predicate to catch NaN and rewrite to isNaN?", "author": "rdblue", "createdAt": "2020-11-11T21:52:50Z", "path": "api/src/main/java/org/apache/iceberg/expressions/Expressions.java", "diffHunk": "@@ -123,6 +123,22 @@ public static Expression not(Expression child) {\n     return new UnboundPredicate<>(Expression.Operation.NOT_NULL, expr);\n   }\n \n+  public static <T> UnboundPredicate<T> isNaN(String name) {\n+    return new UnboundPredicate<>(Expression.Operation.IS_NAN, ref(name));\n+  }\n+\n+  public static <T> UnboundPredicate<T> isNaN(UnboundTerm<T> expr) {\n+    return new UnboundPredicate<>(Expression.Operation.IS_NAN, expr);\n+  }\n+\n+  public static <T> UnboundPredicate<T> notNaN(String name) {\n+    return new UnboundPredicate<>(Expression.Operation.NOT_NAN, ref(name));\n+  }\n+\n+  public static <T> UnboundPredicate<T> notNaN(UnboundTerm<T> expr) {\n+    return new UnboundPredicate<>(Expression.Operation.NOT_NAN, expr);\n+  }", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzk3Mw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521837973", "bodyText": "I originally thought to update SparkFilters to do the rewrite, but this is a much better place. Thanks for the suggestion!\nEdit: what do you think about doing rewriting eq within UnboundPredicate? And for rewriting in, I was thinking to let Expressions.in to do the rewrite logic of or(isNaN, in)/and(notNaN, notIn), but that means it will return Expression instead of Predicate; does that align with your thinking?", "author": "yyanyy", "createdAt": "2020-11-12T04:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjMwOA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528456308", "bodyText": "I do not fully understand what you mean by \"rewrite logic of or(isNaN, in)/and(notNaN, notIn)\" when you talk about rewriting in. Can you give some examples of what predicate are you trying to support?", "author": "jackye1995", "createdAt": "2020-11-23T03:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MDQ5OQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528940499", "bodyText": "So now since we want to handle NaN in in predicate, for query in(1,2, NaN) to avoid checking for NaN in in evaluation all the time we can transform that to in(1,2) or isNaN, and notIn(1,2,NaN) to notIn(1, 2) and notNaN. The problem is where to do that, since in and notIn are both predicate, and if we are extending them we are transforming a predicate (simpler form) to an expression (complex form), and I think there's no such case in the current code base, and it would touch a lot of existing test cases for this.", "author": "yyanyy", "createdAt": "2020-11-23T19:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxNjY0Mw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529016643", "bodyText": "Okay so it's what I thought, just a bit confused by the notation.\nSo for eq, what is the benefit of doing it in UnboundedPredicate versus just rewriting it in the Expressions?\nFor in, I think it is a more complex question.We need to figure out:\n\nshould syntax like in(1,2,NaN) be supported, given it can be written as is_nan or in(1,2) on client side\nif so, Expressions.in should return Expression as you said, which looks fine to me because the only caller SparkFilters.convert also returns an Expression in the end.\nmaybe we should tackle this in another PR to keep changes concise.", "author": "jackye1995", "createdAt": "2020-11-23T21:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAzMDY3MA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529030670", "bodyText": "I think it is important to catch problems as early as possible, so I'd rather not add logic to binding if we can do it here. I see what you mean that it would require more test changes, but I think we could avoid that problem by simply rejecting predicates that are passed NaN, just like these methods reject null literals. That's an easy way to get this PR done and not over-complicate binding. What do you think?\nWe could still rewrite equals and notEquals.", "author": "rdblue", "createdAt": "2020-11-23T22:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MjY0NQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529062645", "bodyText": "The main reason for me to suggest rewriting in UnboundPredicate is mostly for readability, as UnboundPredicate already contains quite some rewritings, and updating Expressions will result in more changes to itself and related test cases.\nI agree with catching problems early, and just to confirm, I guess this only applies to rejecting invalid input, as rewriting equals/notEquals in Expressions probably won't help with catching problem early as it probably won't throw anything by rewriting without binding? Based on my understanding I will do the following:\n\nreject >/>=/</<= NaN in Expressions (currently in UnboundPredicate, will move to Expressions)\ncheck if in/notIn literals contain NaN and reject\nrewrite eq/notEq in UnboundPredicate (already happening)\n\nPlease let me know if you have comment!", "author": "yyanyy", "createdAt": "2020-11-23T23:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzMyOA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529087328", "bodyText": "My suggestion to reject invalid predicates should help avoid the problem of rewriting so much test code. What I'm trying to say is that if it requires changing the return type of one of the factory methods, let's throw an IllegalArgumentException instead so that we don't need to.\nFrom your list, I agree with 1 and 2, but for 3 I would do the rewrite in Expressions because isNan and notNaN rewrites will produce UnboundPredicate and we don't have to change the tests. Only rewriting in and notIn would require changing lots of tests, right?", "author": "rdblue", "createdAt": "2020-11-24T00:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5MzIwNQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529093205", "bodyText": "Thanks for the quick response! Yeah I think the amount of change to method return type/tests is not a concern now. I just wasn't entirely sure if rewriting eq to isNan in Expressions will help with catching problems early (comparing to rewriting in UnboundPredicate), since it seems to me that the related code will not have a chance to throw any exception until bind() is called?", "author": "yyanyy", "createdAt": "2020-11-24T00:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA5NjI5MQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529096291", "bodyText": "Yeah, it isn't much earlier in that case. Maybe that actually exposes a problem with rewriting, too.\nExpressions.equal(\"c\", Double.NaN) if c is not a floating point column would result in isNaN, which should be rejected while binding expressions. You could argue that it should rewrite to alwaysFalse instead following the same logic as Expressions.equal(\"intCol\", Long.MAX_VALUE) -- it can't be true.\nI think that it would be better to be strict and reject binding in that case because something is clearly wrong. I think a lot of the time, that kind of error would happen when columns are misaligned or predicates are incorrectly converted.\nIf the result of those errors is just to fail in expression binding, then why rewrite at all? Maybe we should just reject NaN in any predicate and force people to explicitly use isNaN and notNaN. That way we do throw an exception much earlier in all cases. Plus, we wouldn't have to worry about confusion over whether NaN is equal to itself: in Java, a Double that holds NaN is equal to itself, but a primitive is not. \ud83d\ude15", "author": "rdblue", "createdAt": "2020-11-24T01:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3NjE5NQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529176195", "bodyText": "Thanks, those are some good points! To make sure I understand correctly/know how to move forward, I have some questions:\n\nIf I understand correctly, to reject NaN in any predicate sounds like we might go back to the idea of rewriting equals in SparkFilters (or in general, the integration point with engines during the query-to-expression translation); or maybe even earlier than that, to let engines to support syntax of is NaN?\nSince to know if a query is eligible to be translated to isNaN there has to be some place that ensures the type has to be either double or float, and in iceberg code base we will only know this during binding; are we able to rely on engine to do this check before translating query to Expression?\nAnd seems like this may only impact eq as we decided to do input validation on other lg/lteq/gt/gteq and in anyway?\nAnd if we start to throw exceptions when the code passes in NaN to eq, that may sound backward incompatible until the engine starts to rewrite NaN?\n\nI guess the conversation is starting to get too detailed, if you wouldn't mind I'll try to follow up on Slack tomorrow and then post the conclusion here?", "author": "yyanyy", "createdAt": "2020-11-24T03:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMzg0Nw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529813847", "bodyText": "If I understand correctly, to reject NaN in any predicate sounds like we might go back to the idea of rewriting equals in SparkFilters\n\nYes. If the engine generally uses d = NaN then we can convert that to isNaN. But that would be engine-dependent and the Iceberg expression API would not support equals with NaN.\n\nare we able to rely on engine to do this check before translating query to Expression?\n\nI think so. Most engines will optimize the SQL expressions and handle this already. If not, then it would result in an exception from Iceberg to the user. I think that's okay, too, because as I said above, we want to fail if a NaN is used in an expression with a non-floating-point column, not rewrite to false.\n\nAnd seems like this may only impact eq as we decided to do input validation on other lg/lteq/gt/gteq and in anyway?\n\nYes. This makes all of the handling in Expressions consistent: always reject NaN values.\n\nthat may sound backward incompatible until the engine starts to rewrite NaN?\n\nI'm not convinced either way. You could argue that d = NaN is ambiguous and that rejecting it is now fixing a bug. That's certainly the case with d > NaN, which is not defined. On the other hand, there was some bevhavior before that will now no longer work. So I'd be up for fixing this in Flink and Spark conversions as soon as we can.\nFeel free to ping me on Slack!", "author": "rdblue", "createdAt": "2020-11-24T19:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NTg5Nw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r530745897", "bodyText": "Thank you for the explanation! I think now I understand the full picture. I think I've addressed everything except for rewriting in SparkFilters and other engines, which I think this PR is already too big so I'll submit a separate PR for it (likely next week).", "author": "yyanyy", "createdAt": "2020-11-26T02:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MDgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MTcyNA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521661724", "bodyText": "To be safe, I think this should validate that containsNull is true.", "author": "rdblue", "createdAt": "2020-11-11T21:54:43Z", "path": "api/src/main/java/org/apache/iceberg/expressions/ManifestEvaluator.java", "diffHunk": "@@ -142,6 +142,25 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_MATCH;\n     }\n \n+    @Override\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      int pos = Accessors.toPosition(ref.accessor());\n+      // containsNull encodes whether at least one partition value is null, lowerBound is null if\n+      // all partition values are null.\n+      ByteBuffer lowerBound = stats.get(pos).lowerBound();\n+      if (lowerBound == null) {", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzODIwMQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521838201", "bodyText": "You mean check for both containsNull and stats.get(pos).lowerBound() == null are true? When would lowerBound be null while the column doesn't contain null? I guess I'll also need to update notNull for this too (since I copied the logic from there)?", "author": "yyanyy", "createdAt": "2020-11-12T04:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MTcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NDc2OA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528454768", "bodyText": "Seems like #1803 is missing PartitionFieldSummary.containsNaN(), or is it in some other PR?", "author": "jackye1995", "createdAt": "2020-11-23T03:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MTcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNTYwNg==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528935606", "bodyText": "That should be doable, although I originally consider the scope of the NaN support to be only on manifest entry level, I  wasn't sure if we want to extend it beyond that?", "author": "yyanyy", "createdAt": "2020-11-23T19:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MTcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMjk5MQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529022991", "bodyText": "I'm not sure of a case where it would happen, but containsNull is the source of truth for whether there are null values, not a missing bound value.", "author": "rdblue", "createdAt": "2020-11-23T21:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MTcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MjkxMw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529062913", "bodyText": "Sounds good, I'll add containsNull to both here and notNull. And looks like we do want to update PartitionFieldSummary, that I'll do in a separate pr.", "author": "yyanyy", "createdAt": "2020-11-23T23:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MTcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2Mjk5NQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521662995", "bodyText": "Good catch.", "author": "rdblue", "createdAt": "2020-11-11T21:57:39Z", "path": "api/src/main/java/org/apache/iceberg/expressions/StrictMetricsEvaluator.java", "diffHunk": "@@ -57,10 +57,10 @@ public StrictMetricsEvaluator(Schema schema, Expression unbound) {\n   }\n \n   /**\n-   * Test whether the file may contain records that match the expression.\n+   * Test whether all records within the file match the expression.\n    *\n    * @param file a data file\n-   * @return false if the file cannot contain rows that match the expression, true otherwise.\n+   * @return false if the file may contain any row that doesn't match the expression, true otherwise.", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MzUyMQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521663521", "bodyText": "Same here as above. If there are non-NaN values then this should return ROWS_MIGHT_NOT_MATCH.", "author": "rdblue", "createdAt": "2020-11-11T21:58:47Z", "path": "api/src/main/java/org/apache/iceberg/expressions/StrictMetricsEvaluator.java", "diffHunk": "@@ -144,6 +146,51 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_NOT_MATCH;\n     }\n \n+    @Override\n+    @SuppressWarnings(\"checkstyle:CyclomaticComplexity\")\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      int id = ref.fieldId();\n+\n+      if (nanCounts != null && nanCounts.containsKey(id) &&\n+          valueCounts != null && valueCounts.containsKey(id)) {\n+        if (nanCounts.get(id).equals(valueCounts.get(id))) {\n+          return ROWS_MUST_MATCH;\n+        }\n+\n+        return ROWS_MIGHT_NOT_MATCH;\n+      }\n+\n+      // for v1 table, when NaN could still be upper/lower bound,\n+      // if upper == lower == NaN and null count == 0, the column will only contain NaN", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzODIzMw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521838233", "bodyText": "\ud83d\udc4d  will remove this block", "author": "yyanyy", "createdAt": "2020-11-12T04:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2MzUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NDI3Ng==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521664276", "bodyText": "Here's another implementation of the same test.", "author": "rdblue", "createdAt": "2020-11-11T22:00:19Z", "path": "api/src/main/java/org/apache/iceberg/expressions/ResidualEvaluator.java", "diffHunk": "@@ -152,6 +152,30 @@ public Expression or(Expression leftResult, Expression rightResult) {\n       return (ref.eval(struct) != null) ? alwaysTrue() : alwaysFalse();\n     }\n \n+    @Override\n+    public <T> Expression isNaN(BoundReference<T> ref) {\n+      return isNaN(ref.eval(struct)) ? alwaysTrue() : alwaysFalse();\n+    }\n+\n+    @Override\n+    public <T> Expression notNaN(BoundReference<T> ref) {\n+      return isNaN(ref.eval(struct)) ? alwaysFalse() : alwaysTrue();\n+    }\n+\n+    private <T> boolean isNaN(T value) {", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NzM5NA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521667394", "bodyText": "Minor: Using FILE_2 is a little strange to read because the column is still called \"no_nans\". Consider adding another column instead called no_nan_stats just like the no_stats column that is used for isNull/notNull.", "author": "rdblue", "createdAt": "2020-11-11T22:07:37Z", "path": "api/src/test/java/org/apache/iceberg/expressions/TestInclusiveMetricsEvaluator.java", "diffHunk": "@@ -156,6 +192,54 @@ public void testNoNulls() {\n     Assert.assertFalse(\"Should skip: non-null column contains no null values\", shouldRead);\n   }\n \n+  @Test\n+  public void testIsNaN() {\n+    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"all_nans\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one nan value in all nan column\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"some_nans\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one nan value in some nan column\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"no_nans\")).eval(FILE);\n+    Assert.assertFalse(\"Should skip: no-nans column contains no nan values\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"all_nulls_double\")).eval(FILE);\n+    Assert.assertFalse(\"Should skip: all-null column doesn't contain nan value\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"no_nans\")).eval(FILE_2);\n+    Assert.assertTrue(\"Should read: no guarantee on if contains nan value without nan stats\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"all_nans_v1_stats\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one nan value in all nan column\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, isNaN(\"nan_and_null_only\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one nan value in nan and nulls only column\", shouldRead);\n+  }\n+\n+  @Test\n+  public void testNotNaN() {\n+    boolean shouldRead = new InclusiveMetricsEvaluator(SCHEMA, notNaN(\"all_nans\")).eval(FILE);\n+    Assert.assertFalse(\"Should skip: column with all nans will not contain non-nan\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, notNaN(\"some_nans\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one non-nan value in some nan column\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, notNaN(\"no_nans\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one non-nan value in no nan column\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, notNaN(\"all_nulls_double\")).eval(FILE);\n+    Assert.assertTrue(\"Should read: at least one non-nan value in all null column\", shouldRead);\n+\n+    shouldRead = new InclusiveMetricsEvaluator(SCHEMA, notNaN(\"no_nans\")).eval(FILE_2);", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3MjU0NQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521672545", "bodyText": "Do we need NaN cases for other evaluators?", "author": "rdblue", "createdAt": "2020-11-11T22:19:21Z", "path": "api/src/test/java/org/apache/iceberg/transforms/TestResiduals.java", "diffHunk": "@@ -214,6 +218,36 @@ public void testInTimestamp() {\n     Assert.assertEquals(\"Residual should be alwaysFalse\", alwaysFalse(), residual);\n   }\n \n+  @Test\n+  public void testInNaN() {", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzODMxNA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521838314", "bodyText": "You mean testing InNaN case for other evaluators? Yeah I'll do that", "author": "yyanyy", "createdAt": "2020-11-12T04:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3MjU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NjQyNA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r530746424", "bodyText": "Since we decided that we don't accept NaN in in, I guess this conversation is outdated. I've removed inNaN test from here.", "author": "yyanyy", "createdAt": "2020-11-26T02:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3MjU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NDQyMQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521674421", "bodyText": "Maybe update the context to \"NaN counts are not tracked in Parquet metrics\".", "author": "rdblue", "createdAt": "2020-11-11T22:23:30Z", "path": "data/src/test/java/org/apache/iceberg/data/TestMetricsRowGroupFilter.java", "diffHunk": "@@ -281,6 +295,37 @@ public void testNoNulls() {\n     Assert.assertTrue(\"Should read: struct type is not skipped\", shouldRead);\n   }\n \n+  @Test\n+  public void testIsNaN() {\n+    boolean shouldRead = shouldRead(isNaN(\"all_nans\"));\n+    Assert.assertTrue(\"Should read: not enough information\", shouldRead);", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NTI4MQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521675281", "bodyText": "If there is a NaN value, then it would be in the Parquet dictionary. I think that we can implement this for Parquet.", "author": "rdblue", "createdAt": "2020-11-11T22:25:28Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -148,6 +148,16 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_MATCH;\n     }\n \n+    @Override\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      return ROWS_MIGHT_MATCH;", "originalCommit": "5789abb3c923c2528f42eed3f9f75bfcb8fb8a0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzODM2Ng==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r521838366", "bodyText": "Thanks! I'll see how it works", "author": "yyanyy", "createdAt": "2020-11-12T04:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NTI4MQ=="}], "type": "inlineReview"}, {"oid": "3fc48a0f465426d032cbe2fe0a6c6026438536ec", "url": "https://github.com/apache/iceberg/commit/3fc48a0f465426d032cbe2fe0a6c6026438536ec", "message": "update based on comments", "committedDate": "2020-11-18T02:27:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNjE2MQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528436161", "bodyText": "why not be consistent with isNull and notNull and return null?", "author": "jackye1995", "createdAt": "2020-11-23T01:19:31Z", "path": "api/src/main/java/org/apache/iceberg/expressions/ExpressionVisitors.java", "diffHunk": "@@ -75,6 +75,14 @@ public R or(R leftResult, R rightResult) {\n       return null;\n     }\n \n+    public <T> R isNaN(BoundReference<T> ref) {\n+      throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement isNaN\");", "originalCommit": "3fc48a0f465426d032cbe2fe0a6c6026438536ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDA1Ng==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528930056", "bodyText": "This is actually a point brought up by Ryan earlier :D This was so that visitors must be updated to work with isNaN.", "author": "yyanyy", "createdAt": "2020-11-23T19:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNjE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxNDgyMQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529014821", "bodyText": "Thanks for updating this. And nice error message!", "author": "rdblue", "createdAt": "2020-11-23T21:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNjE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNzU1NQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528437555", "bodyText": "nit: looks like iceberg util classes use XxxUtil instead of utils. And there is a org.apache.iceberg.util package path for utils in the api module.", "author": "jackye1995", "createdAt": "2020-11-23T01:30:14Z", "path": "api/src/main/java/org/apache/iceberg/expressions/NaNUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*", "originalCommit": "3fc48a0f465426d032cbe2fe0a6c6026438536ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NTI4OA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528455288", "bodyText": "good catch", "author": "jackye1995", "createdAt": "2020-11-23T03:23:05Z", "path": "api/src/main/java/org/apache/iceberg/expressions/StrictMetricsEvaluator.java", "diffHunk": "@@ -118,7 +120,7 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n     public <T> Boolean isNull(BoundReference<T> ref) {\n       // no need to check whether the field is required because binding evaluates that case\n       // if the column has any non-null values, the expression does not match\n-      Integer id = ref.fieldId();\n+      int id = ref.fieldId();", "originalCommit": "3fc48a0f465426d032cbe2fe0a6c6026438536ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NTQxNQ==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r528455415", "bodyText": "can refactor with containsNaNOnly as discussed above, and the checkstyle issue should not show up anymore.", "author": "jackye1995", "createdAt": "2020-11-23T03:23:46Z", "path": "api/src/main/java/org/apache/iceberg/expressions/StrictMetricsEvaluator.java", "diffHunk": "@@ -144,6 +146,35 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_NOT_MATCH;\n     }\n \n+    @Override\n+    @SuppressWarnings(\"checkstyle:CyclomaticComplexity\")\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      int id = ref.fieldId();\n+\n+      if (nanCounts != null && nanCounts.containsKey(id) &&", "originalCommit": "3fc48a0f465426d032cbe2fe0a6c6026438536ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMDA3OA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529020078", "bodyText": "You can also use Comparators.forType. The dictionary cannot contain null values so there is no need to wrap for null handling.", "author": "rdblue", "createdAt": "2020-11-23T21:52:54Z", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -148,6 +150,39 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n       return ROWS_MIGHT_MATCH;\n     }\n \n+    @Override\n+    public <T> Boolean isNaN(BoundReference<T> ref) {\n+      int id = ref.fieldId();\n+\n+      Boolean hasNonDictPage = isFallback.get(id);\n+      if (hasNonDictPage == null || hasNonDictPage) {\n+        return ROWS_MIGHT_MATCH;\n+      }\n+\n+      Set<T> dictionary = dict(id, comparatorForNaNPredicate(ref));\n+      return dictionary.stream().anyMatch(NaNUtil::isNaN) ? ROWS_MIGHT_MATCH : ROWS_CANNOT_MATCH;\n+    }\n+\n+    @Override\n+    public <T> Boolean notNaN(BoundReference<T> ref) {\n+      int id = ref.fieldId();\n+\n+      Boolean hasNonDictPage = isFallback.get(id);\n+      if (hasNonDictPage == null || hasNonDictPage) {\n+        return ROWS_MIGHT_MATCH;\n+      }\n+\n+      Set<T> dictionary = dict(id, comparatorForNaNPredicate(ref));\n+      return dictionary.stream().allMatch(NaNUtil::isNaN) ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n+    }\n+\n+    private <T> Comparator<T> comparatorForNaNPredicate(BoundReference<T> ref) {", "originalCommit": "e853e50b369112ed337d46345d361b0c0697f6f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MzM3OA==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r529063378", "bodyText": "Thanks for the info! I'll update this.", "author": "yyanyy", "createdAt": "2020-11-23T23:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMDA3OA=="}], "type": "inlineReview"}, {"oid": "951699acce5dd52b5dd008a20619534f9362570d", "url": "https://github.com/apache/iceberg/commit/951699acce5dd52b5dd008a20619534f9362570d", "message": "API: add isNaN and notNaN predicates", "committedDate": "2020-11-26T01:05:33Z", "type": "commit"}, {"oid": "f33f5fc9743dc7e214c3c7c3c63d6490b18ff327", "url": "https://github.com/apache/iceberg/commit/f33f5fc9743dc7e214c3c7c3c63d6490b18ff327", "message": "update based on comments", "committedDate": "2020-11-26T01:05:33Z", "type": "commit"}, {"oid": "80263ac891b53ae2e5748b5aa2b5e02e4f9de604", "url": "https://github.com/apache/iceberg/commit/80263ac891b53ae2e5748b5aa2b5e02e4f9de604", "message": "minor refactoring/renaming", "committedDate": "2020-11-26T01:05:33Z", "type": "commit"}, {"oid": "742d89855088d9e83cc26a54197333d4b9014744", "url": "https://github.com/apache/iceberg/commit/742d89855088d9e83cc26a54197333d4b9014744", "message": "fix indentation", "committedDate": "2020-11-26T01:05:33Z", "type": "commit"}, {"oid": "d7c3c3eacef4aced0bd89fe67339b2908a749a0f", "url": "https://github.com/apache/iceberg/commit/d7c3c3eacef4aced0bd89fe67339b2908a749a0f", "message": "fix import order", "committedDate": "2020-11-26T01:05:33Z", "type": "commit"}, {"oid": "d5e666399663685d5fc583a692c57c090de74de3", "url": "https://github.com/apache/iceberg/commit/d5e666399663685d5fc583a692c57c090de74de3", "message": "do not accept NaN in Expressions, or mismatch type", "committedDate": "2020-11-26T02:50:30Z", "type": "commit"}, {"oid": "d5e666399663685d5fc583a692c57c090de74de3", "url": "https://github.com/apache/iceberg/commit/d5e666399663685d5fc583a692c57c090de74de3", "message": "do not accept NaN in Expressions, or mismatch type", "committedDate": "2020-11-26T02:50:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNjY5Nw==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r536926697", "bodyText": "An easier way to do this is to add the check in Literal.from. That's where Iceberg enforces that the value cannot be null. Since a literal is created for every value that is passed in, we would only need to change that one place instead of all of the factory methods here.\nIt also ensures that we don't add factory methods later and forget to add the check to them.", "author": "rdblue", "createdAt": "2020-12-06T01:10:34Z", "path": "api/src/main/java/org/apache/iceberg/expressions/Expressions.java", "diffHunk": "@@ -123,51 +124,79 @@ public static Expression not(Expression child) {\n     return new UnboundPredicate<>(Expression.Operation.NOT_NULL, expr);\n   }\n \n+  public static <T> UnboundPredicate<T> isNaN(String name) {\n+    return new UnboundPredicate<>(Expression.Operation.IS_NAN, ref(name));\n+  }\n+\n+  public static <T> UnboundPredicate<T> isNaN(UnboundTerm<T> expr) {\n+    return new UnboundPredicate<>(Expression.Operation.IS_NAN, expr);\n+  }\n+\n+  public static <T> UnboundPredicate<T> notNaN(String name) {\n+    return new UnboundPredicate<>(Expression.Operation.NOT_NAN, ref(name));\n+  }\n+\n+  public static <T> UnboundPredicate<T> notNaN(UnboundTerm<T> expr) {\n+    return new UnboundPredicate<>(Expression.Operation.NOT_NAN, expr);\n+  }\n+\n   public static <T> UnboundPredicate<T> lessThan(String name, T value) {\n+    validateInput(\"lessThan\", value);", "originalCommit": "d5e666399663685d5fc583a692c57c090de74de3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg2NTAyMg==", "url": "https://github.com/apache/iceberg/pull/1747#discussion_r538865022", "bodyText": "Thank you! I didn't notice Literals.from was called within constructor of UnboundPredicate when normal object is passed in. This is definitely much more cleaner! I have created #1892 to address this.\nThank you so much for your time reviewing this long PR!", "author": "yyanyy", "createdAt": "2020-12-08T22:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNjY5Nw=="}], "type": "inlineReview"}]}