{"pr_number": 1356, "pr_title": "Parquet: Add vectorized position reader", "pr_createdAt": "2020-08-18T14:52:42Z", "pr_url": "https://github.com/apache/iceberg/pull/1356", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1NjM3OA==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r486856378", "bodyText": "I am unsure if returning a singleton instance for PostitionVectorReader is safe, since it contains a member variable rowStart which seems to differ for every row group created. Can there be a possibility of multiple tasks running on the same executor JVM and wanting to refer to different PostionVectorReaders at the same time?", "author": "shardulm94", "createdAt": "2020-09-11T08:26:04Z", "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -332,6 +334,10 @@ public static VectorizedArrowReader nulls() {\n     return NullVectorReader.INSTANCE;\n   }\n \n+  public static VectorizedArrowReader positions() {\n+    return PositionVectorReader.INSTANCE;\n+  }", "originalCommit": "036eb2228f860ec939c3505bac66d0280fe81a89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3OTcwMg==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r486879702", "bodyText": "Thanks for your comment.\nThe INSTANCE is defined to return a new PosistionVectorReader. It doesn't have a class scope field such as instance and the null checking logic, so it is not a singleton.\nIIUC, spark will assign the number of spark.executor.cores of tasks per executor.", "author": "chenjunjiedada", "createdAt": "2020-09-11T09:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1NjM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUwMjA2NQ==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r487502065", "bodyText": "The INSTANCE field is defined is static, so I am guessing new PositionVectorReader() will only be called once when the class is being loaded by the JVM. This seems like mimicking a singleton to me, unless I am reading the things wrongly.", "author": "shardulm94", "createdAt": "2020-09-13T08:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1NjM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODE5MA==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r487528190", "bodyText": "You are right! I forgot the static keyword, it is an eager mode of the singleton. Just remove using singleton in 52f4468.", "author": "chenjunjiedada", "createdAt": "2020-09-13T13:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1NjM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNjk4Nw==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r488436987", "bodyText": "Seems like technically this class is redundant since the user can use VectorHolder directly, but is probably good for readability?", "author": "shardulm94", "createdAt": "2020-09-15T07:11:27Z", "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorHolder.java", "diffHunk": "@@ -131,4 +140,10 @@ public Object getConstant() {\n     }\n   }\n \n+  public static class PositionVectorHolder extends VectorHolder {", "originalCommit": "52f44687a533f0d9b9895c9dc4326b7ef7785654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5MDQwNg==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r489390406", "bodyText": "Yes, I added a private VectorHolder constructor for PositionVectionHolder which I don't want others to use it directly.", "author": "chenjunjiedada", "createdAt": "2020-09-16T12:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNjk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1MjQ1NQ==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r488452455", "bodyText": "Can this follow an approach similar to VectorizedArrowReader and not create a new FieldVector and NullabilityHolder for every invocation?\n\n  \n    \n      iceberg/arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java\n    \n    \n        Lines 123 to 125\n      in\n      52f4468\n    \n    \n    \n    \n\n        \n          \n           } else { \n        \n\n        \n          \n             vec.setValueCount(0); \n        \n\n        \n          \n             nullabilityHolder.reset();", "author": "shardulm94", "createdAt": "2020-09-15T07:38:28Z", "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -354,6 +360,40 @@ public void setBatchSize(int batchSize) {\n     }\n   }\n \n+  private static final class PositionVectorReader extends VectorizedArrowReader {\n+    private long rowStart;\n+\n+    @Override\n+    public VectorHolder read(VectorHolder reuse, int numValsToRead) {\n+      Field arrowField = ArrowSchemaUtil.convert(MetadataColumns.ROW_POSITION);\n+      FieldVector vec = arrowField.createVector(ArrowAllocation.rootAllocator());\n+      ((BigIntVector) vec).allocateNew(numValsToRead);", "originalCommit": "52f44687a533f0d9b9895c9dc4326b7ef7785654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5MzEwOA==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r489393108", "bodyText": "Make sense to me, updated in 73de369", "author": "chenjunjiedada", "createdAt": "2020-09-16T12:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ1MjQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NDUxMA==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r496944510", "bodyText": "Why are we setting this inside of the for loop?", "author": "holdenk", "createdAt": "2020-09-29T18:17:35Z", "path": "arrow/src/main/java/org/apache/iceberg/arrow/vectorized/VectorizedArrowReader.java", "diffHunk": "@@ -354,6 +360,47 @@ public void setBatchSize(int batchSize) {\n     }\n   }\n \n+  private static final class PositionVectorReader extends VectorizedArrowReader {\n+    private long rowStart;\n+    private NullabilityHolder nulls;\n+\n+    @Override\n+    public VectorHolder read(VectorHolder reuse, int numValsToRead) {\n+      Field arrowField = ArrowSchemaUtil.convert(MetadataColumns.ROW_POSITION);\n+      FieldVector vec = arrowField.createVector(ArrowAllocation.rootAllocator());\n+\n+      if (reuse != null) {\n+        vec.setValueCount(0);\n+        nulls.reset();\n+      } else {\n+        ((BigIntVector) vec).allocateNew(numValsToRead);\n+        for (int i = 0; i < numValsToRead; i += 1) {\n+          vec.getDataBuffer().setLong(i * Long.BYTES, rowStart + i);\n+          nulls = new NullabilityHolder(numValsToRead);", "originalCommit": "73de3696204c8fe1ed99cfddda2cf488c413f735", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyOTYyMg==", "url": "https://github.com/apache/iceberg/pull/1356#discussion_r497229622", "bodyText": "Thanks @holdenk, This is a problem. Let me move this out of the loop.", "author": "chenjunjiedada", "createdAt": "2020-09-30T03:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NDUxMA=="}], "type": "inlineReview"}, {"oid": "a34a9df939eed920166ec6e9a10c9040d88bc929", "url": "https://github.com/apache/iceberg/commit/a34a9df939eed920166ec6e9a10c9040d88bc929", "message": "fix allocation inside loop", "committedDate": "2020-10-12T15:31:41Z", "type": "forcePushed"}, {"oid": "aaeed07bb0750124f76fcab625553cfb6f9c3d6b", "url": "https://github.com/apache/iceberg/commit/aaeed07bb0750124f76fcab625553cfb6f9c3d6b", "message": "Parquet: Add vectorized position reader", "committedDate": "2020-11-10T01:48:16Z", "type": "commit"}, {"oid": "78257b02d8845244c294df04eb0634d8315f170e", "url": "https://github.com/apache/iceberg/commit/78257b02d8845244c294df04eb0634d8315f170e", "message": "fix checkstyle", "committedDate": "2020-11-10T07:13:50Z", "type": "commit"}, {"oid": "de70c968dcf67615004f9683d37ce25def327ead", "url": "https://github.com/apache/iceberg/commit/de70c968dcf67615004f9683d37ce25def327ead", "message": "Don't use singleton for position reader", "committedDate": "2020-11-10T07:13:50Z", "type": "commit"}, {"oid": "96a351f04dca0ffb08c28e11690cac2b3662f755", "url": "https://github.com/apache/iceberg/commit/96a351f04dca0ffb08c28e11690cac2b3662f755", "message": "avoid unnecessary allocation", "committedDate": "2020-11-10T07:13:50Z", "type": "commit"}, {"oid": "ca79a675d25f4e87259940066decd3a3b9a6e342", "url": "https://github.com/apache/iceberg/commit/ca79a675d25f4e87259940066decd3a3b9a6e342", "message": "fix allocation inside loop", "committedDate": "2020-11-10T07:13:50Z", "type": "commit"}, {"oid": "ca79a675d25f4e87259940066decd3a3b9a6e342", "url": "https://github.com/apache/iceberg/commit/ca79a675d25f4e87259940066decd3a3b9a6e342", "message": "fix allocation inside loop", "committedDate": "2020-11-10T07:13:50Z", "type": "forcePushed"}]}