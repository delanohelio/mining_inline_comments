{"pr_number": 1263, "pr_title": "Add MicroBatch support in Iceberg Core", "pr_createdAt": "2020-07-28T11:42:26Z", "pr_url": "https://github.com/apache/iceberg/pull/1263", "timeline": [{"oid": "6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2", "url": "https://github.com/apache/iceberg/commit/6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2", "message": "Add MicroBatch support", "committedDate": "2020-07-28T11:36:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNjA1NA==", "url": "https://github.com/apache/iceberg/pull/1263#discussion_r461726054", "bodyText": "Nit: The language on condition failure should match the next precondition check. startFileIndex should be greater than or equal to zero or something would make much more sense to me.", "author": "kbendick", "createdAt": "2020-07-28T16:48:13Z", "path": "core/src/main/java/org/apache/iceberg/MicroBatches.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.CloseableIterator;\n+import org.apache.iceberg.io.FileIO;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MicroBatches {\n+  private MicroBatches() {\n+  }\n+\n+  public static class MicroBatch {\n+    private final long snapshotId;\n+    private final int startFileIndex;\n+    private final int endFileIndex;\n+    private final long sizeInBytes;\n+    private final List<FileScanTask> tasks;\n+    private final boolean lastIndexOfSnapshot;\n+\n+    private MicroBatch(long snapshotId, int startFileIndex, int endFileIndex, long sizeInBytes,\n+               List<FileScanTask> tasks, boolean lastIndexOfSnapshot) {\n+      this.snapshotId = snapshotId;\n+      this.startFileIndex = startFileIndex;\n+      this.endFileIndex = endFileIndex;\n+      this.sizeInBytes = sizeInBytes;\n+      this.tasks = tasks;\n+      this.lastIndexOfSnapshot = lastIndexOfSnapshot;\n+    }\n+\n+    public long snapshotId() {\n+      return snapshotId;\n+    }\n+\n+    public int startFileIndex() {\n+      return startFileIndex;\n+    }\n+\n+    public int endFileIndex() {\n+      return endFileIndex;\n+    }\n+\n+    public long sizeInBytes() {\n+      return sizeInBytes;\n+    }\n+\n+    public List<FileScanTask> tasks() {\n+      return tasks;\n+    }\n+\n+    public boolean lastIndexOfSnapshot() {\n+      return lastIndexOfSnapshot;\n+    }\n+  }\n+\n+  public static MicroBatchBuilder from(Snapshot snapshot, FileIO io) {\n+    return new MicroBatchBuilder(snapshot, io);\n+  }\n+\n+  public static class MicroBatchBuilder {\n+    private static final Logger LOG = LoggerFactory.getLogger(MicroBatchBuilder.class);\n+\n+    private final Snapshot snapshot;\n+    private final FileIO io;\n+    private boolean caseSensitive;\n+    private Map<Integer, PartitionSpec> specsById;\n+\n+    private MicroBatchBuilder(Snapshot snapshot, FileIO io) {\n+      this.snapshot = snapshot;\n+      this.io = io;\n+      this.caseSensitive = true;\n+    }\n+\n+    public MicroBatchBuilder caseSensitive(boolean sensitive) {\n+      this.caseSensitive = sensitive;\n+      return this;\n+    }\n+\n+    public MicroBatchBuilder specsById(Map<Integer, PartitionSpec> specs) {\n+      this.specsById = specs;\n+      return this;\n+    }\n+\n+    public MicroBatch generate(int startFileIndex, long targetSizeInBytes, boolean isStarting) {\n+      Preconditions.checkArgument(startFileIndex >= 0, \"startFileIndex is unexpectedly smaller than 0\");", "originalCommit": "6fa0fc22c92c5df0acde758bb163a1b4a1f15fd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0NjM4Mg==", "url": "https://github.com/apache/iceberg/pull/1263#discussion_r461746382", "bodyText": "I agree with this, but we can fix it later. The wording is clear enough and I'd rather not hold up PRs for just nits.", "author": "rdblue", "createdAt": "2020-07-28T17:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNjA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5ODUyNw==", "url": "https://github.com/apache/iceberg/pull/1263#discussion_r462098527", "bodyText": "OK, I will fix this in the next PR.", "author": "jerryshao", "createdAt": "2020-07-29T07:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNjA1NA=="}], "type": "inlineReview"}]}