{"pr_number": 1790, "pr_title": "Core: Implement NaN counts in ORC", "pr_createdAt": "2020-11-19T19:19:49Z", "pr_url": "https://github.com/apache/iceberg/pull/1790", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyOTE5Mw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528429193", "bodyText": "I thought the reason for having ParquetFieldMetrics extending FieldMetrics is to allow ORC and parquet to diverge if needed. If we are moving them back to a common class, why not just move everything back to FieldMetrics?", "author": "jackye1995", "createdAt": "2020-11-23T00:25:06Z", "path": "api/src/main/java/org/apache/iceberg/NaNOnlyFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNTIyOA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528915228", "bodyText": "It's actually to allow Parquet and ORC to diverge from Avro, so we will use the actual FiledMetrics in avro", "author": "yyanyy", "createdAt": "2020-11-23T18:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyOTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5OTc2OA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528999768", "bodyText": "I am a bit confused, in that case why not have 3 separated classes ParquetFieldMetrics, ORCFieldMetrics and AvroFieldMetrics?", "author": "jackye1995", "createdAt": "2020-11-23T21:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyOTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNTY5OA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r529005698", "bodyText": "Yeah that's also an alternative approach, I wasn't sure if I want to directly duplicate the code in ParquetFieldMetrics to create a ORC version though since I don't think parquet/ORC libraries will support NaN natively soon.", "author": "yyanyy", "createdAt": "2020-11-23T21:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyOTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDY4NQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533744685", "bodyText": "I don't see a need for 3 classes when 2 of them would be nearly identical. I like what is in this PR, with the one note about naming.", "author": "rdblue", "createdAt": "2020-12-01T21:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQyOTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDYzNw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528430637", "bodyText": "Since we are having this util class, can we decompose this function into methods like metricsColumnName(FieldMetrics, Schema) and metricsMode(FieldMetrics, MetricsConfig)? They might be useful in other classes, and also make the lambda chain cleaner.", "author": "jackye1995", "createdAt": "2020-11-23T00:36:29Z", "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> {", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjk1Mg==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528916952", "bodyText": "Sure, I'll break this down", "author": "yyanyy", "createdAt": "2020-11-23T18:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDY4OA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528430688", "bodyText": "nit: seems like iceberg prefers method names without get.", "author": "jackye1995", "createdAt": "2020-11-23T00:36:58Z", "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjgxNw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528916817", "bodyText": "I was aware of that, but couldn't come up with a good name without get in this case (things like generateCount/createCount is longer and sounds like just for workaround the word \"get\"), and later assume it was fine since it's not an ordinary getter... Do you have a recommendation?", "author": "yyanyy", "createdAt": "2020-11-23T18:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MzQ0OQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533743449", "bodyText": "The problem with get in this case is that it isn't clear where the return value is coming from. I think that create is a better option because it is clear that the return value is built from the input arguments.\nAn example of where the value may come from somewhere else is IPUtil.getHostName(String iface). The input value is used, but the actual return value would come from an external source.", "author": "rdblue", "createdAt": "2020-12-01T21:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMTc4NQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533831785", "bodyText": "Makes sense, I'll update in both here and #1829", "author": "yyanyy", "createdAt": "2020-12-02T01:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDc4OQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528430789", "bodyText": "nit: the private method feels redundant since the body is also just one line", "author": "jackye1995", "createdAt": "2020-11-23T00:37:53Z", "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriter.java", "diffHunk": "@@ -109,6 +112,10 @@ private WriteBuilder() {\n               iPrimitive, primitive));\n       }\n     }\n+\n+    private int getFieldId(TypeDescription typeDescription) {", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNzkyNA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528917924", "bodyText": "I personally think it's easier to read by segregating the abstract logic of what's doing here from the actual underlying implementation so I created the helper; do you feel strong about this? I'll see if other people have the same comment?", "author": "yyanyy", "createdAt": "2020-11-23T18:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTQ5OQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533741499", "bodyText": "I agree with @jackye1995. I probably wouldn't separate this out into its own method.", "author": "rdblue", "createdAt": "2020-12-01T21:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTQ4OQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528431489", "bodyText": "nit:same comment as before, do we need this private method for the 1 line call?", "author": "jackye1995", "createdAt": "2020-11-23T00:43:19Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriter.java", "diffHunk": "@@ -129,5 +139,9 @@ private WriteBuilder() {\n               \"Invalid iceberg type %s corresponding to Flink logical type %s\", iPrimitive, flinkPrimitive));\n       }\n     }\n+\n+    private int getFieldId(TypeDescription typeDescription) {", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTU1Mg==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528431552", "bodyText": "is it necesSary to pass in the type description? can we get id from the iceberg schema?", "author": "jackye1995", "createdAt": "2020-11-23T00:43:59Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkOrcWriter.java", "diffHunk": "@@ -46,8 +50,8 @@ private FlinkOrcWriter(RowType rowType, Schema iSchema) {\n     }\n   }\n \n-  public static OrcRowWriter<RowData> buildWriter(RowType rowType, Schema iSchema) {\n-    return new FlinkOrcWriter(rowType, iSchema);\n+  public static OrcRowWriter<RowData> buildWriter(RowType rowType, Schema iSchema, TypeDescription schema) {", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMTI0NQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528921245", "bodyText": "Yeah I tried to avoid changing the signature but wasn't able to find id information from schema, I'll see if people more familiar with the project would have comment on this", "author": "yyanyy", "createdAt": "2020-11-23T18:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MjkwMg==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533752902", "bodyText": "The field IDs are kept in NestedField, not primitives. That's probably why you didn't find one that was usable in the primitive method. What we do in other visitors is add methods to the visitor that are called before and after visiting a struct field, array element, map key, and map value. Those methods are passed the field. Then the visitor just needs to implement the before/after to maintain a stack of field IDs.\nHere's a visit method with the callbacks: https://github.com/apache/iceberg/blob/master/api/src/main/java/org/apache/iceberg/types/TypeUtil.java#L334\nAnd here's an example of using them to get the field IDs: https://github.com/apache/iceberg/blob/master/core/src/main/java/org/apache/iceberg/avro/TypeToSchema.java#L75-L83", "author": "rdblue", "createdAt": "2020-12-01T22:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNDQ3Ng==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533834476", "bodyText": "Thanks for the info! Yeah earlier I noticed that the ids exist in NestedField  but wasn't able to find out a good way to extract without larger changes to the signature, and tried to replace StructType/NestedType with NestedField but that would result in losing other information. I'll update to use the before/after pattern.", "author": "yyanyy", "createdAt": "2020-12-02T01:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMTU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528432217", "bodyText": "For this issue about handling date and timestamp, can it be a separated PR? This PR is already very big.", "author": "jackye1995", "createdAt": "2020-11-23T00:49:31Z", "path": "spark/src/main/java/org/apache/iceberg/spark/source/StructInternalRow.java", "diffHunk": "@@ -115,12 +120,30 @@ public short getShort(int ordinal) {\n \n   @Override\n   public int getInt(int ordinal) {\n-    return struct.get(ordinal, Integer.class);\n+    Object integer = struct.get(ordinal, Object.class);", "originalCommit": "a726847fb2603378ae88cb5fdd310601b00c83c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMTgwOA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r528921808", "bodyText": "This is needed for TestMergingMetrics to work for ORC (also mentioned in pr description) so I think it makes more sense to have this in here", "author": "yyanyy", "createdAt": "2020-11-23T18:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxODMxMg==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r529018312", "bodyText": "If so, should we publish a separated PR for this? My biggest concern is that people might have different opinions about the way to handle these data types. When embedded as a part of a big PR, it gets less attention for people who are interested.", "author": "jackye1995", "createdAt": "2020-11-23T21:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0NTQ1Mg==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r529045452", "bodyText": "I did a similar change in this class in an earlier pr, and I think this change is specific to the test itself so I'm bit reluctant to move it out of the current context, as without this context this change will be confusing to understand:\n\ncurrently spark supports dates and time the way this class already handles, as spark represents dates/time with internal structures of long/int ref1 ref2, so the new code introduced by this won't affect the behavior of this class, as Spark will continue to write and get these types with the same internal numeric types. And this class is only used for loading metadata tables so performance with the extra if-else check probably is not a big concern too.\nHowever in TestMergingMetrics itself, since data are created by random record generator which uses the actual LocalDate to populate the fields, and we are wrapping the generated records with this class for writing, we have to handle them specially here. But I don't think this usage pattern (of writing spark rows by wrapping them with iceberg record) will be used in production since the spark engine will use the actual spark InternalRow.", "author": "yyanyy", "createdAt": "2020-11-23T22:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3MDU2OA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r530070568", "bodyText": "I guess since I'll send out a separate PR anyway I'll include change in this class as part of that PR", "author": "yyanyy", "createdAt": "2020-11-25T02:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NzA2MQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533757061", "bodyText": "This is okay with me.", "author": "rdblue", "createdAt": "2020-12-01T22:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMjIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDI2Mg==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533744262", "bodyText": "I would probably change this to NaNFieldMetrics instead because it is likely that we will be adding lower/upper bounds to this in the near future. That would avoid another rename, but it's up to you.", "author": "rdblue", "createdAt": "2020-12-01T21:50:36Z", "path": "api/src/main/java/org/apache/iceberg/NaNOnlyFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {\n+public class NaNOnlyFieldMetrics extends FieldMetrics {\n \n   /**\n-   * Constructor for creating a Parquet-specific FieldMetrics.\n+   * Constructor for creating a FieldMetrics with only NaN counter.\n    * @param id field id being tracked by the writer\n    * @param nanValueCount number of NaN values, will only be non-0 for double or float field.\n    */\n-  public ParquetFieldMetrics(int id,\n+  public NaNOnlyFieldMetrics(int id,", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNTA3NQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533835075", "bodyText": "Sounds good, I'll update in both here and #1829", "author": "yyanyy", "createdAt": "2020-12-02T01:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NTMyNw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533745327", "bodyText": "Does this need to be in API or could it be in core instead?\nIf the class is never returned to users, then I would keep it in core. The classes in api are primarily those that users would interact with.", "author": "rdblue", "createdAt": "2020-12-01T21:52:30Z", "path": "api/src/main/java/org/apache/iceberg/NaNOnlyFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNTczMQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533835731", "bodyText": "Sounds good, I'll move both this and FieldMetrics to core in both here and #1829", "author": "yyanyy", "createdAt": "2020-12-02T01:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0Njg4NQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533746885", "bodyText": "The id is required, right? If so, then I think it could be int instead. It's an int in the constructor that gets called.\nThis could add a precondition to check that the id is non-null, but I think it would be better to do that before calling this method because the caller would probably know the field name rather than just ID. Using the field name would produce a better error message.", "author": "rdblue", "createdAt": "2020-12-01T21:55:30Z", "path": "data/src/main/java/org/apache/iceberg/data/orc/GenericOrcWriters.java", "diffHunk": "@@ -77,12 +80,12 @@ private GenericOrcWriters() {\n     return LongWriter.INSTANCE;\n   }\n \n-  public static OrcValueWriter<Float> floats() {\n-    return FloatWriter.INSTANCE;\n+  public static OrcValueWriter<Float> floats(Integer id) {", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MzczOA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533753738", "bodyText": "I think it would be cleaner to add the beforeField/afterField callbacks instead of the typeDesc.", "author": "rdblue", "createdAt": "2020-12-01T22:08:32Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkSchemaVisitor.java", "diffHunk": "@@ -29,42 +29,43 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.Types;\n+import org.apache.orc.TypeDescription;\n \n abstract class FlinkSchemaVisitor<T> {\n \n-  static <T> T visit(RowType flinkType, Schema schema, FlinkSchemaVisitor<T> visitor) {\n-    return visit(flinkType, schema.asStruct(), visitor);\n+  static <T> T visit(RowType flinkType, Schema schema, TypeDescription typeDesc, FlinkSchemaVisitor<T> visitor) {", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDYwNw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533754607", "bodyText": "Why not use null when metrics are missing?", "author": "rdblue", "createdAt": "2020-12-01T22:10:10Z", "path": "orc/src/main/java/org/apache/iceberg/orc/OrcMetrics.java", "diffHunk": "@@ -114,6 +120,7 @@ private static Metrics buildOrcMetrics(final long numOfRows, final TypeDescripti\n           columnSizes,\n           valueCounts,\n           nullCounts,\n+          Maps.newHashMap(),", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzOTAzNQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533839035", "bodyText": "I think I missed updating this during refactoring. Will update!", "author": "yyanyy", "createdAt": "2020-12-02T01:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDk5Ng==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533754996", "bodyText": "I don't think this paragraph needs to be here because it is a snapshot of how another component works. It could get stale really easily.", "author": "rdblue", "createdAt": "2020-12-01T22:10:56Z", "path": "orc/src/main/java/org/apache/iceberg/orc/OrcRowWriter.java", "diffHunk": "@@ -35,4 +37,12 @@\n    * @throws IOException if there's any IO error while writing the data value.\n    */\n   void write(T row, VectorizedRowBatch output) throws IOException;\n+\n+  /**\n+   * Returns a stream of {@link FieldMetrics} that this OrcRowWriter keeps track of.\n+   * <p>\n+   * Since ORC keeps track of most metrics via column statistics, for now OrcRowWriter only keeps track of NaN\n+   * counters for double or float columns.", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzOTE1OQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533839159", "bodyText": "Makes sense, I'll remove similar instances in here, OrcValueWriter and ParquetValueWriter", "author": "yyanyy", "createdAt": "2020-12-02T01:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTU0Nw==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533755547", "bodyText": "Can we avoid making this public with the other updates?", "author": "rdblue", "createdAt": "2020-12-01T22:11:59Z", "path": "orc/src/main/java/org/apache/iceberg/orc/ORCSchemaUtil.java", "diffHunk": "@@ -383,7 +383,7 @@ private static boolean isSameType(TypeDescription orcType, Type icebergType) {\n         .map(Integer::parseInt);\n   }\n \n-  static int fieldId(TypeDescription orcType) {\n+  public static int fieldId(TypeDescription orcType) {", "originalCommit": "2f32f5f5dcb0aeb62921698905323e22ac8bc981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzOTkyOA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r533839928", "bodyText": "I think GenericOrcWriter is still currently using it and it's in org.apache.iceberg.data.orc but this method is in org.apache.iceberg.orc, so we will still have to declare public...", "author": "yyanyy", "createdAt": "2020-12-02T01:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTU0Nw=="}], "type": "inlineReview"}, {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78", "url": "https://github.com/apache/iceberg/commit/5a1b122ef4441174aae461779fdc801d2d27ff78", "message": "Core: Implement NaN counts in ORC", "committedDate": "2021-01-05T22:30:26Z", "type": "commit"}, {"oid": "5a1b122ef4441174aae461779fdc801d2d27ff78", "url": "https://github.com/apache/iceberg/commit/5a1b122ef4441174aae461779fdc801d2d27ff78", "message": "Core: Implement NaN counts in ORC", "committedDate": "2021-01-05T22:30:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2ODk1MQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555368951", "bodyText": "nit: getFieldId is not used anywhere else, why not just use ORCSchemaUtil.fieldId", "author": "jackye1995", "createdAt": "2021-01-11T22:03:10Z", "path": "spark/src/main/java/org/apache/iceberg/spark/data/SparkOrcWriter.java", "diffHunk": "@@ -98,9 +106,9 @@ public SparkOrcValueWriter primitive(Type.PrimitiveType iPrimitive, TypeDescript\n         case LONG:\n           return SparkOrcValueWriters.longs();\n         case FLOAT:\n-          return SparkOrcValueWriters.floats();\n+          return SparkOrcValueWriters.floats(getFieldId(primitive));", "originalCommit": "5a1b122ef4441174aae461779fdc801d2d27ff78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3MzAyOA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555373028", "bodyText": "why some method signatures of metrics have default, but some others below do not?", "author": "jackye1995", "createdAt": "2021-01-11T22:11:48Z", "path": "orc/src/main/java/org/apache/iceberg/orc/OrcRowWriter.java", "diffHunk": "@@ -35,4 +37,9 @@\n    * @throws IOException if there's any IO error while writing the data value.\n    */\n   void write(T row, VectorizedRowBatch output) throws IOException;\n+\n+  /**\n+   * Returns a stream of {@link FieldMetrics} that this OrcRowWriter keeps track of.\n+   */\n+  Stream<FieldMetrics> metrics();", "originalCommit": "5a1b122ef4441174aae461779fdc801d2d27ff78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1NzU4Ng==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555457586", "bodyText": "Currently value writers all have a default, and this is because we are only tracking this metrics for float and wrapper types, declaring a default will save other types from declaring empty stream. This row writer on the other hand handles row writing, and it will always need to read from value writers' metrics, and thus default wouldn't help much on this aspect. Although I guess we want to prevent breaking people's code if they implement their own version of row writer, that I'll add a default here to avoid that.", "author": "yyanyy", "createdAt": "2021-01-12T01:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3MzAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3NzMxNA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555377314", "bodyText": "error should be logged if we catch anything. same for the try finally block above.", "author": "jackye1995", "createdAt": "2021-01-11T22:21:00Z", "path": "flink/src/main/java/org/apache/iceberg/flink/data/FlinkSchemaVisitor.java", "diffHunk": "@@ -44,17 +44,39 @@\n       case MAP:\n         MapType mapType = (MapType) flinkType;\n         Types.MapType iMapType = iType.asMapType();\n-\n-        T key = visit(mapType.getKeyType(), iMapType.keyType(), visitor);\n-        T value = visit(mapType.getValueType(), iMapType.valueType(), visitor);\n+        T key;\n+        T value;\n+\n+        Types.NestedField keyField = iMapType.field(iMapType.keyId());\n+        visitor.beforeMapKey(keyField);\n+        try {\n+          key = visit(mapType.getKeyType(), iMapType.keyType(), visitor);\n+        } finally {\n+          visitor.afterMapKey(keyField);\n+        }\n+\n+        Types.NestedField valueField = iMapType.field(iMapType.valueId());\n+        visitor.beforeMapValue(valueField);\n+        try {\n+          value = visit(mapType.getValueType(), iMapType.valueType(), visitor);\n+        } finally {\n+          visitor.afterMapValue(valueField);\n+        }\n \n         return visitor.map(iMapType, key, value, mapType.getKeyType(), mapType.getValueType());\n \n       case LIST:\n         ArrayType listType = (ArrayType) flinkType;\n         Types.ListType iListType = iType.asListType();\n+        T element;\n \n-        T element = visit(listType.getElementType(), iListType.elementType(), visitor);\n+        Types.NestedField elementField = iListType.field(iListType.elementId());\n+        visitor.beforeListElement(elementField);\n+        try {\n+          element = visit(listType.getElementType(), iListType.elementType(), visitor);\n+        } finally {", "originalCommit": "5a1b122ef4441174aae461779fdc801d2d27ff78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODMyOA==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r555458328", "bodyText": "I think we are not catching any exception here so we don't have anything to log? Did I miss something?", "author": "yyanyy", "createdAt": "2021-01-12T01:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3NzMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk3MDI1MQ==", "url": "https://github.com/apache/iceberg/pull/1790#discussion_r556970251", "bodyText": "I see. I was thinking about logging the exception once in the catch block, but it seems unnecessary.", "author": "jackye1995", "createdAt": "2021-01-14T00:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3NzMxNA=="}], "type": "inlineReview"}, {"oid": "376524e3dc10e7f1fbe2ead47b7116cbdbd707ba", "url": "https://github.com/apache/iceberg/commit/376524e3dc10e7f1fbe2ead47b7116cbdbd707ba", "message": "address comments", "committedDate": "2021-01-12T01:48:30Z", "type": "commit"}]}