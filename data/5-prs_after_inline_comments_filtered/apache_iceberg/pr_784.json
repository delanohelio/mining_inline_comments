{"pr_number": 784, "pr_title": "Allow caller to construct HadoopInputFile and HadoopOutputFile using an existing instance of FileSystem object.", "pr_createdAt": "2020-02-06T18:40:20Z", "pr_url": "https://github.com/apache/iceberg/pull/784", "timeline": [{"oid": "10892db3c6dd3deca4b332008db27d3d92388507", "url": "https://github.com/apache/iceberg/commit/10892db3c6dd3deca4b332008db27d3d92388507", "message": "Instantiate Hadoop FileSystem during construction of HadoopOutputFile similar to HadoopInputFile and use it to create HadoopInputFile and other methods.", "committedDate": "2020-02-01T17:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377400690", "bodyText": "This needs to return the Configuration that was passed in when creating the HadoopInputFile, if there was one. The file system's Configuration may not contain the same configuration properties as the one that was passed in, and this Configuration is needed in some paths.", "author": "rdblue", "createdAt": "2020-02-11T00:45:52Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopInputFile.java", "diffHunk": "@@ -133,7 +143,7 @@ public SeekableInputStream newStream() {\n   }\n \n   public Configuration getConf() {\n-    return conf;\n+    return fs.getConf();", "originalCommit": "6b8e6e4e66742568829f87dc71ad4d76738e60bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1NDQ5OQ==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377654499", "bodyText": "@rdblue I made the change but would like to clarify. If HadoopInputFile conf may not be the same as FileSystem conf, will it be better to make it more explicit by implementing Configurable or extending from Configured?", "author": "vrozov", "createdAt": "2020-02-11T14:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MjE3Nw==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377962177", "bodyText": "I don't think we want to add complexity to how Configuration objects are handled. A Configuration is used to instantiate a catalog, and it gets passed down to FileIO from there. We don't need to be able to change that configuration, we just need to make sure the one passed to create the catalog is used by parts like ORC that currently use a Configuration.\nAnd if a Configuration is not passed, it is fine to use new Configuration() or the config from a file system that was passed. We don't make guarantees in that case.", "author": "rdblue", "createdAt": "2020-02-11T23:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MDcyOA==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377980728", "bodyText": "I don't see how extending from Configured will add complexity. The behavior of HadoopInputFile or HadoopOutputFile won't change.", "author": "vrozov", "createdAt": "2020-02-12T00:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MzgyMg==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377983822", "bodyText": "It's not a big change for Iceberg, but it would mean that there are multiple paths for passing a Configuration to parts that use it. I'd rather avoid that so that there is one way configurations are passed through code to avoid callers hijacking parts and updating the configuration held by a HadoopOutputFile.", "author": "rdblue", "createdAt": "2020-02-12T00:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNDYyNA==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r378004624", "bodyText": "I don't see much difference between\nConfiguration conf = new Configuration();\nPath path = new Path(...);\nHadoopInputFile file = HadoopInputFile.fromPath(path, conf);\n...\nconf = new Configuration();\nfile.setConf(conf);\n\nand\nConfiguration conf = new Configuration();\nPath path = new Path(...);\nHadoopInputFile file = HadoopInputFile.fromPath(path, conf);\n...\nconf.set();\n\nif I correctly understand your concern with incorrectly updating the configuration. It would be necessary to copy passed configuration object to prevent hijacking.", "author": "vrozov", "createdAt": "2020-02-12T02:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyNTI2MA==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r378425260", "bodyText": "You can get input and output files by constructing them yourself, but the recommended way is to use the factory methods on a table's FileIO so that the catalog/table implementation can inject what it needs to at this layer, like using a different implementation for an object store.\nThe Hadoop variants of input and output file accept a configuration so that HadoopFileIO can pass it, but changing that Configuration is not a part of the API. We should avoid cases where implementations attempt to change the configuration that an InputFile or OutputFile uses. The right way to pass a configuration is to pass it in when creating a catalog.", "author": "rdblue", "createdAt": "2020-02-12T18:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NTg3Ng==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r378465876", "bodyText": "Still the same applies to FileIO implementation. Without a deep copy of Configuration inside HadoopInputFile, it is possible to cache Configuration object on a class that implements FileIO and expose methods that modify it. I do not suggest that it needs to be handled as part of this PR, just pointing out that even though it is not possible to change reference, the returned object is not immutable. Assuming that there are no other issues to address, can you please approve the PR?", "author": "vrozov", "createdAt": "2020-02-12T19:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDg2OA==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377400868", "bodyText": "This should include an error message that explains what went wrong, like \"Invalid input file length: %s\"", "author": "rdblue", "createdAt": "2020-02-11T00:46:34Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopInputFile.java", "diffHunk": "@@ -54,51 +55,60 @@ public static HadoopInputFile fromLocation(CharSequence location, long length,\n     return fromPath(path, length, conf);\n   }\n \n+  public static HadoopInputFile fromLocation(CharSequence location, FileSystem fs) {\n+    Path path = new Path(location.toString());\n+    return fromPath(path, fs);\n+  }\n+\n+  public static HadoopInputFile fromLocation(CharSequence location, long length,\n+                                             FileSystem fs) {\n+    Path path = new Path(location.toString());\n+    return fromPath(path, length, fs);\n+  }\n+\n   public static HadoopInputFile fromPath(Path path, Configuration conf) {\n-    try {\n-      FileSystem fs = path.getFileSystem(conf);\n-      return new HadoopInputFile(fs, path, conf);\n-    } catch (IOException e) {\n-      throw new RuntimeIOException(e, \"Failed to get file system for path: %s\", path);\n-    }\n+    FileSystem fs = Util.getFs(path, conf);\n+    return fromPath(path, fs);\n   }\n \n   public static HadoopInputFile fromPath(Path path, long length, Configuration conf) {\n-    try {\n-      FileSystem fs = path.getFileSystem(conf);\n-      return new HadoopInputFile(fs, path, length, conf);\n-    } catch (IOException e) {\n-      throw new RuntimeIOException(e, \"Failed to get file system for path: %s\", path);\n-    }\n+    FileSystem fs = Util.getFs(path, conf);\n+    return fromPath(path, length, fs);\n+  }\n+\n+  public static HadoopInputFile fromPath(Path path, FileSystem fs) {\n+    return new HadoopInputFile(fs, path);\n+  }\n+\n+  public static HadoopInputFile fromPath(Path path, long length, FileSystem fs) {\n+    return new HadoopInputFile(fs, path, length);\n   }\n \n   public static HadoopInputFile fromStatus(FileStatus stat, Configuration conf) {\n-    try {\n-      FileSystem fs = stat.getPath().getFileSystem(conf);\n-      return new HadoopInputFile(fs, stat, conf);\n-    } catch (IOException e) {\n-      throw new RuntimeIOException(e, \"Failed to get file system for path: %s\", stat.getPath());\n-    }\n+    FileSystem fs = Util.getFs(stat.getPath(), conf);\n+    return fromStatus(stat, fs);\n+  }\n+\n+  public static HadoopInputFile fromStatus(FileStatus stat, FileSystem fs) {\n+    return new HadoopInputFile(fs, stat);\n   }\n \n-  private HadoopInputFile(FileSystem fs, Path path, Configuration conf) {\n+  private HadoopInputFile(FileSystem fs, Path path) {\n     this.fs = fs;\n     this.path = path;\n-    this.conf = conf;\n   }\n \n-  private HadoopInputFile(FileSystem fs, Path path, long length, Configuration conf) {\n+  private HadoopInputFile(FileSystem fs, Path path, long length) {\n+    checkArgument(length >= 0);", "originalCommit": "6b8e6e4e66742568829f87dc71ad4d76738e60bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTA5Ng==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377401096", "bodyText": "The project's style avoids static imports. Can you use Preconditions.checkArgument instead of just the method name where this is called?", "author": "rdblue", "createdAt": "2020-02-11T00:47:26Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopInputFile.java", "diffHunk": "@@ -30,6 +30,8 @@\n import org.apache.iceberg.io.InputFile;\n import org.apache.iceberg.io.SeekableInputStream;\n \n+import static com.google.common.base.Preconditions.checkArgument;", "originalCommit": "6b8e6e4e66742568829f87dc71ad4d76738e60bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MDUyNw==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377660527", "bodyText": "Will it be good to remove com.google.common.base.Preconditions.* exclusion from AvoidStaticImport rule in the project checkstyle?", "author": "vrozov", "createdAt": "2020-02-11T14:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMTY2NQ==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377731665", "bodyText": "I am +1 on removing it from checkstyle in a separate PR as we technically allow such imports but try to avoid them.", "author": "aokolnychyi", "createdAt": "2020-02-11T16:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDAwOA==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377854008", "bodyText": "Yes. This should be caught by checkstyle.", "author": "rdblue", "createdAt": "2020-02-11T19:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTM3MQ==", "url": "https://github.com/apache/iceberg/pull/784#discussion_r377401371", "bodyText": "This also needs to return the Configuration that was used to create the output file, if there was one.", "author": "rdblue", "createdAt": "2020-02-11T00:48:32Z", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopOutputFile.java", "diffHunk": "@@ -73,7 +87,7 @@ public Path getPath() {\n   }\n \n   public Configuration getConf() {\n-    return conf;\n+    return fs.getConf();", "originalCommit": "6b8e6e4e66742568829f87dc71ad4d76738e60bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "45754669b73e4a41f1d9dffaaf71b79d0dbf2803", "url": "https://github.com/apache/iceberg/commit/45754669b73e4a41f1d9dffaaf71b79d0dbf2803", "message": "Allow caller to construct HadoopInputFile and HadoopOutputFile using an existing instance of FileSystem object.\n\nWhile obtaining file system based on provided configuration covers majority of use cases, it does not cover ability to use an instance of FilterFileSystem with modified behavior or cases when caching of FileSystem object is disabled.", "committedDate": "2020-02-11T02:53:48Z", "type": "forcePushed"}, {"oid": "3df2b316c934446fb791761e73f78a3995a7b30c", "url": "https://github.com/apache/iceberg/commit/3df2b316c934446fb791761e73f78a3995a7b30c", "message": "Allow caller to construct HadoopInputFile and HadoopOutputFile using an existing instance of FileSystem object.\n\nWhile obtaining file system based on provided configuration covers majority of use cases, it does not cover ability to use an instance of FilterFileSystem with modified behavior or cases when caching of FileSystem object is disabled.", "committedDate": "2020-02-11T03:09:51Z", "type": "commit"}, {"oid": "3df2b316c934446fb791761e73f78a3995a7b30c", "url": "https://github.com/apache/iceberg/commit/3df2b316c934446fb791761e73f78a3995a7b30c", "message": "Allow caller to construct HadoopInputFile and HadoopOutputFile using an existing instance of FileSystem object.\n\nWhile obtaining file system based on provided configuration covers majority of use cases, it does not cover ability to use an instance of FilterFileSystem with modified behavior or cases when caching of FileSystem object is disabled.", "committedDate": "2020-02-11T03:09:51Z", "type": "forcePushed"}]}