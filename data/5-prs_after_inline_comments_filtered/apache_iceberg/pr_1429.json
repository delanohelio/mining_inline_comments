{"pr_number": 1429, "pr_title": "Core: Lower the log level of warning message on refresh() for NoSuchIcebergTableException", "pr_createdAt": "2020-09-07T04:36:40Z", "pr_url": "https://github.com/apache/iceberg/pull/1429", "timeline": [{"oid": "6af6c688072092678d44fa6d7d493719e6d753ac", "url": "https://github.com/apache/iceberg/commit/6af6c688072092678d44fa6d7d493719e6d753ac", "message": "[CORE] lower the log level of warning message on refresh() for NoSuchIcebergTableException", "committedDate": "2020-09-07T04:28:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r484180054", "bodyText": "It's also OK for me to just lower down the log level for NoSuchTableException, but would like to hear the voice first before applying it.", "author": "HeartSaVioR", "createdAt": "2020-09-07T04:44:27Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreTableOperations.java", "diffHunk": "@@ -75,7 +76,14 @@ public TableMetadata refresh() {\n     try {\n       doRefresh();\n     } catch (NoSuchTableException e) {\n-      LOG.warn(\"Could not find the table during refresh, setting current metadata to null\", e);\n+      // Adjust log level according to the type of exception, as it might be intentional to call\n+      // the method without determining the type of table in prior (like SparkSessionCatalog),\n+      // and in such case it may not be an error case if the table is not an Iceberg table.\n+      if (e instanceof NoSuchIcebergTableException) {", "originalCommit": "6af6c688072092678d44fa6d7d493719e6d753ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU5MTY4NQ==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r484591685", "bodyText": "Would it be possible to add into the comment that in general NoSuchTableException is not necessarily unexpected, and that in the future we can consider lowering the log level for both? If possible, could you also put an example where you believe this might happen?\nMy thinking is that this way, instead of the knowledge being left here in the PR, it will remain in the codebase and be more likely to get looked at again in the future.", "author": "kbendick", "createdAt": "2020-09-08T00:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU5ODk5NQ==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r484598995", "bodyText": "I'm also curious about the code flow here and hoping you can help me better understand it possibly @HeartSaVioR.\nI see that the call to refresh here calls the prdoRefresh which is not implemented in this abstract class BaseMetastoreTableOperations, and I can't find any corresponding code that does implement doRefresh which extends this class (or even anywhere). However, I see similar classes that inherit from the higher up TableOperations interface which this also inherits from which implements their own version of refresh which does not rely on this abstract class. The example I'm thinking of is  HadoopTableOperations.\nIn any case, if this call to doRefresh throws a NoSuchTableException, currently it logs it, resets some of the private fields to null / their respective empty values (e.g. -1 for version in this abstract class when it's an int, though in HadoopTableOperations which implements TableOperations it's not an int but a volatile Integer whose empty value is null).\nI guess my question is, I can't quite see where this call to this particular version of refresh is being accessed. When do we use BaseMetastoreTableOperations as opposed to one of the other implementations of TableOperations such as HadoopTableOperations? How can I determine when a specific TableOperations is being used? Additionally, as this class is marked as abstract but yet I can't find anything that extends / implements it, why do we have it? I also see that there is a python version of this class, so is it possible that the python version of the class is why this particular abstract class exists?\nAdditionally, In the log.debug case you're adding, I imagine that it is likely still necessary to set the current metadata and related fields to null / their empty values. However, do we still intend to rethrow the exception like it currently is done? Looking through the code, I think it would possibly break things if we don't rethrow, such as BaseTransaction#commitReplaceTransaction(boolean orCreate) in the case that we're expecting the table to already exist (e.g. when the transaction is not allowed to create the table, that is if the transaction is not of type CREATE_OR_REPLACE_TABLE when calling commitReplaceTransaction).\nSo I have a few questions:\n\nWhy do we have this abstract base class BaseMetastoreTableOperations if nothing implements / extends it? I've mentioned a few reasons above, particularly the corresponding python class which is somewhat more complete.\nHow can we be sure when this version of TableOperations is in play vs any other? I'm assuming that when we're connected to an actual Hive Metastore (vs using Hadoop filesystem and table properties for the metadata), then this class comes into play, but since it's abstract and not extended I fail to see how that's possible.\nThe current behavior is to rethrow the exception. In the case that we are using the debug log, do we know that the upstream callers will catch this and not additionally add their own logs of a higher level and/or are we concerned that we are rethrowing the NoSuchIcebergTableException?\n\nPlease let me know if you need me to clean up / reexplain some of my questioning, as I know it's somewhat convoluted. I'm doing my best to understand when this class comes into play and how but a little bit of assistance from somebody who knows much more than I do (or a link to possible documentation about it) would really help me out. Thanks for all of the work you put in @HeartSaVioR!", "author": "kbendick", "createdAt": "2020-09-08T01:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYwMTEzOQ==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r484601139", "bodyText": "Oh. I wasn't also considering all of the various Catalog classes, which don't implement TableOperations but rely on them pretty heavily.  My question of when is it useful to have an abstract class that is not extended still stands (question 1 above), but I can see now more of the places where this code likely comes into play. Thanks so much for helping me get up to speed on the parts of codebase that I'm less familiar with. As I gain more practical experience using Iceberg, I'm sure it will become much more clear to me. Fortunately, I've finally gotten it all running on a modified k8s cluster somewhere for my own personal practice. \ud83d\udc4d", "author": "kbendick", "createdAt": "2020-09-08T01:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3MTQ1Mw==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r484671453", "bodyText": "Oh probably there's some miscommunication here.\nI'm a contributor (same as you) and don't know about the rationalization/intention of the codebase around here. My changes so far have been intended to fix something I encountered during experiments, not from learning on the codebase and making something beauty. (I'd love to if I'm qualified, but I lack of knowledge on the codebase so far.)\nAlso I'm trying to change smaller while contributing so that I don't break any intentions behind the wall. I'm self-commenting in the PR to ask about the viewpoint from committers, to confirm before making change.\nBack to the question, it might be OK to just remove the log message if we have faith on the callers to handle the exception well. We are throwing the exception in the method which says callers also have a chance to log it properly, swallow if it doesn't worth to log. That is also a question for reviewers as well.", "author": "HeartSaVioR", "createdAt": "2020-09-08T06:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3NTU2OQ==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r484675569", "bodyText": "The reason I lower down the log level only for NoSuchIcebergTableException is to avoid noisy and misleading log message for this case; 1) use default catalog in Spark 3, with hive catalog 2) try to load the table which is \"not\" the iceberg table.\n... and probably we just want to lower down the log level (or not log at all) with NoSuchTableException, as the condition 2) has two different situations 2.a) table exists in HMS but isn't an iceberg table 2.b) table doesn't exist. 2.b is probably also the valid case if Spark doesn't connect with Hive via remote HMS, which we also don't want to let end users see this noise.\nWDYT? (for all reviewers)", "author": "HeartSaVioR", "createdAt": "2020-09-08T06:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NDc1NQ==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r485094755", "bodyText": "To answer most of @kbendick's questions: this is extended by HiveTableOperations. It is also the recommended way to support a custom metastore, which is what we do at Netflix.\nThe reason why this warning exists is to catch the case where a table is deleted concurrently. The Hive implementation throws the exception when current metadata is not null but the table doesn't exist. The table instance needs to be in a consistent state if it is reused for a create, which is why we set the metadata to null. At the time, we considered NoSuchTableException to be more rare than it is with the wrapped catalogs.\nI think a better solution is to log the warning only when the table previously had metadata. What we could do is check before calling doRefresh whether currentMetadata is null. If it is not, then we want to log the warning. Otherwise, we should let it go through. We always want to re-throw because the caller is responsible for handling the exception. This is supposed to be helpful context.", "author": "rdblue", "createdAt": "2020-09-08T17:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDc0OA==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r485244748", "bodyText": "Thanks for the suggestion! I've applied your review comment.\nProbably worth leaving a code comment to explain the context around existence of warning message, but we can simply skip it if we feel it's now straightforward. WDYT?", "author": "HeartSaVioR", "createdAt": "2020-09-08T23:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MjIxMw==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r485982213", "bodyText": "I think it looks good now. I'll merge this. Thanks!", "author": "rdblue", "createdAt": "2020-09-09T23:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MDA1NA=="}], "type": "inlineReview"}, {"oid": "9999df716c3ceb2557f79e3f97ad5286db8ca94d", "url": "https://github.com/apache/iceberg/commit/9999df716c3ceb2557f79e3f97ad5286db8ca94d", "message": "Reflect review comment", "committedDate": "2020-09-08T23:01:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjAxNg==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r485242016", "bodyText": "I'm not 100% certain that re-setting fields is valid only for when the if statement is true. If then we can move things into if statement, but otherwise I guess it can be left as it is. At least leaving it as it is won't hurt anything.", "author": "HeartSaVioR", "createdAt": "2020-09-08T23:03:22Z", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreTableOperations.java", "diffHunk": "@@ -72,10 +73,14 @@ public int currentVersion() {\n \n   @Override\n   public TableMetadata refresh() {\n+    boolean currentMetadataWasAvailable = currentMetadata != null;\n     try {\n       doRefresh();\n     } catch (NoSuchTableException e) {\n-      LOG.warn(\"Could not find the table during refresh, setting current metadata to null\", e);\n+      if (currentMetadataWasAvailable) {\n+        LOG.warn(\"Could not find the table during refresh, setting current metadata to null\", e);\n+      }\n+\n       currentMetadata = null;", "originalCommit": "9999df716c3ceb2557f79e3f97ad5286db8ca94d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MjA1Nw==", "url": "https://github.com/apache/iceberg/pull/1429#discussion_r485982057", "bodyText": "I think this is okay as it is.", "author": "rdblue", "createdAt": "2020-09-09T23:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjAxNg=="}], "type": "inlineReview"}, {"oid": "9e85c40fb062c2dd65617e40e5ace74f98383311", "url": "https://github.com/apache/iceberg/commit/9e85c40fb062c2dd65617e40e5ace74f98383311", "message": "Unused import", "committedDate": "2020-09-09T01:17:50Z", "type": "commit"}]}