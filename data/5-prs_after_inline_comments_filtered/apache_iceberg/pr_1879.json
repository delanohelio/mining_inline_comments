{"pr_number": 1879, "pr_title": "Core: Support TableBuilder in CachingCatalog", "pr_createdAt": "2020-12-06T01:37:53Z", "pr_url": "https://github.com/apache/iceberg/pull/1879", "timeline": [{"oid": "90ebeb7715a363a2bc7216ea2a58d6d0186613b7", "url": "https://github.com/apache/iceberg/commit/90ebeb7715a363a2bc7216ea2a58d6d0186613b7", "message": "Support TableBuilder in CachingCatalog.", "committedDate": "2020-12-06T01:36:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkzMDU0MQ==", "url": "https://github.com/apache/iceberg/pull/1879#discussion_r536930541", "bodyText": "We should consider moving these to be default implementations in the interface.", "author": "rdblue", "createdAt": "2020-12-06T01:38:20Z", "path": "core/src/main/java/org/apache/iceberg/CachingCatalog.java", "diffHunk": "@@ -99,36 +99,35 @@ public Table loadTable(TableIdentifier ident) {\n   @Override\n   public Table createTable(TableIdentifier ident, Schema schema, PartitionSpec spec, String location,\n                            Map<String, String> properties) {\n-    AtomicBoolean created = new AtomicBoolean(false);\n-    Table table = tableCache.get(canonicalizeIdentifier(ident), identifier -> {\n-      created.set(true);\n-      return catalog.createTable(identifier, schema, spec, location, properties);\n-    });\n-\n-    if (!created.get()) {\n-      throw new AlreadyExistsException(\"Table already exists: %s\", ident);\n-    }\n-\n-    return table;\n+    return buildTable(ident, schema)\n+        .withPartitionSpec(spec)\n+        .withLocation(location)\n+        .withProperties(properties)\n+        .create();", "originalCommit": "90ebeb7715a363a2bc7216ea2a58d6d0186613b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMTYxNQ==", "url": "https://github.com/apache/iceberg/pull/1879#discussion_r537401615", "bodyText": "We are calling invalidate on tableCache directly instead of the dedicated method in CachingCatalog that also invalidates metadata tables. I think we should keep the old logic.", "author": "aokolnychyi", "createdAt": "2020-12-07T10:39:08Z", "path": "core/src/main/java/org/apache/iceberg/CachingCatalog.java", "diffHunk": "@@ -160,4 +159,90 @@ private void invalidate(TableIdentifier ident) {\n \n     return builder.build();\n   }\n+\n+  @Override\n+  public TableBuilder buildTable(TableIdentifier identifier, Schema schema) {\n+    return new CachingTableBuilder(identifier, schema);\n+  }\n+\n+  private class CachingTableBuilder implements TableBuilder {\n+    private final TableIdentifier ident;\n+    private final TableBuilder innerBuilder;\n+\n+    private CachingTableBuilder(TableIdentifier identifier, Schema schema) {\n+      this.innerBuilder = catalog.buildTable(identifier, schema);\n+      this.ident = identifier;\n+    }\n+\n+    @Override\n+    public TableBuilder withPartitionSpec(PartitionSpec spec) {\n+      innerBuilder.withPartitionSpec(spec);\n+      return this;\n+    }\n+\n+    @Override\n+    public TableBuilder withSortOrder(SortOrder sortOrder) {\n+      innerBuilder.withSortOrder(sortOrder);\n+      return this;\n+    }\n+\n+    @Override\n+    public TableBuilder withLocation(String location) {\n+      innerBuilder.withLocation(location);\n+      return this;\n+    }\n+\n+    @Override\n+    public TableBuilder withProperties(Map<String, String> properties) {\n+      innerBuilder.withProperties(properties);\n+      return this;\n+    }\n+\n+    @Override\n+    public TableBuilder withProperty(String key, String value) {\n+      innerBuilder.withProperty(key, value);\n+      return this;\n+    }\n+\n+    @Override\n+    public Table create() {\n+      AtomicBoolean created = new AtomicBoolean(false);\n+      Table table = tableCache.get(canonicalizeIdentifier(ident), identifier -> {\n+        created.set(true);\n+        return innerBuilder.create();\n+      });\n+\n+      if (!created.get()) {\n+        throw new AlreadyExistsException(\"Table already exists: %s\", ident);\n+      }\n+\n+      return table;\n+    }\n+\n+    @Override\n+    public Transaction createTransaction() {\n+      // create a new transaction without altering the cache. the table doesn't exist until the transaction is\n+      // committed. if the table is created before the transaction commits, any cached version is correct and the\n+      // transaction create will fail. if the transaction commits before another create, then the cache will be empty.\n+      return innerBuilder.createTransaction();\n+    }\n+\n+    @Override\n+    public Transaction replaceTransaction() {\n+      // create a new transaction without altering the cache. the table doesn't change until the transaction is\n+      // committed. when the transaction commits, invalidate the table in the cache if it is present.\n+      return CommitCallbackTransaction.addCallback(\n+          innerBuilder.replaceTransaction(),\n+          () -> tableCache.invalidate(canonicalizeIdentifier(ident)));", "originalCommit": "90ebeb7715a363a2bc7216ea2a58d6d0186613b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzA4MA==", "url": "https://github.com/apache/iceberg/pull/1879#discussion_r537687080", "bodyText": "Good catch. I hit this on Thursday in our branch based on 0.9.0 and backported it here, which is why I missed it. Thanks!", "author": "rdblue", "createdAt": "2020-12-07T17:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMTYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4ODExMA==", "url": "https://github.com/apache/iceberg/pull/1879#discussion_r537688110", "bodyText": "Fixed.", "author": "rdblue", "createdAt": "2020-12-07T17:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMTYxNQ=="}], "type": "inlineReview"}, {"oid": "ef4155d2460239bf2b9559d30613736b0be44790", "url": "https://github.com/apache/iceberg/commit/ef4155d2460239bf2b9559d30613736b0be44790", "message": "Call correct invalidate method.", "committedDate": "2020-12-07T17:25:28Z", "type": "commit"}]}