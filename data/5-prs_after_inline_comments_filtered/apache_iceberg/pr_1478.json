{"pr_number": 1478, "pr_title": "Enable Hive3 builds for iceberg-mr and iceberg-hive-metastore", "pr_createdAt": "2020-09-18T15:37:34Z", "pr_url": "https://github.com/apache/iceberg/pull/1478", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyNTcwNg==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r492325706", "bodyText": "Why use toEpochDay here, but daysFromDate in the other method? I think both should use daysFromDate since that's what we use elsewhere and trust the most.", "author": "rdblue", "createdAt": "2020-09-21T20:26:00Z", "path": "mr-hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspector.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDate;\n+import org.apache.hadoop.hive.common.type.Date;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.iceberg.util.DateTimeUtil;\n+\n+public final class IcebergDateObjectInspector extends AbstractPrimitiveJavaObjectInspector\n+                                              implements DateObjectInspector {\n+\n+  private static final IcebergDateObjectInspector INSTANCE = new IcebergDateObjectInspector();\n+\n+  public static IcebergDateObjectInspector get() {\n+    return INSTANCE;\n+  }\n+\n+  private IcebergDateObjectInspector() {\n+    super(TypeInfoFactory.dateTypeInfo);\n+  }\n+\n+  @Override\n+  public Date getPrimitiveJavaObject(Object o) {\n+    if (o == null) {\n+      return null;\n+    }\n+    LocalDate date = (LocalDate) o;\n+    return Date.ofEpochDay((int) date.toEpochDay());", "originalCommit": "6b1df1329e0e9d36f3b998c0e9ec4effb1d14eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MDA2NQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r492380065", "bodyText": "Good point, thanks, I will change to use the same method", "author": "marton-bod", "createdAt": "2020-09-21T22:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyNTcwNg=="}], "type": "inlineReview"}, {"oid": "a88ae1409ce6a1dde09323364bd33086160f50d2", "url": "https://github.com/apache/iceberg/commit/a88ae1409ce6a1dde09323364bd33086160f50d2", "message": "Hive: Create new mr-hive3 module which builds with Hive3/Hadoop3", "committedDate": "2020-09-28T16:06:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDg3OQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496310879", "bodyText": "Can you use DynCtors instead? I think this can be simpler:\n  private static final DynConstructors.Ctor<HiveMetaStoreClient> CLIENT_CTOR = DynConstructors.builder()\n      .impl(HiveMetaStoreClient.class, HiveConf.class)\n      .impl(HiveMetaStoreClient.class, Configuration.class)\n      .build();\n\n  protected HiveMetaStoreClient newClient()  {\n    try {\n      return CLIENT_CTOR.newInstance(hiveConf);\n    } catch (...) {\n      ...\n    }\n  }\nThis also exposes a bug with the reflection path: MetaException is no longer thrown in the try block. Since that's a checked exception, it will be wrapped in a RuntimeException. You'll need to replace that block with catch (RuntimeException e) { ... } and check the cause of the exception for a MetaException.", "author": "rdblue", "createdAt": "2020-09-29T00:42:44Z", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveClientPool.java", "diffHunk": "@@ -41,7 +41,16 @@ public HiveClientPool(int poolSize, Configuration conf) {\n   @Override\n   protected HiveMetaStoreClient newClient()  {\n     try {\n-      return new HiveMetaStoreClient(hiveConf);\n+      // create the metastore client based on whether we're working with Hive2 or Hive3 dependencies\n+      // we need to do this because there is a breaking API change between Hive2 and Hive3\n+      if (MetastoreUtil.hive3PresentOnClasspath()) {\n+        return (HiveMetaStoreClient) Class\n+                .forName(HiveMetaStoreClient.class.getName())\n+                .getConstructor(Configuration.class)\n+                .newInstance(hiveConf);", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0MzgxNQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496843815", "bodyText": "makes sense, thanks for the suggestion", "author": "marton-bod", "createdAt": "2020-09-29T15:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTAzMQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496311031", "bodyText": "No need for this empty line. Could you remove it?", "author": "rdblue", "createdAt": "2020-09-29T00:43:18Z", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/MetastoreUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+public class MetastoreUtil {\n+\n+  // this class is unique to Hive3 and cannot be found in Hive2, therefore a good proxy to see if\n+  // we are working against Hive3 dependencies\n+  private static final String HIVE3_UNIQUE_CLASS = \"org.apache.hadoop.hive.serde2.io.DateWritableV2\";\n+\n+  private MetastoreUtil() {\n+", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0Mzk0Mg==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496843942", "bodyText": "done", "author": "marton-bod", "createdAt": "2020-09-29T15:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTE3NA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496311174", "bodyText": "Can this use a private static variable with the value? That way we don't need to attempt to load the class every time this is called.", "author": "rdblue", "createdAt": "2020-09-29T00:43:57Z", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/MetastoreUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+public class MetastoreUtil {\n+\n+  // this class is unique to Hive3 and cannot be found in Hive2, therefore a good proxy to see if\n+  // we are working against Hive3 dependencies\n+  private static final String HIVE3_UNIQUE_CLASS = \"org.apache.hadoop.hive.serde2.io.DateWritableV2\";\n+\n+  private MetastoreUtil() {\n+\n+  }\n+\n+  /**\n+   * @return true if Hive3 dependencies are found on classpath, false otherwise\n+   */\n+  public static boolean hive3PresentOnClasspath() {", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NDI5NA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496844294", "bodyText": "Agree, create a static variable", "author": "marton-bod", "createdAt": "2020-09-29T15:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTg5Mw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496311893", "bodyText": "Could you also rewrite this one to use the DynMethods helpers?\n  private static final DynMethods.StaticMethod CLEAN_RAW_STORE = DynMethods.builder(\"cleanupRawStore\")\n      .hiddenImpl(HiveMetaStore.class)\n      .orNoop()\n      .buildStatic();\n\n    CLEAN_RAW_STORE.invoke();\nThat avoids needing a try/catch block since you can replace the method with a no-op if it isn't found. And hiddenImpl will make it accessible.", "author": "rdblue", "createdAt": "2020-09-29T00:46:59Z", "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveMetastore.java", "diffHunk": "@@ -80,6 +81,15 @@ public void stop() {\n     if (hiveLocalDir != null) {\n       hiveLocalDir.delete();\n     }\n+\n+    // remove raw store if exists\n+    try {\n+      Method cleanupRawStore = HiveMetaStore.class.getDeclaredMethod(\"cleanupRawStore\");\n+      cleanupRawStore.setAccessible(true);\n+      cleanupRawStore.invoke(null);\n+    } catch (Exception e) {\n+      // no op\n+    }", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjA2Mw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496312063", "bodyText": "This is also a good place to use the reflection helpers.", "author": "rdblue", "createdAt": "2020-09-29T00:47:40Z", "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/TestHiveMetastore.java", "diffHunk": "@@ -94,8 +104,24 @@ public String getDatabasePath(String dbName) {\n   private TServer newThriftServer(TServerSocket socket, HiveConf conf) throws Exception {\n     HiveConf serverConf = new HiveConf(conf);\n     serverConf.set(HiveConf.ConfVars.METASTORECONNECTURLKEY.varname, \"jdbc:derby:\" + getDerbyPath() + \";create=true\");\n-    HiveMetaStore.HMSHandler baseHandler = new HiveMetaStore.HMSHandler(\"new db based metaserver\", serverConf);\n-    IHMSHandler handler = RetryingHMSHandler.getProxy(serverConf, baseHandler, false);\n+\n+    // create the metastore handlers based on whether we're working with Hive2 or Hive3 dependencies\n+    // we need to do this because there is a breaking API change between Hive2 and Hive3\n+    HiveMetaStore.HMSHandler baseHandler;\n+    IHMSHandler handler;\n+    if (MetastoreUtil.hive3PresentOnClasspath()) {\n+      baseHandler = (HiveMetaStore.HMSHandler) Class\n+              .forName(HiveMetaStore.HMSHandler.class.getName())\n+              .getConstructor(String.class, Configuration.class)\n+              .newInstance(\"new db based metaserver\", serverConf);\n+      handler = (IHMSHandler) Class\n+              .forName(RetryingHMSHandler.class.getName())\n+              .getDeclaredMethod(\"getProxy\", Configuration.class, IHMSHandler.class, boolean.class)\n+              .invoke(null, serverConf, baseHandler, false);\n+    } else {\n+      baseHandler = new HiveMetaStore.HMSHandler(\"new db based metaserver\", serverConf);\n+      handler = RetryingHMSHandler.getProxy(serverConf, baseHandler, false);\n+    }", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjE4Nw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496312187", "bodyText": "The continuation indent here should be 2 indents or 4 spaces from the start of the previous line.", "author": "rdblue", "createdAt": "2020-09-29T00:48:17Z", "path": "mr-hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDate;\n+import org.apache.hadoop.hive.common.type.Date;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.iceberg.util.DateTimeUtil;\n+\n+public final class IcebergDateObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+                                              implements DateObjectInspector {", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjM0NQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496312345", "bodyText": "This indentation might be off, since it corresponds to the new IcebergTimestampObjectInspectorHive3() { line.", "author": "rdblue", "createdAt": "2020-09-29T00:48:55Z", "path": "mr-hive3/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.AbstractPrimitiveJavaObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+\n+public abstract class IcebergTimestampObjectInspectorHive3 extends AbstractPrimitiveJavaObjectInspector\n+                                                      implements TimestampObjectInspector {\n+\n+  private static final IcebergTimestampObjectInspectorHive3 INSTANCE_WITH_ZONE =\n+      new IcebergTimestampObjectInspectorHive3() {\n+        @Override\n+        LocalDateTime toLocalDateTime(Object o) {\n+          return ((OffsetDateTime) o).toLocalDateTime();\n+        }\n+  };", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzEwNQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496313105", "bodyText": "Because the object inspector is a singleton, this could be done just once to set a static field. Then all this would need to do is return the IcebergObjectInspector.DATE_INSPECTOR. I think that would be better than running reflect code every invocation.", "author": "rdblue", "createdAt": "2020-09-29T00:51:45Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -72,7 +75,20 @@ public ObjectInspector primitive(Type.PrimitiveType primitiveType) {\n         primitiveTypeInfo = TypeInfoFactory.booleanTypeInfo;\n         break;\n       case DATE:\n-        return IcebergDateObjectInspector.get();\n+        // create the correct inspector based on whether we're working with Hive2 or Hive3 dependencies\n+        // we need to do this because there is a breaking API change in DateObjectInspector between Hive2 and Hive3\n+        if (MetastoreUtil.hive3PresentOnClasspath()) {", "originalCommit": "a88ae1409ce6a1dde09323364bd33086160f50d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQxNA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496313414", "bodyText": "And, translating these to use DynMethods would make it cleaner. I think both paths should use reflection and that's easy with DynMethods. You just provide multiple impl calls and the first one that is found will be used.", "author": "rdblue", "createdAt": "2020-09-29T00:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NDY5Nw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496844697", "bodyText": "yep, makes sense", "author": "marton-bod", "createdAt": "2020-09-29T15:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NTAyNA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496945024", "bodyText": "This could be private static final if you used a private static method to set it initially, I think:\nprivate static final boolean HIVE3_PRESENT_ON_CLASSPATH = detectHive3();\n\npublic static boolean hive3PresentOnClasspath() {'\n  return HIVE3_PRESENT_ON_CLASSPATH;\n}\n\nprivate static boolean detectHive3() {\n  try {\n    Class.forName(...);\n    return true;\n  } catch (ClassNotFoundException e) {\n    return false;\n  }\n}", "author": "rdblue", "createdAt": "2020-09-29T18:18:27Z", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/MetastoreUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.hive;\n+\n+public class MetastoreUtil {\n+\n+  // this class is unique to Hive3 and cannot be found in Hive2, therefore a good proxy to see if\n+  // we are working against Hive3 dependencies\n+  private static final String HIVE3_UNIQUE_CLASS = \"org.apache.hadoop.hive.serde2.io.DateWritableV2\";\n+\n+  private static Boolean hive3PresentOnClasspath = null;", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MjUxNQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497472515", "bodyText": "yep, good idea", "author": "marton-bod", "createdAt": "2020-09-30T12:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0Njg0MA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496946840", "bodyText": "It is safer to use the class name string instead of the class here, so that we know it won't be loaded and break at runtime. I think that the Hive 3 tests will exercise this case, but it would still be easier to be careful.", "author": "rdblue", "createdAt": "2020-09-29T18:21:23Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -27,12 +27,25 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n import org.apache.iceberg.Schema;\n+import org.apache.iceberg.common.DynMethods;\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.TypeUtil;\n import org.apache.iceberg.types.Types;\n \n public final class IcebergObjectInspector extends TypeUtil.SchemaVisitor<ObjectInspector> {\n \n+  // get the correct inspectors depending on whether we're working with Hive2 or Hive3 dependencies\n+  // we need to do this because there is a breaking API change in Date/TimestampObjectInspector between Hive2 and Hive3\n+  private static final DynMethods.StaticMethod DATE_INSPECTOR = DynMethods.builder(\"get\")\n+      .impl(\"org.apache.iceberg.mr.hive.serde.objectinspector.IcebergDateObjectInspectorHive3\", null)\n+      .impl(IcebergDateObjectInspector.class, null)", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4ODI4MQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497488281", "bodyText": "yeah, good idea to be defensive", "author": "marton-bod", "createdAt": "2020-09-30T12:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0Njg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NzgxOQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496947819", "bodyText": "Is null needed? I think before, I've always just omitted the classes.", "author": "rdblue", "createdAt": "2020-09-29T18:22:56Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -27,12 +27,25 @@\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n import org.apache.iceberg.Schema;\n+import org.apache.iceberg.common.DynMethods;\n import org.apache.iceberg.types.Type;\n import org.apache.iceberg.types.TypeUtil;\n import org.apache.iceberg.types.Types;\n \n public final class IcebergObjectInspector extends TypeUtil.SchemaVisitor<ObjectInspector> {\n \n+  // get the correct inspectors depending on whether we're working with Hive2 or Hive3 dependencies\n+  // we need to do this because there is a breaking API change in Date/TimestampObjectInspector between Hive2 and Hive3\n+  private static final DynMethods.StaticMethod DATE_INSPECTOR = DynMethods.builder(\"get\")\n+      .impl(\"org.apache.iceberg.mr.hive.serde.objectinspector.IcebergDateObjectInspectorHive3\", null)", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5NDEyMw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497494123", "bodyText": "you're right, no need for the null", "author": "marton-bod", "createdAt": "2020-09-30T13:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NzgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0ODM5Nw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496948397", "bodyText": "I'd prefer using the same assertion, but with a different class name. But this is really minor if tests are passing.", "author": "rdblue", "createdAt": "2020-09-29T18:23:53Z", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergObjectInspector.java", "diffHunk": "@@ -90,7 +91,13 @@ public void testIcebergObjectInspector() {\n     Assert.assertEquals(3, dateField.getFieldID());\n     Assert.assertEquals(\"date_field\", dateField.getFieldName());\n     Assert.assertEquals(\"date comment\", dateField.getFieldComment());\n-    Assert.assertEquals(IcebergDateObjectInspector.get(), dateField.getFieldObjectInspector());\n+    if (MetastoreUtil.hive3PresentOnClasspath()) {\n+      Assert.assertEquals(\n+              \"org.apache.iceberg.mr.hive.serde.objectinspector.IcebergDateObjectInspectorHive3\",\n+              dateField.getFieldObjectInspector().getClass().getName());", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5NDAzMA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497494030", "bodyText": "agree", "author": "marton-bod", "createdAt": "2020-09-30T13:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0ODM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1MjkyOQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497852929", "bodyText": "Nit: indentation is off.", "author": "rdblue", "createdAt": "2020-09-30T23:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0ODM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0OTIzMQ==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496949231", "bodyText": "Minor: we could invoke this just once and store it in a private static final field. Same with timestamps. We could store both in fields and choose one using adjustToUtc. Not a big deal to always call the reflection method here, though.", "author": "rdblue", "createdAt": "2020-09-29T18:25:17Z", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/serde/objectinspector/IcebergObjectInspector.java", "diffHunk": "@@ -72,7 +85,7 @@ public ObjectInspector primitive(Type.PrimitiveType primitiveType) {\n         primitiveTypeInfo = TypeInfoFactory.booleanTypeInfo;\n         break;\n       case DATE:\n-        return IcebergDateObjectInspector.get();\n+        return DATE_INSPECTOR.invoke();", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5NDQ3Ng==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497494476", "bodyText": "saved them into private static final fields", "author": "marton-bod", "createdAt": "2020-09-30T13:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0OTIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTkwMw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496951903", "bodyText": "We should use instants to initialize all date/time values so that we are not hit by time zone bugs.", "author": "rdblue", "createdAt": "2020-09-29T18:29:54Z", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergTimestampObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.apache.hadoop.hive.common.type.Timestamp;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergTimestampObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergTimestampObjectInspector() {\n+    TimestampObjectInspector oi = IcebergTimestampObjectInspectorHive3.get(false);\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.TIMESTAMP, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.timestampTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.timestampTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(Timestamp.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(TimestampWritableV2.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    LocalDateTime local = LocalDateTime.of(2020, 1, 1, 0, 0, 1, 500);\n+    Timestamp ts = Timestamp.valueOf(\"2020-01-01 00:00:01.00000050\");", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMTM5Nw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497521397", "bodyText": "sure", "author": "marton-bod", "createdAt": "2020-09-30T13:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MjM4OA==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r496952388", "bodyText": "Is it possible to initialize these using days from epoch instead of parsing? I don't trust date/time objects that parse and translate.", "author": "rdblue", "createdAt": "2020-09-29T18:30:46Z", "path": "hive3/src/test/java/org/apache/iceberg/mr/hive/serde/objectinspector/TestIcebergDateObjectInspectorHive3.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr.hive.serde.objectinspector;\n+\n+import java.time.LocalDate;\n+import org.apache.hadoop.hive.common.type.Date;\n+import org.apache.hadoop.hive.serde2.io.DateWritableV2;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestIcebergDateObjectInspectorHive3 {\n+\n+  @Test\n+  public void testIcebergDateObjectInspector() {\n+    DateObjectInspector oi = IcebergDateObjectInspectorHive3.get();\n+\n+    Assert.assertEquals(ObjectInspector.Category.PRIMITIVE, oi.getCategory());\n+    Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.DATE, oi.getPrimitiveCategory());\n+\n+    Assert.assertEquals(TypeInfoFactory.dateTypeInfo, oi.getTypeInfo());\n+    Assert.assertEquals(TypeInfoFactory.dateTypeInfo.getTypeName(), oi.getTypeName());\n+\n+    Assert.assertEquals(Date.class, oi.getJavaPrimitiveClass());\n+    Assert.assertEquals(DateWritableV2.class, oi.getPrimitiveWritableClass());\n+\n+    Assert.assertNull(oi.copyObject(null));\n+    Assert.assertNull(oi.getPrimitiveJavaObject(null));\n+    Assert.assertNull(oi.getPrimitiveWritableObject(null));\n+\n+    LocalDate local = LocalDate.of(2020, 1, 1);\n+    Date date = Date.valueOf(\"2020-01-01\");", "originalCommit": "dc553a456a5611c7df26ab143490340ca6696e86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMTQ3Nw==", "url": "https://github.com/apache/iceberg/pull/1478#discussion_r497521477", "bodyText": "sure", "author": "marton-bod", "createdAt": "2020-09-30T13:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MjM4OA=="}], "type": "inlineReview"}, {"oid": "fc8314c88a585c9b466a93acdedae7928d459106", "url": "https://github.com/apache/iceberg/commit/fc8314c88a585c9b466a93acdedae7928d459106", "message": "Hive: Create new mr-hive3 module which builds with Hive3/Hadoop3", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "6b35a33b7a31999fdf9627fed8ce1b59d9e9126a", "url": "https://github.com/apache/iceberg/commit/6b35a33b7a31999fdf9627fed8ce1b59d9e9126a", "message": "Hive: Rename mr-hive3 to hive3; Use reflection helpers from iceberg-common to bridge Hive2/3 API differences; indentation fixes", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "4fc53d0c56ebe032681eba5846311d5ea82b2afc", "url": "https://github.com/apache/iceberg/commit/4fc53d0c56ebe032681eba5846311d5ea82b2afc", "message": "update comment", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "6a4ea190c1543834aa419a4d5cfc2513676fff9f", "url": "https://github.com/apache/iceberg/commit/6a4ea190c1543834aa419a4d5cfc2513676fff9f", "message": "Use Instant/epoch days to create date/timestamp objects in tests; Reflection optimizations", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "880009a88cfa9d2d631e6dee8715e1519fb468af", "url": "https://github.com/apache/iceberg/commit/880009a88cfa9d2d631e6dee8715e1519fb468af", "message": "Extract epochDays and epochMillis", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "196e917a66f60f8b3e127b8af13604e6a3bb9fa0", "url": "https://github.com/apache/iceberg/commit/196e917a66f60f8b3e127b8af13604e6a3bb9fa0", "message": "Avoid concurrency issues between iceberg-mr and iceberg-hive3 tests", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "7c055ad2e86d49a07fd5d62dfefd5cdaef8b4c46", "url": "https://github.com/apache/iceberg/commit/7c055ad2e86d49a07fd5d62dfefd5cdaef8b4c46", "message": "Shutdown HMSHandler directly instead of using reflective call", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "62da1a6fbd527849df0e85db43bc30c5dcc52a76", "url": "https://github.com/apache/iceberg/commit/62da1a6fbd527849df0e85db43bc30c5dcc52a76", "message": "Hive: Instantiate metastore once per test class for StorageHandler tests; Use flag to prevent persistence manager closure problem", "committedDate": "2020-10-06T19:38:36Z", "type": "commit"}, {"oid": "62da1a6fbd527849df0e85db43bc30c5dcc52a76", "url": "https://github.com/apache/iceberg/commit/62da1a6fbd527849df0e85db43bc30c5dcc52a76", "message": "Hive: Instantiate metastore once per test class for StorageHandler tests; Use flag to prevent persistence manager closure problem", "committedDate": "2020-10-06T19:38:36Z", "type": "forcePushed"}, {"oid": "1d7dc49998100765e73a97f73856b7987dace4fc", "url": "https://github.com/apache/iceberg/commit/1d7dc49998100765e73a97f73856b7987dace4fc", "message": "Add metastore uris as system prop; Remove multiple metastores workaround", "committedDate": "2020-10-07T12:51:40Z", "type": "commit"}]}