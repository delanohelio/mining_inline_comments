{"pr_number": 760, "pr_title": "Removed calls to toCharArray", "pr_createdAt": "2020-05-13T08:59:51Z", "pr_url": "https://github.com/senx/warp10-platform/pull/760", "timeline": [{"oid": "364441d34c3806437454376bb94fca55529d2988", "url": "https://github.com/senx/warp10-platform/commit/364441d34c3806437454376bb94fca55529d2988", "message": "Removed calls to toCharArray", "committedDate": "2020-05-13T08:58:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDc3MA==", "url": "https://github.com/senx/warp10-platform/pull/760#discussion_r424680770", "bodyText": "The behavior of this method differs from the previous one for invalid inputs:\n\nThe exception thrown when given a hex string with an odd number of letter is much less clear: java.lang.StringIndexOutOfBoundsException: String index out of range: 3\nThis method does not thrown any exception when given an invalid hex string, for instance 1Z returns new byte[]{16}", "author": "ftence", "createdAt": "2020-05-13T19:30:26Z", "path": "warp10/src/main/java/io/warp10/continuum/gts/GTSHelper.java", "diffHunk": "@@ -3013,7 +3013,7 @@ public static Object parseValue(String valuestr) throws ParseException {\n       } else if ('b' == firstChar && valuestr.startsWith(\"b64:\")) {\n         value = Base64.decodeBase64(valuestr.substring(4));\n       } else if ('h' == firstChar && valuestr.startsWith(\"hex:\")) {\n-        value = Hex.decodeHex(valuestr.substring(4).toCharArray());\n+        value = Hex.decode(valuestr.substring(4));", "originalCommit": "364441d34c3806437454376bb94fca55529d2988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "249528de2f994aaed842cbe7fb882fea4fa7eedf", "url": "https://github.com/senx/warp10-platform/commit/249528de2f994aaed842cbe7fb882fea4fa7eedf", "message": "Initial commit of WarpHexDecoder", "committedDate": "2020-05-13T20:08:49Z", "type": "commit"}]}