{"pr_number": 854, "pr_title": "Allow GET on String and make path-like parameter work on all accepted types", "pr_createdAt": "2020-09-28T11:39:10Z", "pr_url": "https://github.com/senx/warp10-platform/pull/854", "timeline": [{"oid": "4bc80ec5fa266f4bd7db67f9cd73b6274c17e890", "url": "https://github.com/senx/warp10-platform/commit/4bc80ec5fa266f4bd7db67f9cd73b6274c17e890", "message": "Allow GET on String and make path-like parameter work on all accepted types", "committedDate": "2020-09-28T11:30:18Z", "type": "commit"}, {"oid": "6a1870ba10e63dd9d4ed76e87538d52c9d0198ef", "url": "https://github.com/senx/warp10-platform/commit/6a1870ba10e63dd9d4ed76e87538d52c9d0198ef", "message": "Add comments", "committedDate": "2020-09-28T11:37:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3ODE1Nw==", "url": "https://github.com/senx/warp10-platform/pull/854#discussion_r495878157", "bodyText": "LIST", "author": "hbs", "createdAt": "2020-09-28T11:46:00Z", "path": "warp10/src/main/java/io/warp10/script/functions/GET.java", "diffHunk": "@@ -17,74 +17,93 @@\n package io.warp10.script.functions;\n \n import io.warp10.script.NamedWarpScriptFunction;\n-import io.warp10.script.WarpScriptStackFunction;\n import io.warp10.script.WarpScriptException;\n import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n \n import java.util.List;\n import java.util.Map;\n \n /**\n- * Extracts a value from a map, list, or byte array given a key.\n+ * Extracts a value from a map, list, a byte array or a String, given a key.\n  */\n public class GET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n-  \n+\n   public GET(String name) {\n     super(name);\n   }\n-  \n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object key = stack.pop();\n-    \n+\n     Object coll = stack.pop();\n \n-    if (!(coll instanceof Map) && !(coll instanceof List) && !(coll instanceof byte[])) {\n-      throw new WarpScriptException(getName() + \" operates on a map, list or byte array.\");\n-    }\n-    \n-    Object value = null;\n-    \n-    if (coll instanceof Map) {\n-      value = ((Map) coll).get(key);\n+    Object value;\n \n-    } else if (key instanceof Long) {\n-      int idx = ((Long) key).intValue();\n+    try {\n+      if (key instanceof List) {\n+        // The list is considered to be a kind of path. For instance [ 'a' 0 -1 ] GET is equivalent to 'a' GET 0 GET -1 GET.\n+        value = coll;\n+        for (Object keyElement: (List) key) {\n+          value = get(keyElement, value);\n+        }\n+      } else {\n+        value = get(key, coll);\n+      }\n+    } catch (WarpScriptException | IndexOutOfBoundsException e) {\n+      throw new WarpScriptException(getName() + \" failed.\", e);\n+    }\n \n-      if (coll instanceof List) {\n-        int size = ((List) coll).size();\n+    stack.push(value);\n \n-        idx = computeAndCheckIndex(idx, size);\n+    return stack;\n+  }\n \n-        value = ((List) coll).get(idx);\n+  /**\n+   * Get a value from a List, Map, byte[] or String using respectively a Long, Object, Long or Long key.\n+   * @param key Either on Object for a Map or a Long for List, byte[] or String. Negative indexing is possible, in that case the corresponding index is size + index.\n+   * @param collection Either a List, Map, byte[] or String instance.\n+   * @return The value at the given key.\n+   * @throws WarpScriptException If the collection type cannot be handled or the key is invalid for the collection type.\n+   */\n+  public static Object get(Object key, Object collection) throws WarpScriptException {\n+    if (collection instanceof List) {\n+      if (!(key instanceof Long)) {\n+        throw new WarpScriptException(\"Getting on List requires a Long.\");", "originalCommit": "6a1870ba10e63dd9d4ed76e87538d52c9d0198ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3ODczNA==", "url": "https://github.com/senx/warp10-platform/pull/854#discussion_r495878734", "bodyText": "It would probably be better to return a byte array of length 1 rather than a LONG, it would be more coherent with the way GET behaves for STRINGs.", "author": "hbs", "createdAt": "2020-09-28T11:47:12Z", "path": "warp10/src/main/java/io/warp10/script/functions/GET.java", "diffHunk": "@@ -17,74 +17,93 @@\n package io.warp10.script.functions;\n \n import io.warp10.script.NamedWarpScriptFunction;\n-import io.warp10.script.WarpScriptStackFunction;\n import io.warp10.script.WarpScriptException;\n import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n \n import java.util.List;\n import java.util.Map;\n \n /**\n- * Extracts a value from a map, list, or byte array given a key.\n+ * Extracts a value from a map, list, a byte array or a String, given a key.\n  */\n public class GET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n-  \n+\n   public GET(String name) {\n     super(name);\n   }\n-  \n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object key = stack.pop();\n-    \n+\n     Object coll = stack.pop();\n \n-    if (!(coll instanceof Map) && !(coll instanceof List) && !(coll instanceof byte[])) {\n-      throw new WarpScriptException(getName() + \" operates on a map, list or byte array.\");\n-    }\n-    \n-    Object value = null;\n-    \n-    if (coll instanceof Map) {\n-      value = ((Map) coll).get(key);\n+    Object value;\n \n-    } else if (key instanceof Long) {\n-      int idx = ((Long) key).intValue();\n+    try {\n+      if (key instanceof List) {\n+        // The list is considered to be a kind of path. For instance [ 'a' 0 -1 ] GET is equivalent to 'a' GET 0 GET -1 GET.\n+        value = coll;\n+        for (Object keyElement: (List) key) {\n+          value = get(keyElement, value);\n+        }\n+      } else {\n+        value = get(key, coll);\n+      }\n+    } catch (WarpScriptException | IndexOutOfBoundsException e) {\n+      throw new WarpScriptException(getName() + \" failed.\", e);\n+    }\n \n-      if (coll instanceof List) {\n-        int size = ((List) coll).size();\n+    stack.push(value);\n \n-        idx = computeAndCheckIndex(idx, size);\n+    return stack;\n+  }\n \n-        value = ((List) coll).get(idx);\n+  /**\n+   * Get a value from a List, Map, byte[] or String using respectively a Long, Object, Long or Long key.\n+   * @param key Either on Object for a Map or a Long for List, byte[] or String. Negative indexing is possible, in that case the corresponding index is size + index.\n+   * @param collection Either a List, Map, byte[] or String instance.\n+   * @return The value at the given key.\n+   * @throws WarpScriptException If the collection type cannot be handled or the key is invalid for the collection type.\n+   */\n+  public static Object get(Object key, Object collection) throws WarpScriptException {\n+    if (collection instanceof List) {\n+      if (!(key instanceof Long)) {\n+        throw new WarpScriptException(\"Getting on List requires a Long.\");\n+      }\n \n-      } else {\n-        int size = ((byte[]) coll).length;\n+      int idx = ((Long) key).intValue();\n+      int size = ((List) collection).size();\n+      idx = computeAndCheckIndex(idx, size);\n+      return ((List) collection).get(idx);\n \n-        idx = computeAndCheckIndex(idx, size);\n+    } else if (collection instanceof Map) {\n+      return ((Map) collection).get(key);\n \n-        value = (long) (((byte[]) coll)[idx] & 0xFFL);\n+    } else if (collection instanceof String) {\n+      if (!(key instanceof Long)) {\n+        throw new WarpScriptException(\"Getting on String requires a Long.\");\n       }\n \n-    } else if (coll instanceof byte[]) {\n-      throw new WarpScriptException(getName() + \" expects the key to be an integer when operating on a byte array.\");\n-\n-    } else if (!(key instanceof List)) {\n-      throw new WarpScriptException(getName() + \" expects the key to be an integer or a list of integers when operating on a List.\");\n+      int idx = ((Long) key).intValue();\n+      int size = ((String) collection).length();\n+      idx = computeAndCheckIndex(idx, size);\n+      return String.valueOf(((String) collection).charAt(idx));\n \n-    } else {\n-      for (Object o: (List) key) {\n-        if (!(o instanceof Long)) {\n-          throw new WarpScriptException(getName() + \" expects the key to be an integer or a list of integers when operating on a List.\");\n-        }\n+    } else if (collection instanceof byte[]) {\n+      if (!(key instanceof Long)) {\n+        throw new WarpScriptException(\"Getting on bytes requires a Long.\");\n       }\n \n-      value = nestedGet((List) coll, (List<Long>) key);\n-    }\n-    \n-    stack.push(value);\n+      int idx = ((Long) key).intValue();\n+      int size = ((byte[]) collection).length;\n+      idx = computeAndCheckIndex(idx, size);\n+      return ((byte[]) collection)[idx] & 0xFFL;", "originalCommit": "6a1870ba10e63dd9d4ed76e87538d52c9d0198ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNzkxOA==", "url": "https://github.com/senx/warp10-platform/pull/854#discussion_r495917918", "bodyText": "That would change the current behavior.", "author": "ftence", "createdAt": "2020-09-28T12:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3ODczNA=="}], "type": "inlineReview"}, {"oid": "ed62cf0c9d5218ca1e904db5f16f57180ba4b0a7", "url": "https://github.com/senx/warp10-platform/commit/ed62cf0c9d5218ca1e904db5f16f57180ba4b0a7", "message": "Use WarpScript types in error messages.", "committedDate": "2020-09-28T13:04:01Z", "type": "commit"}, {"oid": "18cf1dc00ec01dc39fa4b70d33bf33672867e203", "url": "https://github.com/senx/warp10-platform/commit/18cf1dc00ec01dc39fa4b70d33bf33672867e203", "message": "Fix ambiguity of GETing on a Map with a List key.", "committedDate": "2020-12-09T15:57:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyMzM2Mw==", "url": "https://github.com/senx/warp10-platform/pull/854#discussion_r564823363", "bodyText": "Fix Copyright notice ;-)", "author": "hbs", "createdAt": "2021-01-26T20:49:50Z", "path": "warp10/src/main/java/io/warp10/script/functions/GET.java", "diffHunk": "@@ -1,5 +1,5 @@\n //\n-//   Copyright 2018  SenX S.A.S.\n+//   Copyright 2018-2020  SenX S.A.S.", "originalCommit": "18cf1dc00ec01dc39fa4b70d33bf33672867e203", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgyNDEzMA==", "url": "https://github.com/senx/warp10-platform/pull/854#discussion_r564824130", "bodyText": "an Object", "author": "hbs", "createdAt": "2021-01-26T20:51:09Z", "path": "warp10/src/main/java/io/warp10/script/functions/GET.java", "diffHunk": "@@ -17,74 +17,95 @@\n package io.warp10.script.functions;\n \n import io.warp10.script.NamedWarpScriptFunction;\n-import io.warp10.script.WarpScriptStackFunction;\n import io.warp10.script.WarpScriptException;\n import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n \n import java.util.List;\n import java.util.Map;\n \n /**\n- * Extracts a value from a map, list, or byte array given a key.\n+ * Extracts a value from a map, list, a byte array or a String, given a key.\n  */\n public class GET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n-  \n+\n   public GET(String name) {\n     super(name);\n   }\n-  \n+\n   @Override\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object key = stack.pop();\n-    \n+\n     Object coll = stack.pop();\n \n-    if (!(coll instanceof Map) && !(coll instanceof List) && !(coll instanceof byte[])) {\n-      throw new WarpScriptException(getName() + \" operates on a map, list or byte array.\");\n-    }\n-    \n-    Object value = null;\n-    \n-    if (coll instanceof Map) {\n-      value = ((Map) coll).get(key);\n+    Object value;\n \n-    } else if (key instanceof Long) {\n-      int idx = ((Long) key).intValue();\n+    try {\n+      if (key instanceof List && coll instanceof List) {\n+        // The list is considered to be a kind of path. For instance [ 'a' 0 -1 ] GET is equivalent to 'a' GET 0 GET -1 GET.\n+        // We restrict that syntax only to top-level collections of type List because a Map can have list keys.\n+        // This top-level limitation allows a list of maps of strings to be addressed through this syntax.\n+        value = coll;\n+        for (Object keyElement: (List) key) {\n+          value = get(keyElement, value);\n+        }\n+      } else {\n+        value = get(key, coll);\n+      }\n+    } catch (WarpScriptException | IndexOutOfBoundsException e) {\n+      throw new WarpScriptException(getName() + \" failed.\", e);\n+    }\n \n-      if (coll instanceof List) {\n-        int size = ((List) coll).size();\n+    stack.push(value);\n \n-        idx = computeAndCheckIndex(idx, size);\n+    return stack;\n+  }\n \n-        value = ((List) coll).get(idx);\n+  /**\n+   * Get a value from a List, Map, byte[] or String using respectively a Long, Object, Long or Long key.\n+   * @param key Either on Object for a Map or a Long for List, byte[] or String. Negative indexing is possible, in that case the corresponding index is size + index.", "originalCommit": "18cf1dc00ec01dc39fa4b70d33bf33672867e203", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6f5cb6c5843211e0d90d49082685879f22fdb90", "url": "https://github.com/senx/warp10-platform/commit/d6f5cb6c5843211e0d90d49082685879f22fdb90", "message": "Fix copyright and typo", "committedDate": "2021-01-27T13:33:38Z", "type": "commit"}]}