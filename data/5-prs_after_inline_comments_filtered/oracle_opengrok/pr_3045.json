{"pr_number": 3045, "pr_title": "implement history API endpoint", "pr_createdAt": "2020-02-19T13:13:06Z", "pr_url": "https://github.com/oracle/opengrok/pull/3045", "timeline": [{"oid": "1186ff81cffcad83eaaebd79c18966ca58337f33", "url": "https://github.com/oracle/opengrok/commit/1186ff81cffcad83eaaebd79c18966ca58337f33", "message": "implement history API endpoint\n\nfixes #3044", "committedDate": "2020-02-19T13:04:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4MzY5NQ==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381283695", "bodyText": "final, static?", "author": "tulinkry", "createdAt": "2020-02-19T13:19:12Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/HistoryController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.History;\n+import org.opengrok.indexer.history.HistoryEntry;\n+import org.opengrok.indexer.history.HistoryException;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.web.messages.JSONable;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+\n+@Path(\"/history\")\n+public class HistoryController {\n+\n+    private RuntimeEnvironment env = RuntimeEnvironment.getInstance();", "originalCommit": "1186ff81cffcad83eaaebd79c18966ca58337f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4MzkyNA==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381283924", "bodyText": "final", "author": "tulinkry", "createdAt": "2020-02-19T13:19:40Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/HistoryController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.History;\n+import org.opengrok.indexer.history.HistoryEntry;\n+import org.opengrok.indexer.history.HistoryException;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.web.messages.JSONable;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+\n+@Path(\"/history\")\n+public class HistoryController {\n+\n+    private RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private static final int MAX_RESULTS = 1000;\n+\n+    static class HistoryEntryDTO implements JSONable {\n+        @JsonProperty\n+        private String revision;\n+        @JsonProperty\n+        private Date date;\n+        @JsonProperty\n+        private String author;\n+        @JsonProperty\n+        private String tags;\n+        @JsonProperty\n+        private String message;\n+        @JsonProperty\n+        private SortedSet<String> files;\n+\n+        // for testing\n+        HistoryEntryDTO() {\n+        }\n+\n+        HistoryEntryDTO(HistoryEntry entry) {\n+            this.revision = entry.getRevision();\n+            this.date = entry.getDate();\n+            this.author = entry.getAuthor();\n+            this.tags = entry.getTags();\n+            this.message = entry.getMessage();\n+            this.files = entry.getFiles();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null) return false;\n+            if (getClass() != obj.getClass()) return false;\n+            final HistoryEntryDTO other = (HistoryEntryDTO) obj;\n+            if (!Objects.equals(this.revision, other.revision)) return false;\n+            if (!Objects.equals(this.date, other.date)) return false;\n+            if (!Objects.equals(this.author, other.author)) return false;\n+            if (!Objects.equals(this.tags, other.tags)) return false;\n+            if (!Objects.equals(this.message, other.message)) return false;\n+            if (!Objects.equals(this.files, other.files)) return false;\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(revision, date, author, tags, message, files);\n+        }\n+    }\n+\n+    static class HistoryDTO implements JSONable {\n+        @JsonProperty\n+        private List<HistoryEntryDTO> entries;", "originalCommit": "1186ff81cffcad83eaaebd79c18966ca58337f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NDAzOA==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381284038", "bodyText": "all can be final", "author": "tulinkry", "createdAt": "2020-02-19T13:19:52Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/HistoryController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.History;\n+import org.opengrok.indexer.history.HistoryEntry;\n+import org.opengrok.indexer.history.HistoryException;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.web.messages.JSONable;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+\n+@Path(\"/history\")\n+public class HistoryController {\n+\n+    private RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private static final int MAX_RESULTS = 1000;\n+\n+    static class HistoryEntryDTO implements JSONable {\n+        @JsonProperty\n+        private String revision;\n+        @JsonProperty\n+        private Date date;\n+        @JsonProperty\n+        private String author;\n+        @JsonProperty\n+        private String tags;\n+        @JsonProperty\n+        private String message;\n+        @JsonProperty\n+        private SortedSet<String> files;", "originalCommit": "1186ff81cffcad83eaaebd79c18966ca58337f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNDA5OA==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381324098", "bodyText": "they would have to be initialized in the plain constructor first I guess.", "author": "vladak", "createdAt": "2020-02-19T14:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNzU3OA==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381327578", "bodyText": "I get it, it's the serialization issue", "author": "tulinkry", "createdAt": "2020-02-19T14:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NDAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NDQ0MA==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381284440", "bodyText": "nb, looks like a task for streaming api", "author": "tulinkry", "createdAt": "2020-02-19T13:20:42Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/HistoryController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.History;\n+import org.opengrok.indexer.history.HistoryEntry;\n+import org.opengrok.indexer.history.HistoryException;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.web.messages.JSONable;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+\n+@Path(\"/history\")\n+public class HistoryController {\n+\n+    private RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private static final int MAX_RESULTS = 1000;\n+\n+    static class HistoryEntryDTO implements JSONable {\n+        @JsonProperty\n+        private String revision;\n+        @JsonProperty\n+        private Date date;\n+        @JsonProperty\n+        private String author;\n+        @JsonProperty\n+        private String tags;\n+        @JsonProperty\n+        private String message;\n+        @JsonProperty\n+        private SortedSet<String> files;\n+\n+        // for testing\n+        HistoryEntryDTO() {\n+        }\n+\n+        HistoryEntryDTO(HistoryEntry entry) {\n+            this.revision = entry.getRevision();\n+            this.date = entry.getDate();\n+            this.author = entry.getAuthor();\n+            this.tags = entry.getTags();\n+            this.message = entry.getMessage();\n+            this.files = entry.getFiles();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null) return false;\n+            if (getClass() != obj.getClass()) return false;\n+            final HistoryEntryDTO other = (HistoryEntryDTO) obj;\n+            if (!Objects.equals(this.revision, other.revision)) return false;\n+            if (!Objects.equals(this.date, other.date)) return false;\n+            if (!Objects.equals(this.author, other.author)) return false;\n+            if (!Objects.equals(this.tags, other.tags)) return false;\n+            if (!Objects.equals(this.message, other.message)) return false;\n+            if (!Objects.equals(this.files, other.files)) return false;\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(revision, date, author, tags, message, files);\n+        }\n+    }\n+\n+    static class HistoryDTO implements JSONable {\n+        @JsonProperty\n+        private List<HistoryEntryDTO> entries;\n+\n+        // for testing\n+        HistoryDTO() {\n+            this.entries = new ArrayList<>();\n+        }\n+\n+        HistoryDTO(List<HistoryEntryDTO> entries) {\n+            this.entries = entries;\n+        }\n+\n+        public boolean equals(Object obj) {\n+            if (obj == null) return false;\n+            if (getClass() != obj.getClass()) return false;\n+            final HistoryDTO other = (HistoryDTO) obj;\n+            return Objects.equals(this.entries, other.entries);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(entries);\n+        }\n+    }\n+\n+    static HistoryDTO getHistoryDTO(List<HistoryEntry> historyEntries) {\n+        List<HistoryEntryDTO> entries = new ArrayList<>();\n+        for (HistoryEntry entry : historyEntries) {\n+            entries.add(new HistoryEntryDTO(entry));\n+        }", "originalCommit": "1186ff81cffcad83eaaebd79c18966ca58337f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NTYwOA==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381285608", "bodyText": "can you assert something more - contanins some string, minimal length?\nit relies on the serialization and when it's broken you wouldn't catch it.", "author": "tulinkry", "createdAt": "2020-02-19T13:22:58Z", "path": "opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.opengrok.web.api.v1.controller;\n+\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.test.JerseyTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.opengrok.indexer.condition.ConditionalRun;\n+import org.opengrok.indexer.condition.ConditionalRunRule;\n+import org.opengrok.indexer.condition.RepositoryInstalled;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.History;\n+import org.opengrok.indexer.history.HistoryEntry;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.history.RepositoryFactory;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.util.TestRepository;\n+import org.opengrok.web.api.v1.controller.HistoryController.HistoryDTO;\n+import org.opengrok.web.api.v1.controller.HistoryController.HistoryEntryDTO;\n+\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.opengrok.web.api.v1.controller.HistoryController.getHistoryDTO;\n+\n+@ConditionalRun(RepositoryInstalled.GitInstalled.class)\n+public class HistoryControllerTest extends JerseyTest {\n+\n+    private RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private TestRepository repository;\n+\n+    @Rule\n+    public ConditionalRunRule rule = new ConditionalRunRule();\n+\n+    @Override\n+    protected Application configure() {\n+        return new ResourceConfig(HistoryController.class);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        repository = new TestRepository();\n+        repository.create(HistoryGuru.class.getResourceAsStream(\"repositories.zip\"));\n+\n+        env.setSourceRoot(repository.getSourceRoot());\n+        env.setDataRoot(repository.getDataRoot());\n+        env.setProjectsEnabled(true);\n+        env.setHistoryEnabled(true);\n+        RepositoryFactory.initializeIgnoredNames(env);\n+\n+        Indexer.getInstance().prepareIndexer(\n+                env,\n+                true, // search for repositories\n+                true, // scan and add projects\n+                false, // don't create dictionary\n+                null, // subFiles - needed when refreshing history partially\n+                null); // repositories - needed when refreshing history partially\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        // This should match Configuration constructor.\n+        env.setProjects(new ConcurrentHashMap<>());\n+        env.setRepositories(new ArrayList<>());\n+        env.getProjectRepositoriesMap().clear();\n+\n+        repository.destroy();\n+    }\n+\n+    @Test\n+    public void testHistoryDTOEquals() {\n+        HistoryEntry historyEntry = new HistoryEntry(\n+                \"1\",\n+                new Date(1245446973L / 60 * 60 * 1000),\n+                \"xyz\",\n+                null,\n+                \"foo\",\n+                true);\n+        HistoryEntryDTO entry1 = new HistoryEntryDTO(historyEntry);\n+        historyEntry.setAuthor(\"abc\");\n+        HistoryEntryDTO entry2 = new HistoryEntryDTO(historyEntry);\n+\n+        assertEquals(entry1, entry1);\n+        assertNotEquals(entry1, entry2);\n+\n+        HistoryDTO history1 = new HistoryDTO(Collections.singletonList(entry1));\n+        HistoryDTO history2 = new HistoryDTO(Collections.singletonList(entry2));\n+        assertEquals(history1, history1);\n+        assertNotEquals(history1, history2);\n+    }\n+\n+    @Test\n+    public void testHistoryGet() throws Exception {\n+        final String path = \"git\";\n+        Response response = target(\"history\")\n+                .queryParam(\"path\", path)\n+                .request()\n+                .get();\n+        HistoryDTO history = response.readEntity(new GenericType<HistoryDTO>() {});\n+        History repoHistory = HistoryGuru.getInstance().getHistory(new File(repository.getSourceRoot(), path));\n+        assertEquals(history, getHistoryDTO(repoHistory.getHistoryEntries()));", "originalCommit": "1186ff81cffcad83eaaebd79c18966ca58337f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNjEwMw==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381336103", "bodyText": "better now ? :-)", "author": "vladak", "createdAt": "2020-02-19T14:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NTYwOA=="}], "type": "inlineReview"}, {"oid": "65243095ede98ca5b6a9a59a486c43f7dd05e5a4", "url": "https://github.com/oracle/opengrok/commit/65243095ede98ca5b6a9a59a486c43f7dd05e5a4", "message": "add detail", "committedDate": "2020-02-19T14:06:21Z", "type": "commit"}, {"oid": "c350012e9dd16b2b03fbe9e89a88ed5f5413abea", "url": "https://github.com/oracle/opengrok/commit/c350012e9dd16b2b03fbe9e89a88ed5f5413abea", "message": "check authorization", "committedDate": "2020-02-19T14:06:32Z", "type": "commit"}, {"oid": "24390669a2419294658fc5e7737a645800eb3633", "url": "https://github.com/oracle/opengrok/commit/24390669a2419294658fc5e7737a645800eb3633", "message": "update localhost filter", "committedDate": "2020-02-19T14:14:00Z", "type": "commit"}, {"oid": "a2239c1fdd05cb4ff725d3533ea5e7ad0af84f74", "url": "https://github.com/oracle/opengrok/commit/a2239c1fdd05cb4ff725d3533ea5e7ad0af84f74", "message": "fix type", "committedDate": "2020-02-19T14:14:33Z", "type": "commit"}, {"oid": "82810e12d80fe0dc0b09dd8722de17134e99eb8a", "url": "https://github.com/oracle/opengrok/commit/82810e12d80fe0dc0b09dd8722de17134e99eb8a", "message": "final", "committedDate": "2020-02-19T14:26:20Z", "type": "commit"}, {"oid": "900c628f8fa5c91eb41501c1d8a57e8d4632dae5", "url": "https://github.com/oracle/opengrok/commit/900c628f8fa5c91eb41501c1d8a57e8d4632dae5", "message": "better test coverage", "committedDate": "2020-02-19T14:44:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzOTE1Mg==", "url": "https://github.com/oracle/opengrok/pull/3045#discussion_r381339152", "bodyText": "oh yeah, thank you", "author": "tulinkry", "createdAt": "2020-02-19T14:49:23Z", "path": "opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/HistoryControllerTest.java", "diffHunk": "@@ -105,12 +105,19 @@ public void testHistoryDTOEquals() {\n     @Test\n     public void testHistoryGet() throws Exception {\n         final String path = \"git\";\n+        int size = 5;\n+        int start = 2;\n         Response response = target(\"history\")\n                 .queryParam(\"path\", path)\n+                .queryParam(\"max\", size)\n+                .queryParam(\"start\", start)\n                 .request()\n                 .get();\n         HistoryDTO history = response.readEntity(new GenericType<HistoryDTO>() {});\n+        assertEquals(size, history.getEntries().size());\n+        assertEquals(\"Kry\u0161tof Tulinger <krystof.tulinger@oracle.com>\", history.getEntries().get(0).getAuthor());", "originalCommit": "900c628f8fa5c91eb41501c1d8a57e8d4632dae5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1da953e5f6b8830a80d4855f279895da7e25cfd7", "url": "https://github.com/oracle/opengrok/commit/1da953e5f6b8830a80d4855f279895da7e25cfd7", "message": "fix style", "committedDate": "2020-02-19T16:10:45Z", "type": "commit"}, {"oid": "c2bf3711bd210d4a3c6ee39fe712a97cfa6676b2", "url": "https://github.com/oracle/opengrok/commit/c2bf3711bd210d4a3c6ee39fe712a97cfa6676b2", "message": "remove HistoryDTO class", "committedDate": "2020-02-20T09:17:43Z", "type": "commit"}, {"oid": "9f392aed34d7900110ba895561665f4119d7072e", "url": "https://github.com/oracle/opengrok/commit/9f392aed34d7900110ba895561665f4119d7072e", "message": "Revert \"remove HistoryDTO class\"\n\nThis reverts commit c2bf3711bd210d4a3c6ee39fe712a97cfa6676b2.", "committedDate": "2020-02-20T09:33:21Z", "type": "commit"}, {"oid": "5bef5a27e65737ccf06b0e1b559a1bbf3d91e926", "url": "https://github.com/oracle/opengrok/commit/5bef5a27e65737ccf06b0e1b559a1bbf3d91e926", "message": "return of HistoryDTO, augmented with counters", "committedDate": "2020-02-20T09:42:21Z", "type": "commit"}, {"oid": "73aa60ea0b2fc216983cad6f7a28b111e5112738", "url": "https://github.com/oracle/opengrok/commit/73aa60ea0b2fc216983cad6f7a28b111e5112738", "message": "fix style", "committedDate": "2020-02-20T10:19:04Z", "type": "commit"}, {"oid": "f60b956595352320da2144f305011f595a65284d", "url": "https://github.com/oracle/opengrok/commit/f60b956595352320da2144f305011f595a65284d", "message": "fix indentation", "committedDate": "2020-02-20T11:09:26Z", "type": "commit"}, {"oid": "734ff4e210198be3a97616c9ec1745d286a2385b", "url": "https://github.com/oracle/opengrok/commit/734ff4e210198be3a97616c9ec1745d286a2385b", "message": "print message", "committedDate": "2020-02-20T11:10:29Z", "type": "commit"}, {"oid": "801763a9bfde7d51dc3042892ba1c2ec55322f1d", "url": "https://github.com/oracle/opengrok/commit/801763a9bfde7d51dc3042892ba1c2ec55322f1d", "message": "add parameters", "committedDate": "2020-02-20T12:20:14Z", "type": "commit"}]}