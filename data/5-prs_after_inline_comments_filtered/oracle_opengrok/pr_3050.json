{"pr_number": 3050, "pr_title": "file content/genre API", "pr_createdAt": "2020-02-24T11:17:48Z", "pr_url": "https://github.com/oracle/opengrok/pull/3050", "timeline": [{"oid": "e0938fe117877645d48bcb6fd4a35867dda8b99d", "url": "https://github.com/oracle/opengrok/commit/e0938fe117877645d48bcb6fd4a35867dda8b99d", "message": "refactor path authnz filter to utility class", "committedDate": "2020-02-20T16:26:27Z", "type": "commit"}, {"oid": "6afb0a92d8b7b8f47cdbf8ab1f146148813a57d8", "url": "https://github.com/oracle/opengrok/commit/6afb0a92d8b7b8f47cdbf8ab1f146148813a57d8", "message": "first stab at file content API endpoint\n\n- no line number support\n\nfixes #3048", "committedDate": "2020-02-24T11:12:29Z", "type": "commit"}, {"oid": "2155b84338cb2be9f4a47ed4d9d0d0a630e3e966", "url": "https://github.com/oracle/opengrok/commit/2155b84338cb2be9f4a47ed4d9d0d0a630e3e966", "message": "TODO: filter", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "74a3f986d30b78ac4fb05ce5e48ee84608452402", "url": "https://github.com/oracle/opengrok/commit/74a3f986d30b78ac4fb05ce5e48ee84608452402", "message": "add line numbers\n\n- crude version using class variable", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "ecd22ecd5008bc058e37d4159d345e49ad2e9cbe", "url": "https://github.com/oracle/opengrok/commit/ecd22ecd5008bc058e37d4159d345e49ad2e9cbe", "message": "return content for text files only", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "6990c0e710f469cd3e7c55ec8a440450126a3c7d", "url": "https://github.com/oracle/opengrok/commit/6990c0e710f469cd3e7c55ec8a440450126a3c7d", "message": "- refactor path authorization to PathAuthorizationFilter\n- add endpoint for genre\n- rename FileContentController to FileController", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "c8d0acc67f1b064a6995b95cd7e24050be6153f1", "url": "https://github.com/oracle/opengrok/commit/c8d0acc67f1b064a6995b95cd7e24050be6153f1", "message": "enforce path presence", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "feaa479172b2539e99fe1a3c19b7a00e1a2ed8bb", "url": "https://github.com/oracle/opengrok/commit/feaa479172b2539e99fe1a3c19b7a00e1a2ed8bb", "message": "add tests, convert to traditional loop", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "fdbc7250072fd02dbd2fb596996867ea59f17b5c", "url": "https://github.com/oracle/opengrok/commit/fdbc7250072fd02dbd2fb596996867ea59f17b5c", "message": "remove not needed imports", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "1912189b7d811769e704e1231eb6bb914179c2bd", "url": "https://github.com/oracle/opengrok/commit/1912189b7d811769e704e1231eb6bb914179c2bd", "message": "use PATH_PARAM in log message", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "09214fafdffb12cc226e243fdb108132c99f36dc", "url": "https://github.com/oracle/opengrok/commit/09214fafdffb12cc226e243fdb108132c99f36dc", "message": "use T field to ensure plaintext", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "a2243a325f7b157a3b8a1c37d82e4bf98c9cb4d8", "url": "https://github.com/oracle/opengrok/commit/a2243a325f7b157a3b8a1c37d82e4bf98c9cb4d8", "message": "fix javadoc", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "738c38e6453a0daca5a41d26e8f2bc7b3fbea8de", "url": "https://github.com/oracle/opengrok/commit/738c38e6453a0daca5a41d26e8f2bc7b3fbea8de", "message": "fix test", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "9d5b4cdb60c7b4fcd2d92c9ab4babec4dde22670", "url": "https://github.com/oracle/opengrok/commit/9d5b4cdb60c7b4fcd2d92c9ab4babec4dde22670", "message": "remove unused import", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "cda71409400f33762657d1708b8256a9c3e37f2f", "url": "https://github.com/oracle/opengrok/commit/cda71409400f33762657d1708b8256a9c3e37f2f", "message": "use partial indexing", "committedDate": "2020-02-24T11:13:19Z", "type": "commit"}, {"oid": "a72b9bf72bd7c5f296ed6f859f14b06c11550696", "url": "https://github.com/oracle/opengrok/commit/a72b9bf72bd7c5f296ed6f859f14b06c11550696", "message": "add detail", "committedDate": "2020-02-24T11:19:14Z", "type": "commit"}, {"oid": "1382ace0921270232a54f02e077923c52e9d1b92", "url": "https://github.com/oracle/opengrok/commit/1382ace0921270232a54f02e077923c52e9d1b92", "message": "fix style", "committedDate": "2020-02-24T12:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTU2NA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383565564", "bodyText": "Recommend transposing to avoid possible NPE:\n!AbstractAnalyzer.Genre.PLAIN.typeName().equals(fileType)", "author": "idodeclare", "createdAt": "2020-02-24T23:00:19Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NjE1Mg==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383566152", "bodyText": "Line 121 reads \"Cannot get document for file\"", "author": "idodeclare", "createdAt": "2020-02-24T23:01:44Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);\n+        }\n+        return linesDTO;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/genre\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String getGenre(@Context HttpServletRequest request,\n+                           @Context HttpServletResponse response,\n+                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot find document for file\");", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NzAwMg==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383567002", "bodyText": "Maybe copy comment from line 115 that was helpful there?", "author": "idodeclare", "createdAt": "2020-02-24T23:03:56Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);\n+        }\n+        return linesDTO;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/genre\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String getGenre(@Context HttpServletRequest request,\n+                           @Context HttpServletResponse response,\n+                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            return null;", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NzU3NQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383567575", "bodyText": "Possibly AbstractAnalyzer.Genre.get(doc.get(QueryBuilder.T)) could be null, leading to NPE on toString()", "author": "idodeclare", "createdAt": "2020-02-24T23:05:28Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);\n+        }\n+        return linesDTO;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/genre\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String getGenre(@Context HttpServletRequest request,\n+                           @Context HttpServletResponse response,\n+                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot find document for file\");\n+            return null;\n+        }\n+\n+        return AbstractAnalyzer.Genre.get(doc.get(QueryBuilder.T)).toString();", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2OTg2Ng==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383569866", "bodyText": "Comment above seems inapt with this refactoring", "author": "idodeclare", "createdAt": "2020-02-24T23:11:59Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1588,6 +1611,7 @@ public static Definitions getDefinitions(File file)\n             return null;", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDE0MQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383570141", "bodyText": "Maybe move the return as the last statement of the try, so this declaration and assignment can also be moved together?", "author": "idodeclare", "createdAt": "2020-02-24T23:12:46Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1588,6 +1611,7 @@ public static Definitions getDefinitions(File file)\n             return null;\n         }\n \n+        Document doc;", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDI5Nw==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383570297", "bodyText": "Comment seems inapt with this refactoring", "author": "idodeclare", "createdAt": "2020-02-24T23:13:15Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1596,22 +1620,18 @@ public static Definitions getDefinitions(File file)\n                 // No hits, no definitions...\n                 return null;\n             }\n-            Document doc = searcher.doc(top.scoreDocs[0].doc);\n+            doc = searcher.doc(top.scoreDocs[0].doc);\n             String foundPath = doc.get(QueryBuilder.PATH);\n \n             // Only use the definitions if we found an exact match.", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDMzMg==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383570332", "bodyText": "Comment seems inapt with this refactoring", "author": "idodeclare", "createdAt": "2020-02-24T23:13:23Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1596,22 +1620,18 @@ public static Definitions getDefinitions(File file)\n                 // No hits, no definitions...", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MTM2MQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383571361", "bodyText": "Any benefit to defining this here when it's only used by /content and not by /genre?", "author": "idodeclare", "createdAt": "2020-02-24T23:16:16Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjQzNg==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383572436", "bodyText": "Any benefit to testing conditions that result in 400s or 404s?", "author": "idodeclare", "createdAt": "2020-02-24T23:19:15Z", "path": "opengrok-web/src/test/java/org/opengrok/web/api/v1/controller/FileControllerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.opengrok.web.api.v1.controller;\n+\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.test.JerseyTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.history.HistoryGuru;\n+import org.opengrok.indexer.history.RepositoryFactory;\n+import org.opengrok.indexer.index.Indexer;\n+import org.opengrok.indexer.util.TestRepository;\n+import org.opengrok.web.api.v1.controller.FileController.LineDTO;\n+\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.GenericType;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class FileControllerTest extends JerseyTest {", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNjMxNQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383936315", "bodyText": "The problem is that Grizzly used by JerseyTest does not set neither request or response.", "author": "vladak", "createdAt": "2020-02-25T15:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383648611", "bodyText": "Not sure the utility of a web method that just splits a file using standard Java readline() and returns it encoded in JSON. Why not just return the raw content more efficiently?", "author": "idodeclare", "createdAt": "2020-02-25T04:06:53Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNzMzMg==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383937332", "bodyText": "I was wondering about this myself. This was originally suggested in #3042 by @jbaek7023 , perhaps there is some value in that for him.", "author": "vladak", "createdAt": "2020-02-25T15:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzOTk5MA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383939990", "bodyText": "I think @tulinkry's suggestion to use accept headers makes sense.", "author": "vladak", "createdAt": "2020-02-25T15:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMDQ1Mg==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r384000452", "bodyText": "If it\u2019s returning a split meant to align with OpenGrok\u2019s analysis, then it should be using SourceSpllitter with any necessary project-configured ExpandTabsReader via a ReaderWrapper. (There is a TODO to comprehensively accommodate the various line/paragraph/page white space separators. E.g. see Erlang.)\nOtherwise I recommend to defer the JSON format and let the client handle the raw source text on its own.\nIn this patch it\u2019s only readline(), and that is not what OpenGrok uses. Also readline() does not preserve end of line space, so the sum of the lines will not equal the original document, and the client will have no way to know original line endings. (With some languages like Erlang they could be varied in the original.)", "author": "idodeclare", "createdAt": "2020-02-25T16:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyNjM4Ng==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r384126386", "bodyText": "True, JSON removed.", "author": "vladak", "createdAt": "2020-02-25T21:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzOTgzOA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r384339838", "bodyText": "and the client will have no way to know original line endings\n\nNot true if implemented with content negotiation for both raw format and json format. When the client cares, he can choose the raw format. When he does not, he just likes to have a list of lines, he chooses json with split lines.", "author": "tulinkry", "createdAt": "2020-02-26T08:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0ODYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NTI4OQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383695289", "bodyText": "not acceptable is related to content negotiation headers, this is more likely a bad request", "author": "tulinkry", "createdAt": "2020-02-25T07:17:48Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NjU1MQ==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383696551", "bodyText": "you could employ the accept header here and offer the file\n\nas json when application/json\nas plain text when text/plain\nas binary data when application/octet-stream", "author": "tulinkry", "createdAt": "2020-02-25T07:21:47Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MzUyOA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383983528", "bodyText": "Good idea. I did not want to access the request for the header (since it is null in JerseyTest) so there is a bit of code duplication.", "author": "vladak", "createdAt": "2020-02-25T16:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NjU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NzYwMA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383697600", "bodyText": "this can't happen given you have the filter always before this controller, right?", "author": "tulinkry", "createdAt": "2020-02-25T07:24:55Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzODg1NA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383938854", "bodyText": "It seems during tests the filter is not used, possibly because the context is not set by Grizzly.", "author": "vladak", "createdAt": "2020-02-25T15:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NzYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5ODQ4OA==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r383698488", "bodyText": "I see creating one unnecessary array list lines, or am I missing something?", "author": "tulinkry", "createdAt": "2020-02-25T07:27:41Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private ArrayList<String> lines = new ArrayList<>();\n+\n+    static class LineDTO {\n+        @JsonProperty\n+        private String line;\n+        @JsonProperty\n+        private int number;\n+\n+        // for testing\n+        LineDTO() {\n+        }\n+\n+        LineDTO(String line, int num) {\n+            this.line = line;\n+            this.number = num;\n+        }\n+\n+        public String getLine() {\n+            return this.line;\n+        }\n+\n+        public int getNumber() {\n+            return this.number;\n+        }\n+    }\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Object getContent(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!fileType.equals(AbstractAnalyzer.Genre.PLAIN.typeName())) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        }\n+\n+        int count = 1;\n+        List<LineDTO> linesDTO = new ArrayList<>();\n+        for (String line: lines) {\n+            LineDTO l = new LineDTO(line, count++);\n+            linesDTO.add(l);", "originalCommit": "1382ace0921270232a54f02e077923c52e9d1b92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa2ee868f203a21e6aa50fc72f2312aa8fbb15ae", "url": "https://github.com/oracle/opengrok/commit/fa2ee868f203a21e6aa50fc72f2312aa8fbb15ae", "message": "address review comments", "committedDate": "2020-02-25T15:12:38Z", "type": "commit"}, {"oid": "ef3858ff1ed8da946cf4ad23c2e9cd047e9a8c1c", "url": "https://github.com/oracle/opengrok/commit/ef3858ff1ed8da946cf4ad23c2e9cd047e9a8c1c", "message": "add more types", "committedDate": "2020-02-25T16:13:56Z", "type": "commit"}, {"oid": "f41f611c79482c4c48cef499b6e264f2c4de7762", "url": "https://github.com/oracle/opengrok/commit/f41f611c79482c4c48cef499b6e264f2c4de7762", "message": "remove unused import", "committedDate": "2020-02-25T18:32:31Z", "type": "commit"}, {"oid": "3ec34b6691c183571dc5f9749abe8783a56ebf72", "url": "https://github.com/oracle/opengrok/commit/3ec34b6691c183571dc5f9749abe8783a56ebf72", "message": "remove JSON", "committedDate": "2020-02-25T21:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MjM4Ng==", "url": "https://github.com/oracle/opengrok/pull/3050#discussion_r384342386", "bodyText": "when this throws FileNotFoundException, it should possibly answer with 404", "author": "tulinkry", "createdAt": "2020-02-26T08:43:24Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/FileController.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ */\n+\n+package org.opengrok.web.api.v1.controller;\n+\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.opengrok.indexer.analysis.AbstractAnalyzer;\n+import org.opengrok.indexer.configuration.RuntimeEnvironment;\n+import org.opengrok.indexer.search.QueryBuilder;\n+import org.opengrok.web.api.v1.filter.CorsEnable;\n+import org.opengrok.web.api.v1.filter.PathAuthorized;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.StreamingOutput;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import static org.opengrok.indexer.index.IndexDatabase.getDocument;\n+\n+@Path(FileController.PATH)\n+public class FileController {\n+\n+    public static final String PATH = \"/file\";\n+\n+    private static final RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n+\n+    private static File getFile(String path, HttpServletResponse response) throws IOException {\n+        if (path == null) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Missing path parameter\");\n+            }\n+            return null;\n+        }\n+\n+        File file = new File(env.getSourceRootFile(), path);\n+        if (!file.isFile()) {\n+            if (response != null) {\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n+            }\n+            return null;\n+        }\n+\n+        return file;\n+    }\n+\n+    private StreamingOutput transfer(File file) throws FileNotFoundException {\n+        InputStream in = new FileInputStream(file);\n+        return out -> {\n+            byte[] buffer = new byte[1024];\n+            int len = in.read(buffer);\n+            while (len != -1) {\n+                out.write(buffer, 0, len);\n+                len = in.read(buffer);\n+            }\n+        };\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public StreamingOutput getContentPlain(@Context HttpServletRequest request,\n+                             @Context HttpServletResponse response,\n+                             @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        String fileType = doc.get(QueryBuilder.T);\n+        if (!AbstractAnalyzer.Genre.PLAIN.typeName().equals(fileType)) {\n+            response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE, \"Not a text file\");\n+            return null;\n+        }\n+\n+        return transfer(file);\n+    }\n+\n+    @GET\n+    @CorsEnable\n+    @PathAuthorized\n+    @Path(\"/content\")\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public StreamingOutput getContentOctets(@Context HttpServletRequest request,\n+                                           @Context HttpServletResponse response,\n+                                           @QueryParam(\"path\") final String path) throws IOException, ParseException {\n+\n+        File file = getFile(path, response);\n+        if (file == null) {\n+            // error already set in the response\n+            return null;\n+        }\n+\n+        Document doc;\n+        if ((doc = getDocument(file)) == null) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"Cannot get document for file\");\n+            return null;\n+        }\n+\n+        return transfer(file);", "originalCommit": "3ec34b6691c183571dc5f9749abe8783a56ebf72", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5a474be8ba8d81d431cd99a1f74c476602fbfac", "url": "https://github.com/oracle/opengrok/commit/f5a474be8ba8d81d431cd99a1f74c476602fbfac", "message": "catch FileNotFoundException", "committedDate": "2020-02-26T13:48:20Z", "type": "commit"}]}