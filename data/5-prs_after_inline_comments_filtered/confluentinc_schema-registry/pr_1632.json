{"pr_number": 1632, "pr_title": "Add Mode.READONLY_OVERRIDE and global mode", "pr_createdAt": "2020-09-28T20:33:53Z", "pr_url": "https://github.com/confluentinc/schema-registry/pull/1632", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNTkwNA==", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498605904", "bodyText": "Let's create a method isReadOnlyMode(String subject)", "author": "rayokota", "createdAt": "2020-10-02T03:34:21Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -525,7 +525,8 @@ public int register(String subject,\n   private void checkRegisterMode(\n       String subject, Schema schema\n   ) throws OperationNotPermittedException, SchemaRegistryStoreException {\n-    if (getModeInScope(subject) == Mode.READONLY) {\n+    if (getModeInScope(subject) == Mode.READONLY", "originalCommit": "343c070b8208d8bb4ad300a590c01cedb2ca0486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjE5MQ==", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606191", "bodyText": "I think this can be replaced with Mode globalMode = lookupCache.mode(null, false, defaultMode)", "author": "rayokota", "createdAt": "2020-10-02T03:36:14Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;", "originalCommit": "343c070b8208d8bb4ad300a590c01cedb2ca0486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjMwOA==", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606308", "bodyText": "I think this can be replaced with Mode globalMode = lookupCache.mode(null, false, defaultMode)", "author": "rayokota", "createdAt": "2020-10-02T03:36:44Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }\n     } catch (StoreException e) {\n       throw new SchemaRegistryStoreException(\"Failed to write new config value to the store\", e);\n     }\n   }\n \n   private Mode getModeInScope(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, true, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;", "originalCommit": "343c070b8208d8bb4ad300a590c01cedb2ca0486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjQzNw==", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606437", "bodyText": "I think can be replaced with return subjectMode", "author": "rayokota", "createdAt": "2020-10-02T03:37:24Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }", "originalCommit": "343c070b8208d8bb4ad300a590c01cedb2ca0486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjQ1Mw==", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606453", "bodyText": "I think can be replaced with return subjectMode", "author": "rayokota", "createdAt": "2020-10-02T03:37:31Z", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }\n     } catch (StoreException e) {\n       throw new SchemaRegistryStoreException(\"Failed to write new config value to the store\", e);\n     }\n   }\n \n   private Mode getModeInScope(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, true, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }", "originalCommit": "343c070b8208d8bb4ad300a590c01cedb2ca0486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "58bc14eb6074724d7d0aa7256efc4d1cd7fe0187", "url": "https://github.com/confluentinc/schema-registry/commit/58bc14eb6074724d7d0aa7256efc4d1cd7fe0187", "message": "add Mode.READONLY_OVERRIDE and global mode", "committedDate": "2020-10-02T19:02:12Z", "type": "commit"}, {"oid": "62eb4b2c8d8b4ff3691bb1b55261ea44fe0acb97", "url": "https://github.com/confluentinc/schema-registry/commit/62eb4b2c8d8b4ff3691bb1b55261ea44fe0acb97", "message": "polishing code", "committedDate": "2020-10-02T19:02:12Z", "type": "commit"}, {"oid": "a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "url": "https://github.com/confluentinc/schema-registry/commit/a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "message": "add unit test", "committedDate": "2020-10-02T19:02:12Z", "type": "commit"}, {"oid": "a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "url": "https://github.com/confluentinc/schema-registry/commit/a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "message": "add unit test", "committedDate": "2020-10-02T19:02:12Z", "type": "forcePushed"}]}