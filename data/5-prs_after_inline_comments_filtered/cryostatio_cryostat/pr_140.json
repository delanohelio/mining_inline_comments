{"pr_number": 140, "pr_title": "Implement remote target VM event template settings", "pr_createdAt": "2020-03-18T17:24:08Z", "pr_url": "https://github.com/cryostatio/cryostat/pull/140", "timeline": [{"oid": "511b195be5f638ac38aa7867b3f8af3b04eac807", "url": "https://github.com/cryostatio/cryostat/commit/511b195be5f638ac38aa7867b3f8af3b04eac807", "message": "Implement remote target VM event template settings\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-18T17:28:50Z", "type": "forcePushed"}, {"oid": "2697ce56b0dede40c8d4bf3b4e05bfa218612ff8", "url": "https://github.com/cryostatio/cryostat/commit/2697ce56b0dede40c8d4bf3b4e05bfa218612ff8", "message": "Implement remote target VM event template settings\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-18T17:56:46Z", "type": "forcePushed"}, {"oid": "d8493c1416a467cb4faf206c07a272906ca86143", "url": "https://github.com/cryostatio/cryostat/commit/d8493c1416a467cb4faf206c07a272906ca86143", "message": "Implement remote target VM event template settings\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-18T17:58:38Z", "type": "forcePushed"}, {"oid": "a3e4cbde0a04fe27b02f6243cac1800d44cb98ee", "url": "https://github.com/cryostatio/cryostat/commit/a3e4cbde0a04fe27b02f6243cac1800d44cb98ee", "message": "Implement remote target VM event template settings\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-18T18:29:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2ODM3Mw==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r394568373", "bodyText": "@jiekang here's a good RFE for JMC - the JFCXMLValidator currently imports this UIPlugin class from another artifact, which is a subclass of an Eclipse AbstractUIPlugin class. So those UIPlugin classes are actually somehow related to the rendered application components and widgets, but clearly the XML Validator and the rest of the XML processing stuff I'm using here are not. And yet, the JMC code pathway for processing XML calls into UI components simply for the purpose of reusing their static logger instance...\nA fix for this is probably going to take a while to make it into a snapshot release version so I'll have to rely on this hack for a while, but if any portion of this XML stuff can be cleaned up and moved into jmc-core, then it would be really nice and useful for us to use here in container-jfr(-core).", "author": "andrewazores", "createdAt": "2020-03-18T18:49:50Z", "path": "src/main/java/org/openjdk/jmc/ui/UIPlugin.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.openjdk.jmc.ui;\n+\n+import java.util.logging.Logger;\n+\n+/**\n+ * TODO move this stub into -core This is only used for stubbing out a Logger instance used by JMC's\n+ * JFCXMLValidator !!! This is a major classloading hackaround !!!\n+ */", "originalCommit": "a3e4cbde0a04fe27b02f6243cac1800d44cb98ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MjUxNQ==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r394572515", "bodyText": "Uh wow okay, that's quite a curiosity. This sounds like something warranting an issue opened in JMC Jira. If you agree I can write one up.", "author": "jiekang", "createdAt": "2020-03-18T18:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2ODM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NjY2NQ==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r394586665", "bodyText": "Yea, I would agree with that. The XML stuff does currently live within a ui maven module, although within a model package, so that part makes sense. But IMO it's definitely wrong for a model to be using a view or controller's logger.", "author": "andrewazores", "createdAt": "2020-03-18T19:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2ODM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NzU3MA==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r394587570", "bodyText": "And it's even worse than that really, because it isn't even the specific parent controller instance's logger or something - it's just a general static one on a class named UIPlugin...", "author": "andrewazores", "createdAt": "2020-03-18T19:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2ODM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMzEzMw==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r394603133", "bodyText": "I think I can work around this in a slightly less ugly way by using reflection to make some constructors visible and then not use the JFCXMLValidator at all. This would let us use JMC's XML parsing, which is nice, but JFC validation would be great to retain - especially when I get to #143 and users can upload their own .jfc files for defining new templates.\nMaybe I can do those reflection tricks plus implement a JFC validator based on the JMC one that doesn't call out to a UIPlugin logger and pass that in rather than allowing the JMC classes to default to their own validator.", "author": "andrewazores", "createdAt": "2020-03-18T19:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2ODM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTM3Mg==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r394611372", "bodyText": "Nevermind - the IXMLValidator interface I'd need to implement is package-private, so making my own implementation doesn't really work. And the JFCXMLValidator class implementation is final. Well then.", "author": "andrewazores", "createdAt": "2020-03-18T20:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2ODM3Mw=="}], "type": "inlineReview"}, {"oid": "b90d1bb82331dddd1d31d94cb5f95b2cf2d130e4", "url": "https://github.com/cryostatio/cryostat/commit/b90d1bb82331dddd1d31d94cb5f95b2cf2d130e4", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording template\nnames and AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template:FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-19T14:41:57Z", "type": "forcePushed"}, {"oid": "140d37555f91edb35ba1ea72ac1bfc53df035054", "url": "https://github.com/cryostatio/cryostat/commit/140d37555f91edb35ba1ea72ac1bfc53df035054", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording template\nnames and AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template:FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-19T14:56:14Z", "type": "forcePushed"}, {"oid": "20d74f43ba5e3c821711a05ff5dc6f8d77b281b0", "url": "https://github.com/cryostatio/cryostat/commit/20d74f43ba5e3c821711a05ff5dc6f8d77b281b0", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording template\nnames and AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template:FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-19T16:46:05Z", "type": "forcePushed"}, {"oid": "d6661c67b4eb0d09463807095aeb06340b1d05cb", "url": "https://github.com/cryostatio/cryostat/commit/d6661c67b4eb0d09463807095aeb06340b1d05cb", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording template\nnames and AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template:FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-20T18:37:29Z", "type": "forcePushed"}, {"oid": "a2050d14132edc2f02c1b13bfd110aeb9b9bc67d", "url": "https://github.com/cryostatio/cryostat/commit/a2050d14132edc2f02c1b13bfd110aeb9b9bc67d", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording template\nnames and AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template:FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-25T17:25:55Z", "type": "forcePushed"}, {"oid": "4fcf62ee4f327268af9ea5199a621937d7c8956a", "url": "https://github.com/cryostatio/cryostat/commit/4fcf62ee4f327268af9ea5199a621937d7c8956a", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording templates\nand AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template:FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-25T17:26:06Z", "type": "forcePushed"}, {"oid": "10afb1986a6f96716630d5c2f22c116f9f71cebd", "url": "https://github.com/cryostatio/cryostat/commit/10afb1986a6f96716630d5c2f22c116f9f71cebd", "message": "Document event template specifier", "committedDate": "2020-03-26T20:57:05Z", "type": "forcePushed"}, {"oid": "d0feeec7db3823ed1ed6ef1c7718d03c40def65e", "url": "https://github.com/cryostatio/cryostat/commit/d0feeec7db3823ed1ed6ef1c7718d03c40def65e", "message": "Document MAVEN_OPTS for non-containerized smoketest", "committedDate": "2020-03-26T21:02:43Z", "type": "commit"}, {"oid": "3d1221b7f4266723c1c4e4a178b03977e5ea1847", "url": "https://github.com/cryostatio/cryostat/commit/3d1221b7f4266723c1c4e4a178b03977e5ea1847", "message": "Implement event template handling\n\nlist-recording-templates command lists available recording templates\nand AbstractRecordingCommands (start-recording, dump) gain the\nability to specify event templates via arguments formatted as\n\"template=FooTemplate\"\n\nRelated to #141\nFixes #142", "committedDate": "2020-03-26T21:02:43Z", "type": "commit"}, {"oid": "f9da1061643e1acf8384c27530e42ed1053ff781", "url": "https://github.com/cryostatio/cryostat/commit/f9da1061643e1acf8384c27530e42ed1053ff781", "message": "Document event template specifier", "committedDate": "2020-03-26T21:02:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5ODQ1MA==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r398898450", "bodyText": "Heh, I'd replace may be expensive with \"will be very expensive\" :P", "author": "jiekang", "createdAt": "2020-03-26T21:17:37Z", "path": "src/main/java/com/redhat/rhjmc/containerjfr/commands/internal/AbstractRecordingCommand.java", "diffHunk": "@@ -7,11 +7,18 @@\n import org.openjdk.jmc.flightrecorder.configuration.events.EventOptionID;\n import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n \n+import com.redhat.rhjmc.containerjfr.core.templates.Template;\n import com.redhat.rhjmc.containerjfr.core.tui.ClientWriter;\n \n abstract class AbstractRecordingCommand extends AbstractConnectedCommand {\n \n-    private static final Pattern ALL_EVENTS_PATTERN = Pattern.compile(\"^ALL$\", Pattern.MULTILINE);\n+    static final Template ALL_EVENTS_TEMPLATE =\n+            new Template(\n+                    \"ALL\",\n+                    \"Enable all available events in the target JVM, with default option values. This may be expensive and is intended primarily for testing ContainerJFR's own capabilities.\",", "originalCommit": "f9da1061643e1acf8384c27530e42ed1053ff781", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ea234b7f402cd9c55c579899ca6950c6f99be30", "url": "https://github.com/cryostatio/cryostat/commit/5ea234b7f402cd9c55c579899ca6950c6f99be30", "message": "Document event template specifier", "committedDate": "2020-03-26T21:19:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjUxMg==", "url": "https://github.com/cryostatio/cryostat/pull/140#discussion_r399346512", "bodyText": "Does this string need changing also?", "author": "jiekang", "createdAt": "2020-03-27T15:26:14Z", "path": "src/test/java/com/redhat/rhjmc/containerjfr/commands/internal/ListEventTemplatesCommandTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.redhat.rhjmc.containerjfr.commands.internal;\n+\n+import java.util.List;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.redhat.rhjmc.containerjfr.commands.SerializableCommand.ListOutput;\n+import com.redhat.rhjmc.containerjfr.commands.SerializableCommand.Output;\n+import com.redhat.rhjmc.containerjfr.core.net.JFRConnection;\n+import com.redhat.rhjmc.containerjfr.core.templates.Template;\n+import com.redhat.rhjmc.containerjfr.core.templates.TemplateService;\n+import com.redhat.rhjmc.containerjfr.core.tui.ClientWriter;\n+\n+@ExtendWith(MockitoExtension.class)\n+class ListEventTemplatesCommandTest {\n+\n+    ListEventTemplatesCommand cmd;\n+    @Mock JFRConnection connection;\n+    @Mock TemplateService templateSvc;\n+    @Mock ClientWriter cw;\n+\n+    @BeforeEach\n+    void setup() {\n+        cmd = new ListEventTemplatesCommand(cw);\n+    }\n+\n+    @Test\n+    void shouldBeNamedListEventTemplates() {\n+        MatcherAssert.assertThat(cmd.getName(), Matchers.equalTo(\"list-event-templates\"));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {1, 2, 3})\n+    void shouldNotValidateWrongArgc(int n) {\n+        Assertions.assertFalse(cmd.validate(new String[n]));\n+        Mockito.verify(cw).println(\"No arguments expected\");\n+    }\n+\n+    @Test\n+    void shouldValidateNoArgs() {\n+        Assertions.assertTrue(cmd.validate(new String[0]));\n+        Mockito.verifyZeroInteractions(cw);\n+    }\n+\n+    @Test\n+    void executeShouldPrintListOfTemplateNames() throws Exception {\n+        Mockito.when(connection.getTemplateService()).thenReturn(templateSvc);\n+        Template foo = new Template(\"Foo\", \"a foo-ing template\", \"Foo Inc.\");\n+        Template bar = new Template(\"Bar\", \"a bar-ing template\", \"Bar Inc.\");\n+        Template baz = new Template(\"Baz\", \"a baz-ing template\", \"Baz Inc.\");\n+        Mockito.when(templateSvc.getTemplates()).thenReturn(List.of(foo, bar, baz));\n+\n+        cmd.connectionChanged(connection);\n+\n+        Mockito.verifyZeroInteractions(cw);\n+        cmd.execute(new String[0]);\n+        InOrder inOrder = Mockito.inOrder(cw);\n+        inOrder.verify(cw).println(\"Available recording templates:\");\n+        inOrder.verify(cw).println(\"\\t[Foo Inc.]\\tFoo:\\ta foo-ing template\");\n+        inOrder.verify(cw).println(\"\\t[Bar Inc.]\\tBar:\\ta bar-ing template\");\n+        inOrder.verify(cw).println(\"\\t[Baz Inc.]\\tBaz:\\ta baz-ing template\");\n+        inOrder.verify(cw)\n+                .println(\n+                        \"\\t[ContainerJFR]\\tALL:\\tEnable all available events in the target JVM, with default option values. This may be expensive and is intended primarily for testing ContainerJFR's own capabilities.\");", "originalCommit": "5ea234b7f402cd9c55c579899ca6950c6f99be30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8e46c0ec11146d1f3c262a032264563c8a5089dd", "url": "https://github.com/cryostatio/cryostat/commit/8e46c0ec11146d1f3c262a032264563c8a5089dd", "message": "ALL event string re-implemented as pseudo-template", "committedDate": "2020-03-27T16:21:30Z", "type": "commit"}, {"oid": "9dcf473a52edf16d1f4395420c11032c269150ed", "url": "https://github.com/cryostatio/cryostat/commit/9dcf473a52edf16d1f4395420c11032c269150ed", "message": "Document event template specifier", "committedDate": "2020-03-27T16:21:30Z", "type": "commit"}, {"oid": "9dcf473a52edf16d1f4395420c11032c269150ed", "url": "https://github.com/cryostatio/cryostat/commit/9dcf473a52edf16d1f4395420c11032c269150ed", "message": "Document event template specifier", "committedDate": "2020-03-27T16:21:30Z", "type": "forcePushed"}]}