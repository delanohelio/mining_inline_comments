{"pr_number": 10874, "pr_title": "drift net fishing: add plugin", "pr_createdAt": "2020-02-24T22:53:05Z", "pr_url": "https://github.com/runelite/runelite/pull/10874", "timeline": [{"oid": "7f544eb98e091666f66bbe26df2e4444953dfc72", "url": "https://github.com/runelite/runelite/commit/7f544eb98e091666f66bbe26df2e4444953dfc72", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-02-24T23:05:31Z", "type": "forcePushed"}, {"oid": "51823f1dfce9d0b37e8c8e3ef6e520c02fe1b5e8", "url": "https://github.com/runelite/runelite/commit/51823f1dfce9d0b37e8c8e3ef6e520c02fe1b5e8", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-02-25T07:53:47Z", "type": "forcePushed"}, {"oid": "bc0059c1c75b8a27e898b7ffe767e35b04fcb09f", "url": "https://github.com/runelite/runelite/commit/bc0059c1c75b8a27e898b7ffe767e35b04fcb09f", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-02-25T09:20:49Z", "type": "forcePushed"}, {"oid": "0c2ee5b9a0ad41ef02916b01282263a8bf8d4da4", "url": "https://github.com/runelite/runelite/commit/0c2ee5b9a0ad41ef02916b01282263a8bf8d4da4", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-02-25T11:18:38Z", "type": "forcePushed"}, {"oid": "98fdd00910bced0dcc50e73e3a77a58e7689a688", "url": "https://github.com/runelite/runelite/commit/98fdd00910bced0dcc50e73e3a77a58e7689a688", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-02-25T21:15:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NzMxOQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r386467319", "bodyText": "Generally we make constants final plus also caps: NETS", "author": "Adam-", "createdAt": "2020-03-02T15:37:11Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate List<DriftNet> nets = ImmutableList.of(", "originalCommit": "98fdd00910bced0dcc50e73e3a77a58e7689a688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2ODI3OA==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r386468278", "bodyText": "this should probably clear the npc lists", "author": "Adam-", "createdAt": "2020-03-02T15:38:56Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate List<DriftNet> nets = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate NPC fishTarget;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tupdateDriftNetVarbits();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown()\n+\t{\n+\t\toverlayManager.remove(overlay);", "originalCommit": "98fdd00910bced0dcc50e73e3a77a58e7689a688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2ODY5Nw==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r386468697", "bodyText": "this is called on the wrong thread, and should be asserting?", "author": "Adam-", "createdAt": "2020-03-02T15:39:36Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate List<DriftNet> nets = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate NPC fishTarget;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tupdateDriftNetVarbits();", "originalCommit": "98fdd00910bced0dcc50e73e3a77a58e7689a688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MDAzNA==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r386470034", "bodyText": "this could probably be simplified with just a switch", "author": "Adam-", "createdAt": "2020-03-02T15:41:36Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetStatus.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.awt.Color;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+@Getter\n+@RequiredArgsConstructor\n+enum DriftNetStatus\n+{\n+\tUNSET(Color.YELLOW),\n+\tSET(Color.GREEN),\n+\tCATCH(Color.GREEN),\n+\tFULL(Color.RED);\n+\n+\tprivate static final Map<Integer, DriftNetStatus> STATUSES;\n+\n+\tprivate final Color color;\n+\n+\tstatic\n+\t{\n+\t\tImmutableMap.Builder<Integer, DriftNetStatus> builder = new ImmutableMap.Builder<>();\n+\n+\t\tfor (DriftNetStatus status : values())\n+\t\t{\n+\t\t\tbuilder.put(status.ordinal(), status);\n+\t\t}\n+\n+\t\tSTATUSES = builder.build();\n+\t}\n+\n+\tstatic DriftNetStatus of(int varbitValue)\n+\t{\n+\t\treturn STATUSES.get(varbitValue);", "originalCommit": "98fdd00910bced0dcc50e73e3a77a58e7689a688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MDU3MA==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r386470570", "bodyText": "it might be better if this were an enum?", "author": "Adam-", "createdAt": "2020-03-02T15:42:26Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.Varbits;\n+\n+@Data\n+@RequiredArgsConstructor\n+public class DriftNet", "originalCommit": "98fdd00910bced0dcc50e73e3a77a58e7689a688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0ODgyOA==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r386548828", "bodyText": "I wanted to store the count, status and respective GameObject for each net in order to access them in the overlay without calling client#getVar every render cycle. I couldn't figure out a nice way to do that with an enum except making the three final fields of this class just be an enum value, and that seemed excessive since there's not much more to it than those.", "author": "dekvall", "createdAt": "2020-03-02T17:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MDU3MA=="}], "type": "inlineReview"}, {"oid": "f8267cdca51628bb326f781f7d1f689dc8067ba7", "url": "https://github.com/runelite/runelite/commit/f8267cdca51628bb326f781f7d1f689dc8067ba7", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-03-04T14:23:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTc3OQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r387705779", "bodyText": "what is this trying to do?", "author": "Adam-", "createdAt": "2020-03-04T14:35:54Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetOverlay.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.NPC;\n+import net.runelite.api.Point;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayPriority;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class DriftNetOverlay extends Overlay\n+{\n+\tprivate final DriftNetConfig config;\n+\tprivate final DriftNetPlugin plugin;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay(DriftNetConfig config, DriftNetPlugin plugin)\n+\t{\n+\t\tthis.config = config;\n+\t\tthis.plugin = plugin;\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetPriority(OverlayPriority.LOW);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tif (!plugin.isInDriftNetArea())\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tif (config.highlightUntaggedFish())\n+\t\t{\n+\t\t\trenderFish(graphics);\n+\t\t}\n+\t\tif (config.showNetStatus())\n+\t\t{\n+\t\t\trenderNets(graphics);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate void renderFish(Graphics2D graphics)\n+\t{\n+\t\tfor (NPC fish : plugin.getFish())\n+\t\t{\n+\t\t\tif (!plugin.getTaggedFish().containsKey(fish))\n+\t\t\t{\n+\t\t\t\tOverlayUtil.renderActorOverlay(graphics, fish, \"\", config.untaggedFishColor());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void renderNets(Graphics2D graphics)\n+\t{\n+\t\tfor (DriftNet net : plugin.getNETS())\n+\t\t{\n+\t\t\tif (net.getNet() == null && net.getStatus() != null)", "originalCommit": "f8267cdca51628bb326f781f7d1f689dc8067ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NzIxNg==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r388777216", "bodyText": "It was going to prevent NPEs during the overlay rendering, but i don't know how i got it that wrong. Sorry.\nIt should be net.getNet() == null || net.getStatus() == null. Maybe it's not needed if it's been like this during testing,  i'll look into it later today.", "author": "dekvall", "createdAt": "2020-03-06T08:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTc3OQ=="}], "type": "inlineReview"}, {"oid": "3b23ea57503a95daa5864fffa2ba323bbe26c518", "url": "https://github.com/runelite/runelite/commit/3b23ea57503a95daa5864fffa2ba323bbe26c518", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-03-09T22:24:36Z", "type": "forcePushed"}, {"oid": "7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "url": "https://github.com/runelite/runelite/commit/7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-03-09T22:54:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NjA4OQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391896089", "bodyText": "You've got an extra newline here.\n\n  \n    \n      \n        Suggested change", "author": "Nightfirecat", "createdAt": "2020-03-12T21:11:41Z", "path": "runelite-api/src/main/java/net/runelite/api/Varbits.java", "diffHunk": "@@ -458,6 +458,35 @@\n \t * The varbit that stores the oxygen percentage for player\n \t */\n \tOXYGEN_LEVEL(5811),\n+\n+\t/**\n+\t * Drift net status\n+\t *\n+\t * Expected values\n+\t *  0 = Unset\n+\t *  1 = Set up\n+\t *  2 = Caught some fish\n+\t *  3 = Full\n+\t */\n+\tNORTH_NET_STATUS(5812),\n+\tSOUTH_NET_STATUS(5814),\n+\n+\t/**\n+\t * Drift net catch count\n+\t */\n+\tNORTH_NET_CATCH_COUNT(5813),\n+\tSOUTH_NET_CATCH_COUNT(5815),\n+\n+\t/**\n+\t * Drift net collect interface\n+\t *\n+\t * Expected values:\n+\t *  0 = Not open\n+\t *  1 = North interface open\n+\t *  2 = South interface open\n+\t */\n+\tDRIFT_NET_COLLECT(5933),\n+", "originalCommit": "7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDczNQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391904735", "bodyText": "This can be static.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final List<DriftNet> NETS = ImmutableList.of(\n          \n          \n            \n            \tprivate static final List<DriftNet> NETS = ImmutableList.of(", "author": "Nightfirecat", "createdAt": "2020-03-12T21:27:30Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Actor;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.callback.ClientThread;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate final List<DriftNet> NETS = ImmutableList.of(", "originalCommit": "7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNTU0Ng==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391905546", "bodyText": "target instanceof NPC is, by itself, a null check as well, hence explicitly null-checking isn't needed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (target != null && target instanceof NPC && ((NPC) target).getId() == NpcID.FISH_SHOAL)\n          \n          \n            \n            \t\t\tif (target instanceof NPC && ((NPC) target).getId() == NpcID.FISH_SHOAL)", "author": "Nightfirecat", "createdAt": "2020-03-12T21:28:35Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Actor;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.callback.ClientThread;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate final List<DriftNet> NETS = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate boolean armInteraction;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tclientThread.invokeLater(() ->\n+\t\t\t{\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown()\n+\t{\n+\t\toverlayManager.remove(overlay);\n+\t\tfish.clear();\n+\t\ttaggedFish.clear();\n+\t\tarmInteraction = false;\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tswitch (event.getGameState())\n+\t\t{\n+\t\t\tcase LOGIN_SCREEN:\n+\t\t\tcase HOPPING:\n+\t\t\t\tfish.clear();\n+\t\t\t\ttaggedFish.clear();\n+\t\t\t\tbreak;\n+\t\t\tcase LOGGED_IN:\n+\t\t\tcase LOADING:\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onVarbitChanged(VarbitChanged event)\n+\t{\n+\t\tupdateDriftNetVarbits();\n+\t}\n+\n+\tprivate void updateDriftNetVarbits()\n+\t{\n+\t\tif (!inDriftNetArea)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (DriftNet net : NETS)\n+\t\t{\n+\t\t\tDriftNetStatus status = DriftNetStatus.of(client.getVar(net.getStatusVarbit()));\n+\t\t\tint count = client.getVar(net.getCountVarbit());\n+\n+\t\t\tnet.setStatus(status);\n+\t\t\tnet.setCount(count);\n+\t\t}\n+\n+\t\t// When you collect any loot, all tags become invalidated\n+\t\tif (client.getVar(Varbits.DRIFT_NET_COLLECT) != 0)\n+\t\t{\n+\t\t\ttaggedFish.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onInteractingChanged(InteractingChanged event)\n+\t{\n+\t\tif (armInteraction\n+\t\t\t&& event.getSource() == client.getLocalPlayer()\n+\t\t\t&& event.getTarget() instanceof NPC\n+\t\t\t&& ((NPC) event.getTarget()).getId() == NpcID.FISH_SHOAL)\n+\t\t{\n+\t\t\ttagFish(event.getTarget());\n+\t\t\tarmInteraction = false;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (!inDriftNetArea)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal int currentTickCount = client.getTickCount();\n+\t\ttaggedFish.entrySet().removeIf(entry -> entry.getValue() + config.timeoutDelay() < currentTickCount);\n+\n+\t\tarmInteraction = false;\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onChatMessage(ChatMessage event)\n+\t{\n+\t\tif (!inDriftNetArea)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (event.getType() == ChatMessageType.SPAM && event.getMessage().equals(CHAT_PRODDING_FISH))\n+\t\t{\n+\t\t\tActor target = client.getLocalPlayer().getInteracting();\n+\n+\t\t\tif (target != null && target instanceof NPC && ((NPC) target).getId() == NpcID.FISH_SHOAL)", "originalCommit": "7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNzcwNQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391907705", "bodyText": "inDriftNetArea = false; should also be set during shutdown.", "author": "Nightfirecat", "createdAt": "2020-03-12T21:31:18Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Actor;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.callback.ClientThread;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate final List<DriftNet> NETS = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate boolean armInteraction;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tclientThread.invokeLater(() ->\n+\t\t\t{\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown()\n+\t{\n+\t\toverlayManager.remove(overlay);\n+\t\tfish.clear();\n+\t\ttaggedFish.clear();\n+\t\tarmInteraction = false;", "originalCommit": "7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwODQ1OA==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391908458", "bodyText": "Why are the area check and net varbit checks run on LOADING? Shouldn't these only be checked on LOGGED_IN?", "author": "Nightfirecat", "createdAt": "2020-03-12T21:32:12Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,293 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Actor;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.callback.ClientThread;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate final List<DriftNet> NETS = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate boolean armInteraction;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tclientThread.invokeLater(() ->\n+\t\t\t{\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown()\n+\t{\n+\t\toverlayManager.remove(overlay);\n+\t\tfish.clear();\n+\t\ttaggedFish.clear();\n+\t\tarmInteraction = false;\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tswitch (event.getGameState())\n+\t\t{\n+\t\t\tcase LOGIN_SCREEN:\n+\t\t\tcase HOPPING:\n+\t\t\t\tfish.clear();\n+\t\t\t\ttaggedFish.clear();\n+\t\t\t\tbreak;\n+\t\t\tcase LOGGED_IN:\n+\t\t\tcase LOADING:", "originalCommit": "7eebbec30a935f81a9a4fa6dd5dcef9ea10a7c4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "09ca977ab56a66c148e7a2f787b436ec849792ee", "url": "https://github.com/runelite/runelite/commit/09ca977ab56a66c148e7a2f787b436ec849792ee", "message": "menuentryswapper: swap nets on anette", "committedDate": "2020-03-13T01:20:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDA0NQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391990045", "bodyText": "Missing newline after method block\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t}\n          \n          \n            \n            \t}", "author": "Nightfirecat", "createdAt": "2020-03-13T01:50:25Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Actor;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.callback.ClientThread;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate final List<DriftNet> NETS = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate boolean armInteraction;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tclientThread.invokeLater(() ->\n+\t\t\t{\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown()\n+\t{\n+\t\toverlayManager.remove(overlay);\n+\t\treset();\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tswitch (event.getGameState())\n+\t\t{\n+\t\t\tcase LOGIN_SCREEN:\n+\t\t\tcase HOPPING:\n+\t\t\t\treset();\n+\t\t\t\tbreak;\n+\t\t\tcase LOGGED_IN:\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\tprivate void reset()\n+\t{\n+\t\tfish.clear();\n+\t\ttaggedFish.clear();\n+\t\tarmInteraction = false;\n+\t\tinDriftNetArea = false;\n+\t}", "originalCommit": "09ca977ab56a66c148e7a2f787b436ec849792ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDQ2Mg==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r391990462", "bodyText": "Add LOADING to this set of cases so that we can ensure fish lists are cleared.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tcase HOPPING:\n          \n          \n            \n            \t\t\tcase HOPPING:\n          \n          \n            \n            \t\t\tcase LOADING:", "author": "Nightfirecat", "createdAt": "2020-03-13T01:52:10Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright (c) 2020, dekvall <https://github.com/dekvall>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *   list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *   this list of conditions and the following disclaimer in the documentation\n+ *   and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.driftnet;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Provides;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Actor;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import net.runelite.api.NPC;\n+import net.runelite.api.NpcID;\n+import net.runelite.api.NullObjectID;\n+import net.runelite.api.Player;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ChatMessage;\n+import net.runelite.api.events.GameObjectDespawned;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.InteractingChanged;\n+import net.runelite.api.events.NpcDespawned;\n+import net.runelite.api.events.NpcSpawned;\n+import net.runelite.api.events.VarbitChanged;\n+import net.runelite.client.callback.ClientThread;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+\n+@PluginDescriptor(\n+\tname = \"Drift Net\",\n+\tdescription = \"Display information about drift nets\",\n+\ttags = {\"hunter\", \"fishing\", \"drift\", \"net\"},\n+\tenabledByDefault = false\n+)\n+public class DriftNetPlugin extends Plugin\n+{\n+\tstatic final String CONFIG_GROUP = \"driftnet\";\n+\tprivate static final int UNDERWATER_REGION = 15008;\n+\tprivate static final String CHAT_PRODDING_FISH  = \"You prod at the shoal of fish to scare it.\";\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate ClientThread clientThread;\n+\n+\t@Inject\n+\tprivate DriftNetConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate DriftNetOverlay overlay;\n+\n+\t@Getter\n+\tprivate Set<NPC> fish = new HashSet<>();\n+\t@Getter\n+\tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n+\t@Getter\n+\tprivate final List<DriftNet> NETS = ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\n+\t@Getter\n+\tprivate boolean inDriftNetArea;\n+\tprivate boolean armInteraction;\n+\n+\t@Provides\n+\tDriftNetConfig provideConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(DriftNetConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp()\n+\t{\n+\t\toverlayManager.add(overlay);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN)\n+\t\t{\n+\t\t\tclientThread.invokeLater(() ->\n+\t\t\t{\n+\t\t\t\tinDriftNetArea = checkArea();\n+\t\t\t\tupdateDriftNetVarbits();\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown()\n+\t{\n+\t\toverlayManager.remove(overlay);\n+\t\treset();\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tswitch (event.getGameState())\n+\t\t{\n+\t\t\tcase LOGIN_SCREEN:\n+\t\t\tcase HOPPING:", "originalCommit": "09ca977ab56a66c148e7a2f787b436ec849792ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4498c03ba705017d7a25e44a211d52d44ff0ecd", "url": "https://github.com/runelite/runelite/commit/c4498c03ba705017d7a25e44a211d52d44ff0ecd", "message": "menu entry swapper: swap nets on anette", "committedDate": "2020-03-13T01:57:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NjgyOQ==", "url": "https://github.com/runelite/runelite/pull/10874#discussion_r392046829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tdescription = \"Swap Talk-to with Nets on Anette\"\n          \n          \n            \n            \t\tdescription = \"Swap Talk-to with Nets on Annette\"", "author": "Nightfirecat", "createdAt": "2020-03-13T06:14:21Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/menuentryswapper/MenuEntrySwapperConfig.java", "diffHunk": "@@ -411,4 +411,14 @@ default ShiftDepositMode bankDepositShiftClick()\n \t{\r\n \t\treturn ShiftDepositMode.OFF;\r\n \t}\r\n+\r\n+\t@ConfigItem(\r\n+\t\tkeyName = \"swapNets\",\r\n+\t\tname = \"Nets\",\r\n+\t\tdescription = \"Swap Talk-to with Nets on Anette\"\r", "originalCommit": "c4498c03ba705017d7a25e44a211d52d44ff0ecd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8f1a73d3b2729ade8d4054c675ac997466c9f75", "url": "https://github.com/runelite/runelite/commit/f8f1a73d3b2729ade8d4054c675ac997466c9f75", "message": "menu entry swapper: swap nets on annette", "committedDate": "2020-03-13T07:32:56Z", "type": "forcePushed"}, {"oid": "e4c0e719a76a3c581470f7fb35e7124e08697e6b", "url": "https://github.com/runelite/runelite/commit/e4c0e719a76a3c581470f7fb35e7124e08697e6b", "message": "drift net fishing: add plugin\n\nThis will add a plugin which shows the status of your nets and\nhighlights any fish you haven't tagged.", "committedDate": "2020-03-13T23:56:48Z", "type": "commit"}, {"oid": "dc8084a567d6f4394c45c2c9b6b55b993a1405b3", "url": "https://github.com/runelite/runelite/commit/dc8084a567d6f4394c45c2c9b6b55b993a1405b3", "message": "menu entry swapper: swap nets on annette", "committedDate": "2020-03-14T00:04:26Z", "type": "commit"}, {"oid": "dc8084a567d6f4394c45c2c9b6b55b993a1405b3", "url": "https://github.com/runelite/runelite/commit/dc8084a567d6f4394c45c2c9b6b55b993a1405b3", "message": "menu entry swapper: swap nets on annette", "committedDate": "2020-03-14T00:04:26Z", "type": "forcePushed"}]}