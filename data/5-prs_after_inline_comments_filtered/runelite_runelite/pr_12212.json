{"pr_number": 12212, "pr_title": "Prayer: Fixed time remaining text when time was greater than an hour", "pr_createdAt": "2020-07-23T16:55:31Z", "pr_url": "https://github.com/runelite/runelite/pull/12212", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc0NQ==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460474745", "bodyText": "The expected strings can be inlined in the assertEquals() calls.", "author": "Nightfirecat", "createdAt": "2020-07-26T03:59:14Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";", "originalCommit": "93d9d17e646d3e5ea51220f67c8eb73ddf894977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTc0Mw==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641743", "bodyText": "Fixed in the latest commit", "author": "landychan", "createdAt": "2020-07-27T04:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc5Mw==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460474793", "bodyText": "Like our main code, imports should be in a single block with no \"sections\" or blank lines", "author": "Nightfirecat", "createdAt": "2020-07-26T03:59:49Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;", "originalCommit": "93d9d17e646d3e5ea51220f67c8eb73ddf894977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTcxMQ==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641711", "bodyText": "Fixed in the latest commit", "author": "landychan", "createdAt": "2020-07-27T04:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDg0Mg==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460474842", "bodyText": "Import assertEquals", "author": "Nightfirecat", "createdAt": "2020-07-26T04:00:23Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});\n+\t\twhen(itemManager.getItemStats(anyInt(), anyBoolean())).thenReturn(itemStats);\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29:42\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29m\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(true);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);", "originalCommit": "93d9d17e646d3e5ea51220f67c8eb73ddf894977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTY1OQ==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641659", "bodyText": "Imported assertEquals in the latest commit", "author": "landychan", "createdAt": "2020-07-27T04:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NTMzOA==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460475338", "bodyText": "Don't use a real item ID unless you're using real stats.", "author": "Nightfirecat", "createdAt": "2020-07-26T04:08:11Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});\n+\t\twhen(itemManager.getItemStats(anyInt(), anyBoolean())).thenReturn(itemStats);\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29:42\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29m\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(true);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"79m\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});", "originalCommit": "93d9d17e646d3e5ea51220f67c8eb73ddf894977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTYwNQ==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641605", "bodyText": "Replaced the real item ID with 99999", "author": "landychan", "createdAt": "2020-07-27T04:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NTMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMjY4NA==", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r461312684", "bodyText": "Neither of these people are you--this should be changed.", "author": "Nightfirecat", "createdAt": "2020-07-28T04:37:06Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>", "originalCommit": "463a36252507e642fcd0447213597aaf8a9fb671", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "840779b9d630830f825c9b760207319786080df9", "url": "https://github.com/runelite/runelite/commit/840779b9d630830f825c9b760207319786080df9", "message": "Fixed bug for time left calculation in prayer plugin. Added tests", "committedDate": "2020-07-28T05:39:31Z", "type": "commit"}, {"oid": "856bd3b683d75bb6a0bbb2fe9a506ffd56c116c9", "url": "https://github.com/runelite/runelite/commit/856bd3b683d75bb6a0bbb2fe9a506ffd56c116c9", "message": "Added more tests", "committedDate": "2020-07-28T05:40:25Z", "type": "commit"}, {"oid": "8c0f20d378e43f1bb69e28b5201130498d751718", "url": "https://github.com/runelite/runelite/commit/8c0f20d378e43f1bb69e28b5201130498d751718", "message": "Added copyright header", "committedDate": "2020-07-28T05:40:34Z", "type": "commit"}, {"oid": "35986e1c6f1c7918e1cfbf9f803187d752f5dac8", "url": "https://github.com/runelite/runelite/commit/35986e1c6f1c7918e1cfbf9f803187d752f5dac8", "message": "Moved brackets to new line", "committedDate": "2020-07-28T05:40:45Z", "type": "commit"}, {"oid": "f887b09a69c5b9d2142259d9b794409fdd1486fc", "url": "https://github.com/runelite/runelite/commit/f887b09a69c5b9d2142259d9b794409fdd1486fc", "message": "Fixed checkstyle violations", "committedDate": "2020-07-28T05:41:23Z", "type": "commit"}, {"oid": "0b05a3bbf0b6ee33281debdce7021d2762edf28e", "url": "https://github.com/runelite/runelite/commit/0b05a3bbf0b6ee33281debdce7021d2762edf28e", "message": "Updated tests", "committedDate": "2020-07-28T05:41:37Z", "type": "commit"}, {"oid": "fa965e0bb423439605f71185b56766847fe4c6d8", "url": "https://github.com/runelite/runelite/commit/fa965e0bb423439605f71185b56766847fe4c6d8", "message": "clean up test", "committedDate": "2020-07-28T05:41:42Z", "type": "commit"}, {"oid": "ec6ca07e454c22da95bb71c613a9ffa0747eb3ad", "url": "https://github.com/runelite/runelite/commit/ec6ca07e454c22da95bb71c613a9ffa0747eb3ad", "message": "Fixed names in copyright header", "committedDate": "2020-07-28T05:41:47Z", "type": "commit"}]}