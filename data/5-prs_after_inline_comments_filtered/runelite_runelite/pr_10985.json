{"pr_number": 10985, "pr_title": "Allow Loot Tracker to track Herbiboar loot with an Open Herb Sack", "pr_createdAt": "2020-03-09T03:25:23Z", "pr_url": "https://github.com/runelite/runelite/pull/10985", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTEwOA==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r391805108", "bodyText": "Since this is specific to the herbiboar, this should be named as such.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate boolean processHerbSackLoot(int timestamp, String event, LootRecordType lootRecordType)\n          \n          \n            \n            \tprivate boolean processHerbiboarHerbSackLoot(int timestamp, String event, LootRecordType lootRecordType)", "author": "Nightfirecat", "createdAt": "2020-03-12T18:13:53Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -677,6 +680,40 @@ private void processInventoryLoot(String event, LootRecordType lootRecordType, I\n \t\t}\n \t}\n \n+\tprivate boolean processHerbSackLoot(int timestamp, String event, LootRecordType lootRecordType)", "originalCommit": "d275e65324b9720f273509b07b04cf27d76ec97d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNjIwNw==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r391806207", "bodyText": "This would be cleaner as a guard clause.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (messageNode.getTimestamp() == timestamp && messageNode.getType() == ChatMessageType.SPAM)\n          \n          \n            \n            \t\t\tif (messageNode.getTimestamp() != timestamp || messageNode.getType() != ChatMessageType.SPAM)\n          \n          \n            \n            \t\t\t{\n          \n          \n            \n            \t\t\t\tcontinue;\n          \n          \n            \n            \t\t\t}", "author": "Nightfirecat", "createdAt": "2020-03-12T18:15:57Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -677,6 +680,40 @@ private void processInventoryLoot(String event, LootRecordType lootRecordType, I\n \t\t}\n \t}\n \n+\tprivate boolean processHerbSackLoot(int timestamp, String event, LootRecordType lootRecordType)\n+\t{\n+\t\tList<ItemStack> herbs = new ArrayList<>();\n+\t\tfor (Object messageObject : client.getMessages())\n+\t\t{\n+\t\t\tMessageNode messageNode = (MessageNode) messageObject;\n+\t\t\tif (messageNode.getTimestamp() == timestamp && messageNode.getType() == ChatMessageType.SPAM)", "originalCommit": "d275e65324b9720f273509b07b04cf27d76ec97d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwODg0Mg==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r391808842", "bodyText": "As I understand from the code below, there are two possible chat messages which can appear:\n\nYou put the Grimy Guam leaf herb into your herb sack.\nYour herb sack is too full to hold the Grimy Guam leaf herb.\n\nWouldn't a pattern matching .+(Grimy .+) herb.+ match the herb name fully without any of the extra logic below? Also, the pattern matching/replacing should be replaced with a compiled Pattern object and a matcher on the messageNode string.", "author": "Nightfirecat", "createdAt": "2020-03-12T18:20:45Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -677,6 +680,40 @@ private void processInventoryLoot(String event, LootRecordType lootRecordType, I\n \t\t}\n \t}\n \n+\tprivate boolean processHerbSackLoot(int timestamp, String event, LootRecordType lootRecordType)\n+\t{\n+\t\tList<ItemStack> herbs = new ArrayList<>();\n+\t\tfor (Object messageObject : client.getMessages())\n+\t\t{\n+\t\t\tMessageNode messageNode = (MessageNode) messageObject;\n+\t\t\tif (messageNode.getTimestamp() == timestamp && messageNode.getType() == ChatMessageType.SPAM)\n+\t\t\t{\n+\t\t\t\tString herbName;", "originalCommit": "d275e65324b9720f273509b07b04cf27d76ec97d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMTI4Mg==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r392631282", "bodyText": "There is also another message when you manually add a herb to your sack which is:\n\nYou add the Grimy Guam leaf to your sack.\n\nBut I don't think its possible to manually add herbs in the same timestamp as harvesting Herbiboar.", "author": "deon9718", "createdAt": "2020-03-15T00:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwODg0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NjM5Nw==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r392656397", "bodyText": "Pattern ended up being .+(Grimy .+?) herb.+", "author": "deon9718", "createdAt": "2020-03-15T09:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwODg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMDU3Mw==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r391810573", "bodyText": "Since the if branch returns from this method, the rest of this code does not need to be in an else block. That is, this should be replaced by the following:\nif (herbs.isEmpty())\n{\n\treturn false;\n}\n\naddLoot(event, -1, lootRecordType, herbs);\nreturn true;", "author": "Nightfirecat", "createdAt": "2020-03-12T18:23:56Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -677,6 +680,40 @@ private void processInventoryLoot(String event, LootRecordType lootRecordType, I\n \t\t}\n \t}\n \n+\tprivate boolean processHerbSackLoot(int timestamp, String event, LootRecordType lootRecordType)\n+\t{\n+\t\tList<ItemStack> herbs = new ArrayList<>();\n+\t\tfor (Object messageObject : client.getMessages())\n+\t\t{\n+\t\t\tMessageNode messageNode = (MessageNode) messageObject;\n+\t\t\tif (messageNode.getTimestamp() == timestamp && messageNode.getType() == ChatMessageType.SPAM)\n+\t\t\t{\n+\t\t\t\tString herbName;\n+\t\t\t\tif (messageNode.getValue().startsWith(\"You put the Grimy\"))\n+\t\t\t\t{\n+\t\t\t\t\therbName = messageNode.getValue().replace(\"You put the \", \"\").replace(\" herb into your herb sack.\", \"\");\n+\t\t\t\t\therbs.add(new ItemStack(itemManager.search(herbName).get(0).getId(), 1, client.getLocalPlayer().getLocalLocation()));\n+\t\t\t\t}\n+\t\t\t\t// Edge case for full herb sack for some of the looted herbs\n+\t\t\t\telse if (messageNode.getValue().startsWith(\"Your herb sack is too full to hold the Grimy\"))\n+\t\t\t\t{\n+\t\t\t\t\therbName = messageNode.getValue().replace(\"Your herb sack is too full to hold the \", \"\").replace(\" herb.\", \"\");\n+\t\t\t\t\therbs.add(new ItemStack(itemManager.search(herbName).get(0).getId(), 1, client.getLocalPlayer().getLocalLocation()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (herbs.isEmpty())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\t\telse", "originalCommit": "d275e65324b9720f273509b07b04cf27d76ec97d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f9c3c6526213ef1a8bcfd1e3c92fff4cac87298", "url": "https://github.com/runelite/runelite/commit/6f9c3c6526213ef1a8bcfd1e3c92fff4cac87298", "message": "apply more suggestions from code review", "committedDate": "2020-03-15T08:25:06Z", "type": "forcePushed"}, {"oid": "a703de462412237c4bcff55bf91169e99444a679", "url": "https://github.com/runelite/runelite/commit/a703de462412237c4bcff55bf91169e99444a679", "message": "loottracker: Track herbiboar loot with an open herb sack\n\nWhen looting the herbiboar with an open herb sack, instead of receiving\nthe herbs to your inventory, the herbs are deposited to the sack\ndirectly and the player receives chat messages indicating the herbs they\nreceived. This commit adds support for reading those chat messages when\nlooting the herbiboar.\n\nThis change incidentally fixes an issue which arose when the open herb\nsack was introduced to the game where any inventory change after looting\nthe herbiboar would be tracked as herbiboar loot, such as drinking a\nstamina potion.\n\nCloses runelite/runelite#10655\nFixes runelite/runelite#10718", "committedDate": "2020-03-18T22:47:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MDk4NA==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r397360984", "bodyText": "I've made IterableHashTable generic now to make this less terrifying", "author": "Adam-", "createdAt": "2020-03-24T18:09:13Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -677,6 +684,36 @@ private void processInventoryLoot(String event, LootRecordType lootRecordType, I\n \t\t}\n \t}\n \n+\tprivate boolean processHerbiboarHerbSackLoot(int timestamp)\n+\t{\n+\t\tList<ItemStack> herbs = new ArrayList<>();\n+\n+\t\tfor (Object messageObject : client.getMessages())", "originalCommit": "a703de462412237c4bcff55bf91169e99444a679", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e6ab58d928e4a5b413c43cdbc97480738763f188", "url": "https://github.com/runelite/runelite/commit/e6ab58d928e4a5b413c43cdbc97480738763f188", "message": "loottracker: Track herbiboar loot with an open herb sack\n\nWhen looting the herbiboar with an open herb sack, instead of receiving\nthe herbs to your inventory, the herbs are deposited to the sack\ndirectly and the player receives chat messages indicating the herbs they\nreceived. This commit adds support for reading those chat messages when\nlooting the herbiboar.\n\nThis change incidentally fixes an issue which arose when the open herb\nsack was introduced to the game where any inventory change after looting\nthe herbiboar would be tracked as herbiboar loot, such as drinking a\nstamina potion.\n\nCloses runelite/runelite#10655\nFixes runelite/runelite#10718", "committedDate": "2020-03-24T20:59:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTQ5NA==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r397495494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tIterableHashTable messageTable = mock(IterableHashTable.class);\n          \n          \n            \n            \t\t\tIterator<Object> mockIterator = mock(Iterator.class);\n          \n          \n            \n            \t\t\tIterableHashTable<MessageNode> messageTable = mock(IterableHashTable.class);\n          \n          \n            \n            \t\t\tIterator<MessageNode> mockIterator = mock(Iterator.class);", "author": "Nightfirecat", "createdAt": "2020-03-24T22:17:35Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/loottracker/LootTrackerPluginTest.java", "diffHunk": "@@ -106,4 +158,90 @@ public void testFirstClue()\n \t\tassertEquals(\"Clue Scroll (Master)\", lootTrackerPlugin.eventType);\n \t\tassertEquals(LootRecordType.EVENT, lootTrackerPlugin.lootRecordType);\n \t}\n+\n+\t@Test\n+\tpublic void testHerbiboarHerbSack()\n+\t{\n+\t\tfor (Map.Entry<Integer, String> herb : HERB_IDS_TO_NAMES.entrySet())\n+\t\t{\n+\t\t\tfinal int id = herb.getKey();\n+\t\t\tfinal String name = herb.getValue();\n+\t\t\tfinal String herbMessage = String.format(\"You put the %s herb into your herb sack.\", name);\n+\t\t\tfinal String herbFullMessage = String.format(\"Your herb sack is too full to hold the %s herb.\", name);\n+\n+\t\t\tfinal ItemPrice herbPrice = new ItemPrice();\n+\t\t\therbPrice.setId(id);\n+\t\t\therbPrice.setName(name);\n+\t\t\twhen(itemManager.search(name)).thenReturn(Collections.singletonList(herbPrice));\n+\n+\t\t\tMessageNode node = mock(MessageNode.class);\n+\t\t\twhen(node.getTimestamp()).thenReturn(0);\n+\t\t\twhen(node.getType()).thenReturn(ChatMessageType.SPAM);\n+\t\t\twhen(node.getValue()).thenReturn(herbMessage);\n+\n+\t\t\tMessageNode nodeFull = mock(MessageNode.class);\n+\t\t\twhen(nodeFull.getTimestamp()).thenReturn(0);\n+\t\t\twhen(nodeFull.getType()).thenReturn(ChatMessageType.SPAM);\n+\t\t\twhen(nodeFull.getValue()).thenReturn(herbFullMessage);\n+\n+\t\t\tIterableHashTable messageTable = mock(IterableHashTable.class);\n+\t\t\tIterator<Object> mockIterator = mock(Iterator.class);", "originalCommit": "c377522ef97d53076ed301c64ec3ee5cd4a68b0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTU2MQ==", "url": "https://github.com/runelite/runelite/pull/10985#discussion_r397495561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tIterableHashTable messageTable = mock(IterableHashTable.class);\n          \n          \n            \n            \t\tIterator<Object> mockIterator = mock(Iterator.class);\n          \n          \n            \n            \t\tIterableHashTable<MessageNode> messageTable = mock(IterableHashTable.class);\n          \n          \n            \n            \t\tIterator<MessageNode> mockIterator = mock(Iterator.class);", "author": "Nightfirecat", "createdAt": "2020-03-24T22:17:45Z", "path": "runelite-client/src/test/java/net/runelite/client/plugins/loottracker/LootTrackerPluginTest.java", "diffHunk": "@@ -106,4 +158,90 @@ public void testFirstClue()\n \t\tassertEquals(\"Clue Scroll (Master)\", lootTrackerPlugin.eventType);\n \t\tassertEquals(LootRecordType.EVENT, lootTrackerPlugin.lootRecordType);\n \t}\n+\n+\t@Test\n+\tpublic void testHerbiboarHerbSack()\n+\t{\n+\t\tfor (Map.Entry<Integer, String> herb : HERB_IDS_TO_NAMES.entrySet())\n+\t\t{\n+\t\t\tfinal int id = herb.getKey();\n+\t\t\tfinal String name = herb.getValue();\n+\t\t\tfinal String herbMessage = String.format(\"You put the %s herb into your herb sack.\", name);\n+\t\t\tfinal String herbFullMessage = String.format(\"Your herb sack is too full to hold the %s herb.\", name);\n+\n+\t\t\tfinal ItemPrice herbPrice = new ItemPrice();\n+\t\t\therbPrice.setId(id);\n+\t\t\therbPrice.setName(name);\n+\t\t\twhen(itemManager.search(name)).thenReturn(Collections.singletonList(herbPrice));\n+\n+\t\t\tMessageNode node = mock(MessageNode.class);\n+\t\t\twhen(node.getTimestamp()).thenReturn(0);\n+\t\t\twhen(node.getType()).thenReturn(ChatMessageType.SPAM);\n+\t\t\twhen(node.getValue()).thenReturn(herbMessage);\n+\n+\t\t\tMessageNode nodeFull = mock(MessageNode.class);\n+\t\t\twhen(nodeFull.getTimestamp()).thenReturn(0);\n+\t\t\twhen(nodeFull.getType()).thenReturn(ChatMessageType.SPAM);\n+\t\t\twhen(nodeFull.getValue()).thenReturn(herbFullMessage);\n+\n+\t\t\tIterableHashTable messageTable = mock(IterableHashTable.class);\n+\t\t\tIterator<Object> mockIterator = mock(Iterator.class);\n+\t\t\twhen(mockIterator.hasNext()).thenReturn(true, true, false);\n+\t\t\twhen(mockIterator.next()).thenReturn(node).thenReturn(nodeFull);\n+\t\t\twhen(messageTable.iterator()).thenReturn(mockIterator);\n+\t\t\twhen(client.getMessages()).thenReturn(messageTable);\n+\n+\t\t\tLootTrackerPlugin lootTrackerPluginSpy = spy(this.lootTrackerPlugin);\n+\t\t\tArgumentCaptor<Collection<ItemStack>> collectionCaptor = ArgumentCaptor.forClass(Collection.class);\n+\t\t\tdoNothing().when(lootTrackerPluginSpy).addLoot(any(), anyInt(), any(), collectionCaptor.capture());\n+\n+\t\t\tChatMessage chatMessage = new ChatMessage(null, ChatMessageType.GAMEMESSAGE, \"\", LootTrackerPlugin.HERBIBOAR_LOOTED_MESSAGE, \"\", 0);\n+\t\t\tlootTrackerPluginSpy.onChatMessage(chatMessage);\n+\n+\t\t\tverify(lootTrackerPluginSpy, times(1)).addLoot(eq(\"Herbiboar\"), eq(-1), eq(LootRecordType.EVENT), collectionCaptor.capture());\n+\n+\t\t\tfor (ItemStack item : collectionCaptor.getValue())\n+\t\t\t{\n+\t\t\t\tassertEquals(id, item.getId());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testHerbiboarPotionBug()\n+\t{\n+\t\tItemPrice herbPrice = new ItemPrice();\n+\t\therbPrice.setId(ItemID.GRIMY_GUAM_LEAF);\n+\t\therbPrice.setName(\"Grimy guam leaf\");\n+\t\twhen(itemManager.search(\"Grimy guam leaf\")).thenReturn(Collections.singletonList(herbPrice));\n+\n+\t\tMessageNode node = mock(MessageNode.class);\n+\t\twhen(node.getTimestamp()).thenReturn(0);\n+\t\twhen(node.getType()).thenReturn(ChatMessageType.SPAM);\n+\t\twhen(node.getValue()).thenReturn(\"You put the Grimy guam leaf herb into your herb sack.\");\n+\n+\t\tIterableHashTable messageTable = mock(IterableHashTable.class);\n+\t\tIterator<Object> mockIterator = mock(Iterator.class);", "originalCommit": "c377522ef97d53076ed301c64ec3ee5cd4a68b0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c321b34c8f52118e02c064f29dd0529b2b205b9a", "url": "https://github.com/runelite/runelite/commit/c321b34c8f52118e02c064f29dd0529b2b205b9a", "message": "loottracker: Track herbiboar loot with an open herb sack\n\nWhen looting the herbiboar with an open herb sack, instead of receiving\nthe herbs to your inventory, the herbs are deposited to the sack\ndirectly and the player receives chat messages indicating the herbs they\nreceived. This commit adds support for reading those chat messages when\nlooting the herbiboar.\n\nThis change incidentally fixes an issue which arose when the open herb\nsack was introduced to the game where any inventory change after looting\nthe herbiboar would be tracked as herbiboar loot, such as drinking a\nstamina potion.\n\nCloses #10655\nFixes #10718", "committedDate": "2020-03-25T00:56:48Z", "type": "forcePushed"}, {"oid": "986947524dd0825048216d508b482d9a55764d7e", "url": "https://github.com/runelite/runelite/commit/986947524dd0825048216d508b482d9a55764d7e", "message": "loottracker: Track herbiboar loot with an open herb sack\n\nWhen looting the herbiboar with an open herb sack, instead of receiving\nthe herbs to your inventory, the herbs are deposited to the sack\ndirectly and the player receives chat messages indicating the herbs they\nreceived. This commit adds support for reading those chat messages when\nlooting the herbiboar.\n\nThis change incidentally fixes an issue which arose when the open herb\nsack was introduced to the game where any inventory change after looting\nthe herbiboar would be tracked as herbiboar loot, such as drinking a\nstamina potion.\n\nCloses #10655\nFixes #10718", "committedDate": "2020-03-30T16:54:04Z", "type": "forcePushed"}, {"oid": "2abcf8001fa104cd3d3752c2ed23e121ccbe9096", "url": "https://github.com/runelite/runelite/commit/2abcf8001fa104cd3d3752c2ed23e121ccbe9096", "message": "loottracker: Track herbiboar loot with an open herb sack\n\nWhen looting the herbiboar with an open herb sack, instead of receiving\nthe herbs to your inventory, the herbs are deposited to the sack\ndirectly and the player receives chat messages indicating the herbs they\nreceived. This commit adds support for reading those chat messages when\nlooting the herbiboar.\n\nThis change incidentally fixes an issue which arose when the open herb\nsack was introduced to the game where any inventory change after looting\nthe herbiboar would be tracked as herbiboar loot, such as drinking a\nstamina potion.\n\nCloses #10655\nFixes #10718", "committedDate": "2020-03-30T22:35:28Z", "type": "commit"}, {"oid": "2abcf8001fa104cd3d3752c2ed23e121ccbe9096", "url": "https://github.com/runelite/runelite/commit/2abcf8001fa104cd3d3752c2ed23e121ccbe9096", "message": "loottracker: Track herbiboar loot with an open herb sack\n\nWhen looting the herbiboar with an open herb sack, instead of receiving\nthe herbs to your inventory, the herbs are deposited to the sack\ndirectly and the player receives chat messages indicating the herbs they\nreceived. This commit adds support for reading those chat messages when\nlooting the herbiboar.\n\nThis change incidentally fixes an issue which arose when the open herb\nsack was introduced to the game where any inventory change after looting\nthe herbiboar would be tracked as herbiboar loot, such as drinking a\nstamina potion.\n\nCloses #10655\nFixes #10718", "committedDate": "2020-03-30T22:35:28Z", "type": "forcePushed"}]}