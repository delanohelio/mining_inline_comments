{"pr_number": 2476, "pr_title": "Add importing and exporting teams from JSON", "pr_createdAt": "2020-11-28T20:24:55Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2476", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDU4OA==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980588", "bodyText": "too short documentation", "author": "krusche", "createdAt": "2020-12-06T07:48:09Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980675", "bodyText": "are we sure that we want to send one update per team?\nI would appreciate some inline comments here as well", "author": "krusche", "createdAt": "2020-12-06T07:48:54Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -431,4 +473,17 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         course.setExercises(exercises);\n         return ResponseEntity.ok(course);\n     }\n+\n+    /**\n+     * Sends team assignments updates\n+     *\n+     * @param exercise Exercise which students will receive team update\n+     * @param teams    Teams of exercise\n+     */\n+    private void sendTeamAssignmentUpdates(Exercise exercise, List<Team> teams) {\n+        // Send out team assignment update via websockets\n+        Map<String, List<StudentParticipation>> participationsMap = participationService.findByExerciseIdWithEagerSubmissionsResult(exercise.getId()).stream()\n+                .collect(Collectors.toMap(StudentParticipation::getParticipantIdentifier, List::of, (a, b) -> Stream.concat(a.stream(), b.stream()).collect(Collectors.toList())));\n+        teams.forEach(team -> teamWebsocketService.sendTeamAssignmentUpdate(exercise, null, team, participationsMap.getOrDefault(team.getParticipantIdentifier(), List.of())));", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDg3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980876", "bodyText": "Maybe one update for all imported teams would be enough?", "author": "krusche", "createdAt": "2020-12-06T07:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc1MDU2OA==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537750568", "bodyText": "I actually did not change this part. I have just used what was used in importing from another exercise.", "author": "iozbeyli", "createdAt": "2020-12-07T18:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDkyMw==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537864923", "bodyText": "If I'm not completely wrong, this update targets the team, not the instructor, so it can not be replaced by a single message to the instructor.", "author": "sleiss", "createdAt": "2020-12-07T22:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4ODM4MA==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537888380", "bodyText": "Yes, it sends update to each student.", "author": "iozbeyli", "createdAt": "2020-12-07T22:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDY3NQ=="}], "type": "inlineReview"}, {"oid": "5e629d503679c625bddbe1f16425e79b47e7ffa2", "url": "https://github.com/ls1intum/Artemis/commit/5e629d503679c625bddbe1f16425e79b47e7ffa2", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-07T18:54:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODQ4Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537828482", "bodyText": "Formatting seems weird", "author": "stefanwaldhauser", "createdAt": "2020-12-07T20:59:28Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -67,9 +70,40 @@\n             + \"(user.login like :#{#loginOrName}% or concat_ws(' ', user.firstName, user.lastName) like %:#{#loginOrName}%)\")\n     List<User> searchByLoginOrNameInGroup(@Param(\"groupName\") String groupName, @Param(\"loginOrName\") String loginOrName);\n \n+    /**\n+     * Gets users in a group by their registration number.\n+     *\n+     * @param groupName           Name of group in which to search for users\n+     * @param registrationNumbers Registration numbers of users\n+     * @return found users that match the criteria\n+     */\n+    @EntityGraph(type = LOAD, attributePaths = { \"groups\" })\n+    @Query(\"\"\"\n+            select user\n+                from User user", "originalCommit": "5e629d503679c625bddbe1f16425e79b47e7ffa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "504a9faa52217c77761d5acb3df92af6abb6ffd3", "url": "https://github.com/ls1intum/Artemis/commit/504a9faa52217c77761d5acb3df92af6abb6ffd3", "message": "Add more inline comments and fix team name error", "committedDate": "2020-12-07T21:51:33Z", "type": "commit"}, {"oid": "324929d45a77cda6f008b51a1818acc9cd7d0be6", "url": "https://github.com/ls1intum/Artemis/commit/324929d45a77cda6f008b51a1818acc9cd7d0be6", "message": "Add check for number given to fields", "committedDate": "2020-12-07T22:11:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NzY1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r538497653", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise\n          \n          \n            \n                 * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise (potentially overriding existing teams)", "author": "krusche", "createdAt": "2020-12-08T15:27:32Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -317,12 +320,54 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         return ResponseEntity.ok().body(teamService.searchByLoginOrNameInCourseForExerciseTeam(course, exercise, loginOrName));\n     }\n \n+    /**\n+     * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise", "originalCommit": "324929d45a77cda6f008b51a1818acc9cd7d0be6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "208dd42796667e998271eaa5115b5258eaf167be", "url": "https://github.com/ls1intum/Artemis/commit/208dd42796667e998271eaa5115b5258eaf167be", "message": "Add import dialog and java endpoint for team import", "committedDate": "2020-11-22T23:04:11Z", "type": "commit"}, {"oid": "80fec8cdbc2edc925175f085f7fdf698197be8dd", "url": "https://github.com/ls1intum/Artemis/commit/80fec8cdbc2edc925175f085f7fdf698197be8dd", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-23T00:03:28Z", "type": "commit"}, {"oid": "9ba940910f176889a4ab6829715357ac8eed7da2", "url": "https://github.com/ls1intum/Artemis/commit/9ba940910f176889a4ab6829715357ac8eed7da2", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-23T13:47:04Z", "type": "commit"}, {"oid": "3a744b3451c629512e42b31c8cf399e5da957f0b", "url": "https://github.com/ls1intum/Artemis/commit/3a744b3451c629512e42b31c8cf399e5da957f0b", "message": "Separate import from file and from exercise in team import and search users in course", "committedDate": "2020-11-23T22:47:15Z", "type": "commit"}, {"oid": "991c692b9d39e3055a8c98e1deb2005624f1708a", "url": "https://github.com/ls1intum/Artemis/commit/991c692b9d39e3055a8c98e1deb2005624f1708a", "message": "Add registration numbers not found exception", "committedDate": "2020-11-24T00:18:57Z", "type": "commit"}, {"oid": "0bd3304ef30c8d782b96f4a38d900408558b9e5c", "url": "https://github.com/ls1intum/Artemis/commit/0bd3304ef30c8d782b96f4a38d900408558b9e5c", "message": "Convert used json to same in issue for team import from file", "committedDate": "2020-11-24T00:47:27Z", "type": "commit"}, {"oid": "1306d260112c5c8095f5e11ef1e4fa773494ee9a", "url": "https://github.com/ls1intum/Artemis/commit/1306d260112c5c8095f5e11ef1e4fa773494ee9a", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-24T00:57:56Z", "type": "commit"}, {"oid": "ca4a185cc956586ed95dacd6198ff1735d4f9277", "url": "https://github.com/ls1intum/Artemis/commit/ca4a185cc956586ed95dacd6198ff1735d4f9277", "message": "Add exporting teams", "committedDate": "2020-11-25T11:56:32Z", "type": "commit"}, {"oid": "ede615a1f8e2f489d054332b8c8bfad59018de03", "url": "https://github.com/ls1intum/Artemis/commit/ede615a1f8e2f489d054332b8c8bfad59018de03", "message": "Merge branch 'enhancement/team/export-import-teams' of github.com:iozbeyli/Artemis into enhancement/team/export-import-teams", "committedDate": "2020-11-25T11:56:58Z", "type": "commit"}, {"oid": "19099b45e1313c7e29248dc14faee6df5ad687df", "url": "https://github.com/ls1intum/Artemis/commit/19099b45e1313c7e29248dc14faee6df5ad687df", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-25T12:05:24Z", "type": "commit"}, {"oid": "f52b58b5ec3dc2cb70f502db2c6c8dafdafc2c37", "url": "https://github.com/ls1intum/Artemis/commit/f52b58b5ec3dc2cb70f502db2c6c8dafdafc2c37", "message": "Fix server style and remove duplicates for team import", "committedDate": "2020-11-25T14:44:35Z", "type": "commit"}, {"oid": "197a12241a9ec176ec3f713f7ffbfcb8c4e3b02b", "url": "https://github.com/ls1intum/Artemis/commit/197a12241a9ec176ec3f713f7ffbfcb8c4e3b02b", "message": "Fix warnings and check for existing registration numbers", "committedDate": "2020-11-25T14:56:39Z", "type": "commit"}, {"oid": "8b93184054faded9183aedf11351c73cd885d944", "url": "https://github.com/ls1intum/Artemis/commit/8b93184054faded9183aedf11351c73cd885d944", "message": "Remove comment from teams export button", "committedDate": "2020-11-25T14:58:01Z", "type": "commit"}, {"oid": "fdebe36897f5419e7e4942a5621f5feb64bd2a8e", "url": "https://github.com/ls1intum/Artemis/commit/fdebe36897f5419e7e4942a5621f5feb64bd2a8e", "message": "Fix server style", "committedDate": "2020-11-25T15:06:45Z", "type": "commit"}, {"oid": "d7e90355116cc7d9b280c8d4b2a3c78f4d4009e4", "url": "https://github.com/ls1intum/Artemis/commit/d7e90355116cc7d9b280c8d4b2a3c78f4d4009e4", "message": "Add translations for teams import", "committedDate": "2020-11-25T16:29:29Z", "type": "commit"}, {"oid": "8cc7d41d8c1eda1d8a1c7d07b94bb15ef87a5e63", "url": "https://github.com/ls1intum/Artemis/commit/8cc7d41d8c1eda1d8a1c7d07b94bb15ef87a5e63", "message": "Add tests for team import dialog", "committedDate": "2020-11-25T22:06:20Z", "type": "commit"}, {"oid": "1f6fe889045deb60dc5c9bb166bd68146fc5b265", "url": "https://github.com/ls1intum/Artemis/commit/1f6fe889045deb60dc5c9bb166bd68146fc5b265", "message": "Add tests for test dialog related components", "committedDate": "2020-11-26T00:04:05Z", "type": "commit"}, {"oid": "b92424e86bdcc6dcb3c785dbb0c62992f0692cc0", "url": "https://github.com/ls1intum/Artemis/commit/b92424e86bdcc6dcb3c785dbb0c62992f0692cc0", "message": "Remove duplicate code from team import test", "committedDate": "2020-11-26T01:20:32Z", "type": "commit"}, {"oid": "cb64db6a39c41f3220f859ce2b9d425de08b49ba", "url": "https://github.com/ls1intum/Artemis/commit/cb64db6a39c41f3220f859ce2b9d425de08b49ba", "message": "Remove duplicate codes from teams tests", "committedDate": "2020-11-26T10:37:56Z", "type": "commit"}, {"oid": "8c2a18628648eb88c7b551a5796a195874aec379", "url": "https://github.com/ls1intum/Artemis/commit/8c2a18628648eb88c7b551a5796a195874aec379", "message": "Reduce number of database calls", "committedDate": "2020-11-26T11:59:09Z", "type": "commit"}, {"oid": "208957d9f87b814fee88ae89f6a73afb98793368", "url": "https://github.com/ls1intum/Artemis/commit/208957d9f87b814fee88ae89f6a73afb98793368", "message": "Add tests for team import on server", "committedDate": "2020-11-26T19:26:27Z", "type": "commit"}, {"oid": "c65f9d9f4d9f4f9ac54a915fb3da797f60c0dc25", "url": "https://github.com/ls1intum/Artemis/commit/c65f9d9f4d9f4f9ac54a915fb3da797f60c0dc25", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-26T19:27:49Z", "type": "commit"}, {"oid": "8a390af9a96f47981b03466eb8b585ea5e56d1dc", "url": "https://github.com/ls1intum/Artemis/commit/8a390af9a96f47981b03466eb8b585ea5e56d1dc", "message": "Fix tests for team import dialog", "committedDate": "2020-11-26T20:08:40Z", "type": "commit"}, {"oid": "1a26ec9f42257d8c2b009063811daca67dcb4808", "url": "https://github.com/ls1intum/Artemis/commit/1a26ec9f42257d8c2b009063811daca67dcb4808", "message": "Remove config file from team tests", "committedDate": "2020-11-26T20:25:11Z", "type": "commit"}, {"oid": "7386ba210e6302c49db588756cccf37ba287d495", "url": "https://github.com/ls1intum/Artemis/commit/7386ba210e6302c49db588756cccf37ba287d495", "message": "Add javadoc and fix test names for server", "committedDate": "2020-11-26T20:41:53Z", "type": "commit"}, {"oid": "dd4476e2889a27e113ba5156ff9c77c024fb009b", "url": "https://github.com/ls1intum/Artemis/commit/dd4476e2889a27e113ba5156ff9c77c024fb009b", "message": "Add javadoc for server tests", "committedDate": "2020-11-26T20:50:00Z", "type": "commit"}, {"oid": "04d6989295e09ec3613c6f0ed1688048e844867e", "url": "https://github.com/ls1intum/Artemis/commit/04d6989295e09ec3613c6f0ed1688048e844867e", "message": "Add missing param for javadoc for team import server test", "committedDate": "2020-11-26T20:56:47Z", "type": "commit"}, {"oid": "694e721707e61cdbb62d78724a3405f89e3a4948", "url": "https://github.com/ls1intum/Artemis/commit/694e721707e61cdbb62d78724a3405f89e3a4948", "message": "Change import teams alert message", "committedDate": "2020-11-26T21:53:39Z", "type": "commit"}, {"oid": "34624bca8ff6d6a5dd3461d9a590e6a52686ca60", "url": "https://github.com/ls1intum/Artemis/commit/34624bca8ff6d6a5dd3461d9a590e6a52686ca60", "message": "Fix comments and improve tests", "committedDate": "2020-11-27T16:09:51Z", "type": "commit"}, {"oid": "825199fb9bc83a2561496c28f36794ff391248e9", "url": "https://github.com/ls1intum/Artemis/commit/825199fb9bc83a2561496c28f36794ff391248e9", "message": "Remove unnecessary event spy", "committedDate": "2020-11-27T16:20:58Z", "type": "commit"}, {"oid": "61eff0a784daaa05cf97e2d027d5abb9ffc3c0bd", "url": "https://github.com/ls1intum/Artemis/commit/61eff0a784daaa05cf97e2d027d5abb9ffc3c0bd", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-27T16:32:01Z", "type": "commit"}, {"oid": "7642c8629b516dcc95791a0189b21485f164e739", "url": "https://github.com/ls1intum/Artemis/commit/7642c8629b516dcc95791a0189b21485f164e739", "message": "Stop loading when json is invalid", "committedDate": "2020-11-27T17:03:43Z", "type": "commit"}, {"oid": "fb5e553e4a18751f953cb250fa34a81c76750531", "url": "https://github.com/ls1intum/Artemis/commit/fb5e553e4a18751f953cb250fa34a81c76750531", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-11-28T16:17:36Z", "type": "commit"}, {"oid": "815f5a11aace2199fb9a8dc7dbd57ce5474e52d1", "url": "https://github.com/ls1intum/Artemis/commit/815f5a11aace2199fb9a8dc7dbd57ce5474e52d1", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-01T23:51:04Z", "type": "commit"}, {"oid": "b6c7ac7f63a855915bcae7457c73847a9c1191be", "url": "https://github.com/ls1intum/Artemis/commit/b6c7ac7f63a855915bcae7457c73847a9c1191be", "message": "Add username as identifier when importing teams from a file", "committedDate": "2020-12-01T23:54:34Z", "type": "commit"}, {"oid": "627d771642ef640f9d343f48a7320a6e17bf7412", "url": "https://github.com/ls1intum/Artemis/commit/627d771642ef640f9d343f48a7320a6e17bf7412", "message": "Merge branch 'enhancement/team/export-import-teams' of github.com:ls1intum/Artemis into enhancement/team/export-import-teams", "committedDate": "2020-12-01T23:55:34Z", "type": "commit"}, {"oid": "94340cbcc6f0f566cb4af04490bf272e89f19b3c", "url": "https://github.com/ls1intum/Artemis/commit/94340cbcc6f0f566cb4af04490bf272e89f19b3c", "message": "Fix server style", "committedDate": "2020-12-02T00:00:30Z", "type": "commit"}, {"oid": "c28f20bbf9dafdd96875d912e672ab6a550358ad", "url": "https://github.com/ls1intum/Artemis/commit/c28f20bbf9dafdd96875d912e672ab6a550358ad", "message": "Fix tests and change function names", "committedDate": "2020-12-02T14:52:59Z", "type": "commit"}, {"oid": "619eee99e6cdba19969f271b0e933d68b36c216b", "url": "https://github.com/ls1intum/Artemis/commit/619eee99e6cdba19969f271b0e933d68b36c216b", "message": "Fix server style", "committedDate": "2020-12-02T15:21:54Z", "type": "commit"}, {"oid": "5aefc66517190cee023f8f98585244c1912d26df", "url": "https://github.com/ls1intum/Artemis/commit/5aefc66517190cee023f8f98585244c1912d26df", "message": "Add more test and fix style errors", "committedDate": "2020-12-02T17:33:02Z", "type": "commit"}, {"oid": "9365c5690cf16b87ed6073965c2ffb2bc2a6e05a", "url": "https://github.com/ls1intum/Artemis/commit/9365c5690cf16b87ed6073965c2ffb2bc2a6e05a", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-02T17:33:30Z", "type": "commit"}, {"oid": "3259f96becaee6012ef32212b7c55da8eb26e034", "url": "https://github.com/ls1intum/Artemis/commit/3259f96becaee6012ef32212b7c55da8eb26e034", "message": "Merge branch 'enhancement/team/export-import-teams' of github.com:ls1intum/Artemis into enhancement/team/export-import-teams", "committedDate": "2020-12-02T17:33:36Z", "type": "commit"}, {"oid": "0f4c631965022a54ddb3adea2ee19d880bad1549", "url": "https://github.com/ls1intum/Artemis/commit/0f4c631965022a54ddb3adea2ee19d880bad1549", "message": "Update src/main/webapp/app/exercises/shared/team/teams-import-dialog/teams-import-dialog.component.ts\n\nCo-authored-by: Ren\u00e9 Lalla <33484318+derLalla@users.noreply.github.com>", "committedDate": "2020-12-02T17:48:08Z", "type": "commit"}, {"oid": "92f9f9cdef1fac62d0c539e8466618232988ba1a", "url": "https://github.com/ls1intum/Artemis/commit/92f9f9cdef1fac62d0c539e8466618232988ba1a", "message": "Remove code duplication", "committedDate": "2020-12-02T18:04:56Z", "type": "commit"}, {"oid": "33eab59db9785bef97c4238a5dfe157f6861325b", "url": "https://github.com/ls1intum/Artemis/commit/33eab59db9785bef97c4238a5dfe157f6861325b", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T07:19:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg4OTIzOA==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r534889238", "bodyText": "This is a huge method and in my opinion has to be split into multiple smaller functions.\nAs a first the the function converts via login or registration number so I'd break this down into:\npublic List<Team> convertTeamsStudentsWithOnlyLoginToAlreadyRegisteredUsers(Course course, List<Team> teams);\npublic List<Team> convertTeamsStudentsWithRegistrationNumberToAlreadyRegisteredUsers(Course course, List<Team> teams);\nBut the method name is still really long so maybe you can try to split it even more.", "author": "ivanchimeno", "createdAt": "2020-12-03T08:16:36Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,76 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     */\n+    public List<Team> convertTeamsStudentsWithOnlyLoginOrRegistrationNumberToAlreadyRegisteredUsers(Course course, List<Team> teams) {", "originalCommit": "33eab59db9785bef97c4238a5dfe157f6861325b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2bbc1d3d41af88b40abbf4613fdb632c55a5f93", "url": "https://github.com/ls1intum/Artemis/commit/b2bbc1d3d41af88b40abbf4613fdb632c55a5f93", "message": "Remove unnecessary types and split convert teams function", "committedDate": "2020-12-03T11:34:41Z", "type": "commit"}, {"oid": "eb7299134086938b6832e80cbfbaf06723ad2178", "url": "https://github.com/ls1intum/Artemis/commit/eb7299134086938b6832e80cbfbaf06723ad2178", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T11:34:51Z", "type": "commit"}, {"oid": "01ffe4999e161ec0bafb4d5fa52e86238b78b9a7", "url": "https://github.com/ls1intum/Artemis/commit/01ffe4999e161ec0bafb4d5fa52e86238b78b9a7", "message": "Merge branch 'enhancement/team/export-import-teams' of github.com:ls1intum/Artemis into enhancement/team/export-import-teams", "committedDate": "2020-12-03T11:35:48Z", "type": "commit"}, {"oid": "abb59a3099c0d7635c6e8464878f7792684cf57b", "url": "https://github.com/ls1intum/Artemis/commit/abb59a3099c0d7635c6e8464878f7792684cf57b", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T12:32:42Z", "type": "commit"}, {"oid": "8d6ab97e5391a892bb7cfc4cd14bc3d7d75cf117", "url": "https://github.com/ls1intum/Artemis/commit/8d6ab97e5391a892bb7cfc4cd14bc3d7d75cf117", "message": "Fix export error", "committedDate": "2020-12-03T14:41:48Z", "type": "commit"}, {"oid": "73a3fa9299a09f70c283030b53fb486c3b492463", "url": "https://github.com/ls1intum/Artemis/commit/73a3fa9299a09f70c283030b53fb486c3b492463", "message": "Merge branch 'enhancement/team/export-import-teams' of github.com:ls1intum/Artemis into enhancement/team/export-import-teams", "committedDate": "2020-12-03T14:42:25Z", "type": "commit"}, {"oid": "49a7c3f988da30752fc8b735c889f980c20ae12f", "url": "https://github.com/ls1intum/Artemis/commit/49a7c3f988da30752fc8b735c889f980c20ae12f", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T14:43:04Z", "type": "commit"}, {"oid": "0cafdb849532b10c59af320932a203b67d6e571d", "url": "https://github.com/ls1intum/Artemis/commit/0cafdb849532b10c59af320932a203b67d6e571d", "message": "Merge branch 'enhancement/team/export-import-teams' of github.com:ls1intum/Artemis into enhancement/team/export-import-teams", "committedDate": "2020-12-03T14:43:21Z", "type": "commit"}, {"oid": "8df5cb9ec0bbfecd3360ee8a858d380430b7c758", "url": "https://github.com/ls1intum/Artemis/commit/8df5cb9ec0bbfecd3360ee8a858d380430b7c758", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T16:25:45Z", "type": "commit"}, {"oid": "27643dd67cbccfc7b61b1895d268162c6c06fb3a", "url": "https://github.com/ls1intum/Artemis/commit/27643dd67cbccfc7b61b1895d268162c6c06fb3a", "message": "Return converted teams without additional variable", "committedDate": "2020-12-03T16:44:41Z", "type": "commit"}, {"oid": "28eefeb03df1427a403a8b49e5c1523e164c536c", "url": "https://github.com/ls1intum/Artemis/commit/28eefeb03df1427a403a8b49e5c1523e164c536c", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T18:10:24Z", "type": "commit"}, {"oid": "49e6a232ee36b1755827f7d5bc62ae5b311db021", "url": "https://github.com/ls1intum/Artemis/commit/49e6a232ee36b1755827f7d5bc62ae5b311db021", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T19:02:18Z", "type": "commit"}, {"oid": "bb6bd891a7a0a740d2ccdcdbf4022fedc64ed9b7", "url": "https://github.com/ls1intum/Artemis/commit/bb6bd891a7a0a740d2ccdcdbf4022fedc64ed9b7", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-03T22:16:49Z", "type": "commit"}, {"oid": "07589c4d88c30df57e316d5d0fc302b96457220f", "url": "https://github.com/ls1intum/Artemis/commit/07589c4d88c30df57e316d5d0fc302b96457220f", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-04T11:50:44Z", "type": "commit"}, {"oid": "645cf2ccc791587b565a00b855e8fe8a4bce1e61", "url": "https://github.com/ls1intum/Artemis/commit/645cf2ccc791587b565a00b855e8fe8a4bce1e61", "message": "Add more documentation, split big functions and reduce unnecessary variables", "committedDate": "2020-12-04T15:51:59Z", "type": "commit"}, {"oid": "67c970f4ad7a94b4ab8cf41f626213048c945f70", "url": "https://github.com/ls1intum/Artemis/commit/67c970f4ad7a94b4ab8cf41f626213048c945f70", "message": "Fix lint errors", "committedDate": "2020-12-04T16:07:08Z", "type": "commit"}, {"oid": "b056a1e72604682cb7c2ae69b57e2c5146776640", "url": "https://github.com/ls1intum/Artemis/commit/b056a1e72604682cb7c2ae69b57e2c5146776640", "message": "Fix find identifiers function name", "committedDate": "2020-12-04T18:03:46Z", "type": "commit"}, {"oid": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "url": "https://github.com/ls1intum/Artemis/commit/e9fa643c54ca3b54fa1600cf58a615091e3409a5", "message": "Merge branch 'develop' into enhancement/team/export-import-teams", "committedDate": "2020-12-06T07:43:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk3OTkzMg==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536979932", "bodyText": "I would appreciate some inline comments here", "author": "krusche", "createdAt": "2020-12-06T07:44:06Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins\n+     *\n+     * @param logins Logins to find users with\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromLogins(List<String> logins, String groupName) {\n+        List<User> existingStudentsWithLogin = new ArrayList<>();\n+        List<String> notFoundLogins = new ArrayList<>();\n+        if (groupName != null && logins != null && !logins.isEmpty()) {\n+            existingStudentsWithLogin = userRepository.findAllByLoginsInGroup(groupName, new HashSet<>(logins));\n+            List<String> existingLogins = existingStudentsWithLogin.stream().map(User::getLogin).collect(Collectors.toList());\n+            notFoundLogins = logins.stream().filter(login -> !existingLogins.contains(login)).collect(Collectors.toList());\n+        }\n+        return Pair.of(existingStudentsWithLogin, notFoundLogins);\n+    }\n+\n+    /**\n+     * Returns students in database that has given registration numbers\n+     *\n+     * @param registrationNumbers Registration numbers to find users with\n+     * @param logins Logins to find if there is any users with given login found, throws error if there is any\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given registration numbers\n+     * @throws StudentsAppearMultipleTimesException if any user has one of the given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromRegistrationNumbers(List<String> registrationNumbers, List<String> logins, String groupName) {\n+        List<User> existingStudentsWithRegistrationNumber = new ArrayList<>();\n+        List<String> notFoundRegistrationNumbers = new ArrayList<>();\n+        if (groupName != null && logins != null && registrationNumbers != null && !registrationNumbers.isEmpty()) {\n+            existingStudentsWithRegistrationNumber = userRepository.findAllByRegistrationNumbersInGroup(groupName, new HashSet<>(registrationNumbers));\n+            List<User> usersWhoAppearsMoreThanOnce = existingStudentsWithRegistrationNumber.stream().filter(student -> logins.contains(student.getLogin()))\n+                    .collect(Collectors.toList());\n+            if (!usersWhoAppearsMoreThanOnce.isEmpty()) {\n+                throw new StudentsAppearMultipleTimesException(usersWhoAppearsMoreThanOnce);\n+            }\n+            List<String> existingRegistrationNumbers = existingStudentsWithRegistrationNumber.stream().map(User::getRegistrationNumber).collect(Collectors.toList());\n+            notFoundRegistrationNumbers = registrationNumbers.stream().filter(registrationNumber -> !existingRegistrationNumbers.contains(registrationNumber))\n+                    .collect(Collectors.toList());\n+        }\n+        return Pair.of(existingStudentsWithRegistrationNumber, notFoundRegistrationNumbers);\n+    }\n+\n+    /**\n+     * Converts teams' students with only login or registration number to students on given maps\n+     *\n+     * @param teams Course in which the users will be searched\n+     * @param studentsWithLogin A map that contains logins as keys and users as values\n+     * @param studentsWithRegistrationNumber A map that contains registration numbers as keys and users as values\n+     * @return list of teams that now contains students in given maps\n+     */\n+    private List<Team> convertTeamsStudentsToUsersInMaps(List<Team> teams, Map<String, User> studentsWithLogin, Map<String, User> studentsWithRegistrationNumber) {\n+        List<Team> convertedTeams = new ArrayList<>();\n+\n+        teams.forEach(team -> {", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk3OTk2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536979967", "bodyText": "I would appreciate some inline comments here", "author": "krusche", "createdAt": "2020-12-06T07:44:15Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins\n+     *\n+     * @param logins Logins to find users with\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromLogins(List<String> logins, String groupName) {\n+        List<User> existingStudentsWithLogin = new ArrayList<>();\n+        List<String> notFoundLogins = new ArrayList<>();\n+        if (groupName != null && logins != null && !logins.isEmpty()) {\n+            existingStudentsWithLogin = userRepository.findAllByLoginsInGroup(groupName, new HashSet<>(logins));\n+            List<String> existingLogins = existingStudentsWithLogin.stream().map(User::getLogin).collect(Collectors.toList());\n+            notFoundLogins = logins.stream().filter(login -> !existingLogins.contains(login)).collect(Collectors.toList());\n+        }\n+        return Pair.of(existingStudentsWithLogin, notFoundLogins);\n+    }\n+\n+    /**\n+     * Returns students in database that has given registration numbers\n+     *\n+     * @param registrationNumbers Registration numbers to find users with\n+     * @param logins Logins to find if there is any users with given login found, throws error if there is any\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given registration numbers\n+     * @throws StudentsAppearMultipleTimesException if any user has one of the given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromRegistrationNumbers(List<String> registrationNumbers, List<String> logins, String groupName) {\n+        List<User> existingStudentsWithRegistrationNumber = new ArrayList<>();\n+        List<String> notFoundRegistrationNumbers = new ArrayList<>();\n+        if (groupName != null && logins != null && registrationNumbers != null && !registrationNumbers.isEmpty()) {", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDA4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980086", "bodyText": "this is a bit short, please elaborate more why this is needed", "author": "krusche", "createdAt": "2020-12-06T07:44:53Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDE1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980153", "bodyText": "I would appreciate some inline comments here", "author": "krusche", "createdAt": "2020-12-06T07:45:25Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());\n+        List<User> existingStudentsWithLogin = existingStudentsAndNotFoundLoginsPair.getFirst();\n+        List<String> notFoundLogins = existingStudentsAndNotFoundLoginsPair.getSecond();\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundRegistrationNumbersPair = getUsersFromRegistrationNumbers(registrationNumbers, logins,\n+                course.getStudentGroupName());\n+        List<User> existingStudentsWithRegistrationNumber = existingStudentsAndNotFoundRegistrationNumbersPair.getFirst();\n+        List<String> notFoundRegistrationNumbers = existingStudentsAndNotFoundRegistrationNumbersPair.getSecond();\n+        if (!notFoundLogins.isEmpty() || !notFoundRegistrationNumbers.isEmpty()) {\n+            throw new StudentsNotFoundException(notFoundRegistrationNumbers, notFoundLogins);\n+        }\n+\n+        Map<String, User> studentsWithLogin = existingStudentsWithLogin.stream().collect(Collectors.toMap(User::getLogin, Function.identity()));\n+        Map<String, User> studentsWithRegistrationNumber = existingStudentsWithRegistrationNumber.stream()\n+                .collect(Collectors.toMap(User::getRegistrationNumber, Function.identity()));\n+\n+        return convertTeamsStudentsToUsersInMaps(teams, studentsWithLogin, studentsWithRegistrationNumber);\n+    }\n+\n+    /**\n+     * Returns students in database that has given logins\n+     *\n+     * @param logins Logins to find users with\n+     * @param groupName Group in which users will be searched\n+     * @return list of users with given logins\n+     */\n+    private Pair<List<User>, List<String>> getUsersFromLogins(List<String> logins, String groupName) {\n+        List<User> existingStudentsWithLogin = new ArrayList<>();\n+        List<String> notFoundLogins = new ArrayList<>();\n+        if (groupName != null && logins != null && !logins.isEmpty()) {\n+            existingStudentsWithLogin = userRepository.findAllByLoginsInGroup(groupName, new HashSet<>(logins));", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDIzMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980231", "bodyText": "I would appreciate some inline comments here", "author": "krusche", "createdAt": "2020-12-06T07:45:56Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TeamService.java", "diffHunk": "@@ -205,6 +224,121 @@ public Team save(Exercise exercise, Team team) {\n         return teamRepository.findAllByExerciseId(destinationExercise.getId());\n     }\n \n+    /**\n+     * Converts teams' students with only login or registration number to students on database\n+     *\n+     * @param course Course in which the users will be searched\n+     * @param teams Teams that students are described only by login or visible registration number\n+     * @return list of all teams that now have registered users\n+     * @throws BadRequestAlertException if there is any student without login and registration number\n+     * @throws StudentsNotFoundException if there is any student does not exist in course's students\n+     * @throws StudentsAppearMultipleTimesException if a student appears in multiple teams\n+     */\n+    public List<Team> convertTeamsStudentsToUsersInDatabase(Course course, List<Team> teams) {\n+        List<User> students = teams.stream().flatMap(team -> team.getStudents().stream()).collect(Collectors.toList());\n+        List<String> logins = students.stream().filter(student -> student.getLogin() != null).map(User::getLogin).collect(Collectors.toList());\n+        List<String> registrationNumbers = students.stream().filter(student -> student.getLogin() == null && student.getVisibleRegistrationNumber() != null)\n+                .map(User::getVisibleRegistrationNumber).collect(Collectors.toList());\n+        if (students.stream().count() != logins.stream().count() + registrationNumbers.stream().count()) {\n+            throw new BadRequestAlertException(\"Students do not have an identifier\", TeamResource.ENTITY_NAME, \"studentIdentifierNotFound\", true);\n+        }\n+\n+        Pair<List<User>, List<String>> existingStudentsAndNotFoundLoginsPair = getUsersFromLogins(logins, course.getStudentGroupName());", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDQ4NA==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r536980484", "bodyText": "why is this a PUT mapping? If we add new objects into the database, should we not use POST instead?", "author": "krusche", "createdAt": "2020-12-06T07:47:26Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/TeamResource.java", "diffHunk": "@@ -317,12 +320,54 @@ public TeamResource(TeamRepository teamRepository, TeamService teamService, Team\n         return ResponseEntity.ok().body(teamService.searchByLoginOrNameInCourseForExerciseTeam(course, exercise, loginOrName));\n     }\n \n+    /**\n+     * PUT /exercises/:destinationExerciseId/teams/import-from-file : add given teams into exercise\n+     *\n+     * @param exerciseId         the exercise id of the exercise for which to import teams\n+     * @param teams              teams whose students have login or registration number as identifiers\n+     * @param importStrategyType the import strategy to use when importing the teams\n+     * @return the ResponseEntity with status 200 (OK) and the list of created teams in body\n+     */\n+    @PutMapping(\"/exercises/{exerciseId}/teams/import-from-list\")", "originalCommit": "e9fa643c54ca3b54fa1600cf58a615091e3409a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0OTA1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2476#discussion_r537749059", "bodyText": "I believe PUT is a valid option here since there is a possibility that it deletes the existing teams. So it is more like updating exercise's teams. It was also a put request for importing from exercise.", "author": "iozbeyli", "createdAt": "2020-12-07T18:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDQ4NA=="}], "type": "inlineReview"}]}