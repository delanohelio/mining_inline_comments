{"pr_number": 1581, "pr_title": "[Exam] Variants: Data model", "pr_createdAt": "2020-06-05T19:33:36Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1581", "timeline": [{"oid": "3093e6638e3d69851240631e2af938fe5db413dd", "url": "https://github.com/ls1intum/Artemis/commit/3093e6638e3d69851240631e2af938fe5db413dd", "message": "Create new entities for exam mode", "committedDate": "2020-06-05T17:38:47Z", "type": "commit"}, {"oid": "4362dacf9f109d8970739d1daf4cdbfe40c2cd5a", "url": "https://github.com/ls1intum/Artemis/commit/4362dacf9f109d8970739d1daf4cdbfe40c2cd5a", "message": "Add DTO for Exam entity", "committedDate": "2020-06-05T17:41:35Z", "type": "commit"}, {"oid": "ee4e3b00b89da82d73f4a26c6593e4c633754ee4", "url": "https://github.com/ls1intum/Artemis/commit/ee4e3b00b89da82d73f4a26c6593e4c633754ee4", "message": "Bidirectional relationship between course and exam", "committedDate": "2020-06-05T18:40:13Z", "type": "commit"}, {"oid": "d234fd0609fb8d4193009c1bb86813b98e58fecb", "url": "https://github.com/ls1intum/Artemis/commit/d234fd0609fb8d4193009c1bb86813b98e58fecb", "message": "Add maxScore to ExamInstructorDTO", "committedDate": "2020-06-05T19:26:26Z", "type": "commit"}, {"oid": "fc68862c49a22b72ed139e25fe6fc4db6b7399f6", "url": "https://github.com/ls1intum/Artemis/commit/fc68862c49a22b72ed139e25fe6fc4db6b7399f6", "message": "Add mandatory flag to ExerciseGroup", "committedDate": "2020-06-05T19:59:35Z", "type": "commit"}, {"oid": "815f90f304a7386f67ae49814ea372ba2c3b98f3", "url": "https://github.com/ls1intum/Artemis/commit/815f90f304a7386f67ae49814ea372ba2c3b98f3", "message": "Add getters and setters to new entities", "committedDate": "2020-06-05T20:01:08Z", "type": "commit"}, {"oid": "e7775344581c053643f21cb55d304c4f14c7bc4b", "url": "https://github.com/ls1intum/Artemis/commit/e7775344581c053643f21cb55d304c4f14c7bc4b", "message": "Merge branch 'develop' into exam-mode/variants/data-model", "committedDate": "2020-06-05T20:02:14Z", "type": "commit"}, {"oid": "c97c3ef5e07fd83bce706846121e0557794b1d76", "url": "https://github.com/ls1intum/Artemis/commit/c97c3ef5e07fd83bce706846121e0557794b1d76", "message": "Add entities in client", "committedDate": "2020-06-05T21:00:11Z", "type": "commit"}, {"oid": "e3902ebdd8e2362017dc74f62c3b5bd734468060", "url": "https://github.com/ls1intum/Artemis/commit/e3902ebdd8e2362017dc74f62c3b5bd734468060", "message": "Updated new Entities for Exam Mode", "committedDate": "2020-06-06T23:02:25Z", "type": "commit"}, {"oid": "4ab1cbec3b23eb0a03e8af1b76392674e7abc206", "url": "https://github.com/ls1intum/Artemis/commit/4ab1cbec3b23eb0a03e8af1b76392674e7abc206", "message": "Added Connection COURSE-EXAM", "committedDate": "2020-06-06T23:03:25Z", "type": "commit"}, {"oid": "22941805727ace2aea32df626280615aad33e733", "url": "https://github.com/ls1intum/Artemis/commit/22941805727ace2aea32df626280615aad33e733", "message": "Added Connection USER-EXAM and USER-STUDENTEXAM", "committedDate": "2020-06-06T23:04:41Z", "type": "commit"}, {"oid": "e0b2884a076c9ec5ad2b4f5dd4a9dfb913610051", "url": "https://github.com/ls1intum/Artemis/commit/e0b2884a076c9ec5ad2b4f5dd4a9dfb913610051", "message": "Added Connection EXERCISE-EXERCISE_GROUP and EXERCISE-STUDENT_EXAM", "committedDate": "2020-06-06T23:05:49Z", "type": "commit"}, {"oid": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "url": "https://github.com/ls1intum/Artemis/commit/c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "message": "Added Constructor to ExerciseGroup", "committedDate": "2020-06-06T23:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDgyNA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340824", "bodyText": "Is there a reason for writing column names in caps? I don't think we've done this in the project so far.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinColumn(name = \"EXERCISE_GROUP_ID\")\n          \n          \n            \n                @JoinColumn(name = \"exercise_group_id\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:55:05Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -153,6 +191,15 @@\n     @JsonIgnore\n     private Set<ExerciseHint> exerciseHints = new HashSet<>();\n \n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"EXERCISE_GROUP_ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDg5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Table(name = \"EXERCISE_GROUP\")\n          \n          \n            \n            @Table(name = \"exercise_group\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:55:47Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"EXERCISE_GROUP\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDkyMw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340923", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"ID\")\n          \n          \n            \n                @Column(name = \"id\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:56:01Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"EXERCISE_GROUP\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.title = title;\n+        this.isMandatory = isMandatory;\n+        this.positionInExam = positionInExam;\n+        this.exam = exam;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDk0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340941", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"TITLE\")\n          \n          \n            \n                @Column(name = \"title\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:56:17Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"EXERCISE_GROUP\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.title = title;\n+        this.isMandatory = isMandatory;\n+        this.positionInExam = positionInExam;\n+        this.exam = exam;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDk2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"IS_MANDATORY\", nullable = false)\n          \n          \n            \n                @Column(name = \"is_mandatory\", nullable = false)", "author": "JonasPetry", "createdAt": "2020-06-07T08:56:38Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"EXERCISE_GROUP\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.title = title;\n+        this.isMandatory = isMandatory;\n+        this.positionInExam = positionInExam;\n+        this.exam = exam;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")\n+    private String title;\n+\n+    /**\n+     * Mandatory exercise groups need to be included in the exam\n+     */\n+    @Column(name = \"IS_MANDATORY\", nullable = false)", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDk4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340983", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"POSITION_IN_EXAM\", nullable = false)\n          \n          \n            \n                @Column(name = \"position_in_exam\", nullable = false)", "author": "JonasPetry", "createdAt": "2020-06-07T08:56:56Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"EXERCISE_GROUP\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.title = title;\n+        this.isMandatory = isMandatory;\n+        this.positionInExam = positionInExam;\n+        this.exam = exam;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")\n+    private String title;\n+\n+    /**\n+     * Mandatory exercise groups need to be included in the exam\n+     */\n+    @Column(name = \"IS_MANDATORY\", nullable = false)\n+    private Boolean isMandatory = true;\n+\n+    /**\n+     * Specifies the position of this exercise group if it is used in an exam\n+     */\n+    @Column(name = \"POSITION_IN_EXAM\", nullable = false)", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MDk5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436340995", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinColumn(name = \"EXAM_ID\")\n          \n          \n            \n                @JoinColumn(name = \"exam_id\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:57:10Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"EXERCISE_GROUP\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.title = title;\n+        this.isMandatory = isMandatory;\n+        this.positionInExam = positionInExam;\n+        this.exam = exam;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\")\n+    private String title;\n+\n+    /**\n+     * Mandatory exercise groups need to be included in the exam\n+     */\n+    @Column(name = \"IS_MANDATORY\", nullable = false)\n+    private Boolean isMandatory = true;\n+\n+    /**\n+     * Specifies the position of this exercise group if it is used in an exam\n+     */\n+    @Column(name = \"POSITION_IN_EXAM\", nullable = false)\n+    private Integer positionInExam = 1;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"EXAM_ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTAzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341037", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Table(name = \"EXAM\")\n          \n          \n            \n            @Table(name = \"exam\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:57:40Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTA2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"ID\")\n          \n          \n            \n                @Column(name = \"id\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:57:54Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTA5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341090", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"TITLE\", unique = true, nullable = false)\n          \n          \n            \n                @Column(name = \"title\", unique = true, nullable = false)", "author": "JonasPetry", "createdAt": "2020-06-07T08:58:12Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTExNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341115", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"VISIBLE_DATE\")\n          \n          \n            \n                @Column(name = \"visible_date\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:58:30Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTEyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"START_DATE\")\n          \n          \n            \n                @Column(name = \"start_date\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:58:46Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTE0NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"END_DATE\")\n          \n          \n            \n                @Column(name = \"end_date\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:59:03Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTE1Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"START_TEXT\")\n          \n          \n            \n                @Column(name = \"start_text\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:59:14Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTE2OA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"END_TEXT\")\n          \n          \n            \n                @Column(name = \"end_text\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:59:25Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")\n+    private String startText;\n+\n+    @Column(name = \"END_TEXT\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTE4OA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341188", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"CONFIRMATION_START_TEXT\")\n          \n          \n            \n                @Column(name = \"confirmation_start_text\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:59:42Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")\n+    private String startText;\n+\n+    @Column(name = \"END_TEXT\")\n+    private String endText;\n+\n+    @Column(name = \"CONFIRMATION_START_TEXT\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTIyMg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341222", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"CONFIRMATION_END_TEXT\")\n          \n          \n            \n                @Column(name = \"confirmation_end_text\")", "author": "JonasPetry", "createdAt": "2020-06-07T08:59:59Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")\n+    private String startText;\n+\n+    @Column(name = \"END_TEXT\")\n+    private String endText;\n+\n+    @Column(name = \"CONFIRMATION_START_TEXT\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"CONFIRMATION_END_TEXT\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTI1NA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"NUMBER_OF_EXERCISE_GROUPS\")\n          \n          \n            \n                @Column(name = \"number_of_exercise_groups\")", "author": "JonasPetry", "createdAt": "2020-06-07T09:00:17Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")\n+    private String startText;\n+\n+    @Column(name = \"END_TEXT\")\n+    private String endText;\n+\n+    @Column(name = \"CONFIRMATION_START_TEXT\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"CONFIRMATION_END_TEXT\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"NUMBER_OF_EXERCISE_GROUPS\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTI3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341275", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinColumn(name = \"COURSE_ID\")\n          \n          \n            \n                @JoinColumn(name = \"course_id\")", "author": "JonasPetry", "createdAt": "2020-06-07T09:00:37Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")\n+    private String startText;\n+\n+    @Column(name = \"END_TEXT\")\n+    private String endText;\n+\n+    @Column(name = \"CONFIRMATION_START_TEXT\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"CONFIRMATION_END_TEXT\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"NUMBER_OF_EXERCISE_GROUPS\")\n+    private Integer numberOfExerciseGroups;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"COURSE_ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTM3MA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341370", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinTable(name = \"EXAM_JHI_USER\", joinColumns = @JoinColumn(name = \"EXAM_ID\", referencedColumnName = \"ID\"), inverseJoinColumns = @JoinColumn(name = \"STUDENT_ID\", referencedColumnName = \"ID\"))\n          \n          \n            \n                @JoinTable(name = \"exam_jhi_user\", joinColumns = @JoinColumn(name = \"exam_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"student_id\", referencedColumnName = \"id\"))", "author": "JonasPetry", "createdAt": "2020-06-07T09:01:29Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"EXAM\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"TITLE\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"VISIBLE_DATE\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"START_DATE\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"END_DATE\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"START_TEXT\")\n+    private String startText;\n+\n+    @Column(name = \"END_TEXT\")\n+    private String endText;\n+\n+    @Column(name = \"CONFIRMATION_START_TEXT\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"CONFIRMATION_END_TEXT\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"NUMBER_OF_EXERCISE_GROUPS\")\n+    private Integer numberOfExerciseGroups;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"COURSE_ID\")\n+    private Course course;\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        if (this.course != null) {\n+            this.course.removeExam(this);\n+        }\n+\n+        this.course = course;\n+        if (!course.getExams().contains(this)) {\n+            course.getExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<ExerciseGroup> exerciseGroups = new HashSet<>();\n+\n+    public Set<ExerciseGroup> getExerciseGroups() {\n+        return exerciseGroups;\n+    }\n+\n+    public void setExerciseGroups(Set<ExerciseGroup> exerciseGroups) {\n+        this.exerciseGroups = exerciseGroups;\n+    }\n+\n+    public void addExerciseGroup(ExerciseGroup exerciseGroup) {\n+        this.exerciseGroups.add(exerciseGroup);\n+        if (exerciseGroup.getExam() != this) {\n+            exerciseGroup.setExam(this);\n+        }\n+    }\n+\n+    public void removeExerciseGroup(ExerciseGroup exerciseGroup) {\n+        this.exerciseGroups.remove(exerciseGroup);\n+        if (exerciseGroup.getExam() == this) {\n+            exerciseGroup.setExam(null);\n+        }\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<StudentExam> studentExams = new HashSet<>();\n+\n+    public Set<StudentExam> getStudentExams() {\n+        return studentExams;\n+    }\n+\n+    public void setStudentExams(Set<StudentExam> studentExams) {\n+        this.studentExams = studentExams;\n+    }\n+\n+    public void addStudentExam(StudentExam studentExam) {\n+        this.studentExams.add(studentExam);\n+        if (studentExam.getExam() != this) {\n+            studentExam.setExam(this);\n+        }\n+    }\n+\n+    public void removeStudentExam(StudentExam studentExam) {\n+        this.studentExams.remove(studentExam);\n+        if (studentExam.getExam() == this) {\n+            studentExam.setExam(null);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToMany\n+    @JoinTable(name = \"EXAM_JHI_USER\", joinColumns = @JoinColumn(name = \"EXAM_ID\", referencedColumnName = \"ID\"), inverseJoinColumns = @JoinColumn(name = \"STUDENT_ID\", referencedColumnName = \"ID\"))", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTQwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341406", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Table(name = \"STUDENT_EXAM\")\n          \n          \n            \n            @Table(name = \"student_exam\")", "author": "JonasPetry", "createdAt": "2020-06-07T09:01:57Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"STUDENT_EXAM\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTQxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Column(name = \"ID\")\n          \n          \n            \n                @Column(name = \"id\")", "author": "JonasPetry", "createdAt": "2020-06-07T09:02:10Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"STUDENT_EXAM\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTQ1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341451", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinColumn(name = \"EXAM_ID\")\n          \n          \n            \n                @JoinColumn(name = \"exam_id\")", "author": "JonasPetry", "createdAt": "2020-06-07T09:02:28Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"STUDENT_EXAM\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"EXAM_ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTQ2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinColumn(name = \"USER_ID\")\n          \n          \n            \n                @JoinColumn(name = \"user_id\")", "author": "JonasPetry", "createdAt": "2020-06-07T09:02:41Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"STUDENT_EXAM\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"EXAM_ID\")\n+    private Exam exam;\n+\n+    public Exam getExam() {\n+        return exam;\n+    }\n+\n+    public void setExam(Exam exam) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"USER_ID\")", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTUyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436341527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @JoinTable(name = \"STUDENT_EXAM_EXERCISE\", joinColumns = @JoinColumn(name = \"STUDENT_EXAM_ID\", referencedColumnName = \"ID\"), inverseJoinColumns = @JoinColumn(name = \"EXERCISE_ID\", referencedColumnName = \"ID\"))\n          \n          \n            \n                @JoinTable(name = \"student_exam_exercise\", joinColumns = @JoinColumn(name = \"student_exam_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))", "author": "JonasPetry", "createdAt": "2020-06-07T09:03:29Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"STUDENT_EXAM\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"ID\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"EXAM_ID\")\n+    private Exam exam;\n+\n+    public Exam getExam() {\n+        return exam;\n+    }\n+\n+    public void setExam(Exam exam) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"USER_ID\")\n+    private User user;\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(User user) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToMany\n+    @JoinTable(name = \"STUDENT_EXAM_EXERCISE\", joinColumns = @JoinColumn(name = \"STUDENT_EXAM_ID\", referencedColumnName = \"ID\"), inverseJoinColumns = @JoinColumn(name = \"EXERCISE_ID\", referencedColumnName = \"ID\"))", "originalCommit": "c2a9d94ba51c6130bc60e0a5774d1b6676dc17fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "801b217b1267a862ae205d427b90448dac4848f4", "url": "https://github.com/ls1intum/Artemis/commit/801b217b1267a862ae205d427b90448dac4848f4", "message": "Changed Database Stuff to lower case", "committedDate": "2020-06-07T09:33:13Z", "type": "commit"}, {"oid": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "url": "https://github.com/ls1intum/Artemis/commit/0eea3443ad3bc2b18866714ec1998d885b3785b9", "message": "Made exam table lower case", "committedDate": "2020-06-07T09:35:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjI5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346296", "bodyText": "please leave this out for now, because we don't need this reference to be bidirectional", "author": "krusche", "createdAt": "2020-06-07T10:03:35Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Exercise.java", "diffHunk": "@@ -153,6 +191,15 @@\n     @JsonIgnore\n     private Set<ExerciseHint> exerciseHints = new HashSet<>();\n \n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"EXERCISE_GROUP_ID\")\n+    @JsonIgnore\n+    private ExerciseGroup exerciseGroup;\n+\n+    @ManyToMany(mappedBy = \"exercises\")\n+    @JsonIgnore\n+    private Set<StudentExam> studentExams = new HashSet<>();", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjM0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346349", "bodyText": "why is it an abstract auditing entity? should not be necessary!", "author": "krusche", "createdAt": "2020-06-07T10:04:11Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"exercise_group\")\n+public class ExerciseGroup extends AbstractAuditingEntity {", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjM2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346367", "bodyText": "I would try to avoid the use of constructors", "author": "krusche", "createdAt": "2020-06-07T10:04:25Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"exercise_group\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjQyMw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346423", "bodyText": "please remove this attribute. We should rather use an ordered collection for Exam --> ExerciseGroup", "author": "krusche", "createdAt": "2020-06-07T10:05:07Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/ExerciseGroup.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+\n+@Entity\n+@Table(name = \"exercise_group\")\n+public class ExerciseGroup extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public ExerciseGroup() {\n+    }\n+\n+    public ExerciseGroup(Long id, String title, Boolean isMandatory, Integer positionInExam, Exam exam, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.title = title;\n+        this.isMandatory = isMandatory;\n+        this.positionInExam = positionInExam;\n+        this.exam = exam;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    /**\n+     * Mandatory exercise groups need to be included in the exam\n+     */\n+    @Column(name = \"is_mandatory\", nullable = false)\n+    private Boolean isMandatory = true;\n+\n+    /**\n+     * Specifies the position of this exercise group if it is used in an exam\n+     */\n+    @Column(name = \"position_in_exam\", nullable = false)\n+    private Integer positionInExam = 1;", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjQ1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346451", "bodyText": "Please remove this. It won't be necessary", "author": "krusche", "createdAt": "2020-06-07T10:05:28Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/User.java", "diffHunk": "@@ -117,6 +136,14 @@\n     @BatchSize(size = 20)\n     private Set<Authority> authorities = new HashSet<>();\n \n+    @ManyToMany(mappedBy = \"registeredUsers\")\n+    @JsonIgnore\n+    private Set<Exam> exams = new HashSet<>();", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjQ1Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346457", "bodyText": "Please remove this. It won't be necessary", "author": "krusche", "createdAt": "2020-06-07T10:05:34Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/User.java", "diffHunk": "@@ -117,6 +136,14 @@\n     @BatchSize(size = 20)\n     private Set<Authority> authorities = new HashSet<>();\n \n+    @ManyToMany(mappedBy = \"registeredUsers\")\n+    @JsonIgnore\n+    private Set<Exam> exams = new HashSet<>();\n+\n+    @OneToMany(mappedBy = \"user\")\n+    @JsonIgnore\n+    private Set<StudentExam> studentExams = new HashSet<>();", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjU0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346542", "bodyText": "I would try to avoid the use of constructors", "author": "krusche", "createdAt": "2020-06-07T10:06:31Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjU1OA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346558", "bodyText": "why is it an abstract auditing entity? should not be necessary", "author": "krusche", "createdAt": "2020-06-07T10:06:44Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjU5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346594", "bodyText": "please use a List and OrderColumn here\nHave a look how this is implemented for Result --> Feedback in Result.java:99", "author": "krusche", "createdAt": "2020-06-07T10:07:15Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"visible_date\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"start_date\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"end_date\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"start_text\")\n+    private String startText;\n+\n+    @Column(name = \"end_text\")\n+    private String endText;\n+\n+    @Column(name = \"confirmation_start_text\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"confirmation_end_text\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"number_of_exercise_groups\")\n+    private Integer numberOfExerciseGroups;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"course_id\")\n+    private Course course;\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        if (this.course != null) {\n+            this.course.removeExam(this);\n+        }\n+\n+        this.course = course;\n+        if (!course.getExams().contains(this)) {\n+            course.getExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<ExerciseGroup> exerciseGroups = new HashSet<>();", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njc2MA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346760", "bodyText": "I think this is wrong. We should use the id here!", "author": "krusche", "createdAt": "2020-06-07T10:09:25Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"visible_date\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"start_date\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"end_date\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"start_text\")\n+    private String startText;\n+\n+    @Column(name = \"end_text\")\n+    private String endText;\n+\n+    @Column(name = \"confirmation_start_text\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"confirmation_end_text\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"number_of_exercise_groups\")\n+    private Integer numberOfExerciseGroups;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"course_id\")\n+    private Course course;\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        if (this.course != null) {\n+            this.course.removeExam(this);\n+        }\n+\n+        this.course = course;\n+        if (!course.getExams().contains(this)) {\n+            course.getExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<ExerciseGroup> exerciseGroups = new HashSet<>();\n+\n+    public Set<ExerciseGroup> getExerciseGroups() {\n+        return exerciseGroups;\n+    }\n+\n+    public void setExerciseGroups(Set<ExerciseGroup> exerciseGroups) {\n+        this.exerciseGroups = exerciseGroups;\n+    }\n+\n+    public void addExerciseGroup(ExerciseGroup exerciseGroup) {\n+        this.exerciseGroups.add(exerciseGroup);\n+        if (exerciseGroup.getExam() != this) {\n+            exerciseGroup.setExam(this);\n+        }\n+    }\n+\n+    public void removeExerciseGroup(ExerciseGroup exerciseGroup) {\n+        this.exerciseGroups.remove(exerciseGroup);\n+        if (exerciseGroup.getExam() == this) {\n+            exerciseGroup.setExam(null);\n+        }\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<StudentExam> studentExams = new HashSet<>();\n+\n+    public Set<StudentExam> getStudentExams() {\n+        return studentExams;\n+    }\n+\n+    public void setStudentExams(Set<StudentExam> studentExams) {\n+        this.studentExams = studentExams;\n+    }\n+\n+    public void addStudentExam(StudentExam studentExam) {\n+        this.studentExams.add(studentExam);\n+        if (studentExam.getExam() != this) {\n+            studentExam.setExam(this);\n+        }\n+    }\n+\n+    public void removeStudentExam(StudentExam studentExam) {\n+        this.studentExams.remove(studentExam);\n+        if (studentExam.getExam() == this) {\n+            studentExam.setExam(null);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToMany\n+    @JoinTable(name = \"exam_jhi_user\", joinColumns = @JoinColumn(name = \"exam_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"student_id\", referencedColumnName = \"id\"))\n+    private Set<User> registeredUsers = new HashSet<>();\n+\n+    public Set<User> getRegisteredUsers() {\n+        return registeredUsers;\n+    }\n+\n+    public void setRegisteredUsers(Set<User> registeredUsers) {\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    public void addUser(User user) {\n+        this.registeredUsers.add(user);\n+        user.getExams().remove(this);\n+    }\n+\n+    public void removeUser(User user) {\n+        this.registeredUsers.remove(user);\n+        user.getExams().remove(this);\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region SIMPLE GETTERS AND SETTERS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public ZonedDateTime getVisibleDate() {\n+        return visibleDate;\n+    }\n+\n+    public void setVisibleDate(ZonedDateTime visibleDate) {\n+        this.visibleDate = visibleDate;\n+    }\n+\n+    public ZonedDateTime getStartDate() {\n+        return startDate;\n+    }\n+\n+    public void setStartDate(ZonedDateTime startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+    public ZonedDateTime getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(ZonedDateTime endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+    public String getStartText() {\n+        return startText;\n+    }\n+\n+    public void setStartText(String startText) {\n+        this.startText = startText;\n+    }\n+\n+    public String getEndText() {\n+        return endText;\n+    }\n+\n+    public void setEndText(String endText) {\n+        this.endText = endText;\n+    }\n+\n+    public String getConfirmationStartText() {\n+        return confirmationStartText;\n+    }\n+\n+    public void setConfirmationStartText(String confirmationStartText) {\n+        this.confirmationStartText = confirmationStartText;\n+    }\n+\n+    public String getConfirmationEndText() {\n+        return confirmationEndText;\n+    }\n+\n+    public void setConfirmationEndText(String confirmationEndText) {\n+        this.confirmationEndText = confirmationEndText;\n+    }\n+\n+    public Integer getNumberOfExerciseGroups() {\n+        return numberOfExerciseGroups;\n+    }\n+\n+    public void setNumberOfExerciseGroups(Integer numberOfExerciseGroups) {\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+    }\n+\n+    // endregion\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // region HASHCODE AND EQUAL\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        Exam exam = (Exam) o;\n+        return Objects.equals(title, exam.title);", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njc2Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346763", "bodyText": "please use id", "author": "krusche", "createdAt": "2020-06-07T10:09:31Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"visible_date\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"start_date\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"end_date\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"start_text\")\n+    private String startText;\n+\n+    @Column(name = \"end_text\")\n+    private String endText;\n+\n+    @Column(name = \"confirmation_start_text\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"confirmation_end_text\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"number_of_exercise_groups\")\n+    private Integer numberOfExerciseGroups;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"course_id\")\n+    private Course course;\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        if (this.course != null) {\n+            this.course.removeExam(this);\n+        }\n+\n+        this.course = course;\n+        if (!course.getExams().contains(this)) {\n+            course.getExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<ExerciseGroup> exerciseGroups = new HashSet<>();\n+\n+    public Set<ExerciseGroup> getExerciseGroups() {\n+        return exerciseGroups;\n+    }\n+\n+    public void setExerciseGroups(Set<ExerciseGroup> exerciseGroups) {\n+        this.exerciseGroups = exerciseGroups;\n+    }\n+\n+    public void addExerciseGroup(ExerciseGroup exerciseGroup) {\n+        this.exerciseGroups.add(exerciseGroup);\n+        if (exerciseGroup.getExam() != this) {\n+            exerciseGroup.setExam(this);\n+        }\n+    }\n+\n+    public void removeExerciseGroup(ExerciseGroup exerciseGroup) {\n+        this.exerciseGroups.remove(exerciseGroup);\n+        if (exerciseGroup.getExam() == this) {\n+            exerciseGroup.setExam(null);\n+        }\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @OneToMany(mappedBy = \"exam\")\n+    private Set<StudentExam> studentExams = new HashSet<>();\n+\n+    public Set<StudentExam> getStudentExams() {\n+        return studentExams;\n+    }\n+\n+    public void setStudentExams(Set<StudentExam> studentExams) {\n+        this.studentExams = studentExams;\n+    }\n+\n+    public void addStudentExam(StudentExam studentExam) {\n+        this.studentExams.add(studentExam);\n+        if (studentExam.getExam() != this) {\n+            studentExam.setExam(this);\n+        }\n+    }\n+\n+    public void removeStudentExam(StudentExam studentExam) {\n+        this.studentExams.remove(studentExam);\n+        if (studentExam.getExam() == this) {\n+            studentExam.setExam(null);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToMany\n+    @JoinTable(name = \"exam_jhi_user\", joinColumns = @JoinColumn(name = \"exam_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"student_id\", referencedColumnName = \"id\"))\n+    private Set<User> registeredUsers = new HashSet<>();\n+\n+    public Set<User> getRegisteredUsers() {\n+        return registeredUsers;\n+    }\n+\n+    public void setRegisteredUsers(Set<User> registeredUsers) {\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    public void addUser(User user) {\n+        this.registeredUsers.add(user);\n+        user.getExams().remove(this);\n+    }\n+\n+    public void removeUser(User user) {\n+        this.registeredUsers.remove(user);\n+        user.getExams().remove(this);\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region SIMPLE GETTERS AND SETTERS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public ZonedDateTime getVisibleDate() {\n+        return visibleDate;\n+    }\n+\n+    public void setVisibleDate(ZonedDateTime visibleDate) {\n+        this.visibleDate = visibleDate;\n+    }\n+\n+    public ZonedDateTime getStartDate() {\n+        return startDate;\n+    }\n+\n+    public void setStartDate(ZonedDateTime startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+    public ZonedDateTime getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(ZonedDateTime endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+    public String getStartText() {\n+        return startText;\n+    }\n+\n+    public void setStartText(String startText) {\n+        this.startText = startText;\n+    }\n+\n+    public String getEndText() {\n+        return endText;\n+    }\n+\n+    public void setEndText(String endText) {\n+        this.endText = endText;\n+    }\n+\n+    public String getConfirmationStartText() {\n+        return confirmationStartText;\n+    }\n+\n+    public void setConfirmationStartText(String confirmationStartText) {\n+        this.confirmationStartText = confirmationStartText;\n+    }\n+\n+    public String getConfirmationEndText() {\n+        return confirmationEndText;\n+    }\n+\n+    public void setConfirmationEndText(String confirmationEndText) {\n+        this.confirmationEndText = confirmationEndText;\n+    }\n+\n+    public Integer getNumberOfExerciseGroups() {\n+        return numberOfExerciseGroups;\n+    }\n+\n+    public void setNumberOfExerciseGroups(Integer numberOfExerciseGroups) {\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+    }\n+\n+    // endregion\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // region HASHCODE AND EQUAL\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        Exam exam = (Exam) o;\n+        return Objects.equals(title, exam.title);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(title);", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjkyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Objects.hash(id);\n          \n          \n            \n                    return Objects.hashCode(getId());", "author": "krusche", "createdAt": "2020-06-07T10:11:26Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"student_exam\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"exam_id\")\n+    private Exam exam;\n+\n+    public Exam getExam() {\n+        return exam;\n+    }\n+\n+    public void setExam(Exam exam) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"user_id\")\n+    private User user;\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(User user) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToMany\n+    @JoinTable(name = \"student_exam_exercise\", joinColumns = @JoinColumn(name = \"student_exam_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+    public Set<Exercise> getExercises() {\n+        return exercises;\n+    }\n+\n+    public void setExercises(Set<Exercise> exercises) {\n+        this.exercises = exercises;\n+    }\n+\n+    public void addExercise(Exercise exercise) {\n+        this.exercises.add(exercise);\n+        exercise.getStudentExams().add(this);\n+    }\n+\n+    public void removeExercise(Exercise exercise) {\n+        this.exercises.remove(exercise);\n+        exercise.getStudentExams().remove(this);\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region SIMPLE GETTERS AND SETTERS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    // endregion\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // region HASHCODE AND EQUAL\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        StudentExam that = (StudentExam) o;\n+        return Objects.equals(id, that.id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346965", "bodyText": "Please change this accordingly in all new entities", "author": "krusche", "createdAt": "2020-06-07T10:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346950", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Objects.equals(id, that.id);\n          \n          \n            \n                    return Objects.equals(getId(), that.getId());", "author": "krusche", "createdAt": "2020-06-07T10:11:48Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"student_exam\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"exam_id\")\n+    private Exam exam;\n+\n+    public Exam getExam() {\n+        return exam;\n+    }\n+\n+    public void setExam(Exam exam) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"user_id\")\n+    private User user;\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(User user) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToMany\n+    @JoinTable(name = \"student_exam_exercise\", joinColumns = @JoinColumn(name = \"student_exam_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+    public Set<Exercise> getExercises() {\n+        return exercises;\n+    }\n+\n+    public void setExercises(Set<Exercise> exercises) {\n+        this.exercises = exercises;\n+    }\n+\n+    public void addExercise(Exercise exercise) {\n+        this.exercises.add(exercise);\n+        exercise.getStudentExams().add(this);\n+    }\n+\n+    public void removeExercise(Exercise exercise) {\n+        this.exercises.remove(exercise);\n+        exercise.getStudentExams().remove(this);\n+    }\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region SIMPLE GETTERS AND SETTERS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    // endregion\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // region HASHCODE AND EQUAL\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        StudentExam that = (StudentExam) o;\n+        return Objects.equals(id, that.id);", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346962", "bodyText": "Please change this accordingly in all new entities", "author": "krusche", "createdAt": "2020-06-07T10:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436346999", "bodyText": "why do we have AbstractAuditingEntity here? I don't think this is necessary", "author": "krusche", "createdAt": "2020-06-07T10:12:27Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"student_exam\")\n+public class StudentExam extends AbstractAuditingEntity {", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MDc5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436360794", "bodyText": "We thought that it might be interesting to know when the student's exam was created and when it was updated last time. You think we shouldn't track this here?\nI've removed AbstractAuditingEntity from Exam and ExerciseGroup.", "author": "sascha11110", "createdAt": "2020-06-07T12:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2NDEzNA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436364134", "bodyText": "I imagine that they are only generated once. In case a 2nd Generation would be necessary, we would delete all existing objects and then recreate them based on the new config. Then we would have no use for auditing", "author": "krusche", "createdAt": "2020-06-07T13:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5MjA2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436392065", "bodyText": "Okay, I will remove it.", "author": "sascha11110", "createdAt": "2020-06-07T19:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0Njk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzAyMw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436347023", "bodyText": "I would avoid the use of constructors", "author": "krusche", "createdAt": "2020-06-07T10:12:46Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"student_exam\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzA4NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436347085", "bodyText": "I would be careful with additional logic like this. Please have a look how this is handled in other places in our code, so that we do not break the consistency", "author": "krusche", "createdAt": "2020-06-07T10:13:33Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"student_exam\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"exam_id\")\n+    private Exam exam;\n+\n+    public Exam getExam() {\n+        return exam;\n+    }\n+\n+    public void setExam(Exam exam) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3NDY5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436374692", "bodyText": "We simply do not implement the additional logic in the entities. E.g. in Submission:\npublic void setParticipation(Participation participation) {\n        this.participation = participation;\n}\n\nTherefore I'll remove it in the new entities.", "author": "sascha11110", "createdAt": "2020-06-07T15:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzA5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436347095", "bodyText": "same comment as above", "author": "krusche", "createdAt": "2020-06-07T10:13:45Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/StudentExam.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"student_exam\")\n+public class StudentExam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    // no arg constructor required for jpa\n+    public StudentExam() {\n+    }\n+\n+    public StudentExam(Long id, Exam exam, User user, Set<Exercise> exercises) {\n+        this.id = id;\n+        this.exam = exam;\n+        this.user = user;\n+        this.exercises = exercises;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region RELATIONSHIPS\n+    // -----------------------------------------------------------------------------------------------------------------\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"exam_id\")\n+    private Exam exam;\n+\n+    public Exam getExam() {\n+        return exam;\n+    }\n+\n+    public void setExam(Exam exam) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);\n+        }\n+\n+        this.exam = exam;\n+        if (!exam.getStudentExams().contains(this)) {\n+            exam.getStudentExams().add(this);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"user_id\")\n+    private User user;\n+\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(User user) {\n+        if (this.exam != null) {\n+            this.exam.removeStudentExam(this);", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzI0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436347242", "bodyText": "we do not use such converters until now in the code. What would be the advantage?", "author": "krusche", "createdAt": "2020-06-07T10:15:14Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/dto/converter/ExamDTOConverter.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package de.tum.in.www1.artemis.domain.exam.dto.converter;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.stereotype.Component;\n+\n+import de.tum.in.www1.artemis.domain.exam.Exam;\n+import de.tum.in.www1.artemis.domain.exam.dto.ExamDTO;\n+\n+@Component\n+public class ExamDTOConverter implements Converter<Exam, ExamDTO> {", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5MTQwNA==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436391404", "bodyText": "I think we do not really need the converters so I removed them. They were introduced to enable thread-safe conversion.\nNevertheless, we should define a way to convert entities to DTOs and vice versa. I think its not good practice to add the conversion methods to the entities and DTOs itself. We might come up with our own converter classes or with a library like modelmapper.\nIt would be nice to have something like the following:\n@PostMapping\npublic void createExam(@DTO(ExamInstructorDTO.class) Exam exam) {\n     examRepository.save(exam);\n}", "author": "sascha11110", "createdAt": "2020-06-07T18:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzQ5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436347493", "bodyText": "Can we rename this to numberOfExercisesInExam", "author": "krusche", "createdAt": "2020-06-07T10:18:10Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"visible_date\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"start_date\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"end_date\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"start_text\")\n+    private String startText;\n+\n+    @Column(name = \"end_text\")\n+    private String endText;\n+\n+    @Column(name = \"confirmation_start_text\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"confirmation_end_text\")\n+    private String confirmationEndText;\n+\n+    /**\n+     * From all exercise groups connected to the exam, {@link #numberOfExerciseGroups} are randomly\n+     * chosen when generating the specific exam for the {@link #registeredUsers}\n+     */\n+    @Column(name = \"number_of_exercise_groups\")\n+    private Integer numberOfExerciseGroups;", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NzYwNw==", "url": "https://github.com/ls1intum/Artemis/pull/1581#discussion_r436347607", "bodyText": "please add maxPoints as Integer.\nInstructors should define this (e.g. 60) and this should be independent of the exercise groups or exercises.\nWe can use this as additional validation constraint later on, so that we could display a warning if the instructor tries to generate student exams, but the configuration does not fit.\nKeep in mind: each student exam should have the same number of points. This is also important when it comes to the calculation of the grades, which we might support at a later stage directly in Artemis", "author": "krusche", "createdAt": "2020-06-07T10:20:00Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "diffHunk": "@@ -0,0 +1,312 @@\n+package de.tum.in.www1.artemis.domain.exam;\n+\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import de.tum.in.www1.artemis.domain.AbstractAuditingEntity;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.ExerciseGroup;\n+import de.tum.in.www1.artemis.domain.User;\n+\n+@Entity\n+@Table(name = \"exam\")\n+public class Exam extends AbstractAuditingEntity {\n+\n+    // region CONSTRUCTORS\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // no arg constructor required for jpa\n+    public Exam() {\n+    }\n+\n+    public Exam(Long id, String title, ZonedDateTime visibleDate, ZonedDateTime startDate, ZonedDateTime endDate, String startText, String endText, String confirmationStartText,\n+            String confirmationEndText, Integer numberOfExerciseGroups, Course course, Set<ExerciseGroup> exerciseGroups, Set<StudentExam> studentExams,\n+            Set<User> registeredUsers) {\n+        this.id = id;\n+        this.title = title;\n+        this.visibleDate = visibleDate;\n+        this.startDate = startDate;\n+        this.endDate = endDate;\n+        this.startText = startText;\n+        this.endText = endText;\n+        this.confirmationStartText = confirmationStartText;\n+        this.confirmationEndText = confirmationEndText;\n+        this.numberOfExerciseGroups = numberOfExerciseGroups;\n+        this.course = course;\n+        this.exerciseGroups = exerciseGroups;\n+        this.studentExams = studentExams;\n+        this.registeredUsers = registeredUsers;\n+    }\n+\n+    // -----------------------------------------------------------------------------------------------------------------\n+    // endregion\n+\n+    // region BASIC PROPERTIES\n+    // -----------------------------------------------------------------------------------------------------------------\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\", unique = true, nullable = false)\n+    private String title;\n+\n+    /**\n+     * student can see the exam in the UI from {@link #visibleDate} date onwards\n+     */\n+    @Column(name = \"visible_date\")\n+    private ZonedDateTime visibleDate;\n+\n+    /**\n+     * student can start working on exam from {@link #startDate}\n+     */\n+    @Column(name = \"start_date\")\n+    private ZonedDateTime startDate;\n+\n+    /**\n+     * student can work on exam until {@link #endDate}\n+     */\n+    @Column(name = \"end_date\")\n+    private ZonedDateTime endDate;\n+\n+    @Column(name = \"start_text\")\n+    private String startText;\n+\n+    @Column(name = \"end_text\")\n+    private String endText;\n+\n+    @Column(name = \"confirmation_start_text\")\n+    private String confirmationStartText;\n+\n+    @Column(name = \"confirmation_end_text\")\n+    private String confirmationEndText;\n+", "originalCommit": "0eea3443ad3bc2b18866714ec1998d885b3785b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "675e45e6d4743dbcf85d536817d5dd19fba85565", "url": "https://github.com/ls1intum/Artemis/commit/675e45e6d4743dbcf85d536817d5dd19fba85565", "message": "Remove bidirectional mappings", "committedDate": "2020-06-07T12:48:33Z", "type": "commit"}, {"oid": "173eefd817e01e52fe6aefa5268789316b21ef6c", "url": "https://github.com/ls1intum/Artemis/commit/173eefd817e01e52fe6aefa5268789316b21ef6c", "message": "Remove AbstractAuditingEntity from ExerciseGroup", "committedDate": "2020-06-07T12:49:40Z", "type": "commit"}, {"oid": "c20cc396e84c7ea6302de550fc5752bdeca3b1cc", "url": "https://github.com/ls1intum/Artemis/commit/c20cc396e84c7ea6302de550fc5752bdeca3b1cc", "message": "Remove AbstractAuditingEntity from Exam", "committedDate": "2020-06-07T12:51:09Z", "type": "commit"}, {"oid": "12e7cbd66a483a64cf3ad65a8452b97f63669493", "url": "https://github.com/ls1intum/Artemis/commit/12e7cbd66a483a64cf3ad65a8452b97f63669493", "message": "Remove bidirectional mapping from inverse getters and setters", "committedDate": "2020-06-07T12:55:06Z", "type": "commit"}, {"oid": "ed0e5cb9a12551cf425ac04e2673ee57072a4eda", "url": "https://github.com/ls1intum/Artemis/commit/ed0e5cb9a12551cf425ac04e2673ee57072a4eda", "message": "Use list instead of positionInExam", "committedDate": "2020-06-07T13:18:08Z", "type": "commit"}, {"oid": "d6018fb4414ad929c030dae11a101c5a7800ffd1", "url": "https://github.com/ls1intum/Artemis/commit/d6018fb4414ad929c030dae11a101c5a7800ffd1", "message": "Add OrderColumn annotation for exerciseGroups in Exam", "committedDate": "2020-06-07T13:30:46Z", "type": "commit"}, {"oid": "22021414fe4cbc79063da16b18371b1302d1f549", "url": "https://github.com/ls1intum/Artemis/commit/22021414fe4cbc79063da16b18371b1302d1f549", "message": "Remove natural key", "committedDate": "2020-06-07T13:33:59Z", "type": "commit"}, {"oid": "39aa41fff4e3f77170e0f2b62ad00061d033b971", "url": "https://github.com/ls1intum/Artemis/commit/39aa41fff4e3f77170e0f2b62ad00061d033b971", "message": "Use id instead of title for hashCode in Exam", "committedDate": "2020-06-07T13:34:46Z", "type": "commit"}, {"oid": "2af0ce8d2c54833b6c25ce9dc39ced3982484bcf", "url": "https://github.com/ls1intum/Artemis/commit/2af0ce8d2c54833b6c25ce9dc39ced3982484bcf", "message": "Use hashCode() instead of hash()", "committedDate": "2020-06-07T13:37:47Z", "type": "commit"}, {"oid": "7d766d8f56b2aded65a01da192f9cc712aa4140f", "url": "https://github.com/ls1intum/Artemis/commit/7d766d8f56b2aded65a01da192f9cc712aa4140f", "message": "Use getId() in equals()", "committedDate": "2020-06-07T13:39:02Z", "type": "commit"}, {"oid": "6a23a4b616b510b3d995f6a86efe3baf803fbea4", "url": "https://github.com/ls1intum/Artemis/commit/6a23a4b616b510b3d995f6a86efe3baf803fbea4", "message": "Rename numberOfExerciseGroups to numberOfExercisesInExam", "committedDate": "2020-06-07T14:13:22Z", "type": "commit"}, {"oid": "2007fed5b23f7e3eed279fcaf3f617079f53cace", "url": "https://github.com/ls1intum/Artemis/commit/2007fed5b23f7e3eed279fcaf3f617079f53cace", "message": "Add maxPoints to Exam", "committedDate": "2020-06-07T14:17:11Z", "type": "commit"}, {"oid": "4f8cf84468bae3069c43311221a351ad952d71ca", "url": "https://github.com/ls1intum/Artemis/commit/4f8cf84468bae3069c43311221a351ad952d71ca", "message": "Add BaseEntity to client models", "committedDate": "2020-06-07T14:19:50Z", "type": "commit"}, {"oid": "63b90847b0878de3e0c9828e779e8c5817d4d53f", "url": "https://github.com/ls1intum/Artemis/commit/63b90847b0878de3e0c9828e779e8c5817d4d53f", "message": "Add missing attributes to client models", "committedDate": "2020-06-07T14:54:59Z", "type": "commit"}, {"oid": "7dd52e878dcacf895dade27e6aef6e1b32f24b00", "url": "https://github.com/ls1intum/Artemis/commit/7dd52e878dcacf895dade27e6aef6e1b32f24b00", "message": "Remove additional logic from setters", "committedDate": "2020-06-07T15:30:35Z", "type": "commit"}, {"oid": "714fe008f4ecee8c1ea2c8334e135f1c69d53873", "url": "https://github.com/ls1intum/Artemis/commit/714fe008f4ecee8c1ea2c8334e135f1c69d53873", "message": "Remove constructors", "committedDate": "2020-06-07T17:42:06Z", "type": "commit"}, {"oid": "9f6b52d674dd1ca203d1d776892a64baf36d95a8", "url": "https://github.com/ls1intum/Artemis/commit/9f6b52d674dd1ca203d1d776892a64baf36d95a8", "message": "Move DTOs to web/rest/dto", "committedDate": "2020-06-07T17:52:57Z", "type": "commit"}, {"oid": "b0d89457ee3bd22bfd6cdfbcd2966d3d7913f063", "url": "https://github.com/ls1intum/Artemis/commit/b0d89457ee3bd22bfd6cdfbcd2966d3d7913f063", "message": "Move Exam and StudentExam to domain package", "committedDate": "2020-06-07T18:03:05Z", "type": "commit"}, {"oid": "a2fd86ef45c02e4ff2d3fa16ead976f7ebfe1e6a", "url": "https://github.com/ls1intum/Artemis/commit/a2fd86ef45c02e4ff2d3fa16ead976f7ebfe1e6a", "message": "Add getter and setter for maxPoints", "committedDate": "2020-06-07T18:23:46Z", "type": "commit"}, {"oid": "d8f007dbbbc8a1aa8316258ce028613c8f33bf98", "url": "https://github.com/ls1intum/Artemis/commit/d8f007dbbbc8a1aa8316258ce028613c8f33bf98", "message": "Update ExamDTO and ExamInstructorDTO", "committedDate": "2020-06-07T18:29:28Z", "type": "commit"}, {"oid": "529cbac3f016a7b34230c00d95e0aca38801a211", "url": "https://github.com/ls1intum/Artemis/commit/529cbac3f016a7b34230c00d95e0aca38801a211", "message": "Remove AbstractAuditingEntity from StudentExam", "committedDate": "2020-06-07T19:03:56Z", "type": "commit"}, {"oid": "73fc727171bd73f90dff6bc6dcf2a07b87c61868", "url": "https://github.com/ls1intum/Artemis/commit/73fc727171bd73f90dff6bc6dcf2a07b87c61868", "message": "Add missing DTOs", "committedDate": "2020-06-07T19:32:13Z", "type": "commit"}, {"oid": "ad12719a0fc717e969cf7002d859d367793e5346", "url": "https://github.com/ls1intum/Artemis/commit/ad12719a0fc717e969cf7002d859d367793e5346", "message": "Fix mappedBy", "committedDate": "2020-06-07T20:03:34Z", "type": "commit"}, {"oid": "8ee45e88dc1ee9644839f4f1c65ec88f3b4eb786", "url": "https://github.com/ls1intum/Artemis/commit/8ee45e88dc1ee9644839f4f1c65ec88f3b4eb786", "message": "Add registeredUsers to ExamInstructorDTO", "committedDate": "2020-06-07T20:07:39Z", "type": "commit"}, {"oid": "14fb4f61a6032a25ba3159427fe596b84089cd9b", "url": "https://github.com/ls1intum/Artemis/commit/14fb4f61a6032a25ba3159427fe596b84089cd9b", "message": "Fix javadoc in Exam", "committedDate": "2020-06-07T20:45:18Z", "type": "commit"}, {"oid": "b0960ef9197956469486ce644d1c6f2047d3758e", "url": "https://github.com/ls1intum/Artemis/commit/b0960ef9197956469486ce644d1c6f2047d3758e", "message": "Add generated liquibase", "committedDate": "2020-06-07T23:12:26Z", "type": "commit"}, {"oid": "c3aa424f5013caafbb721733d3d01f8bd90a0c28", "url": "https://github.com/ls1intum/Artemis/commit/c3aa424f5013caafbb721733d3d01f8bd90a0c28", "message": "Remove unwanted tables foreign key constraints", "committedDate": "2020-06-07T23:56:28Z", "type": "commit"}, {"oid": "f68a6db5857e0ca67cf40f5d18d582a8fffbf857", "url": "https://github.com/ls1intum/Artemis/commit/f68a6db5857e0ca67cf40f5d18d582a8fffbf857", "message": "Added boolean flag to exam to mark it as an exam with a specific\nexercise group order", "committedDate": "2020-06-08T07:31:52Z", "type": "commit"}, {"oid": "ab722fee3a6260ff2ebfaa8b4e06e8afb56345eb", "url": "https://github.com/ls1intum/Artemis/commit/ab722fee3a6260ff2ebfaa8b4e06e8afb56345eb", "message": "Changed connection StudentExam - Exercise from Set to List to support\nordering", "committedDate": "2020-06-08T07:32:31Z", "type": "commit"}, {"oid": "4d01d0ed47d129d0e9e2ae1386a49361253ee604", "url": "https://github.com/ls1intum/Artemis/commit/4d01d0ed47d129d0e9e2ae1386a49361253ee604", "message": "Added @OrderColumn to keep order of list", "committedDate": "2020-06-08T07:54:37Z", "type": "commit"}, {"oid": "f12b3dfc41d395e76695bc733be92f7dc3681918", "url": "https://github.com/ls1intum/Artemis/commit/f12b3dfc41d395e76695bc733be92f7dc3681918", "message": "Merge branch 'develop' into exam-mode/variants/data-model", "committedDate": "2020-06-08T14:52:06Z", "type": "commit"}, {"oid": "6a85f86b0ed3fab93696bc16e2f66a72ba5e357c", "url": "https://github.com/ls1intum/Artemis/commit/6a85f86b0ed3fab93696bc16e2f66a72ba5e357c", "message": "group programming\n\nimprove data model and cache", "committedDate": "2020-06-08T15:35:15Z", "type": "commit"}, {"oid": "86a1418fdb084d9c05f8f4a155c0a7fa59519b2e", "url": "https://github.com/ls1intum/Artemis/commit/86a1418fdb084d9c05f8f4a155c0a7fa59519b2e", "message": "add and remove as usual", "committedDate": "2020-06-08T15:42:18Z", "type": "commit"}, {"oid": "1b86cc243914e48b4496b1c4a24d44ba4b3862ad", "url": "https://github.com/ls1intum/Artemis/commit/1b86cc243914e48b4496b1c4a24d44ba4b3862ad", "message": "prepare first integration tests", "committedDate": "2020-06-08T15:47:02Z", "type": "commit"}, {"oid": "1b13d840929385d8d34ddedaa99b480519adf8d4", "url": "https://github.com/ls1intum/Artemis/commit/1b13d840929385d8d34ddedaa99b480519adf8d4", "message": "Adapter getters and setters to format used throughout the\ncodebase", "committedDate": "2020-06-08T16:06:19Z", "type": "commit"}, {"oid": "b419d19b728f704ec340b5df9be80ef340bddc80", "url": "https://github.com/ls1intum/Artemis/commit/b419d19b728f704ec340b5df9be80ef340bddc80", "message": "Merge remote-tracking branch 'origin/exam-mode/variants/data-model' into exam-mode/variants/data-model", "committedDate": "2020-06-08T16:07:51Z", "type": "commit"}, {"oid": "4fd6ff918cd5f709f927ee2901a914f1a090c137", "url": "https://github.com/ls1intum/Artemis/commit/4fd6ff918cd5f709f927ee2901a914f1a090c137", "message": "Create default repositories for new exam tables", "committedDate": "2020-06-08T16:11:28Z", "type": "commit"}, {"oid": "3ddba10a923f9df2323b0bb1ae49faf536e53a90", "url": "https://github.com/ls1intum/Artemis/commit/3ddba10a923f9df2323b0bb1ae49faf536e53a90", "message": "fix wrong config which prevented server start", "committedDate": "2020-06-08T17:41:20Z", "type": "commit"}, {"oid": "40672bc1a87c19a44cca903cf9c6f37c5e6964ec", "url": "https://github.com/ls1intum/Artemis/commit/40672bc1a87c19a44cca903cf9c6f37c5e6964ec", "message": "Adjust order in all new entities: attributes, references, getters/setters", "committedDate": "2020-06-08T18:08:14Z", "type": "commit"}, {"oid": "616b6c545c9d56c53cd6971d3c7e70826be63f5a", "url": "https://github.com/ls1intum/Artemis/commit/616b6c545c9d56c53cd6971d3c7e70826be63f5a", "message": "Delete liquibase", "committedDate": "2020-06-08T18:31:21Z", "type": "commit"}, {"oid": "4423859b37b1a6cd0fe1418cdc7877d3fc32c1c3", "url": "https://github.com/ls1intum/Artemis/commit/4423859b37b1a6cd0fe1418cdc7877d3fc32c1c3", "message": "Fix add remove", "committedDate": "2020-06-08T18:52:01Z", "type": "commit"}, {"oid": "f51580a1e4b7c1d474b90848897f5c2cfba1b52d", "url": "https://github.com/ls1intum/Artemis/commit/f51580a1e4b7c1d474b90848897f5c2cfba1b52d", "message": "Remove unique constraint from Exam title", "committedDate": "2020-06-08T18:56:45Z", "type": "commit"}, {"oid": "4de74598243330b4adc57bc8b0ff3db700e2602b", "url": "https://github.com/ls1intum/Artemis/commit/4de74598243330b4adc57bc8b0ff3db700e2602b", "message": "Add liquibase", "committedDate": "2020-06-08T19:20:58Z", "type": "commit"}, {"oid": "92c5f0556ebfb14b08ceaac1e5fd3711b4024f92", "url": "https://github.com/ls1intum/Artemis/commit/92c5f0556ebfb14b08ceaac1e5fd3711b4024f92", "message": "add exam resource and exam service with initial logic for create and update exams\n\nadd visible exams to the courses for dashboard call\nfix issue with wrong attribute in Exam.java", "committedDate": "2020-06-08T19:32:58Z", "type": "commit"}, {"oid": "a5471696c824d4f79e84da4f5e4b32a7bc7f8d69", "url": "https://github.com/ls1intum/Artemis/commit/a5471696c824d4f79e84da4f5e4b32a7bc7f8d69", "message": "Merge branch 'exam-mode/variants/data-model' of https://github.com/ls1intum/Artemis into exam-mode/variants/data-model\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/exam/Exam.java", "committedDate": "2020-06-08T19:36:03Z", "type": "commit"}, {"oid": "5f60501bb70ab7b3a01f7cb1ebaaf304fe65d5d4", "url": "https://github.com/ls1intum/Artemis/commit/5f60501bb70ab7b3a01f7cb1ebaaf304fe65d5d4", "message": "add exams to Course on client side", "committedDate": "2020-06-08T19:36:20Z", "type": "commit"}, {"oid": "cacc514cb2ec302ea9bd6f80b019767097da9039", "url": "https://github.com/ls1intum/Artemis/commit/cacc514cb2ec302ea9bd6f80b019767097da9039", "message": "add randomizeExerciseOrder to exam", "committedDate": "2020-06-08T19:42:20Z", "type": "commit"}, {"oid": "5f77d09f82e152817afab04cd81b68e5bce7fcb6", "url": "https://github.com/ls1intum/Artemis/commit/5f77d09f82e152817afab04cd81b68e5bce7fcb6", "message": "performance improvements for dashboard call", "committedDate": "2020-06-08T20:15:55Z", "type": "commit"}, {"oid": "8d6bcf5f41c38614695f0120b2ac9005e6250f5c", "url": "https://github.com/ls1intum/Artemis/commit/8d6bcf5f41c38614695f0120b2ac9005e6250f5c", "message": "fix JavaDoc", "committedDate": "2020-06-08T20:33:22Z", "type": "commit"}, {"oid": "ffb1d917a7f7396af69970e7b1b98c7a1317efb6", "url": "https://github.com/ls1intum/Artemis/commit/ffb1d917a7f7396af69970e7b1b98c7a1317efb6", "message": "Fix JavaDoc", "committedDate": "2020-06-08T20:46:13Z", "type": "commit"}, {"oid": "8467234e3796e3df1d858d713df10131b2fc8f33", "url": "https://github.com/ls1intum/Artemis/commit/8467234e3796e3df1d858d713df10131b2fc8f33", "message": "Merge branch 'develop' into exam-mode/variants/data-model", "committedDate": "2020-06-08T20:47:27Z", "type": "commit"}, {"oid": "9821679a2a5ed1388f63c71d6138217a5bd4df71", "url": "https://github.com/ls1intum/Artemis/commit/9821679a2a5ed1388f63c71d6138217a5bd4df71", "message": "Add test case for saving exam related entities", "committedDate": "2020-06-08T20:47:51Z", "type": "commit"}, {"oid": "9907f8cd3bd95cdddd29d204f6ca760ebdf3a0c1", "url": "https://github.com/ls1intum/Artemis/commit/9907f8cd3bd95cdddd29d204f6ca760ebdf3a0c1", "message": "Clean up test case", "committedDate": "2020-06-08T20:51:46Z", "type": "commit"}, {"oid": "5d864f409a843dd432e24b1545a71052cedf2353", "url": "https://github.com/ls1intum/Artemis/commit/5d864f409a843dd432e24b1545a71052cedf2353", "message": "Fixed typo", "committedDate": "2020-06-09T07:44:06Z", "type": "commit"}, {"oid": "80beced9f76f3953d33ba56148f8df9985572a2c", "url": "https://github.com/ls1intum/Artemis/commit/80beced9f76f3953d33ba56148f8df9985572a2c", "message": "Added ExamMapper and ExamResponseDTO and Example Get Rest Call", "committedDate": "2020-06-09T10:51:03Z", "type": "commit"}, {"oid": "98a1cdacc1d5a6630193ef6238d452a52a2b3e02", "url": "https://github.com/ls1intum/Artemis/commit/98a1cdacc1d5a6630193ef6238d452a52a2b3e02", "message": "Revert \"Added ExamMapper and ExamResponseDTO and Example Get Rest Call\"\n\nThis reverts commit 80beced9f76f3953d33ba56148f8df9985572a2c.", "committedDate": "2020-06-09T11:05:46Z", "type": "commit"}]}