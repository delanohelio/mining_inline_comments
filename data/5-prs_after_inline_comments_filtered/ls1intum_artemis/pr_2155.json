{"pr_number": 2155, "pr_title": "Add Dynamic Tests for the Artemis Domain Classes", "pr_createdAt": "2020-10-05T08:11:14Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2155", "timeline": [{"oid": "ae3eb6ac9422bdfdc6ea62970b9ee3cee118a070", "url": "https://github.com/ls1intum/Artemis/commit/ae3eb6ac9422bdfdc6ea62970b9ee3cee118a070", "message": "Add first class path tree implementation", "committedDate": "2020-10-05T08:02:21Z", "type": "commit"}, {"oid": "3b11f186aeb24a7fafc926b69228c964316b22b4", "url": "https://github.com/ls1intum/Artemis/commit/3b11f186aeb24a7fafc926b69228c964316b22b4", "message": "Add test for Artemis domain classes and their java.lang.Object methods", "committedDate": "2020-10-05T08:03:18Z", "type": "commit"}, {"oid": "9344eaf03dfc1e6b3004fad37f82d3455f580605", "url": "https://github.com/ls1intum/Artemis/commit/9344eaf03dfc1e6b3004fad37f82d3455f580605", "message": "Fix small documentation mistakes and code style", "committedDate": "2020-10-05T08:26:46Z", "type": "commit"}, {"oid": "d906734b634ae95c3c748789a32c72b9225f80b1", "url": "https://github.com/ls1intum/Artemis/commit/d906734b634ae95c3c748789a32c72b9225f80b1", "message": "Improve dynamic tests and introduce exclusions", "committedDate": "2020-10-05T09:38:29Z", "type": "commit"}, {"oid": "d0adcd67518300c268c5fdda0ad2ee264210fef9", "url": "https://github.com/ls1intum/Artemis/commit/d0adcd67518300c268c5fdda0ad2ee264210fef9", "message": "Fix possible NullPointerException when invoking QuizExercise.toString()", "committedDate": "2020-10-05T10:09:51Z", "type": "commit"}, {"oid": "fafa55f84deae1adf2973494a1df3047b0fbc836", "url": "https://github.com/ls1intum/Artemis/commit/fafa55f84deae1adf2973494a1df3047b0fbc836", "message": "Merge branch 'develop' into enhancement/domain-classes-dynamic-tests", "committedDate": "2020-10-05T10:20:46Z", "type": "commit"}, {"oid": "66394479b0c3382ab85676ab6cdfd41dccefa622", "url": "https://github.com/ls1intum/Artemis/commit/66394479b0c3382ab85676ab6cdfd41dccefa622", "message": "Use logger instead of System.out.println", "committedDate": "2020-10-05T10:26:01Z", "type": "commit"}, {"oid": "4aac93df9a384ae71efcf33474b878bb91f7dcb1", "url": "https://github.com/ls1intum/Artemis/commit/4aac93df9a384ae71efcf33474b878bb91f7dcb1", "message": "Document exclusion reason for RepositoryType", "committedDate": "2020-10-05T10:28:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTQxMA==", "url": "https://github.com/ls1intum/Artemis/pull/2155#discussion_r499499410", "bodyText": "I would rather suggest to use the getter and change it to lower-case boolean\npublic boolean isIsPlannedToStart() {\n    return Boolean.TRUE.equals(isPlannedToStart);\n}", "author": "krusche", "createdAt": "2020-10-05T10:31:07Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/quiz/QuizExercise.java", "diffHunk": "@@ -144,7 +144,7 @@ public String getType() {\n     @Override\n     @JsonView(QuizView.Before.class)\n     public ZonedDateTime getDueDate() {\n-        return isPlannedToStart && getReleaseDate() != null ? getReleaseDate().plusSeconds(getDuration()) : super.getDueDate();\n+        return isPlannedToStart != null && isPlannedToStart && getReleaseDate() != null ? getReleaseDate().plusSeconds(getDuration()) : super.getDueDate();", "originalCommit": "fafa55f84deae1adf2973494a1df3047b0fbc836", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTUyOA==", "url": "https://github.com/ls1intum/Artemis/pull/2155#discussion_r499499528", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return isPlannedToStart != null && isPlannedToStart && getReleaseDate() != null ? getReleaseDate().plusSeconds(getDuration()) : super.getDueDate();\n          \n          \n            \n                    return isIsPlannedToStart() && getReleaseDate() != null ? getReleaseDate().plusSeconds(getDuration()) : super.getDueDate();", "author": "krusche", "createdAt": "2020-10-05T10:31:20Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/quiz/QuizExercise.java", "diffHunk": "@@ -144,7 +144,7 @@ public String getType() {\n     @Override\n     @JsonView(QuizView.Before.class)\n     public ZonedDateTime getDueDate() {\n-        return isPlannedToStart && getReleaseDate() != null ? getReleaseDate().plusSeconds(getDuration()) : super.getDueDate();\n+        return isPlannedToStart != null && isPlannedToStart && getReleaseDate() != null ? getReleaseDate().plusSeconds(getDuration()) : super.getDueDate();", "originalCommit": "fafa55f84deae1adf2973494a1df3047b0fbc836", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1af1fb073f1d192761cac21612934a353721cb3d", "url": "https://github.com/ls1intum/Artemis/commit/1af1fb073f1d192761cac21612934a353721cb3d", "message": "Implement hashCode() und equals(Object) for TextEmbedding", "committedDate": "2020-10-05T10:35:17Z", "type": "commit"}, {"oid": "e63cea7ff8153561d942190e5302ebf3cff9863d", "url": "https://github.com/ls1intum/Artemis/commit/e63cea7ff8153561d942190e5302ebf3cff9863d", "message": "Merge branch 'enhancement/domain-classes-dynamic-tests' of git@github.com:ls1intum/Artemis.git into enhancement/domain-classes-dynamic-tests", "committedDate": "2020-10-05T10:35:59Z", "type": "commit"}, {"oid": "11af99a0fcf5676dd1d3158799aa6afad53dad42", "url": "https://github.com/ls1intum/Artemis/commit/11af99a0fcf5676dd1d3158799aa6afad53dad42", "message": "Change QuizExercise.isIsPlannedToStart() to return a primitive boolean", "committedDate": "2020-10-05T10:52:56Z", "type": "commit"}, {"oid": "2d223f48892e6a8ea51cb9149b2c4168f9ec679c", "url": "https://github.com/ls1intum/Artemis/commit/2d223f48892e6a8ea51cb9149b2c4168f9ec679c", "message": "Remove scattered System.out.println tests", "committedDate": "2020-10-05T11:05:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxODYwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2155#discussion_r499518605", "bodyText": "Codacy found an issue: Avoid using equals() to compare against null", "author": "artemis-bot", "createdAt": "2020-10-05T11:09:25Z", "path": "src/test/java/de/tum/in/www1/artemis/domain/ObjectMethodTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import static de.tum.in.www1.artemis.domain.ObjectMethodTestExclusions.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.DynamicContainer.dynamicContainer;\n+import static org.junit.jupiter.api.DynamicTest.dynamicTest;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.DynamicNode;\n+import org.junit.jupiter.api.TestFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import de.tum.in.www1.artemis.util.classpath.ClassNode;\n+import de.tum.in.www1.artemis.util.classpath.ClassPathNode;\n+import de.tum.in.www1.artemis.util.classpath.ClassPathUtil;\n+import io.github.classgraph.ClassInfo;\n+\n+/**\n+ * Tests that the methods from {@link Object} are properly overridden.\n+ */\n+class ObjectMethodTest {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ObjectMethodTest.class);\n+\n+    private static final String GENERATE_TESTS = \"Generate tests\";\n+\n+    private static final String DOMAIN_PACKAGE_NAME = \"de.tum.in.www1.artemis.domain\";\n+\n+    private static final Map<Class<?>, List<?>> ID_TEST_VALUES = Map.of(Long.class, List.of(1L, 42L), String.class, List.of(\"A\", \"B\"));\n+\n+    /**\n+     * Generates test in form of a hierarchical structure, see also JUnit 5 dynamic tests\n+     */\n+    @TestFactory\n+    DynamicNode testDomainClasses() {\n+        var allDomainClasses = ClassPathUtil.findAllClassesIn(DOMAIN_PACKAGE_NAME, ObjectMethodTest::classPathElementFilter);\n+        var domainClassTests = generateTestContainerForClasses(allDomainClasses);\n+        return domainClassTests.orElseGet(() -> dynamicTest(GENERATE_TESTS, () -> fail(\"No testable domain classes found\")));\n+    }\n+\n+    /**\n+     * Maps the class path structure to the dynamic test structure.\n+     *\n+     * @return the test structure or an empty optional, if no tests could be generated for the whole ClassPathNode\n+     */\n+    Optional<DynamicNode> generateTestContainerForClasses(ClassPathNode classPathStructure) {\n+        return classPathStructure.mapTree(this::generateTestsForClass, (packageNode, dynamicNodes) -> {\n+            var tests = dynamicNodes.filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+            if (tests.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            return Optional.of(dynamicContainer(\"[\" + packageNode.getSegmentName() + \"]\", tests));\n+        });\n+    }\n+\n+    /**\n+     * Maps a single domain class node to its dynamic test structure. This basically just generates tests based on the properties of the class.\n+     *\n+     * @return the test structure or an empty optional, if no tests could be generated for this ClassNode\n+     */\n+    Optional<DynamicNode> generateTestsForClass(ClassNode classNode) {\n+        Class<?> domainClass = classNode.getContainedClass();\n+        ClassInfo info = classNode.getClassInfo();\n+        // Ignore interfaces, abstract classes, anonymous classes, annotations and generated classes\n+        if (info.isInterfaceOrAnnotation() || info.isAnonymousInnerClass() || info.isAbstract() || info.getName().endsWith(\"_\")) {\n+            return Optional.empty();\n+        }\n+        // Ignore classes that are excluded from everything\n+        if (isClassExcludedFrom(domainClass, ALL_TESTS)) {\n+            return Optional.empty();\n+        }\n+\n+        // Add tests\n+        List<DynamicNode> tests = new ArrayList<>();\n+        if (info.isEnum()) {\n+            generateTestsForEnum(tests, domainClass);\n+        }\n+        else {\n+            generateTestsForStandardClasses(tests, domainClass, info);\n+        }\n+\n+        // Only return a test container if there are any tests that can be run\n+        if (!tests.isEmpty()) {\n+            return Optional.of(dynamicContainer(classNode.getSegmentName(), tests));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Generates tests for {@link Enum}s in the Artemis domain package\n+     */\n+    private static void generateTestsForEnum(List<DynamicNode> tests, Class<?> domainClass) {\n+        // test toString and name()\n+        if (isClassNotExcludedFrom(domainClass, ENUM_TOSTRING_NAME_EQUALITY)) {\n+            tests.add(dynamicContainer(\"toString() and name() are equal\", Stream.of(domainClass.getEnumConstants()).map(constant -> {\n+                var name = ((Enum<?>) constant).name();\n+                return dynamicTest(name, () -> assertThat(constant).hasToString(name));\n+            })));\n+        }\n+        /*\n+         * equals() and hashCode() cannot be changed for Enum and don't need to be tested\n+         */\n+    }\n+\n+    /**\n+     * Generates tests for regular classes in the Artemis domain package\n+     */\n+    private static void generateTestsForStandardClasses(List<DynamicNode> tests, Class<?> domainClass, ClassInfo info) {\n+        // Tests that don't require instances\n+        // >>> None at the moment <<<\n+\n+        // Tests that depend on creating instances\n+        if (isClassExcludedFrom(domainClass, INSTANCE_TESTS)) {\n+            return;\n+        }\n+        // try to find a no-args constructor\n+        var noArgsConstructors = info.getConstructorInfo().filter(f -> f.getParameterInfo().length == 0);\n+        if (noArgsConstructors.size() == 1) {\n+            try {\n+                var noArgsConstructor = domainClass.getDeclaredConstructor();\n+\n+                // check that none of toString(), equals(null) and hashCode() throws any exceptions\n+                generateObjectMethodTests(tests, noArgsConstructor);\n+\n+                // check id related object methods\n+                if (info.hasMethod(\"getId\") && info.hasMethod(\"setId\")) {\n+                    generateIdRelatedTests(tests, domainClass, noArgsConstructor);\n+                }\n+            }\n+            catch (ReflectiveOperationException e) {\n+                tests.add(dynamicTest(GENERATE_TESTS, () -> fail(\"Relective operation failed\", e)));\n+            }\n+        }\n+        else {\n+            LOG.warn(\"{} does not have a no-args constructor\", domainClass);\n+        }\n+    }\n+\n+    private static void generateObjectMethodTests(List<DynamicNode> tests, Constructor<?> noArgsConstructor) {\n+        tests.add(dynamicTest(\"toString() does not throw exceptions\", () -> {\n+            Object instance = noArgsConstructor.newInstance();\n+            assertDoesNotThrow(instance::toString);\n+        }));\n+        tests.add(dynamicTest(\"equals(null) does not throw exceptions\", () -> {\n+            Object instance = noArgsConstructor.newInstance();\n+            assertDoesNotThrow(() -> instance.equals(null));", "originalCommit": "2d223f48892e6a8ea51cb9149b2c4168f9ec679c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}