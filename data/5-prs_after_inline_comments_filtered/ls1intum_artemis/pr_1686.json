{"pr_number": 1686, "pr_title": "[EXAM] Quiz exercise management", "pr_createdAt": "2020-06-19T16:06:20Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1686", "timeline": [{"oid": "2f915d9459df96d0a2d9247d7e24f41d47ba3b5a", "url": "https://github.com/ls1intum/Artemis/commit/2f915d9459df96d0a2d9247d7e24f41d47ba3b5a", "message": "Add exam quiz route", "committedDate": "2020-06-19T16:05:09Z", "type": "commit"}, {"oid": "4262f34e865e28e130b370b1fd178d822ec199eb", "url": "https://github.com/ls1intum/Artemis/commit/4262f34e865e28e130b370b1fd178d822ec199eb", "message": "Adjust resolver in exam quiz route", "committedDate": "2020-06-19T16:19:53Z", "type": "commit"}, {"oid": "a1a816ff3ed644afa7118e06eca0355ce74b52b8", "url": "https://github.com/ls1intum/Artemis/commit/a1a816ff3ed644afa7118e06eca0355ce74b52b8", "message": "Add Exercise Group to constructor in quiz-exercise.model.ts", "committedDate": "2020-06-19T16:24:19Z", "type": "commit"}, {"oid": "9ac451b0201603257c0ebb5906468e0fdeef07cf", "url": "https://github.com/ls1intum/Artemis/commit/9ac451b0201603257c0ebb5906468e0fdeef07cf", "message": "Add create-quiz button to exercise-groups.component.html", "committedDate": "2020-06-20T07:48:08Z", "type": "commit"}, {"oid": "dd5b79ace04da21620ab76241599f3e245c9bf5e", "url": "https://github.com/ls1intum/Artemis/commit/dd5b79ace04da21620ab76241599f3e245c9bf5e", "message": "Adjust creation of quiz exercise to handle the exam quiz", "committedDate": "2020-06-20T09:56:24Z", "type": "commit"}, {"oid": "8d544d01cef4ac8d92152d36479dc2e2d226c3f9", "url": "https://github.com/ls1intum/Artemis/commit/8d544d01cef4ac8d92152d36479dc2e2d226c3f9", "message": "Adjust order of parameters in quiz-exercise-detail.component.ts", "committedDate": "2020-06-20T10:51:44Z", "type": "commit"}, {"oid": "10f75f674eec862dc73921cabdf4fc1f77af620e", "url": "https://github.com/ls1intum/Artemis/commit/10f75f674eec862dc73921cabdf4fc1f77af620e", "message": "Adjust post route to work with exam exercises", "committedDate": "2020-06-20T11:14:01Z", "type": "commit"}, {"oid": "d25862f802f8e7081daaac60421521f19359ee67", "url": "https://github.com/ls1intum/Artemis/commit/d25862f802f8e7081daaac60421521f19359ee67", "message": "Fix call inside of callback in onInit of quiz-exercise-detail.component.ts", "committedDate": "2020-06-20T12:11:23Z", "type": "commit"}, {"oid": "aa7c309fe6e73b4ba5e5973a8cc279afe46d00d1", "url": "https://github.com/ls1intum/Artemis/commit/aa7c309fe6e73b4ba5e5973a8cc279afe46d00d1", "message": "Adjust put route for quiz exercises", "committedDate": "2020-06-20T12:20:35Z", "type": "commit"}, {"oid": "f1ba382101fcba681566cad4a122752779f130b7", "url": "https://github.com/ls1intum/Artemis/commit/f1ba382101fcba681566cad4a122752779f130b7", "message": "Adjust get route for quiz exercises", "committedDate": "2020-06-20T12:27:24Z", "type": "commit"}, {"oid": "1a141b92ad75e0da2dba53b75833e7edf629b314", "url": "https://github.com/ls1intum/Artemis/commit/1a141b92ad75e0da2dba53b75833e7edf629b314", "message": "Adjust delete route for quiz exercises", "committedDate": "2020-06-20T12:33:30Z", "type": "commit"}, {"oid": "bf4698e1352bfb7ea6b42b8e6f878e7f58c02eaa", "url": "https://github.com/ls1intum/Artemis/commit/bf4698e1352bfb7ea6b42b8e6f878e7f58c02eaa", "message": "Wire delete button for quiz exercise", "committedDate": "2020-06-20T14:01:45Z", "type": "commit"}, {"oid": "be539a0ec75a1c03551304e4c20297d48e6ad7d9", "url": "https://github.com/ls1intum/Artemis/commit/be539a0ec75a1c03551304e4c20297d48e6ad7d9", "message": "Add generateQuizExerciseForExam to ModelFactory.java", "committedDate": "2020-06-20T14:12:19Z", "type": "commit"}, {"oid": "636912239b36eb9ad31f7c28f6d76d8b58e1fcb2", "url": "https://github.com/ls1intum/Artemis/commit/636912239b36eb9ad31f7c28f6d76d8b58e1fcb2", "message": "Add exam constraint for notifying students on change", "committedDate": "2020-06-20T15:15:55Z", "type": "commit"}, {"oid": "70b9250b6e9a5a5532b1ce8584f803146825b6a7", "url": "https://github.com/ls1intum/Artemis/commit/70b9250b6e9a5a5532b1ce8584f803146825b6a7", "message": "Add conversion check to quiz put route", "committedDate": "2020-06-20T15:16:33Z", "type": "commit"}, {"oid": "2de1af643c507b72e97a398e23b150e9ecbe7d73", "url": "https://github.com/ls1intum/Artemis/commit/2de1af643c507b72e97a398e23b150e9ecbe7d73", "message": "Add exam tests for Post and Put route of quiz exercises", "committedDate": "2020-06-20T15:18:24Z", "type": "commit"}, {"oid": "02e17f08d1747e64fcb62f27e29d788e93aae92e", "url": "https://github.com/ls1intum/Artemis/commit/02e17f08d1747e64fcb62f27e29d788e93aae92e", "message": "Add exam tests for Get route of quiz exercises", "committedDate": "2020-06-20T15:41:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443141603", "bodyText": "I don't understand why this test fails: Response status expected:<201> but was:<403>\nDoes anyone have an idea?", "author": "JonasPetry", "createdAt": "2020-06-20T16:08:30Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -335,6 +602,26 @@ public void testGetQuizExercise_asStudent() throws Exception {\n         checkQuizExerciseForStudent(quizExerciseForStudent_Finished);\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamQuizExercise() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        QuizExercise quizExerciseGet = request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.OK, QuizExercise.class);\n+        checkQuizExercises(quizExercise, quizExerciseGet);\n+\n+        assertThat(quizExerciseGet).isEqualTo(quizExercise);\n+        assertThat(quizExerciseGet).as(\"Quiz exercise was retrieved\").isNotNull();\n+        assertThat(quizExerciseGet.getId()).as(\"Quiz exercise with the right id was retrieved\").isEqualTo(quizExerciseGet.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testGetExamQuizExercise_asTutor_forbidden() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+        request.get(\"/api/quiz-exercises/\" + quizExercise.getId(), HttpStatus.FORBIDDEN, QuizExercise.class);\n+    }", "originalCommit": "02e17f08d1747e64fcb62f27e29d788e93aae92e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwMTM3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443201372", "bodyText": "Hi Jonas! I looked at your code. The problem is createQuizOnServerForExam. This creates the quiz using a POST, but a tutor has not the necessary rights to do this. In order to test this functionality, you should create the quiz exercise without a REST call in the database before trying to get it.", "author": "stefanwaldhauser", "createdAt": "2020-06-21T09:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNjA0Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443206043", "bodyText": "Thanks for spotting this!", "author": "JonasPetry", "createdAt": "2020-06-21T10:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTYwMw=="}], "type": "inlineReview"}, {"oid": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2", "url": "https://github.com/ls1intum/Artemis/commit/f7e6f813ea90550d5c2602ec7a72561d43ab0bd2", "message": "Fix failing server integration test", "committedDate": "2020-06-21T10:37:46Z", "type": "commit"}, {"oid": "7ae0b4d09ddd636018dcc3a30e1d9648cffc679b", "url": "https://github.com/ls1intum/Artemis/commit/7ae0b4d09ddd636018dcc3a30e1d9648cffc679b", "message": "Merge branch 'develop' into exam/management/quiz-exercises\n\n# Conflicts:\n#\tsrc/main/webapp/app/exam/manage/exam-management.route.ts\n#\tsrc/main/webapp/app/exercises/shared/exercise-row-buttons/exercise-row-buttons.component.ts\n#\tsrc/main/webapp/i18n/de/exam.json\n#\tsrc/main/webapp/i18n/en/exam.json", "committedDate": "2020-06-22T13:32:54Z", "type": "commit"}, {"oid": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "url": "https://github.com/ls1intum/Artemis/commit/68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "message": "fix merge error", "committedDate": "2020-06-22T13:46:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTk4NA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443571984", "bodyText": "We changed loading of Exercise -> ExerciseGroup -> Exam -> Course to Eager loading in a recent PR.\nquizExercise.getExerciseGroup().getExam().getCourse() should be sufficient here.", "author": "kloessst", "createdAt": "2020-06-22T13:50:17Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());", "originalCommit": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTU2OA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443761568", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T18:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MTk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NDA4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443574087", "bodyText": "We don't need this anymore because of the point mentioned above.", "author": "kloessst", "createdAt": "2020-06-22T13:53:21Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -192,9 +216,22 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @GetMapping(\"/quiz-exercises/{quizExerciseId}\")\n     @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<QuizExercise> getQuizExercise(@PathVariable Long quizExerciseId) {\n+        // TODO: Split this route in two: One for normal and one for exam exercises\n         log.debug(\"REST request to get QuizExercise : {}\", quizExerciseId);\n         QuizExercise quizExercise = quizExerciseService.findOneWithQuestionsAndStatistics(quizExerciseId);\n-        if (!authCheckService.isAllowedToSeeExercise(quizExercise, null)) {\n+\n+        if (quizExercise.hasExerciseGroup()) {\n+            // Get the course over the exercise group\n+            ExerciseGroup exerciseGroup = exerciseGroupService.findOneWithExam(quizExercise.getExerciseGroup().getId());\n+            Course course = exerciseGroup.getExam().getCourse();\n+\n+            if (!authCheckService.isAtLeastInstructorInCourse(course, null)) {\n+                return forbidden();\n+            }\n+            // Set the exerciseGroup, exam and course so that the client can work with those ids", "originalCommit": "f7e6f813ea90550d5c2602ec7a72561d43ab0bd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MTgxMg==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443761812", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T18:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NDA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDg1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443580850", "bodyText": "We introduced a new utility getter Exercise.getCourseViaExerciseGroupOrCourseMember, which executes this case distinction. You could use this instead of the whole if, else block.", "author": "kloessst", "createdAt": "2020-06-22T14:02:59Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "diffHunk": "@@ -337,20 +374,30 @@ public QuizExerciseResource(QuizExerciseService quizExerciseService, QuizExercis\n     @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n     public ResponseEntity<Void> deleteQuizExercise(@PathVariable Long quizExerciseId) {\n         log.info(\"REST request to delete QuizExercise : {}\", quizExerciseId);\n-        Optional<QuizExercise> quizExercise = quizExerciseService.findById(quizExerciseId);\n-        if (quizExercise.isEmpty()) {\n+        Optional<QuizExercise> quizExerciseOptional = quizExerciseService.findById(quizExerciseId);\n+        if (quizExerciseOptional.isEmpty()) {\n             return notFound();\n         }\n-        Course course = quizExercise.get().getCourse();\n+\n+        // If the exercise belongs to an exam, the course must be retrieved over the exerciseGroup\n+        QuizExercise quizExercise = quizExerciseOptional.get();\n+        Course course;", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NDI1NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443764255", "bodyText": "Resolved in merge", "author": "kloessst", "createdAt": "2020-06-22T18:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzIwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443663205", "bodyText": "empty space", "author": "kloessst", "createdAt": "2020-06-22T15:57:17Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTEyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443695127", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T16:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTQ1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443669450", "bodyText": "exerciseGroup is not used", "author": "kloessst", "createdAt": "2020-06-22T16:06:39Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {\n+        Course course = database.addEmptyCourse();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1MTkxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443751915", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T18:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY1Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670656", "bodyText": "TextExercise", "author": "kloessst", "createdAt": "2020-06-22T16:08:34Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTMxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443695311", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T16:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670699", "bodyText": "TextExercise", "author": "kloessst", "createdAt": "2020-06-22T16:08:39Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTM3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443695374", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T16:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDg0NA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670844", "bodyText": "TextExercise", "author": "kloessst", "createdAt": "2020-06-22T16:08:53Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MDkzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443670939", "bodyText": "TextExercise", "author": "kloessst", "createdAt": "2020-06-22T16:09:00Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -211,6 +322,131 @@ public void testEditQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testEditQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        MultipleChoiceQuestion mc = (MultipleChoiceQuestion) quizExercise.getQuizQuestions().get(0);\n+        mc.getAnswerOptions().remove(0);\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"C\").hint(\"H3\").explanation(\"E3\").isCorrect(true));\n+        mc.getAnswerOptions().add(new AnswerOption().text(\"D\").hint(\"H4\").explanation(\"E4\").isCorrect(true));\n+\n+        DragAndDropQuestion dnd = (DragAndDropQuestion) quizExercise.getQuizQuestions().get(1);\n+        dnd.getDropLocations().remove(0);\n+        dnd.getCorrectMappings().remove(0);\n+        dnd.getDragItems().remove(0);\n+\n+        ShortAnswerQuestion sa = (ShortAnswerQuestion) quizExercise.getQuizQuestions().get(2);\n+        sa.getSpots().remove(0);\n+        sa.getSolutions().remove(0);\n+        sa.getCorrectMappings().remove(0);\n+\n+        quizExercise = request.putWithResponseBody(\"/api/quiz-exercises\", quizExercise, QuizExercise.class, HttpStatus.OK);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(3);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"C\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H3\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E3\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(2).getText()).as(\"Text for answer option is correct\").isEqualTo(\"D\");\n+                assertThat(answerOptions.get(2).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H4\");\n+                assertThat(answerOptions.get(2).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E4\");\n+                assertThat(answerOptions.get(2).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(1);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(1);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        quizExercise.setCourse(null);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+\n+    public void updateTextExercise_convertFromCourseToExamExercise_badRequest() throws Exception {\n+        QuizExercise quizExercise = createQuizOnServer(ZonedDateTime.now().plusHours(5), null);\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+\n+        quizExercise.setCourse(null);\n+        quizExercise.setExerciseGroup(exerciseGroup);\n+\n+        request.putWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void updateTextExercise_convertFromExamToCourseExercise_badRequest() throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTc2MA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443671760", "bodyText": "Move creation of the entity to ModelFactory", "author": "kloessst", "createdAt": "2020-06-22T16:10:20Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -242,6 +478,37 @@ private QuizExercise createQuizOnServer(ZonedDateTime releaseDate, ZonedDateTime\n         return quizExerciseServer;\n     }\n \n+    private QuizExercise createQuizOnServerForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate) throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzE5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443673196", "bodyText": "TextExercise", "author": "kloessst", "createdAt": "2020-06-22T16:12:45Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {\n+        var now = ZonedDateTime.now();\n+        ExerciseGroup exerciseGroup = database.addExerciseGroupWithExamAndCourse(true);\n+        QuizExercise quizExercise = ModelFactory.generateQuizExerciseForExam(now.minusDays(1), now.minusHours(2), exerciseGroup);\n+        quizExercise.setCourse(exerciseGroup.getExam().getCourse());\n+\n+        request.postWithResponseBody(\"/api/quiz-exercises/\", quizExercise, TextExercise.class, HttpStatus.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setNeitherCourseAndExerciseGroup_badRequest() throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjUzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443692537", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T16:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzI0NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443673245", "bodyText": "TextExercise", "author": "kloessst", "createdAt": "2020-06-22T16:12:49Z", "path": "src/test/java/de/tum/in/www1/artemis/QuizExerciseIntegrationTest.java", "diffHunk": "@@ -131,6 +150,98 @@ public void testCreateQuizExercise() throws Exception {\n         }\n     }\n \n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateQuizExerciseForExam() throws Exception {\n+        quizExercise = createQuizOnServerForExam(ZonedDateTime.now().plusHours(5), null);\n+\n+        // General assertions\n+        assertThat(quizExercise.getQuizQuestions().size()).as(\"Quiz questions were saved\").isEqualTo(3);\n+        assertThat(quizExercise.getDuration()).as(\"Quiz duration was correctly set\").isEqualTo(3600);\n+        assertThat(quizExercise.getDifficulty()).as(\"Quiz difficulty was correctly set\").isEqualTo(DifficultyLevel.MEDIUM);\n+\n+        // Quiz type specific assertions\n+        for (QuizQuestion question : quizExercise.getQuizQuestions()) {\n+            if (question instanceof MultipleChoiceQuestion) {\n+                MultipleChoiceQuestion multipleChoiceQuestion = (MultipleChoiceQuestion) question;\n+                assertThat(multipleChoiceQuestion.getAnswerOptions().size()).as(\"Multiple choice question answer options were saved\").isEqualTo(2);\n+                assertThat(multipleChoiceQuestion.getTitle()).as(\"Multiple choice question title is correct\").isEqualTo(\"MC\");\n+                assertThat(multipleChoiceQuestion.getText()).as(\"Multiple choice question text is correct\").isEqualTo(\"Q1\");\n+                assertThat(multipleChoiceQuestion.getScore()).as(\"Multiple choice question score is correct\").isEqualTo(4);\n+\n+                List<AnswerOption> answerOptions = multipleChoiceQuestion.getAnswerOptions();\n+                assertThat(answerOptions.get(0).getText()).as(\"Text for answer option is correct\").isEqualTo(\"A\");\n+                assertThat(answerOptions.get(0).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H1\");\n+                assertThat(answerOptions.get(0).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E1\");\n+                assertThat(answerOptions.get(0).isIsCorrect()).as(\"Is correct for answer option is correct\").isTrue();\n+                assertThat(answerOptions.get(1).getText()).as(\"Text for answer option is correct\").isEqualTo(\"B\");\n+                assertThat(answerOptions.get(1).getHint()).as(\"Hint for answer option is correct\").isEqualTo(\"H2\");\n+                assertThat(answerOptions.get(1).getExplanation()).as(\"Explanation for answer option is correct\").isEqualTo(\"E2\");\n+                assertThat(answerOptions.get(1).isIsCorrect()).as(\"Is correct for answer option is correct\").isFalse();\n+            }\n+            if (question instanceof DragAndDropQuestion) {\n+                DragAndDropQuestion dragAndDropQuestion = (DragAndDropQuestion) question;\n+                assertThat(dragAndDropQuestion.getDropLocations().size()).as(\"Drag and drop question drop locations were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getDragItems().size()).as(\"Drag and drop question drag items were saved\").isEqualTo(2);\n+                assertThat(dragAndDropQuestion.getTitle()).as(\"Drag and drop question title is correct\").isEqualTo(\"DnD\");\n+                assertThat(dragAndDropQuestion.getText()).as(\"Drag and drop question text is correct\").isEqualTo(\"Q2\");\n+                assertThat(dragAndDropQuestion.getScore()).as(\"Drag and drop question score is correct\").isEqualTo(3);\n+\n+                List<DropLocation> dropLocations = dragAndDropQuestion.getDropLocations();\n+                assertThat(dropLocations.get(0).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(0).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getPosX()).as(\"Pos X for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getPosY()).as(\"Pos Y for drop location is correct\").isEqualTo(20);\n+                assertThat(dropLocations.get(1).getWidth()).as(\"Width for drop location is correct\").isEqualTo(10);\n+                assertThat(dropLocations.get(1).getHeight()).as(\"Height for drop location is correct\").isEqualTo(10);\n+\n+                List<DragItem> dragItems = dragAndDropQuestion.getDragItems();\n+                assertThat(dragItems.get(0).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D1\");\n+                assertThat(dragItems.get(1).getText()).as(\"Text for drag item is correct\").isEqualTo(\"D2\");\n+            }\n+            if (question instanceof ShortAnswerQuestion) {\n+                ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) question;\n+                assertThat(shortAnswerQuestion.getSpots().size()).as(\"Short answer question spots were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getSolutions().size()).as(\"Short answer question solutions were saved\").isEqualTo(2);\n+                assertThat(shortAnswerQuestion.getTitle()).as(\"Short answer question title is correct\").isEqualTo(\"SA\");\n+                assertThat(shortAnswerQuestion.getText()).as(\"Short answer question text is correct\").isEqualTo(\"This is a long answer text\");\n+                assertThat(shortAnswerQuestion.getScore()).as(\"Short answer question score is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSpot> spots = shortAnswerQuestion.getSpots();\n+                assertThat(spots.get(0).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(0);\n+                assertThat(spots.get(0).getWidth()).as(\"Width for spot is correct\").isEqualTo(1);\n+                assertThat(spots.get(1).getSpotNr()).as(\"Spot nr for spot is correct\").isEqualTo(2);\n+                assertThat(spots.get(1).getWidth()).as(\"Width for spot is correct\").isEqualTo(2);\n+\n+                List<ShortAnswerSolution> solutions = shortAnswerQuestion.getSolutions();\n+                assertThat(solutions.get(0).getText()).as(\"Text for solution is correct\").isEqualTo(\"is\");\n+                assertThat(solutions.get(1).getText()).as(\"Text for solution is correct\").isEqualTo(\"long\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void createTextExercise_setCourseAndExerciseGroup_badRequest() throws Exception {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjQwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443692406", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-22T16:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NjYwMA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443676600", "bodyText": "Could use a shared method to populate the exam and the course quiz exercise", "author": "kloessst", "createdAt": "2020-06-22T16:18:23Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -60,6 +60,21 @@ public static QuizExercise generateQuizExercise(ZonedDateTime releaseDate, Zoned\n         return quizExercise;\n     }\n \n+    public static QuizExercise generateQuizExerciseForExam(ZonedDateTime releaseDate, ZonedDateTime dueDate, ExerciseGroup exerciseGroup) {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443678368", "bodyText": "Do we need this for exam quizzes? Probably not because the exercise won't be distributed by web sockets?", "author": "kloessst", "createdAt": "2020-06-22T16:21:04Z", "path": "src/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java", "diffHunk": "@@ -347,7 +347,7 @@ public void sendQuizExerciseToSubscribedClients(QuizExercise quizExercise, Strin\n             Class view = viewForStudentsInQuizExercise(quizExercise);\n             byte[] payload = objectMapper.writerWithView(view).writeValueAsBytes(quizExercise);\n             // For each change we send the same message. The client needs to decide how to handle the date based on the quiz status\n-            if (quizExercise.isVisibleToStudents()) {\n+            if (quizExercise.isVisibleToStudents() && quizExercise.hasCourse()) {", "originalCommit": "68319f1454e1aedb1b0d4c044c0fc2be9f9e78bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4NjcwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443686705", "bodyText": "I've added this to make sure that it is not called with an exam exercise. We don't really need it, but I thought it might be a good idea to prevent any errors that could happen due to setting the course to null", "author": "JonasPetry", "createdAt": "2020-06-22T16:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MzI2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1686#discussion_r443763265", "bodyText": "I think this is ok", "author": "kloessst", "createdAt": "2020-06-22T18:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODM2OA=="}], "type": "inlineReview"}, {"oid": "d045e947a100a36adaa0e4241ce04d756acd6ce3", "url": "https://github.com/ls1intum/Artemis/commit/d045e947a100a36adaa0e4241ce04d756acd6ce3", "message": "Merge develop and resolve conflicts", "committedDate": "2020-06-22T16:49:12Z", "type": "commit"}, {"oid": "f48d14beabd53706f817115e0556b81f399f3266", "url": "https://github.com/ls1intum/Artemis/commit/f48d14beabd53706f817115e0556b81f399f3266", "message": "Rename test methods", "committedDate": "2020-06-22T16:50:59Z", "type": "commit"}, {"oid": "703e494c52c2ded25ba7f7e6c09a0ec3429ac28f", "url": "https://github.com/ls1intum/Artemis/commit/703e494c52c2ded25ba7f7e6c09a0ec3429ac28f", "message": "Replace TextExercise with QuizExercise in QuizExerciseIntegrationTest", "committedDate": "2020-06-22T16:50:59Z", "type": "commit"}, {"oid": "9df12236913990ddb7348a208d5dd04b033ffadc", "url": "https://github.com/ls1intum/Artemis/commit/9df12236913990ddb7348a208d5dd04b033ffadc", "message": "Remove unnecessary empty space in QuizExerciseIntegrationTest", "committedDate": "2020-06-22T16:50:59Z", "type": "commit"}, {"oid": "e353545541475820a61fbb8ddd85c2879d9549ce", "url": "https://github.com/ls1intum/Artemis/commit/e353545541475820a61fbb8ddd85c2879d9549ce", "message": "Merge branch 'develop' into exam/management/quiz-exercises\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/QuizExerciseService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/QuizExerciseResource.java", "committedDate": "2020-06-22T17:10:16Z", "type": "commit"}, {"oid": "f289b0761fde043f0012c0475a02601a18efd8c7", "url": "https://github.com/ls1intum/Artemis/commit/f289b0761fde043f0012c0475a02601a18efd8c7", "message": "Merge branch 'exam/management/quiz-exercises' of https://github.com/ls1intum/Artemis into exam/management/quiz-exercises", "committedDate": "2020-06-22T17:10:58Z", "type": "commit"}, {"oid": "3199a10fcb3f3320517f58fc1cd710f75dcf163d", "url": "https://github.com/ls1intum/Artemis/commit/3199a10fcb3f3320517f58fc1cd710f75dcf163d", "message": "Remove unused parameter in QuizExerciseIntegrationTest", "committedDate": "2020-06-22T18:54:22Z", "type": "commit"}, {"oid": "f19b3e43c252c32b7de7c9763ff8fc59c4302e2e", "url": "https://github.com/ls1intum/Artemis/commit/f19b3e43c252c32b7de7c9763ff8fc59c4302e2e", "message": "Get course through Exercise -> ExerciseGroup -> Exam -> Course", "committedDate": "2020-06-22T18:54:22Z", "type": "commit"}, {"oid": "796dc75d1181f0d3cf69004a49daa8ea024e7a41", "url": "https://github.com/ls1intum/Artemis/commit/796dc75d1181f0d3cf69004a49daa8ea024e7a41", "message": "Add quiz management module", "committedDate": "2020-06-22T20:51:45Z", "type": "commit"}, {"oid": "7d99aae73daf10f426aa6cd0366548b014a6fdb9", "url": "https://github.com/ls1intum/Artemis/commit/7d99aae73daf10f426aa6cd0366548b014a6fdb9", "message": "Fix quiz participation title", "committedDate": "2020-06-22T21:29:47Z", "type": "commit"}, {"oid": "e2c2ad4ad09f3d7d0eeb10e4fd3c044abbb77b94", "url": "https://github.com/ls1intum/Artemis/commit/e2c2ad4ad09f3d7d0eeb10e4fd3c044abbb77b94", "message": "Add quiz preview and solution button", "committedDate": "2020-06-22T22:59:41Z", "type": "commit"}, {"oid": "23870f829a3a267a6d37f0fa7895314f79881c48", "url": "https://github.com/ls1intum/Artemis/commit/23870f829a3a267a6d37f0fa7895314f79881c48", "message": "Merge branch 'exam/management/quiz-exercises' of https://github.com/ls1intum/Artemis into exam/management/quiz-exercises", "committedDate": "2020-06-22T23:00:06Z", "type": "commit"}, {"oid": "ba0ad6de1e07daf3d4c13749909ffa28a221d63b", "url": "https://github.com/ls1intum/Artemis/commit/ba0ad6de1e07daf3d4c13749909ffa28a221d63b", "message": "Merge branch 'develop' into exam/management/quiz-exercises", "committedDate": "2020-06-23T06:09:32Z", "type": "commit"}, {"oid": "17a2b936f21bbc7f248eca37e4d27aa9e00f02b2", "url": "https://github.com/ls1intum/Artemis/commit/17a2b936f21bbc7f248eca37e4d27aa9e00f02b2", "message": "only schedule quiz exercises in courses, not in exams", "committedDate": "2020-06-23T07:16:52Z", "type": "commit"}]}