{"pr_number": 1878, "pr_title": "add achievement storage", "pr_createdAt": "2020-07-14T07:31:31Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1878", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481430294", "bodyText": "Don't you need to add a user relationship somewhere, when you give out achievements?", "author": "kloessst", "createdAt": "2020-09-01T21:04:14Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public List<Achievement> findAll() {\n+        return achievementRepository.findAll();\n+    }\n+\n+    public Set<Achievement> findAllByCourseId(Long courseId) {\n+        return achievementRepository.findAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllByExerciseId(Long exerciseId) {\n+        return achievementRepository.findAllByExerciseId(exerciseId);\n+    }\n+\n+    public Set<Achievement> findAllByUserId(Long userId) {\n+        return achievementRepository.findAllByUserId(userId);\n+    }\n+\n+    public Achievement save(Achievement achievement) {\n+        return achievementRepository.save(achievement);\n+    }\n+\n+    /**\n+     * Creates an achievement and persist it\n+     */\n+    public Achievement create(String title, String description, String icon, AchievementRank rank, Course course) {", "originalCommit": "efe97b904e2506356b25a51a137cc654e2ffb140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTczOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481431739", "bodyText": "no, not on creation itself, only on assignment of the achievement later", "author": "balazs-czopf", "createdAt": "2020-09-01T21:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMjM2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481432369", "bodyText": "Good catch @kloessst\nIf I remember the data model correctly, it should also have a connection to an exercise.", "author": "fde312", "createdAt": "2020-09-01T21:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNjgyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481436826", "bodyText": "I think this is ok. You can create the achievement first and then add the relationship.", "author": "kloessst", "createdAt": "2020-09-01T21:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MTQ3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481441472", "bodyText": "I guess you can add the connection to an exercise later, but it could also be possible right here.", "author": "balazs-czopf", "createdAt": "2020-09-01T21:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMDI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTkxMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481431912", "bodyText": "Don't you have to save the altered achievements?", "author": "kloessst", "createdAt": "2020-09-01T21:07:24Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExerciseService.java", "diffHunk": "@@ -285,6 +288,9 @@ public void delete(long exerciseId, boolean deleteStudentReposBuildPlans, boolea\n         // make sure tutor participations are deleted before the exercise is deleted\n         tutorParticipationRepository.deleteAllByAssessedExerciseId(exercise.getId());\n \n+        // delete exercise in all achievements\n+        achievementService.findAllByExerciseId(exercise.getId()).forEach(achievement -> achievement.setExercise(null));", "originalCommit": "efe97b904e2506356b25a51a137cc654e2ffb140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MjIyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481442227", "bodyText": "yes, I should", "author": "balazs-czopf", "createdAt": "2020-09-01T21:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMTkxMg=="}], "type": "inlineReview"}, {"oid": "6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "url": "https://github.com/ls1intum/Artemis/commit/6aa68b0ab7a071fa631c7c72cdb8ea02ccf15a39", "message": "add param doc", "committedDate": "2020-09-01T21:11:31Z", "type": "commit"}, {"oid": "d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "url": "https://github.com/ls1intum/Artemis/commit/d6f4c8861d530ee606cd33ce9bea33c51e4f2728", "message": "integrate further feedback", "committedDate": "2020-09-01T21:30:09Z", "type": "commit"}, {"oid": "9ef266e869ba2a7881c261a2ff2936b1acdb4911", "url": "https://github.com/ls1intum/Artemis/commit/9ef266e869ba2a7881c261a2ff2936b1acdb4911", "message": "add return to javadoc", "committedDate": "2020-09-01T21:58:03Z", "type": "commit"}, {"oid": "1de95feae06f4d7194b157599d21b659665da934", "url": "https://github.com/ls1intum/Artemis/commit/1de95feae06f4d7194b157599d21b659665da934", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-19T07:07:16Z", "type": "commit"}, {"oid": "b55d823034cdd1c7d78f81b2656deb0463a57163", "url": "https://github.com/ls1intum/Artemis/commit/b55d823034cdd1c7d78f81b2656deb0463a57163", "message": "Merge branch 'feature/achievements/storage' into feature/achievements/achievement-checks\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/AchievementService.java\n#\tsrc/main/java/de/tum/in/www1/artemis/service/ProgrammingAssessmentService.java", "committedDate": "2020-09-19T07:21:32Z", "type": "commit"}, {"oid": "b78dc9d7d8eb442e8cca093c1e39c80633ae7c46", "url": "https://github.com/ls1intum/Artemis/commit/b78dc9d7d8eb442e8cca093c1e39c80633ae7c46", "message": "remove semicolons", "committedDate": "2020-09-19T08:06:27Z", "type": "commit"}, {"oid": "53dba54103c70309a079b8d63b7c97244b81c458", "url": "https://github.com/ls1intum/Artemis/commit/53dba54103c70309a079b8d63b7c97244b81c458", "message": "remove another semicolon", "committedDate": "2020-09-19T08:08:22Z", "type": "commit"}, {"oid": "29b99cf76c6ad320bec1bc5873d8c3db73d72cf3", "url": "https://github.com/ls1intum/Artemis/commit/29b99cf76c6ad320bec1bc5873d8c3db73d72cf3", "message": "remove semicolons once again", "committedDate": "2020-09-19T08:12:21Z", "type": "commit"}, {"oid": "865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "url": "https://github.com/ls1intum/Artemis/commit/865d4c8c0b2383053a0206e3f554ad5ddd33ed22", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-19T10:38:00Z", "type": "commit"}, {"oid": "d9de666709304efc7d693591721e3a95c65ee6a9", "url": "https://github.com/ls1intum/Artemis/commit/d9de666709304efc7d693591721e3a95c65ee6a9", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-20T15:09:16Z", "type": "commit"}, {"oid": "72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "url": "https://github.com/ls1intum/Artemis/commit/72ed71a2a7717d3b129f6365d24db139ca9ffdf8", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-20T15:11:59Z", "type": "commit"}, {"oid": "2880feed09fc2090a643646854d2f6a5d2a67e8f", "url": "https://github.com/ls1intum/Artemis/commit/2880feed09fc2090a643646854d2f6a5d2a67e8f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-23T09:42:16Z", "type": "commit"}, {"oid": "ad64b282b2255d720c9773cccc6f49a00bff6ad4", "url": "https://github.com/ls1intum/Artemis/commit/ad64b282b2255d720c9773cccc6f49a00bff6ad4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-23T13:58:56Z", "type": "commit"}, {"oid": "f9aef805a8b7948a9d5cd14781203108636a085e", "url": "https://github.com/ls1intum/Artemis/commit/f9aef805a8b7948a9d5cd14781203108636a085e", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-24T06:15:01Z", "type": "commit"}, {"oid": "16c868730f899decba01ea6e156f8e7aebc0f26a", "url": "https://github.com/ls1intum/Artemis/commit/16c868730f899decba01ea6e156f8e7aebc0f26a", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-24T06:16:03Z", "type": "commit"}, {"oid": "5aa0f887eec40ee49590ae6c36598ed23f71fa30", "url": "https://github.com/ls1intum/Artemis/commit/5aa0f887eec40ee49590ae6c36598ed23f71fa30", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-24T08:41:09Z", "type": "commit"}, {"oid": "c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "url": "https://github.com/ls1intum/Artemis/commit/c9e78d5f35e682dd1b8e5882d0883d782cecbe3f", "message": "Merge branch 'develop' into feature/achievements/achievement-checks\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-09-24T08:46:44Z", "type": "commit"}, {"oid": "4605b63a052365e502039c1e3d72f325538cf7eb", "url": "https://github.com/ls1intum/Artemis/commit/4605b63a052365e502039c1e3d72f325538cf7eb", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-24T13:03:15Z", "type": "commit"}, {"oid": "18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "url": "https://github.com/ls1intum/Artemis/commit/18ddbfcae8f77e8cee1c7944a18fba5a589d46b5", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-24T13:04:50Z", "type": "commit"}, {"oid": "1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "url": "https://github.com/ls1intum/Artemis/commit/1555470b055e8a99d34b9ed7f4fcb0929ede6bc6", "message": "Merge branch 'develop' into feature/achievements/storage\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-09-24T17:31:50Z", "type": "commit"}, {"oid": "350087b6078ccb4c49a78aebe602a163fa860637", "url": "https://github.com/ls1intum/Artemis/commit/350087b6078ccb4c49a78aebe602a163fa860637", "message": "Merge branch 'develop' into feature/achievements/achievement-checks\n\n# Conflicts:\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-09-24T17:33:48Z", "type": "commit"}, {"oid": "b496ec47dbd27567e02f96f7b2e363733ca7d89f", "url": "https://github.com/ls1intum/Artemis/commit/b496ec47dbd27567e02f96f7b2e363733ca7d89f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-26T09:57:30Z", "type": "commit"}, {"oid": "1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "url": "https://github.com/ls1intum/Artemis/commit/1871fe479e13e32629073b2a2ab2ae293cf2a6ae", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-26T09:59:58Z", "type": "commit"}, {"oid": "2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "url": "https://github.com/ls1intum/Artemis/commit/2d1887ebc2c67095c5a13eee2f86b7fb39b901d3", "message": "remove random semicolons", "committedDate": "2020-09-26T15:01:09Z", "type": "commit"}, {"oid": "f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "url": "https://github.com/ls1intum/Artemis/commit/f0e4daee087d8b6f0d36b1b78465a31f6f09713d", "message": "remove random semicolons", "committedDate": "2020-09-26T15:11:46Z", "type": "commit"}, {"oid": "95622742bd3fa7623d0ad8df6089acef534ee60f", "url": "https://github.com/ls1intum/Artemis/commit/95622742bd3fa7623d0ad8df6089acef534ee60f", "message": "add achievement checks", "committedDate": "2020-09-27T09:24:20Z", "type": "commit"}, {"oid": "c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "url": "https://github.com/ls1intum/Artemis/commit/c0a4b8df894787c7f22b172ecf3a3a9ce1ff398d", "message": "fix a few things", "committedDate": "2020-09-28T07:41:32Z", "type": "commit"}, {"oid": "0e82242b97cdbc112e1d3a883cb2281d462dd405", "url": "https://github.com/ls1intum/Artemis/commit/0e82242b97cdbc112e1d3a883cb2281d462dd405", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-28T07:52:42Z", "type": "commit"}, {"oid": "c7425c9af8e7e15cd22a3771029b103c6d79608f", "url": "https://github.com/ls1intum/Artemis/commit/c7425c9af8e7e15cd22a3771029b103c6d79608f", "message": "Merge branch 'develop' into feature/achievements/achievement-checks", "committedDate": "2020-09-28T07:53:20Z", "type": "commit"}, {"oid": "28ed83395042c9e9faddf43940bd9f3c221684b3", "url": "https://github.com/ls1intum/Artemis/commit/28ed83395042c9e9faddf43940bd9f3c221684b3", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-28T19:39:26Z", "type": "commit"}, {"oid": "7f91a8c850a8261a5a2cccec6290474ad193d1b8", "url": "https://github.com/ls1intum/Artemis/commit/7f91a8c850a8261a5a2cccec6290474ad193d1b8", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-29T15:18:39Z", "type": "commit"}, {"oid": "13581c27c5425e2d08d6c8d22c23aabb06a4661b", "url": "https://github.com/ls1intum/Artemis/commit/13581c27c5425e2d08d6c8d22c23aabb06a4661b", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-29T17:28:10Z", "type": "commit"}, {"oid": "a29934b894dc985ef64551a61cb158c8db3cb095", "url": "https://github.com/ls1intum/Artemis/commit/a29934b894dc985ef64551a61cb158c8db3cb095", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-29T18:07:56Z", "type": "commit"}, {"oid": "108a983bae22d4c3041b0c52e1acbc5132791cf4", "url": "https://github.com/ls1intum/Artemis/commit/108a983bae22d4c3041b0c52e1acbc5132791cf4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-30T14:47:01Z", "type": "commit"}, {"oid": "c3317e06a092c8dbee21b52de380addd92f73b3f", "url": "https://github.com/ls1intum/Artemis/commit/c3317e06a092c8dbee21b52de380addd92f73b3f", "message": "add stuff", "committedDate": "2020-10-01T10:52:14Z", "type": "commit"}, {"oid": "508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "url": "https://github.com/ls1intum/Artemis/commit/508e8977abe4d1e8ec1c8a817fe9bd0f91f6bb8a", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-01T10:59:26Z", "type": "commit"}, {"oid": "d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "url": "https://github.com/ls1intum/Artemis/commit/d3d2ea3ec69fdc3185bac66822f03c4a1bf0b6b1", "message": "Merge branch 'develop' into feature/achievements/server", "committedDate": "2020-10-01T11:00:44Z", "type": "commit"}, {"oid": "ee25bd720633e2da0f2ad7b9354358590178e20f", "url": "https://github.com/ls1intum/Artemis/commit/ee25bd720633e2da0f2ad7b9354358590178e20f", "message": "prepare for client", "committedDate": "2020-10-01T11:36:40Z", "type": "commit"}, {"oid": "22dd5cf9af0d3ad36041717a3f4ca1be5c5a6925", "url": "https://github.com/ls1intum/Artemis/commit/22dd5cf9af0d3ad36041717a3f4ca1be5c5a6925", "message": "small fix", "committedDate": "2020-10-01T19:34:47Z", "type": "commit"}, {"oid": "87e1b7686ddcdf36dbefc8407242e70d200a329d", "url": "https://github.com/ls1intum/Artemis/commit/87e1b7686ddcdf36dbefc8407242e70d200a329d", "message": "few further fixes", "committedDate": "2020-10-01T22:17:53Z", "type": "commit"}, {"oid": "64778c859b7f2d14015c50aedae62db4c98bcee7", "url": "https://github.com/ls1intum/Artemis/commit/64778c859b7f2d14015c50aedae62db4c98bcee7", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-03T11:52:15Z", "type": "commit"}, {"oid": "8d5bfc049d9e75323290b069e7343df6fc579ee7", "url": "https://github.com/ls1intum/Artemis/commit/8d5bfc049d9e75323290b069e7343df6fc579ee7", "message": "refactor stuff", "committedDate": "2020-10-03T16:02:35Z", "type": "commit"}, {"oid": "1b37db66c5ce9ba8f83251928b06cf1348c9d2a8", "url": "https://github.com/ls1intum/Artemis/commit/1b37db66c5ce9ba8f83251928b06cf1348c9d2a8", "message": "Merge branch 'develop' into feature/achievements/server\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/ProgrammingExerciseResource.java", "committedDate": "2020-10-03T16:50:03Z", "type": "commit"}, {"oid": "d253878f2c48324cce17332d858163dc22f932f6", "url": "https://github.com/ls1intum/Artemis/commit/d253878f2c48324cce17332d858163dc22f932f6", "message": "add javadoc", "committedDate": "2020-10-04T08:40:29Z", "type": "commit"}, {"oid": "e261947c3ac2358fb9c0c2794728e9499b0504ae", "url": "https://github.com/ls1intum/Artemis/commit/e261947c3ac2358fb9c0c2794728e9499b0504ae", "message": "Merge branch 'develop' into feature/achievements/server\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/User.java", "committedDate": "2020-10-04T08:46:50Z", "type": "commit"}, {"oid": "7a5de1a37353eb19f93ef49666bba352198834cb", "url": "https://github.com/ls1intum/Artemis/commit/7a5de1a37353eb19f93ef49666bba352198834cb", "message": "Merge branch 'develop' into feature/achievements/storage\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/User.java", "committedDate": "2020-10-04T08:53:29Z", "type": "commit"}, {"oid": "116151629d403403ee9b750c30c182f44f70e233", "url": "https://github.com/ls1intum/Artemis/commit/116151629d403403ee9b750c30c182f44f70e233", "message": "Merge relevant changes from 'feature/achievements/server' into feature/achievements/storage", "committedDate": "2020-10-04T09:18:47Z", "type": "commit"}, {"oid": "93870f9227c9fc41eccd69fbff118cd9b1535aad", "url": "https://github.com/ls1intum/Artemis/commit/93870f9227c9fc41eccd69fbff118cd9b1535aad", "message": "fix default value", "committedDate": "2020-10-04T09:53:51Z", "type": "commit"}, {"oid": "7db5a3c96eed46493c6270e6aa8c8f658fa78b14", "url": "https://github.com/ls1intum/Artemis/commit/7db5a3c96eed46493c6270e6aa8c8f658fa78b14", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-04T09:57:41Z", "type": "commit"}, {"oid": "53c319a21a4053a341e9b24da4987de5abfb656d", "url": "https://github.com/ls1intum/Artemis/commit/53c319a21a4053a341e9b24da4987de5abfb656d", "message": "use service", "committedDate": "2020-10-04T12:27:27Z", "type": "commit"}, {"oid": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "url": "https://github.com/ls1intum/Artemis/commit/786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "message": "Merge branch 'develop' into feature/achievements/storage\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/Course.java", "committedDate": "2020-10-05T06:35:18Z", "type": "commit"}, {"oid": "24465a0b342536acdc8e7b8d0448043b276dab91", "url": "https://github.com/ls1intum/Artemis/commit/24465a0b342536acdc8e7b8d0448043b276dab91", "message": "fix codacy", "committedDate": "2020-10-05T09:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzA3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499457076", "bodyText": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:19:45Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MTYxMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499491612", "bodyText": "same as above", "author": "balazs-czopf", "createdAt": "2020-10-05T10:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499457230", "bodyText": "I would suggest not using SQL keywords for column names. https://www.drupal.org/node/141051", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:20:00Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MTUxMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499491513", "bodyText": "I did this just the way we\u00b4re using it in User.java:", "author": "balazs-czopf", "createdAt": "2020-10-05T10:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MzE4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499493180", "bodyText": "If I understand the comment correctly, groups was not a keyword when the column was created but added at a later date. This is not the situation here, therefore this workaround is not appropriate imo", "author": "stefanwaldhauser", "createdAt": "2020-10-05T10:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTkwMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499499903", "bodyText": "Okay, I\u00b4ll rename the columns \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-10-05T10:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NzIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MzI2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499463265", "bodyText": "I am not certain if this implementation of equals and hashcode is a good idea, as you are also calling equals and hashcode of other entities.  But I am not an expert so @krusche might help here\nMaybe read through this here https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/persistent-classes-equalshashcode.html.\nIs title a natural key?", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:28:47Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`rank`\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"`type`\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getIcon() {\n+        return icon;\n+    }\n+\n+    public void setIcon(String icon) {\n+        this.icon = icon;\n+    }\n+\n+    public AchievementRank getRank() {\n+        return rank;\n+    }\n+\n+    public void setRank(AchievementRank rank) {\n+        this.rank = rank;\n+    }\n+\n+    public AchievementType getType() {\n+        return type;\n+    }\n+\n+    public void setType(AchievementType type) {\n+        this.type = type;\n+    }\n+\n+    public Set<User> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(Set<User> users) {\n+        this.users = users;\n+    }\n+\n+    public Course getCourse() {\n+        return course;\n+    }\n+\n+    public void setCourse(Course course) {\n+        this.course = course;\n+    }\n+\n+    public Exercise getExercise() {\n+        return exercise;\n+    }\n+\n+    public void setExercise(Exercise exercise) {\n+        this.exercise = exercise;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Achievement{\" + \"id=\" + getId() + \", title='\" + getTitle() + \"'\" + \", description='\" + getDescription() + \"'\" + \", icon='\" + getIcon() + \"'\" + \", rank='\"\n+                + getRank() + \"'\" + \", type='\" + getType() + \"'\" + \"}\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMTI2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499501264", "bodyText": "Removing the functions for now as they are not needed in this PR", "author": "balazs-czopf", "createdAt": "2020-10-05T10:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2MzI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NDE0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499464149", "bodyText": "Why is it nullable if false is the default value? That would imply it is never null? You could also set it using liquibase for all already existing courses to false.", "author": "stefanwaldhauser", "createdAt": "2020-10-05T09:30:07Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +103,10 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Nullable", "originalCommit": "786e61b1b217fb61e37f5dc1256ea2e3663d3cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMDQ4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499500487", "bodyText": "Oh yeah, I forgot about that. Removing it now.", "author": "balazs-czopf", "createdAt": "2020-10-05T10:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NDE0OQ=="}], "type": "inlineReview"}, {"oid": "2b13fd64547c4c2d86064c81dc0e1e15e4e58b0e", "url": "https://github.com/ls1intum/Artemis/commit/2b13fd64547c4c2d86064c81dc0e1e15e4e58b0e", "message": "fix codacy again", "committedDate": "2020-10-05T10:12:44Z", "type": "commit"}, {"oid": "9e204099c92da4070f6297f4168820a36bcebe96", "url": "https://github.com/ls1intum/Artemis/commit/9e204099c92da4070f6297f4168820a36bcebe96", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-05T10:13:52Z", "type": "commit"}, {"oid": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "url": "https://github.com/ls1intum/Artemis/commit/2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "message": "remove and update", "committedDate": "2020-10-05T10:35:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTU3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499595576", "bodyText": "We introduced a new superclass for domain classes a few days ago that comes with the benefits of:\n\nalready implementing Serializable\nalready having an id attribute including getId() and setId(Long)\nalready overriding Object.hashCode() and Object.equals(Object) correctly, based on the id.\n\nI think it would be a good idea (and with the tests of #2155 almost necessary) to use DomainObject here.\nThen there are also fewer problems to deal with.\nI just want to mention it here and now already, to avoid confusion and possibly problems later on.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class Achievement implements Serializable {\n          \n          \n            \n            \n          \n          \n            \n                @Id\n          \n          \n            \n                @Column(name = \"id\")\n          \n          \n            \n                @GeneratedValue(strategy = GenerationType.IDENTITY)\n          \n          \n            \n                private Long id;\n          \n          \n            \n            public class Achievement extends DomainObject {", "author": "MaisiKoleni", "createdAt": "2020-10-05T13:24:42Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "originalCommit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODE5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499638195", "bodyText": "Awesome, thank you for the hint and explanation \ud83d\udc4d\nApplied the changes as suggested", "author": "balazs-czopf", "createdAt": "2020-10-05T14:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTkyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499595926", "bodyText": "See comment above.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                public Long getId() {\n          \n          \n            \n                    return id;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void setId(Long id) {\n          \n          \n            \n                    this.id = id;\n          \n          \n            \n                }", "author": "MaisiKoleni", "createdAt": "2020-10-05T13:25:13Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_rank\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_type\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties({ \"achievements\" })\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {\n+    }\n+\n+    public Achievement(String title, String description, String icon, AchievementRank rank, AchievementType type, Course course, Exercise exercise) {\n+        this.title = title;\n+        this.description = description;\n+        this.icon = icon;\n+        this.rank = rank;\n+        this.type = type;\n+        this.course = course;\n+        this.exercise = exercise;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }", "originalCommit": "2d87fe70c504d9d9c855d7c0371f19b9bd8c745d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "59f1e61538f3768d7b7e66eb614337d27d805321", "url": "https://github.com/ls1intum/Artemis/commit/59f1e61538f3768d7b7e66eb614337d27d805321", "message": "replace serializable with domainobject\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T14:21:30Z", "type": "commit"}, {"oid": "a616036218e566ee1e309966c4cd89c4f8b5b7f0", "url": "https://github.com/ls1intum/Artemis/commit/a616036218e566ee1e309966c4cd89c4f8b5b7f0", "message": "remove getter and setter for id\n\nCo-authored-by: Christian Femers <c.femers@tum.de>", "committedDate": "2020-10-05T14:22:01Z", "type": "commit"}, {"oid": "2bbb0ecd89c40edcf360b83fa3b864cb9f329e6d", "url": "https://github.com/ls1intum/Artemis/commit/2bbb0ecd89c40edcf360b83fa3b864cb9f329e6d", "message": "fix changelog", "committedDate": "2020-10-05T14:40:31Z", "type": "commit"}, {"oid": "93ae455b025de7b1343fd226822a7082511bc7fa", "url": "https://github.com/ls1intum/Artemis/commit/93ae455b025de7b1343fd226822a7082511bc7fa", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-05T18:08:00Z", "type": "commit"}, {"oid": "d11204e7243c0a60e8f82d1dcb920a4a43ac7bd8", "url": "https://github.com/ls1intum/Artemis/commit/d11204e7243c0a60e8f82d1dcb920a4a43ac7bd8", "message": "move changelog.xml", "committedDate": "2020-10-05T19:49:31Z", "type": "commit"}, {"oid": "7ad134de34257e969783f6450f2f3690a7c0a59a", "url": "https://github.com/ls1intum/Artemis/commit/7ad134de34257e969783f6450f2f3690a7c0a59a", "message": "try nullable", "committedDate": "2020-10-05T20:19:26Z", "type": "commit"}, {"oid": "03f892a98b61e11da27c5072e17ae52eaf07db72", "url": "https://github.com/ls1intum/Artemis/commit/03f892a98b61e11da27c5072e17ae52eaf07db72", "message": "remove unused import", "committedDate": "2020-10-05T20:23:16Z", "type": "commit"}, {"oid": "abd6b740eef2c879229969643c12f7e79abd1970", "url": "https://github.com/ls1intum/Artemis/commit/abd6b740eef2c879229969643c12f7e79abd1970", "message": "remove nullable", "committedDate": "2020-10-05T20:50:12Z", "type": "commit"}, {"oid": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "url": "https://github.com/ls1intum/Artemis/commit/39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "message": "try jsonignore", "committedDate": "2020-10-05T21:17:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDE5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499904192", "bodyText": "If I see it correctly, this is used for all exercise types. To reduce code duplication you could extract this into ExerciseService.java :)", "author": "fde312", "createdAt": "2020-10-05T22:21:36Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "diffHunk": "@@ -106,6 +110,11 @@ public FileUploadExerciseResource(FileUploadExerciseService fileUploadExerciseSe\n \n         FileUploadExercise result = fileUploadExerciseRepository.save(fileUploadExercise);\n \n+        // Generate achievements if enabled in course and exercise not part of exam\n+        if (course.getHasAchievements() && (result.getExerciseGroup() == null || result.getExerciseGroup().getExam() == null)) {", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjAwNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499922007", "bodyText": "yeah, makes sense :) thanks", "author": "balazs-czopf", "createdAt": "2020-10-05T23:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916167", "bodyText": "I think you can remove the Transactional here when you just fetch the achievements for the users in the findAllByCourseId", "author": "fde312", "createdAt": "2020-10-05T22:57:52Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjE2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499922161", "bodyText": "also true, thanks for the advice :)", "author": "balazs-czopf", "createdAt": "2020-10-05T23:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjYzNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916636", "bodyText": "For my comment in the delete call:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")\n          \n          \n            \n                @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users u LEFT JOIN FETCH u.achievements WHERE a.course.id = :#{#courseId}\")", "author": "fde312", "createdAt": "2020-10-05T22:59:27Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a LEFT JOIN FETCH a.users WHERE a.course.id = :#{#courseId}\")", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjc4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r499916787", "bodyText": "Same as above :)", "author": "fde312", "createdAt": "2020-10-05T22:59:54Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import javax.transaction.Transactional;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    @Transactional\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    @Transactional\n+    public void deleteByExerciseId(Long exerciseId) {", "originalCommit": "39f18fde4dfafea42fec7c2bd2edf098dc76ba12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "719a46d7fd1e520b77bb96ef30efe4d29582c872", "url": "https://github.com/ls1intum/Artemis/commit/719a46d7fd1e520b77bb96ef30efe4d29582c872", "message": "code quality improvement", "committedDate": "2020-10-05T23:16:05Z", "type": "commit"}, {"oid": "4f9400ee05f1f5802745ebdbac3d497f8debe2f2", "url": "https://github.com/ls1intum/Artemis/commit/4f9400ee05f1f5802745ebdbac3d497f8debe2f2", "message": "refactor", "committedDate": "2020-10-06T06:56:00Z", "type": "commit"}, {"oid": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "url": "https://github.com/ls1intum/Artemis/commit/00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "message": "adjust test as well", "committedDate": "2020-10-06T06:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzA3OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500643078", "bodyText": "Is this attribute set when the course is created by the instructor? If this is the case I would rename it to something like achievementsEnabled.", "author": "kloessst", "createdAt": "2020-10-06T23:00:15Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Course.java", "diffHunk": "@@ -102,6 +102,9 @@\n     @Column(name = \"presentation_score\")\n     private Integer presentationScore;\n \n+    @Column(name = \"has_achievements\", columnDefinition = \"Boolean default false\")\n+    private Boolean hasAchievements = false; // default value", "originalCommit": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzExNA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500807114", "bodyText": "Yes, it is. Renaming it then.", "author": "balazs-czopf", "createdAt": "2020-10-07T07:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDg4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500644887", "bodyText": "You could use exercise.hasExerciseGroup() to check for exam exercises.", "author": "kloessst", "createdAt": "2020-10-06T23:06:21Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final PointBasedAchievementService pointBasedAchievementService;\n+\n+    private final TimeBasedAchievementService timeBasedAchievementService;\n+\n+    private final ProgressBasedAchievementService progressBasedAchievementService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository, PointBasedAchievementService pointBasedAchievementService,\n+            TimeBasedAchievementService timeBasedAchievementService, ProgressBasedAchievementService progressBasedAchievementService) {\n+        this.achievementRepository = achievementRepository;\n+        this.pointBasedAchievementService = pointBasedAchievementService;\n+        this.timeBasedAchievementService = timeBasedAchievementService;\n+        this.progressBasedAchievementService = progressBasedAchievementService;\n+        this.userRepository = userRepository;\n+    }\n+\n+    /**\n+     * Finds all achievements for a user in a given course and returns them as a set\n+     * @param userId\n+     * @param courseId\n+     * @return set of achievements\n+     */\n+    public Set<Achievement> findAllByUserIdAndCourseId(Long userId, Long courseId) {\n+        return achievementRepository.findAllByUserIdAndCourseId(userId, courseId);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the course with the given courseId\n+     * Used when a course is deleted or when achievements are disabled again for a course\n+     * @param courseId\n+     */\n+    public void deleteByCourseId(Long courseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByCourseId(courseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Deletes all achievements that belong to the exercise with the given exerciseId\n+     * Used when an exercise is deleted\n+     * @param exerciseId\n+     */\n+    public void deleteByExerciseId(Long exerciseId) {\n+        Set<Achievement> achievements = achievementRepository.findAllByExerciseId(exerciseId);\n+        for (Achievement achievement : achievements) {\n+            removeFromUsers(achievement);\n+        }\n+        achievementRepository.deleteAll(achievements);\n+    }\n+\n+    /**\n+     * Removes an achievement from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void removeFromUsers(Achievement achievement) {\n+        var users = achievement.getUsers();\n+        for (User user : users) {\n+            user.removeAchievement(achievement);\n+        }\n+        userRepository.saveAll(users);\n+    }\n+\n+    /**\n+     * Generates achievements for a course\n+     * Used when course is updated or created and achievements are enabled for course\n+     * @param course\n+     */\n+    public void generateForCourse(Course course) {\n+        progressBasedAchievementService.generateAchievements(course);\n+    }\n+\n+    /**\n+     * Generates achievements for an exercise\n+     * If achievements are enabled for corresponding course and exercise is not part of exam\n+     * Used when exercise is created\n+     * @param course\n+     * @param exercise\n+     */\n+    public void generateForExercise(Course course, Exercise exercise) {\n+        if (course.getHasAchievements() && (exercise.getExerciseGroup() == null || exercise.getExerciseGroup().getExam() == null)) {", "originalCommit": "00ec5a4f4dc7f9eeeb161db5cd1c2f7e1a402c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzc3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500807774", "bodyText": "If that is sufficient, sure.", "author": "balazs-czopf", "createdAt": "2020-10-07T07:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDg4Nw=="}], "type": "inlineReview"}, {"oid": "9d35863fc9176959b6e549ea62985f2c3b5d2cef", "url": "https://github.com/ls1intum/Artemis/commit/9d35863fc9176959b6e549ea62985f2c3b5d2cef", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-10-07T07:44:56Z", "type": "commit"}, {"oid": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "url": "https://github.com/ls1intum/Artemis/commit/3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "message": "integrate review suggestions", "committedDate": "2020-10-07T08:01:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUwNA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817504", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-07T08:07:59Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    CourseService courseService;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course firstCourse;\n+\n+    private Course secondCourse;\n+\n+    private Exercise firstExercise;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        firstCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstCourse.setAchievementsEnabled(true);\n+        courseRepository.save(firstCourse);\n+        secondCourse = database.addCourseWithModelingAndTextAndFileUploadExercise();\n+        firstExercise = firstCourse.getExercises().stream().findFirst().get();\n+\n+        achievementService.generateForCourse(firstCourse);\n+        achievementService.generateForCourse(secondCourse);\n+        achievementService.generateForExercise(firstCourse, firstExercise);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test", "originalCommit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817510", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-10-07T08:08:00Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ParticipationRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.CourseService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    CourseService courseService;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ParticipationRepository participationRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course firstCourse;\n+\n+    private Course secondCourse;\n+\n+    private Exercise firstExercise;\n+\n+    @BeforeEach", "originalCommit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzUxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r500817515", "bodyText": "Codacy found an issue: Document empty constructor", "author": "artemis-bot", "createdAt": "2020-10-07T08:08:00Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementRank;\n+import de.tum.in.www1.artemis.domain.enumeration.AchievementType;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement extends DomainObject {\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_rank\")\n+    private AchievementRank rank;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"achievement_type\")\n+    private AchievementType type;\n+\n+    @ManyToOne\n+    private Course course;\n+\n+    @ManyToOne\n+    private Exercise exercise;\n+\n+    @ManyToMany(mappedBy = \"achievements\")\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonIgnoreProperties(\"achievements\")\n+    private Set<User> users = new HashSet<>();\n+\n+    public Achievement() {", "originalCommit": "3198ffe7b3c8590c0745f00f6ef6cb27701301f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e27d529128c11ca6eeb50cb57571e51ebf71a143", "url": "https://github.com/ls1intum/Artemis/commit/e27d529128c11ca6eeb50cb57571e51ebf71a143", "message": "add achievement storage", "committedDate": "2020-07-14T07:28:46Z", "type": "commit"}, {"oid": "de275af916b062001911f88c8dc897ffdbb22c9d", "url": "https://github.com/ls1intum/Artemis/commit/de275af916b062001911f88c8dc897ffdbb22c9d", "message": "fix changelog format", "committedDate": "2020-07-16T08:57:30Z", "type": "commit"}, {"oid": "972e1efc3c4df2730ebc8238280545a9ee45e353", "url": "https://github.com/ls1intum/Artemis/commit/972e1efc3c4df2730ebc8238280545a9ee45e353", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-07-16T08:59:17Z", "type": "commit"}, {"oid": "e72eedfcdab9d9786820ce38d03336287518fbc2", "url": "https://github.com/ls1intum/Artemis/commit/e72eedfcdab9d9786820ce38d03336287518fbc2", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-07-19T10:23:41Z", "type": "commit"}, {"oid": "7f260dd751faa52efff4c54c1167dfaae6718852", "url": "https://github.com/ls1intum/Artemis/commit/7f260dd751faa52efff4c54c1167dfaae6718852", "message": "minor fixes", "committedDate": "2020-07-19T13:00:10Z", "type": "commit"}, {"oid": "9f4a503e4c5c83936e2419bf86fc5eae4aca1ce2", "url": "https://github.com/ls1intum/Artemis/commit/9f4a503e4c5c83936e2419bf86fc5eae4aca1ce2", "message": "minor fixes part two", "committedDate": "2020-07-19T16:46:09Z", "type": "commit"}, {"oid": "a434a978449baa283f3b5f9a5a80b5256796c4d3", "url": "https://github.com/ls1intum/Artemis/commit/a434a978449baa283f3b5f9a5a80b5256796c4d3", "message": "remove unused import", "committedDate": "2020-07-19T16:53:00Z", "type": "commit"}, {"oid": "e81f1aafb864610c78ab8628c32c0b2b16928fb4", "url": "https://github.com/ls1intum/Artemis/commit/e81f1aafb864610c78ab8628c32c0b2b16928fb4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-07-20T09:00:20Z", "type": "commit"}, {"oid": "f553087c073b83e198e8b1d9f17b517af701e2e8", "url": "https://github.com/ls1intum/Artemis/commit/f553087c073b83e198e8b1d9f17b517af701e2e8", "message": "add asserts", "committedDate": "2020-07-20T09:15:21Z", "type": "commit"}, {"oid": "2e142509fc0288e4d413dd53adc4acea94c44feb", "url": "https://github.com/ls1intum/Artemis/commit/2e142509fc0288e4d413dd53adc4acea94c44feb", "message": "add checks for point based achievements", "committedDate": "2020-07-21T07:32:49Z", "type": "commit"}, {"oid": "b03e23710fe205090894c5b483e18321c06b95e1", "url": "https://github.com/ls1intum/Artemis/commit/b03e23710fe205090894c5b483e18321c06b95e1", "message": "fix typo and return type", "committedDate": "2020-07-27T16:19:21Z", "type": "commit"}, {"oid": "4a815c7d375596a690b924c929f31a4cb29fe068", "url": "https://github.com/ls1intum/Artemis/commit/4a815c7d375596a690b924c929f31a4cb29fe068", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-11T08:19:53Z", "type": "commit"}, {"oid": "94d24706f578fef980af17371f2c62a85664e48b", "url": "https://github.com/ls1intum/Artemis/commit/94d24706f578fef980af17371f2c62a85664e48b", "message": "Merge branch 'develop' into feature/achievements/point-based-checks", "committedDate": "2020-08-11T08:20:20Z", "type": "commit"}, {"oid": "f24c127f441012f187c865ed3467f7f569f147dc", "url": "https://github.com/ls1intum/Artemis/commit/f24c127f441012f187c865ed3467f7f569f147dc", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-14T14:26:33Z", "type": "commit"}, {"oid": "a2f96bfcb0065cbd61bb06aa9c2718a44691a63f", "url": "https://github.com/ls1intum/Artemis/commit/a2f96bfcb0065cbd61bb06aa9c2718a44691a63f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-17T16:48:13Z", "type": "commit"}, {"oid": "dd7af35f35cc660130e8fa4c003e003ef6969b12", "url": "https://github.com/ls1intum/Artemis/commit/dd7af35f35cc660130e8fa4c003e003ef6969b12", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-18T07:43:28Z", "type": "commit"}, {"oid": "1ad60b8b22a558f8f65ace6e151e72d86269742a", "url": "https://github.com/ls1intum/Artemis/commit/1ad60b8b22a558f8f65ace6e151e72d86269742a", "message": "Update 20200706223010_changelog.xml", "committedDate": "2020-08-18T22:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjQ1NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472562454", "bodyText": "AchievementEntity", "author": "stefanwaldhauser", "createdAt": "2020-08-19T00:15:19Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the StudentExam entity.", "originalCommit": "1ad60b8b22a558f8f65ace6e151e72d86269742a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwOTE3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r472909177", "bodyText": "Oh thanks, don\u00b4t know how I could overlook that \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-08-19T09:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjQ1NA=="}], "type": "inlineReview"}, {"oid": "e9f0edb87441d63c5ff8fe668b57b237f1cb4a38", "url": "https://github.com/ls1intum/Artemis/commit/e9f0edb87441d63c5ff8fe668b57b237f1cb4a38", "message": "correct comment", "committedDate": "2020-08-19T09:55:22Z", "type": "commit"}, {"oid": "c4669dabb538cfe77d13a0e0edc864da34a50144", "url": "https://github.com/ls1intum/Artemis/commit/c4669dabb538cfe77d13a0e0edc864da34a50144", "message": "adjust testcases", "committedDate": "2020-08-19T10:55:05Z", "type": "commit"}, {"oid": "99f2f6768169c7797b7d53bd74fd231ec3685038", "url": "https://github.com/ls1intum/Artemis/commit/99f2f6768169c7797b7d53bd74fd231ec3685038", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-19T16:05:59Z", "type": "commit"}, {"oid": "51c61b920c49e6c63f69756edd666884b9ca3cfa", "url": "https://github.com/ls1intum/Artemis/commit/51c61b920c49e6c63f69756edd666884b9ca3cfa", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-24T14:57:02Z", "type": "commit"}, {"oid": "3d4e4cc13f97b0a0d4c004ab07a76cffbd07d762", "url": "https://github.com/ls1intum/Artemis/commit/3d4e4cc13f97b0a0d4c004ab07a76cffbd07d762", "message": "refactor according to feedback in issue", "committedDate": "2020-08-25T05:35:56Z", "type": "commit"}, {"oid": "2432f78d48bc42ee32c0d5a5880ff7789cc6c130", "url": "https://github.com/ls1intum/Artemis/commit/2432f78d48bc42ee32c0d5a5880ff7789cc6c130", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-26T12:14:52Z", "type": "commit"}, {"oid": "8f5da67987bcf3198dbf86886d0740d20a1ce945", "url": "https://github.com/ls1intum/Artemis/commit/8f5da67987bcf3198dbf86886d0740d20a1ce945", "message": "refactor tests", "committedDate": "2020-08-27T19:17:21Z", "type": "commit"}, {"oid": "0dccee74bc806babfd462be86d5afa0f101b1aa8", "url": "https://github.com/ls1intum/Artemis/commit/0dccee74bc806babfd462be86d5afa0f101b1aa8", "message": "end world hunger", "committedDate": "2020-08-28T10:00:16Z", "type": "commit"}, {"oid": "d920609e115d481728c31a12f249ff69af94e9d1", "url": "https://github.com/ls1intum/Artemis/commit/d920609e115d481728c31a12f249ff69af94e9d1", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-28T10:01:56Z", "type": "commit"}, {"oid": "c7f4ee33c43213ef762c8ae5424e6064fa75cac9", "url": "https://github.com/ls1intum/Artemis/commit/c7f4ee33c43213ef762c8ae5424e6064fa75cac9", "message": "Update Achievement.java", "committedDate": "2020-08-28T12:03:54Z", "type": "commit"}, {"oid": "003ca137e32c922818eb661ff973171ed13b2c1d", "url": "https://github.com/ls1intum/Artemis/commit/003ca137e32c922818eb661ff973171ed13b2c1d", "message": "Update Achievement.java", "committedDate": "2020-08-28T12:04:12Z", "type": "commit"}, {"oid": "666dd0eafa4822ee94d5cc1866b97aa926a8ab1c", "url": "https://github.com/ls1intum/Artemis/commit/666dd0eafa4822ee94d5cc1866b97aa926a8ab1c", "message": "Update Achievement.java", "committedDate": "2020-08-28T14:07:06Z", "type": "commit"}, {"oid": "198e5998d51d5103ab55075d2bee38be7a95c67d", "url": "https://github.com/ls1intum/Artemis/commit/198e5998d51d5103ab55075d2bee38be7a95c67d", "message": "Update Achievement.java", "committedDate": "2020-08-28T14:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0NjkwMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479646903", "bodyText": "I think we need here also getAllByUserIdAndCourseId as it can be that students are registered for several courses.", "author": "fde312", "createdAt": "2020-08-29T12:54:36Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/AchievementRepository.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package de.tum.in.www1.artemis.repository;\n+\n+import java.util.Set;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+\n+/**\n+ * Spring Data JPA repository for the Achievement entity.\n+ */\n+@Repository\n+public interface AchievementRepository extends JpaRepository<Achievement, Long> {\n+\n+    @Query(\"SELECT a FROM Achievement a WHERE a.course.id = :#{#courseId}\")\n+    Set<Achievement> getAllByCourseId(@Param(\"courseId\") Long courseId);\n+\n+    @Query(\"SELECT a FROM Achievement a JOIN a.users u WHERE u.id = :#{#userId}\")\n+    Set<Achievement> getAllByUserId(@Param(\"userId\") Long userId);\n+}", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NjU4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479746581", "bodyText": "Yeah sure.\nMy idea was to display a list of all achievements in a course in its dashboard with the achievements not yet received grayed out and the earned ones in color. So you would have to get all achievements for the course but without the user being able to see other students' information.\nBut it doesn\u00b4t hurt to also have the possibility to get achievements by course id and user id.", "author": "balazs-czopf", "createdAt": "2020-08-30T09:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0NjkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0Nzk4NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479647984", "bodyText": "I would move that to AchievementResource.java", "author": "fde312", "createdAt": "2020-08-29T13:05:37Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/CourseResource.java", "diffHunk": "@@ -994,4 +982,18 @@ public void fetchParticipationsWithSubmissionsAndResultsForCourses(List<Course>\n             return forbidden();\n         }\n     }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0Njc4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479746781", "bodyText": "This was also my first thought, but looking at the URI wouldn\u00b4t it make more sense in the CourseResource.java since I am loading sth. for the course?", "author": "balazs-czopf", "createdAt": "2020-08-30T09:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0Nzk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648262", "bodyText": "Add REST call to delete achievements", "author": "fde312", "createdAt": "2020-08-29T13:09:16Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    public AchievementResource(AchievementService achievementService, UserService userService) {\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+}", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODY4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648686", "bodyText": "Add REST call to create/update achievements", "author": "fde312", "createdAt": "2020-08-29T13:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NzgyMw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479757823", "bodyText": "Done :)", "author": "balazs-czopf", "createdAt": "2020-08-30T11:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODU1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648551", "bodyText": "Use delete REST call", "author": "fde312", "createdAt": "2020-08-29T13:12:22Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {\n+            achievementToUpdate.get().setDescription(\"Updated achievement\");\n+            achievementRepository.save(achievementToUpdate.get());\n+            assertThat(achievementRepository.findById(achievement.getId()).get()).isEqualTo(achievementToUpdate.get()).as(\"Achievement is updated correctly\");\n+        }\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testDeleteAchievement() {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+        achievement = achievementRepository.save(achievement);\n+        achievementService.delete(achievement);", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1Nzg4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479757881", "bodyText": "done", "author": "balazs-czopf", "createdAt": "2020-08-30T11:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODk3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479648973", "bodyText": "I think this test will be also successful even though the achievementToUpdate.isPresent() is false as the assert is in the if statement", "author": "fde312", "createdAt": "2020-08-29T13:17:19Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+\n+        userRepository.delete(user);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isTrue().as(\"Achievement does not get deleted if user does\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToOneRelationToCourseRepository() throws Exception {\n+        var achievements = request.get(\"/api/courses/\" + course.getId() + \"/achievements\", HttpStatus.OK, Set.class);\n+        assertThat(achievements.size()).isEqualTo(1).as(\"Number of achievements for course should be 1\");\n+\n+        courseRepository.delete(course);\n+        assertThat(achievementRepository.findAll().contains(achievement)).isFalse().as(\"Achievement gets deleted if course does\");\n+    }\n+\n+    @Test\n+    public void testUpdateAchievement() {\n+        user.addAchievement(achievement);\n+        userRepository.save(user);\n+        var achievementToUpdate = achievementRepository.findById(achievement.getId());\n+        if (achievementToUpdate.isPresent()) {", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0ODM0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479748348", "bodyText": "Removed the if statement :) thanks", "author": "balazs-czopf", "createdAt": "2020-08-30T09:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0ODk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTI5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479649290", "bodyText": "You could use here the create REST Call instead and for the above lines (same for tests below)", "author": "fde312", "createdAt": "2020-08-29T13:21:17Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User user;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        user = database.addUsers(1, 0, 0).get(0);\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);\n+        achievement.setTitle(\"Test Achievement\");\n+        achievement.setDescription(\"Create correct relations\");\n+        achievement.setIcon(\"\");\n+        achievement.setRank(1);\n+        achievement.setCourse(course);\n+\n+        achievement = achievementRepository.save(achievement);\n+    }\n+\n+    @AfterEach\n+    public void resetDatabase() {\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    public void testManyToManyRelationToUser() {\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+\n+        user.addAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(1).as(\"Number of achievements for user should be 1\");\n+        assertThat(user.getAchievements().contains(achievement)).isTrue().as(\"User has correct achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(1).as(\"Number of users for achievement should be 1\");\n+        assertThat(achievement.getUsers().contains(user)).isTrue().as(\"Achievement has correct user\");\n+\n+        user.removeAchievement(achievement);\n+        assertThat(user.getAchievements().size()).isEqualTo(0).as(\"Number of achievements for user should be 0\");\n+        assertThat(user.getAchievements().contains(achievement)).isFalse().as(\"User does not have removed achievement\");\n+        assertThat(achievement.getUsers().size()).isEqualTo(0).as(\"Number of users for achievement should be 0\");\n+        assertThat(achievement.getUsers().contains(user)).isFalse().as(\"Achievement does not have incorrect user\");\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testManyToManyRelationToUserRepository() throws Exception {\n+        user.addAchievement(achievement);\n+        user = userRepository.save(user);\n+\n+        var achievements = request.get(\"/api/achievements\", HttpStatus.OK, Set.class);", "originalCommit": "198e5998d51d5103ab55075d2bee38be7a95c67d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MDA0OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479760048", "bodyText": "There is no create REST call for achievements, only update.", "author": "balazs-czopf", "createdAt": "2020-08-30T11:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTI5MA=="}], "type": "inlineReview"}, {"oid": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "url": "https://github.com/ls1intum/Artemis/commit/669ba95aca108519bc3499ee88a04461aaa1f1b6", "message": "integrate feedback", "committedDate": "2020-08-30T11:45:23Z", "type": "commit"}, {"oid": "3233af82374e6b412cee00ab670bf23f05769c11", "url": "https://github.com/ls1intum/Artemis/commit/3233af82374e6b412cee00ab670bf23f05769c11", "message": "Merge branch 'feature/achievements/storage' of https://github.com/ls1intum/Artemis into feature/achievements/storage", "committedDate": "2020-08-30T11:46:11Z", "type": "commit"}, {"oid": "9df40089b21ad7551313f5b19e32f3fd5e632a4f", "url": "https://github.com/ls1intum/Artemis/commit/9df40089b21ad7551313f5b19e32f3fd5e632a4f", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-30T11:47:17Z", "type": "commit"}, {"oid": "d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "url": "https://github.com/ls1intum/Artemis/commit/d79fe9f4e5d9b3656047b7dc9c1cc7c52379f9d2", "message": "fix missing parameter", "committedDate": "2020-08-30T13:25:01Z", "type": "commit"}, {"oid": "84ce3abcc1059d698df86587b1e2a400cbc7b05c", "url": "https://github.com/ls1intum/Artemis/commit/84ce3abcc1059d698df86587b1e2a400cbc7b05c", "message": "fix URI and roles", "committedDate": "2020-08-30T13:53:02Z", "type": "commit"}, {"oid": "ec718eb715f9773b914d77078e2cf8ec6e0c61b1", "url": "https://github.com/ls1intum/Artemis/commit/ec718eb715f9773b914d77078e2cf8ec6e0c61b1", "message": "fix java codestyle", "committedDate": "2020-08-30T14:02:41Z", "type": "commit"}, {"oid": "497e3316832c66677399172c3bc6bd223073c1b2", "url": "https://github.com/ls1intum/Artemis/commit/497e3316832c66677399172c3bc6bd223073c1b2", "message": "fix failing tests", "committedDate": "2020-08-30T17:00:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTE0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811141", "bodyText": "The variable name result is here a bit misleading (as we have a Result class). I would use response, achievementResponse or just achievement", "author": "fde312", "createdAt": "2020-08-30T20:16:30Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -47,4 +65,52 @@ public AchievementResource(AchievementService achievementService, UserService us\n         return ResponseEntity.ok(achievements);\n     }\n \n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) throws URISyntaxException {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Achievement result = achievementRepository.save(achievement);", "originalCommit": "669ba95aca108519bc3499ee88a04461aaa1f1b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjgxNA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479812814", "bodyText": "yeah, makes sense \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-08-30T20:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811492", "bodyText": "Why did you add here and below @Transactional?", "author": "fde312", "createdAt": "2020-08-30T20:20:53Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {", "originalCommit": "497e3316832c66677399172c3bc6bd223073c1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzAxNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479813017", "bodyText": "The users are lazily initialized for achievements, so to be able to get the users within the hideUsersInAchievements function, I added that annotation.", "author": "balazs-czopf", "createdAt": "2020-08-30T20:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479811692", "bodyText": "I think you can leave out the @Transactional above when you persist here the achievements into the database.", "author": "fde312", "createdAt": "2020-08-30T20:22:55Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForCourse(Long courseId, Long userId) {\n+        var achievements = achievementRepository.getAllByCourseId(courseId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    @Transactional\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        var achievements = achievementRepository.getAllByUserId(userId);\n+        return hideUsersInAchievements(achievements, userId);\n+    }\n+\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {\n+            user.removeAchievement(achievement);\n+            userRepository.save(user);\n+        }\n+        achievementRepository.delete(achievement);\n+    }\n+\n+    private Set<Achievement> hideUsersInAchievements(Set<Achievement> achievements, Long userId) {\n+        for (Achievement achievement : achievements) {\n+            achievement.getUsers().removeIf(userToRemove -> !userToRemove.getId().equals(userId));\n+        }\n+        return achievements;", "originalCommit": "497e3316832c66677399172c3bc6bd223073c1b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzU3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r479813571", "bodyText": "I don\u00b4t want to persist them here, since I just removed all the users (besides the requesting one) from the achievements. This is for data protection purposes only before sending the data to the client. I don\u00b4t want to actually delete those achievements for all other users. \ud83d\ude04", "author": "balazs-czopf", "createdAt": "2020-08-30T20:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY5Mg=="}], "type": "inlineReview"}, {"oid": "07837b56882d0df7027dd1422c761e34f89147f1", "url": "https://github.com/ls1intum/Artemis/commit/07837b56882d0df7027dd1422c761e34f89147f1", "message": "update variable name", "committedDate": "2020-08-30T20:34:54Z", "type": "commit"}, {"oid": "f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "url": "https://github.com/ls1intum/Artemis/commit/f0bc01d15b7e677a36aa71c0319f71bb6ed7a885", "message": "few fixes", "committedDate": "2020-08-30T22:23:52Z", "type": "commit"}, {"oid": "cbe0fa5d020deb1872587771311cf95735d6fbeb", "url": "https://github.com/ls1intum/Artemis/commit/cbe0fa5d020deb1872587771311cf95735d6fbeb", "message": "Merge branch 'feature/achievements/storage' of https://github.com/ls1intum/Artemis into feature/achievements/storage", "committedDate": "2020-08-30T22:25:53Z", "type": "commit"}, {"oid": "1882f801a065a93bf07972cc6cbca1f623579186", "url": "https://github.com/ls1intum/Artemis/commit/1882f801a065a93bf07972cc6cbca1f623579186", "message": "fix wrong variable", "committedDate": "2020-08-30T22:30:32Z", "type": "commit"}, {"oid": "31966613a4ee4179be8f16688ef84aa51272e675", "url": "https://github.com/ls1intum/Artemis/commit/31966613a4ee4179be8f16688ef84aa51272e675", "message": "add documentation", "committedDate": "2020-08-30T22:59:23Z", "type": "commit"}, {"oid": "5a890b63c2cf16cf422548fe9d20849d71967bcd", "url": "https://github.com/ls1intum/Artemis/commit/5a890b63c2cf16cf422548fe9d20849d71967bcd", "message": "trigger new build 1/2", "committedDate": "2020-08-31T09:16:58Z", "type": "commit"}, {"oid": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "url": "https://github.com/ls1intum/Artemis/commit/1631126ec91b00529db9044aca65d2b9eae6e1d1", "message": "trigger new build 2/2", "committedDate": "2020-08-31T09:17:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDUzNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480324536", "bodyText": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "author": "linusmichel", "createdAt": "2020-08-31T18:55:34Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTQ5MA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480349490", "bodyText": "Well, this is how we usually check for access rights based on authorities", "author": "balazs-czopf", "createdAt": "2020-08-31T19:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDc1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480324759", "bodyText": "Is there no better way to check if a user is logged in? If roles change in the future, they would need to be adjusted here as well.", "author": "linusmichel", "createdAt": "2020-08-31T18:55:53Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTYzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480349639", "bodyText": "Same as above", "author": "balazs-czopf", "createdAt": "2020-08-31T19:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjQ1OA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480326458", "bodyText": "Is there a chance of some sensitive data coming along with achievements? In this case, I guess we would need to check for the user access rights for the course first.", "author": "linusmichel", "createdAt": "2020-08-31T18:58:53Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2MDQ3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480360473", "bodyText": "Not really. Well achievements do have a relation to users but users are loaded lazily within achievements by default and since not requested explicitly they remain null here.", "author": "balazs-czopf", "createdAt": "2020-08-31T19:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTQxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480329418", "bodyText": "I would move this check to the method start", "author": "linusmichel", "createdAt": "2020-08-31T19:04:41Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "originalCommit": "1631126ec91b00529db9044aca65d2b9eae6e1d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NjI5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480366296", "bodyText": "Done :) thanks", "author": "balazs-czopf", "createdAt": "2020-08-31T19:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTQxOA=="}], "type": "inlineReview"}, {"oid": "8e040450690f9f7b8962366e1d892df304682c95", "url": "https://github.com/ls1intum/Artemis/commit/8e040450690f9f7b8962366e1d892df304682c95", "message": "move check in function", "committedDate": "2020-08-31T19:55:47Z", "type": "commit"}, {"oid": "b07582a02ee19947182bc0e8c8d434041dc35755", "url": "https://github.com/ls1intum/Artemis/commit/b07582a02ee19947182bc0e8c8d434041dc35755", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-08-31T19:59:14Z", "type": "commit"}, {"oid": "0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "url": "https://github.com/ls1intum/Artemis/commit/0616ac4ef001698a1e962c595c2ceecc0eb76dd0", "message": "get 100 percent test coverage", "committedDate": "2020-08-31T21:25:54Z", "type": "commit"}, {"oid": "45dac20bf2cd9e41c1e6ff21336a2849962b462e", "url": "https://github.com/ls1intum/Artemis/commit/45dac20bf2cd9e41c1e6ff21336a2849962b462e", "message": "tiny fix", "committedDate": "2020-08-31T22:03:36Z", "type": "commit"}, {"oid": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "url": "https://github.com/ls1intum/Artemis/commit/11b272cd28a879d99eefff297aec8bf6d3f4748c", "message": "remove unnecessary eager", "committedDate": "2020-08-31T23:26:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MDUxMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480480511", "bodyText": "Double check if this is correct: https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#pc-cascade-on-delete. Sounds to me like this is only for auto generated schemas. We also never use this in Artemis at the moment", "author": "kloessst", "createdAt": "2020-08-31T23:58:44Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;\n+\n+    @ManyToOne\n+    @OnDelete(action = OnDeleteAction.CASCADE)", "originalCommit": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgyOTI5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480829293", "bodyText": "Well, the example in this link shows quite the behavior I want to have here.", "author": "balazs-czopf", "createdAt": "2020-09-01T05:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MDUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTM3OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480495379", "bodyText": "I'd rather use an enum here to standardize the ranks across the system. For example AchievementRanks with PLATIN, GOLD, SILVER, BRONZE. Then you can easily couple these values with your achievement definitions.", "author": "kloessst", "createdAt": "2020-09-01T00:26:23Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Achievement.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.persistence.*;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.OnDelete;\n+import org.hibernate.annotations.OnDeleteAction;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+@Entity\n+@Table(name = \"achievement\")\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class Achievement implements Serializable {\n+\n+    @Id\n+    @Column(name = \"id\")\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"icon\")\n+    private String icon;\n+\n+    @Column(name = \"rank\")\n+    private Integer rank;", "originalCommit": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjA5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480836092", "bodyText": "That\u00b4s a good point actually, thanks \ud83d\udc4d", "author": "balazs-czopf", "createdAt": "2020-09-01T05:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NTM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjMxOA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480496318", "bodyText": "I would add an validation for the rank which is defined as INT at the moment. For example only allow ranks >0 or use the enum approach explained above.", "author": "kloessst", "createdAt": "2020-09-01T00:27:55Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }", "originalCommit": "11b272cd28a879d99eefff297aec8bf6d3f4748c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNjk5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480836995", "bodyText": "Went for the enum approach :)", "author": "balazs-czopf", "createdAt": "2020-09-01T05:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjMxOA=="}], "type": "inlineReview"}, {"oid": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "url": "https://github.com/ls1intum/Artemis/commit/38f60a94a755877c7b502fda4cd54fca2ba8cb18", "message": "turn rank into enum", "committedDate": "2020-09-01T05:59:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTAyMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480941022", "bodyText": "what happens if the user objects are proxy objects here?\nIf you expect that the achievement includes the actual users, please clearly mention this in the JavaDoc", "author": "krusche", "createdAt": "2020-09-01T07:54:57Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AchievementService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+\n+@Service\n+public class AchievementService {\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    private final UserRepository userRepository;\n+\n+    public AchievementService(AchievementRepository achievementRepository, UserRepository userRepository) {\n+        this.achievementRepository = achievementRepository;\n+        this.userRepository = userRepository;\n+    }\n+\n+    public Optional<Achievement> findById(Long achievementId) {\n+        return achievementRepository.findById(achievementId);\n+    }\n+\n+    public Set<Achievement> findAllForCourse(Long courseId) {\n+        return achievementRepository.getAllByCourseId(courseId);\n+    }\n+\n+    public Set<Achievement> findAllForUser(Long userId) {\n+        return achievementRepository.getAllByUserId(userId);\n+    }\n+\n+    /**\n+     * Deletes an achievement by also removing it from all users\n+     * @param achievement achievement to be deleted\n+     */\n+    public void delete(Achievement achievement) {\n+        for (User user : achievement.getUsers()) {", "originalCommit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTYwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271601", "bodyText": "refactored", "author": "balazs-czopf", "createdAt": "2020-09-01T16:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTQ2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480941467", "bodyText": "please remove Transactional, we don't want to use it!", "author": "krusche", "createdAt": "2020-09-01T07:55:25Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AchievementResource.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.AccessForbiddenException;\n+import de.tum.in.www1.artemis.web.rest.util.HeaderUtil;\n+\n+/**\n+ * REST controller for managing Achievements.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class AchievementResource {\n+\n+    private static final String ENTITY_NAME = \"achievement\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final Logger log = LoggerFactory.getLogger(AchievementResource.class);\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final AchievementService achievementService;\n+\n+    private final UserService userService;\n+\n+    private final AchievementRepository achievementRepository;\n+\n+    public AchievementResource(AuthorizationCheckService authCheckService, AchievementService achievementService, UserService userService,\n+            AchievementRepository achievementRepository) {\n+        this.authCheckService = authCheckService;\n+        this.achievementService = achievementService;\n+        this.userService = userService;\n+        this.achievementRepository = achievementRepository;\n+    }\n+\n+    /**\n+     * GET /achievements : Get all achievements for user.\n+     *\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForUser() {\n+        User user = userService.getUser();\n+        log.debug(\"REST request to get achievements for user : {}\", user.getLogin());\n+        Set<Achievement> achievements = achievementService.findAllForUser(user.getId());\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * GET /courses/{courseId}/achievements : Get all achievements for course.\n+     *\n+     * @param courseId the course to which the achievements belong to\n+     * @return the ResponseEntity with status 200 (OK) and with the found achievements as body\n+     */\n+    @GetMapping(\"/courses/{courseId}/achievements\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Set<Achievement>> getAchievementsForCourse(@PathVariable Long courseId) {\n+        log.debug(\"REST request to get achievements for course : {}\", courseId);\n+        Set<Achievement> achievements = achievementService.findAllForCourse(courseId);\n+        return ResponseEntity.ok(achievements);\n+    }\n+\n+    /**\n+     * PUT /achievements : Updates an existing achievement.\n+     *\n+     * @param achievement the achievement to update\n+     * @return the ResponseEntity with status 200 (OK) and with body the updated achievement, or with status 500\n+     *         (Internal Server Error) if the achievement couldn't be updated\n+     */\n+    @PutMapping(\"/achievements\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Achievement> updateAchievement(@RequestBody Achievement achievement) {\n+        log.debug(\"REST request to update Achievement : {}\", achievement);\n+\n+        if (achievement.getId() == null) {\n+            return ResponseEntity.badRequest().build();\n+        }\n+\n+        Course course = achievement.getCourse();\n+        User user = userService.getUserWithGroupsAndAuthorities();\n+        if (!authCheckService.isAtLeastInstructorInCourse(course, user)) {\n+            throw new AccessForbiddenException(\"You are not allowed to access this resource\");\n+        }\n+\n+        Achievement savedAchievement = achievementRepository.save(achievement);\n+        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, savedAchievement.getId().toString())).body(savedAchievement);\n+    }\n+\n+    /**\n+     * DELETE /achievements/:achievementId : delete the \"id\" achievement.\n+     *\n+     * @param achievementId the id of the achievement to delete\n+     * @return the ResponseEntity with status 200 (OK)\n+     */\n+    @DeleteMapping(\"/achievements/{achievementId}\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    @Transactional", "originalCommit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTQzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271435", "bodyText": "removed", "author": "balazs-czopf", "createdAt": "2020-09-01T16:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0Mjc2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r480942767", "bodyText": "When you save new entities to the database, they should not contain an id already!", "author": "krusche", "createdAt": "2020-09-01T07:57:00Z", "path": "src/test/java/de/tum/in/www1/artemis/AchievementIntegrationTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package de.tum.in.www1.artemis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Achievement;\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Rank;\n+import de.tum.in.www1.artemis.repository.AchievementRepository;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.AchievementService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class AchievementIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    AchievementService achievementService;\n+\n+    @Autowired\n+    AchievementRepository achievementRepository;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    private User student;\n+\n+    private User instructor;\n+\n+    private Course course;\n+\n+    private Achievement achievement;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        var users = database.addUsers(1, 0, 1);\n+        student = users.get(0);\n+        instructor = users.get(1);\n+        instructor.setGroups(new HashSet<>(Arrays.asList(\"instructor\")));\n+        course = database.addEmptyCourse();\n+\n+        achievement = new Achievement();\n+        achievement.setId(1L);", "originalCommit": "38f60a94a755877c7b502fda4cd54fca2ba8cb18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MTUyOA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481271528", "bodyText": "removed", "author": "balazs-czopf", "createdAt": "2020-09-01T16:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0Mjc2Nw=="}], "type": "inlineReview"}, {"oid": "d85f5f34a571777d2b7558382f25bf6bc7434049", "url": "https://github.com/ls1intum/Artemis/commit/d85f5f34a571777d2b7558382f25bf6bc7434049", "message": "remove unnecessary changesets", "committedDate": "2020-09-01T08:01:09Z", "type": "commit"}, {"oid": "fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "url": "https://github.com/ls1intum/Artemis/commit/fd13e3d27e731c1b8d1a2dea0e1c43ae2468034b", "message": "integrate feedback", "committedDate": "2020-09-01T16:16:55Z", "type": "commit"}, {"oid": "4b93d0e90fde6137e06a126e85edefb5814f653c", "url": "https://github.com/ls1intum/Artemis/commit/4b93d0e90fde6137e06a126e85edefb5814f653c", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-01T16:18:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481337665", "bodyText": "Should be findAllWithEagerAchivement or not?\nI think this would be more understandable, when you do it the other way around.\nSo in the AchievementRepository and make findByIdWithEagerUsers(achievementId)", "author": "fde312", "createdAt": "2020-09-01T18:12:27Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/UserRepository.java", "diffHunk": "@@ -96,4 +96,7 @@\n \n     @Query(\"select distinct team.students from Team team where team.exercise.course.id = :#{#courseId} and team.shortName = :#{#teamShortName}\")\n     Set<User> findAllInTeam(@Param(\"courseId\") Long courseId, @Param(\"teamShortName\") String teamShortName);\n+\n+    @Query(\"SELECT u FROM User u JOIN FETCH u.achievements a WHERE a.id = :#{#achievementId}\")\n+    Set<User> findAllWithEagerAchievements(@Param(\"achievementId\") Long achievementId);", "originalCommit": "4b93d0e90fde6137e06a126e85edefb5814f653c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mjg5NA==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481342894", "bodyText": "yeah, a renaming to findAllByAchievementId makes sense, but I do want to get the users", "author": "balazs-czopf", "createdAt": "2020-09-01T18:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTAwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481411006", "bodyText": "sounds good! :)", "author": "fde312", "createdAt": "2020-09-01T20:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzY2NQ=="}], "type": "inlineReview"}, {"oid": "e71c08bfb8259e519230dcb95a44996794c4e79e", "url": "https://github.com/ls1intum/Artemis/commit/e71c08bfb8259e519230dcb95a44996794c4e79e", "message": "change query function name", "committedDate": "2020-09-01T20:26:30Z", "type": "commit"}, {"oid": "9508d2e30a1f565543bf539723faac6031854da4", "url": "https://github.com/ls1intum/Artemis/commit/9508d2e30a1f565543bf539723faac6031854da4", "message": "Merge branch 'develop' into feature/achievements/storage", "committedDate": "2020-09-01T20:28:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTAzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481415032", "bodyText": "Maybe rename this to AchievementRank so that one can see directly that this belongs to achievements :)", "author": "fde312", "createdAt": "2020-09-01T20:34:55Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/enumeration/Rank.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package de.tum.in.www1.artemis.domain.enumeration;\n+", "originalCommit": "9508d2e30a1f565543bf539723faac6031854da4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTgzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1878#discussion_r481415837", "bodyText": "Good point :) done so", "author": "balazs-czopf", "createdAt": "2020-09-01T20:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNTAzMg=="}], "type": "inlineReview"}, {"oid": "9d6b585f50ea18da108af99466daf80870a21a0b", "url": "https://github.com/ls1intum/Artemis/commit/9d6b585f50ea18da108af99466daf80870a21a0b", "message": "rename rank enum", "committedDate": "2020-09-01T20:35:23Z", "type": "commit"}, {"oid": "c842d6d85c758969dce647319d9e503bc90b7c11", "url": "https://github.com/ls1intum/Artemis/commit/c842d6d85c758969dce647319d9e503bc90b7c11", "message": "Merge branch 'feature/achievements/storage' of https://github.com/ls1intum/Artemis into feature/achievements/storage", "committedDate": "2020-09-01T20:35:57Z", "type": "commit"}, {"oid": "efe97b904e2506356b25a51a137cc654e2ffb140", "url": "https://github.com/ls1intum/Artemis/commit/efe97b904e2506356b25a51a137cc654e2ffb140", "message": "add javadoc", "committedDate": "2020-09-01T20:52:36Z", "type": "commit"}]}