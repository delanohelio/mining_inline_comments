{"pr_number": 2096, "pr_title": "[Exam] Test Run", "pr_createdAt": "2020-09-10T08:52:50Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2096", "timeline": [{"oid": "6c443779982ad73b5f7c969264a370b24c206f78", "url": "https://github.com/ls1intum/Artemis/commit/6c443779982ad73b5f7c969264a370b24c206f78", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-23T06:49:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTAyMA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493259020", "bodyText": "Question to the naming pattern: Shouldn't these method names also include a IgnoreTestRuns, like findWithExercisesByUserIdAndExamIdIgnoreTestRuns", "author": "TobiasPr", "createdAt": "2020-09-23T07:32:01Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2Njc5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493266799", "bodyText": "I have followed the convention of distinguishing between student exams and test runs. Repository calls which return StudentExams which are test runs follow the naming: findTestRun, whereas all calls named findStudentExam.. ignore them.\nI think this makes it clearer which function to use as we want to distinguish clearly between student exams and test runs.\nThe \"IgnoreTestRuns\" is added to participations & submission calls by contrast", "author": "anditurdiu", "createdAt": "2020-09-23T07:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTM0Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493259343", "bodyText": "Same naming  pattern question here", "author": "TobiasPr", "createdAt": "2020-09-23T07:32:33Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2Njk1MA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493266950", "bodyText": "Same naming pattern question here", "author": "TobiasPr", "createdAt": "2020-09-23T07:44:35Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = true\")\n+    List<StudentExam> findAllTestRunsByExamId(@Param(\"examId\") Long examId);\n \n-    Optional<StudentExam> findByExamIdAndUserId(Long examId, Long userId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s left join fetch s.result r left join fetch r.assessor a where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = sp.student.id\")\n+    List<StudentExam> findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se from StudentExam se left join se.exercises e where e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = :#{#userId}\")\n+    List<StudentExam> findAllTestRunsWithExercisesByExamIdForUser(@Param(\"examId\") Long examId, @Param(\"userId\") Long userId);\n+\n+    @Query(\"select distinct se from StudentExam se where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n+    Optional<StudentExam> findByExamIdAndUserId(@Param(\"examId\") long examId, @Param(\"userId\") long userId);", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2NzA5MA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493267090", "bodyText": "Same naming pattern question here", "author": "TobiasPr", "createdAt": "2020-09-23T07:44:47Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = true\")\n+    List<StudentExam> findAllTestRunsByExamId(@Param(\"examId\") Long examId);\n \n-    Optional<StudentExam> findByExamIdAndUserId(Long examId, Long userId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s left join fetch s.result r left join fetch r.assessor a where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = sp.student.id\")\n+    List<StudentExam> findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se from StudentExam se left join se.exercises e where e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = :#{#userId}\")\n+    List<StudentExam> findAllTestRunsWithExercisesByExamIdForUser(@Param(\"examId\") Long examId, @Param(\"userId\") Long userId);\n+\n+    @Query(\"select distinct se from StudentExam se where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n+    Optional<StudentExam> findByExamIdAndUserId(@Param(\"examId\") long examId, @Param(\"userId\") long userId);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n     Optional<StudentExam> findByExerciseIdAndUserId(@Param(\"exerciseId\") Long exerciseId, @Param(\"userId\") Long userId);", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2ODAwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493268005", "bodyText": "Same naming pattern question here", "author": "TobiasPr", "createdAt": "2020-09-23T07:46:15Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/StudentExamRepository.java", "diffHunk": "@@ -24,22 +24,41 @@\n     @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n     Optional<StudentExam> findWithExercisesById(Long id);\n \n-    @EntityGraph(type = LOAD, attributePaths = { \"exercises\" })\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n     Optional<StudentExam> findWithExercisesByUserIdAndExamId(@Param(\"userId\") long userId, @Param(\"examId\") long examId);\n \n-    List<StudentExam> findByExamId(Long examId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and sp.student.id = :#{#studentId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsByIdForUser(@Param(\"studentExamId\") Long studentExamId, @Param(\"studentId\") Long studentId,\n+            @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s where se.id = :#{#studentExamId} and se.testRun = :#{#testRun}\")\n+    Optional<StudentExam> findWithExercisesParticipationsSubmissionsById(@Param(\"studentExamId\") Long studentExamId, @Param(\"testRun\") boolean testRun);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = false\")\n+    List<StudentExam> findByExamId(@Param(\"examId\") Long examId);\n+\n+    @Query(\"select se from StudentExam se where se.exam.id = :#{#examId} and se.testRun = true\")\n+    List<StudentExam> findAllTestRunsByExamId(@Param(\"examId\") Long examId);\n \n-    Optional<StudentExam> findByExamIdAndUserId(Long examId, Long userId);\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e left join fetch e.studentParticipations sp left join fetch sp.submissions s left join fetch s.result r left join fetch r.assessor a where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = sp.student.id\")\n+    List<StudentExam> findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se from StudentExam se left join se.exercises e where e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.exam.id = :#{#examId} and se.testRun = true and se.user.id = :#{#userId}\")\n+    List<StudentExam> findAllTestRunsWithExercisesByExamIdForUser(@Param(\"examId\") Long examId, @Param(\"userId\") Long userId);\n+\n+    @Query(\"select distinct se from StudentExam se where se.testRun = false and se.exam.id = :#{#examId} and se.user.id = :#{#userId} \")\n+    Optional<StudentExam> findByExamIdAndUserId(@Param(\"examId\") long examId, @Param(\"userId\") long userId);\n+\n+    @Query(\"select distinct se from StudentExam se left join fetch se.exercises e where se.testRun = false and e.id = :#{#exerciseId} and se.user.id = :#{#userId}\")\n     Optional<StudentExam> findByExerciseIdAndUserId(@Param(\"exerciseId\") Long exerciseId, @Param(\"userId\") Long userId);\n \n-    @Query(\"select max(se.workingTime) from StudentExam se where se.exam.id = :#{#examId}\")\n+    @Query(\"select max(se.workingTime) from StudentExam se where se.testRun = false and se.exam.id = :#{#examId}\")\n     Optional<Integer> findMaxWorkingTimeByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select distinct se.workingTime from StudentExam se where se.exam.id = :#{#examId}\")\n+    @Query(\"select distinct se.workingTime from StudentExam se where se.testRun = false and se.exam.id = :#{#examId}\")\n     Set<Integer> findAllDistinctWorkingTimesByExamId(@Param(\"examId\") Long examId);\n \n-    @Query(\"select u from StudentExam se left join se.user u where se.exam.id = :#{#examId}\")\n+    @Query(\"select distinct u from StudentExam se left join se.user u where se.testRun = false and se.exam.id = :#{#examId}\")\n     Set<User> findUsersWithStudentExamsForExam(@Param(\"examId\") Long examId);", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMxOTM5OA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493319398", "bodyText": "examMode: personally I like Enums better for that, because it is more explicit which mode you are setting and it is easier for new developers to debug (does not require that much of domain specific knowledge, i.e. what is the contrary of examMode), just my opinion", "author": "TobiasPr", "createdAt": "2020-09-23T08:40:49Z", "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionService.java", "diffHunk": "@@ -88,11 +90,18 @@ public FileUploadSubmission handleFileUploadSubmission(FileUploadSubmission file\n      *\n      * @param exerciseId    - the id of the exercise we are interested into\n      * @param submittedOnly - if true, it returns only submission with submitted flag set to true\n+     * @param examMode - set flag to to ignore exam test run submissions\n      * @return a list of file upload submissions for the given exercise id\n      */\n     @Transactional(readOnly = true)\n-    public List<FileUploadSubmission> getFileUploadSubmissions(Long exerciseId, boolean submittedOnly) {\n-        List<StudentParticipation> participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+    public List<FileUploadSubmission> getFileUploadSubmissions(Long exerciseId, boolean submittedOnly, boolean examMode) {", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyODc3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493328776", "bodyText": "why do we filter TestRunParticipations here when we have the if else above?", "author": "TobiasPr", "createdAt": "2020-09-23T08:50:18Z", "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionService.java", "diffHunk": "@@ -106,28 +115,47 @@ public FileUploadSubmission handleFileUploadSubmission(FileUploadSubmission file\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of file upload Submissions\n      */\n-    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());\n+        }\n+        else {\n+            submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+        }\n         return submissions.stream().map(submission -> {\n             submission.getResult().setSubmission(null);\n             return (FileUploadSubmission) submission;\n         }).collect(Collectors.toList());\n     }\n \n     /**\n-     * Given an exercise id, find a random file upload submission for that exercise which still doesn't have any manual result. No manual result means that no user has started an\n-     * assessment for the corresponding submission yet.\n+     * Given an exercise id, find a random file upload submission for that exercise which still doesn't have any manual result.\n+     * No manual result means that no user has started an assessment for the corresponding submission yet.\n+     * For exam exercises we should also remove the test run participations as these should not be graded by the tutors.\n      *\n      * @param fileUploadExercise the exercise for which we want to retrieve a submission without manual result\n+     * @param removeTestRunParticipations flag to determine if test runs should be removed. This should be set to true for exam exercises\n      * @return a fileUploadSubmission without any manual result or an empty Optional if no submission without manual result could be found\n      */\n     @Transactional(readOnly = true)\n-    public Optional<FileUploadSubmission> getFileUploadSubmissionWithoutManualResult(FileUploadExercise fileUploadExercise) {\n+    public Optional<FileUploadSubmission> getRandomFileUploadSubmissionEligibleForNewAssessment(FileUploadExercise fileUploadExercise, boolean removeTestRunParticipations) {\n         Random random = new Random();\n-        var participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResults(fileUploadExercise.getId());\n-        var submissionsWithoutResult = participations.stream().map(StudentParticipation::findLatestSubmission).filter(Optional::isPresent).map(Optional::get)\n+        List<StudentParticipation> participations;\n+        if (removeTestRunParticipations) {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRun(fileUploadExercise.getId());\n+        }\n+        else {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResults(fileUploadExercise.getId());\n+        }\n+\n+        List<FileUploadSubmission> submissionsWithoutResult = participations.stream().filter(studentParticipation -> !studentParticipation.isTestRunParticipation())", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MjUyMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493682521", "bodyText": "This was left over code, i removed it. Nice catch :)", "author": "anditurdiu", "createdAt": "2020-09-23T15:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyODc3Ng=="}], "type": "inlineReview"}, {"oid": "8d34fde32206570a0d2b0d35a30492481a064af2", "url": "https://github.com/ls1intum/Artemis/commit/8d34fde32206570a0d2b0d35a30492481a064af2", "message": "revert change to circular dependency", "committedDate": "2020-09-23T10:26:37Z", "type": "commit"}, {"oid": "c23594f3d4db08340b08a546acfbc0fcb892ca72", "url": "https://github.com/ls1intum/Artemis/commit/c23594f3d4db08340b08a546acfbc0fcb892ca72", "message": "refactor delete functionality", "committedDate": "2020-09-23T11:17:49Z", "type": "commit"}, {"oid": "f8c9d4780785294c4aa6ad889c042e48133cec96", "url": "https://github.com/ls1intum/Artemis/commit/f8c9d4780785294c4aa6ad889c042e48133cec96", "message": "refactor breakCircularDependency", "committedDate": "2020-09-23T11:44:00Z", "type": "commit"}, {"oid": "778f8e54a5670a2b8ab206603cfd920c547ebd4a", "url": "https://github.com/ls1intum/Artemis/commit/778f8e54a5670a2b8ab206603cfd920c547ebd4a", "message": "fix merge conflicts", "committedDate": "2020-09-23T11:45:16Z", "type": "commit"}, {"oid": "1212dd9823f6c4162ca9a71c21fe7e0ccb586ec1", "url": "https://github.com/ls1intum/Artemis/commit/1212dd9823f6c4162ca9a71c21fe7e0ccb586ec1", "message": "fix delete test run", "committedDate": "2020-09-23T12:59:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUyMDM2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493520367", "bodyText": "Unused Import! Should be removed", "author": "stefanwaldhauser", "createdAt": "2020-09-23T12:18:20Z", "path": "src/test/java/de/tum/in/www1/artemis/util/DatabaseUtilService.java", "diffHunk": "@@ -29,6 +29,7 @@\n import org.springframework.security.test.context.TestSecurityContextHolder;\n import org.springframework.stereotype.Service;\n import org.springframework.util.ResourceUtils;\n+import org.w3c.dom.Text;", "originalCommit": "778f8e54a5670a2b8ab206603cfd920c547ebd4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MjcyNg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493682726", "bodyText": "Is Removed :)", "author": "anditurdiu", "createdAt": "2020-09-23T15:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUyMDM2Nw=="}], "type": "inlineReview"}, {"oid": "3085be7fbafb2262e0636659493f7cc1d23affed", "url": "https://github.com/ls1intum/Artemis/commit/3085be7fbafb2262e0636659493f7cc1d23affed", "message": "fix nullpointer and fix delete for multiple referenced programming exercises", "committedDate": "2020-09-23T13:34:58Z", "type": "commit"}, {"oid": "27ef44abd8b25df54bb8d9b6acbe2055d5bee58b", "url": "https://github.com/ls1intum/Artemis/commit/27ef44abd8b25df54bb8d9b6acbe2055d5bee58b", "message": "code cleanup, improve tooltip for statusbar", "committedDate": "2020-09-23T15:00:32Z", "type": "commit"}, {"oid": "ce4763cc0cced3255ad9c8328b0e429fc0c51a32", "url": "https://github.com/ls1intum/Artemis/commit/ce4763cc0cced3255ad9c8328b0e429fc0c51a32", "message": "fix client test", "committedDate": "2020-09-23T15:46:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTUxMw==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493491513", "bodyText": "examTestRun can be defined within the if block.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        examTestRun = instructors.stream().anyMatch(instructor -> instructor.getLogin().equals(principal.getName()));\n          \n          \n            \n                        boolean examTestRun = instructors.stream().anyMatch(instructor -> instructor.getLogin().equals(principal.getName()));", "author": "jpbernius", "createdAt": "2020-09-23T11:46:32Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ComplaintService.java", "diffHunk": "@@ -64,10 +67,13 @@ public Complaint createComplaint(Complaint complaint, OptionalLong examId, Princ\n         StudentParticipation studentParticipation = (StudentParticipation) originalResult.getParticipation();\n         Participant participant = studentParticipation.getParticipant(); // Team or Student\n         Long courseId = studentParticipation.getExercise().getCourseViaExerciseGroupOrCourseMember().getId();\n+        boolean examTestRun;\n \n         if (examId.isPresent()) {\n             final Exam exam = examService.findOne(examId.getAsLong());\n-            if (!isTimeOfComplaintValid(exam)) {\n+            final List<User> instructors = userService.getInstructors(exam.getCourse());\n+            examTestRun = instructors.stream().anyMatch(instructor -> instructor.getLogin().equals(principal.getName()));", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NTU2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493785569", "bodyText": "See 69acec4", "author": "anditurdiu", "createdAt": "2020-09-23T18:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTc4MA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493491780", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean examTestRun;", "author": "jpbernius", "createdAt": "2020-09-23T11:46:49Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ComplaintService.java", "diffHunk": "@@ -64,10 +67,13 @@ public Complaint createComplaint(Complaint complaint, OptionalLong examId, Princ\n         StudentParticipation studentParticipation = (StudentParticipation) originalResult.getParticipation();\n         Participant participant = studentParticipation.getParticipant(); // Team or Student\n         Long courseId = studentParticipation.getExercise().getCourseViaExerciseGroupOrCourseMember().getId();\n+        boolean examTestRun;", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NTg2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493785862", "bodyText": "69acec4", "author": "anditurdiu", "createdAt": "2020-09-23T18:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MTc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMTM1MA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493501350", "bodyText": "Is this done here for performance reasons?\nPlease add a short comment to describe why this is one in a catch block instead of doing this beforehand.", "author": "jpbernius", "createdAt": "2020-09-23T11:56:50Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamSubmissionService.java", "diffHunk": "@@ -62,7 +67,16 @@ public boolean isAllowedToSubmit(Exercise exercise, User user) {\n         if (isExamSubmission(exercise)) {\n             // Get the student exam if it was not passed to the function\n             Exam exam = exercise.getExerciseGroup().getExam();\n-            StudentExam studentExam = studentExamService.findOneWithExercisesByUserIdAndExamId(user.getId(), exam.getId());\n+            StudentExam studentExam;\n+            try {\n+                studentExam = studentExamService.findOneWithExercisesByUserIdAndExamId(user.getId(), exam.getId());\n+            }\n+            catch (EntityNotFoundException entityNotFoundException) {\n+                if (!isExamTestRunSubmission(exercise, user, exam)) {", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTY3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493731672", "bodyText": "Yes, this is done for performance reasons, as this will be called every 20 seconds for every exercise during an exam. We do not need to make an extra database call here 99.9% of the time. I will add it as a comment", "author": "anditurdiu", "createdAt": "2020-09-23T16:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMTM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjEwOA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493786108", "bodyText": "See 8fb42cc", "author": "anditurdiu", "createdAt": "2020-09-23T18:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMTM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMjY5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493502692", "bodyText": "Should we reuse the existing method for this check here? (The one usually used in REST Resources?)", "author": "jpbernius", "createdAt": "2020-09-23T11:58:16Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamSubmissionService.java", "diffHunk": "@@ -80,6 +94,28 @@ public boolean isAllowedToSubmit(Exercise exercise, User user) {\n         return true;\n     }\n \n+    /**\n+     * Check if the submission is made as part of a test run exam\n+     * Only Instructors have access to test runs.\n+     * @param exercise the exercise\n+     * @param user the user\n+     * @param exam the exam\n+     * @return returns whether the submission is part of a test run exam.\n+     */\n+    private boolean isExamTestRunSubmission(Exercise exercise, User user, Exam exam) {\n+        // Check if user is an instructor or admin\n+        if (user.getGroups().contains(exam.getCourse().getInstructorGroupName()) || authorizationCheckService.isAdmin(user)) {", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNDAxMg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493734012", "bodyText": "The isTestRunParticipation is more general as it only checks for the general requirements of a test run participation. Here we also check that the submission we are trying to save is part of the current user's test run. Hence the \"isExamTestRunSubmission\". Maybe I should change the name?", "author": "anditurdiu", "createdAt": "2020-09-23T16:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwMjY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNDM2NA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493504364", "bodyText": "Could this be simplified using .anyMatch()?", "author": "jpbernius", "createdAt": "2020-09-23T12:00:10Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamSubmissionService.java", "diffHunk": "@@ -80,6 +94,28 @@ public boolean isAllowedToSubmit(Exercise exercise, User user) {\n         return true;\n     }\n \n+    /**\n+     * Check if the submission is made as part of a test run exam\n+     * Only Instructors have access to test runs.\n+     * @param exercise the exercise\n+     * @param user the user\n+     * @param exam the exam\n+     * @return returns whether the submission is part of a test run exam.\n+     */\n+    private boolean isExamTestRunSubmission(Exercise exercise, User user, Exam exam) {\n+        // Check if user is an instructor or admin\n+        if (user.getGroups().contains(exam.getCourse().getInstructorGroupName()) || authorizationCheckService.isAdmin(user)) {\n+            // fetch all testRuns for the instructor\n+            List<StudentExam> testRuns = studentExamService.findAllTestRunsWithExercisesForUser(exam.getId(), user.getId());\n+            // count the test runs which contain this exercise\n+            final long numberOfTestRunsContainingExercise = testRuns.stream().filter(testRun -> testRun.getExercises().contains(exercise)).count();\n+            // if a test run contains the exercise, then the instructor is allowed to submit\n+            return numberOfTestRunsContainingExercise > 0;", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNDg3Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493734873", "bodyText": "Indeed, see 8fb42cc", "author": "anditurdiu", "createdAt": "2020-09-23T16:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwNDM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUxMTM2NA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493511364", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n          \n          \n            \n                                .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());\n          \n          \n            \n                        submissions = participations.stream().map(StudentParticipation::findLatestSubmission)\n          \n          \n            \n                                .filter(Optional::isPresent).map(Optional::get).collect(toList());", "author": "jpbernius", "createdAt": "2020-09-23T12:08:07Z", "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionService.java", "diffHunk": "@@ -106,28 +115,47 @@ public FileUploadSubmission handleFileUploadSubmission(FileUploadSubmission file\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of file upload Submissions\n      */\n-    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<FileUploadSubmission> getAllFileUploadSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzMzQ5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493533499", "bodyText": "I think you have the same code for file upload also. Can you extract this into a protected method and pull it up SubmissionService?", "author": "jpbernius", "createdAt": "2020-09-23T12:32:32Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java", "diffHunk": "@@ -55,11 +57,18 @@ public ModelingSubmissionService(ModelingSubmissionRepository modelingSubmission\n      *\n      * @param exerciseId    - the id of the exercise we are interested into\n      * @param submittedOnly - if true, it returns only submission with submitted flag set to true\n+     * @param examMode - set flag to ignore exam test run submissions\n      * @return a list of modeling submissions for the given exercise id\n      */\n     @Transactional(readOnly = true)\n-    public List<ModelingSubmission> getModelingSubmissions(Long exerciseId, boolean submittedOnly) {\n-        List<StudentParticipation> participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+    public List<ModelingSubmission> getModelingSubmissions(Long exerciseId, boolean submittedOnly, boolean examMode) {\n+        List<StudentParticipation> participations;\n+        if (examMode) {\n+            participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseIdIgnoreTestRuns(exerciseId);\n+        }\n+        else {\n+            participations = studentParticipationRepository.findAllWithEagerSubmissionsAndEagerResultsAndEagerAssessorByExerciseId(exerciseId);\n+        }", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzNDc5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493534796", "bodyText": "Also, maybe there are similar cases in *SubmissionService classes with a if (examMode) else construct.", "author": "jpbernius", "createdAt": "2020-09-23T12:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzMzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2OTY3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493769676", "bodyText": "Good point, I refactored this and the get next random submission for all submission types.", "author": "anditurdiu", "createdAt": "2020-09-23T17:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzMzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjY4OA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493786688", "bodyText": "See ad13371", "author": "anditurdiu", "createdAt": "2020-09-23T18:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzMzQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzNzgyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493537829", "bodyText": "Switch map and filter as in FileUploadSubm..\nAlso, consider pulling this up.", "author": "jpbernius", "createdAt": "2020-09-23T12:37:14Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionService.java", "diffHunk": "@@ -163,10 +181,20 @@ public ModelingSubmission lockModelingSubmissionWithoutResult(ModelingExercise m\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of modeling submissions\n      */\n-    public List<ModelingSubmission> getAllModelingSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<ModelingSubmission> getAllModelingSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4Njc2OA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493786768", "bodyText": "See ad13371", "author": "anditurdiu", "createdAt": "2020-09-23T18:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUzNzgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4NDAyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493584024", "bodyText": "Why AssessmentType.AUTOMATIC? What about AssessmentType.TEST_RUN?", "author": "jpbernius", "createdAt": "2020-09-23T13:24:48Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -241,9 +241,45 @@ public StudentParticipation startExercise(Exercise exercise, Participant partici\n                 }\n             }\n         }\n-        participation = save(participation);\n+        return save(participation);\n+    }\n \n-        return participation;\n+    /**\n+     * In order to distinguish test run submissions from student exam submissions we add a manual result to the test run submissions.\n+     * We add draft assessments with the instructor as assessor to the empty submissions in order to hide them from tutors for correction.\n+     * This way the submission appears to, and can only by assessed by, the instructor who created the test run.\n+     * @param participations The test run participations\n+     */\n+    public void markSubmissionsOfTestRunParticipations(List<StudentParticipation> participations) {\n+        for (final var participation : participations) {\n+            final Exercise exercise = participation.getExercise();\n+            Submission submission;\n+            if (participation instanceof ProgrammingExerciseParticipation) {\n+                Set<Submission> programmingSubmissions = new HashSet<>(submissionRepository.findAllByParticipationId(participation.getId()));\n+                participation.setSubmissions(programmingSubmissions);\n+                initializeSubmission(participation, exercise, null);\n+                submission = participation.getSubmissions().iterator().next();\n+                // required so that the tutor dashboard statistics are calculated correctly\n+                submission.setSubmitted(true);\n+            }\n+            else {\n+                submission = participation.getSubmissions().iterator().next();\n+            }\n+            submission.setSubmissionDate(ZonedDateTime.now());\n+            // We add a result for test runs with the user set as an assessor in order to make sure it doesnt show up for assessment for the tutors\n+            if (submission.getResult() == null) {\n+                Result result = new Result();\n+                result.setSubmission(submission);\n+                submission.setResult(result);\n+                result.setParticipation(submission.getParticipation());\n+                submission.getResult().setAssessor(participation.getStudent().get());\n+                submission.getResult().setAssessmentType(AssessmentType.AUTOMATIC);", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzkyNg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493787926", "bodyText": "2705ce2", "author": "anditurdiu", "createdAt": "2020-09-23T18:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4NDAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNzYwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493717601", "bodyText": "Why is this ok as a fallback?", "author": "jpbernius", "createdAt": "2020-09-23T16:11:44Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -336,4 +340,118 @@ public Integer findMaxWorkingTimeByExamId(Long examId) {\n         log.debug(\"Request to find all distinct working times for Exam : {}\", examId);\n         return studentExamRepository.findAllDistinctWorkingTimesByExamId(examId);\n     }\n+\n+    /**\n+     * Generates a Student Exam marked as a testRun for the instructor to test the exam as a student would experience it.\n+     * Calls {@link StudentExamService#createTestRun and {@link ExamService#setUpTestRunExerciseParticipationsAndSubmissions}}\n+     * @param testRunConfiguration the configured studentExam\n+     * @return the created testRun studentExam\n+     */\n+    public StudentExam generateTestRun(StudentExam testRunConfiguration) {\n+        StudentExam testRun = createTestRun(testRunConfiguration);\n+        setUpTestRunExerciseParticipationsAndSubmissions(testRun.getId());\n+        return testRun;\n+    }\n+\n+    /**\n+     * Create TestRun student exam based on the configuration provided.\n+     *\n+     * @param testRunConfiguration Contains the exercises and working time for this test run\n+     * @return The created test run\n+     */\n+    private StudentExam createTestRun(StudentExam testRunConfiguration) {\n+        StudentExam testRun = new StudentExam();\n+        testRun.setExercises(testRunConfiguration.getExercises());\n+        testRun.setExam(testRunConfiguration.getExam());\n+        testRun.setWorkingTime(testRunConfiguration.getWorkingTime());\n+        testRun.setUser(userService.getUser());\n+        testRun.setTestRun(true);\n+        testRun.setSubmitted(false);\n+        testRun = studentExamRepository.save(testRun);\n+        return testRun;\n+    }\n+\n+    /**\n+     * Sets up the participations and submissions for all the exercises of the test run.\n+     * Calls {@link ExamService#setUpExerciseParticipationsAndSubmissions} to set up the exercise participations\n+     * and {@link ParticipationService#markSubmissionsOfTestRunParticipations} to mark them as test run participations\n+     *\n+     * @param testRunId the id of the TestRun\n+     */\n+    private void setUpTestRunExerciseParticipationsAndSubmissions(Long testRunId) {\n+        StudentExam testRun = studentExamRepository.findWithExercisesParticipationsSubmissionsById(testRunId, true)\n+                .orElseThrow(() -> new EntityNotFoundException(\"StudentExam with id: \\\"\" + testRunId + \"\\\" does not exist\"));\n+        List<StudentParticipation> generatedParticipations = Collections.synchronizedList(new ArrayList<>());\n+        examService.setUpExerciseParticipationsAndSubmissions(generatedParticipations, testRun);\n+        participationService.markSubmissionsOfTestRunParticipations(generatedParticipations);\n+    }\n+\n+    /**\n+     * Deletes a test run.\n+     * In case the participation is  not referenced by other test runs, the participation, submission, buildplans and repositories are deleted as well.\n+     * @param testRunId the id of the test run\n+     * @param instructorId the id of the instructor\n+     * @return the deleted test run\n+     */\n+    public StudentExam deleteTestRun(Long testRunId, Long instructorId) {\n+        StudentExam testRun = studentExamRepository.findWithExercisesParticipationsSubmissionsByIdForUser(testRunId, instructorId, true)\n+                .orElse(studentExamRepository.findWithExercisesParticipationsSubmissionsById(testRunId, true)", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NjQwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493766400", "bodyText": "the delete functionality was refactored", "author": "anditurdiu", "createdAt": "2020-09-23T17:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNzYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxOTQzMA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493719430", "bodyText": "First map, then filter for present.\nAlso, check with similar comments above.", "author": "jpbernius", "createdAt": "2020-09-23T16:14:19Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TextSubmissionService.java", "diffHunk": "@@ -235,10 +244,19 @@ public TextSubmission save(TextSubmission textSubmission) {\n      *\n      * @param exerciseId - the id of the exercise we are looking for\n      * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n      * @return a list of text Submissions\n      */\n-    public List<TextSubmission> getAllTextSubmissionsAssessedByTutorWithForExercise(Long exerciseId, User tutor) {\n-        List<Submission> submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+    public List<TextSubmission> getAllTextSubmissionsAssessedByTutorWithForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().filter(studentParticipation -> studentParticipation.findLatestSubmission().isPresent())\n+                    .map(StudentParticipation::findLatestSubmission).map(Optional::get).collect(toList());", "originalCommit": "6c443779982ad73b5f7c969264a370b24c206f78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzA0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493787049", "bodyText": "See ad13371 and 781a856", "author": "anditurdiu", "createdAt": "2020-09-23T18:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxOTQzMA=="}], "type": "inlineReview"}, {"oid": "328b0c2043953041e3da7a6203a8fdc4efe37575", "url": "https://github.com/ls1intum/Artemis/commit/328b0c2043953041e3da7a6203a8fdc4efe37575", "message": "fix codestyle", "committedDate": "2020-09-23T16:26:53Z", "type": "commit"}, {"oid": "69acec46f86e280720e19050e00246acb22a9d0f", "url": "https://github.com/ls1intum/Artemis/commit/69acec46f86e280720e19050e00246acb22a9d0f", "message": "move boolean inside if clause", "committedDate": "2020-09-23T17:04:57Z", "type": "commit"}, {"oid": "8fb42ccc0154d3247849e99e0b8e7130af02aac3", "url": "https://github.com/ls1intum/Artemis/commit/8fb42ccc0154d3247849e99e0b8e7130af02aac3", "message": "simplify check and add comment to describe rationale", "committedDate": "2020-09-23T17:05:48Z", "type": "commit"}, {"oid": "ad133719f0f0c316287bfa038a00989c9bd3b7fe", "url": "https://github.com/ls1intum/Artemis/commit/ad133719f0f0c316287bfa038a00989c9bd3b7fe", "message": "utilise inheritance to reduce code duplication", "committedDate": "2020-09-23T17:09:21Z", "type": "commit"}, {"oid": "781a856380be212ce234c33771cbcc231572e4c1", "url": "https://github.com/ls1intum/Artemis/commit/781a856380be212ce234c33771cbcc231572e4c1", "message": "use inheritance to reduce code duplication", "committedDate": "2020-09-23T17:33:22Z", "type": "commit"}, {"oid": "2705ce2342b4034e2d23269c85e2bb7112b95130", "url": "https://github.com/ls1intum/Artemis/commit/2705ce2342b4034e2d23269c85e2bb7112b95130", "message": "mark test run assessments using new assessment type TEST_RUN", "committedDate": "2020-09-23T17:33:57Z", "type": "commit"}, {"oid": "8111f8f1b9965ef189e6be645b839d9338416cf0", "url": "https://github.com/ls1intum/Artemis/commit/8111f8f1b9965ef189e6be645b839d9338416cf0", "message": "merge data changesets", "committedDate": "2020-09-23T17:44:40Z", "type": "commit"}, {"oid": "488d9189189d5a4ef48ea0717b95cd9fe6656810", "url": "https://github.com/ls1intum/Artemis/commit/488d9189189d5a4ef48ea0717b95cd9fe6656810", "message": "only need to switch the translation string conditionally.", "committedDate": "2020-09-23T17:58:30Z", "type": "commit"}, {"oid": "810bd782bb5aef35f70ec033568abd6a7a966393", "url": "https://github.com/ls1intum/Artemis/commit/810bd782bb5aef35f70ec033568abd6a7a966393", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-23T22:27:52Z", "type": "commit"}, {"oid": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "url": "https://github.com/ls1intum/Artemis/commit/d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-24T05:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055167", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExamForTestRunDashboard_forbidden' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-09-24T05:55:15Z", "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -735,6 +735,98 @@ public void testDeleteStudentWithParticipationsAndSubmissions() throws Exception\n         request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam.getId(), HttpStatus.OK);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteExamWithOneTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRunWithReferencedParticipations() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun1 = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun2 = new StudentExam();\n+        testRun2.setTestRun(true);\n+        testRun2.setExam(testRun1.getExam());\n+        testRun2.setUser(instructor);\n+        testRun2.setExercises(testRun1.getExercises());\n+        testRun2.setWorkingTime(testRun1.getWorkingTime());\n+        studentExamRepository.save(testRun2);\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun2.getId(), HttpStatus.OK);\n+        SecurityUtils.setAuthorizationObject();\n+        var testRunList = studentExamRepository.findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(exam1.getId());\n+        assertThat(testRunList.size()).isEqualTo(1);\n+        testRunList.get(0).getExercises().forEach(exercise -> assertThat(exercise.getStudentParticipations()).isNotEmpty());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testDeleteTestRunAsTutor() throws Exception {\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + 1, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetExamForTestRunDashboard_forbidden() throws Exception {", "originalCommit": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE3OA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055178", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExamForTestRunDashboard_ok' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-09-24T05:55:16Z", "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -735,6 +735,98 @@ public void testDeleteStudentWithParticipationsAndSubmissions() throws Exception\n         request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam.getId(), HttpStatus.OK);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteExamWithOneTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRunWithReferencedParticipations() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun1 = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun2 = new StudentExam();\n+        testRun2.setTestRun(true);\n+        testRun2.setExam(testRun1.getExam());\n+        testRun2.setUser(instructor);\n+        testRun2.setExercises(testRun1.getExercises());\n+        testRun2.setWorkingTime(testRun1.getWorkingTime());\n+        studentExamRepository.save(testRun2);\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun2.getId(), HttpStatus.OK);\n+        SecurityUtils.setAuthorizationObject();\n+        var testRunList = studentExamRepository.findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(exam1.getId());\n+        assertThat(testRunList.size()).isEqualTo(1);\n+        testRunList.get(0).getExercises().forEach(exercise -> assertThat(exercise.getStudentParticipations()).isNotEmpty());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testDeleteTestRunAsTutor() throws Exception {\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + 1, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetExamForTestRunDashboard_forbidden() throws Exception {\n+        request.get(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/for-exam-tutor-test-run-dashboard\", HttpStatus.FORBIDDEN, Exam.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamForTestRunDashboard_conflict() throws Exception {\n+        request.get(\"/api/courses/\" + course2.getId() + \"/exams/\" + exam1.getId() + \"/for-exam-tutor-test-run-dashboard\", HttpStatus.CONFLICT, Exam.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamForTestRunDashboard_ok() throws Exception {", "originalCommit": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055189", "bodyText": "Codacy found an issue: Avoid long parameter lists.", "author": "artemis-bot", "createdAt": "2020-09-24T05:55:17Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -53,11 +53,14 @@\n \n     private final ProgrammingExerciseParticipationService programmingExerciseParticipationService;\n \n-    public StudentExamService(StudentExamRepository studentExamRepository, ParticipationService participationService, QuizSubmissionRepository quizSubmissionRepository,\n-            TextSubmissionRepository textSubmissionRepository, ModelingSubmissionRepository modelingSubmissionRepository, SubmissionVersionService submissionVersionService,\n-            ProgrammingExerciseParticipationService programmingExerciseParticipationService, ProgrammingSubmissionRepository programmingSubmissionRepository) {\n+    public StudentExamService(StudentExamRepository studentExamRepository, ExamService examService, UserService userService, ParticipationService participationService,", "originalCommit": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTE5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055195", "bodyText": "Codacy found an issue: The JUnit 5 test method name 'testGetExamForTestRunDashboard_conflict' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-09-24T05:55:18Z", "path": "src/test/java/de/tum/in/www1/artemis/ExamIntegrationTest.java", "diffHunk": "@@ -735,6 +735,98 @@ public void testDeleteStudentWithParticipationsAndSubmissions() throws Exception\n         request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam.getId(), HttpStatus.OK);\n     }\n \n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteExamWithOneTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRun() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun.getId(), HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testDeleteTestRunWithReferencedParticipations() throws Exception {\n+        var instructor = database.getUserByLogin(\"instructor1\");\n+        var exam = database.addTextModelingProgrammingExercisesToExam(exam1, false);\n+        database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun1 = database.setupTestRunForExamWithExerciseGroupsForInstructor(exam1, instructor, exam.getExerciseGroups());\n+        var testRun2 = new StudentExam();\n+        testRun2.setTestRun(true);\n+        testRun2.setExam(testRun1.getExam());\n+        testRun2.setUser(instructor);\n+        testRun2.setExercises(testRun1.getExercises());\n+        testRun2.setWorkingTime(testRun1.getWorkingTime());\n+        studentExamRepository.save(testRun2);\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + testRun2.getId(), HttpStatus.OK);\n+        SecurityUtils.setAuthorizationObject();\n+        var testRunList = studentExamRepository.findAllTestRunsWithExercisesParticipationsSubmissionsResultsByExamId(exam1.getId());\n+        assertThat(testRunList.size()).isEqualTo(1);\n+        testRunList.get(0).getExercises().forEach(exercise -> assertThat(exercise.getStudentParticipations()).isNotEmpty());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testDeleteTestRunAsTutor() throws Exception {\n+        request.delete(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/delete-test-run/\" + 1, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetExamForTestRunDashboard_forbidden() throws Exception {\n+        request.get(\"/api/courses/\" + course1.getId() + \"/exams/\" + exam1.getId() + \"/for-exam-tutor-test-run-dashboard\", HttpStatus.FORBIDDEN, Exam.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testGetExamForTestRunDashboard_conflict() throws Exception {", "originalCommit": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA1NTIwOA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r494055208", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Collectors.toList' due to existing static import 'java.util.stream.Collectors.toList'", "author": "artemis-bot", "createdAt": "2020-09-24T05:55:19Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionService.java", "diffHunk": "@@ -126,6 +136,61 @@ public long countSubmissionLocks(long courseId) {\n         return submissionRepository.getLockedSubmissionsByUserIdAndCourseId(userService.getUserWithGroupsAndAuthorities().getId(), courseId);\n     }\n \n+    /**\n+     * Given an exercise id and a tutor id, it returns all the submissions where the tutor has a result associated.\n+     *\n+     * @param exerciseId - the id of the exercise we are looking for\n+     * @param tutor - the tutor we are interested in\n+     * @param examMode - flag should be set to ignore the test run submissions\n+     * @return a list of Submissions\n+     */\n+    protected List<Submission> getAllSubmissionsAssessedByTutorForExercise(Long exerciseId, User tutor, boolean examMode) {\n+        List<Submission> submissions;\n+        if (examMode) {\n+            var participations = this.studentParticipationRepository.findAllByParticipationExerciseIdAndResultAssessorIgnoreTestRuns(exerciseId, tutor);\n+            submissions = participations.stream().map(StudentParticipation::findLatestSubmission).filter(Optional::isPresent).map(Optional::get).collect(toList());\n+        }\n+        else {\n+            submissions = this.submissionRepository.findAllByParticipationExerciseIdAndResultAssessor(exerciseId, tutor);\n+        }\n+\n+        submissions.forEach(submission -> submission.getResult().setSubmission(null));\n+        return submissions;\n+    }\n+\n+    /**\n+     * Given an exercise id, find a random submission for that exercise which still doesn't have any manual result.\n+     * No manual result means that no user has started an assessment for the corresponding submission yet.\n+     * For exam exercises we should also remove the test run participations as these should not be graded by the tutors.\n+     *\n+     * @param fileUploadExercise the exercise for which we want to retrieve a submission without manual result\n+     * @param examMode flag to determine if test runs should be removed. This should be set to true for exam exercises\n+     * @return a submission without any manual result or an empty Optional if no submission without manual result could be found\n+     */\n+    @Transactional(readOnly = true)\n+    public Optional<Submission> getRandomSubmissionEligibleForNewAssessment(Exercise fileUploadExercise, boolean examMode) {\n+        Random random = new Random();\n+        List<StudentParticipation> participations;\n+        if (examMode) {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResultsAndNoTestRun(fileUploadExercise.getId());\n+        }\n+        else {\n+            participations = participationService.findByExerciseIdWithLatestSubmissionWithoutManualResults(fileUploadExercise.getId());\n+        }\n+\n+        List<Submission> submissionsWithoutResult = participations.stream().map(StudentParticipation::findLatestSubmission).filter(Optional::isPresent).map(Optional::get)\n+                .collect(Collectors.toList());", "originalCommit": "d83ac21cce0a3d263e1ecb4b4c851da11c0e0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dba95f7a66519db4719e47cf84728cc711f6032a", "url": "https://github.com/ls1intum/Artemis/commit/dba95f7a66519db4719e47cf84728cc711f6032a", "message": "Add test run management page and button", "committedDate": "2020-09-04T13:24:36Z", "type": "commit"}, {"oid": "71fca9f231da8fe91031910b4d37de46073fd6f1", "url": "https://github.com/ls1intum/Artemis/commit/71fca9f231da8fe91031910b4d37de46073fd6f1", "message": "implement test run management view", "committedDate": "2020-09-04T19:54:00Z", "type": "commit"}, {"oid": "7df5982698b8ac296998e0f71b399c3dbb240cac", "url": "https://github.com/ls1intum/Artemis/commit/7df5982698b8ac296998e0f71b399c3dbb240cac", "message": "refactor translation strings", "committedDate": "2020-09-04T19:54:32Z", "type": "commit"}, {"oid": "df8b5e0acb0ef990048183706be6c6449a63880d", "url": "https://github.com/ls1intum/Artemis/commit/df8b5e0acb0ef990048183706be6c6449a63880d", "message": "identify if testrun in the tutor dashboard", "committedDate": "2020-09-05T07:11:39Z", "type": "commit"}, {"oid": "5faa501e60c73a8d3abb82e43e7a9aacc45d09b4", "url": "https://github.com/ls1intum/Artemis/commit/5faa501e60c73a8d3abb82e43e7a9aacc45d09b4", "message": "create singular assess test runs button", "committedDate": "2020-09-05T07:50:40Z", "type": "commit"}, {"oid": "26fef40a2a77fb02038323726ef4705dc94744b5", "url": "https://github.com/ls1intum/Artemis/commit/26fef40a2a77fb02038323726ef4705dc94744b5", "message": "disable assess test run button if view is loading, set isExamStarted flag", "committedDate": "2020-09-05T07:59:12Z", "type": "commit"}, {"oid": "a2b087de003fa956c65acf256c834566aeb9ca6f", "url": "https://github.com/ls1intum/Artemis/commit/a2b087de003fa956c65acf256c834566aeb9ca6f", "message": "Add manage working time button\nremove load course, just check permissions\nAdd test run modal", "committedDate": "2020-09-06T11:07:34Z", "type": "commit"}, {"oid": "86bf8721f7fb5471e0f5f33df91ac7e3662748d3", "url": "https://github.com/ls1intum/Artemis/commit/86bf8721f7fb5471e0f5f33df91ac7e3662748d3", "message": "create the configure test run modal", "committedDate": "2020-09-06T16:49:52Z", "type": "commit"}, {"oid": "9c4c09c6c73014d0dc118208d473d3cd5bd68e7b", "url": "https://github.com/ls1intum/Artemis/commit/9c4c09c6c73014d0dc118208d473d3cd5bd68e7b", "message": "add working time configuration to modal", "committedDate": "2020-09-06T18:07:53Z", "type": "commit"}, {"oid": "e06594d58aad5168d6e221eb5f207d37f44bcfdd", "url": "https://github.com/ls1intum/Artemis/commit/e06594d58aad5168d6e221eb5f207d37f44bcfdd", "message": "Add client calls and fix layout", "committedDate": "2020-09-08T17:52:05Z", "type": "commit"}, {"oid": "033903efbeb300d6dd8436a74795890623324975", "url": "https://github.com/ls1intum/Artemis/commit/033903efbeb300d6dd8436a74795890623324975", "message": "Add testRun column to studentExam", "committedDate": "2020-09-08T17:52:55Z", "type": "commit"}, {"oid": "f7ebd26492998623a064ec7a326c48fb616dc6ff", "url": "https://github.com/ls1intum/Artemis/commit/f7ebd26492998623a064ec7a326c48fb616dc6ff", "message": "Change the studentExam repository calls to ignore the test runs", "committedDate": "2020-09-08T17:58:58Z", "type": "commit"}, {"oid": "70ee3710175b9018514d6cf750c35ab9d6af2ad1", "url": "https://github.com/ls1intum/Artemis/commit/70ee3710175b9018514d6cf750c35ab9d6af2ad1", "message": "Add the server routes for creating deleting test runs", "committedDate": "2020-09-08T18:10:19Z", "type": "commit"}, {"oid": "9eacc724360f78a97ffb2e18af683fe6e56e00eb", "url": "https://github.com/ls1intum/Artemis/commit/9eacc724360f78a97ffb2e18af683fe6e56e00eb", "message": "Fix CRUD operations for student exams and test runs, make sure they dont interfere with eachother", "committedDate": "2020-09-09T14:59:55Z", "type": "commit"}, {"oid": "bd34bef05a935330335f38e3babd5135a10c510d", "url": "https://github.com/ls1intum/Artemis/commit/bd34bef05a935330335f38e3babd5135a10c510d", "message": "adapt test run management view to handle test runs from multiple instructors", "committedDate": "2020-09-09T15:59:40Z", "type": "commit"}, {"oid": "82515015b6128637453f62488c9698500b68ff49", "url": "https://github.com/ls1intum/Artemis/commit/82515015b6128637453f62488c9698500b68ff49", "message": "add the test run conduction", "committedDate": "2020-09-09T20:21:31Z", "type": "commit"}, {"oid": "7fba2817b76373a6fb1e91ff097ef0fd860462b8", "url": "https://github.com/ls1intum/Artemis/commit/7fba2817b76373a6fb1e91ff097ef0fd860462b8", "message": "fix test run conduction and exercise submission", "committedDate": "2020-09-10T14:02:37Z", "type": "commit"}, {"oid": "2432980f725c7a23e1dbda83c95e6991d456324a", "url": "https://github.com/ls1intum/Artemis/commit/2432980f725c7a23e1dbda83c95e6991d456324a", "message": "Tutor dashboard ignores test run submissions", "committedDate": "2020-09-11T11:44:26Z", "type": "commit"}, {"oid": "f95031023aa90a38cdeeb445f57388b599c8c5d8", "url": "https://github.com/ls1intum/Artemis/commit/f95031023aa90a38cdeeb445f57388b599c8c5d8", "message": "fix assessment detection", "committedDate": "2020-09-11T12:00:41Z", "type": "commit"}, {"oid": "32b183cda31b433480896ea0b99a320651f9bb28", "url": "https://github.com/ls1intum/Artemis/commit/32b183cda31b433480896ea0b99a320651f9bb28", "message": "refactor test run submissions, add result when first creating student exam", "committedDate": "2020-09-13T20:45:36Z", "type": "commit"}, {"oid": "9d18e5d2ad99804ac9e495ce2e2a5559e333276f", "url": "https://github.com/ls1intum/Artemis/commit/9d18e5d2ad99804ac9e495ce2e2a5559e333276f", "message": "ignore instructor participations (test runs) in exam scores", "committedDate": "2020-09-13T20:46:23Z", "type": "commit"}, {"oid": "4a2da5996f67fa5a2c1e4e6bb3d937f9b1a6b3fa", "url": "https://github.com/ls1intum/Artemis/commit/4a2da5996f67fa5a2c1e4e6bb3d937f9b1a6b3fa", "message": "allow complaints for test runs, fix assessment counter to ignore test runs.", "committedDate": "2020-09-15T05:25:18Z", "type": "commit"}, {"oid": "02eb6c24e232e9118b35113ee6cebecd23e1ab31", "url": "https://github.com/ls1intum/Artemis/commit/02eb6c24e232e9118b35113ee6cebecd23e1ab31", "message": "Fix integration tests:\nAdd testRun= false to student exam generation\nDo not add studentExams for isntructors as their participations are ignored from the scores calculation. Their submissions are exclusive for test runs", "committedDate": "2020-09-15T05:26:50Z", "type": "commit"}, {"oid": "80a2b02dfcc0714103771c3e98635c63d1c2bf17", "url": "https://github.com/ls1intum/Artemis/commit/80a2b02dfcc0714103771c3e98635c63d1c2bf17", "message": "fix client code style", "committedDate": "2020-09-15T05:33:21Z", "type": "commit"}, {"oid": "f87f1fc641f41e8dd4e376eb852b0fc505bce0b8", "url": "https://github.com/ls1intum/Artemis/commit/f87f1fc641f41e8dd4e376eb852b0fc505bce0b8", "message": "fix codacy issues", "committedDate": "2020-09-15T06:08:44Z", "type": "commit"}, {"oid": "edd6f417eaeb056f19ea311215009e54283474cb", "url": "https://github.com/ls1intum/Artemis/commit/edd6f417eaeb056f19ea311215009e54283474cb", "message": "fix back buttons to return to test run dashboards. Allow complaints for test runs", "committedDate": "2020-09-15T12:17:39Z", "type": "commit"}, {"oid": "e03545494a9d221b7280503bfaa566382b991148", "url": "https://github.com/ls1intum/Artemis/commit/e03545494a9d221b7280503bfaa566382b991148", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-15T13:50:09Z", "type": "commit"}, {"oid": "14f98193ff148b8ec8b7da6721548a9100959a08", "url": "https://github.com/ls1intum/Artemis/commit/14f98193ff148b8ec8b7da6721548a9100959a08", "message": "add test run ribbon to clearly indicate test run", "committedDate": "2020-09-15T14:31:19Z", "type": "commit"}, {"oid": "963e2f5867792491fe87ac7d009de1ab753afc8a", "url": "https://github.com/ls1intum/Artemis/commit/963e2f5867792491fe87ac7d009de1ab753afc8a", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-15T14:32:29Z", "type": "commit"}, {"oid": "6acec654ae950d0ebe7fc9e033b057c5fbc8a79f", "url": "https://github.com/ls1intum/Artemis/commit/6acec654ae950d0ebe7fc9e033b057c5fbc8a79f", "message": "improve display of test run exercise display", "committedDate": "2020-09-16T08:58:28Z", "type": "commit"}, {"oid": "95d6571b69e6c14ae523e2dc6db6e3feea20efaa", "url": "https://github.com/ls1intum/Artemis/commit/95d6571b69e6c14ae523e2dc6db6e3feea20efaa", "message": "reduce nPath complexity", "committedDate": "2020-09-16T09:38:06Z", "type": "commit"}, {"oid": "22540becc0804c1cc9b90ba7464a41c6106c0079", "url": "https://github.com/ls1intum/Artemis/commit/22540becc0804c1cc9b90ba7464a41c6106c0079", "message": "fix null pointers", "committedDate": "2020-09-16T11:00:02Z", "type": "commit"}, {"oid": "f1ed12e6477fba48b46dcbc4dba42e43dbe815ad", "url": "https://github.com/ls1intum/Artemis/commit/f1ed12e6477fba48b46dcbc4dba42e43dbe815ad", "message": "save participation", "committedDate": "2020-09-16T11:42:09Z", "type": "commit"}, {"oid": "4cec10190a1f06f28cb6b81284ab16e123955d8b", "url": "https://github.com/ls1intum/Artemis/commit/4cec10190a1f06f28cb6b81284ab16e123955d8b", "message": "fix linting", "committedDate": "2020-09-16T12:25:06Z", "type": "commit"}, {"oid": "f76213a8624d5e53f71f3dbcb79d2bf98fa63819", "url": "https://github.com/ls1intum/Artemis/commit/f76213a8624d5e53f71f3dbcb79d2bf98fa63819", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-16T13:04:54Z", "type": "commit"}, {"oid": "6002d153db238d912bb5b8801a52b769e4091f4e", "url": "https://github.com/ls1intum/Artemis/commit/6002d153db238d912bb5b8801a52b769e4091f4e", "message": "refactor calculation of tutor dashboard stats", "committedDate": "2020-09-16T15:33:35Z", "type": "commit"}, {"oid": "137ec3f030e5a9f9473f3675ab0c8397e81fb733", "url": "https://github.com/ls1intum/Artemis/commit/137ec3f030e5a9f9473f3675ab0c8397e81fb733", "message": "Refactor test run statistic deduction and resuse for exercise dashboard\nfix circular dependency\ndo not allow tutors to create a test run", "committedDate": "2020-09-17T06:59:06Z", "type": "commit"}, {"oid": "af558f26ad37bad57ba7a7ceabbaf9b8015b5090", "url": "https://github.com/ls1intum/Artemis/commit/af558f26ad37bad57ba7a7ceabbaf9b8015b5090", "message": "fix dashboard view for test run", "committedDate": "2020-09-17T08:49:12Z", "type": "commit"}, {"oid": "6921629bf5d052cdde2d7f8da769f176abcc38b4", "url": "https://github.com/ls1intum/Artemis/commit/6921629bf5d052cdde2d7f8da769f176abcc38b4", "message": "only remove test run submissions from statistics if it is exam mode", "committedDate": "2020-09-17T08:51:08Z", "type": "commit"}, {"oid": "2039a39590af35852bd9b06a3c8259f6bc3b40a6", "url": "https://github.com/ls1intum/Artemis/commit/2039a39590af35852bd9b06a3c8259f6bc3b40a6", "message": "filter out test run submissions from the normal tutor/instructor dashboard", "committedDate": "2020-09-17T09:08:35Z", "type": "commit"}, {"oid": "2e2b46078a03286307cef5efcfb8bf52a50b6f15", "url": "https://github.com/ls1intum/Artemis/commit/2e2b46078a03286307cef5efcfb8bf52a50b6f15", "message": "only show own test run submissions for test run dashboard", "committedDate": "2020-09-17T09:53:02Z", "type": "commit"}, {"oid": "30091dfc79e4cfb3dbd301515a6f0301805812a0", "url": "https://github.com/ls1intum/Artemis/commit/30091dfc79e4cfb3dbd301515a6f0301805812a0", "message": "add author of testruns to test run management\nhide quiz exercises from test run dashboard", "committedDate": "2020-09-17T10:09:07Z", "type": "commit"}, {"oid": "be8a23b9044e5e2189f5307db43202a031769cac", "url": "https://github.com/ls1intum/Artemis/commit/be8a23b9044e5e2189f5307db43202a031769cac", "message": "codacy improvements", "committedDate": "2020-09-17T12:40:25Z", "type": "commit"}, {"oid": "bc9a5bbfb6cf7581d6b35b7737e546ab743d9489", "url": "https://github.com/ls1intum/Artemis/commit/bc9a5bbfb6cf7581d6b35b7737e546ab743d9489", "message": "fix comment", "committedDate": "2020-09-17T12:52:20Z", "type": "commit"}, {"oid": "dfdfeded2abf4717a50635a7814b60766471f845", "url": "https://github.com/ls1intum/Artemis/commit/dfdfeded2abf4717a50635a7814b60766471f845", "message": "fix statistic calculation for programming exercises\nrefactor code", "committedDate": "2020-09-17T22:59:57Z", "type": "commit"}, {"oid": "e3e566aafe7e22ab1ef752e04299436e5401dba9", "url": "https://github.com/ls1intum/Artemis/commit/e3e566aafe7e22ab1ef752e04299436e5401dba9", "message": "refactor testRun participation detection, move to utility method in class StudentParticipation", "committedDate": "2020-09-18T12:33:44Z", "type": "commit"}, {"oid": "b067cc9f7d2958d249b60f14d73f255bb9f6477e", "url": "https://github.com/ls1intum/Artemis/commit/b067cc9f7d2958d249b60f14d73f255bb9f6477e", "message": "code cleanup, fix programming code editor assessment view for test runs", "committedDate": "2020-09-18T17:40:09Z", "type": "commit"}, {"oid": "fce98e87cf7498b7865c84569a01ceafe723c74d", "url": "https://github.com/ls1intum/Artemis/commit/fce98e87cf7498b7865c84569a01ceafe723c74d", "message": "block tutors from fetching test run assessments with \"next assessment\"", "committedDate": "2020-09-18T17:42:55Z", "type": "commit"}, {"oid": "c7bf8c75e90a4c5b7b4ffe632df0338588b0b2ec", "url": "https://github.com/ls1intum/Artemis/commit/c7bf8c75e90a4c5b7b4ffe632df0338588b0b2ec", "message": "do not delete test runs when generating student exams", "committedDate": "2020-09-18T17:55:35Z", "type": "commit"}, {"oid": "8ca0e4a3bd00a851f5c26519fffe0fd9ebf39a8c", "url": "https://github.com/ls1intum/Artemis/commit/8ca0e4a3bd00a851f5c26519fffe0fd9ebf39a8c", "message": "fix server tests", "committedDate": "2020-09-18T18:57:33Z", "type": "commit"}, {"oid": "d8733400efcb0bf584baa484e2daa7cef0338a48", "url": "https://github.com/ls1intum/Artemis/commit/d8733400efcb0bf584baa484e2daa7cef0338a48", "message": "extend abstractAuditingEntity for student exams to help with administrative tasks", "committedDate": "2020-09-21T14:25:43Z", "type": "commit"}, {"oid": "758383960d0f05968e561d31988a225327e81582", "url": "https://github.com/ls1intum/Artemis/commit/758383960d0f05968e561d31988a225327e81582", "message": "Do not display a checkmark when the programming exercise was initially loaded", "committedDate": "2020-09-21T18:56:04Z", "type": "commit"}, {"oid": "0d683ec8a64c2b96c5fad86df6e215580729a9dd", "url": "https://github.com/ls1intum/Artemis/commit/0d683ec8a64c2b96c5fad86df6e215580729a9dd", "message": "fix mapping", "committedDate": "2020-09-21T18:59:22Z", "type": "commit"}, {"oid": "4abf5e33fcd83bd31548d96558e88fbdde1fabb5", "url": "https://github.com/ls1intum/Artemis/commit/4abf5e33fcd83bd31548d96558e88fbdde1fabb5", "message": "Merge remote-tracking branch 'origin/enhancement/fix-programming-exam-nav-bar-status' into feature/exam/test-run-server", "committedDate": "2020-09-21T19:06:55Z", "type": "commit"}, {"oid": "46bc766c49c9c9a2258af81b98fb0dca4374187d", "url": "https://github.com/ls1intum/Artemis/commit/46bc766c49c9c9a2258af81b98fb0dca4374187d", "message": "fix server test", "committedDate": "2020-09-21T19:11:55Z", "type": "commit"}, {"oid": "c032064c027657a5d8a09dee1a0e499f65881b74", "url": "https://github.com/ls1intum/Artemis/commit/c032064c027657a5d8a09dee1a0e499f65881b74", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-21T19:13:17Z", "type": "commit"}, {"oid": "1033b8745a980f63a25387e5deb10c3b564132f5", "url": "https://github.com/ls1intum/Artemis/commit/1033b8745a980f63a25387e5deb10c3b564132f5", "message": "update to java version 15", "committedDate": "2020-09-21T19:15:58Z", "type": "commit"}, {"oid": "efe848b46757fb317299b960745eea399b89f066", "url": "https://github.com/ls1intum/Artemis/commit/efe848b46757fb317299b960745eea399b89f066", "message": "Bump github build action to Java 15", "committedDate": "2020-09-21T19:22:34Z", "type": "commit"}, {"oid": "43a0250803dcdfc1e5953f00688ae396c643e2ff", "url": "https://github.com/ls1intum/Artemis/commit/43a0250803dcdfc1e5953f00688ae396c643e2ff", "message": "Bump Java for codeQL", "committedDate": "2020-09-21T19:27:43Z", "type": "commit"}, {"oid": "7e0c9cc35cd0b00faacc2fa129e6becc1809d35f", "url": "https://github.com/ls1intum/Artemis/commit/7e0c9cc35cd0b00faacc2fa129e6becc1809d35f", "message": "Revert \"Bump Java for codeQL\"\n\nThis reverts commit 43a0250803dcdfc1e5953f00688ae396c643e2ff.", "committedDate": "2020-09-21T19:40:42Z", "type": "commit"}, {"oid": "9cde9ab4f4bb98e0bbfc35c1b176136c9eb5a264", "url": "https://github.com/ls1intum/Artemis/commit/9cde9ab4f4bb98e0bbfc35c1b176136c9eb5a264", "message": "Revert \"Bump github build action to Java 15\"\n\nThis reverts commit efe848b46757fb317299b960745eea399b89f066.", "committedDate": "2020-09-21T19:40:50Z", "type": "commit"}, {"oid": "6d58a2eb61f27974f670113c51703c46e617f7de", "url": "https://github.com/ls1intum/Artemis/commit/6d58a2eb61f27974f670113c51703c46e617f7de", "message": "Revert \"update to java version 15\"\n\nThis reverts commit 1033b8745a980f63a25387e5deb10c3b564132f5.", "committedDate": "2020-09-21T19:40:54Z", "type": "commit"}, {"oid": "9b24958643ad12e0f9287514ae9e48ab3d9c2f37", "url": "https://github.com/ls1intum/Artemis/commit/9b24958643ad12e0f9287514ae9e48ab3d9c2f37", "message": "remove enable preview", "committedDate": "2020-09-21T19:42:24Z", "type": "commit"}, {"oid": "9466ef6fe58a6220084df68b3002c09b532ff617", "url": "https://github.com/ls1intum/Artemis/commit/9466ef6fe58a6220084df68b3002c09b532ff617", "message": "remove preview features", "committedDate": "2020-09-21T19:49:04Z", "type": "commit"}, {"oid": "a0b2dbba79a09eeb614ed4001615803926022824", "url": "https://github.com/ls1intum/Artemis/commit/a0b2dbba79a09eeb614ed4001615803926022824", "message": "update liquibase master.xml", "committedDate": "2020-09-21T20:27:06Z", "type": "commit"}, {"oid": "9adfded4dc26b80660b8edea7993d1997f221327", "url": "https://github.com/ls1intum/Artemis/commit/9adfded4dc26b80660b8edea7993d1997f221327", "message": "enable preview for server tests", "committedDate": "2020-09-21T20:29:33Z", "type": "commit"}, {"oid": "29b873501fb2080cac34f631f08f7b04cd46f2b9", "url": "https://github.com/ls1intum/Artemis/commit/29b873501fb2080cac34f631f08f7b04cd46f2b9", "message": "Fix tooltip for programming exercise", "committedDate": "2020-09-21T21:06:07Z", "type": "commit"}, {"oid": "06ff26d14ba91bc3a7d5e18b4952fa2524a506a1", "url": "https://github.com/ls1intum/Artemis/commit/06ff26d14ba91bc3a7d5e18b4952fa2524a506a1", "message": "Merge branch 'feature/exam/test-run-server' of https://github.com/ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-21T21:06:58Z", "type": "commit"}, {"oid": "56173dc1dcaa2a707c34e234ae756b7a88e4c586", "url": "https://github.com/ls1intum/Artemis/commit/56173dc1dcaa2a707c34e234ae756b7a88e4c586", "message": "ignore test run submissions directly on the database for counting", "committedDate": "2020-09-22T13:12:01Z", "type": "commit"}, {"oid": "e4a0d62b19e52560231f9f7bf7606d85067b9cf8", "url": "https://github.com/ls1intum/Artemis/commit/e4a0d62b19e52560231f9f7bf7606d85067b9cf8", "message": "make codacy proud", "committedDate": "2020-09-22T13:12:30Z", "type": "commit"}, {"oid": "ebb707bb62b1aca587ec3956b96dc9407760d9be", "url": "https://github.com/ls1intum/Artemis/commit/ebb707bb62b1aca587ec3956b96dc9407760d9be", "message": "add server integration tests", "committedDate": "2020-09-22T13:13:10Z", "type": "commit"}, {"oid": "6f5c9bcd7b8d2e7214eda0e1efe33310a41ad2e1", "url": "https://github.com/ls1intum/Artemis/commit/6f5c9bcd7b8d2e7214eda0e1efe33310a41ad2e1", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-22T13:18:27Z", "type": "commit"}, {"oid": "1f95e74133663c4242aa8d7075ecbdc951b9e2f9", "url": "https://github.com/ls1intum/Artemis/commit/1f95e74133663c4242aa8d7075ecbdc951b9e2f9", "message": "fix query for late submissions", "committedDate": "2020-09-22T13:37:52Z", "type": "commit"}, {"oid": "09bbf8cbd83be9f68642c4ba5c34287c2bae9cd4", "url": "https://github.com/ls1intum/Artemis/commit/09bbf8cbd83be9f68642c4ba5c34287c2bae9cd4", "message": "Sync nav bar when correctly when pushing from IDE.", "committedDate": "2020-09-22T13:41:59Z", "type": "commit"}, {"oid": "11170e35948e87777a6f53e28a186c8240c6acec", "url": "https://github.com/ls1intum/Artemis/commit/11170e35948e87777a6f53e28a186c8240c6acec", "message": "Merge branch 'feature/exam/test-run-server' of github.com:ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-22T13:46:37Z", "type": "commit"}, {"oid": "43a538f5f72ccc75053a9fcf3c7d8c743f76ea78", "url": "https://github.com/ls1intum/Artemis/commit/43a538f5f72ccc75053a9fcf3c7d8c743f76ea78", "message": "fix test", "committedDate": "2020-09-22T13:46:54Z", "type": "commit"}, {"oid": "8974195cc6c51be7c259ed64610d477cded5bbbf", "url": "https://github.com/ls1intum/Artemis/commit/8974195cc6c51be7c259ed64610d477cded5bbbf", "message": "add tests for the isTestRun flag: allow assessors to respond to own complaint and hide assess next button", "committedDate": "2020-09-22T14:06:32Z", "type": "commit"}, {"oid": "156b4b24661d15ae1b1d88a1199ab469caf2c1bd", "url": "https://github.com/ls1intum/Artemis/commit/156b4b24661d15ae1b1d88a1199ab469caf2c1bd", "message": "fix documentation", "committedDate": "2020-09-22T14:06:50Z", "type": "commit"}, {"oid": "d78728748fd06710243db1418a75377bdfcf3f6d", "url": "https://github.com/ls1intum/Artemis/commit/d78728748fd06710243db1418a75377bdfcf3f6d", "message": "Test for test run management", "committedDate": "2020-09-22T14:33:47Z", "type": "commit"}, {"oid": "7a98504b33d8aa3833bf8bcbb85af862bba1c13e", "url": "https://github.com/ls1intum/Artemis/commit/7a98504b33d8aa3833bf8bcbb85af862bba1c13e", "message": "Merge branch 'feature/exam/test-run-server' of https://github.com/ls1intum/Artemis into feature/exam/test-run-server", "committedDate": "2020-09-22T14:34:04Z", "type": "commit"}, {"oid": "b8d3bd2a03cc04d1b137026dbb734765b2924c8b", "url": "https://github.com/ls1intum/Artemis/commit/b8d3bd2a03cc04d1b137026dbb734765b2924c8b", "message": "add client tests", "committedDate": "2020-09-22T15:56:59Z", "type": "commit"}, {"oid": "c78036d7b191adf1457d597dbec7a2cb86273058", "url": "https://github.com/ls1intum/Artemis/commit/c78036d7b191adf1457d597dbec7a2cb86273058", "message": "fix bug where test run submissions were shown on tutor dashboard", "committedDate": "2020-09-22T16:44:42Z", "type": "commit"}, {"oid": "86aacf88a6da319ea56f074c40bff390ce0ca305", "url": "https://github.com/ls1intum/Artemis/commit/86aacf88a6da319ea56f074c40bff390ce0ca305", "message": "Revert \"fix bug where test run submissions were shown on tutor dashboard\"\n\nThis reverts commit c78036d7b191adf1457d597dbec7a2cb86273058.", "committedDate": "2020-09-22T17:03:55Z", "type": "commit"}, {"oid": "3af2572798b61fca8c663a6a1ef582b1a2b0ae66", "url": "https://github.com/ls1intum/Artemis/commit/3af2572798b61fca8c663a6a1ef582b1a2b0ae66", "message": "add integration test for test run dashboard", "committedDate": "2020-09-22T17:04:14Z", "type": "commit"}, {"oid": "f673479cbe31479fd09b453fe15d1958306acdac", "url": "https://github.com/ls1intum/Artemis/commit/f673479cbe31479fd09b453fe15d1958306acdac", "message": "Revert \"Revert \"fix bug where test run submissions were shown on tutor dashboard\"\"\n\nThis reverts commit 86aacf88a6da319ea56f074c40bff390ce0ca305.", "committedDate": "2020-09-22T17:36:18Z", "type": "commit"}, {"oid": "25b91b555a0b8ad3f5298ffdad0cd2316829dd21", "url": "https://github.com/ls1intum/Artemis/commit/25b91b555a0b8ad3f5298ffdad0cd2316829dd21", "message": "improve query", "committedDate": "2020-09-22T17:36:40Z", "type": "commit"}, {"oid": "72dfca8d8b136b4e359eb08081e13430d99042fb", "url": "https://github.com/ls1intum/Artemis/commit/72dfca8d8b136b4e359eb08081e13430d99042fb", "message": "fix codestyle and uncought promise exception when canceling modal", "committedDate": "2020-09-22T18:03:39Z", "type": "commit"}, {"oid": "79476aaceab6ba2eadffd6d0f11527d77bda9814", "url": "https://github.com/ls1intum/Artemis/commit/79476aaceab6ba2eadffd6d0f11527d77bda9814", "message": "make codacy happy", "committedDate": "2020-09-22T19:46:26Z", "type": "commit"}, {"oid": "2d189067470549910bf5be3ce6cdfd0178172a30", "url": "https://github.com/ls1intum/Artemis/commit/2d189067470549910bf5be3ce6cdfd0178172a30", "message": "remove test run submissions participations and scores from the specific exercise view if in exam mode", "committedDate": "2020-09-22T19:55:30Z", "type": "commit"}, {"oid": "19279a16c1c6ec5ed6f8a2deb118f0e56b2ce17d", "url": "https://github.com/ls1intum/Artemis/commit/19279a16c1c6ec5ed6f8a2deb118f0e56b2ce17d", "message": "fix java tests", "committedDate": "2020-09-22T20:10:38Z", "type": "commit"}, {"oid": "c5674b3233824694d42d21dcc5488e997b2b5b63", "url": "https://github.com/ls1intum/Artemis/commit/c5674b3233824694d42d21dcc5488e997b2b5b63", "message": "increase test coverage of studentExamService", "committedDate": "2020-09-22T20:54:26Z", "type": "commit"}, {"oid": "a58bdcd215649c172a124baa753bbab1cbb58194", "url": "https://github.com/ls1intum/Artemis/commit/a58bdcd215649c172a124baa753bbab1cbb58194", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-22T21:15:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5OTI3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r492999272", "bodyText": "Don't you need to check for exam mode here as well?", "author": "kloessst", "createdAt": "2020-09-22T20:01:34Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ComplaintResponseService.java", "diffHunk": "@@ -114,6 +115,11 @@ private boolean isUserAuthorizedToRespondToComplaint(StudentParticipation partic\n             return assessor.equals(reviewer);\n         }\n         else if (complaint.getComplaintType() == null || complaint.getComplaintType().equals(ComplaintType.COMPLAINT)) {\n+            // if test run complaint\n+            if (complaint.getStudent() != null && complaint.getStudent().getLogin().equals(assessor.getLogin())", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1Mjk3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493052971", "bodyText": "In theory yes, but in practise, this method is called when a user wants to respond to a complaint. For non test run exercises, the tutor/instructor does not see the complaints in his dashboard and does not have the functionality on the client to respond to the complaint.\nTherefore the additional check if \"exam mode\" is redundant, I decided to not use it as we would have to fetch the exercises along with the participation from the database. In my opinion it is not worth making the call more expensive. Would you agree?", "author": "anditurdiu", "createdAt": "2020-09-22T21:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5OTI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjEyNg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493002126", "bodyText": "Would be easier to already fetch only student exams which do not belong to a test run from the DB.", "author": "kloessst", "createdAt": "2020-09-22T20:07:00Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ExamService.java", "diffHunk": "@@ -607,6 +605,18 @@ public void setNumberOfRegisteredUsersForExams(List<Exam> exams) {\n         exams.forEach(exam -> exam.setNumberOfRegisteredUsers(registeredUsersCountMap.get(exam.getId()).longValue()));\n     }\n \n+    /**\n+     * Finds an exam based on the id with all student exams which are not marked as test runs.\n+     * @param examId the id of the exam\n+     * @return the exam with student exams loaded\n+     */\n+    private Exam findWithStudentExamsById(long examId) {\n+        Exam exam = examRepository.findWithStudentExamsById(examId).orElseThrow(() -> new EntityNotFoundException(\"Exam with id \" + examId + \" does not exist\"));\n+        // drop all test runs and set the remaining students exams to the exam\n+        exam.setStudentExams(exam.getStudentExams().stream().dropWhile(StudentExam::getTestRun).collect(Collectors.toSet()));", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MDgwMg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493060802", "bodyText": "Yes good point!", "author": "anditurdiu", "createdAt": "2020-09-22T22:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTcwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493015701", "bodyText": "I'd rather return an optional so the caller knows that he has to check whether a value is present", "author": "kloessst", "createdAt": "2020-09-22T20:32:25Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ParticipationService.java", "diffHunk": "@@ -1234,6 +1301,33 @@ private boolean userHasPermissions(StudentParticipation participation) {\n         return studentParticipationRepository.findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(studentId, exercises);\n     }\n \n+    /**\n+     * Loads the test run participation for the instructor.\n+     * See {@link StudentParticipation#isTestRunParticipation()}\n+     * @param instructorId the id of the instructor\n+     * @param exercise the exercise id\n+     * @return the test run participation with submissions and results loaded\n+     */\n+    public StudentParticipation findTestRunParticipationOfInstructorForExercise(Long instructorId, Exercise exercise) {\n+        var studentParticipations = findByStudentIdAndIndividualExercisesWithEagerSubmissionsResult(instructorId, List.of(exercise));\n+        if (studentParticipations.isEmpty() || !studentParticipations.get(0).isTestRunParticipation()) {\n+            return null;", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MTE5MA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493061190", "bodyText": "I agree. I implemented the CR.", "author": "anditurdiu", "createdAt": "2020-09-22T22:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxOTg2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493019862", "bodyText": "te instructor -> the instructor :)", "author": "kloessst", "createdAt": "2020-09-22T20:40:19Z", "path": "src/main/java/de/tum/in/www1/artemis/service/StudentExamService.java", "diffHunk": "@@ -336,4 +340,118 @@ public Integer findMaxWorkingTimeByExamId(Long examId) {\n         log.debug(\"Request to find all distinct working times for Exam : {}\", examId);\n         return studentExamRepository.findAllDistinctWorkingTimesByExamId(examId);\n     }\n+\n+    /**\n+     * Generates a Student Exam marked as a testRun for te instructor to test the exam as a student would experience it.", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyOTI3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493029276", "bodyText": "indicates", "author": "kloessst", "createdAt": "2020-09-22T20:57:41Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ComplaintResource.java", "diffHunk": "@@ -239,7 +240,29 @@ public ComplaintResource(AuthorizationCheckService authCheckService, ExerciseSer\n         }\n \n         List<Complaint> responseComplaints = complaintService.getAllComplaintsByExerciseIdButMine(exerciseId);\n-        responseComplaints = buildComplaintsListForAssessor(responseComplaints, principal, false);\n+        responseComplaints = buildComplaintsListForAssessor(responseComplaints, principal, false, false);\n+        return ResponseEntity.ok(responseComplaints);\n+    }\n+\n+    /**\n+     * Get /exercises/:exerciseId/complaints-for-test-run-dashboard\n+     * <p>\n+     * Get all the complaints associated to a test run exercise, but filter out the ones that are not about the tutor who is doing the request, since this idicated test run exercises", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMTY0MA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493031640", "bodyText": "Could it happen for normal exercises that (student != null && assessor.getLogin().equals(student.getLogin())) evaluates to true because the assessor was the same person (e.g. for a quick testing session) and testRun is false? Might not matter in this case but I'm curios.", "author": "kloessst", "createdAt": "2020-09-22T21:02:09Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ComplaintResource.java", "diffHunk": "@@ -463,8 +486,9 @@ private void filterOutUselessDataFromComplaints(List<Complaint> complaints, bool\n         complaints.forEach(complaint -> {\n             String submissorName = principal.getName();\n             User assessor = complaint.getResult().getAssessor();\n+            User student = complaint.getStudent();\n \n-            if (assessor.getLogin().equals(submissorName) == assessorSameAsCaller) {\n+            if (assessor.getLogin().equals(submissorName) == assessorSameAsCaller && (student != null && assessor.getLogin().equals(student.getLogin())) == testRun) {", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MzIzOA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493063238", "bodyText": "(student != null && assessor.getLogin().equals(student.getLogin())) yes as you can assess your own submissions. But for normal (not test run participations) assessorSameAsCaller is set to false\nwhich would in turn make assessor.getLogin().equals(submissorName) == assessorSameAsCaller result to false thereby falsifying the clause. There should therefore be no interference here between test run participations and normal participations", "author": "anditurdiu", "createdAt": "2020-09-22T22:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMTY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNDEwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493034101", "bodyText": "Do you need this request? I don't see any additional test run logic. You could probably reuse getExamForTutorDashboard but I might be wrong", "author": "kloessst", "createdAt": "2020-09-22T21:07:08Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ExamResource.java", "diffHunk": "@@ -289,7 +290,38 @@ public ExamResource(UserService userService, CourseService courseService, ExamRe\n         }\n \n         List<TutorParticipation> tutorParticipations = tutorParticipationService.findAllByCourseAndTutor(course, user);\n-        tutorDashboardService.prepareExercisesForTutorDashboard(exercises, tutorParticipations);\n+        tutorDashboardService.prepareExercisesForTutorDashboard(exercises, tutorParticipations, true);\n+\n+        return ResponseEntity.ok(exam);\n+    }\n+\n+    /**\n+     * GET /courses/:courseId/exams/:examId:for-exam-tutor-test-run-dashboard\n+     *\n+     * @param courseId the id of the course to retrieve\n+     * @param examId the id of the exam that contains the exercises\n+     * @return data about a exam test run including all exercises, plus some data for the tutor as tutor status for assessment\n+     */\n+    @GetMapping(\"/courses/{courseId}/exams/{examId}/for-exam-tutor-test-run-dashboard\")\n+    @PreAuthorize(\"hasAnyRole('INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Exam> getExamForTutorTestRunDashboard(@PathVariable long courseId, @PathVariable long examId) {", "originalCommit": "2d189067470549910bf5be3ce6cdfd0178172a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDUwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2096#discussion_r493064500", "bodyText": "There are differences, as only instructors can access this endpoint. We also do not check against the end date of the exam. For the normal dashboard, we throw a forbidden error, as tutors and instructors are not supposed to assess submissions before the exam is over.\nAdditionally, we do not prepare the status statistics for this call, as that is not displayed for the test run assessment dashboard.", "author": "anditurdiu", "createdAt": "2020-09-22T22:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNDEwMQ=="}], "type": "inlineReview"}, {"oid": "62d964591c0aa2ce970692afb597bf5812f060b2", "url": "https://github.com/ls1intum/Artemis/commit/62d964591c0aa2ce970692afb597bf5812f060b2", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-22T22:24:17Z", "type": "commit"}, {"oid": "43a23510e415a7fb627b9f5373e63cbbd7e6bbf4", "url": "https://github.com/ls1intum/Artemis/commit/43a23510e415a7fb627b9f5373e63cbbd7e6bbf4", "message": "implement CR from Stefan", "committedDate": "2020-09-22T22:25:41Z", "type": "commit"}, {"oid": "b94568de0decc592a28a696fa3a220f4ee1c8e22", "url": "https://github.com/ls1intum/Artemis/commit/b94568de0decc592a28a696fa3a220f4ee1c8e22", "message": "revert changes to build.gradle", "committedDate": "2020-09-22T22:31:16Z", "type": "commit"}, {"oid": "b23932ee23b7b679d157c8d0d2e99f1cf8df321d", "url": "https://github.com/ls1intum/Artemis/commit/b23932ee23b7b679d157c8d0d2e99f1cf8df321d", "message": "Revert liquibase change: cannot modify a liquibase changeset that has already been executed by Liquibase", "committedDate": "2020-09-22T22:54:41Z", "type": "commit"}, {"oid": "7ec04beec81895044754def77fa1d05ece2cd5a2", "url": "https://github.com/ls1intum/Artemis/commit/7ec04beec81895044754def77fa1d05ece2cd5a2", "message": "Merge branch 'develop' into feature/exam/test-run-server", "committedDate": "2020-09-22T23:14:15Z", "type": "commit"}, {"oid": "4cae46ff8cb0689871cc3146fd070e11f9f5baeb", "url": "https://github.com/ls1intum/Artemis/commit/4cae46ff8cb0689871cc3146fd070e11f9f5baeb", "message": "fix tests", "committedDate": "2020-09-23T06:47:54Z", "type": "commit"}]}