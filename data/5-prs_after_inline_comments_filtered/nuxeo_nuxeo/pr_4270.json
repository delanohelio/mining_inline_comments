{"pr_number": 4270, "pr_title": "NXP-29571 runtime component listeners", "pr_createdAt": "2020-08-24T09:51:15Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4270", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4NDE1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4270#discussion_r475484155", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(events.size() > 0);\n          \n          \n            \n                    assertFalse(events.isEmpty());", "author": "kevinleturc", "createdAt": "2020-08-24T09:57:11Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/TestComponentManager.java", "diffHunk": "@@ -100,4 +109,30 @@ public void assertCounters(int beforeStart, int afterStart, int beforeStop, int\n         }\n     }\n \n+    @Test\n+    public void testComponentListener() {\n+        String mockComponentName = \"component.manager.listener\";\n+        Object component = Framework.getRuntime().getComponent(mockComponentName);\n+        assertTrue(component instanceof MockComponentManagerListener);\n+        MockComponentManagerListener mockComponent = (MockComponentManagerListener) component;\n+        List<ComponentEvent> events = mockComponent.getEvents();\n+        assertTrue(events.size() > 0);", "originalCommit": "534e9da63f5d408ed441c0bf847e5d2701cf524e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4ODg0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4270#discussion_r475488841", "bodyText": "The watch calls on this step will be erased by the activate step.\nHere we should declare a new Watch, if we're interested, and write its metrics to another file or not do it.", "author": "kevinleturc", "createdAt": "2020-08-24T10:05:54Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -509,14 +510,26 @@ protected static void handleError(String message, Exception e) {\n         log.info(\"Activate components\");\n         Watch watch = new Watch();\n         watch.start();\n+\n+        // first instantiate resolved components: that allows some to register as listeners on ComponentManager before\n+        // all components activation.\n+        List<RegistrationInfo> iris = new ArrayList<>();\n+        // first activate resolved components\n+        for (RegistrationInfo ri : registry.getResolvedRegistrationInfo()) {\n+            watch.start(ri.getName().getName());", "originalCommit": "534e9da63f5d408ed441c0bf847e5d2701cf524e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NjkzOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4270#discussion_r475496938", "bodyText": "Indeed I thought they would addition (since component instantiation could be costly), so i'll add a new watch.", "author": "atchertchian", "createdAt": "2020-08-24T10:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4ODg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4OTMzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4270#discussion_r475489337", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            && List.of(RegistrationInfo.ACTIVATED, RegistrationInfo.STARTED).contains(ri.getState())) {\n          \n          \n            \n                            && Set.of(RegistrationInfo.ACTIVATED, RegistrationInfo.STARTED).contains(ri.getState())) {", "author": "kevinleturc", "createdAt": "2020-08-24T10:06:47Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -410,7 +409,9 @@ void sendEvent(ComponentEvent event) {\n     public synchronized void registerExtension(Extension extension) {\n         ComponentName name = extension.getTargetComponent();\n         RegistrationInfo ri = registry.getComponent(name);\n-        if (ri != null && ri.getComponent() != null) {\n+\n+        if (ri != null && ri.getComponent() != null\n+                && List.of(RegistrationInfo.ACTIVATED, RegistrationInfo.STARTED).contains(ri.getState())) {", "originalCommit": "534e9da63f5d408ed441c0bf847e5d2701cf524e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5Mjc4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4270#discussion_r475592782", "bodyText": "You should add a @return explaining the boolean returned", "author": "efge", "createdAt": "2020-08-24T13:18:12Z", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -531,6 +544,19 @@ protected static void handleError(String message, Exception e) {\n         return ris;\n     }\n \n+    /**\n+     * Instantiates the given {@link RegistrationInfo}. This step will instantiate the component.\n+     * <p>\n+     * Allows registering listeners on ComponentManager at component instantiation, before all components activation.\n+     * <p>\n+     * Should be called before {@link #activateComponent(RegistrationInfo)}.", "originalCommit": "fee307c9b3fde95a5d0284be363d52c89ee7539d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "027a406dd27c134176c00efa802cfd9c44fb894f", "url": "https://github.com/nuxeo/nuxeo/commit/027a406dd27c134176c00efa802cfd9c44fb894f", "message": "NXP-29571: remove early (and useless) static access to ServerLocator service in metrics", "committedDate": "2020-08-24T13:48:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMDI2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4270#discussion_r479230263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return events.stream()\n          \n          \n            \n                                 .filter(e -> event == e.id && component.equals(e.registrationInfo.getName().getName()))\n          \n          \n            \n                                 .findAny()\n          \n          \n            \n                                 .isPresent();\n          \n          \n            \n                    return events.stream()\n          \n          \n            \n                                 .anyMatch(e -> event == e.id && component.equals(e.registrationInfo.getName().getName()));", "author": "kevinleturc", "createdAt": "2020-08-28T12:27:05Z", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/MockComponentManagerListener.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * Mock component registering itself to component manager.\n+ *\n+ * @since 11.3\n+ */\n+public class MockComponentManagerListener extends DefaultComponent implements ComponentListener {\n+\n+    protected List<ComponentEvent> events = new ArrayList<>();\n+\n+    public MockComponentManagerListener() {\n+        Framework.getRuntime().getComponentManager().addComponentListener(this);\n+    }\n+\n+    @Override\n+    public void handleEvent(ComponentEvent event) {\n+        this.events.add(event);\n+    }\n+\n+    public List<ComponentEvent> getEvents() {\n+        return Collections.unmodifiableList(events);\n+    }\n+\n+    public boolean hasEvent(int event, String component) {\n+        return events.stream()\n+                     .filter(e -> event == e.id && component.equals(e.registrationInfo.getName().getName()))\n+                     .findAny()\n+                     .isPresent();", "originalCommit": "027a406dd27c134176c00efa802cfd9c44fb894f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f579bf5f2c0e2435f7d773cb7f304cdb5da5f04", "url": "https://github.com/nuxeo/nuxeo/commit/9f579bf5f2c0e2435f7d773cb7f304cdb5da5f04", "message": "NXP-29571: Allow registering runtime component listeners early", "committedDate": "2020-08-28T13:24:05Z", "type": "commit"}, {"oid": "b0637a3f51c68cb2a2eee263e50c2f3db60c659d", "url": "https://github.com/nuxeo/nuxeo/commit/b0637a3f51c68cb2a2eee263e50c2f3db60c659d", "message": "NXP-29571: remove early (and useless) static access to ServerLocator service in metrics", "committedDate": "2020-08-28T13:24:05Z", "type": "commit"}, {"oid": "b0637a3f51c68cb2a2eee263e50c2f3db60c659d", "url": "https://github.com/nuxeo/nuxeo/commit/b0637a3f51c68cb2a2eee263e50c2f3db60c659d", "message": "NXP-29571: remove early (and useless) static access to ServerLocator service in metrics", "committedDate": "2020-08-28T13:24:05Z", "type": "forcePushed"}]}