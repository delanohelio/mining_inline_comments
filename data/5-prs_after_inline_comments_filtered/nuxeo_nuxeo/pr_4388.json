{"pr_number": 4388, "pr_title": "10.10-HF/fix-NXP-29720-Make-UserGroup.Suggestion-work-with-subgroups", "pr_createdAt": "2020-10-15T15:37:47Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4388", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMDQ3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507600472", "bodyText": "You should start by checking groups != null before computing the descendant groups, to avoid doing so if the user has no group.", "author": "ataillefer", "createdAt": "2020-10-19T09:24:40Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -269,8 +275,20 @@ public Blob run() throws IOException {\n                 user = userManager.getUserModel(userId);\n                 UserAdapter userAdapter = user.getAdapter(UserAdapter.class);\n                 List<String> groups = userAdapter.getGroups();\n-                if (groups != null && groups.contains(groupRestriction)) {\n-                    result.add(obj);\n+                List<String> restrictedGroups = new ArrayList<>();\n+                restrictedGroups.add(groupRestriction);\n+                if (allowSubGroupsRestriction) {\n+                    List<String> subGroups = userManager.getDescendantGroups(groupRestriction);\n+                    for (String subGroup : subGroups) {\n+                        restrictedGroups.add(subGroup);\n+                    }\n+                }\n+\n+                if (groups != null) {\n+                    groups.retainAll(restrictedGroups);\n+                    if (!groups.isEmpty()) {\n+                        result.add(obj);\n+                    }", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMTc5OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507601799", "bodyText": "It sounds like we're only suggesting from the subgroups, not including the restricted group itself.\nMaybe something like \"Include the subgroups when passing a groupRestriction.\"", "author": "ataillefer", "createdAt": "2020-10-19T09:26:42Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -143,6 +143,12 @@\n     @Param(name = \"lang\", required = false)\n     protected String lang;\n \n+    /*\n+     * @since 11.4\n+     */\n+    @Param(name = \"allowSubGroupsRestriction\", required = false, description = \"Suggest users from the subgroups specified in the group restriction.\")", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMjAxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507602017", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DocumentModel Employees = userManager.getBareGroupModel();\n          \n          \n            \n                    DocumentModel employees = userManager.getBareGroupModel();", "author": "ataillefer", "createdAt": "2020-10-19T09:27:01Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,75 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        // create top level group 'employees'\n+        DocumentModel Employees = userManager.getBareGroupModel();", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMjU5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507602591", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DocumentModel Developpers = userManager.getBareGroupModel();\n          \n          \n            \n                    DocumentModel developpers = userManager.getBareGroupModel();", "author": "ataillefer", "createdAt": "2020-10-19T09:27:57Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,75 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        // create top level group 'employees'\n+        DocumentModel Employees = userManager.getBareGroupModel();\n+        Employees.setPropertyValue(\"group:groupname\", \"Employees\");\n+        Employees.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Employees);\n+\n+        // create second level group 'developpers'\n+        DocumentModel Developpers = userManager.getBareGroupModel();", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzU4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507603584", "bodyText": "groupname is an internal id, best to use lowercase: employees, same for all the other groups/subgroups below", "author": "ataillefer", "createdAt": "2020-10-19T09:29:27Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,75 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        // create top level group 'employees'\n+        DocumentModel Employees = userManager.getBareGroupModel();\n+        Employees.setPropertyValue(\"group:groupname\", \"Employees\");", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTUxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507605510", "bodyText": "these 2 lines are unneeded, you can reuse the same map", "author": "ataillefer", "createdAt": "2020-10-19T09:32:18Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,75 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        // create top level group 'employees'\n+        DocumentModel Employees = userManager.getBareGroupModel();\n+        Employees.setPropertyValue(\"group:groupname\", \"Employees\");\n+        Employees.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Employees);\n+\n+        // create second level group 'developpers'\n+        DocumentModel Developpers = userManager.getBareGroupModel();\n+        Developpers.setPropertyValue(\"group:groupname\", \"Developpers\");\n+        Developpers.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"Employees\"));\n+        Developpers.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Support\"));\n+\n+        userManager.createGroup(Developpers);\n+\n+        // create third level group 'support'\n+        DocumentModel Support = userManager.getBareGroupModel();\n+        Support.setPropertyValue(\"group:groupname\", \"Support\");\n+        Support.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Support);\n+\n+        // create 2 users in each group\n+        for (int i = 0; i < 6; i++) {\n+            DocumentModel user = userManager.getBareUserModel();\n+            user.setPropertyValue(\"user:username\", \"user\" + i);\n+            user.setPropertyValue(\"user:firstName\", \"User\" + i);\n+            user.setPropertyValue(\"user:lastName\", \"Smith\");\n+            user.setPropertyValue(\"user:email\", \"user\" + i + \"@example.com\");\n+            if (i % 3 == 0) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Employees\"));\n+            } else if (i % 3 == 1) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Developpers\"));\n+            } else {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Support\"));\n+            }\n+            userManager.createUser(user);\n+        }\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            // By searching employees we should have all the users we created before in the three groups and not only\n+            // those in the Employees group directly, so a total of 6 people\n+            Map<String, String> params = new HashMap<>();\n+            params.put(\"allowSubGroupsRestriction\", \"true\");\n+            params.put(\"groupRestriction\", \"Employees\");\n+            Blob result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            JsonAssert json = JsonAssert.on(result.getString());\n+            assertEquals(6, json.getNode().size());\n+\n+            params = new HashMap<>();\n+            params.put(\"allowSubGroupsRestriction\", \"true\");", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNTY0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507605648", "bodyText": "same remark as above", "author": "ataillefer", "createdAt": "2020-10-19T09:32:32Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,75 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        // create top level group 'employees'\n+        DocumentModel Employees = userManager.getBareGroupModel();\n+        Employees.setPropertyValue(\"group:groupname\", \"Employees\");\n+        Employees.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Employees);\n+\n+        // create second level group 'developpers'\n+        DocumentModel Developpers = userManager.getBareGroupModel();\n+        Developpers.setPropertyValue(\"group:groupname\", \"Developpers\");\n+        Developpers.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"Employees\"));\n+        Developpers.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Support\"));\n+\n+        userManager.createGroup(Developpers);\n+\n+        // create third level group 'support'\n+        DocumentModel Support = userManager.getBareGroupModel();\n+        Support.setPropertyValue(\"group:groupname\", \"Support\");\n+        Support.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Support);\n+\n+        // create 2 users in each group\n+        for (int i = 0; i < 6; i++) {\n+            DocumentModel user = userManager.getBareUserModel();\n+            user.setPropertyValue(\"user:username\", \"user\" + i);\n+            user.setPropertyValue(\"user:firstName\", \"User\" + i);\n+            user.setPropertyValue(\"user:lastName\", \"Smith\");\n+            user.setPropertyValue(\"user:email\", \"user\" + i + \"@example.com\");\n+            if (i % 3 == 0) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Employees\"));\n+            } else if (i % 3 == 1) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Developpers\"));\n+            } else {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Support\"));\n+            }\n+            userManager.createUser(user);\n+        }\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            // By searching employees we should have all the users we created before in the three groups and not only\n+            // those in the Employees group directly, so a total of 6 people\n+            Map<String, String> params = new HashMap<>();\n+            params.put(\"allowSubGroupsRestriction\", \"true\");\n+            params.put(\"groupRestriction\", \"Employees\");\n+            Blob result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            JsonAssert json = JsonAssert.on(result.getString());\n+            assertEquals(6, json.getNode().size());\n+\n+            params = new HashMap<>();\n+            params.put(\"allowSubGroupsRestriction\", \"true\");\n+            params.put(\"groupRestriction\", \"Developpers\");\n+            result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            json = JsonAssert.on(result.getString());\n+            assertEquals(4, json.getNode().size());\n+\n+            params = new HashMap<>();\n+            params.put(\"allowSubGroupsRestriction\", \"true\");", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNjIyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507606226", "bodyText": "Can you please add a test with params.put(\"allowSubGroupsRestriction\", \"false\"); showing the expected result: 2.", "author": "ataillefer", "createdAt": "2020-10-19T09:33:29Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,75 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        // create top level group 'employees'\n+        DocumentModel Employees = userManager.getBareGroupModel();\n+        Employees.setPropertyValue(\"group:groupname\", \"Employees\");\n+        Employees.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Employees);\n+\n+        // create second level group 'developpers'\n+        DocumentModel Developpers = userManager.getBareGroupModel();\n+        Developpers.setPropertyValue(\"group:groupname\", \"Developpers\");\n+        Developpers.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"Employees\"));\n+        Developpers.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"Support\"));\n+\n+        userManager.createGroup(Developpers);\n+\n+        // create third level group 'support'\n+        DocumentModel Support = userManager.getBareGroupModel();\n+        Support.setPropertyValue(\"group:groupname\", \"Support\");\n+        Support.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"Developpers\"));\n+\n+        userManager.createGroup(Support);\n+\n+        // create 2 users in each group\n+        for (int i = 0; i < 6; i++) {\n+            DocumentModel user = userManager.getBareUserModel();\n+            user.setPropertyValue(\"user:username\", \"user\" + i);\n+            user.setPropertyValue(\"user:firstName\", \"User\" + i);\n+            user.setPropertyValue(\"user:lastName\", \"Smith\");\n+            user.setPropertyValue(\"user:email\", \"user\" + i + \"@example.com\");\n+            if (i % 3 == 0) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Employees\"));\n+            } else if (i % 3 == 1) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Developpers\"));\n+            } else {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"Support\"));\n+            }\n+            userManager.createUser(user);\n+        }\n+\n+        try (OperationContext ctx = new OperationContext(session)) {", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNTYwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507615608", "bodyText": "I can see 2 problems here, take the following group hierarchy (OK it's twisted, but can happen):\n     A\n     |--- B\n     |    |--- A\n     |    |--- C   \n     |--- C\n     |    |--- D\n\nIt seems that with the suggested algorithm, the resulting list will:\n\nInclude A (the parent group, also sub-sub-group), but this is probably not an issue.\nNot include D, C being skipped since already present as a subgroup of B probably an issue.", "author": "ataillefer", "createdAt": "2020-10-19T09:48:13Z", "path": "nuxeo-services/nuxeo-platform-usermanager-core/src/main/java/org/nuxeo/ecm/platform/usermanager/UserManagerImpl.java", "diffHunk": "@@ -1604,6 +1604,24 @@ public GroupConfig getGroupConfig() {\n         return groupConfig;\n     }\n \n+    @Override\n+    public List<String> getDescendantGroups(String groupId){\n+        List<String> descendantGroups = new ArrayList<>();\n+        populateDescendantGroups(groupId, descendantGroups);\n+        return descendantGroups;\n+    }\n+\n+    protected void populateDescendantGroups(String groupId, List<String> descendantGroups) {\n+        NuxeoGroup group = getGroup(groupId);\n+        if (group != null) {\n+            List<String> subGroups = group.getMemberGroups();\n+            subGroups.stream().filter(subGroup -> !descendantGroups.contains(subGroup)).forEach(subGroup -> {\n+                descendantGroups.add(subGroup);\n+                populateDescendantGroups(subGroup, descendantGroups);\n+            });\n+        }\n+    }", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMjAzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507712030", "bodyText": "One solution could be to remove the duplicate filtering clause and use a HashSet (no duplicates) for the descendant groups.", "author": "ataillefer", "createdAt": "2020-10-19T12:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNTYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NTQ4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507745486", "bodyText": "Yes maybe consider an algorithm based on (untested, modulo details):\n    Set<String> descendantGroups = new HashSet<>();\n    Deque<String> todo = new LinkedList<>();\n    todo.add(groupId);\n    while (!todo.isEmpty()) {\n        String id = todo.pop();\n        if (descendantGroups.add(id)) {\n            // recurse\n            NuxeoGroup group = getGroup(id);\n            if (group != null) {\n                todo.addAll(group.getMemberGroups());\n            }\n        }\n    }", "author": "efge", "createdAt": "2020-10-19T13:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNTYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc3NDEyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r512774121", "bodyText": "It seems to me that the actual algorithm works with this configuration...", "author": "charlesboidot", "createdAt": "2020-10-27T15:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNTYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyODEwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r513328104", "bodyText": "OK, then, can you please add a case in the test to show that we don't have the following problem:\n\nNot include D, C being skipped since already present as a subgroup of B probably an issue.", "author": "ataillefer", "createdAt": "2020-10-28T10:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNTYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMDAxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r515900018", "bodyText": "Thanks, indeed it's working since when the first occurrence of C is added, its descendant groups are computed, thus D \ud83d\udc4d", "author": "ataillefer", "createdAt": "2020-11-02T11:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNTYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczNzkwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r507737907", "bodyText": "Don't forget to document this new configuration option in the NXP ticket", "author": "efge", "createdAt": "2020-10-19T13:18:45Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -143,6 +143,12 @@\n     @Param(name = \"lang\", required = false)\n     protected String lang;\n \n+    /*\n+     * @since 11.4\n+     */\n+    @Param(name = \"allowSubGroupsRestriction\", required = false, description = \"Suggest users from the subgroups specified in the group restriction.\")", "originalCommit": "12e29667947b7d5ef52ffe5b6756b6c5eae04b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53b7eac5ec2fd833e1133ee5391b13b6de195f3f", "url": "https://github.com/nuxeo/nuxeo/commit/53b7eac5ec2fd833e1133ee5391b13b6de195f3f", "message": "Merge branch '10.10-HF/fix-NXP-29720-Make-UserGroup.Suggestion-work-with-subgroups' of github.com:nuxeo/nuxeo into 10.10-HF/fix-NXP-29720-Make-UserGroup.Suggestion-work-with-subgroups", "committedDate": "2020-10-19T16:09:46Z", "type": "forcePushed"}, {"oid": "9f5ad2aa3d5ac3af45a8d5d71a1901b71cc766da", "url": "https://github.com/nuxeo/nuxeo/commit/9f5ad2aa3d5ac3af45a8d5d71a1901b71cc766da", "message": "NXP-29720: Make UserGroup.Suggestion work with subgroups", "committedDate": "2020-10-27T14:36:35Z", "type": "forcePushed"}, {"oid": "837fbf43b2cce45c22ff35c3631f9aa5ff26dba6", "url": "https://github.com/nuxeo/nuxeo/commit/837fbf43b2cce45c22ff35c3631f9aa5ff26dba6", "message": "NXP-29720: Make UserGroup.Suggestion work with subgroups", "committedDate": "2020-10-27T15:06:08Z", "type": "forcePushed"}, {"oid": "fd2fe96fd112fb21daab3388fbc04d76be812738", "url": "https://github.com/nuxeo/nuxeo/commit/fd2fe96fd112fb21daab3388fbc04d76be812738", "message": "NXP-29720: Make UserGroup.Suggestion work with subgroups", "committedDate": "2020-10-29T09:17:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMDc3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r515900779", "bodyText": "I think we can also test if goups is not empty before computing the descendant groups, to avoid computing them uselessly for a user that isn't in any group.", "author": "ataillefer", "createdAt": "2020-11-02T11:12:08Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -269,8 +275,20 @@ public Blob run() throws IOException {\n                 user = userManager.getUserModel(userId);\n                 UserAdapter userAdapter = user.getAdapter(UserAdapter.class);\n                 List<String> groups = userAdapter.getGroups();\n-                if (groups != null && groups.contains(groupRestriction)) {\n-                    result.add(obj);\n+                List<String> restrictedGroups = new ArrayList<>();\n+                restrictedGroups.add(groupRestriction);\n+\n+                if (groups != null) {", "originalCommit": "fd2fe96fd112fb21daab3388fbc04d76be812738", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abbff664f011cf61e758bce3eea66c493c892aa9", "url": "https://github.com/nuxeo/nuxeo/commit/abbff664f011cf61e758bce3eea66c493c892aa9", "message": "NXP-29720: Make UserGroup.Suggestion work with subgroups", "committedDate": "2020-11-02T16:03:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2Nzk5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521967998", "bodyText": "The description text is not clear. I suggest \"Whether to take into account subgroups when evaluating groupRestriction\" \u2014\u00a0if I understand correctly.", "author": "efge", "createdAt": "2020-11-12T09:40:26Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -143,6 +144,12 @@\n     @Param(name = \"lang\", required = false)\n     protected String lang;\n \n+    /*\n+     * @since 11.4\n+     */\n+    @Param(name = \"allowSubGroupsRestriction\", required = false, description = \"Include the subgroups when passing a groupRestriction.\")", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2OTI4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521969281", "bodyText": "Please put this method just below getAncestorGroups.", "author": "efge", "createdAt": "2020-11-12T09:42:22Z", "path": "nuxeo-services/nuxeo-platform-usermanager-api/src/main/java/org/nuxeo/ecm/platform/usermanager/UserManager.java", "diffHunk": "@@ -463,4 +463,12 @@ default void notifyGroupChanged(String groupName, String eventId) {\n      * @since 9.2\n      */\n     void notifyGroupChanged(String groupName, String eventId, List<String> ancestorGroupNames);\n+\n+    /**\n+     * Returns the descendant groups of the group with the given id.\n+     *\n+     * @since 11.4\n+     */\n+    List<String> getDescendantGroups(String groupId);", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2OTM4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521969386", "bodyText": "Please put this method just below getAncestorGroups.", "author": "efge", "createdAt": "2020-11-12T09:42:34Z", "path": "nuxeo-services/nuxeo-platform-usermanager-core/src/main/java/org/nuxeo/ecm/platform/usermanager/FakeUserManagerImpl.java", "diffHunk": "@@ -498,4 +498,9 @@ public void notifyGroupChanged(String groupName, String eventId, List<String> an\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n+    public List<String> getDescendantGroups(String groupId) {", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3MDI0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521970242", "bodyText": "Please put these two methods just below getAncestorGroups (actually below populateAncestorGroups)", "author": "efge", "createdAt": "2020-11-12T09:43:53Z", "path": "nuxeo-services/nuxeo-platform-usermanager-core/src/main/java/org/nuxeo/ecm/platform/usermanager/UserManagerImpl.java", "diffHunk": "@@ -1604,6 +1604,24 @@ public GroupConfig getGroupConfig() {\n         return groupConfig;\n     }\n \n+    @Override\n+    public List<String> getDescendantGroups(String groupId){", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NDA4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521974080", "bodyText": "Remove empty line", "author": "efge", "createdAt": "2020-11-12T09:49:37Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -269,8 +276,20 @@ public Blob run() throws IOException {\n                 user = userManager.getUserModel(userId);\n                 UserAdapter userAdapter = user.getAdapter(UserAdapter.class);\n                 List<String> groups = userAdapter.getGroups();\n-                if (groups != null && groups.contains(groupRestriction)) {\n-                    result.add(obj);\n+                List<String> restrictedGroups = new ArrayList<>();\n+                restrictedGroups.add(groupRestriction);\n+", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NTEyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521975127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    List<String> subGroups = userManager.getDescendantGroups(groupRestriction);\n          \n          \n            \n                                    for (String subGroup : subGroups) {\n          \n          \n            \n                                        restrictedGroups.add(subGroup);\n          \n          \n            \n                                    }\n          \n          \n            \n                                    restrictedGroups.addAll(userManager.getDescendantGroups(groupRestriction));", "author": "efge", "createdAt": "2020-11-12T09:51:09Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -269,8 +276,20 @@ public Blob run() throws IOException {\n                 user = userManager.getUserModel(userId);\n                 UserAdapter userAdapter = user.getAdapter(UserAdapter.class);\n                 List<String> groups = userAdapter.getGroups();\n-                if (groups != null && groups.contains(groupRestriction)) {\n-                    result.add(obj);\n+                List<String> restrictedGroups = new ArrayList<>();\n+                restrictedGroups.add(groupRestriction);\n+\n+                if (CollectionUtils.isNotEmpty(groups)) {\n+                    if (allowSubGroupsRestriction) {\n+                        List<String> subGroups = userManager.getDescendantGroups(groupRestriction);\n+                        for (String subGroup : subGroups) {\n+                            restrictedGroups.add(subGroup);\n+                        }", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4MjQ4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521982486", "bodyText": "I'd rather not modify groups as it comes from the adapter and I'm not sure we have enough defensive copies (and actually there's nothing that guarantees that's it's a modifiable list).\nAs the check we want is that the intersection is not empty, I think this works just as well:\nrestrictedGroups.retainAll(groups);\nif (!restrictedGroups.isEmpty()) {\n\nBut of course run the unit tests to make sure.", "author": "efge", "createdAt": "2020-11-12T10:02:01Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -269,8 +276,20 @@ public Blob run() throws IOException {\n                 user = userManager.getUserModel(userId);\n                 UserAdapter userAdapter = user.getAdapter(UserAdapter.class);\n                 List<String> groups = userAdapter.getGroups();\n-                if (groups != null && groups.contains(groupRestriction)) {\n-                    result.add(obj);\n+                List<String> restrictedGroups = new ArrayList<>();\n+                restrictedGroups.add(groupRestriction);\n+\n+                if (CollectionUtils.isNotEmpty(groups)) {\n+                    if (allowSubGroupsRestriction) {\n+                        List<String> subGroups = userManager.getDescendantGroups(groupRestriction);\n+                        for (String subGroup : subGroups) {\n+                            restrictedGroups.add(subGroup);\n+                        }\n+                    }\n+                    groups.retainAll(restrictedGroups);\n+                    if (!groups.isEmpty()) {", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4NDQ4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521984486", "bodyText": "These two lines can be moved further down inside the if", "author": "efge", "createdAt": "2020-11-12T10:04:54Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/users/SuggestUserEntries.java", "diffHunk": "@@ -269,8 +276,20 @@ public Blob run() throws IOException {\n                 user = userManager.getUserModel(userId);\n                 UserAdapter userAdapter = user.getAdapter(UserAdapter.class);\n                 List<String> groups = userAdapter.getGroups();\n-                if (groups != null && groups.contains(groupRestriction)) {\n-                    result.add(obj);\n+                List<String> restrictedGroups = new ArrayList<>();\n+                restrictedGroups.add(groupRestriction);", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4NTc2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521985768", "bodyText": "One one empty line only (enforced by formatter).", "author": "efge", "createdAt": "2020-11-12T10:07:00Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,103 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        //A\n+        //|--- B\n+        //|    |--- A\n+        //|    |--- C\n+        //|--- C\n+        //|    |--- D\n+\n+        // create group 'A'\n+        DocumentModel A = userManager.getBareGroupModel();\n+        A.setPropertyValue(\"group:groupname\", \"A\");\n+        A.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"B\", \"C\"));\n+\n+        userManager.createGroup(A);\n+\n+        // create group 'B'\n+        DocumentModel B = userManager.getBareGroupModel();\n+        B.setPropertyValue(\"group:groupname\", \"B\");\n+        B.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"A\"));\n+        B.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"C\", \"A\"));\n+\n+        userManager.createGroup(B);\n+\n+        // create group 'C'\n+        DocumentModel C = userManager.getBareGroupModel();\n+        C.setPropertyValue(\"group:groupname\", \"C\");\n+        C.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"B\", \"A\"));\n+        C.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"D\"));\n+\n+", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4NjM2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521986363", "bodyText": "Don't use local variables starting with an uppercase -> a", "author": "efge", "createdAt": "2020-11-12T10:07:54Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,103 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        //A\n+        //|--- B\n+        //|    |--- A\n+        //|    |--- C\n+        //|--- C\n+        //|    |--- D\n+\n+        // create group 'A'\n+        DocumentModel A = userManager.getBareGroupModel();", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4ODAxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r521988012", "bodyText": "Empty line not needed before } in a method.\nOn the other hand we like to have an empty line before the final } of the class...\n\ud83d\ude2c", "author": "efge", "createdAt": "2020-11-12T10:10:28Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,103 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+\n+        //A\n+        //|--- B\n+        //|    |--- A\n+        //|    |--- C\n+        //|--- C\n+        //|    |--- D\n+\n+        // create group 'A'\n+        DocumentModel A = userManager.getBareGroupModel();\n+        A.setPropertyValue(\"group:groupname\", \"A\");\n+        A.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"B\", \"C\"));\n+\n+        userManager.createGroup(A);\n+\n+        // create group 'B'\n+        DocumentModel B = userManager.getBareGroupModel();\n+        B.setPropertyValue(\"group:groupname\", \"B\");\n+        B.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"A\"));\n+        B.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"C\", \"A\"));\n+\n+        userManager.createGroup(B);\n+\n+        // create group 'C'\n+        DocumentModel C = userManager.getBareGroupModel();\n+        C.setPropertyValue(\"group:groupname\", \"C\");\n+        C.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"B\", \"A\"));\n+        C.setPropertyValue(\"group:subGroups\", (Serializable) Arrays.asList(\"D\"));\n+\n+\n+        userManager.createGroup(C);\n+\n+         // create group 'D'\n+         DocumentModel D = userManager.getBareGroupModel();\n+         D.setPropertyValue(\"group:groupname\", \"D\");\n+         D.setPropertyValue(\"group:parentGroups\", (Serializable) Arrays.asList(\"C\"));\n+\n+        userManager.createGroup(D);\n+\n+        // create 2 users in each group\n+        for (int i = 0; i < 8; i++) {\n+            DocumentModel user = userManager.getBareUserModel();\n+            user.setPropertyValue(\"user:username\", \"user\" + i);\n+            user.setPropertyValue(\"user:firstName\", \"User\" + i);\n+            user.setPropertyValue(\"user:lastName\", \"Smith\");\n+            user.setPropertyValue(\"user:email\", \"user\" + i + \"@example.com\");\n+            if (i % 4 == 0) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"A\"));\n+            } else if (i % 4 == 1) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"B\"));\n+            } else if (i % 4 == 2) {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"C\"));\n+            } else {\n+                user.setPropertyValue(\"user:groups\", (Serializable) Arrays.asList(\"D\"));\n+            }\n+            userManager.createUser(user);\n+        }\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            // By searching A we should have all the users we created before in the three groups and not only\n+            // those in the A group directly, so a total of 8 people\n+            Map<String, String> params = new HashMap<>();\n+            params.put(\"allowSubGroupsRestriction\", \"true\");\n+            params.put(\"groupRestriction\", \"A\");\n+            Blob result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            JsonAssert json = JsonAssert.on(result.getString());\n+            assertEquals(8, json.getNode().size());\n+\n+            params.put(\"groupRestriction\", \"B\");\n+            result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            json = JsonAssert.on(result.getString());\n+            assertEquals(8, json.getNode().size());\n+\n+            params.put(\"groupRestriction\", \"C\");\n+            result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            json = JsonAssert.on(result.getString());\n+            assertEquals(4, json.getNode().size());\n+\n+            params.put(\"groupRestriction\", \"D\");\n+            result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            json = JsonAssert.on(result.getString());\n+            assertEquals(2, json.getNode().size());\n+\n+            // By searching A we should have only 2 people if we don't filter on the subgroups\n+            params.put(\"allowSubGroupsRestriction\", \"false\");\n+            params.put(\"groupRestriction\", \"A\");\n+            result = (Blob) automationService.run(ctx, SuggestUserEntries.ID, params);\n+            assertNotNull(result);\n+            json = JsonAssert.on(result.getString());\n+            assertEquals(2, json.getNode().size());\n+", "originalCommit": "abbff664f011cf61e758bce3eea66c493c892aa9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d808c457c5fe004d20ef7f9e57c1a26e38f9007c", "url": "https://github.com/nuxeo/nuxeo/commit/d808c457c5fe004d20ef7f9e57c1a26e38f9007c", "message": "NXP-29720: Make UserGroup.Suggestion work with subgroups", "committedDate": "2020-11-12T10:56:26Z", "type": "commit"}, {"oid": "d808c457c5fe004d20ef7f9e57c1a26e38f9007c", "url": "https://github.com/nuxeo/nuxeo/commit/d808c457c5fe004d20ef7f9e57c1a26e38f9007c", "message": "NXP-29720: Make UserGroup.Suggestion work with subgroups", "committedDate": "2020-11-12T10:56:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNjA3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r522036072", "bodyText": "why remove the schema showing the group hierarchy?", "author": "ataillefer", "createdAt": "2020-11-12T11:28:35Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/users/TestSuggestUserEntries.java", "diffHunk": "@@ -276,4 +276,95 @@ public void testMixedEntries() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSubGroupEntries() throws Exception {\n+", "originalCommit": "d808c457c5fe004d20ef7f9e57c1a26e38f9007c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNjcwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r522036707", "bodyText": "I thought it wasn't necessary to understand the test", "author": "charlesboidot", "createdAt": "2020-11-12T11:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNjA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzODE3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4388#discussion_r522038179", "bodyText": "OK, not necessary, but nice to have a quick view.\nAs you wish!", "author": "ataillefer", "createdAt": "2020-11-12T11:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNjA3Mg=="}], "type": "inlineReview"}]}