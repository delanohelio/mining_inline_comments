{"pr_number": 4081, "pr_title": "feature-NXP-29038-bulk-scroll-anything", "pr_createdAt": "2020-05-27T06:27:16Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4081", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMjg5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430922893", "bodyText": "Could you put command.getRepository() in a local variable, and use a else if for the second part ?\nAlso isBlank and even isEmpty seems wrong for the first check, can you use == null instead?", "author": "efge", "createdAt": "2020-05-27T07:50:23Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -109,11 +110,13 @@ public String submit(BulkCommand command) {\n         }\n \n         RepositoryManager repoManager = Framework.getService(RepositoryManager.class);\n-        if (isBlank(command.getRepository())) {\n-            command.setRepository(repoManager.getDefaultRepositoryName());\n-        } else {\n-            if (repoManager.getRepository(command.getRepository()) == null) {\n-                throw new IllegalArgumentException(\"Unknown repository: \" + command);\n+        if (repoManager != null) {\n+            if (isBlank(command.getRepository())) {\n+                command.setRepository(repoManager.getDefaultRepositoryName());\n+            } else {\n+                if (repoManager.getRepository(command.getRepository()) == null) {\n+                    throw new IllegalArgumentException(\"Unknown repository: \" + command);\n+                }\n             }", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMzYxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430923616", "bodyText": "CoreSession session = repository == null ? null : CoreInstance.getCoreSession(repository)", "author": "efge", "createdAt": "2020-05-27T07:51:43Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/action/computation/AbstractBulkComputation.java", "diffHunk": "@@ -137,7 +137,10 @@ protected void processBatchOfDocuments(List<String> batch) {\n                 String username = command.getUsername();\n                 String repository = command.getRepository();\n                 try (NuxeoLoginContext loginContext = loginSystemOrUser(username)) {\n-                    CoreSession session = CoreInstance.getCoreSession(repository);\n+                    CoreSession session = null;\n+                    if (repository != null) {\n+                        session = CoreInstance.getCoreSession(repository);\n+                    }", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNDgyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430924829", "bodyText": "Do we need \"Type\" here (and in the field)?", "author": "efge", "createdAt": "2020-05-27T07:53:48Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -99,6 +103,15 @@ public String getScroller() {\n         return scroller;\n     }\n \n+    /**\n+     * True if the command uses a generic scroller.\n+     *\n+     * @since 11.1\n+     */\n+    public boolean isGenericScrollerType() {", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNTU1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430925551", "bodyText": "public is probably better.", "author": "efge", "createdAt": "2020-05-27T07:55:04Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/GenericScrollRequest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.scroll;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.nuxeo.ecm.core.api.scroll.ScrollRequest;\n+\n+/**\n+ * Generic Scroll Request.\n+ *\n+ * @since 11.1\n+ */\n+public class GenericScrollRequest implements ScrollRequest {\n+\n+    protected static final String SCROLL_TYPE = \"generic\";", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNjIwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430926208", "bodyText": "Map.of()", "author": "efge", "createdAt": "2020-05-27T07:56:07Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/GenericScrollRequest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.scroll;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.nuxeo.ecm.core.api.scroll.ScrollRequest;\n+\n+/**\n+ * Generic Scroll Request.\n+ *\n+ * @since 11.1\n+ */\n+public class GenericScrollRequest implements ScrollRequest {\n+\n+    protected static final String SCROLL_TYPE = \"generic\";\n+\n+    protected final int size;\n+\n+    protected final String query;\n+\n+    protected final String scrollName;\n+\n+    protected final Map<String, Serializable> options;\n+\n+    protected GenericScrollRequest(Builder builder) {\n+        this.query = builder.query;\n+        this.scrollName = builder.scrollerName;\n+        this.size = builder.getSize();\n+        this.options = builder.getOptions();\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return SCROLL_TYPE;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return scrollName;\n+    }\n+\n+    @Override\n+    public int getSize() {\n+        return size;\n+    }\n+\n+    public String getQuery() {\n+        return query;\n+    }\n+\n+    public Map<String, Serializable> getOptions() {\n+        return options;\n+    }\n+\n+    public static Builder builder(String scrollName, String query) {\n+        return new Builder(scrollName, query);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ToStringBuilder.reflectionToString(this);\n+    }\n+\n+    public static class Builder {\n+\n+        public static final int DEFAULT_SCROLL_SIZE = 10;\n+\n+        protected final String query;\n+\n+        protected final String scrollerName;\n+\n+        protected int size;\n+\n+        protected Map<String, Serializable> options;\n+\n+        public Builder(String scrollerName, String query) {\n+            Objects.requireNonNull(scrollerName, \"scrollerName cannot be null\");\n+            Objects.requireNonNull(query, \"query cannot be null\");\n+            this.scrollerName = scrollerName;\n+            this.query = query;\n+        }\n+\n+        public Builder size(int size) {\n+            if (size <= 0) {\n+                throw new IllegalArgumentException(\"size must be > 0\");\n+            }\n+            this.size = size;\n+            return this;\n+        }\n+\n+        public int getSize() {\n+            return size == 0 ? DEFAULT_SCROLL_SIZE : size;\n+        }\n+\n+        public Builder options(Map<String, Serializable> options) {\n+            if (options != null && !options.isEmpty()) {\n+                if (options.containsKey(null)) {\n+                    throw new IllegalArgumentException(\"option key cannot be null\");\n+                }\n+                this.options = options;\n+            }\n+            return this;\n+        }\n+\n+        public Map<String, Serializable> getOptions() {\n+            return options == null ? Collections.emptyMap() : options;", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2NjAwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r431766002", "bodyText": "keeping Collections.emptyMap for homogeneity", "author": "bdelbosc", "createdAt": "2020-05-28T11:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNjIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNjg4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430926885", "bodyText": "I usually add // NOSONAR (doesn't need cryptographic strength) to these to avoid Sonar warnings.", "author": "efge", "createdAt": "2020-05-27T07:57:14Z", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.bulk.action;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.message.BulkStatus.State.COMPLETED;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Random;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.CoreBulkFeature;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreBulkFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.bulk.test:OSGI-INF/test-scroll-contrib.xml\")\n+@Deploy(\"org.nuxeo.ecm.core.bulk.test:OSGI-INF/test-bulk-contrib.xml\")\n+public class TestWordCountAction {\n+\n+    protected Random rand = new Random();", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzM3MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430927370", "bodyText": "new BufferedWriter can go inside the try to avoid the final close()", "author": "efge", "createdAt": "2020-05-27T07:58:03Z", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.bulk.action;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.message.BulkStatus.State.COMPLETED;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Random;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.CoreBulkFeature;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreBulkFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.bulk.test:OSGI-INF/test-scroll-contrib.xml\")\n+@Deploy(\"org.nuxeo.ecm.core.bulk.test:OSGI-INF/test-bulk-contrib.xml\")\n+public class TestWordCountAction {\n+\n+    protected Random rand = new Random();\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void testWordCount() throws Exception {\n+        int wordCount = 2732;\n+        String myFile = createFile(wordCount);\n+        BulkCommand command = new BulkCommand.Builder(WordCountAction.ACTION_NAME,\n+                myFile, \"system\").useGenericScrollerType().build();\n+        String commandId = bulkService.submit(command);\n+        BulkStatus status = bulkService.getStatus(commandId);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertEquals(wordCount, status.getResult().get(\"wordCount\"));\n+        System.out.println(status);\n+    }\n+\n+    protected String createFile(int wordCount) throws IOException {\n+        File tempFile = testFolder.newFile(\"file.txt\");\n+        try (FileWriter fw = new FileWriter(tempFile, true)) {\n+            BufferedWriter bw = new BufferedWriter(fw);", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODIzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430928230", "bodyText": "Can't this be int?", "author": "efge", "createdAt": "2020-05-27T07:59:31Z", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/WordCountAction.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (C) Copyright 2017 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.bulk.action;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.bulk.BulkCodecs;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.core.bulk.message.DataBucket;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+public class WordCountAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(WordCountAction.class);\n+\n+    protected static final String ACTION_NAME = \"testWordCount\";\n+\n+    protected static final String ACTION_STREAM = \"test/wordCount\";\n+\n+    protected static final String AGGREGATOR_STREAM = \"test/countAggregator\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(WordCountComputation::new, Arrays.asList(INPUT_1 + \":\" + ACTION_STREAM, //\n+                               OUTPUT_1 + \":\" + AGGREGATOR_STREAM))\n+                       .addComputation(CountAggregatorComputation::new, Arrays.asList(INPUT_1 + \":\" + AGGREGATOR_STREAM, //\n+                               OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    protected class WordCountComputation extends AbstractBulkComputation {\n+        public WordCountComputation() {\n+            super(\"test/wordCount\");\n+        }\n+\n+        protected Integer count;", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMzc3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r430933773", "bodyText": "Remaining System out.", "author": "kevinleturc", "createdAt": "2020-05-27T08:09:25Z", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.bulk.action;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.message.BulkStatus.State.COMPLETED;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Random;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.CoreBulkFeature;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreBulkFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.bulk.test:OSGI-INF/test-scroll-contrib.xml\")\n+@Deploy(\"org.nuxeo.ecm.core.bulk.test:OSGI-INF/test-bulk-contrib.xml\")\n+public class TestWordCountAction {\n+\n+    protected Random rand = new Random();\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void testWordCount() throws Exception {\n+        int wordCount = 2732;\n+        String myFile = createFile(wordCount);\n+        BulkCommand command = new BulkCommand.Builder(WordCountAction.ACTION_NAME,\n+                myFile, \"system\").useGenericScrollerType().build();\n+        String commandId = bulkService.submit(command);\n+        BulkStatus status = bulkService.getStatus(commandId);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertEquals(wordCount, status.getResult().get(\"wordCount\"));\n+        System.out.println(status);", "originalCommit": "1941673ee83441d7c2d908b5215ecad8ce6f36c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7928ea39aa6eebf4878809a50da58b077febe734", "url": "https://github.com/nuxeo/nuxeo/commit/7928ea39aa6eebf4878809a50da58b077febe734", "message": "NXP-29038: Extend Bulk Service to non document processing\n\nIt is possible to use a Generic Scroller instead of the\ndefault Document (NXQL) scroller.", "committedDate": "2020-05-28T11:38:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTU4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r431865583", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.info(\"Scroll init: {}, size: {]\", file.getAbsolutePath(), size);\n          \n          \n            \n                    log.info(\"Scroll init: {}, size: {}\", file.getAbsolutePath(), size);\n          \n      \n    \n    \n  \n\n?", "author": "troger", "createdAt": "2020-05-28T14:11:35Z", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nxueo/ecm/core/scroll/MyFileScroll.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nxueo.ecm.core.scroll;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.scroll.Scroll;\n+import org.nuxeo.ecm.core.api.scroll.ScrollRequest;\n+import org.nuxeo.ecm.core.scroll.GenericScrollRequest;\n+\n+/**\n+ * Scroll lines of a file, the scroll query is the path of the file.\n+ */\n+public class MyFileScroll implements Scroll {\n+\n+    private static final Logger log = LogManager.getLogger(MyFileScroll.class);\n+\n+    protected LineIterator iterator;\n+\n+    protected int size;\n+\n+    @Override\n+    public void init(ScrollRequest scrollRequest, Map<String, String> map) {\n+        if (!(scrollRequest instanceof GenericScrollRequest)) {\n+            throw new IllegalArgumentException(\n+                    \"Requires a GenericScrollRequest got a \" + scrollRequest.getClass().getCanonicalName());\n+        }\n+        GenericScrollRequest request = (GenericScrollRequest) scrollRequest;\n+        File file = new File(request.getQuery());\n+        size = request.getSize();\n+        try {\n+            iterator = FileUtils.lineIterator(file, \"UTF-8\");\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"Invalid file \" + file, e);\n+        }\n+        log.info(\"Scroll init: {}, size: {]\", file.getAbsolutePath(), size);", "originalCommit": "7928ea39aa6eebf4878809a50da58b077febe734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NzEzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4081#discussion_r431887131", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isGenericScroller() {\n          \n          \n            \n                public boolean useGenericScroller() {\n          \n      \n    \n    \n  \n\n?", "author": "troger", "createdAt": "2020-05-28T14:37:18Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -99,6 +103,15 @@ public String getScroller() {\n         return scroller;\n     }\n \n+    /**\n+     * True if the command uses a generic scroller.\n+     *\n+     * @since 11.1\n+     */\n+    public boolean isGenericScroller() {", "originalCommit": "7928ea39aa6eebf4878809a50da58b077febe734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c0fe511dea4545646da3eab939c405e2d59feeb4", "url": "https://github.com/nuxeo/nuxeo/commit/c0fe511dea4545646da3eab939c405e2d59feeb4", "message": "NXP-29038: Extend Bulk Service to non document processing\n\nIt is possible to use a Generic Scroller instead of the\ndefault Document (NXQL) scroller.", "committedDate": "2020-05-28T14:45:41Z", "type": "commit"}, {"oid": "c0fe511dea4545646da3eab939c405e2d59feeb4", "url": "https://github.com/nuxeo/nuxeo/commit/c0fe511dea4545646da3eab939c405e2d59feeb4", "message": "NXP-29038: Extend Bulk Service to non document processing\n\nIt is possible to use a Generic Scroller instead of the\ndefault Document (NXQL) scroller.", "committedDate": "2020-05-28T14:45:41Z", "type": "forcePushed"}]}