{"pr_number": 3799, "pr_title": "fix-NXP-28702-abstract-json-enricher-fails-to-stop", "pr_createdAt": "2020-02-27T23:03:34Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3799", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r385594890", "bodyText": "I'm wondering... what does log error tb produce? If it's what we currently see in the logs (see below), I don't think it's interesting as the output is truncated anyway.\n[TokenBuffer: START_OBJECT, FIELD_NAME(acls), START_ARRAY, START_OBJECT, FIELD_NAME(name), VALUE_STRING, FIELD_NAME(aces), START_ARRAY, START_OBJECT, FIELD_NAME(id), VALUE_STRING, FIELD_NAME(username), START_OBJECT, FIELD_NAME(entity-type), ...", "author": "troger", "createdAt": "2020-02-28T09:39:05Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -66,19 +68,20 @@ public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n             // Write to a temporary output in case of exception during write()\n             tb.writeStartObject();\n             write(tb, enrichable.getEntity());\n+            tb.writeEndObject();\n             tb.flush();\n             // Add the complete, well-formed content to the real output\n             try (JsonParser parser = tb.asParser()) {\n                 parser.nextToken(); // ignoring START_OBJECT\n-                while (parser.nextToken() == JsonToken.FIELD_NAME) {\n+                while (parser.nextToken() == FIELD_NAME) {\n                     jg.copyCurrentStructure(parser);\n                 }\n-                if (parser.currentToken() != null) {\n-                    log.error(\"Enricher {} returned invalid output {}\", name, tb.toString());\n+                if (parser.currentToken() != END_OBJECT) {\n+                    log.error(\"Enricher: {} failed on current token: {}, output: {}\", name, parser.currentToken(), tb);", "originalCommit": "c0201024f5f44bfd943b8e81b2652de699bd0624", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNjk2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r385606961", "bodyText": "Yes this is the output of tb which can be verbose for not much value indeed.\n(The case in which it can help is if the output is not long enough to be truncated so we can see what other enrichment was already written before)\nI let you decide!\nIndeed just a list of enums", "author": "NourNuxeo", "createdAt": "2020-02-28T10:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczMTEwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r385731101", "bodyText": "Now we can see the temporary json content we were trying to write\nif (parser.currentToken() != END_OBJECT) {\n    log.error(\"Enricher: {} failed on current token: {}, output to write: {}\", name,\n    parser.currentToken(), MAPPER.readTree(tb.asParser()));\n}", "author": "NourNuxeo", "createdAt": "2020-02-28T14:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3Mjc2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r385772760", "bodyText": "As it may be costly (?) what about logging the whole JSON in debug only? WDYT @kevinleturc @efge?\nAnyway, you should use method references/lambda when logging \"costly\" stuff:\n() -> MAPPER.readTree(tb.asParser())", "author": "troger", "createdAt": "2020-02-28T15:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDcwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r385790708", "bodyText": "readTree has many signatures, it can't be used as a functional interface.\nIf I wrap the call in a Supplier i need to try/catch the exceptions it throws:\nif (parser.currentToken() != null) {\n    Supplier<String> s = () -> {\n        try {\n            return MAPPER.readTree(tb.asParser()).toString();\n        } catch (IOException e) {\n            log.error(\"Failed to read content, Enricher: {}\", name, e);\n            return \"\";\n        }\n    };\n    log.error(\"Enricher: {} failed on current token: {}, output to write: {}\", name::toString,\n          parser::currentToken, s::get);\n}", "author": "NourNuxeo", "createdAt": "2020-02-28T16:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzNjg5Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r385836892", "bodyText": "Since all this is happening in case of error, the condition of failing is acting as a guard.\nWhich means the expensive logging will only happen in case it is needed and the code would stay simple.", "author": "NourNuxeo", "createdAt": "2020-02-28T17:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODIxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r386098210", "bodyText": "Yes it's ok to have a slow path in error cases. Make the code simple.", "author": "efge", "createdAt": "2020-03-01T11:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2NzQyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r386967421", "bodyText": "I agree with @troger, as it's a valide usage we may have a lot of logs such as it. Apart from Java performance issue, we could have a lot of long logs, which may have an impact on logs aggregator.\nFurthermore, and also as a separate topic, I would try/catch the readTree call as we're handling invalid stuff this call can crash too.", "author": "kevinleturc", "createdAt": "2020-03-03T11:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MjQ0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r386982442", "bodyText": "@kevinleturc you're saying we expect to have a lot of exceptions thrown by enrichers? Or enrichers emitting invalid JSON? Why?\n+1 on the readTree protection", "author": "efge", "createdAt": "2020-03-03T12:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNDI4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r387014283", "bodyText": "@kevinleturc you're saying we expect to have a lot of exceptions thrown by enrichers? Or enrichers emitting invalid JSON? Why?\n\nAfter re-checking code it's indeed a specific code block that may not be executed in all failure cases and especially not in the case we want to cover.", "author": "kevinleturc", "createdAt": "2020-03-03T13:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNTEzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r387605131", "bodyText": "Furthermore, and also as a separate topic, I would try/catch the readTree call as we're handling invalid stuff this call can crash too.\n\nIt is catched in the main catch appended to the try resource. Or do you mean a sub catch close just at the logging instruction to be more specific in error handling ?", "author": "NourNuxeo", "createdAt": "2020-03-04T11:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxMTgxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r387611819", "bodyText": "I meant a sub catch indeed.", "author": "kevinleturc", "createdAt": "2020-03-04T11:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4ODUwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r387688501", "bodyText": "OK then to avoid nesting a try catch again (sonar unhappy), I first made a protected method to readTree within a try/catch.\nBut then It felt like even more cumbersome than going with the Supplier. So I went with the Supplier which allows the performance gain.", "author": "NourNuxeo", "createdAt": "2020-03-04T14:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDg5MA=="}], "type": "inlineReview"}, {"oid": "776ac28ab4c0f8b9d012e7f9e5c7f56afe17c5e2", "url": "https://github.com/nuxeo/nuxeo/commit/776ac28ab4c0f8b9d012e7f9e5c7f56afe17c5e2", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-02-28T09:59:54Z", "type": "forcePushed"}, {"oid": "afa43cfd7def5c558bf8a4979e8acca513420618", "url": "https://github.com/nuxeo/nuxeo/commit/afa43cfd7def5c558bf8a4979e8acca513420618", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-02-28T10:39:28Z", "type": "forcePushed"}, {"oid": "a24c16fc02da6d2399f685b062a2739f6b50176a", "url": "https://github.com/nuxeo/nuxeo/commit/a24c16fc02da6d2399f685b062a2739f6b50176a", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-02-28T14:39:19Z", "type": "forcePushed"}, {"oid": "9be547fd9b15fdeb7b56baa76713bd31a9ce1091", "url": "https://github.com/nuxeo/nuxeo/commit/9be547fd9b15fdeb7b56baa76713bd31a9ce1091", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-03-02T06:51:14Z", "type": "forcePushed"}, {"oid": "173f4712f23f2272ff7b6a7ecadafeb3bc49e392", "url": "https://github.com/nuxeo/nuxeo/commit/173f4712f23f2272ff7b6a7ecadafeb3bc49e392", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-03-04T14:08:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTIxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r387691213", "bodyText": "Could you extract the Supplier as a protected method? You'll be able to call it as a lambda with (note this is optional):\n() -> this.safeReadBuffer(tb)\n\nI prefer a method here because it's more readable and have the same number of line than the supplier declaration.\nIMHO, one valid Supplier as variable case is when:\n\nsupplier doesn't use curly brackets\nthe lambda makes the code format ugly", "author": "kevinleturc", "createdAt": "2020-03-04T14:13:40Z", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -66,24 +70,33 @@ public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n             // Write to a temporary output in case of exception during write()\n             tb.writeStartObject();\n             write(tb, enrichable.getEntity());\n+            tb.writeEndObject();\n             tb.flush();\n             // Add the complete, well-formed content to the real output\n             try (JsonParser parser = tb.asParser()) {\n                 parser.nextToken(); // ignoring START_OBJECT\n-                while (parser.nextToken() == JsonToken.FIELD_NAME) {\n+                while (parser.nextToken() == FIELD_NAME) {\n                     jg.copyCurrentStructure(parser);\n                 }\n-                if (parser.currentToken() != null) {\n-                    log.error(\"Enricher {} returned invalid output {}\", name, tb.toString());\n+                Supplier<String> supplier = () -> {\n+                    try {\n+                        return MAPPER.readTree(tb.asParser());\n+                    } catch (IOException e) {\n+                        return \"malformed content could not be retrieved\";\n+                    }\n+                };\n+                if (parser.currentToken() != END_OBJECT) {\n+                    log.error(\"Enricher: {} failed on current token: {}, output to write: {}\", name::toString,\n+                            parser::currentToken, supplier::get);", "originalCommit": "173f4712f23f2272ff7b6a7ecadafeb3bc49e392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMzE2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3799#discussion_r387703163", "bodyText": "I did it but removed the \"this.\" part as we are calling it in the context of a lambda", "author": "NourNuxeo", "createdAt": "2020-03-04T14:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MTIxMw=="}], "type": "inlineReview"}, {"oid": "b99538a05bf1267f795ee491a573c3f0bae52220", "url": "https://github.com/nuxeo/nuxeo/commit/b99538a05bf1267f795ee491a573c3f0bae52220", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-03-04T14:30:56Z", "type": "commit"}, {"oid": "b99538a05bf1267f795ee491a573c3f0bae52220", "url": "https://github.com/nuxeo/nuxeo/commit/b99538a05bf1267f795ee491a573c3f0bae52220", "message": "NXP-28702: fix json AbstractJsonEnricher parsing", "committedDate": "2020-03-04T14:30:56Z", "type": "forcePushed"}]}