{"pr_number": 4377, "pr_title": "Feature NXP-27756 Domain Events", "pr_createdAt": "2020-10-12T15:56:59Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4377", "timeline": [{"oid": "079e2771013745b7bf4329187da9ac2f7171c2b9", "url": "https://github.com/nuxeo/nuxeo/commit/079e2771013745b7bf4329187da9ac2f7171c2b9", "message": "NXP-27756: Temporary add confluent maven repo\n\nTo be removed once repo is proxied NCI-125", "committedDate": "2020-10-13T10:13:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjY0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r503392640", "bodyText": "Could it be moved next to other XP declarations?", "author": "kevinleturc", "createdAt": "2020-10-12T16:02:28Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/EventServiceComponent.java", "diffHunk": "@@ -49,6 +50,9 @@\n \n     public static final long DEFAULT_SHUTDOWN_TIMEOUT = Duration.ofSeconds(5).toMillis();\n \n+    // @since 11.4\n+    public static final String DOMAIN_EVENT_PRODUCER_XP = \"domainEventProducer\";", "originalCommit": "cc6881766c717a4c5d1412bb4f38bf06ee931cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwNDcxMw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r503904713", "bodyText": "What do you think about using the common registry, delegate registration to DefaultComponent#register(String, Descriptor) and gives an immutable list to the service during the start phase?", "author": "kevinleturc", "createdAt": "2020-10-13T12:21:20Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/impl/EventServiceImpl.java", "diffHunk": "@@ -115,6 +123,12 @@ void push(Event event) {\n \n     protected EventBundleDispatcher pipeDispatcher;\n \n+    // @since 11.4\n+    protected DescriptorRegistry domainEventProducers = new DescriptorRegistry();", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQyOTU4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r506429586", "bodyText": "maybe to rework once NXP-29768 is merged", "author": "bdelbosc", "createdAt": "2020-10-16T13:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwNDcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwNTk3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r503905974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<DomainEventProducer> ret = new ArrayList<>(descriptors.size());\n          \n          \n            \n                    descriptors.forEach(descriptor -> {\n          \n          \n            \n                        DomainEventProducer producer = descriptor.newInstance();\n          \n          \n            \n                        ret.add(producer);\n          \n          \n            \n                    });\n          \n          \n            \n                    return ret;\n          \n          \n            \n                    return descriptors.stream()\n          \n          \n            \n                                      .map(DomainEventProducerDescriptor::newInstance)\n          \n          \n            \n                                      .collect(Collectors.toList());", "author": "kevinleturc", "createdAt": "2020-10-13T12:23:19Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/impl/EventServiceImpl.java", "diffHunk": "@@ -558,4 +591,41 @@ protected void handleTxCommited() {\n         }\n     }\n \n+    @Override\n+    public List<DomainEventProducer> createDomainEventProducers() {\n+        // TODO: optimize this by keeping an immutable list\n+        List<DomainEventProducerDescriptor> descriptors = domainEventProducers.getDescriptors(REGISTRY_TARGET_NAME,\n+                EventServiceComponent.DOMAIN_EVENT_PRODUCER_XP);\n+        List<DomainEventProducer> ret = new ArrayList<>(descriptors.size());\n+        descriptors.forEach(descriptor -> {\n+            DomainEventProducer producer = descriptor.newInstance();\n+            ret.add(producer);\n+        });\n+        return ret;", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMjgwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504532806", "bodyText": "Don't we need a message? something like \"Unable to instantiate DomainEventProducer with name: \" + name?", "author": "kevinleturc", "createdAt": "2020-10-14T09:25:27Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducerDescriptor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XNodeMap;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.runtime.model.Descriptor;\n+import org.nuxeo.runtime.stream.StreamProcessorDescriptor;\n+\n+/**\n+ * Defines a Domain Event Producer\n+ *\n+ * @since 11.4\n+ */\n+@XObject(\"domainEventProducer\")\n+public class DomainEventProducerDescriptor implements Descriptor {\n+\n+    @XNode(\"@name\")\n+    protected String name;\n+\n+    @XNode(\"@enabled\")\n+    protected boolean isEnabled = true;\n+\n+    @XNode(\"@class\")\n+    protected Class<? extends DomainEventProducer> domainEventProducerClass;\n+\n+    @XNodeMap(value = \"option\", key = \"@name\", type = HashMap.class, componentType = String.class)\n+    public Map<String, String> options = new HashMap<>();\n+\n+    @XNode(\"stream\")\n+    protected StreamProcessorDescriptor.StreamDescriptor stream;\n+\n+    @Override\n+    public String getId() {\n+        return name;\n+    }\n+\n+    public boolean isEnabled() {\n+        return isEnabled;\n+    }\n+\n+    public void setEnabled(boolean isEnabled) {\n+        this.isEnabled = isEnabled;\n+    }\n+\n+    public DomainEventProducer newInstance() {\n+        try {\n+            return domainEventProducerClass.getDeclaredConstructor(String.class, String.class)\n+                                           .newInstance(name, stream.name);\n+        } catch (ReflectiveOperationException e) {\n+            throw new NuxeoException(e);", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNTYyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504535621", "bodyText": "Missing a new line.", "author": "kevinleturc", "createdAt": "2020-10-14T09:30:00Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-audit/src/main/java/org/nuxeo/elasticsearch/audit/ESExtendedInfo.java", "diffHunk": "@@ -21,7 +21,7 @@\n import java.io.Serializable;\n \n import org.nuxeo.ecm.platform.audit.api.ExtendedInfo;\n-\n+import com.fasterxml.jackson.annotation.JsonIgnore;", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODIyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504538229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected @Inject CoreSession repo;\n          \n          \n            \n                @Inject\n          \n          \n            \n                protected CoreSession repo;", "author": "kevinleturc", "createdAt": "2020-10-14T09:34:22Z", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestAuditDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *    bdelbosc\n+ */\n+\n+package org.nuxeo.ecm.platform.audit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.platform.audit.api.AuditReader;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Deploy(\"org.nuxeo.ecm.platform.audit.tests:test-domain-event-producer-contrib.xml\")\n+@RunWith(FeaturesRunner.class)\n+@Features(AuditFeature.class)\n+public class TestAuditDomainEventProducer {\n+    protected static final Log log = LogFactory.getLog(TestAuditDomainEventProducer.class);\n+\n+    protected @Inject CoreSession repo;", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODM2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504538367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TransactionalFeature txFeature;\n          \n          \n            \n                protected TransactionalFeature txFeature;", "author": "kevinleturc", "createdAt": "2020-10-14T09:34:33Z", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestAuditDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *    bdelbosc\n+ */\n+\n+package org.nuxeo.ecm.platform.audit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.platform.audit.api.AuditReader;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Deploy(\"org.nuxeo.ecm.platform.audit.tests:test-domain-event-producer-contrib.xml\")\n+@RunWith(FeaturesRunner.class)\n+@Features(AuditFeature.class)\n+public class TestAuditDomainEventProducer {\n+    protected static final Log log = LogFactory.getLog(TestAuditDomainEventProducer.class);\n+\n+    protected @Inject CoreSession repo;\n+\n+    @Inject\n+    TransactionalFeature txFeature;", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTQxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504539416", "bodyText": "Do we want to keep the TransactionHelper calls since it is done by the transactional feature?", "author": "kevinleturc", "createdAt": "2020-10-14T09:36:11Z", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestAuditDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *    bdelbosc\n+ */\n+\n+package org.nuxeo.ecm.platform.audit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.platform.audit.api.AuditReader;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Deploy(\"org.nuxeo.ecm.platform.audit.tests:test-domain-event-producer-contrib.xml\")\n+@RunWith(FeaturesRunner.class)\n+@Features(AuditFeature.class)\n+public class TestAuditDomainEventProducer {\n+    protected static final Log log = LogFactory.getLog(TestAuditDomainEventProducer.class);\n+\n+    protected @Inject CoreSession repo;\n+\n+    @Inject\n+    TransactionalFeature txFeature;\n+\n+    public void waitForAsyncCompletion() {\n+        txFeature.nextTransaction(Duration.ofSeconds(20));\n+    }\n+\n+    @Before\n+    public void isInjected() {\n+        assertNotNull(repo);\n+    }\n+\n+    @Test\n+    public void testAuditDomainEventProducer() {\n+        StreamService streamService = Framework.getService(StreamService.class);\n+        LogLag lag = streamService.getLogManager().getLag(Name.ofUrn(\"source/audit\"), Name.ofUrn(\"test/reader\"));\n+        // Initializing the repository emits some audit events\n+        assertTrue(lag.lag() > 0);\n+\n+        // generate events\n+        DocumentModel doc = repo.createDocumentModel(\"/\", \"a-file\", \"File\");\n+        doc = repo.createDocument(doc);\n+        TransactionHelper.commitOrRollbackTransaction();\n+        TransactionHelper.startTransaction();\n+        waitForAsyncCompletion();", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDE2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504544167", "bodyText": "For the CI and the parallel test runs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TemporaryFolder folder = new TemporaryFolder();\n          \n          \n            \n                public TemporaryFolder folder = new TemporaryFolder(new File(FeaturesRunner.getBuildDirectory()));", "author": "kevinleturc", "createdAt": "2020-10-14T09:43:59Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDkwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504544908", "bodyText": "To remove?", "author": "kevinleturc", "createdAt": "2020-10-14T09:45:09Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    public static final String SCHEMA_REGISTRY_URL_PROP = \"confluent.schema_registry.urls\";\n+\n+    public static final String SCHEMA_REGISTRY_URL_DEFAULT = \"http://localhost:8081\";\n+\n+    protected final Codec<TestMessage> messageCodec = Framework.getService(CodecService.class).getCodec(\"avroBinary\", TestMessage.class);\n+\n+    public static void assumeConfluentRegistryEnabled() {\n+        Assume.assumeTrue(\"Skip Confluent tests\", \"true\".equals(System.getProperty(\"confluent\")));\n+    }\n+\n+    public static String getConfluentRegistryUrls() {\n+        String url = System.getProperty(SCHEMA_REGISTRY_URL_PROP, SCHEMA_REGISTRY_URL_DEFAULT);\n+        if (url == null || url.isEmpty()) {\n+            url = SCHEMA_REGISTRY_URL_DEFAULT;\n+        }\n+        return url;\n+    }\n+\n+    @Test\n+    public void testAvroRecordCodec() throws Exception {\n+        assumeConfluentRegistryEnabled();\n+\n+        Record src = getRecord();\n+        // Codec<Record> codec = new AvroRecordCodec<>(TestMessage.class.getName(), getConfluentRegistryUrls());\n+        Codec<Record> codec = Framework.getService(CodecService.class).getCodec(\"testMessageFlat\", Record.class);\n+\n+        byte[] data = codec.encode(src);\n+        // System.out.println(\"msg : \" + src.getData().length + \" \" + overview(src.getData()));\n+        // System.out.println(\"rec+msg: \" + data.length + \" \" + overview(data));", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwOTcyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r506409725", "bodyText": "it could be handy for debug/test, I prefer to keep it", "author": "bdelbosc", "createdAt": "2020-10-16T13:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NDkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTc5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504545798", "bodyText": "Is it for deserialization? Maybe it's worth to mention it and make the constructor protected?", "author": "kevinleturc", "createdAt": "2020-10-14T09:46:24Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestMessage.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @since 11.4\n+ */\n+class TestMessage {\n+    protected String stringF1;\n+\n+    protected Long longF2;\n+\n+    protected boolean boolF3;\n+\n+    public TestMessage() {\n+        // required", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NjMxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r504546310", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this == o)\n          \n          \n            \n                        return true;\n          \n          \n            \n                    if (o == null || getClass() != o.getClass())\n          \n          \n            \n                        return false;\n          \n          \n            \n                    TestMessage that = (TestMessage) o;\n          \n          \n            \n                    if (this == o) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (o == null || getClass() != o.getClass()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    TestMessage that = (TestMessage) o;", "author": "kevinleturc", "createdAt": "2020-10-14T09:47:13Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestMessage.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @since 11.4\n+ */\n+class TestMessage {\n+    protected String stringF1;\n+\n+    protected Long longF2;\n+\n+    protected boolean boolF3;\n+\n+    public TestMessage() {\n+        // required\n+    }\n+\n+    public TestMessage(String stringF1, Long longF2, boolean boolF3) {\n+        this.stringF1 = stringF1;\n+        this.longF2 = longF2;\n+        this.boolF3 = boolF3;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        TestMessage that = (TestMessage) o;", "originalCommit": "079e2771013745b7bf4329187da9ac2f7171c2b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7adc20da41cb2478a15e17354bff7a966f0ff350", "url": "https://github.com/nuxeo/nuxeo/commit/7adc20da41cb2478a15e17354bff7a966f0ff350", "message": "NXP-27758: Add an AuditDomainEventProducer", "committedDate": "2020-10-13T10:13:35Z", "type": "forcePushed"}, {"oid": "96145bd48db4d20c4cb0279d94838db952745843", "url": "https://github.com/nuxeo/nuxeo/commit/96145bd48db4d20c4cb0279d94838db952745843", "message": "NXP-27758: Add an AuditDomainEventProducer", "committedDate": "2020-10-16T13:27:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2Njc0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507766740", "bodyText": "protected?", "author": "troger", "createdAt": "2020-10-19T13:56:19Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducerDescriptor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XNodeMap;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.runtime.model.Descriptor;\n+import org.nuxeo.runtime.stream.StreamProcessorDescriptor;\n+\n+/**\n+ * Defines a Domain Event Producer\n+ *\n+ * @since 11.4\n+ */\n+@XObject(\"domainEventProducer\")\n+public class DomainEventProducerDescriptor implements Descriptor {\n+\n+    @XNode(\"@name\")\n+    protected String name;\n+\n+    @XNode(\"@enabled\")\n+    protected boolean isEnabled = true;\n+\n+    @XNode(\"@class\")\n+    protected Class<? extends DomainEventProducer> domainEventProducerClass;\n+\n+    @XNodeMap(value = \"option\", key = \"@name\", type = HashMap.class, componentType = String.class)\n+    public Map<String, String> options = new HashMap<>();", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2OTQ1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507769457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.error(\"Unable to register synchronization : no TransactionManager\");\n          \n          \n            \n                            log.error(\"Unable to register synchronization: no TransactionManager\");", "author": "troger", "createdAt": "2020-10-19T13:59:03Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducerListener.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.StreamManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * Dispatches core events to domain event producers.\n+ *\n+ * @since 11.4\n+ */\n+public class DomainEventProducerListener implements EventListener, Synchronization {\n+    private static final Logger log = LogManager.getLogger(DomainEventProducerListener.class);\n+\n+    protected static final ThreadLocal<Boolean> isEnlisted = ThreadLocal.withInitial(() -> Boolean.FALSE);\n+\n+    protected static final ThreadLocal<List<DomainEventProducer>> producers = ThreadLocal.withInitial(ArrayList::new);\n+\n+    @Override\n+    public void handleEvent(Event event) {\n+        if (!Boolean.TRUE.equals(isEnlisted.get())) {\n+            isEnlisted.set(registerSynchronization(this));\n+            log.debug(\"Enlisted to transaction\");\n+            initDomainEventProducers();\n+        }\n+\n+        producers.get().forEach(producer -> producer.addEvent(event));\n+\n+        if (!Boolean.TRUE.equals(isEnlisted.get())) {\n+            // there is no transaction so don't wait for a commit\n+            afterCompletion(Status.STATUS_COMMITTED);\n+        }\n+    }\n+\n+    protected void initDomainEventProducers() {\n+        producers.set(Framework.getService(EventService.class).createDomainEventProducers());\n+    }\n+\n+    protected void cleanDomainEventProducers() {\n+        producers.remove();\n+    }\n+\n+    @Override\n+    public void beforeCompletion() {\n+        log.debug(\"beforeCompletion\");\n+    }\n+\n+    @Override\n+    public void afterCompletion(int status) {\n+        try {\n+            log.debug(\"afterCompletion {}\", status);\n+            produceDomainEvents();\n+        } finally {\n+            isEnlisted.set(false);\n+            cleanDomainEventProducers();\n+        }\n+    }\n+\n+    protected void produceDomainEvents() {\n+        StreamService streamService = Framework.getService(StreamService.class);\n+        for (DomainEventProducer producer : producers.get()) {\n+            List<Record> records = producer.getDomainEvents();\n+            if (records.isEmpty()) {\n+                continue;\n+            }\n+            log.debug(\"Writing domain events\");\n+            StreamManager streamManager = streamService.getStreamManager();\n+            String stream = producer.getStream();\n+            records.forEach(record -> streamManager.append(stream, record));\n+        }\n+    }\n+\n+    protected boolean registerSynchronization(Synchronization sync) {\n+        try {\n+            TransactionManager tm = TransactionHelper.lookupTransactionManager();\n+            if (tm != null) {\n+                if (tm.getTransaction() != null) {\n+                    tm.getTransaction().registerSynchronization(sync);\n+                    return true;\n+                }\n+                return false;\n+            } else {\n+                log.error(\"Unable to register synchronization : no TransactionManager\");", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NDc5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507774794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.info(\"Create \" + name + \" on \" + stream);\n          \n          \n            \n                    log.info(\"Create {} on {}\", name, stream);", "author": "troger", "createdAt": "2020-10-19T14:05:02Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/stream/MyDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * @since 11.4\n+ */\n+public class MyDomainEventProducer extends DomainEventProducer {\n+    private static final Logger log = LogManager.getLogger(MyDomainEventProducer.class);\n+\n+    List<Record> records = new ArrayList<>();\n+\n+    public MyDomainEventProducer(String name, String stream) {\n+        super(name, stream);\n+        log.info(\"Create \" + name + \" on \" + stream);", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NTAxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507775018", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.info(\"Receive \" + event.getName());\n          \n          \n            \n                    log.info(\"Receive {}\", event.getName());", "author": "troger", "createdAt": "2020-10-19T14:05:14Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/stream/MyDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * @since 11.4\n+ */\n+public class MyDomainEventProducer extends DomainEventProducer {\n+    private static final Logger log = LogManager.getLogger(MyDomainEventProducer.class);\n+\n+    List<Record> records = new ArrayList<>();\n+\n+    public MyDomainEventProducer(String name, String stream) {\n+        super(name, stream);\n+        log.info(\"Create \" + name + \" on \" + stream);\n+    }\n+\n+    @Override\n+    public void addEvent(Event event) {\n+        log.info(\"Receive \" + event.getName());", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NTMxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507775317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.info(\"Returns \" + records.size() + \" records\");\n          \n          \n            \n                    log.info(\"Returns {} records\", records.size());", "author": "troger", "createdAt": "2020-10-19T14:05:32Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/stream/MyDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * @since 11.4\n+ */\n+public class MyDomainEventProducer extends DomainEventProducer {\n+    private static final Logger log = LogManager.getLogger(MyDomainEventProducer.class);\n+\n+    List<Record> records = new ArrayList<>();\n+\n+    public MyDomainEventProducer(String name, String stream) {\n+        super(name, stream);\n+        log.info(\"Create \" + name + \" on \" + stream);\n+    }\n+\n+    @Override\n+    public void addEvent(Event event) {\n+        log.info(\"Receive \" + event.getName());\n+        records.add(Record.of(event.getName(), event.toString().getBytes(UTF_8)));\n+    }\n+\n+    @Override\n+    public List<Record> getDomainEvents() {\n+        log.info(\"Returns \" + records.size() + \" records\");", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMDI5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507810293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String RECORD_FLAG = \"recordFlag\";\n          \n          \n            \n                public static final String RECORD_FLAGS = \"recordFlags\";\n          \n      \n    \n    \n  \n\n?", "author": "troger", "createdAt": "2020-10-19T14:43:06Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/codec/AvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.codec;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.message.RawMessageDecoder;\n+import org.apache.avro.message.RawMessageEncoder;\n+import org.apache.avro.reflect.ReflectData;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.StreamRuntimeException;\n+import org.nuxeo.lib.stream.codec.AvroConfluentCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+\n+/**\n+ * Instead of having an avro Record envelop that contains a data encoded in Avro, this structure is a flat Avro message\n+ * joining schemas of the Record and data.\n+ *\n+ * This encoding can then be read by any Confluent Avro reader.\n+ *\n+ * @since 11.4\n+ */\n+public class AvroRecordCodec<T extends Record> implements Codec<T> {\n+    private static final Logger log = LogManager.getLogger(AvroRecordCodec.class);\n+\n+    public static final String NAME = \"avroRecord\";\n+\n+    public static final String RECORD_KEY = \"recordKey\";\n+\n+    public static final String RECORD_WATERMARK = \"recordWatermark\";\n+\n+    public static final String RECORD_TIMESTAMP = \"recordTimestamp\";\n+\n+    public static final String RECORD_FLAG = \"recordFlag\";", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxNDg1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507814853", "bodyText": "needed?", "author": "troger", "createdAt": "2020-10-19T14:48:50Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder(new File(FeaturesRunner.getBuildDirectory()));\n+\n+    public static final String SCHEMA_REGISTRY_URL_PROP = \"confluent.schema_registry.urls\";\n+\n+    public static final String SCHEMA_REGISTRY_URL_DEFAULT = \"http://localhost:8081\";\n+\n+    protected final Codec<TestMessage> messageCodec = Framework.getService(CodecService.class).getCodec(\"avroBinary\", TestMessage.class);\n+\n+    public static void assumeConfluentRegistryEnabled() {\n+        Assume.assumeTrue(\"Skip Confluent tests\", \"true\".equals(System.getProperty(\"confluent\")));\n+    }\n+\n+    public static String getConfluentRegistryUrls() {\n+        String url = System.getProperty(SCHEMA_REGISTRY_URL_PROP, SCHEMA_REGISTRY_URL_DEFAULT);\n+        if (url == null || url.isEmpty()) {\n+            url = SCHEMA_REGISTRY_URL_DEFAULT;\n+        }\n+        return url;\n+    }\n+\n+    @Test\n+    public void testAvroRecordCodec() throws Exception {\n+        assumeConfluentRegistryEnabled();\n+\n+        Record src = getRecord();\n+        // Codec<Record> codec = new AvroRecordCodec<>(TestMessage.class.getName(), getConfluentRegistryUrls());", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MjY4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507682686", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n          \n          \n            \n             * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.", "author": "ataillefer", "createdAt": "2020-10-19T11:48:31Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/codec/AvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MzE0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507683143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Instead of having an avro Record envelop that contains a data encoded in Avro, this structure is a flat Avro message\n          \n          \n            \n             * Instead of having an Avro Record envelop that contains a data encoded in Avro, this structure is a flat Avro message", "author": "ataillefer", "createdAt": "2020-10-19T11:49:22Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/codec/AvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.codec;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.message.RawMessageDecoder;\n+import org.apache.avro.message.RawMessageEncoder;\n+import org.apache.avro.reflect.ReflectData;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.StreamRuntimeException;\n+import org.nuxeo.lib.stream.codec.AvroConfluentCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+\n+/**\n+ * Instead of having an avro Record envelop that contains a data encoded in Avro, this structure is a flat Avro message", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MzI4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507683282", "bodyText": "missing newline", "author": "ataillefer", "createdAt": "2020-10-19T11:49:39Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/codec/AvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.codec;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.message.RawMessageDecoder;\n+import org.apache.avro.message.RawMessageEncoder;\n+import org.apache.avro.reflect.ReflectData;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.StreamRuntimeException;\n+import org.nuxeo.lib.stream.codec.AvroConfluentCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+\n+/**\n+ * Instead of having an avro Record envelop that contains a data encoded in Avro, this structure is a flat Avro message\n+ * joining schemas of the Record and data.\n+ *\n+ * This encoding can then be read by any Confluent Avro reader.\n+ *\n+ * @since 11.4\n+ */\n+public class AvroRecordCodec<T extends Record> implements Codec<T> {", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NTA1MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508365050", "bodyText": "I think we already discussed this point, this is not enforced by our indentation rules", "author": "bdelbosc", "createdAt": "2020-10-20T09:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MzI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NDEwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507684102", "bodyText": "maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.trace(\"GR: {}\", rec);\n          \n          \n            \n                        log.trace(\"GenericRecord: {}\", rec);", "author": "ataillefer", "createdAt": "2020-10-19T11:51:07Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/codec/AvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.codec;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.SchemaBuilder;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.message.RawMessageDecoder;\n+import org.apache.avro.message.RawMessageEncoder;\n+import org.apache.avro.reflect.ReflectData;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.StreamRuntimeException;\n+import org.nuxeo.lib.stream.codec.AvroConfluentCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+\n+import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+\n+/**\n+ * Instead of having an avro Record envelop that contains a data encoded in Avro, this structure is a flat Avro message\n+ * joining schemas of the Record and data.\n+ *\n+ * This encoding can then be read by any Confluent Avro reader.\n+ *\n+ * @since 11.4\n+ */\n+public class AvroRecordCodec<T extends Record> implements Codec<T> {\n+    private static final Logger log = LogManager.getLogger(AvroRecordCodec.class);\n+\n+    public static final String NAME = \"avroRecord\";\n+\n+    public static final String RECORD_KEY = \"recordKey\";\n+\n+    public static final String RECORD_WATERMARK = \"recordWatermark\";\n+\n+    public static final String RECORD_TIMESTAMP = \"recordTimestamp\";\n+\n+    public static final String RECORD_FLAG = \"recordFlag\";\n+\n+    protected final Schema schema;\n+\n+    protected final int schemaId;\n+\n+    protected final Schema messageSchema;\n+\n+    protected final int messageSchemaId;\n+\n+    protected final RawMessageDecoder<GenericRecord> messageDecoder;\n+\n+    protected final RawMessageEncoder<GenericRecord> messageEncoder;\n+\n+    protected final KafkaAvroSerializer serializer;\n+\n+    protected final RawMessageEncoder<GenericRecord> encoder;\n+\n+    protected final SchemaRegistryClient client;\n+\n+    public AvroRecordCodec(Schema messageSchema, String schemaRegistryUrls) {\n+        this.messageSchema = messageSchema;\n+        this.client = AvroConfluentCodec.getRegistryClient(schemaRegistryUrls);\n+        this.serializer = new KafkaAvroSerializer(client);\n+        // extends the schema to support record fields\n+        this.schema = addRecordFieldsToSchema(messageSchema);\n+        log.trace(\"msg schema: {}\", () -> this.messageSchema.toString(true));\n+        log.trace(\"rec + msg schema: {}\", () -> this.schema.toString(true));\n+        // register schemas\n+        try {\n+            this.messageSchemaId = client.register(messageSchema.getName(), messageSchema);\n+            this.schemaId = client.register(schema.getName(), schema);\n+        } catch (RestClientException | IOException e) {\n+            throw new StreamRuntimeException(e);\n+        }\n+        // create encoder and decoder\n+        this.encoder = new RawMessageEncoder<>(GenericData.get(), schema);\n+        this.messageDecoder = new RawMessageDecoder<>(GenericData.get(), messageSchema);\n+        this.messageEncoder = new RawMessageEncoder<>(GenericData.get(), messageSchema);\n+    }\n+\n+    public AvroRecordCodec(String messageClassName, String schemaRegistryUrls) throws ClassNotFoundException {\n+        this(ReflectData.get().getSchema(Class.forName(messageClassName)), schemaRegistryUrls);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public byte[] encode(T record) {\n+        try {\n+            // decode the message as generic record\n+            GenericRecord message = messageDecoder.decode(record.getData(), null);\n+            // Create a new generic record that contains both record and message fields\n+            GenericRecord newRecord = createRecordFromMessage(message);\n+            // populate record fields\n+            newRecord.put(RECORD_KEY, record.getKey());\n+            newRecord.put(RECORD_WATERMARK, record.getWatermark());\n+            newRecord.put(RECORD_TIMESTAMP, Watermark.ofValue(record.getWatermark()).getTimestamp());\n+            newRecord.put(RECORD_FLAG, Byte.valueOf(record.getFlagsAsByte()).intValue());\n+            // encode\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            out.write(AvroConfluentCodec.MAGIC_BYTE);\n+            try {\n+                out.write(ByteBuffer.allocate(AvroConfluentCodec.ID_SIZE).putInt(schemaId).array());\n+                out.write(encoder.encode(newRecord).array());\n+            } catch (IOException e) {\n+                throw new StreamRuntimeException(e);\n+            }\n+            return out.toByteArray();\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    protected GenericRecord createRecordFromMessage(GenericRecord message) {\n+        GenericData.Record ret = new GenericData.Record(schema);\n+        for (Schema.Field field : message.getSchema().getFields()) {\n+            Object value = message.get(field.pos());\n+            ret.put(field.name(), value);\n+        }\n+        return ret;\n+    }\n+\n+    protected Schema addRecordFieldsToSchema(Schema schema) {\n+        List<Schema.Field> fields = new ArrayList<>();\n+        for (Schema.Field field : schema.getFields()) {\n+            fields.add(new Schema.Field(field.name(), field.schema(), field.doc(), field.defaultVal()));\n+        }\n+        fields.add(new Schema.Field(RECORD_KEY, SchemaBuilder.builder().stringType(), \"record key\", null));\n+        fields.add(new Schema.Field(RECORD_WATERMARK, SchemaBuilder.builder().longType(), \"record watermark\", 0L));\n+        fields.add(new Schema.Field(RECORD_TIMESTAMP, SchemaBuilder.builder().longType(), \"record timestamp\", 0L));\n+        fields.add(new Schema.Field(RECORD_FLAG, SchemaBuilder.builder().intType(), \"record flags\", 0));\n+        return Schema.createRecord(schema.getName() + \"Record\", schema.getDoc(), schema.getNamespace(), false, fields);\n+    }\n+\n+    @Override\n+    public T decode(byte[] data) {\n+        ByteBuffer buffer = ByteBuffer.wrap(data);\n+        if (buffer.get() != AvroConfluentCodec.MAGIC_BYTE) {\n+            throw new IllegalArgumentException(\"Invalid Avro Confluent message, expecting magic byte\");\n+        }\n+        int id = buffer.getInt();\n+        Schema writeSchema;\n+        try {\n+            writeSchema = client.getById(id);\n+        } catch (IOException | RestClientException e) {\n+            throw new StreamRuntimeException(\"Cannot retrieve write schema id: \" + id, e);\n+        }\n+        RawMessageDecoder<GenericRecord> decoder = new RawMessageDecoder<>(GenericData.get(), writeSchema, schema);\n+        try {\n+            GenericRecord rec = decoder.decode(buffer.slice(), null);\n+            log.trace(\"GR: {}\", rec);", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NDI0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507684243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n          \n          \n            \n             * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n          \n      \n    \n    \n  \n\nand other Copyright headers", "author": "ataillefer", "createdAt": "2020-10-19T11:51:24Z", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/codec/AvroRecordCodecFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NTQwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507685409", "bodyText": "missing newline", "author": "ataillefer", "createdAt": "2020-10-19T11:53:37Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NjE2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507686166", "bodyText": "constant for \"confluent\"?", "author": "ataillefer", "createdAt": "2020-10-19T11:54:53Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder(new File(FeaturesRunner.getBuildDirectory()));\n+\n+    public static final String SCHEMA_REGISTRY_URL_PROP = \"confluent.schema_registry.urls\";\n+\n+    public static final String SCHEMA_REGISTRY_URL_DEFAULT = \"http://localhost:8081\";\n+\n+    protected final Codec<TestMessage> messageCodec = Framework.getService(CodecService.class).getCodec(\"avroBinary\", TestMessage.class);\n+\n+    public static void assumeConfluentRegistryEnabled() {\n+        Assume.assumeTrue(\"Skip Confluent tests\", \"true\".equals(System.getProperty(\"confluent\")));", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NzE0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507687148", "bodyText": "could use @BeforeClass on this method", "author": "ataillefer", "createdAt": "2020-10-19T11:56:32Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder(new File(FeaturesRunner.getBuildDirectory()));\n+\n+    public static final String SCHEMA_REGISTRY_URL_PROP = \"confluent.schema_registry.urls\";\n+\n+    public static final String SCHEMA_REGISTRY_URL_DEFAULT = \"http://localhost:8081\";\n+\n+    protected final Codec<TestMessage> messageCodec = Framework.getService(CodecService.class).getCodec(\"avroBinary\", TestMessage.class);\n+\n+    public static void assumeConfluentRegistryEnabled() {\n+        Assume.assumeTrue(\"Skip Confluent tests\", \"true\".equals(System.getProperty(\"confluent\")));\n+    }\n+\n+    public static String getConfluentRegistryUrls() {\n+        String url = System.getProperty(SCHEMA_REGISTRY_URL_PROP, SCHEMA_REGISTRY_URL_DEFAULT);\n+        if (url == null || url.isEmpty()) {\n+            url = SCHEMA_REGISTRY_URL_DEFAULT;\n+        }\n+        return url;\n+    }\n+\n+    @Test\n+    public void testAvroRecordCodec() throws Exception {\n+        assumeConfluentRegistryEnabled();", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDkzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508374934", "bodyText": "will do that when introducing more tests", "author": "bdelbosc", "createdAt": "2020-10-20T10:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NzE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NzM2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507687368", "bodyText": "do we want to keep it?", "author": "ataillefer", "createdAt": "2020-10-19T11:56:59Z", "path": "modules/runtime/nuxeo-runtime-stream/src/test/java/org/nuxeo/runtime/stream/tests/TestAvroRecordCodec.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream.tests;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.util.EnumSet;\n+\n+import org.junit.Assume;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.codec.CodecService;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.runtime.stream\")\n+@Deploy(\"org.nuxeo.runtime.stream:test-codec-contrib.xml\")\n+public class TestAvroRecordCodec {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder(new File(FeaturesRunner.getBuildDirectory()));\n+\n+    public static final String SCHEMA_REGISTRY_URL_PROP = \"confluent.schema_registry.urls\";\n+\n+    public static final String SCHEMA_REGISTRY_URL_DEFAULT = \"http://localhost:8081\";\n+\n+    protected final Codec<TestMessage> messageCodec = Framework.getService(CodecService.class).getCodec(\"avroBinary\", TestMessage.class);\n+\n+    public static void assumeConfluentRegistryEnabled() {\n+        Assume.assumeTrue(\"Skip Confluent tests\", \"true\".equals(System.getProperty(\"confluent\")));\n+    }\n+\n+    public static String getConfluentRegistryUrls() {\n+        String url = System.getProperty(SCHEMA_REGISTRY_URL_PROP, SCHEMA_REGISTRY_URL_DEFAULT);\n+        if (url == null || url.isEmpty()) {\n+            url = SCHEMA_REGISTRY_URL_DEFAULT;\n+        }\n+        return url;\n+    }\n+\n+    @Test\n+    public void testAvroRecordCodec() throws Exception {\n+        assumeConfluentRegistryEnabled();\n+\n+        Record src = getRecord();\n+        // Codec<Record> codec = new AvroRecordCodec<>(TestMessage.class.getName(), getConfluentRegistryUrls());", "originalCommit": "989e57f724def1b3e03e5574c95b16a685fb0581", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0OTY2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507849664", "bodyText": "should we deprecate it instead?", "author": "ataillefer", "createdAt": "2020-10-19T15:33:56Z", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -86,8 +85,6 @@\n     // @since 11.1\n     public static final Name DONE_STREAM_NAME = Name.ofUrn(DONE_STREAM);\n \n-    public static final String RECORD_CODEC = \"avro\";", "originalCommit": "d95227ca661bbd0d785d197de97115a0624cfb64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MzIwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507853208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create the registered domain event producers.\n          \n          \n            \n                 * Creates the registered domain event producers.", "author": "ataillefer", "createdAt": "2020-10-19T15:38:34Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/EventService.java", "diffHunk": "@@ -136,4 +137,11 @@\n      */\n     void waitForAsyncCompletion(long timeout);\n \n+    /**\n+     * Create the registered domain event producers.", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1Njc5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507856793", "bodyText": "It's not clear of which listener we're talking about: DomainEventProducerListener I guess.", "author": "ataillefer", "createdAt": "2020-10-19T15:43:28Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * Collects Core Events and produces Domain Event Records.\n+ *\n+ * @since 11.4\n+ */\n+public abstract class DomainEventProducer {\n+    protected final String name;\n+\n+    protected final String stream;\n+\n+    public DomainEventProducer(String name, String stream) {\n+        this.name = name;\n+        this.stream = stream;\n+    }\n+\n+    /**\n+     * The name of the domain event\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStream() {\n+        return stream;\n+    }\n+\n+    /**\n+     * Receives Nuxeo Core Event from the Sync listener", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3Nzk2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508377969", "bodyText": "will rephrase thanks", "author": "bdelbosc", "createdAt": "2020-10-20T10:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1Njc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1Nzg1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507857857", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Receives Nuxeo Core Event from the Sync listener\n          \n          \n            \n                 * Receives Nuxeo Core events from the sync listener.", "author": "ataillefer", "createdAt": "2020-10-19T15:44:55Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * Collects Core Events and produces Domain Event Records.\n+ *\n+ * @since 11.4\n+ */\n+public abstract class DomainEventProducer {\n+    protected final String name;\n+\n+    protected final String stream;\n+\n+    public DomainEventProducer(String name, String stream) {\n+        this.name = name;\n+        this.stream = stream;\n+    }\n+\n+    /**\n+     * The name of the domain event\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStream() {\n+        return stream;\n+    }\n+\n+    /**\n+     * Receives Nuxeo Core Event from the Sync listener", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1NzkxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507857918", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The name of the domain event\n          \n          \n            \n                 * The name of the domain event.", "author": "ataillefer", "createdAt": "2020-10-19T15:45:01Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * Collects Core Events and produces Domain Event Records.\n+ *\n+ * @since 11.4\n+ */\n+public abstract class DomainEventProducer {\n+    protected final String name;\n+\n+    protected final String stream;\n+\n+    public DomainEventProducer(String name, String stream) {\n+        this.name = name;\n+        this.stream = stream;\n+    }\n+\n+    /**\n+     * The name of the domain event", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1ODA1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507858055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Produces Domain Event Records from the accumulated Nuxeo Core events\n          \n          \n            \n                 * Produces Domain Event Records from the accumulated Nuxeo Core events.", "author": "ataillefer", "createdAt": "2020-10-19T15:45:09Z", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/event/stream/DomainEventProducer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.lib.stream.computation.Record;\n+\n+/**\n+ * Collects Core Events and produces Domain Event Records.\n+ *\n+ * @since 11.4\n+ */\n+public abstract class DomainEventProducer {\n+    protected final String name;\n+\n+    protected final String stream;\n+\n+    public DomainEventProducer(String name, String stream) {\n+        this.name = name;\n+        this.stream = stream;\n+    }\n+\n+    /**\n+     * The name of the domain event\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStream() {\n+        return stream;\n+    }\n+\n+    /**\n+     * Receives Nuxeo Core Event from the Sync listener\n+     */\n+    public abstract void addEvent(Event event);\n+\n+    /**\n+     * Produces Domain Event Records from the accumulated Nuxeo Core events", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2MTc0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507861742", "bodyText": "can probably be injected", "author": "ataillefer", "createdAt": "2020-10-19T15:48:38Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/stream/TestDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.EventContextImpl;\n+import org.nuxeo.ecm.core.event.impl.EventImpl;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.event\")\n+@Deploy(\"org.nuxeo.runtime.jtajca\")\n+@Deploy(\"org.nuxeo.ecm.core.event:test-stream-domain-event-producer-contrib.xml\")\n+public class TestDomainEventProducer {\n+\n+    @Inject\n+    protected EventService service;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void testDomainEventProducer() {\n+        StreamService streamService = Framework.getService(StreamService.class);", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2Mjk0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507862947", "bodyText": "Why not transactionalFeature.nextTransaction();?\nMaybe add a comment to explain the difference with the case above.", "author": "ataillefer", "createdAt": "2020-10-19T15:50:20Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/stream/TestDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.EventContextImpl;\n+import org.nuxeo.ecm.core.event.impl.EventImpl;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.event\")\n+@Deploy(\"org.nuxeo.runtime.jtajca\")\n+@Deploy(\"org.nuxeo.ecm.core.event:test-stream-domain-event-producer-contrib.xml\")\n+public class TestDomainEventProducer {\n+\n+    @Inject\n+    protected EventService service;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void testDomainEventProducer() {\n+        StreamService streamService = Framework.getService(StreamService.class);\n+        LogManager logManager = streamService.getLogManager();\n+        LogLag lag = logManager.getLag(Name.ofUrn(\"source/test\"), Name.ofUrn(\"test/DomainEvent\"));\n+        assertEquals(0, lag.lag());\n+\n+        Event event1 = new EventImpl(\"event1\", new EventContextImpl());\n+        Event event2 = new EventImpl(\"event2\", new EventContextImpl());\n+\n+        service.fireEvent(event1);\n+        transactionalFeature.nextTransaction();\n+\n+        service.fireEvent(event1);\n+        service.fireEvent(event2);\n+        TransactionHelper.commitOrRollbackTransaction();", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MTUwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508381501", "bodyText": "we want to be outside of a tx so between a commit and startTx in this case", "author": "bdelbosc", "createdAt": "2020-10-20T10:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2Mjk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NDIwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507864205", "bodyText": "Can you add a comment to detail the expected events?\nIs it event1, event1, event2, event2?\nAnd why event2 generates a domain event even if fired outside of a tx?", "author": "ataillefer", "createdAt": "2020-10-19T15:52:06Z", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/stream/TestDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.ecm.core.event.stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.EventContextImpl;\n+import org.nuxeo.ecm.core.event.impl.EventImpl;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.RuntimeStreamFeature;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.4\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeStreamFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.event\")\n+@Deploy(\"org.nuxeo.runtime.jtajca\")\n+@Deploy(\"org.nuxeo.ecm.core.event:test-stream-domain-event-producer-contrib.xml\")\n+public class TestDomainEventProducer {\n+\n+    @Inject\n+    protected EventService service;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void testDomainEventProducer() {\n+        StreamService streamService = Framework.getService(StreamService.class);\n+        LogManager logManager = streamService.getLogManager();\n+        LogLag lag = logManager.getLag(Name.ofUrn(\"source/test\"), Name.ofUrn(\"test/DomainEvent\"));\n+        assertEquals(0, lag.lag());\n+\n+        Event event1 = new EventImpl(\"event1\", new EventContextImpl());\n+        Event event2 = new EventImpl(\"event2\", new EventContextImpl());\n+\n+        service.fireEvent(event1);\n+        transactionalFeature.nextTransaction();\n+\n+        service.fireEvent(event1);\n+        service.fireEvent(event2);\n+        TransactionHelper.commitOrRollbackTransaction();\n+\n+        // event outside of a transaction\n+        service.fireEvent(event2);\n+\n+        TransactionHelper.startTransaction();\n+        lag = logManager.getLag(Name.ofUrn(\"source/test\"), Name.ofUrn(\"test/DomainEvent\"));\n+        assertEquals(4, lag.lag());", "originalCommit": "f13cc7f71e48daaf03533e59272c2350ff940d24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4OTk3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508389978", "bodyText": "indeed I will improve the test, events are sent downstream in a tx that commit and also outside of a tx,\nevents are not sent when a tx rollback.", "author": "bdelbosc", "createdAt": "2020-10-20T10:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NDIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NTM2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507865368", "bodyText": "Why? Comment maybe?", "author": "ataillefer", "createdAt": "2020-10-19T15:53:44Z", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-audit/src/main/java/org/nuxeo/elasticsearch/audit/ESExtendedInfo.java", "diffHunk": "@@ -37,6 +39,7 @@ public ESExtendedInfo(Serializable value) {\n         this.value = value;\n     }\n \n+    @JsonIgnore", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MTI2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508391261", "bodyText": "when represented as JSON, the getId is called and throws an UnsupportedOperationException we don't want that", "author": "bdelbosc", "createdAt": "2020-10-20T10:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NTM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NzM2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507867363", "bodyText": "Really needed?", "author": "ataillefer", "createdAt": "2020-10-19T15:56:26Z", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestAuditDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *    bdelbosc\n+ */\n+\n+package org.nuxeo.ecm.platform.audit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.platform.audit.api.AuditReader;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Deploy(\"org.nuxeo.ecm.platform.audit.tests:test-domain-event-producer-contrib.xml\")\n+@RunWith(FeaturesRunner.class)\n+@Features(AuditFeature.class)\n+public class TestAuditDomainEventProducer {\n+    protected static final Log log = LogFactory.getLog(TestAuditDomainEventProducer.class);\n+\n+    @Inject\n+    protected CoreSession repo;\n+", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MTY3Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r508391673", "bodyText": "?", "author": "bdelbosc", "createdAt": "2020-10-20T10:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NzM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2Nzg3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4377#discussion_r507867874", "bodyText": "Can probably be injected.", "author": "ataillefer", "createdAt": "2020-10-19T15:57:04Z", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestAuditDomainEventProducer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *    bdelbosc\n+ */\n+\n+package org.nuxeo.ecm.platform.audit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.platform.audit.api.AuditReader;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.lib.stream.log.LogLag;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Deploy(\"org.nuxeo.ecm.platform.audit.tests:test-domain-event-producer-contrib.xml\")\n+@RunWith(FeaturesRunner.class)\n+@Features(AuditFeature.class)\n+public class TestAuditDomainEventProducer {\n+    protected static final Log log = LogFactory.getLog(TestAuditDomainEventProducer.class);\n+\n+    @Inject\n+    protected CoreSession repo;\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    public void waitForAsyncCompletion() {\n+        txFeature.nextTransaction(Duration.ofSeconds(20));\n+    }\n+\n+    @Before\n+    public void isInjected() {\n+        assertNotNull(repo);\n+    }\n+\n+    @Test\n+    public void testAuditDomainEventProducer() {\n+        StreamService streamService = Framework.getService(StreamService.class);", "originalCommit": "96145bd48db4d20c4cb0279d94838db952745843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f83adbe5812cd29a6ef8717837224da51331cdaf", "url": "https://github.com/nuxeo/nuxeo/commit/f83adbe5812cd29a6ef8717837224da51331cdaf", "message": "NXP-27758: Add an AuditDomainEventProducer", "committedDate": "2020-10-20T10:40:14Z", "type": "forcePushed"}, {"oid": "cb1c039bf3da49d605a920c16c17d1323f0d61b1", "url": "https://github.com/nuxeo/nuxeo/commit/cb1c039bf3da49d605a920c16c17d1323f0d61b1", "message": "NXP-27758: Upgrade Confluent to 6.0", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "d8a2044b9d43d6c8633c68af7576b219c1078ec9", "url": "https://github.com/nuxeo/nuxeo/commit/d8a2044b9d43d6c8633c68af7576b219c1078ec9", "message": "NXP-29740: Upgrade Kafka from 2.5.0 to 2.6.0", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "48d9fc3168b8643d7d5aa51ca04ded45b8da27f2", "url": "https://github.com/nuxeo/nuxeo/commit/48d9fc3168b8643d7d5aa51ca04ded45b8da27f2", "message": "NXP-29633: Remove CQ warns", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "7ea611256644f2ef006852b85ed5e7eac4f496c7", "url": "https://github.com/nuxeo/nuxeo/commit/7ea611256644f2ef006852b85ed5e7eac4f496c7", "message": "NXP-27664: Add codec AvroRecordCodec for flattening Record and message into one flat record", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "226f79e660fb404c43487cb00b7cd4ca53140fe7", "url": "https://github.com/nuxeo/nuxeo/commit/226f79e660fb404c43487cb00b7cd4ca53140fe7", "message": "NXP-27757: Enable to register source streams without processor", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "0ffe1616f962dcd6b2e236a298aca4d4a652a6cc", "url": "https://github.com/nuxeo/nuxeo/commit/0ffe1616f962dcd6b2e236a298aca4d4a652a6cc", "message": "NXP-27757: Add a domainEventProducer extension point\n\nThe event service can now receive domainEventProducer contribution to convert\nCore events to Nuxeo Stream Records building a domain event stream.", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "b85dfb277e9404553753ed1f0681bc29bff6c04f", "url": "https://github.com/nuxeo/nuxeo/commit/b85dfb277e9404553753ed1f0681bc29bff6c04f", "message": "NXP-27758: Add an AuditDomainEventProducer", "committedDate": "2020-10-22T09:17:36Z", "type": "commit"}, {"oid": "b85dfb277e9404553753ed1f0681bc29bff6c04f", "url": "https://github.com/nuxeo/nuxeo/commit/b85dfb277e9404553753ed1f0681bc29bff6c04f", "message": "NXP-27758: Add an AuditDomainEventProducer", "committedDate": "2020-10-22T09:17:36Z", "type": "forcePushed"}]}