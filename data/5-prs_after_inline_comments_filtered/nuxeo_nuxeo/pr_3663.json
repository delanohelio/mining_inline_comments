{"pr_number": 3663, "pr_title": "improvement-NXP-28254-conversation-participants-missing-notifications", "pr_createdAt": "2020-01-14T02:42:36Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3663", "timeline": [{"oid": "98f972113b43e3bbc4c26ca5f824a56857de26fe", "url": "https://github.com/nuxeo/nuxeo/commit/98f972113b43e3bbc4c26ca5f824a56857de26fe", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-15T16:04:15Z", "type": "forcePushed"}, {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131", "url": "https://github.com/nuxeo/nuxeo/commit/c0ca914e28e03369b0e7c3a364a85237a3690131", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-16T10:26:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3MzE2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367873163", "bodyText": "Move that as default implementations on AbstractCommentManager:\n\nYou won't have to duplicate it on both BridgeCommentManager and CommentManagerImpl.\nFor backward compatibility, it will be easier for implementer (if any) of AbstractCommentManager.", "author": "troger", "createdAt": "2020-01-17T10:43:38Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -259,4 +259,16 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n         });\n     }\n     \n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3MzM1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367873357", "bodyText": "I would go for a simpler, not negative, hasComments.", "author": "troger", "createdAt": "2020-01-17T10:44:10Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3Mzc3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367873772", "bodyText": "Same here, hasComments, and to be consistent with the other method, keep the arguments order:  session, document, author.", "author": "troger", "createdAt": "2020-01-17T10:45:17Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDUwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367880504", "bodyText": "Why not using a COUNT query?", "author": "troger", "createdAt": "2020-01-17T11:00:15Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -73,6 +74,22 @@\n \n     protected static final String COMMENT_NAME = \"comment\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + COMMENT_ANCESTOR_IDS + \"/* = '%s'\";", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwNjMyMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367906320", "bodyText": "Mongo doesn't support projections. Tried to count with SQL but it didn't find the docs.\nHere the mongo error:\n2020-01-17 13:03:58,042 [main] WARN  [TransientStorageComponent] Missing configuration for default transient store, using in-memory\norg.nuxeo.ecm.core.query.QueryParseException: Projection not supported: count(ecm:uuid)", "author": "NourNuxeo", "createdAt": "2020-01-17T12:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MTQxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367881417", "bodyText": "You should use a limit of 1 here, if there is one comment, the document is commented. It will avoid to query all.", "author": "troger", "createdAt": "2020-01-17T11:02:11Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return session.queryProjection(query, 0, 0).isEmpty();", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MTUwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367881505", "bodyText": "Same, use a limit of 1, not 0.", "author": "troger", "createdAt": "2020-01-17T11:02:25Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return session.queryProjection(query, 0, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), author);\n+        return session.queryProjection(query, 0, 0).isEmpty();", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDEzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884136", "bodyText": "Why not using a COUNT query?", "author": "troger", "createdAt": "2020-01-17T11:08:41Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -83,6 +85,18 @@\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR = //", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDIzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884232", "bodyText": "limit to 1.", "author": "troger", "createdAt": "2020-01-17T11:08:57Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n+        return session.queryProjection(query, 0, 0).isEmpty();", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDI2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884263", "bodyText": "limit to 1.", "author": "troger", "createdAt": "2020-01-17T11:09:02Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n+        return session.queryProjection(query, 0, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR, document.getId());\n+        return session.queryProjection(query, 0, 0).isEmpty();", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDg2OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884869", "bodyText": "This constant should not be here but where it's used, as it's related to a comments feature, not a notification one.", "author": "troger", "createdAt": "2020-01-17T11:10:44Z", "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/main/java/org/nuxeo/ecm/platform/ec/notification/service/NotificationService.java", "diffHunk": "@@ -79,6 +79,13 @@\n \n     private static final Log log = LogFactory.getLog(NotificationService.class);\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     *\n+     * @since 11.1\n+     */\n+    public static final String AUTOSUBSCRIBE_CONFIG_KEY = \"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\";", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4OTM1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367989358", "bodyText": "Yes, but not useful if no notification service available so I ended up putting it here. wdyt ?", "author": "NourNuxeo", "createdAt": "2020-01-17T15:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4MjkzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370182937", "bodyText": "But it's related to comments, so it should go to the comment service. BTW, you assume here https://github.com/nuxeo/nuxeo/pull/3663/files#diff-c765ee349f84c6b796ac98a000e4be25R279 that the Notification Service is always available in the comment context.", "author": "troger", "createdAt": "2020-01-23T15:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NzgzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367887837", "bodyText": "You could just oneline:\nif (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY))", "author": "troger", "createdAt": "2020-01-17T11:18:50Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        ConfigurationService configService = Framework.getService(ConfigurationService.class);\n+\n+        if (configService.isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MDY2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367890665", "bodyText": "I would name it simply handleNotificationAutoSubscriptions maybe?", "author": "troger", "createdAt": "2020-01-17T11:26:17Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MjQzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367892432", "bodyText": "There is a typo, but subscribeCommentAddedNotification sounds more relevant.", "author": "troger", "createdAt": "2020-01-17T11:31:00Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        ConfigurationService configService = Framework.getService(ConfigurationService.class);\n+\n+        if (configService.isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (isDocumentNotCommented(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToNeCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (isDocumentNotCommentedByUser(session, commentAuthor.getName(), document)) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToNeCommentNotifications(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeToNeCommentNotifications(DocumentModel document, NuxeoPrincipal user) {", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5NDg4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367894886", "bodyText": "State here that this method is subscribing the user to \"commentAdded\" notification, it does not subscribe the user to all notifications :)", "author": "troger", "createdAt": "2020-01-17T11:38:00Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        ConfigurationService configService = Framework.getService(ConfigurationService.class);\n+\n+        if (configService.isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (isDocumentNotCommented(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToNeCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (isDocumentNotCommentedByUser(session, commentAuthor.getName(), document)) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToNeCommentNotifications(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.", "originalCommit": "c0ca914e28e03369b0e7c3a364a85237a3690131", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "url": "https://github.com/nuxeo/nuxeo/commit/0873d7ace8050a98edbebb4a9a4387fab67e1e45", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-17T15:14:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk5NjkzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367996937", "bodyText": "on tests added since is not required", "author": "RSalem07", "createdAt": "2020-01-17T15:35:28Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentManager.java", "diffHunk": "@@ -80,6 +80,11 @@\n \n     protected static final String AUTHOR_OF_COMMENT = \"linda\";\n \n+    /**\n+     * @since 11.1\n+     */", "originalCommit": "1a1e2b3643755d4ad7341229a2b59a2689aaef84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTgyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368001828", "bodyText": "can you give us, an example on which cases we can get the PropertyNotFoundException i think we can find another way instead of rely on the exception to get the second information for example i was thinking of things like:\n protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n        String author = null;\n        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n            // means annotation / comment\n            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n        }\n\n        if (StringUtils.isEmpty(author)) {\n            String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n            // to be more robust we can check if the  the array is emtpy ...and log ...but i think we will always have an element \n            author = contributors[0];\n        }\n\n        return Framework.getService(UserManager.class).getPrincipal(author);\n    }", "author": "RSalem07", "createdAt": "2020-01-17T15:44:54Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -140,9 +146,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n         UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        try {\n+            // this is more reliable in case of a comment\n+            Property authorProp = docModel.getProperty(COMMENT_AUTHOR);\n+            return userManager.getPrincipal((String) authorProp.getValue());\n+        } catch (PropertyNotFoundException e) {", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzA2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368007062", "bodyText": "This works fine, I replaced the second if by an else if though, because COMMENT_AUTHOR prevails as we discussed f2f", "author": "NourNuxeo", "createdAt": "2020-01-17T15:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMzg2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368003863", "bodyText": "true if comments were found -> {@code true}if comments were found, otherwise {@code false}\nwdyt", "author": "RSalem07", "createdAt": "2020-01-17T15:48:43Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTUwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368009505", "bodyText": "Well, the otherwise part is implicit \ud83d\ude04", "author": "troger", "createdAt": "2020-01-17T15:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMDEyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368010129", "bodyText": "Also corrected the javadoc for #hasCommentsByUserwhich was missing details and param\nEdit: now have\n\n@return {@code true}if comments were found", "author": "NourNuxeo", "createdAt": "2020-01-17T16:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMzg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTMwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368005309", "bodyText": "i think on master version these two methods hasComments and hasComments should be abstract to be implemented by any new comment implementation / customers code ...\nOn 10.10  (when you will do you backport) you should keep throw new UnsupportedOperationException(); for backward compatibility", "author": "RSalem07", "createdAt": "2020-01-17T15:51:22Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwODIwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368008209", "bodyText": "I do not agree, as there is no implementation for both CommentManagerImpl and BridgeCommentManager.\n\"backward compatibility\" is also valid for migrating from 10.10 to 11.1, if we can ease the process, let's do it.", "author": "troger", "createdAt": "2020-01-17T15:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTAzMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368009030", "bodyText": "CommentManagerImpl -> will implemented to throw the exception\nfor the bridge version we should add an implementation to be able to creates / updated comments during the migration process\nyes i agree its more easy to forward from 10.10 to 11.1 but my mainly works on comments i did it means i give the default implementation only on 10.10...\nand for 10.10 we should have the impl on the bridge", "author": "RSalem07", "createdAt": "2020-01-17T15:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMDYyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368010626", "bodyText": "I followed this #3663 (comment)", "author": "NourNuxeo", "createdAt": "2020-01-17T16:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMDkxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368010912", "bodyText": "It was the same implementation on the PR before :)\nBut anyway, there is no issue to have a default implementation on new methods added to an existing class... and I find it safer.", "author": "troger", "createdAt": "2020-01-17T16:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMzA2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368013068", "bodyText": "can be replaced by\nSubscribes a user to {@value org.nuxeo.ecm.platform.comment.api.CommentEvents#COMMENT_ADDED} event on the document\nwe subscribe to an event", "author": "RSalem07", "createdAt": "2020-01-17T16:06:02Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeCommentAddedNotification(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeCommentAddedNotification(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to \"CommentAdded\" notifications on the document.\n+     *", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NDkyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368044925", "bodyText": "The subscription works with the notification, not the event. They are not equal:\nthe notification is \"CommentAdded\"\nthe event is \"commentAdded\"\nThe first will work (it has no constant outside the one defined here: COMMENT_ADDED_NOTIFICATION), the second not.\nso I changed for\n\n/**\n* Subscribes a user to {@value #COMMENT_ADDED_NOTIFICATION} notifications on the document.\n*\n* @param document the document being commented\n* @param user the user to subscribe to comment notifications\n* @SInCE 11.1\n*/", "author": "NourNuxeo", "createdAt": "2020-01-17T17:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0OTA4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370049081", "bodyText": "Extra feedbacks are welcome", "author": "NourNuxeo", "createdAt": "2020-01-23T10:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMzA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNTA0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368015041", "bodyText": "i think we should rework the javadoc to be more readable like Subscribes the comment author on events to the top level document. for more context on for example which event are added during this subscription you can use\n@implspec and sure we can ask the team for more feedbacks ...:)", "author": "RSalem07", "createdAt": "2020-01-17T16:10:13Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTM5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368031391", "bodyText": "* Handles autosubscription to COMMENT_ADDED_NOTIFICATION following notification rules.\n     *\n     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n     *           The default implementation autosubscribes comment author on his first comment on top level document if\n     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n     * @param session the core session\n     * @param commentDocModel the comment\n     * @param document the document being commented\n     * @since 11.1\n     */", "author": "NourNuxeo", "createdAt": "2020-01-17T16:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNTA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0OTIyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370049223", "bodyText": "Extra feedbacks are welcome", "author": "NourNuxeo", "createdAt": "2020-01-23T10:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNjIxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368016219", "bodyText": "i think a log message on TRACE level will help any one trying to understand why the notification mail are not received", "author": "RSalem07", "createdAt": "2020-01-17T16:12:28Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368021017", "bodyText": "i think this method should ne re-formatted, here what i get when i reformat\n  protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n            DocumentModel document) {", "author": "RSalem07", "createdAt": "2020-01-17T16:22:35Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzAzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368023034", "bodyText": "is there any reason the check if notificationManager, you can remove it, in a case where notificationManager is null we should at least add a log or let the code fail we will see it more quickly then trying understanding why we don't receive the notification mail", "author": "RSalem07", "createdAt": "2020-01-17T16:26:29Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeCommentAddedNotification(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeCommentAddedNotification(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to \"CommentAdded\" notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeCommentAddedNotification(DocumentModel document, NuxeoPrincipal user) {\n+        String subscriber = NotificationConstants.USER_PREFIX + user.getName();\n+        NotificationManager notificationManager = Framework.getService(NotificationManager.class);\n+        if (notificationManager != null) {", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMjk2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368032961", "bodyText": "I thought I had an NPE at some point but I didn't when replayed now so I removed it.", "author": "NourNuxeo", "createdAt": "2020-01-17T16:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzU2MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368023560", "bodyText": "if we decide to not make the two methods abstract you will have the default impl on abstract class", "author": "RSalem07", "createdAt": "2020-01-17T16:27:27Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/CommentManagerImpl.java", "diffHunk": "@@ -525,4 +525,14 @@ public DocumentRef getTopLevelCommentAncestor(CoreSession s, DocumentRef comment\n     public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel commentDocumentModel) {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        throw new UnsupportedOperationException();\n+    }", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368024855", "bodyText": "as these two constants are not used outer the class what if we just make them inner on method and reuse the method to get the first query on the second once", "author": "RSalem07", "createdAt": "2020-01-17T16:30:06Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -73,6 +74,22 @@\n \n     protected static final String COMMENT_NAME = \"comment\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + COMMENT_ANCESTOR_IDS + \"/* = '%s'\";\n+\n+    /**\n+     * Counts how many comments where made by a specific user on a specific document.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR = //\n+            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n+", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MzA0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368043049", "bodyText": "in SQLInfo queries are saved in fields because they are computed at runtime.\nWe don't have this issue here and constants are clear and documented.\nI'd rather keep them that way than making a method to recompute them everytime someone comments.", "author": "NourNuxeo", "createdAt": "2020-01-17T17:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNjMxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368436310", "bodyText": "yep if you remember we discussed with Florent on SQLInfo and he said that was not really needed and there is no real performance deal. My idea here is just to keep it simple the length of the name of these filed is big and they are protected they will be evaluated  anyway at runtime ... but this my point of view we can ask the team for more feedbacks :)", "author": "RSalem07", "createdAt": "2020-01-20T09:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNzg1NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370217855", "bodyText": "I would keep it simple with the constants here...\nWDYT @efge?", "author": "troger", "createdAt": "2020-01-23T16:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMDI3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370220279", "bodyText": "I'd keep constants at the toplevel, even if they are relatively simple and used locally. Because these are NXQL queries and it's good to be able to see at the top of a class what kind of queries it does, and see them all together.\nBut the name could be shortened...", "author": "efge", "createdAt": "2020-01-23T16:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMzczOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370223738", "bodyText": "QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR\nQUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR", "author": "NourNuxeo", "createdAt": "2020-01-23T16:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368025778", "bodyText": "why we handleNotificationAutoSubscriptions and notifyEvent on the Get we just retrieve why we need to notify an event", "author": "RSalem07", "createdAt": "2020-01-17T16:32:03Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -131,8 +148,9 @@ public DocumentModel createComment(DocumentModel docModel, DocumentModel comment\n                     (Serializable) computeAncestorIds(session, docModel.getId()));\n             DocumentModel comment = session.createDocument(commentModelToCreate);\n             comment.detach(true);\n-            notifyEvent(session, CommentEvents.COMMENT_ADDED, docModel, comment);\n \n+            handleNotificationAutoSubscriptions(session, commentModel, session.getDocument(docRef));\n+            notifyEvent(session, CommentEvents.COMMENT_ADDED, comment);", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDc5MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368034791", "bodyText": "The notification was already there but with the 4 args signature.\nThis one is the 3 args version. We didn't use it the Tree but I don't remember it was rolledback on Property as well ?", "author": "NourNuxeo", "createdAt": "2020-01-17T16:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MDg1OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368440859", "bodyText": "If it was here before i think we can compare to TreeCommentManager, we should investigate on it to see why we did it in the past ... just to understand the things better. For the 3 vs 4 args as i explained earlier when we have the commentedDocumentModel we made the choice (with Kevin) to keep calling the 4 args one just to avoid reloading things that we already have", "author": "RSalem07", "createdAt": "2020-01-20T09:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzODQyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368638422", "bodyText": "my bad we told about the CreateComment not the Get, anyway we should use the version with 4 parameters as it is on master", "author": "RSalem07", "createdAt": "2020-01-20T16:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NzYwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368667605", "bodyText": "I put back the 4 args version \ud83d\udc4d. Also did in createLocatedComment l:187", "author": "NourNuxeo", "createdAt": "2020-01-20T17:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MzI4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368863283", "bodyText": "thx, when said Also did in createLocatedComment l:187 -> you mean as it is on master ?", "author": "RSalem07", "createdAt": "2020-01-21T08:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMDkyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368930923", "bodyText": "Yes reverted it", "author": "NourNuxeo", "createdAt": "2020-01-21T10:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNjYyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368026627", "bodyText": "we can use a buildQuery method i think there no need to extract them as a field class", "author": "RSalem07", "createdAt": "2020-01-17T16:33:40Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -83,6 +85,18 @@\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + ECM_ANCESTORID + \" = '%s'\";\n+\n+    /**\n+     * Counts how many comments where made by a specific user on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR = //\n+            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n+", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MzIzNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368043235", "bodyText": "same as #3663 (comment)", "author": "NourNuxeo", "createdAt": "2020-01-17T17:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNjYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTY3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368031674", "bodyText": "why changing it from Service to Manager", "author": "RSalem07", "createdAt": "2020-01-17T16:44:07Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -66,8 +70,12 @@\n @Features({ NotificationCommentFeature.class, SmtpMailServerFeature.class })\n public abstract class AbstractTestCommentNotification {\n \n+    protected static final String ADMINISTRATOR = \"Administrator\";\n+\n+    protected static final String ANY_COMMENT_MESSAGE = \"any Comment message\";\n+\n     @Inject\n-    protected NotificationService notificationService;\n+    protected NotificationManager notificationManager;", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjA0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368036048", "bodyText": "NotificationService is an implementation of NotificationManager. We usually use the interfaces", "author": "NourNuxeo", "createdAt": "2020-01-17T16:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368035336", "bodyText": "i think it will better if we work together to try reworking this test for more readability / simplicity", "author": "RSalem07", "createdAt": "2020-01-17T16:51:26Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -149,12 +162,90 @@ public void shouldNotifyWithTheRightCommentedDocument() {\n \n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n-            Comment reply = createComment(commentedDocumentModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {", "originalCommit": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MzY1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368043653", "bodyText": "As long as it reads easily I'm ok with it as it is.\nStill open to suggestions though", "author": "NourNuxeo", "createdAt": "2020-01-17T17:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQyNDkwNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368424906", "bodyText": "I think the idea is to test the auto-subscription behaviour only not the whole process i mean we have already tests which covers the sent emails/events.\nauto-subscription behaviour only -> create the needed users then ensure that users haven't a subscription on  any comment event then create some comments / annotations and then ensure that every user had what is expected on term of subscription only by calling the different services on NotificationManager and then removes some of them and create another comments....and so on, i think it will simplify the test the final purpose to ensure that we have the subscription or not.\nFor example:\n public void testAutoSubscribingOnlyOnceToNewComments() {\n        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(\"john\",\n                commentedDocumentModel);\n        assertEquals(0, subscriptions.size());\n        Comment createdComment = createComment(commentedDocumentModel.getId(), \"john\");\n.....\n        assertEquals(1, subscriptions.size());\n    }\n...........", "author": "RSalem07", "createdAt": "2020-01-20T08:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NzQxOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368667418", "bodyText": "The test has been simplified now, only tests autosubscription works and once unsubscribed no autoresub is done.", "author": "NourNuxeo", "createdAt": "2020-01-20T17:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMzNg=="}], "type": "inlineReview"}, {"oid": "17f9a38f86053db4fb0b274f966371f0b5af1268", "url": "https://github.com/nuxeo/nuxeo/commit/17f9a38f86053db4fb0b274f966371f0b5af1268", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T06:59:46Z", "type": "forcePushed"}, {"oid": "2e2d5b32fd0140f7465702cf2cd03c1a4553fc10", "url": "https://github.com/nuxeo/nuxeo/commit/2e2d5b32fd0140f7465702cf2cd03c1a4553fc10", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T10:11:56Z", "type": "forcePushed"}, {"oid": "4dc9e35602cb4cd347fac1f28561f97fed5b0a30", "url": "https://github.com/nuxeo/nuxeo/commit/4dc9e35602cb4cd347fac1f28561f97fed5b0a30", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T16:19:36Z", "type": "forcePushed"}, {"oid": "82ab021c0e67b1ce912bc4afe967cca4cef7cbdb", "url": "https://github.com/nuxeo/nuxeo/commit/82ab021c0e67b1ce912bc4afe967cca4cef7cbdb", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T21:08:40Z", "type": "forcePushed"}, {"oid": "a0577102611333e237832a06259dbe9e6e5b2b98", "url": "https://github.com/nuxeo/nuxeo/commit/a0577102611333e237832a06259dbe9e6e5b2b98", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T21:11:00Z", "type": "forcePushed"}, {"oid": "94109e5091cb93dc004949bfd38658465602ef1f", "url": "https://github.com/nuxeo/nuxeo/commit/94109e5091cb93dc004949bfd38658465602ef1f", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T21:13:34Z", "type": "forcePushed"}, {"oid": "082982db5f6b713d9368db8e070ee3a41d57cf2e", "url": "https://github.com/nuxeo/nuxeo/commit/082982db5f6b713d9368db8e070ee3a41d57cf2e", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-20T21:18:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3Mjg2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368872866", "bodyText": "sorry, i have an other interrogation about this auto-subscribe: actually if you use the platform (i made my test on my local 10.10) when a user clique on the  Notify Me button the backend code that will be called will be\norg.nuxeo.ecm.platform.ec.notification.service.NotificationService#addSubscriptions((String username, DocumentModel doc, Boolean sendConfirmationEmail, NuxeoPrincipal principal))\nthrough the Subscription operation. we don't give the name of the notification and then the method that will be called is doc.getAdapter(SubscriptionAdapter.class).addSubscriptionsToAll(username); which will add the notification list below:\n\"Modification\", \"CommentPublication\", \"Approbation review started\", \"CommentUpdated\", \"Creation\", \"CommentAdded\", \"Workflow Change\"\nmy interrogations:\n\nIn your code yo give the CommentAdded when you auto-subscribe if the treatment is not the same then the web-ui,  what about CommentUpdated, an user can update a given comment under some conditions (admin ...)\ndo we need to send a mail to notify that the user is now auto-subscribed: .addSubscription(subscriber, COMMENT_ADDED_NOTIFICATION, document, false, user, COMMENT_ADDED_NOTIFICATION);\nfalse means no mail will be sent when we subscribe", "author": "RSalem07", "createdAt": "2020-01-21T08:51:07Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -183,4 +204,83 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found, otherwise {@code false}\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found, otherwise {@code false}\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to {@value #COMMENT_ADDED_NOTIFICATION} following notification rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeCommentAddedNotification(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeCommentAddedNotification(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to {@value #COMMENT_ADDED_NOTIFICATION} notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeCommentAddedNotification(DocumentModel document, NuxeoPrincipal user) {\n+        String subscriber = NotificationConstants.USER_PREFIX + user.getName();\n+        NotificationManager notificationManager = Framework.getService(NotificationManager.class);\n+        notificationManager.addSubscription(subscriber, COMMENT_ADDED_NOTIFICATION, document, false, user,\n+                COMMENT_ADDED_NOTIFICATION);", "originalCommit": "082982db5f6b713d9368db8e070ee3a41d57cf2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxMTE4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368911181", "bodyText": "Asked Alain about it, we will subscribe to all to be consistent with the notify me button !\nAbout second point, yes false is prefered", "author": "NourNuxeo", "createdAt": "2020-01-21T10:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3Mjg2Ng=="}], "type": "inlineReview"}, {"oid": "f22b60721d826580b63713581da984e1553c21a3", "url": "https://github.com/nuxeo/nuxeo/commit/f22b60721d826580b63713581da984e1553c21a3", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-21T10:54:34Z", "type": "forcePushed"}, {"oid": "eb3b0901bc78aadbe5211bef7f28dac6f301b85e", "url": "https://github.com/nuxeo/nuxeo/commit/eb3b0901bc78aadbe5211bef7f28dac6f301b85e", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-21T10:55:42Z", "type": "forcePushed"}, {"oid": "c07d31b5d9dd8e697bedb346b119f6594c3f662d", "url": "https://github.com/nuxeo/nuxeo/commit/c07d31b5d9dd8e697bedb346b119f6594c3f662d", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-22T11:35:24Z", "type": "forcePushed"}, {"oid": "7387c39eb98a8b73a2143269430104e074dd40f6", "url": "https://github.com/nuxeo/nuxeo/commit/7387c39eb98a8b73a2143269430104e074dd40f6", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-22T15:22:36Z", "type": "forcePushed"}, {"oid": "b5e353638a6259e9526211af4369465eddc402ac", "url": "https://github.com/nuxeo/nuxeo/commit/b5e353638a6259e9526211af4369465eddc402ac", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-22T16:40:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MTkyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370051922", "bodyText": "i don't know if we can find ourself with a comment without author, because if it is the case and the docModel is a Comment, you will not evaluate the second if and we find ourself without author; why if we change to:\n       if (docModel.hasSchema(COMMENT_SCHEMA)) {\n            // means annotation / comment\n            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n        }\n        if (StringUtils.isEmpty(author)) {", "author": "RSalem07", "createdAt": "2020-01-23T10:55:53Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +138,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        } else if (StringUtils.isEmpty(author)) {\n+            String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NjkzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370056934", "bodyText": "Yes, changed it for a simple if", "author": "NourNuxeo", "createdAt": "2020-01-23T11:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MTkyMg=="}], "type": "inlineReview"}, {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "url": "https://github.com/nuxeo/nuxeo/commit/4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-23T11:08:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODU1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370058553", "bodyText": "what if we rework the java doc here:\n /**\n     * Handles auto-subscription to comment notifications rules.\n     *\n     * @implSpec If the auto-subscription is enabled {@value NotificationService#AUTOSUBSCRIBE_CONFIG_KEY} then\n     *           <ul>\n     *           <li>We auto-subscribes to the top level document's author on his first comment:\n     *           {@link #hasComments(CoreSession, DocumentModel)}</li>\n     *           <li>.....: {@link #hasCommentsByUser(CoreSession, DocumentModel, String)}</li>\n     *           </ul>\n     * @param session the core session\n     * @param commentDocModel the comment document model\n     * @param document the document being commented\n     * @since 11.1\n     */\n\navoid duplication ...", "author": "RSalem07", "createdAt": "2020-01-23T11:11:51Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +198,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */", "originalCommit": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0MTU5Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370141593", "bodyText": "/**\n * Handles auto-subscription to comment following notifications rules.\n *\n * @implSpec If the auto-subscription is enabled {@value NotificationService#AUTOSUBSCRIBE_CONFIG_KEY} then\n *           <ul>\n *           <li>Auto-subscribes the top level document's author on the first comment. A comment is the first one if\n *           {@link #hasComments(CoreSession, DocumentModel)} returns {@code false}</li>\n *           <li>Auto-subscribes comment author on his first comment on the top level document. A user's comment is\n *           his first if {@link #hasCommentsByUser(CoreSession, DocumentModel, String)} returns\n *           {@code false}</li>\n *           </ul>\n * @param session the core session\n * @param commentDocModel the comment document model\n * @param document the document being commented\n * @since 11.1\n */", "author": "NourNuxeo", "createdAt": "2020-01-23T14:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2Njk4Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370166987", "bodyText": "It's not a public method that will be used by others... I don't think we need all the @implSpec here. The method's code is already clear enough IMO.", "author": "troger", "createdAt": "2020-01-23T14:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5MjEyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370192123", "bodyText": "Then removing all the javadoc on the protected methods I introduce:\nhasComments - both signature\nhandleNotificationAutoSubscriptions\nsince the javadoc helps understanding both signatures of hasComments it's kept", "author": "NourNuxeo", "createdAt": "2020-01-23T15:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1OTU5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370059597", "bodyText": "the two assertion can be replaced by one:\nassertEquals(expectedSubscriptions, subscriptions)\n\nthey should be sorted", "author": "RSalem07", "createdAt": "2020-01-23T11:14:13Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -170,38 +178,63 @@ protected void captureAndVerifyAnnotationEventNotification(Supplier<DocumentMode\n     @Test\n     public void shouldNotifyWithTheRightAnnotatedDocument() {\n         // First comment\n-        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel);\n+        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n         DocumentModel createdAnnotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyAnnotationEventNotification(() -> {\n             // subscribe to notifications\n-            addSubscriptions(\"CommentAdded\");\n+            addSubscriptions(COMMENT_ADDED_NOTIFICATION);\n \n-            Comment reply = createAnnotation(createdAnnotationDocModel);\n+            Comment reply = createAnnotation(createdAnnotationDocModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createAnnotation(annotatedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        annotatedDocumentModel = session.getDocument(annotatedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));", "originalCommit": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NDc2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370144763", "bodyText": "This doesn't work. This is because the list is created by looping on the entries of a Set. So the list keeps the order in which they come from the set which is random.\nThat's why I get updated before added.\nSo we can either sort thing in the lists, or stick with a contains all which is already in place.", "author": "NourNuxeo", "createdAt": "2020-01-23T14:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1OTU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNTM1NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370225354", "bodyText": "Stick with contains.", "author": "troger", "createdAt": "2020-01-23T16:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1OTU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDI1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370060256", "bodyText": "i think this method is not used as now we test mainly the subscriptions behaviour, is it right", "author": "RSalem07", "createdAt": "2020-01-23T11:15:57Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -140,26 +150,73 @@ public void shouldNotifyEventWhenRemoveComment() {\n     @Test\n     public void shouldNotifyWithTheRightCommentedDocument() {\n         // First comment\n-        Comment createdComment = createComment(commentedDocumentModel);\n+        Comment createdComment = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n         DocumentModel createdCommentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n             addSubscriptions(\"CommentAdded\");\n \n-            Comment reply = createComment(createdCommentDocModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n-    private void addSubscriptions(String... notifications) {\n+    protected void addSubscriptions(String... notifications) {\n         NuxeoPrincipal principal = session.getPrincipal();\n         String subscriber = NotificationConstants.USER_PREFIX + principal.getName();\n         for (String notif : notifications) {\n-            notificationService.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+            notificationManager.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createComment(commentedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        commentedDocumentModel = session.getDocument(commentedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));\n+        for (String subscription : subscriptions) {\n+            notificationManager.removeSubscription(johnSubscription, subscription, commentedDocumentModel);\n         }\n+        createComment(commentedDocumentModel, john, \"Test message again\");\n+        transactionalFeature.nextTransaction();\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+    }\n+\n+    protected int checkNotifications(CapturingEventListener listener, Comment createdComment, int offset,", "originalCommit": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDg5MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370060890", "bodyText": "same thing as checkNotifications will be removed, i think this one too  (checkMailContent)", "author": "RSalem07", "createdAt": "2020-01-23T11:17:22Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/CommentUtils.java", "diffHunk": "@@ -129,6 +136,24 @@ public static void checkReceivedMail(List<MailMessage> mails, DocumentModel comm\n         }\n     }\n \n+    /**\n+     * Checks the received mail, sent when a comment / annotation is created or updated.\n+     *\n+     * @param mail the mail to compare\n+     * @param commentDocModel the document model of the comment, cannot be {@code null}\n+     * @param commentedDocModel the document being commented, cannot be {@code null}\n+     * @param event the event, cannot be {@code null}\n+     * @param commentEventType the type of comment event {@link org.nuxeo.ecm.platform.comment.api.CommentEvents},\n+     *            cannot be {@code null}\n+     */\n+    public static String checkMailContent(MailMessage mail, DocumentModel commentDocModel,", "originalCommit": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0ODcyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370148725", "bodyText": "ah my lovely methods...:'(\nremoved \ud83d\udc4d", "author": "NourNuxeo", "createdAt": "2020-01-23T14:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDg5MA=="}], "type": "inlineReview"}, {"oid": "ed2ec3be4faaac038362167696828271466464d5", "url": "https://github.com/nuxeo/nuxeo/commit/ed2ec3be4faaac038362167696828271466464d5", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-23T14:29:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNDE4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370034185", "bodyText": "As you are changing the code, let's go for:\nString[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\nThe prefered way to get a property value (using xpath).", "author": "troger", "createdAt": "2020-01-23T10:18:19Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +138,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        } else if (StringUtils.isEmpty(author)) {\n+            String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNTg0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370035842", "bodyText": "I would go for StringUtils.isBlank here.", "author": "troger", "createdAt": "2020-01-23T10:21:44Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +138,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        } else if (StringUtils.isEmpty(author)) {", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNjUyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370036521", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n          \n      \n    \n    \n  \n\nThe Javadoc + methods arguments are enough, not need for the ByUser suffix.", "author": "troger", "createdAt": "2020-01-23T10:23:17Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNjY0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370036640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param author the name of the user who's comments are being counted\n          \n          \n            \n                 * @param user the name of the user who's comments are being counted", "author": "troger", "createdAt": "2020-01-23T10:23:31Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNjc5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370036798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@code true} if comments by author were found\n          \n          \n            \n                 * @return {@code true} if comments by user were found", "author": "troger", "createdAt": "2020-01-23T10:23:50Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzOTk2NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370039965", "bodyText": "empty line.", "author": "troger", "createdAt": "2020-01-23T10:30:14Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToCommentNotifications(document, topLevelDocumentAuthor);\n+", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0NzA2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370047061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n          \n          \n            \n                    if (topLevelDocumentAuthor.equals(commentAuthor)) {\n          \n      \n    \n    \n  \n\n?", "author": "troger", "createdAt": "2020-01-23T10:45:20Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0OTEzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370049137", "bodyText": "It's not really anymore \"CommentNotifications\" is it? subscribeToNotifications seems more accurate :)\nIf you keep the params javadoc, update it to remove \"comment\" references.", "author": "troger", "createdAt": "2020-01-23T10:49:40Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToCommentNotifications(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeToCommentNotifications(DocumentModel document, NuxeoPrincipal user) {", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MTYxMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370051612", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String user) {", "author": "troger", "createdAt": "2020-01-23T10:55:11Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NTY5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370055697", "bodyText": "Why public? If needed, put it before the protected ones.", "author": "troger", "createdAt": "2020-01-23T11:04:40Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -69,6 +69,14 @@\n @Features({ NotificationCommentFeature.class, SmtpMailServerFeature.class })\n public abstract class AbstractTestAnnotationNotification {\n \n+    protected static final String COMMENT_ADDED_NOTIFICATION = \"CommentAdded\";\n+\n+    public static final String COMMENT_UPDATED_NOTIFICATION = \"CommentUpdated\";", "originalCommit": "b5e353638a6259e9526211af4369465eddc402ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5OTQ4NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370199485", "bodyText": "just an IDE switch in the middle of the air", "author": "NourNuxeo", "createdAt": "2020-01-23T15:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3OTgxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370179817", "bodyText": "private.", "author": "troger", "createdAt": "2020-01-23T15:18:44Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/CommentUtils.java", "diffHunk": "@@ -60,6 +65,8 @@\n  */\n public class CommentUtils {\n \n+    public static final Logger log = LogManager.getLogger(CommentUtils.class);", "originalCommit": "ed2ec3be4faaac038362167696828271466464d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "url": "https://github.com/nuxeo/nuxeo/commit/872a0d932a4f59f3f32bbe3c427e84757758ea39", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-23T15:58:20Z", "type": "forcePushed"}, {"oid": "fefbebd08833ed4c4e48393edbb2762b5fed8550", "url": "https://github.com/nuxeo/nuxeo/commit/fefbebd08833ed4c4e48393edbb2762b5fed8550", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-23T16:37:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDEzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n          \n      \n    \n    \n  \n\nTo be consistent with the interface.", "author": "troger", "createdAt": "2020-01-23T16:30:52Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String author) {", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDIzNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), author);\n          \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), user);", "author": "troger", "createdAt": "2020-01-23T16:31:01Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String author) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), author);", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDM2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224361", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean hasComments(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                public boolean hasComments(CoreSession session, DocumentModel document, String user) {", "author": "troger", "createdAt": "2020-01-23T16:31:15Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean hasComments(CoreSession session, DocumentModel document, String author) {", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDQ4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n          \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), user);", "author": "troger", "createdAt": "2020-01-23T16:31:25Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean hasComments(CoreSession session, DocumentModel document, String author) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MzQ4Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370243483", "bodyText": "crossfire here, I push -f a second late", "author": "NourNuxeo", "createdAt": "2020-01-23T17:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDk0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224944", "bodyText": "Put this method before the other hasComments one. Consistency with the interface and PropertyCommentManager.", "author": "troger", "createdAt": "2020-01-23T16:32:12Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean hasComments(CoreSession session, DocumentModel document, String author) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNjE0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370226147", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(0, subscriptions.size());\n          \n          \n            \n                    assertTrue(subscriptions.isEmpty());", "author": "troger", "createdAt": "2020-01-23T16:34:14Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -170,38 +178,63 @@ protected void captureAndVerifyAnnotationEventNotification(Supplier<DocumentMode\n     @Test\n     public void shouldNotifyWithTheRightAnnotatedDocument() {\n         // First comment\n-        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel);\n+        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n         DocumentModel createdAnnotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyAnnotationEventNotification(() -> {\n             // subscribe to notifications\n-            addSubscriptions(\"CommentAdded\");\n+            addSubscriptions(COMMENT_ADDED_NOTIFICATION);\n \n-            Comment reply = createAnnotation(createdAnnotationDocModel);\n+            Comment reply = createAnnotation(createdAnnotationDocModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createAnnotation(annotatedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        annotatedDocumentModel = session.getDocument(annotatedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));\n+        for (String subscription : subscriptions) {\n+            notificationManager.removeSubscription(johnSubscription, subscription, annotatedDocumentModel);\n+        }\n+        createAnnotation(annotatedDocumentModel, john, \"Test message again\");\n+        transactionalFeature.nextTransaction();\n+            subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNzQwNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370227405", "bodyText": "Name it folder, or reuse doc maybe? domain is misleading.", "author": "troger", "createdAt": "2020-01-23T16:36:17Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentManager.java", "diffHunk": "@@ -99,10 +97,15 @@\n \n     @Before\n     public void init() {\n-        DocumentModel domain = session.createDocumentModel(\"/\", \"Folder\", \"Folder\");\n+        DocumentModel domain = session.createDocumentModel(\"/\", \"domain\", \"Domain\");\n+        session.createDocument(domain);\n+        doc = session.createDocumentModel(\"/domain\", \"test\", \"File\");\n+        doc = session.createDocument(doc);\n+\n+        domain = session.createDocumentModel(\"/\", \"Folder\", \"Folder\");", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MjM5Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370242396", "bodyText": "I was indeed trying to picky spare resource. I made a new DocumentModel folder to be clearer", "author": "NourNuxeo", "createdAt": "2020-01-23T17:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyODAwNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370228004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(0, subscriptions.size());\n          \n          \n            \n                    assertTrue(subscriptions.isEmpty());", "author": "troger", "createdAt": "2020-01-23T16:37:16Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -140,26 +148,56 @@ public void shouldNotifyEventWhenRemoveComment() {\n     @Test\n     public void shouldNotifyWithTheRightCommentedDocument() {\n         // First comment\n-        Comment createdComment = createComment(commentedDocumentModel);\n+        Comment createdComment = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n         DocumentModel createdCommentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n             addSubscriptions(\"CommentAdded\");\n \n-            Comment reply = createComment(createdCommentDocModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n-    private void addSubscriptions(String... notifications) {\n+    protected void addSubscriptions(String... notifications) {\n         NuxeoPrincipal principal = session.getPrincipal();\n         String subscriber = NotificationConstants.USER_PREFIX + principal.getName();\n         for (String notif : notifications) {\n-            notificationService.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+            notificationManager.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyODEyOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370228128", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(0, subscriptions.size());\n          \n          \n            \n                    assertTrue(subscriptions.isEmpty());", "author": "troger", "createdAt": "2020-01-23T16:37:32Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -140,26 +148,56 @@ public void shouldNotifyEventWhenRemoveComment() {\n     @Test\n     public void shouldNotifyWithTheRightCommentedDocument() {\n         // First comment\n-        Comment createdComment = createComment(commentedDocumentModel);\n+        Comment createdComment = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n         DocumentModel createdCommentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n             addSubscriptions(\"CommentAdded\");\n \n-            Comment reply = createComment(createdCommentDocModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n-    private void addSubscriptions(String... notifications) {\n+    protected void addSubscriptions(String... notifications) {\n         NuxeoPrincipal principal = session.getPrincipal();\n         String subscriber = NotificationConstants.USER_PREFIX + principal.getName();\n         for (String notif : notifications) {\n-            notificationService.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+            notificationManager.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createComment(commentedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        commentedDocumentModel = session.getDocument(commentedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));\n+        for (String subscription : subscriptions) {\n+            notificationManager.removeSubscription(johnSubscription, subscription, commentedDocumentModel);\n         }\n+        createComment(commentedDocumentModel, john, \"Test message again\");\n+        transactionalFeature.nextTransaction();\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());", "originalCommit": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "98248cea2041431accf943d664c5315dea7a684b", "url": "https://github.com/nuxeo/nuxeo/commit/98248cea2041431accf943d664c5315dea7a684b", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-23T17:09:34Z", "type": "forcePushed"}, {"oid": "79d3d23425ffaf712ca43f1ef2132f611b4cde95", "url": "https://github.com/nuxeo/nuxeo/commit/79d3d23425ffaf712ca43f1ef2132f611b4cde95", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-24T10:25:44Z", "type": "forcePushed"}, {"oid": "1fd2a8990d30cefadc531937a122c38bd49b7325", "url": "https://github.com/nuxeo/nuxeo/commit/1fd2a8990d30cefadc531937a122c38bd49b7325", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T11:06:26Z", "type": "forcePushed"}, {"oid": "d8bf545c6a575e46ee0b4130f9c2072cf7dff0db", "url": "https://github.com/nuxeo/nuxeo/commit/d8bf545c6a575e46ee0b4130f9c2072cf7dff0db", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T11:23:07Z", "type": "forcePushed"}, {"oid": "db1f31883da610ba51f485f5460926beb4a25623", "url": "https://github.com/nuxeo/nuxeo/commit/db1f31883da610ba51f485f5460926beb4a25623", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T12:00:08Z", "type": "forcePushed"}, {"oid": "dbc0eb94dde967e546e324c178fb381e533c0767", "url": "https://github.com/nuxeo/nuxeo/commit/dbc0eb94dde967e546e324c178fb381e533c0767", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T12:06:30Z", "type": "forcePushed"}, {"oid": "9016dd98b2557d7034103c2e84c4f3ff84b1628c", "url": "https://github.com/nuxeo/nuxeo/commit/9016dd98b2557d7034103c2e84c4f3ff84b1628c", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T12:42:17Z", "type": "forcePushed"}, {"oid": "d1d705b8c48e139d7bf226c87c781561c0898e71", "url": "https://github.com/nuxeo/nuxeo/commit/d1d705b8c48e139d7bf226c87c781561c0898e71", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T12:46:38Z", "type": "forcePushed"}, {"oid": "28f2d51aedb10fdfadbd57191ac82a75186f93ab", "url": "https://github.com/nuxeo/nuxeo/commit/28f2d51aedb10fdfadbd57191ac82a75186f93ab", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T14:30:46Z", "type": "forcePushed"}, {"oid": "1e1745b4f0e7caee2beaad4f8eb83407e125fc9c", "url": "https://github.com/nuxeo/nuxeo/commit/1e1745b4f0e7caee2beaad4f8eb83407e125fc9c", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T14:36:00Z", "type": "forcePushed"}, {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042", "url": "https://github.com/nuxeo/nuxeo/commit/7cddb650defe9eddbf3e73d16377afdf68071042", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T14:43:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjQ5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371282494", "bodyText": "add a new line, between the two methods", "author": "RSalem07", "createdAt": "2020-01-27T14:48:46Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +592,73 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR, document.getId(), user);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,", "originalCommit": "7cddb650defe9eddbf3e73d16377afdf68071042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjA0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374126044", "bodyText": "Could you rework the method signature  to this?\nvoid handleNotificationAutoSubscriptions(CoreSession session, DocumentModel topLevelDocModel, DocumentModel commentDocModel)\nIn order to follow same order than existing one and have a better naming for top level.", "author": "kevinleturc", "createdAt": "2020-02-03T14:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjQ5NA=="}], "type": "inlineReview"}, {"oid": "d958072f736d5cc2132f5dfb4cc761204d1f9c40", "url": "https://github.com/nuxeo/nuxeo/commit/d958072f736d5cc2132f5dfb4cc761204d1f9c40", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-27T14:59:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwOTgwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371309800", "bodyText": "perhaps i missed some thing but why add the notification-contribution on CommentFeature the feature responsible of notification is NotificationCommentFeature:\ni tried to rollback this part (i mean removr the notification-contrib from commentFeature and put it in the NotificationCommentFeature i ran the whole tests, there some tests that failed (mainly the AbstractTestAnnotationService stack)  because if (!hasComments(session, document, commentAuthor.getName()) is null to fix it:\n\ni create  the users\n\n        CommentUtils.createUser(\"jdoe\");\n        CommentUtils.createUser(\"bob\");\n\neven if i did one test still failed on the AbstractTestAnnotationService it is because there is no comment auhtor and you code try to find it\nif (StringUtils.isBlank(author)) {\n            String[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\n            author = contributors[0];\n        }\n        return Framework.getService(UserManager.class).getPrincipal(author);\n\nbut as the comment is created using doPriviliege... the dc:contributors will be system and the  Framework.getService(UserManager.class).getPrincipal(author); will returns null i don't why but i think its better te put the deploy notification contribution and fix the remained tests:\norg.nuxeo.ecm.restapi.server.jaxrs.comment.AbstractAnnotationAdapterTest#testUpdateAnnotation\norg.nuxeo.ecm.restapi.server.jaxrs.comment.AbstractAnnotationAdapterTest#testUpdateExternalAnnotation\norg.nuxeo.ecm.restapi.server.jaxrs.comment.AbstractCommentAdapterTest#testUpdateExternalComment\norg.nuxeo.ecm.platform.comment.impl.TestTreeCommentManager#shouldDeleteComment\ni think it is the same bug there is no author just call the CommentUtils.createUser()\nfrom web-ui i think we will not have an issue because they will send the author\nbut with REST API any other client, we will have an issue if the caller don't put the author and Framework.getService(UserManager.class).getPrincipal(author); returns null in the case system", "author": "RSalem07", "createdAt": "2020-01-27T15:33:17Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/CommentFeature.java", "diffHunk": "@@ -35,5 +35,6 @@\n @Deploy(\"org.nuxeo.ecm.platform.comment.api\")\n @Deploy(\"org.nuxeo.ecm.platform.query.api\")\n @Deploy(\"org.nuxeo.ecm.platform.comment\")\n+@Deploy(\"org.nuxeo.ecm.platform.comment.tests:OSGI-INF/notification-contrib.xml\")\n public class CommentFeature implements RunnerFeature {\n }", "originalCommit": "d958072f736d5cc2132f5dfb4cc761204d1f9c40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMjM0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371332348", "bodyText": "or if we don't want to create the needed users -> at least i think it will better to rollback the modification of moving the contribution and create a specific contib to enable/disable the autosubscirber my idea is to keep separated the Notification and Comment Feature, Notification Comment Feature should know about Comment Feature but not the  opposite.", "author": "RSalem07", "createdAt": "2020-01-27T16:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwOTgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMjg2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371332866", "bodyText": "@troger any feedback on my two comments see above :)", "author": "RSalem07", "createdAt": "2020-01-27T16:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwOTgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzNjg5NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371336895", "bodyText": "Context extras:\nDisabling notification on all tests previous to this ticket was done to preserve testing behavior (ignore autosubscription and avoid creating users everywhere).\nDisabling notifications was necessary as in the new behavior, notifications are enabled by default.\nThen to test auto-subscription, notifications are re-enabled  by test.", "author": "NourNuxeo", "createdAt": "2020-01-27T16:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwOTgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MzMwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371353307", "bodyText": "yes i see already the whole test of notification comment/annotation as the subscription on the test and create the needed user. having the auto-subscription from my point of view dont break the existing behaviour if the user is already subscribed the new code will not change anything and my idea is to keep the use of the 2 feature simple as if you import the NotificationCommentFeature outer the comment code the user if it should think about adding the contribution to enable the auto-subscribe or he should do it himself which means he should see the source code to understand how he should do the things but if we enable it on NotificationCommentFeature there is not need to investigate to how the feature works. this is my point of view :)", "author": "RSalem07", "createdAt": "2020-01-27T16:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwOTgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxMjgyNA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371312824", "bodyText": "i am wondering if the /nuxeo/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml is not duplication of nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml as the both enable the auto-subscription", "author": "RSalem07", "createdAt": "2020-01-27T15:37:57Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestTreeAnnotationNotification.java", "diffHunk": "@@ -31,4 +45,46 @@\n     protected Class<? extends CommentManager> getType() {\n         return TreeCommentManager.class;\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {", "originalCommit": "d958072f736d5cc2132f5dfb4cc761204d1f9c40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMTQ2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371331461", "bodyText": "Yes it is a re enable notifications ->\n\nDefault behavior enables\nCommentFeature disables\nMy test uses CommentFeature but needs to enable, so it re enables", "author": "NourNuxeo", "createdAt": "2020-01-27T16:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxMjgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNDMzNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371314336", "bodyText": "same interrogation about the use of this new notification-subscription-contrib.xml", "author": "RSalem07", "createdAt": "2020-01-27T15:40:22Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestTreeCommentNotification.java", "diffHunk": "@@ -31,4 +43,39 @@\n     protected Class<? extends CommentManager> getType() {\n         return TreeCommentManager.class;\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {", "originalCommit": "d958072f736d5cc2132f5dfb4cc761204d1f9c40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMzMTk4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371331980", "bodyText": "#3663 (comment)", "author": "NourNuxeo", "createdAt": "2020-01-27T16:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNDMzNg=="}], "type": "inlineReview"}, {"oid": "a00a37259464cdc4c90d5b7b7d339d9a31257ac3", "url": "https://github.com/nuxeo/nuxeo/commit/a00a37259464cdc4c90d5b7b7d339d9a31257ac3", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-28T15:00:57Z", "type": "forcePushed"}, {"oid": "8185d25b9d864ed363064266dbe556335367881b", "url": "https://github.com/nuxeo/nuxeo/commit/8185d25b9d864ed363064266dbe556335367881b", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-31T14:12:04Z", "type": "forcePushed"}, {"oid": "035e9bc32e4e15c5148b6be94ae34341854f11c4", "url": "https://github.com/nuxeo/nuxeo/commit/035e9bc32e4e15c5148b6be94ae34341854f11c4", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-31T17:16:59Z", "type": "forcePushed"}, {"oid": "a6f0ee93f9ba274adb17d5fc2db71a76063ab512", "url": "https://github.com/nuxeo/nuxeo/commit/a6f0ee93f9ba274adb17d5fc2db71a76063ab512", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-01-31T17:20:15Z", "type": "forcePushed"}, {"oid": "a64c202f959b628c217cd62f01ae93310bde2fdb", "url": "https://github.com/nuxeo/nuxeo/commit/a64c202f959b628c217cd62f01ae93310bde2fdb", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-01T01:40:49Z", "type": "forcePushed"}, {"oid": "5a695a57c46c3c0e0e734592db88a8c444aef71e", "url": "https://github.com/nuxeo/nuxeo/commit/5a695a57c46c3c0e0e734592db88a8c444aef71e", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-03T14:07:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTI2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371155263", "bodyText": "You can put it in CommentManagerImpl, putting this in the abstract makes the implementation not aware of this method.", "author": "kevinleturc", "createdAt": "2020-01-27T10:14:50Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +204,71 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }", "originalCommit": "79d3d23425ffaf712ca43f1ef2132f611b4cde95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjE5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374136194", "bodyText": "Maybe not accurate any more \ud83e\udd14", "author": "kevinleturc", "createdAt": "2020-02-03T14:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNzkyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374537925", "bodyText": "Now it's only implemented in TreeCommentManager as a protected method. As this was only written to help with autosubscribe.", "author": "NourNuxeo", "createdAt": "2020-02-04T08:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMDU4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374120582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(principal == null) {\n          \n          \n            \n                    if (principal == null) {", "author": "kevinleturc", "createdAt": "2020-02-03T14:07:38Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +134,22 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        }\n+        if (StringUtils.isBlank(author)) {\n+            String[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\n+            author = contributors[0];\n+        }\n+\n+        NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n+        // If principal doesn't exist anymore\n+        if(principal == null) {", "originalCommit": "a64c202f959b628c217cd62f01ae93310bde2fdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMTExNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374121116", "bodyText": "No need for this since as the service is already since 11.1", "author": "kevinleturc", "createdAt": "2020-02-03T14:08:37Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -77,12 +84,33 @@\n  */\n public class TreeCommentManager extends AbstractCommentManager {\n \n+    private static final Logger log = LogManager.getLogger(TreeCommentManager.class);\n+\n     protected static final String GET_COMMENT_PAGE_PROVIDER_NAME = \"GET_COMMENT_AS_EXTERNAL_ENTITY\";\n \n     protected static final String GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME = \"GET_COMMENTS_FOR_DOCUMENT_BY_ECM_PARENT\";\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     *\n+     * @since 11.1", "originalCommit": "5a695a57c46c3c0e0e734592db88a8c444aef71e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyOTc0NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374129744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertEquals(0, mails.size());\n          \n          \n            \n                        assertTrue(mails.isEmpty());", "author": "kevinleturc", "createdAt": "2020-02-03T14:24:40Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -106,52 +100,105 @@ protected CommentManager getCommentManager() {\n     public void shouldNotifyEventWhenCreateComment() {\n         // We subscribe to the creation document to check that we will not be notified about the comment creation as\n         // document (see CommentCreationVeto), only the comment added, and the 'File' document creation\n-        captureAndVerifyCommentEventNotification(() -> {\n-            Comment createdComment = createCommentAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdComment.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Comment comment = createCommentAndAddSubscription(\"CommentAdded\");\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocumentModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n+\n+            List<MailMessage> mails = emailsResult.getMails();\n+            assertEquals(1, mails.size());\n+            String expectedMailContent = getExpectedMailContent(commentDocumentModel, commentedDocumentModel,\n+                    expectedEvent);\n+            assertEquals(expectedMailContent, getMailContent(mails.get(0)));\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenUpdateComment() {\n         // We subscribe to the update document to check that we will not be notified about the comment updated as\n         // document (see CommentModificationVeto), only the comment updated.\n-        Comment createdComment = createCommentAndAddSubscription(\"CommentUpdated\", \"Modification\");\n+        Comment comment = createCommentAndAddSubscription(\"CommentUpdated\");\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n+            comment.setText(\"I update the comment\");\n+            commentManager.updateComment(session, comment.getId(), comment);\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocumentModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n \n-        captureAndVerifyCommentEventNotification(() -> {\n-            createdComment.setText(\"I update the message\");\n-            commentManager.updateComment(session, createdComment.getId(), createdComment);\n-            return session.getDocument(new IdRef(createdComment.getId()));\n-        }, COMMENT_UPDATED, DOCUMENT_UPDATED);\n+            List<MailMessage> mails = emailsResult.getMails();\n+            assertEquals(1, mails.size());\n+            String expectedMailContent = getExpectedMailContent(commentDocumentModel, commentedDocumentModel,\n+                    expectedEvent);\n+            assertEquals(expectedMailContent, getMailContent(mails.get(0)));\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenRemoveComment() {\n-        Comment createdComment = createCommentAndAddSubscription(\"CommentRemoved\");\n-        DocumentModel commentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n+        Comment comment = createCommentAndAddSubscription(\"CommentRemoved\");\n+        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n         commentDocModel.detach(true);\n \n-        captureAndVerifyCommentEventNotification(() -> {\n-            commentManager.deleteComment(session, createdComment.getId());\n-            return commentDocModel;\n-        }, COMMENT_REMOVED, DOCUMENT_REMOVED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n+            commentManager.deleteComment(session, comment.getId());\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n+\n+            List<MailMessage> mails = emailsResult.getMails();\n+            // Only true because TreeCommentManager overrides this method\n+            assertEquals(0, mails.size());", "originalCommit": "5a695a57c46c3c0e0e734592db88a8c444aef71e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNzEyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374537123", "bodyText": "don't have a zero check anymore", "author": "NourNuxeo", "createdAt": "2020-02-04T08:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyOTc0NA=="}], "type": "inlineReview"}, {"oid": "26b2f5d0e51cdb11b487c0787324888eed505167", "url": "https://github.com/nuxeo/nuxeo/commit/26b2f5d0e51cdb11b487c0787324888eed505167", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-03T16:52:22Z", "type": "forcePushed"}, {"oid": "89c2a10ee4cd38126f2ee1214d8f69c4e7a3f664", "url": "https://github.com/nuxeo/nuxeo/commit/89c2a10ee4cd38126f2ee1214d8f69c4e7a3f664", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-03T16:53:48Z", "type": "forcePushed"}, {"oid": "618b46c4a283103bbcc83375269c07d11931f0f5", "url": "https://github.com/nuxeo/nuxeo/commit/618b46c4a283103bbcc83375269c07d11931f0f5", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-03T17:06:40Z", "type": "forcePushed"}, {"oid": "9bc9bf7087e3fcdc1134579277be435c2a084614", "url": "https://github.com/nuxeo/nuxeo/commit/9bc9bf7087e3fcdc1134579277be435c2a084614", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-03T17:19:27Z", "type": "forcePushed"}, {"oid": "a2a3c4fb2f37103db40c6fc028be8dd2e14069ea", "url": "https://github.com/nuxeo/nuxeo/commit/a2a3c4fb2f37103db40c6fc028be8dd2e14069ea", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-04T08:25:45Z", "type": "forcePushed"}, {"oid": "f109b64e51e33fb823acbf09710256469a91eaf1", "url": "https://github.com/nuxeo/nuxeo/commit/f109b64e51e33fb823acbf09710256469a91eaf1", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-04T08:37:10Z", "type": "forcePushed"}, {"oid": "5f294481489586a92a8c2708f513e4e707a5792b", "url": "https://github.com/nuxeo/nuxeo/commit/5f294481489586a92a8c2708f513e4e707a5792b", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-04T08:37:51Z", "type": "forcePushed"}, {"oid": "e335b00dfd074f019759f37f2e25f72f11bfc4c5", "url": "https://github.com/nuxeo/nuxeo/commit/e335b00dfd074f019759f37f2e25f72f11bfc4c5", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-04T08:38:59Z", "type": "forcePushed"}, {"oid": "2b0c4f3b2820336a00b18a888576cd6944d12001", "url": "https://github.com/nuxeo/nuxeo/commit/2b0c4f3b2820336a00b18a888576cd6944d12001", "message": "NXP-28254: smart autosubscribe to comment notifications", "committedDate": "2020-02-04T10:47:17Z", "type": "forcePushed"}, {"oid": "0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab", "url": "https://github.com/nuxeo/nuxeo/commit/0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-13T10:07:41Z", "type": "forcePushed"}, {"oid": "261beeda41bd07a2b7394969361aef6e4e716586", "url": "https://github.com/nuxeo/nuxeo/commit/261beeda41bd07a2b7394969361aef6e4e716586", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-21T18:05:12Z", "type": "commit"}, {"oid": "261beeda41bd07a2b7394969361aef6e4e716586", "url": "https://github.com/nuxeo/nuxeo/commit/261beeda41bd07a2b7394969361aef6e4e716586", "message": "NXP-28254: fix up smart autosubscribe to comment notifications", "committedDate": "2020-02-21T18:05:12Z", "type": "forcePushed"}]}