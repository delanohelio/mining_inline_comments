{"pr_number": 2661, "pr_title": "GCF file split: firebase", "pr_createdAt": "2020-04-15T12:51:11Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661", "timeline": [{"oid": "5d5afb2aab57a829bdeb84fd38130b83cb0e3cd9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5d5afb2aab57a829bdeb84fd38130b83cb0e3cd9", "message": "GCF file split: firebase", "committedDate": "2020-04-15T12:50:37Z", "type": "commit"}, {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7293f3ab8509ce4bf34327030a33f7ce53c6de07", "message": "Add back missing helloworld files", "committedDate": "2020-04-15T13:42:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MzEwNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409063104", "bodyText": "You might wish to use some of the json object tools, like either GSON or JSonObject to create and maintain JSON constants.", "author": "lesv", "createdAt": "2020-04-15T18:54:42Z", "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseAuthTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseAuth.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowUserId() {\n+    new FirebaseAuth().accept(\"{\\\"uid\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to user: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowOrigin() {\n+    new FirebaseAuth().accept(\"{\\\"metadata\\\": {\\\"createdAt\\\": \\\"123\\\"}}\", null);", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MzUzNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409063536", "bodyText": "ditto", "author": "lesv", "createdAt": "2020-04-15T18:55:19Z", "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseAuthTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseAuth.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowUserId() {\n+    new FirebaseAuth().accept(\"{\\\"uid\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to user: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowOrigin() {\n+    new FirebaseAuth().accept(\"{\\\"metadata\\\": {\\\"createdAt\\\": \\\"123\\\"}}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Created at: 123\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowVersion()  {\n+    new FirebaseAuth().accept(\"{\\\"email\\\": \\\"foo@google.com\\\"}\", null);", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MzY2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409063665", "bodyText": "see comment below", "author": "lesv", "createdAt": "2020-04-15T18:55:29Z", "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseAuthTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseAuth.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowUserId() {\n+    new FirebaseAuth().accept(\"{\\\"uid\\\": \\\"foo\\\"}\", null);", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDE0OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064148", "bodyText": "Use GSON, JsonObject, or some other tool to maintain JSON constants.", "author": "lesv", "createdAt": "2020-04-15T18:56:15Z", "path": "functions/firebase/firestore-reactive/src/test/java/functions/FirebaseFirestoreReactiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.reflect.Whitebox;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseFirestoreReactiveTest {\n+\n+  @Mock private Firestore firestoreMock;\n+  @Mock private DocumentReference referenceMock;\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    referenceMock = mock(DocumentReference.class, Mockito.RETURNS_DEEP_STUBS);\n+    when(referenceMock.set(ArgumentMatchers.any())).thenReturn(null);\n+\n+    firestoreMock = PowerMockito.mock(Firestore.class);\n+    when(firestoreMock.document(ArgumentMatchers.any())).thenReturn(referenceMock);\n+\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseReactive_shouldCapitalizeOriginalValue()  {\n+    String jsonStr = \"{\\\"value\\\":{\\\"fields\\\":{\\\"original\\\":{\\\"stringValue\\\":\\\"foo\\\"}}}}\";", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDI1Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064253", "bodyText": "ditto", "author": "lesv", "createdAt": "2020-04-15T18:56:26Z", "path": "functions/firebase/firestore-reactive/src/test/java/functions/FirebaseFirestoreReactiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.reflect.Whitebox;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseFirestoreReactiveTest {\n+\n+  @Mock private Firestore firestoreMock;\n+  @Mock private DocumentReference referenceMock;\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    referenceMock = mock(DocumentReference.class, Mockito.RETURNS_DEEP_STUBS);\n+    when(referenceMock.set(ArgumentMatchers.any())).thenReturn(null);\n+\n+    firestoreMock = PowerMockito.mock(Firestore.class);\n+    when(firestoreMock.document(ArgumentMatchers.any())).thenReturn(referenceMock);\n+\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseReactive_shouldCapitalizeOriginalValue()  {\n+    String jsonStr = \"{\\\"value\\\":{\\\"fields\\\":{\\\"original\\\":{\\\"stringValue\\\":\\\"foo\\\"}}}}\";\n+\n+    MockContext context = new MockContext();\n+    context.resource = \"projects/_/databases/(default)/documents/messages/ABCDE12345\";\n+\n+    FirebaseFirestoreReactive functionInstance = new FirebaseFirestoreReactive();\n+    Whitebox.setInternalState(FirebaseFirestoreReactive.class, \"FIRESTORE\", firestoreMock);\n+\n+    functionInstance.accept(jsonStr, context);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Replacing value: foo --> FOO\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseReactive_shouldReportBadJson()  {\n+    String jsonStr = \"{\\\"value\\\":{\\\"fields\\\":{\\\"original\\\":{\\\"missingValue\\\":\\\"foo\\\"}}}}\";", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDk1Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064957", "bodyText": "Use GSON, or JsonObject to maintain JSON constants", "author": "lesv", "createdAt": "2020-04-15T18:57:38Z", "path": "functions/firebase/firestore/src/test/java/functions/FirebaseFirestoreTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseFirestoreTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestore.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseFirestore_shouldIgnoreMissingValuesTest() {\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+    context.eventType = \"event_type_2\";\n+\n+    new FirebaseFirestore().accept(\"\", context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.size()).isEqualTo(2);\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by event on: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Event type: event_type_2\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseFirestore_shouldProcessPresentValues() {\n+    String jsonStr = \"{\\\"oldValue\\\": 999, \\\"value\\\": 777 }\";", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTY1Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065657", "bodyText": "use GSON or JsonObject to maintain JSON constants", "author": "lesv", "createdAt": "2020-04-15T18:58:46Z", "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRemoteConfigTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRemoteConfig.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowUpdateType() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateType\\\": \\\"foo\\\"}\", null);", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTcyNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065727", "bodyText": "ditto", "author": "lesv", "createdAt": "2020-04-15T18:58:52Z", "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRemoteConfigTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRemoteConfig.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowUpdateType() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateType\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Update type: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowOrigin() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateOrigin\\\": \\\"foo\\\"}\", null);", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTg3MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065870", "bodyText": "ditto", "author": "lesv", "createdAt": "2020-04-15T18:59:04Z", "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRemoteConfigTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRemoteConfig.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowUpdateType() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateType\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Update type: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowOrigin() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateOrigin\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Origin: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowVersion() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"versionNumber\\\": 2}\", null);", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjQxOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409066418", "bodyText": "GSON | JsonObject", "author": "lesv", "createdAt": "2020-04-15T18:59:55Z", "path": "functions/firebase/rtdb/src/test/java/functions/FirebaseRtdbTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRtdbTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRtdb.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDefaultAdminToZero() {\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+\n+    new FirebaseRtdb().accept(\"\", context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Admin?: false\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDisplayAdminStatus() {\n+    String jsonStr = \"{\\\"auth\\\": { \\\"admin\\\": true }}\";", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjQ4Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409066487", "bodyText": "ditto", "author": "lesv", "createdAt": "2020-04-15T19:00:02Z", "path": "functions/firebase/rtdb/src/test/java/functions/FirebaseRtdbTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRtdbTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRtdb.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDefaultAdminToZero() {\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+\n+    new FirebaseRtdb().accept(\"\", context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Admin?: false\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDisplayAdminStatus() {\n+    String jsonStr = \"{\\\"auth\\\": { \\\"admin\\\": true }}\";\n+\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+    context.eventType = \"event_type_2\";\n+\n+    new FirebaseRtdb().accept(jsonStr, context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Admin?: true\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldShowDelta() {\n+    String jsonStr = \"{\\\"delta\\\": { \\\"value\\\": 2 }}\";", "originalCommit": "7293f3ab8509ce4bf34327030a33f7ce53c6de07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}