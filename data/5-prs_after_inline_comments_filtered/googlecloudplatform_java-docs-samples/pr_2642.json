{"pr_number": 2642, "pr_title": "healthcare API: update datasets/ samples from v1beta1 to v1", "pr_createdAt": "2020-04-14T00:08:29Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTMyOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407805328", "bodyText": "Can you be more specific?\nIs there any mitigation?\nDo you need this at all, why not just let it propagate and mention that it might happen?", "author": "lesv", "createdAt": "2020-04-14T01:03:25Z", "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetCreate.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_create_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.Dataset;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+public class DatasetCreate {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetCreate(String projectId, String regionId, String datasetId)\n+      throws IOException {\n+    // String projectId = \"your-project-id\";\n+    // String regionId = \"us-central1\";\n+    // String datasetId = \"your-dataset-id\";\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure the dataset to be created.\n+    Dataset dataset = new Dataset();\n+    dataset.setTimeZone(\"America/Chicago\");\n+\n+    // Create request and configure any parameters.\n+    String parentName = String.format(\"projects/%s/locations/%s\", projectId, regionId);\n+    Datasets.Create request = client.projects().locations().datasets().create(parentName, dataset);\n+    request.setDatasetId(datasetId);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      System.out.println(operation.toPrettyString());\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\"Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\\n\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "originalCommit": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTI1Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r408365256", "bodyText": "This is sort of a generic CRUD request to the service so the exception could be a number of things. I don't think it would be possible to be more specific. The mitigation should be clear from the error message returned (e.g. if auth is the issue). I see some samples catch errors/exceptions and others don't. Do you have a preference either way?", "author": "noerog", "createdAt": "2020-04-14T18:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNjc0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r409106740", "bodyText": "Java prefers that we don't catch and ignore errors.  If we are going to ignore it, then let it be caught by a parent.  That said, if it might happen, it's good to mention it.\nhttps://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-04-15T20:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUwMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407805503", "bodyText": "Can you be more specific?\nIs there any mitigation?\nDo you need this at all, why not just let it propagate and mention that it might happen?", "author": "lesv", "createdAt": "2020-04-14T01:03:56Z", "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetDeIdentify.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_dicom_keeplist_deidentify_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.DeidentifyConfig;\n+import com.google.api.services.healthcare.v1.model.DeidentifyDatasetRequest;\n+import com.google.api.services.healthcare.v1.model.DicomConfig;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import com.google.api.services.healthcare.v1.model.TagFilterList;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class DatasetDeIdentify {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetDeIdentify(String srcDatasetName, String destDatasetName)\n+      throws IOException {\n+    // String srcDatasetName =\n+    //     String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-src-dataset-id\");\n+    // String destDatasetName =\n+    //    String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-dest-dataset-id\");\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure what information needs to be De-Identified.\n+    // For more information on de-identifying using tags, please see the following:\n+    // https://cloud.google.com/healthcare/docs/how-tos/dicom-deidentify#de-identification_using_tags\n+    TagFilterList tags = new TagFilterList().setTags(Arrays.asList(\"PatientID\"));\n+    DicomConfig dicomConfig = new DicomConfig().setKeepList(tags);\n+    DeidentifyConfig config = new DeidentifyConfig().setDicom(dicomConfig);\n+\n+    // Create the de-identify request and configure any parameters.\n+    DeidentifyDatasetRequest deidentifyRequest =\n+        new DeidentifyDatasetRequest().setDestinationDataset(destDatasetName).setConfig(config);\n+    Datasets.Deidentify request =\n+        client.projects().locations().datasets().deidentify(srcDatasetName, deidentifyRequest);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\n+          \"De-identified Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "originalCommit": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTIzNg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r408365236", "bodyText": "Same as above.", "author": "noerog", "createdAt": "2020-04-14T18:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNjc5MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r409106790", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "author": "lesv", "createdAt": "2020-04-15T20:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUwMw=="}], "type": "inlineReview"}, {"oid": "467d84133b690f030c50f7ef244d4f148cb5c543", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/467d84133b690f030c50f7ef244d4f148cb5c543", "message": "healthcare API: update datasets/ samples from v1beta1 to v1", "committedDate": "2020-04-14T18:58:17Z", "type": "commit"}, {"oid": "ddd23dc038116a5ef03aa9beb11709de0bc1a150", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ddd23dc038116a5ef03aa9beb11709de0bc1a150", "message": "address review comments", "committedDate": "2020-04-14T18:58:17Z", "type": "commit"}, {"oid": "fd6ed21265d5fe0fb633f1069de0868283b2d532", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fd6ed21265d5fe0fb633f1069de0868283b2d532", "message": "Fix pom failure in Java 11", "committedDate": "2020-04-15T18:38:58Z", "type": "commit"}, {"oid": "b919e494221862db965388fdf74784c5949f6fea", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b919e494221862db965388fdf74784c5949f6fea", "message": "Update healthcare/v1/pom.xml", "committedDate": "2020-04-15T20:15:03Z", "type": "commit"}]}