{"pr_number": 2868, "pr_title": "Update Auth sample to use Google Library", "pr_createdAt": "2020-05-11T23:47:54Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868", "timeline": [{"oid": "fca10f8f2e8d530577e9376608410669675fb7b4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fca10f8f2e8d530577e9376608410669675fb7b4", "message": "Update Auth sample to use Google Library", "committedDate": "2020-05-11T23:46:42Z", "type": "commit"}, {"oid": "f4c2a49e3cc55a89300cc84602c859e059f62689", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f4c2a49e3cc55a89300cc84602c859e059f62689", "message": "Merge branch 'master' into auth-updates", "committedDate": "2020-07-08T17:59:07Z", "type": "commit"}, {"oid": "5a84df527feec46e4b71d3b12cf900d0e2704a81", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5a84df527feec46e4b71d3b12cf900d0e2704a81", "message": "Update pom.xml", "committedDate": "2020-07-08T20:20:50Z", "type": "commit"}, {"oid": "b32a830095955ce027f1df2a7dcd09443bb41958", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b32a830095955ce027f1df2a7dcd09443bb41958", "message": "Update pom.xml", "committedDate": "2020-07-08T21:03:16Z", "type": "commit"}, {"oid": "fed3e9a5095472d1b74628e7446fc7d0870bd91e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fed3e9a5095472d1b74628e7446fc7d0870bd91e", "message": "Update library", "committedDate": "2020-07-08T21:20:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2MzYxNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451863615", "bodyText": "is the cast necessary?", "author": "saturnism", "createdAt": "2020-07-08T22:39:16Z", "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -17,47 +17,38 @@\n package com.example.cloudrun;\n \n // [START run_service_to_service_auth]\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.auth.http.HttpCredentialsAdapter;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.IdTokenCredentials;\n+import com.google.auth.oauth2.IdTokenProvider;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.Response;\n \n public class Authentication {\n \n-  // Instantiate OkHttpClient\n-  private static final OkHttpClient ok =\n-      new OkHttpClient.Builder()\n-          .readTimeout(10, TimeUnit.SECONDS)\n-          .writeTimeout(10, TimeUnit.SECONDS)\n-          .build();\n-\n   // makeGetRequest makes a GET request to the specified Cloud Run endpoint,\n-  // serviceUrl (must be a complete URL), by authenticating with the Id token\n-  // obtained from the Metadata API.\n-  public static Response makeGetRequest(String serviceUrl) throws IOException {\n-    Request.Builder serviceRequest = new Request.Builder().url(serviceUrl);\n-\n-    // Set up metadata server request\n-    // https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature\n-    String tokenUrl =\n-        String.format(\n-            \"http://metadata/computeMetadata/v1/instance/service-accounts/default/identity?audience=%s\",\n-            serviceUrl);\n-    Request tokenRequest =\n-        new Request.Builder().url(tokenUrl).addHeader(\"Metadata-Flavor\", \"Google\").get().build();\n-    // Fetch the token\n-    try (Response tokenResponse = ok.newCall(tokenRequest).execute()) {\n-      String token = tokenResponse.body().string();\n-      // Provide the token in the request to the receiving service\n-      serviceRequest.addHeader(\"Authorization\", \"Bearer \" + token);\n-      System.out.println(\"Id token query succeeded.\");\n-    } catch (IOException e) {\n-      System.out.println(\"Id token query failed: \" + e);\n+  // serviceUrl (must be a complete URL), by authenticating with an Id token\n+  // retrieved from Application Default Credentials.\n+  public static HttpResponse makeGetRequest(String serviceUrl) throws IOException {\n+    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();\n+    if (!(credentials instanceof IdTokenProvider)) {\n+      throw new IllegalArgumentException(\"Credentials are not an instance of IdTokenProvider.\");\n     }\n-\n-    return ok.newCall(serviceRequest.get().build()).execute();\n+    IdTokenCredentials tokenCredential =\n+        IdTokenCredentials.newBuilder()\n+            .setIdTokenProvider((IdTokenProvider) credentials)", "originalCommit": "fed3e9a5095472d1b74628e7446fc7d0870bd91e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NjU2NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451866564", "bodyText": "Yes, I am going to submit an issue about this. GoogleCredentials doesn't implement the IdTokenProvider interface though can be casted as the this (docs).", "author": "averikitsch", "createdAt": "2020-07-08T22:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2MzYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDIwMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451864202", "bodyText": "how do we actually get the id token? and what headers should it go into?\nusers may be using many other http clients, and not google http client.", "author": "saturnism", "createdAt": "2020-07-08T22:40:54Z", "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -17,47 +17,38 @@\n package com.example.cloudrun;\n \n // [START run_service_to_service_auth]\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.auth.http.HttpCredentialsAdapter;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.IdTokenCredentials;\n+import com.google.auth.oauth2.IdTokenProvider;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.Response;\n \n public class Authentication {\n \n-  // Instantiate OkHttpClient\n-  private static final OkHttpClient ok =\n-      new OkHttpClient.Builder()\n-          .readTimeout(10, TimeUnit.SECONDS)\n-          .writeTimeout(10, TimeUnit.SECONDS)\n-          .build();\n-\n   // makeGetRequest makes a GET request to the specified Cloud Run endpoint,\n-  // serviceUrl (must be a complete URL), by authenticating with the Id token\n-  // obtained from the Metadata API.\n-  public static Response makeGetRequest(String serviceUrl) throws IOException {\n-    Request.Builder serviceRequest = new Request.Builder().url(serviceUrl);\n-\n-    // Set up metadata server request\n-    // https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature\n-    String tokenUrl =\n-        String.format(\n-            \"http://metadata/computeMetadata/v1/instance/service-accounts/default/identity?audience=%s\",\n-            serviceUrl);\n-    Request tokenRequest =\n-        new Request.Builder().url(tokenUrl).addHeader(\"Metadata-Flavor\", \"Google\").get().build();\n-    // Fetch the token\n-    try (Response tokenResponse = ok.newCall(tokenRequest).execute()) {\n-      String token = tokenResponse.body().string();\n-      // Provide the token in the request to the receiving service\n-      serviceRequest.addHeader(\"Authorization\", \"Bearer \" + token);\n-      System.out.println(\"Id token query succeeded.\");\n-    } catch (IOException e) {\n-      System.out.println(\"Id token query failed: \" + e);\n+  // serviceUrl (must be a complete URL), by authenticating with an Id token\n+  // retrieved from Application Default Credentials.\n+  public static HttpResponse makeGetRequest(String serviceUrl) throws IOException {\n+    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();\n+    if (!(credentials instanceof IdTokenProvider)) {\n+      throw new IllegalArgumentException(\"Credentials are not an instance of IdTokenProvider.\");\n     }\n-\n-    return ok.newCall(serviceRequest.get().build()).execute();\n+    IdTokenCredentials tokenCredential =\n+        IdTokenCredentials.newBuilder()\n+            .setIdTokenProvider((IdTokenProvider) credentials)\n+            .setTargetAudience(serviceUrl)\n+            .build();\n+\n+    GenericUrl genericUrl = new GenericUrl(serviceUrl);", "originalCommit": "fed3e9a5095472d1b74628e7446fc7d0870bd91e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2Njc3OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451866778", "bodyText": "We are updated the markdown-preview/editor sample to show this.", "author": "averikitsch", "createdAt": "2020-07-08T22:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NTkzNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r452355937", "bodyText": "will there still be examples on how to actually retrieve the token, and what headers to pass in?  It's important to understand this so that it can be integrated into other more popular http clients.", "author": "saturnism", "createdAt": "2020-07-09T16:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MDQ1NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r452370455", "bodyText": "Yes, it will show creating a token from Google Credentials and add it as a header for the okhttp client.", "author": "averikitsch", "createdAt": "2020-07-09T17:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDIwMg=="}], "type": "inlineReview"}]}