{"pr_number": 3784, "pr_title": "Add Cloud SQL R2DBC sample", "pr_createdAt": "2020-09-22T17:49:50Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784", "timeline": [{"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/964cabd4d410250aba1363592d4c49dc2d1ad289", "message": "add r2dbc sample", "committedDate": "2020-09-22T17:44:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5Njk0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492996940", "bodyText": "All of the source files need to be formatted to use 2-space tabs; there is some inconsistent tab usage.", "author": "dzou", "createdAt": "2020-09-22T19:56:58Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*", "originalCommit": "964cabd4d410250aba1363592d4c49dc2d1ad289", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5NzUxMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492997513", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CommanLineRunnerSchemaCreator implements CommandLineRunner {\n          \n          \n            \n            public class CommandLineRunnerSchemaCreator implements CommandLineRunner {\n          \n      \n    \n    \n  \n\nAlso will need to rename the file.", "author": "dzou", "createdAt": "2020-09-22T19:58:08Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {", "originalCommit": "964cabd4d410250aba1363592d4c49dc2d1ad289", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjk1NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493006954", "bodyText": "I think it'd be simpler if you left the .map unnested from the .flatmap, like this:\nreturn serverWebExchange.getFormData()\n        .flatMap(formData -> voteRepository.save(new Vote(formData.getFirst(\"team\"))))\n        .map(vote -> String.format(\n            \"Vote successfully cast for '%s' at time %s!%n\", vote.candidate, vote.timeCast));", "author": "dzou", "createdAt": "2020-09-22T20:16:27Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/VoteController.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+@RestController\n+public class VoteController {\n+  @Autowired\n+  VoteRepository voteRepository;\n+\n+  @PostMapping(\"/vote\")\n+  public Mono<String> vote(ServerWebExchange serverWebExchange) {\n+    return serverWebExchange.getFormData()\n+        .flatMap(formData ->", "originalCommit": "964cabd4d410250aba1363592d4c49dc2d1ad289", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDYwMg==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493724602", "bodyText": "addressed", "author": "dmitry-s", "createdAt": "2020-09-23T16:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0OTc0Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493149747", "bodyText": "Does this class need to be mentioned in the README?\nYou don't talk about creating the schema there.", "author": "meltsufin", "createdAt": "2020-09-23T02:07:44Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {", "originalCommit": "964cabd4d410250aba1363592d4c49dc2d1ad289", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMDA5OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493630098", "bodyText": "@meltsufin It creates schema automatically when the app starts. Could you clarify why you think it should be mentioned in the readme?", "author": "dmitry-s", "createdAt": "2020-09-23T14:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0OTc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NjAyOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493686028", "bodyText": "I see. I guess you can mention that the schema for the vote table will be automatically created the first time you run the sample.", "author": "meltsufin", "createdAt": "2020-09-23T15:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0OTc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Nzk4MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493687980", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Running DDL: \" + schema);\n          \n          \n            \n                logger.info(\"Executed DDL: \" + schema);\n          \n      \n    \n    \n  \n\nAt this point it would have run. I actually thought it was hanging because that was the last message in the log when I ran it.", "author": "meltsufin", "createdAt": "2020-09-23T15:30:11Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {\n+  private static final Logger logger = LoggerFactory.getLogger(CommanLineRunnerSchemaCreator.class);\n+\n+  @Autowired\n+  ConnectionFactory connectionFactory;\n+\n+  @Override\n+  public void run(String...args) {\n+    runDdl(\"CREATE TABLE IF NOT EXISTS vote ( \"\n+        + \"vote_id SERIAL NOT NULL, \"\n+        + \"time_cast timestamp NOT NULL, \"\n+        + \"candidate CHAR(6) NOT NULL, \"\n+        + \"PRIMARY KEY (vote_id) );\");\n+  }\n+\n+  private void runDdl(String schema) {\n+    DatabaseClient client = DatabaseClient.create(connectionFactory);\n+\n+    client.execute(schema)\n+\t\t\t\t.fetch()\n+\t\t\t\t.rowsUpdated()\n+\t\t\t\t.block();\n+\n+    logger.info(\"Running DDL: \" + schema);", "originalCommit": "964cabd4d410250aba1363592d4c49dc2d1ad289", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "38061e198bde262bc70b1e6b1bd3f91f4c8f7071", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/38061e198bde262bc70b1e6b1bd3f91f4c8f7071", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Zou <dzou@users.noreply.github.com>\nCo-authored-by: Mike Eltsufin <meltsufin@google.com>", "committedDate": "2020-09-23T16:15:50Z", "type": "commit"}, {"oid": "9163deb814f1c599c46e9b1f0ed43207f3f56b2a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9163deb814f1c599c46e9b1f0ed43207f3f56b2a", "message": "PR comments", "committedDate": "2020-09-23T21:02:12Z", "type": "commit"}, {"oid": "de9785cde09c97194581d91f441f7392e735bd71", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/de9785cde09c97194581d91f441f7392e735bd71", "message": "PR comments", "committedDate": "2020-09-23T21:06:04Z", "type": "commit"}, {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6c0e7d25394efde4934070e63f192f7f75fec28f", "message": "checkstyle", "committedDate": "2020-09-23T22:20:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMTI3MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495311271", "bodyText": "We've been doing separate samples for each DB engine  because the SQL syntax can vary. This might not matter much between MySQL/Postgres, but for SQL Server, this command wouldn't work. We might want to split into separate samples for Postgres/MySQL for that reason.", "author": "shubha-rajan", "createdAt": "2020-09-25T23:17:15Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommandLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommandLineRunnerSchemaCreator implements CommandLineRunner {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(CommandLineRunnerSchemaCreator.class);\n+\n+  @Autowired\n+  private ConnectionFactory connectionFactory;\n+\n+  @Override\n+  public void run(String... args) {\n+    runDdl(\"CREATE TABLE IF NOT EXISTS vote ( \"\n+        + \"vote_id SERIAL NOT NULL, \"\n+        + \"time_cast timestamp NOT NULL, \"\n+        + \"candidate CHAR(6) NOT NULL, \"\n+        + \"PRIMARY KEY (vote_id) );\");\n+  }", "originalCommit": "6c0e7d25394efde4934070e63f192f7f75fec28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjgxMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r498542813", "bodyText": "@shubha-rajan\nI would prefer to avoid code duplication, since this is the only thing that would be different. I think we could make it a variable and let users pass it to the application or put it into a config. What do you think?", "author": "dmitry-s", "createdAt": "2020-10-01T22:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMTI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NTUxNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r503575514", "bodyText": "We can handle this on our end, but the samples will need to be separated out at some point if we want to link to these from Cloud Docs.", "author": "kurtisvg", "createdAt": "2020-10-12T22:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxNjIxMw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495316213", "bodyText": "Can we configure the application to use a connection pool when creating the connection factory? We recommend connection pooling as a best practice in our docs. The spring-data docs call out r2dbc-pool as a popular option", "author": "shubha-rajan", "createdAt": "2020-09-25T23:29:22Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "originalCommit": "6c0e7d25394efde4934070e63f192f7f75fec28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzODgzNA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r498938834", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-10-02T16:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxNjIxMw=="}], "type": "inlineReview"}, {"oid": "34cdb908e5683fa00d12005ba26e33f84a99dbd3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/34cdb908e5683fa00d12005ba26e33f84a99dbd3", "message": "Apply suggestions from code review\n\nCo-authored-by: Shubha Rajan <shubhadayini@google.com>\nCo-authored-by: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>", "committedDate": "2020-09-28T22:30:40Z", "type": "commit"}, {"oid": "c7220351bd51e0a6041f4e1b5b32d99b923bd567", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c7220351bd51e0a6041f4e1b5b32d99b923bd567", "message": "PR comments", "committedDate": "2020-10-01T22:23:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzAxNw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499827017", "bodyText": "Can you include an example of what the connection string format would look like in a comment here? That way, users looking at this code snippet through a cloud documentation page would be able to see it without having to look at the code on GitHub.", "author": "shubha-rajan", "createdAt": "2020-10-05T19:37:24Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "originalCommit": "c7220351bd51e0a6041f4e1b5b32d99b923bd567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0OTA3Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499949076", "bodyText": "added an example", "author": "dmitry-s", "createdAt": "2020-10-06T00:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyODM5OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499828399", "bodyText": "Can you also include examples of how to configure attributes like size, timeouts, and number of idle connections for the pool?", "author": "shubha-rajan", "createdAt": "2020-10-05T19:40:12Z", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "originalCommit": "c7220351bd51e0a6041f4e1b5b32d99b923bd567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0ODk2Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499948966", "bodyText": "added a paragraph to the README", "author": "dmitry-s", "createdAt": "2020-10-06T00:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyODM5OQ=="}], "type": "inlineReview"}, {"oid": "0057767bf95bb30d08c5487ba650b02d2d81a18a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0057767bf95bb30d08c5487ba650b02d2d81a18a", "message": "PR comments", "committedDate": "2020-10-06T00:44:25Z", "type": "commit"}, {"oid": "38e6a1e975ae8fd4c69cb3ebeb4525c25d1f00c9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/38e6a1e975ae8fd4c69cb3ebeb4525c25d1f00c9", "message": "PR comments", "committedDate": "2020-10-06T00:52:29Z", "type": "commit"}, {"oid": "7acc26a0c3936d8cef973d233fe762ba8d1bbde1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7acc26a0c3936d8cef973d233fe762ba8d1bbde1", "message": "PR comments", "committedDate": "2020-10-06T14:15:34Z", "type": "commit"}, {"oid": "a6afce3b9492d33408ae94a8062c308c9a866e20", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a6afce3b9492d33408ae94a8062c308c9a866e20", "message": "PR comments", "committedDate": "2020-10-19T14:24:58Z", "type": "commit"}]}