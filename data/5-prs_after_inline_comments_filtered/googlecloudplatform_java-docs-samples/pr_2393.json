{"pr_number": 2393, "pr_title": "Adding GA samples for Logo detection", "pr_createdAt": "2020-03-12T23:21:22Z", "pr_url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393", "timeline": [{"oid": "b85c44e36be95ee1030b43dd6b3e8506178eaff2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b85c44e36be95ee1030b43dd6b3e8506178eaff2", "message": "Draft. adding GA samples for Logo detection", "committedDate": "2020-03-12T23:19:46Z", "type": "commit"}, {"oid": "865527f66d8f924ffe46b993f033a47fdec08e9e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/865527f66d8f924ffe46b993f033a47fdec08e9e", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-12T23:22:02Z", "type": "commit"}, {"oid": "49235a01a5d02f2ccfa2e244c5eef6f720f3f1b0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/49235a01a5d02f2ccfa2e244c5eef6f720f3f1b0", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-16T18:36:24Z", "type": "commit"}, {"oid": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8f00d734acfc62fe775e7ec20ece6347530df5ff", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-17T17:02:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDI0MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393894240", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void detectLogo(String filePath) throws Exception {\n          \n          \n            \n              public static void detectLogo(String filePath) throws IOException, ExecutionException, InterruptedException  {", "author": "nnegrey", "createdAt": "2020-03-17T18:42:26Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]\n+  public static void detectLogo(String filePath) throws Exception {", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDM4NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393894385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String localFilePath = \"resources/googlework_short.mp4\";\n          \n          \n            \n                String localFilePath = \"path/to/your/video.mp4\";", "author": "nnegrey", "createdAt": "2020-03-17T18:42:42Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDYxNQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393894615", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            // [START video_detect_logo]", "author": "nnegrey", "createdAt": "2020-03-17T18:43:05Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDY5Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393894696", "bodyText": "Delete", "author": "nnegrey", "createdAt": "2020-03-17T18:43:14Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDk5MQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393894991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n          \n          \n            \n                // Initialize client that will be used to send requests. This client only needs to be created\n          \n          \n            \n                // once, and can be reused for multiple requests. After completing all of your requests, call\n          \n          \n            \n                // the \"close\" method on the client to safely clean up any remaining background resources.\n          \n          \n            \n                try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {```", "author": "nnegrey", "createdAt": "2020-03-17T18:43:42Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]\n+  public static void detectLogo(String filePath) throws Exception {\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NTgzOQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393895839", "bodyText": "Delete", "author": "nnegrey", "createdAt": "2020-03-17T18:45:13Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]\n+  public static void detectLogo(String filePath) throws Exception {\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Read file\n+      Path path = Paths.get(filePath);\n+      byte[] data = Files.readAllBytes(path);\n+      // Create the request\n+      AnnotateVideoRequest request = AnnotateVideoRequest.newBuilder()\n+              .setInputContent(ByteString.copyFrom(data))\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+              client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+              annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        // Textual description, e.g. `Google`.", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjM4NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393896384", "bodyText": "Add some spacing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // All logo tracks where the recognized logo appears. Each track corresponds\n          \n          \n            \n                    // to one logo instance appearing in consecutive frames.\n          \n          \n            \n                    for (Track track : logoRecognitionAnnotation.getTracksList()) {\n          \n          \n            \n                      // Video segment of a track.\n          \n          \n            \n                      VideoSegment segment = track.getSegment();\n          \n          \n            \n                      Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                              \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                              segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                              \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                              segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n          \n          \n            \n                      System.out.printf(\"\\tConfidence : %s\\n\", track.getConfidence());\n          \n          \n            \n                      // The object with timestamp and attributes per frame in the track.\n          \n          \n            \n                      for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n          \n          \n            \n                        // Normalized Bounding box in a frame, where the object is located.\n          \n          \n            \n                        NormalizedBoundingBox normalizedBoundingBox =\n          \n          \n            \n                                timestampedObject.getNormalizedBoundingBox();\n          \n          \n            \n                        System.out.printf(\"\\n\\t\\tLeft : %s\\n\", normalizedBoundingBox.getLeft());\n          \n          \n            \n                        System.out.printf(\"\\t\\tTop : %s\\n\", normalizedBoundingBox.getTop());\n          \n          \n            \n                        System.out.printf(\"\\t\\tRight : %s\\n\", normalizedBoundingBox.getRight());\n          \n          \n            \n                        System.out.printf(\"\\t\\tBottom : %s\\n\", normalizedBoundingBox.getBottom());\n          \n          \n            \n                        // Optional. The attributes of the object in the bounding box.\n          \n          \n            \n                        for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n          \n          \n            \n                          System.out.printf(\"\\n\\t\\t\\tName : %s\\n\", attribute.getName());\n          \n          \n            \n                          System.out.printf(\"\\t\\t\\tConfidence : %s\\n\", attribute.getConfidence());\n          \n          \n            \n                          System.out.printf(\"\\t\\t\\tValue : %s\\n\", attribute.getValue());\n          \n          \n            \n                        }\n          \n          \n            \n                      }\n          \n          \n            \n                      // Optional. Attributes in the track level.\n          \n          \n            \n                      for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n          \n          \n            \n                        System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n          \n          \n            \n                        System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n          \n          \n            \n                        System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n          \n          \n            \n                      }\n          \n          \n            \n                    }\n          \n          \n            \n                    // All video segments where the recognized logo appears.\n          \n          \n            \n                    // There might be multiple instances of the same logo class appearing in one VideoSegment.\n          \n          \n            \n                    for (VideoSegment logoRecognitionAnnotationSegment :\n          \n          \n            \n                            logoRecognitionAnnotation.getSegmentsList()) {\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n          \n          \n            \n                              logoRecognitionAnnotationSegment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                              \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                              logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n          \n          \n            \n                              logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n          \n          \n            \n                              logoRecognitionAnnotationSegment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                              \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                              logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n          \n          \n            \n                              logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n          \n          \n            \n                    }\n          \n          \n            \n            // All logo tracks where the recognized logo appears. Each track corresponds to one logo\n          \n          \n            \n                    // instance appearing in consecutive frames.\n          \n          \n            \n                    for (Track track : logoRecognitionAnnotation.getTracksList()) {\n          \n          \n            \n            \n          \n          \n            \n                      // Video segment of a track.\n          \n          \n            \n                      VideoSegment segment = track.getSegment();\n          \n          \n            \n                      Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset: %s.%s\\n\",\n          \n          \n            \n                          segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset: %s.%s\\n\",\n          \n          \n            \n                          segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n          \n          \n            \n                      System.out.printf(\"\\tConfidence: %s\\n\", track.getConfidence());\n          \n          \n            \n            \n          \n          \n            \n                      // The object with timestamp and attributes per frame in the track.\n          \n          \n            \n                      for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n          \n          \n            \n            \n          \n          \n            \n                        // Normalized Bounding box in a frame, where the object is located.\n          \n          \n            \n                        NormalizedBoundingBox normalizedBoundingBox =\n          \n          \n            \n                            timestampedObject.getNormalizedBoundingBox();\n          \n          \n            \n                        System.out.printf(\"\\n\\t\\tLeft: %s\\n\", normalizedBoundingBox.getLeft());\n          \n          \n            \n                        System.out.printf(\"\\t\\tTop: %s\\n\", normalizedBoundingBox.getTop());\n          \n          \n            \n                        System.out.printf(\"\\t\\tRight: %s\\n\", normalizedBoundingBox.getRight());\n          \n          \n            \n                        System.out.printf(\"\\t\\tBottom: %s\\n\", normalizedBoundingBox.getBottom());\n          \n          \n            \n            \n          \n          \n            \n                        // Optional. The attributes of the object in the bounding box.\n          \n          \n            \n                        for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n          \n          \n            \n                          System.out.printf(\"\\n\\t\\t\\tName: %s\\n\", attribute.getName());\n          \n          \n            \n                          System.out.printf(\"\\t\\t\\tConfidence: %s\\n\", attribute.getConfidence());\n          \n          \n            \n                          System.out.printf(\"\\t\\t\\tValue: %s\\n\", attribute.getValue());\n          \n          \n            \n                        }\n          \n          \n            \n                      }\n          \n          \n            \n            \n          \n          \n            \n                      // Optional. Attributes in the track level.\n          \n          \n            \n                      for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n          \n          \n            \n                        System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n          \n          \n            \n                        System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n          \n          \n            \n                        System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n          \n          \n            \n                      }\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // All video segments where the recognized logo appears. There might be multiple instances\n          \n          \n            \n                    // of the same logo class appearing in one VideoSegment.\n          \n          \n            \n                    for (VideoSegment logoRecognitionAnnotationSegment :\n          \n          \n            \n                        logoRecognitionAnnotation.getSegmentsList()) {\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n          \n          \n            \n                          logoRecognitionAnnotationSegment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                          logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n          \n          \n            \n                          logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n          \n          \n            \n                          logoRecognitionAnnotationSegment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                          logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n          \n          \n            \n                          logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n          \n          \n            \n                    }", "author": "nnegrey", "createdAt": "2020-03-17T18:46:05Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]\n+  public static void detectLogo(String filePath) throws Exception {\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Read file\n+      Path path = Paths.get(filePath);\n+      byte[] data = Files.readAllBytes(path);\n+      // Create the request\n+      AnnotateVideoRequest request = AnnotateVideoRequest.newBuilder()\n+              .setInputContent(ByteString.copyFrom(data))\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+              client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+              annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        // Textual description, e.g. `Google`.\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds\n+        // to one logo instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+                  \"\\n\\tStart Time Offset : %s.%s\\n\",\n+                  segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+                  \"\\tEnd Time Offset : %s.%s\\n\",\n+                  segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence : %s\\n\", track.getConfidence());\n+          // The object with timestamp and attributes per frame in the track.\n+          for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n+            // Normalized Bounding box in a frame, where the object is located.\n+            NormalizedBoundingBox normalizedBoundingBox =\n+                    timestampedObject.getNormalizedBoundingBox();\n+            System.out.printf(\"\\n\\t\\tLeft : %s\\n\", normalizedBoundingBox.getLeft());\n+            System.out.printf(\"\\t\\tTop : %s\\n\", normalizedBoundingBox.getTop());\n+            System.out.printf(\"\\t\\tRight : %s\\n\", normalizedBoundingBox.getRight());\n+            System.out.printf(\"\\t\\tBottom : %s\\n\", normalizedBoundingBox.getBottom());\n+            // Optional. The attributes of the object in the bounding box.\n+            for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n+              System.out.printf(\"\\n\\t\\t\\tName : %s\\n\", attribute.getName());\n+              System.out.printf(\"\\t\\t\\tConfidence : %s\\n\", attribute.getConfidence());\n+              System.out.printf(\"\\t\\t\\tValue : %s\\n\", attribute.getValue());\n+            }\n+          }\n+          // Optional. Attributes in the track level.\n+          for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n+            System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n+            System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n+            System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n+          }\n+        }\n+        // All video segments where the recognized logo appears.\n+        // There might be multiple instances of the same logo class appearing in one VideoSegment.\n+        for (VideoSegment logoRecognitionAnnotationSegment :\n+                logoRecognitionAnnotation.getSegmentsList()) {\n+          Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n+                  logoRecognitionAnnotationSegment.getStartTimeOffset();\n+          System.out.printf(\n+                  \"\\n\\tStart Time Offset : %s.%s\\n\",\n+                  logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n+                  logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n+          Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n+                  logoRecognitionAnnotationSegment.getEndTimeOffset();\n+          System.out.printf(\n+                  \"\\tEnd Time Offset : %s.%s\\n\",\n+                  logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n+                  logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n+        }", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjQ4Nw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393896487", "bodyText": "Delete", "author": "nnegrey", "createdAt": "2020-03-17T18:46:17Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]\n+  public static void detectLogo(String filePath) throws Exception {\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Read file\n+      Path path = Paths.get(filePath);\n+      byte[] data = Files.readAllBytes(path);\n+      // Create the request\n+      AnnotateVideoRequest request = AnnotateVideoRequest.newBuilder()\n+              .setInputContent(ByteString.copyFrom(data))\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+              client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+              annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        // Textual description, e.g. `Google`.\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds\n+        // to one logo instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+                  \"\\n\\tStart Time Offset : %s.%s\\n\",\n+                  segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+                  \"\\tEnd Time Offset : %s.%s\\n\",\n+                  segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence : %s\\n\", track.getConfidence());\n+          // The object with timestamp and attributes per frame in the track.\n+          for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n+            // Normalized Bounding box in a frame, where the object is located.\n+            NormalizedBoundingBox normalizedBoundingBox =\n+                    timestampedObject.getNormalizedBoundingBox();\n+            System.out.printf(\"\\n\\t\\tLeft : %s\\n\", normalizedBoundingBox.getLeft());\n+            System.out.printf(\"\\t\\tTop : %s\\n\", normalizedBoundingBox.getTop());\n+            System.out.printf(\"\\t\\tRight : %s\\n\", normalizedBoundingBox.getRight());\n+            System.out.printf(\"\\t\\tBottom : %s\\n\", normalizedBoundingBox.getBottom());\n+            // Optional. The attributes of the object in the bounding box.\n+            for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n+              System.out.printf(\"\\n\\t\\t\\tName : %s\\n\", attribute.getName());\n+              System.out.printf(\"\\t\\t\\tConfidence : %s\\n\", attribute.getConfidence());\n+              System.out.printf(\"\\t\\t\\tValue : %s\\n\", attribute.getValue());\n+            }\n+          }\n+          // Optional. Attributes in the track level.\n+          for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n+            System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n+            System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n+            System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n+          }\n+        }\n+        // All video segments where the recognized logo appears.\n+        // There might be multiple instances of the same logo class appearing in one VideoSegment.\n+        for (VideoSegment logoRecognitionAnnotationSegment :\n+                logoRecognitionAnnotation.getSegmentsList()) {\n+          Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n+                  logoRecognitionAnnotationSegment.getStartTimeOffset();\n+          System.out.printf(\n+                  \"\\n\\tStart Time Offset : %s.%s\\n\",\n+                  logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n+                  logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n+          Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n+                  logoRecognitionAnnotationSegment.getEndTimeOffset();\n+          System.out.printf(\n+                  \"\\tEnd Time Offset : %s.%s\\n\",\n+                  logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n+                  logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n+        }\n+      }\n+    }\n+  }\n+  // [END video_detect_logo]", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NjU5MA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393896590", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            // [END video_detect_logo]", "author": "nnegrey", "createdAt": "2020-03-17T18:46:27Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"resources/googlework_short.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  // [START video_detect_logo]\n+  public static void detectLogo(String filePath) throws Exception {\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Read file\n+      Path path = Paths.get(filePath);\n+      byte[] data = Files.readAllBytes(path);\n+      // Create the request\n+      AnnotateVideoRequest request = AnnotateVideoRequest.newBuilder()\n+              .setInputContent(ByteString.copyFrom(data))\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+              client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+              annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        // Textual description, e.g. `Google`.\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds\n+        // to one logo instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+                  \"\\n\\tStart Time Offset : %s.%s\\n\",\n+                  segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+                  \"\\tEnd Time Offset : %s.%s\\n\",\n+                  segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence : %s\\n\", track.getConfidence());\n+          // The object with timestamp and attributes per frame in the track.\n+          for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n+            // Normalized Bounding box in a frame, where the object is located.\n+            NormalizedBoundingBox normalizedBoundingBox =\n+                    timestampedObject.getNormalizedBoundingBox();\n+            System.out.printf(\"\\n\\t\\tLeft : %s\\n\", normalizedBoundingBox.getLeft());\n+            System.out.printf(\"\\t\\tTop : %s\\n\", normalizedBoundingBox.getTop());\n+            System.out.printf(\"\\t\\tRight : %s\\n\", normalizedBoundingBox.getRight());\n+            System.out.printf(\"\\t\\tBottom : %s\\n\", normalizedBoundingBox.getBottom());\n+            // Optional. The attributes of the object in the bounding box.\n+            for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n+              System.out.printf(\"\\n\\t\\t\\tName : %s\\n\", attribute.getName());\n+              System.out.printf(\"\\t\\t\\tConfidence : %s\\n\", attribute.getConfidence());\n+              System.out.printf(\"\\t\\t\\tValue : %s\\n\", attribute.getValue());\n+            }\n+          }\n+          // Optional. Attributes in the track level.\n+          for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n+            System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n+            System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n+            System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n+          }\n+        }\n+        // All video segments where the recognized logo appears.\n+        // There might be multiple instances of the same logo class appearing in one VideoSegment.\n+        for (VideoSegment logoRecognitionAnnotationSegment :\n+                logoRecognitionAnnotation.getSegmentsList()) {\n+          Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n+                  logoRecognitionAnnotationSegment.getStartTimeOffset();\n+          System.out.printf(\n+                  \"\\n\\tStart Time Offset : %s.%s\\n\",\n+                  logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n+                  logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n+          Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n+                  logoRecognitionAnnotationSegment.getEndTimeOffset();\n+          System.out.printf(\n+                  \"\\tEnd Time Offset : %s.%s\\n\",\n+                  logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n+                  logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n+        }\n+      }\n+    }\n+  }\n+  // [END video_detect_logo]\n+}\n+", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NzI5OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r393897298", "bodyText": "Add new separate files:\nDetectLogoTest.java - https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/video/beta/src/test/java/com/example/video/DetectLogoTest.java\nDetectLogoGcsTest.java - https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/video/beta/src/test/java/com/example/video/DetectLogoGcsTest.java", "author": "nnegrey", "createdAt": "2020-03-17T18:47:41Z", "path": "video/cloud-client/src/test/java/com/example/video/DetectIT.java", "diffHunk": "@@ -21,32 +21,35 @@\n import com.google.cloud.videointelligence.v1.ObjectTrackingAnnotation;", "originalCommit": "8f00d734acfc62fe775e7ec20ece6347530df5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e3a9cc3907b1db70b322f55a450b7a063d9aa8d", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1e3a9cc3907b1db70b322f55a450b7a063d9aa8d", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetection.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T18:14:36Z", "type": "commit"}, {"oid": "6a9bcf28e3713f7c41d809392c580054205f783f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6a9bcf28e3713f7c41d809392c580054205f783f", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetection.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T18:15:02Z", "type": "commit"}, {"oid": "ab97a535168d3ba3bb9f89c1b7fb9915a9628a73", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ab97a535168d3ba3bb9f89c1b7fb9915a9628a73", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetection.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T18:22:56Z", "type": "commit"}, {"oid": "e470cd06d9814c2c3d2fc397ad4421807e635a4a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e470cd06d9814c2c3d2fc397ad4421807e635a4a", "message": "made requested changes", "committedDate": "2020-03-18T19:59:05Z", "type": "commit"}, {"oid": "1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-18T20:00:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwODk4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394608986", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void detectLogo() throws Exception {\n          \n          \n            \n              public static void detectLogo() throws IOException, ExecutionException, InterruptedException, TimeoutException {", "author": "nnegrey", "createdAt": "2020-03-18T20:07:24Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {", "originalCommit": "1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMjE2NQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394612165", "bodyText": "Oh i thought i did it, looks like google-java-format tool replaced my code.", "author": "munkhuushmgl", "createdAt": "2020-03-18T20:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3ODc1OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r395078759", "bodyText": "This one, right?\nhttps://github.com/google/google-java-format", "author": "nnegrey", "createdAt": "2020-03-19T14:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwODk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE5MzU4OA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r395193588", "bodyText": "Yes. It may have been my Intellij Formatting tool.", "author": "munkhuushmgl", "createdAt": "2020-03-19T17:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwODk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDEwMQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394610101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(got).contains(\"Description : Google Maps\");\n          \n          \n            \n                assertThat(got).contains(\"Description\");", "author": "nnegrey", "createdAt": "2020-03-18T20:09:36Z", "path": "video/cloud-client/src/test/java/com/example/video/DetectLogoTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class DetectLogoTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testLogoDetect() throws Exception {\n+    LogoDetection.detectLogo(\"resources/googlework_short.mp4\");\n+    String got = bout.toString();\n+\n+    assertThat(got).contains(\"Description : Google Maps\");", "originalCommit": "1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDE4Mw==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394610183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(got).contains(\"Description : Google Maps\");\n          \n          \n            \n                assertThat(got).contains(\"Description\");", "author": "nnegrey", "createdAt": "2020-03-18T20:09:45Z", "path": "video/cloud-client/src/test/java/com/example/video/DetectLogoGcsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class DetectLogoGcsTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testLogoDetectGcs() throws Exception {\n+    LogoDetectionGcs.detectLogoGcs(\"gs://cloud-samples-data/video/googlework_tiny.mp4\");\n+    String got = bout.toString();\n+\n+    assertThat(got).contains(\"Description : Google Maps\");", "originalCommit": "1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDM5OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394610399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testLogoDetect() throws Exception {\n          \n          \n            \n              public void testLogoDetect() throws IOException, ExecutionException, InterruptedException, TimeoutException {", "author": "nnegrey", "createdAt": "2020-03-18T20:10:09Z", "path": "video/cloud-client/src/test/java/com/example/video/DetectLogoTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class DetectLogoTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testLogoDetect() throws Exception {", "originalCommit": "1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDUwOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394610508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testLogoDetectGcs() throws Exception {\n          \n          \n            \n              public void testLogoDetectGcs() throws IOException, ExecutionException, InterruptedException, TimeoutException {", "author": "nnegrey", "createdAt": "2020-03-18T20:10:21Z", "path": "video/cloud-client/src/test/java/com/example/video/DetectLogoGcsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class DetectLogoGcsTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testLogoDetectGcs() throws Exception {", "originalCommit": "1412cb1bf18914f6b5c0ee83cec16f6499afebe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e2b736fddf0a1334543c9c883500fdec576b985a", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e2b736fddf0a1334543c9c883500fdec576b985a", "message": "Update video/cloud-client/src/test/java/com/example/video/DetectLogoGcsTest.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T20:13:39Z", "type": "commit"}, {"oid": "b3fe692a45d7725191d61b3554d1fe4c58e5974e", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b3fe692a45d7725191d61b3554d1fe4c58e5974e", "message": "Update video/cloud-client/src/test/java/com/example/video/DetectLogoTest.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T20:15:04Z", "type": "commit"}, {"oid": "d4931410f45fc87c20e44c807ca15be2ead71102", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d4931410f45fc87c20e44c807ca15be2ead71102", "message": "added spec exceptions", "committedDate": "2020-03-18T20:16:00Z", "type": "commit"}, {"oid": "2ccb0afa4a8aa2fa1b4bd2db9901770b45df71ab", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2ccb0afa4a8aa2fa1b4bd2db9901770b45df71ab", "message": "Merge branch 'logo-detection' of https://github.com/GoogleCloudPlatform/java-docs-samples into logo-detection", "committedDate": "2020-03-18T20:16:15Z", "type": "commit"}, {"oid": "49a6cf2dfde258c7f7ef2790cce9690b4d9e3775", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/49a6cf2dfde258c7f7ef2790cce9690b4d9e3775", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-18T20:16:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNDM0NA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394614344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      VideoSegment segment = track.getSegment();\n          \n          \n            \n                      Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset: %s.%s\\n\",\n          \n          \n            \n                          segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset: %s.%s\\n\",\n          \n          \n            \n                          segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n          \n          \n            \n                      Duration startTimeOffset = track.getSegment().getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset: %s.%s\\n\",\n          \n          \n            \n                          startTimeOffset.getSeconds(), startTimeOffset.getNanos());\n          \n          \n            \n                      Duration endTimeOffset = track.getSegment().getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset: %s.%s\\n\", endTimeOffset.getSeconds(), endTimeOffset.getNanos());", "author": "nnegrey", "createdAt": "2020-03-18T20:17:43Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"path/to/your/video.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  public static void detectLogo(String filePath)\n+      throws IOException, ExecutionException, InterruptedException, TimeoutException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Read file\n+      Path path = Paths.get(filePath);\n+      byte[] data = Files.readAllBytes(path);\n+      // Create the request\n+      AnnotateVideoRequest request =\n+          AnnotateVideoRequest.newBuilder()\n+              .setInputContent(ByteString.copyFrom(data))\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+          client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+          annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds to one logo\n+        // instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset: %s.%s\\n\",\n+              segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset: %s.%s\\n\",\n+              segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());", "originalCommit": "49a6cf2dfde258c7f7ef2790cce9690b4d9e3775", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNDU1OQ==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r394614559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (VideoSegment logoRecognitionAnnotationSegment :\n          \n          \n            \n                        logoRecognitionAnnotation.getSegmentsList()) {\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n          \n          \n            \n                          logoRecognitionAnnotationSegment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                          logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n          \n          \n            \n                          logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n          \n          \n            \n                          logoRecognitionAnnotationSegment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                          logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n          \n          \n            \n                          logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n          \n          \n            \n                    }\n          \n          \n            \n                    for (VideoSegment segment : logoRecognitionAnnotation.getSegmentsList()) {\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                          segment.getStartTimeOffset().getSeconds(), segment.getStartTimeOffset().getNanos());\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                          segment.getEndTimeOffset().getSeconds(), segment.getEndTimeOffset().getNanos());\n          \n          \n            \n                    }", "author": "nnegrey", "createdAt": "2020-03-18T20:18:07Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetection.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetection {\n+\n+  public static void detectLogo() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String localFilePath = \"path/to/your/video.mp4\";\n+    detectLogo(localFilePath);\n+  }\n+\n+  public static void detectLogo(String filePath)\n+      throws IOException, ExecutionException, InterruptedException, TimeoutException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Read file\n+      Path path = Paths.get(filePath);\n+      byte[] data = Files.readAllBytes(path);\n+      // Create the request\n+      AnnotateVideoRequest request =\n+          AnnotateVideoRequest.newBuilder()\n+              .setInputContent(ByteString.copyFrom(data))\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+          client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+          annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds to one logo\n+        // instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset: %s.%s\\n\",\n+              segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset: %s.%s\\n\",\n+              segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence: %s\\n\", track.getConfidence());\n+\n+          // The object with timestamp and attributes per frame in the track.\n+          for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n+\n+            // Normalized Bounding box in a frame, where the object is located.\n+            NormalizedBoundingBox normalizedBoundingBox =\n+                timestampedObject.getNormalizedBoundingBox();\n+            System.out.printf(\"\\n\\t\\tLeft: %s\\n\", normalizedBoundingBox.getLeft());\n+            System.out.printf(\"\\t\\tTop: %s\\n\", normalizedBoundingBox.getTop());\n+            System.out.printf(\"\\t\\tRight: %s\\n\", normalizedBoundingBox.getRight());\n+            System.out.printf(\"\\t\\tBottom: %s\\n\", normalizedBoundingBox.getBottom());\n+\n+            // Optional. The attributes of the object in the bounding box.\n+            for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n+              System.out.printf(\"\\n\\t\\t\\tName: %s\\n\", attribute.getName());\n+              System.out.printf(\"\\t\\t\\tConfidence: %s\\n\", attribute.getConfidence());\n+              System.out.printf(\"\\t\\t\\tValue: %s\\n\", attribute.getValue());\n+            }\n+          }\n+\n+          // Optional. Attributes in the track level.\n+          for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n+            System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n+            System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n+            System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n+          }\n+        }\n+\n+        // All video segments where the recognized logo appears. There might be multiple instances\n+        // of the same logo class appearing in one VideoSegment.\n+        for (VideoSegment logoRecognitionAnnotationSegment :\n+            logoRecognitionAnnotation.getSegmentsList()) {\n+          Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n+              logoRecognitionAnnotationSegment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset : %s.%s\\n\",\n+              logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n+              logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n+          Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n+              logoRecognitionAnnotationSegment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset : %s.%s\\n\",\n+              logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n+              logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n+        }", "originalCommit": "49a6cf2dfde258c7f7ef2790cce9690b4d9e3775", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf9073f7d333e906ee1b72e8874c811975baff7b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/bf9073f7d333e906ee1b72e8874c811975baff7b", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetection.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T20:18:37Z", "type": "commit"}, {"oid": "e1a8851a5b538ebb7f57ef4c14d92d5e81c65852", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e1a8851a5b538ebb7f57ef4c14d92d5e81c65852", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetection.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-18T20:18:55Z", "type": "commit"}, {"oid": "4f4db50bb20217e91ec0adf10dacadcff00a0fb6", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4f4db50bb20217e91ec0adf10dacadcff00a0fb6", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-18T21:04:56Z", "type": "commit"}, {"oid": "a125bfeafe009509a4d23f0b7ecf63cf69d8b49c", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a125bfeafe009509a4d23f0b7ecf63cf69d8b49c", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-19T14:31:16Z", "type": "commit"}, {"oid": "e22796ef9ecc58ae04509788db9ac7ac15cae359", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e22796ef9ecc58ae04509788db9ac7ac15cae359", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-19T17:19:30Z", "type": "commit"}, {"oid": "132e7ad44a73bd84e9ced92fa09d6a3cabd972e1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/132e7ad44a73bd84e9ced92fa09d6a3cabd972e1", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-20T23:14:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDczOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r396720738", "bodyText": "Mind cleaning up this one to match the local file output?", "author": "nnegrey", "createdAt": "2020-03-23T19:57:57Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo_gcs]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetectionGcs {\n+\n+  public static void detectLogoGcs() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String gcsUri = \"gs://path/to/your/bucket/video.mp4\";\n+    detectLogoGcs(gcsUri);\n+  }\n+\n+  public static void detectLogoGcs(String inputUri)\n+      throws IOException, ExecutionException, InterruptedException, TimeoutException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Create the request\n+      AnnotateVideoRequest request =\n+          AnnotateVideoRequest.newBuilder()\n+              .setInputUri(inputUri)\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+          client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+          annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds\n+        // to one logo instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset : %s.%s\\n\",\n+              segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset : %s.%s\\n\",\n+              segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence : %s\\n\", track.getConfidence());\n+\n+          // The object with timestamp and attributes per frame in the track.\n+          for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n+\n+            // Normalized Bounding box in a frame, where the object is located.\n+            NormalizedBoundingBox normalizedBoundingBox =\n+                timestampedObject.getNormalizedBoundingBox();\n+            System.out.printf(\"\\n\\t\\tLeft : %s\\n\", normalizedBoundingBox.getLeft());\n+            System.out.printf(\"\\t\\tTop : %s\\n\", normalizedBoundingBox.getTop());\n+            System.out.printf(\"\\t\\tRight : %s\\n\", normalizedBoundingBox.getRight());\n+            System.out.printf(\"\\t\\tBottom : %s\\n\", normalizedBoundingBox.getBottom());\n+\n+            // Optional. The attributes of the object in the bounding box.\n+            for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n+              System.out.printf(\"\\n\\t\\t\\tName : %s\\n\", attribute.getName());\n+              System.out.printf(\"\\t\\t\\tConfidence : %s\\n\", attribute.getConfidence());\n+              System.out.printf(\"\\t\\t\\tValue : %s\\n\", attribute.getValue());\n+            }\n+          }\n+\n+          // Optional. Attributes in the track level.\n+          for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n+            System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n+            System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n+            System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n+          }\n+        }\n+\n+        // All video segments where the recognized logo appears.\n+        // There might be multiple instances of the same logo class appearing in one VideoSegment.\n+        for (VideoSegment logoRecognitionAnnotationSegment :\n+            logoRecognitionAnnotation.getSegmentsList()) {\n+          Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n+              logoRecognitionAnnotationSegment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset : %s.%s\\n\",\n+              logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n+              logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n+          Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n+              logoRecognitionAnnotationSegment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset : %s.%s\\n\",\n+              logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n+              logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n+        }", "originalCommit": "132e7ad44a73bd84e9ced92fa09d6a3cabd972e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "44486c5281e55f5e7d09a715ba2dbec6293fc469", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/44486c5281e55f5e7d09a715ba2dbec6293fc469", "message": "clean up gcs code", "committedDate": "2020-03-23T21:39:35Z", "type": "commit"}, {"oid": "82a1aa33535393271c58de44f0e9de429d994ce1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/82a1aa33535393271c58de44f0e9de429d994ce1", "message": "Merge branch 'logo-detection' of https://github.com/GoogleCloudPlatform/java-docs-samples into logo-detection", "committedDate": "2020-03-23T21:40:26Z", "type": "commit"}, {"oid": "9ef7acbd59cb32239ae6e9237043dc3d6bd8377f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9ef7acbd59cb32239ae6e9237043dc3d6bd8377f", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-23T21:40:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NTk4Ng==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r396775986", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String gcsUri = \"gs://path/to/your/bucket/video.mp4\";\n          \n          \n            \n                String gcsUri = \"gs://YOUR_BUCKET_ID/path/to/your/video.mp4\";", "author": "nnegrey", "createdAt": "2020-03-23T21:46:02Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo_gcs]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetectionGcs {\n+\n+  public static void detectLogoGcs() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String gcsUri = \"gs://path/to/your/bucket/video.mp4\";", "originalCommit": "9ef7acbd59cb32239ae6e9237043dc3d6bd8377f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ffe457ff01564ae409ee178c9afd46508636960", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8ffe457ff01564ae409ee178c9afd46508636960", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-23T21:47:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3NzkzOA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r396777938", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // Video segment of a track.\n          \n          \n            \n                      VideoSegment segment = track.getSegment();\n          \n          \n            \n                      Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset: %s.%s\\n\",\n          \n          \n            \n                          segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset: %s.%s\\n\",\n          \n          \n            \n                          segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n          \n          \n            \n                      System.out.printf(\"\\tConfidence: %s\\n\", track.getConfidence());\n          \n          \n            \n                      // Video segment of a track.\n          \n          \n            \n                      Duration startTimeOffset = track.getSegment().getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset: %s.%s\\n\",\n          \n          \n            \n                          startTimeOffset.getSeconds(), startTimeOffset.getNanos());\n          \n          \n            \n                      Duration endTimeOffset = track.getSegment().getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset: %s.%s\\n\", endTimeOffset.getSeconds(), endTimeOffset.getNanos());\n          \n          \n            \n                      System.out.printf(\"\\tConfidence: %s\\n\", track.getConfidence());", "author": "nnegrey", "createdAt": "2020-03-23T21:50:22Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo_gcs]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetectionGcs {\n+\n+  public static void detectLogoGcs() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String gcsUri = \"gs://YOUR_BUCKET_ID/path/to/your/video.mp4\";\n+    detectLogoGcs(gcsUri);\n+  }\n+\n+  public static void detectLogoGcs(String inputUri)\n+      throws IOException, ExecutionException, InterruptedException, TimeoutException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Create the request\n+      AnnotateVideoRequest request =\n+          AnnotateVideoRequest.newBuilder()\n+              .setInputUri(inputUri)\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+          client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+          annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds to one logo\n+        // instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset: %s.%s\\n\",\n+              segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset: %s.%s\\n\",\n+              segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence: %s\\n\", track.getConfidence());", "originalCommit": "8ffe457ff01564ae409ee178c9afd46508636960", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODIyMA==", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2393#discussion_r396778220", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // All video segments where the recognized logo appears. There might be multiple instances\n          \n          \n            \n                    // of the same logo class appearing in one VideoSegment.\n          \n          \n            \n                    for (VideoSegment logoRecognitionAnnotationSegment :\n          \n          \n            \n                        logoRecognitionAnnotation.getSegmentsList()) {\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n          \n          \n            \n                          logoRecognitionAnnotationSegment.getStartTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                          logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n          \n          \n            \n                          logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n          \n          \n            \n                      Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n          \n          \n            \n                          logoRecognitionAnnotationSegment.getEndTimeOffset();\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                          logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n          \n          \n            \n                          logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n          \n          \n            \n                    }\n          \n          \n            \n                    // All video segments where the recognized logo appears. There might be multiple instances\n          \n          \n            \n                    // of the same logo class appearing in one VideoSegment.\n          \n          \n            \n                    for (VideoSegment segment : logoRecognitionAnnotation.getSegmentsList()) {\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\n\\tStart Time Offset : %s.%s\\n\",\n          \n          \n            \n                          segment.getStartTimeOffset().getSeconds(), segment.getStartTimeOffset().getNanos());\n          \n          \n            \n                      System.out.printf(\n          \n          \n            \n                          \"\\tEnd Time Offset : %s.%s\\n\",\n          \n          \n            \n                          segment.getEndTimeOffset().getSeconds(), segment.getEndTimeOffset().getNanos());\n          \n          \n            \n                    }", "author": "nnegrey", "createdAt": "2020-03-23T21:51:00Z", "path": "video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.video;\n+\n+// [START video_detect_logo_gcs]\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;\n+import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;\n+import com.google.cloud.videointelligence.v1.DetectedAttribute;\n+import com.google.cloud.videointelligence.v1.Entity;\n+import com.google.cloud.videointelligence.v1.Feature;\n+import com.google.cloud.videointelligence.v1.LogoRecognitionAnnotation;\n+import com.google.cloud.videointelligence.v1.NormalizedBoundingBox;\n+import com.google.cloud.videointelligence.v1.TimestampedObject;\n+import com.google.cloud.videointelligence.v1.Track;\n+import com.google.cloud.videointelligence.v1.VideoAnnotationResults;\n+import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;\n+import com.google.cloud.videointelligence.v1.VideoSegment;\n+import com.google.protobuf.Duration;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class LogoDetectionGcs {\n+\n+  public static void detectLogoGcs() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String gcsUri = \"gs://YOUR_BUCKET_ID/path/to/your/video.mp4\";\n+    detectLogoGcs(gcsUri);\n+  }\n+\n+  public static void detectLogoGcs(String inputUri)\n+      throws IOException, ExecutionException, InterruptedException, TimeoutException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\n+      // Create the request\n+      AnnotateVideoRequest request =\n+          AnnotateVideoRequest.newBuilder()\n+              .setInputUri(inputUri)\n+              .addFeatures(Feature.LOGO_RECOGNITION)\n+              .build();\n+\n+      // asynchronously perform object tracking on videos\n+      OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> future =\n+          client.annotateVideoAsync(request);\n+\n+      System.out.println(\"Waiting for operation to complete...\");\n+      // The first result is retrieved because a single video was processed.\n+      AnnotateVideoResponse response = future.get(300, TimeUnit.SECONDS);\n+      VideoAnnotationResults annotationResult = response.getAnnotationResults(0);\n+\n+      // Annotations for list of logos detected, tracked and recognized in video.\n+      for (LogoRecognitionAnnotation logoRecognitionAnnotation :\n+          annotationResult.getLogoRecognitionAnnotationsList()) {\n+        Entity entity = logoRecognitionAnnotation.getEntity();\n+        // Opaque entity ID. Some IDs may be available in\n+        // [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).\n+        System.out.printf(\"Entity Id : %s\\n\", entity.getEntityId());\n+        System.out.printf(\"Description : %s\\n\", entity.getDescription());\n+        // All logo tracks where the recognized logo appears. Each track corresponds to one logo\n+        // instance appearing in consecutive frames.\n+        for (Track track : logoRecognitionAnnotation.getTracksList()) {\n+\n+          // Video segment of a track.\n+          VideoSegment segment = track.getSegment();\n+          Duration segmentStartTimeOffset = segment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset: %s.%s\\n\",\n+              segmentStartTimeOffset.getSeconds(), segmentStartTimeOffset.getNanos());\n+          Duration segmentEndTimeOffset = segment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset: %s.%s\\n\",\n+              segmentEndTimeOffset.getSeconds(), segmentEndTimeOffset.getNanos());\n+          System.out.printf(\"\\tConfidence: %s\\n\", track.getConfidence());\n+\n+          // The object with timestamp and attributes per frame in the track.\n+          for (TimestampedObject timestampedObject : track.getTimestampedObjectsList()) {\n+\n+            // Normalized Bounding box in a frame, where the object is located.\n+            NormalizedBoundingBox normalizedBoundingBox =\n+                timestampedObject.getNormalizedBoundingBox();\n+            System.out.printf(\"\\n\\t\\tLeft: %s\\n\", normalizedBoundingBox.getLeft());\n+            System.out.printf(\"\\t\\tTop: %s\\n\", normalizedBoundingBox.getTop());\n+            System.out.printf(\"\\t\\tRight: %s\\n\", normalizedBoundingBox.getRight());\n+            System.out.printf(\"\\t\\tBottom: %s\\n\", normalizedBoundingBox.getBottom());\n+\n+            // Optional. The attributes of the object in the bounding box.\n+            for (DetectedAttribute attribute : timestampedObject.getAttributesList()) {\n+              System.out.printf(\"\\n\\t\\t\\tName: %s\\n\", attribute.getName());\n+              System.out.printf(\"\\t\\t\\tConfidence: %s\\n\", attribute.getConfidence());\n+              System.out.printf(\"\\t\\t\\tValue: %s\\n\", attribute.getValue());\n+            }\n+          }\n+\n+          // Optional. Attributes in the track level.\n+          for (DetectedAttribute trackAttribute : track.getAttributesList()) {\n+            System.out.printf(\"\\n\\t\\tName : %s\\n\", trackAttribute.getName());\n+            System.out.printf(\"\\t\\tConfidence : %s\\n\", trackAttribute.getConfidence());\n+            System.out.printf(\"\\t\\tValue : %s\\n\", trackAttribute.getValue());\n+          }\n+        }\n+\n+        // All video segments where the recognized logo appears. There might be multiple instances\n+        // of the same logo class appearing in one VideoSegment.\n+        for (VideoSegment logoRecognitionAnnotationSegment :\n+            logoRecognitionAnnotation.getSegmentsList()) {\n+          Duration logoRecognitionAnnotationSegmentStartTimeOffset =\n+              logoRecognitionAnnotationSegment.getStartTimeOffset();\n+          System.out.printf(\n+              \"\\n\\tStart Time Offset : %s.%s\\n\",\n+              logoRecognitionAnnotationSegmentStartTimeOffset.getSeconds(),\n+              logoRecognitionAnnotationSegmentStartTimeOffset.getNanos());\n+          Duration logoRecognitionAnnotationSegmentEndTimeOffset =\n+              logoRecognitionAnnotationSegment.getEndTimeOffset();\n+          System.out.printf(\n+              \"\\tEnd Time Offset : %s.%s\\n\",\n+              logoRecognitionAnnotationSegmentEndTimeOffset.getSeconds(),\n+              logoRecognitionAnnotationSegmentEndTimeOffset.getNanos());\n+        }", "originalCommit": "8ffe457ff01564ae409ee178c9afd46508636960", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "317e889486caf968f38c4beef0d3adbfb009961f", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/317e889486caf968f38c4beef0d3adbfb009961f", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-23T22:06:44Z", "type": "commit"}, {"oid": "14237191b0e496e6bdc41942299e93d3435a7535", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/14237191b0e496e6bdc41942299e93d3435a7535", "message": "Update video/cloud-client/src/main/java/com/example/video/LogoDetectionGcs.java\n\nCo-Authored-By: Noah Negrey <nnegrey@users.noreply.github.com>", "committedDate": "2020-03-23T22:07:14Z", "type": "commit"}, {"oid": "9d27e978d25b49f408d7b796cbc05f3713dfe73b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9d27e978d25b49f408d7b796cbc05f3713dfe73b", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-23T22:39:01Z", "type": "commit"}, {"oid": "b09b433c48fc3ab2e99931da4290fd45ab9ddcb9", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b09b433c48fc3ab2e99931da4290fd45ab9ddcb9", "message": "Merge branch 'master' into logo-detection", "committedDate": "2020-03-24T15:14:21Z", "type": "commit"}]}