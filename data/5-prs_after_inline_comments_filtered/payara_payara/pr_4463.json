{"pr_number": 4463, "pr_title": "APPSERV-47 Adds Custom Watches to Monitoring Console", "pr_createdAt": "2020-01-30T11:26:22Z", "pr_url": "https://github.com/payara/Payara/pull/4463", "timeline": [{"oid": "6fa0a93ed38d074484528cfb75e3cdaeba9dbb82", "url": "https://github.com/payara/Payara/commit/6fa0a93ed38d074484528cfb75e3cdaeba9dbb82", "message": "SMARTTASK-202001 adds basic watches settings with list of watches", "committedDate": "2020-01-24T16:50:19Z", "type": "commit"}, {"oid": "96c57cb95617d10b5d65a398a63630469c4a3bb1", "url": "https://github.com/payara/Payara/commit/96c57cb95617d10b5d65a398a63630469c4a3bb1", "message": "SMARTTASK-202001 adds basic watch builder UI", "committedDate": "2020-01-27T15:52:54Z", "type": "commit"}, {"oid": "1d592a19c8fa5d8ffb498d2e8d9573bdb93c9d6a", "url": "https://github.com/payara/Payara/commit/1d592a19c8fa5d8ffb498d2e8d9573bdb93c9d6a", "message": "APPSERV-47 extracts client data and controller to file, adds full featured watch list and editor", "committedDate": "2020-01-28T14:06:38Z", "type": "commit"}, {"oid": "102f7f20265e17da1873a6671a1b6386e0c19ce9", "url": "https://github.com/payara/Payara/commit/102f7f20265e17da1873a6671a1b6386e0c19ce9", "message": "APPSERV-47 fixes assessment of watches so that stopped or disabled watches have no effect on visuals", "committedDate": "2020-01-28T16:19:19Z", "type": "commit"}, {"oid": "7b87e25bff7f42d0fa3ba5067525a6bb1d22796f", "url": "https://github.com/payara/Payara/commit/7b87e25bff7f42d0fa3ba5067525a6bb1d22796f", "message": "APPSERV-47 fixes editing of programmatic watches makes a deep copy", "committedDate": "2020-01-28T16:29:59Z", "type": "commit"}, {"oid": "92d6b048e0ef67b8473be887f3ccbf9726ccad03", "url": "https://github.com/payara/Payara/commit/92d6b048e0ef67b8473be887f3ccbf9726ccad03", "message": "APPSERV-47 fixes various issues with custom watch editing", "committedDate": "2020-01-28T17:06:52Z", "type": "commit"}, {"oid": "65bab00427b9865b0efebbcb1207fbb7138f9b62", "url": "https://github.com/payara/Payara/commit/65bab00427b9865b0efebbcb1207fbb7138f9b62", "message": "APPSERV-47 better color contrast and component alignment", "committedDate": "2020-01-28T19:12:14Z", "type": "commit"}, {"oid": "70afe694a33d7e27c61180c5d1402e52fd52a77b", "url": "https://github.com/payara/Payara/commit/70afe694a33d7e27c61180c5d1402e52fd52a77b", "message": "APPSERV-47 fixes watch transitions from collection; fixes Indicator status, colors and triggers linked to alert system", "committedDate": "2020-01-29T10:28:59Z", "type": "commit"}, {"oid": "0ca228dc0401361a55f26ff51408f0900d9fa2b4", "url": "https://github.com/payara/Payara/commit/0ca228dc0401361a55f26ff51408f0900d9fa2b4", "message": "APPSERV-47 adds watch status indicator", "committedDate": "2020-01-29T10:56:02Z", "type": "commit"}, {"oid": "56ad00e09b09f19992086479953a2646e09ceee9", "url": "https://github.com/payara/Payara/commit/56ad00e09b09f19992086479953a2646e09ceee9", "message": "APPSERV-47 disabled watch names are persistent in monitoring console config", "committedDate": "2020-01-29T15:21:08Z", "type": "commit"}, {"oid": "917e10fec529e366d8ea3af836887f0e33a47f43", "url": "https://github.com/payara/Payara/commit/917e10fec529e366d8ea3af836887f0e33a47f43", "message": "APPSERV-47 adds setting to store custom watches to restore them at startup", "committedDate": "2020-01-30T11:17:30Z", "type": "commit"}, {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b", "url": "https://github.com/payara/Payara/commit/a6627c4b8c663131c537554ce30491a53daadd0b", "message": "APPSERV-47 generics and some more methods implemented", "committedDate": "2020-01-30T11:18:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5ODc4Nw==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372898787", "bodyText": "NB. I opted for a parameter for each action. This could also be done by adding a general parameter watch for the name and data for the JSON and another parameter action or so. But I found this easier to use. On the other hand these are not really intended to be used manually. They mainly exist so that the service can run them to update the config. Manual use is possible but will take a restart to take effect.", "author": "jbee", "createdAt": "2020-01-30T11:34:07Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/admin/SetMonitoringConsoleConfigurationCommand.java", "diffHunk": "@@ -61,22 +66,50 @@\n import org.glassfish.hk2.api.PerLookup;\n import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigSupport;\n+import org.jvnet.hk2.config.SingleConfigCode;\n+import org.jvnet.hk2.config.TransactionFailure;\n \n import com.sun.enterprise.config.serverbeans.Domain;\n import com.sun.enterprise.util.SystemPropertyConstants;\n \n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+\n @Service(name = \"set-monitoring-console-configuration\")\n @PerLookup\n @ExecuteOn({RuntimeType.DAS})\n @TargetType({DAS})\n+@RestEndpoints({\n+    @RestEndpoint(configBean = Domain.class,\n+            opType = RestEndpoint.OpType.POST,\n+            path = \"set-monitoring-console-configuration\",\n+            description = \"Set Monitoring Console Configuration\")\n+})\n public class SetMonitoringConsoleConfigurationCommand implements AdminCommand {\n \n+    private static final Logger LOGGER = Logger.getLogger(SetMonitoringConsoleConfigurationCommand.class.getName());\n+\n     private static final String MONITORING_CONSOLE_APP_NAME = \"__monitoringconsole\";\n     private final static String GLASSFISH_LIB_INSTALL_APPLICATIONS = \"glassfish/lib/install/applications\";\n \n     @Param(optional = true)\n     private Boolean enabled;\n \n+    @Param(optional = true, alias = \"disable-watch\")\n+    private String disableWatch;\n+\n+    @Param(optional = true, alias = \"enable-watch\")\n+    private String enableWatch;\n+\n+    @Param(optional = true, alias = \"add-watch-name\")\n+    private String addWatchName;\n+\n+    @Param(optional = true, alias = \"add-watch-json\")\n+    private String addWatchJson;\n+\n+    @Param(optional = true, alias = \"remove-watch\")\n+    private String removeWatch;\n+", "originalCommit": "a6627c4b8c663131c537554ce30491a53daadd0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNTE5MA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r373425190", "bodyText": "If they're not for manual use you can prepend them with an underscore (or two underscores, can't remember) to hide them as options on the command line (but not from REST).", "author": "Pandrex247", "createdAt": "2020-01-31T11:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5ODc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMTY4MA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372901680", "bodyText": "NB. Filling in generics the ConfigBeanProxy has shown to be not correct. While this might be the actual type the generics along the path to this point do not actually provide this guarantee.", "author": "jbee", "createdAt": "2020-01-30T11:41:13Z", "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -317,16 +318,16 @@ public synchronized boolean canCommit(Transaction t) throws TransactionFailure {\n         return currentTx==t;\n     }\n \n-    private void handleValidationException(Set constraintViolations) throws ConstraintViolationException {\n+    private void handleValidationException(Set<? extends ConstraintViolation<?>> constraintViolations) throws ConstraintViolationException {\n \n         if (constraintViolations != null && !constraintViolations.isEmpty()) {\n-            Iterator<ConstraintViolation<ConfigBeanProxy>> it = constraintViolations.iterator();", "originalCommit": "a6627c4b8c663131c537554ce30491a53daadd0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjIwNA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372902204", "bodyText": "NB. The loop body got extracted to the commitListChanges method because I needed a bindable type variable to use generics.", "author": "jbee", "createdAt": "2020-01-30T11:42:33Z", "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -394,43 +396,8 @@ else if ( s.startsWith(\"<\") ) {\n                 }\n                 appliedChanges.add(event);\n             }\n-            for (ProtectedList entry :  changedCollections.values())  {\n-                List<Object> originalList = entry.readOnly;\n-                for (PropertyChangeEvent event : entry.changeEvents) {\n-                    if (event.getOldValue()==null) {\n-                        originalList.add(event.getNewValue());\n-                    } else {\n-                        final Object toBeRemovedObj = event.getOldValue();\n-                        if ( toBeRemovedObj instanceof ConfigBeanProxy ) {\n-                            final Dom toBeRemoved = Dom.unwrap((ConfigBeanProxy)toBeRemovedObj);\n-                            for (int index=0;index<originalList.size();index++) {\n-                                Object element = originalList.get(index);\n-                                Dom dom = Dom.unwrap((ConfigBeanProxy) element);\n-                                if (dom==toBeRemoved) {\n-                                    Object newValue = event.getNewValue();\n-                                    if (newValue == null) {\n-                                        originalList.remove(index);\n-                                    } else {\n-                                        originalList.set(index, newValue);\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        else if ( toBeRemovedObj instanceof String ) {\n-                            final String toBeRemoved = (String)toBeRemovedObj;\n-                            for (int index=0;index<originalList.size();index++) {\n-                                final String item = (String)originalList.get(index);\n-                                if (item.equals(toBeRemoved)) {\n-                                    originalList.remove(index);\n-                                }\n-                            }\n-                        }\n-                        else {\n-                              throw new IllegalArgumentException();\n-                        }\n-                    }\n-                    appliedChanges.add(event);\n-                }\n+            for (ProtectedList<?> entry :  changedCollections.values())  {\n+                commitListChanges(entry, appliedChanges);", "originalCommit": "a6627c4b8c663131c537554ce30491a53daadd0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjUxNQ==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372902515", "bodyText": "NB. Changed to static access or the static method getWriteableView.", "author": "jbee", "createdAt": "2020-01-30T11:43:21Z", "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -472,32 +479,37 @@ public synchronized void abort(Transaction t) {\n             throw new TransactionFailure(\"Not part of a transaction\", null);\n         }\n         ConfigBean newBean = bean.allocate(type);\n-        WriteableView writeableView = bean.getHabitat().<ConfigSupport>getService(ConfigSupport.class).getWriteableView(newBean.getProxy(type), newBean);\n+        bean.getHabitat().<ConfigSupport>getService(ConfigSupport.class);\n+        WriteableView writeableView = ConfigSupport.getWriteableView(newBean.getProxy(type), newBean);", "originalCommit": "a6627c4b8c663131c537554ce30491a53daadd0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzEwMQ==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372903101", "bodyText": "NB. These actually work now \ud83d\udd7a", "author": "jbee", "createdAt": "2020-01-30T11:44:55Z", "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -597,12 +610,28 @@ public int size() {\n      * @throws IndexOutOfBoundsException if the given index is out of range\n      *                                   (<tt>index &lt; 0 || index &gt;= size()</tt>).\n      */\n-    public Object get(int index) {\n+    @Override\n+    public E get(int index) {\n         return proxied.get(index);\n     }\n \n     @Override\n-    public synchronized boolean add(Object object) {\n+    public int indexOf(Object object) {\n+        return proxied.indexOf(object);\n+    }\n+\n+    @Override\n+    public int lastIndexOf(Object object) {\n+        return proxied.lastIndexOf(object);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return proxied.toString();\n+    }", "originalCommit": "a6627c4b8c663131c537554ce30491a53daadd0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzY1MA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372903650", "bodyText": "NB. While the above two now work I think set is not behaving properly. I looked into that but decided to not mess with it and avoid using it.", "author": "jbee", "createdAt": "2020-01-30T11:46:17Z", "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -736,11 +762,31 @@ public synchronized boolean remove(Object object) {\n         return removed;\n     }\n \n-    public Object set(int index, Object object) {\n-        Object replaced = proxied.set(index, object);\n+    @Override\n+    public E remove(int index) {\n+        if (index >= size())\n+                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size());\n+        E removed = proxied.get(index);\n+        return remove(removed) ? removed : null;\n+    }\n+\n+    @Override\n+    public boolean removeIf(Predicate<? super E> filter) {\n+        boolean removedAny = false;\n+        for (E e : proxied) {\n+            if (filter.test(e) && remove(e)) {\n+                removedAny = true;\n+            }\n+        }\n+        return removedAny;\n+    }\n+\n+    @Override\n+    public E set(int index, E object) {", "originalCommit": "a6627c4b8c663131c537554ce30491a53daadd0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7a870a884af9f2a070e4cf1bbe5df8e9939dee0", "url": "https://github.com/payara/Payara/commit/a7a870a884af9f2a070e4cf1bbe5df8e9939dee0", "message": "APPSERV-47 indentation", "committedDate": "2020-01-30T12:20:02Z", "type": "commit"}, {"oid": "653ddacedda339f1bf04adca07388833587e160d", "url": "https://github.com/payara/Payara/commit/653ddacedda339f1bf04adca07388833587e160d", "message": "APPSERV-47 fixes watch state transition when stopping goes to white; removed watches are also removed from disabled list", "committedDate": "2020-01-30T13:55:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3MTg4Nw==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r373571887", "bodyText": "Is the full canonical name necessary here? I can't see a conflicting import, and neither does my IDE", "author": "Pandrex247", "createdAt": "2020-01-31T16:35:49Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/alert/Alert.java", "diffHunk": "@@ -84,6 +84,10 @@\n         public boolean isLessSevereThan(Level other) {\n             return ordinal() > other.ordinal();\n         }\n+\n+        public static fish.payara.monitoring.alert.Alert.Level parse(String level) {", "originalCommit": "653ddacedda339f1bf04adca07388833587e160d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzOTcwOA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374539708", "bodyText": "nope. good catch.", "author": "jbee", "createdAt": "2020-02-04T08:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3MTg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTYxMA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r373591610", "bodyText": "Think you mean 201 \ud83d\ude09", "author": "Pandrex247", "createdAt": "2020-01-31T17:19:10Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/configuration/MonitoringConsoleConfiguration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.configuration;\n+\n+import java.beans.PropertyVetoException;\n+import java.util.List;\n+\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+import org.jvnet.hk2.config.Element;\n+\n+import com.sun.enterprise.config.serverbeans.DomainExtension;\n+\n+/**\n+ * Configuration for the monitoring console core.\n+ * This is first of all the data and watch collection and evaluation.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.204", "originalCommit": "653ddacedda339f1bf04adca07388833587e160d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MjU5MA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374192590", "bodyText": "Right, was again confused.", "author": "jbee", "createdAt": "2020-02-03T16:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3NDMyOQ==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374174329", "bodyText": "I know this class already exists, but a description of what it's used for wouldn't go amiss - circumstance isn't an intuitive name to me in the context of alerts (in comparison to something like event).", "author": "Pandrex247", "createdAt": "2020-02-03T15:39:55Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/alert/Circumstance.java", "diffHunk": "@@ -137,4 +141,30 @@ public String toString() {\n         }\n         return str.toString();\n     }\n+\n+    public JsonValue toJSON() {", "originalCommit": "653ddacedda339f1bf04adca07388833587e160d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMjE3OA==", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374612178", "bodyText": "Added javadoc.", "author": "jbee", "createdAt": "2020-02-04T11:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3NDMyOQ=="}], "type": "inlineReview"}, {"oid": "9d4f419d7c4bfa9d56856010226cf3644d7df1bd", "url": "https://github.com/payara/Payara/commit/9d4f419d7c4bfa9d56856010226cf3644d7df1bd", "message": "APPSERV-47 addressed Andrew's comments", "committedDate": "2020-02-04T11:14:03Z", "type": "commit"}]}