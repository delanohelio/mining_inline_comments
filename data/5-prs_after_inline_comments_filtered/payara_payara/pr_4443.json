{"pr_number": 4443, "pr_title": "CUSTCOM-70 Fixed jersey-client issues with embedded distros of Payara", "pr_createdAt": "2020-01-20T05:39:13Z", "pr_url": "https://github.com/payara/Payara/pull/4443", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjY1NA==", "url": "https://github.com/payara/Payara/pull/4443#discussion_r368376654", "bodyText": "This part caused problems with embedded.", "author": "dmatej", "createdAt": "2020-01-20T05:40:01Z", "path": "appserver/payara-appserver-modules/jaxrs-client-tracing/src/main/java/fish/payara/requesttracing/jaxrs/client/JaxrsClientRequestTracingFilter.java", "diffHunk": "@@ -80,30 +74,13 @@\n  * @author Andrew Pielage\n  */\n public class JaxrsClientRequestTracingFilter implements ClientRequestFilter, ClientResponseFilter {\n-    public static String REQUEST_CONTEXT_TRACING_PREDICATE = \"fish.payara.requesttracing.jaxrs.client.TracingPredicate\";\n-\n-    private ServiceLocator serviceLocator;\n-    private RequestTracingService requestTracing;\n-    private OpenTracingService openTracing;\n+    public static final String REQUEST_CONTEXT_TRACING_PREDICATE = \"fish.payara.requesttracing.jaxrs.client.TracingPredicate\";\n \n-    /**", "originalCommit": "1f9718acb9674cb411d98d5e576bf7b3866e65a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NzE1NQ==", "url": "https://github.com/payara/Payara/pull/4443#discussion_r368377155", "bodyText": "Do you remember discussion about this if? :-)", "author": "dmatej", "createdAt": "2020-01-20T05:43:03Z", "path": "appserver/payara-appserver-modules/microprofile/opentracing/src/main/java/fish/payara/microprofile/opentracing/jaxrs/OpenTracingApplicationEventListener.java", "diffHunk": "@@ -83,19 +81,10 @@\n     @PostConstruct\n     public void postConstruct() {\n         LOG.finest(\"postConstruct()\");\n-        final ServiceLocator serviceLocator = Globals.getDefaultBaseServiceLocator();\n-        if (serviceLocator == null) {\n-            LOG.config(\"Default base service locator is null, JAX-RS server tracing is disabled.\");\n-            return;\n-        }\n-        final InvocationManager invocationManager = serviceLocator.getService(InvocationManager.class);\n-        this.requestTracing = serviceLocator.getService(RequestTracingService.class);\n-        this.openTracing = serviceLocator.getService(OpenTracingService.class);\n-        if (invocationManager == null || this.openTracing == null) {", "originalCommit": "1f9718acb9674cb411d98d5e576bf7b3866e65a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MjM4MQ==", "url": "https://github.com/payara/Payara/pull/4443#discussion_r368942381", "bodyText": "While this is faithful translation of original condition, I don't think operationName can be null, as it is result of Optional.orElse(annotationAttribute with default \"\").", "author": "pdudits", "createdAt": "2020-01-21T11:14:52Z", "path": "appserver/payara-appserver-modules/microprofile/opentracing/src/main/java/fish/payara/microprofile/opentracing/cdi/TracedInterceptor.java", "diffHunk": "@@ -198,7 +197,7 @@ private String getOperationName(final InvocationContext invocationContext, final\n             .getConfigOverrideValue(Traced.class, \"operationName\", invocationContext, String.class)\n             .orElse(traced.operationName());\n \n-        if (!\"\".equals(operationName)) {\n+        if (operationName == null || !operationName.isEmpty()) {", "originalCommit": "1f9718acb9674cb411d98d5e576bf7b3866e65a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3NDUyNA==", "url": "https://github.com/payara/Payara/pull/4443#discussion_r369674524", "bodyText": "Fixed, nice catch, I did not notice the Optional :)", "author": "dmatej", "createdAt": "2020-01-22T16:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MjM4MQ=="}], "type": "inlineReview"}, {"oid": "3536dd9284e7c0184386fcdf3139cef27c2e2e30", "url": "https://github.com/payara/Payara/commit/3536dd9284e7c0184386fcdf3139cef27c2e2e30", "message": "CUSTCOM-70 Fixed jersey-client issues with embedded distros of Payara\n\n- Jersey detected filters and tried them to initialized them even before\n  Payara container startup -> RunLevel exception\n- Now access to Payara maintained services is postponed to first request\n- This access was extracted to own class\n- Also removed some unused imports, etc.", "committedDate": "2020-01-22T16:43:08Z", "type": "forcePushed"}, {"oid": "3536dd9284e7c0184386fcdf3139cef27c2e2e30", "url": "https://github.com/payara/Payara/commit/3536dd9284e7c0184386fcdf3139cef27c2e2e30", "message": "CUSTCOM-70 Fixed jersey-client issues with embedded distros of Payara\n\n- Jersey detected filters and tried them to initialized them even before\n  Payara container startup -> RunLevel exception\n- Now access to Payara maintained services is postponed to first request\n- This access was extracted to own class\n- Also removed some unused imports, etc.", "committedDate": "2020-01-22T16:43:08Z", "type": "commit"}]}