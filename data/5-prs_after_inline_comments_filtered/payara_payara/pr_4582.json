{"pr_number": 4582, "pr_title": "APPSERV-59 Updates to MicroProfile Metrics 2.3", "pr_createdAt": "2020-03-20T07:40:49Z", "pr_url": "https://github.com/payara/Payara/pull/4582", "timeline": [{"oid": "e8e18645d58f71e55721f4da896c9cfc8e076f2f", "url": "https://github.com/payara/Payara/commit/e8e18645d58f71e55721f4da896c9cfc8e076f2f", "message": "APPSERV-59 initial update to MP Metrics 2.3", "committedDate": "2020-03-11T16:04:21Z", "type": "commit"}, {"oid": "fe4d3204dafa8d8e44ecf86cc6027236e57c1085", "url": "https://github.com/payara/Payara/commit/fe4d3204dafa8d8e44ecf86cc6027236e57c1085", "message": "APPSERV-59 deletes outdates class", "committedDate": "2020-03-11T16:07:16Z", "type": "commit"}, {"oid": "cf7ed86baad88727e7b34e03836c94090e5f39c5", "url": "https://github.com/payara/Payara/commit/cf7ed86baad88727e7b34e03836c94090e5f39c5", "message": "APPSERV-59 adds javadoc to AnnotationReader", "committedDate": "2020-03-11T18:37:35Z", "type": "commit"}, {"oid": "3d387fdf03a706fbdfbd19d7150cac71aba320e5", "url": "https://github.com/payara/Payara/commit/3d387fdf03a706fbdfbd19d7150cac71aba320e5", "message": "APPSERV-59 prepares unit tests for AnnotationReader", "committedDate": "2020-03-11T18:54:47Z", "type": "commit"}, {"oid": "46d4ac6870ec56e628d5b560c835d9130ec38476", "url": "https://github.com/payara/Payara/commit/46d4ac6870ec56e628d5b560c835d9130ec38476", "message": "APPSERV-59 adds unit tests for AnnotationReader", "committedDate": "2020-03-12T15:52:30Z", "type": "commit"}, {"oid": "28793a1f90bc3090d53b0d64065bdb19ae839b7f", "url": "https://github.com/payara/Payara/commit/28793a1f90bc3090d53b0d64065bdb19ae839b7f", "message": "APPSERV-59 makes AnnotationReader metadata automatically pick a MetricType when INVALID", "committedDate": "2020-03-12T17:30:15Z", "type": "commit"}, {"oid": "1bc821acd6c8684e6bdaa64beb16eafdee2f98bd", "url": "https://github.com/payara/Payara/commit/1bc821acd6c8684e6bdaa64beb16eafdee2f98bd", "message": "APPSERV-59 more tests for the AnnotationReader", "committedDate": "2020-03-13T11:18:15Z", "type": "commit"}, {"oid": "e8637118ea804236f2f471c6938a3d1cb6379b97", "url": "https://github.com/payara/Payara/commit/e8637118ea804236f2f471c6938a3d1cb6379b97", "message": "APPSERV-59 final set of AnnotationReader tests and a fix", "committedDate": "2020-03-13T12:19:46Z", "type": "commit"}, {"oid": "6eea00ccc08ebbb1292d9f02c8a827f53d3278d6", "url": "https://github.com/payara/Payara/commit/6eea00ccc08ebbb1292d9f02c8a827f53d3278d6", "message": "APPSERV-59 adds tests for AnnotationReader#getOrRegister", "committedDate": "2020-03-16T10:52:21Z", "type": "commit"}, {"oid": "8b31d11dd9cf2f216e122542d523f00840e2ac52", "url": "https://github.com/payara/Payara/commit/8b31d11dd9cf2f216e122542d523f00840e2ac52", "message": "APPSERV-59 adds unit tests for CountedInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-16T13:24:38Z", "type": "commit"}, {"oid": "3cdabfc9447aa700b0115a77cd9839e243d78628", "url": "https://github.com/payara/Payara/commit/3cdabfc9447aa700b0115a77cd9839e243d78628", "message": "APPSERV-59 adds tests for MeterdInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-16T15:39:02Z", "type": "commit"}, {"oid": "5d92c7ca6f65d3acdf570ce97894aa6e102545b5", "url": "https://github.com/payara/Payara/commit/5d92c7ca6f65d3acdf570ce97894aa6e102545b5", "message": "APPSERV-59 adds tests for TimedInterceptor and SimplyTimedInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-16T16:12:56Z", "type": "commit"}, {"oid": "a6e468b92b4557323c231d309ca4c075d6b0051e", "url": "https://github.com/payara/Payara/commit/a6e468b92b4557323c231d309ca4c075d6b0051e", "message": "APPSERV-59 adds tests for ConcurrentGuageInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-16T16:55:29Z", "type": "commit"}, {"oid": "bbf36c51e8b47fa13c4946ba62479b29de031288", "url": "https://github.com/payara/Payara/commit/bbf36c51e8b47fa13c4946ba62479b29de031288", "message": "APPSERV-59 concurrent gauges test finishing touches\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-17T09:43:47Z", "type": "commit"}, {"oid": "8b9fc5212cb4f0686ed5d5823da1f70f9677429d", "url": "https://github.com/payara/Payara/commit/8b9fc5212cb4f0686ed5d5823da1f70f9677429d", "message": "APPSERV-59 adds OpenMetrics exporter and tests", "committedDate": "2020-03-17T17:23:35Z", "type": "commit"}, {"oid": "c6be0f4b4da30de1c3070dee9cd2dac4af6cb094", "url": "https://github.com/payara/Payara/commit/c6be0f4b4da30de1c3070dee9cd2dac4af6cb094", "message": "APPSERV-59 more tests for the OpenMetricsExporter\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-18T10:04:11Z", "type": "commit"}, {"oid": "79047c6f659c49c809cce2653d8daaa3d88ff359", "url": "https://github.com/payara/Payara/commit/79047c6f659c49c809cce2653d8daaa3d88ff359", "message": "APPSERV-59 ensure no duplicate TYPE or HELP lines are exported; adds copyright headers\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-18T10:44:30Z", "type": "commit"}, {"oid": "1a9a06161e9c80ba0210fe95aecaf225c29442cb", "url": "https://github.com/payara/Payara/commit/1a9a06161e9c80ba0210fe95aecaf225c29442cb", "message": "APPSERV-59 adds JSON exporter and tests from specification\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-18T16:54:11Z", "type": "commit"}, {"oid": "e54bdf7dbd8b70458e8e8ad87dc97c7e022a1a25", "url": "https://github.com/payara/Payara/commit/e54bdf7dbd8b70458e8e8ad87dc97c7e022a1a25", "message": "APPSERV-59 adds JSON export and tests\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-18T20:33:43Z", "type": "commit"}, {"oid": "6a2706534646447b0ba95bcaaf923f056db4de40", "url": "https://github.com/payara/Payara/commit/6a2706534646447b0ba95bcaaf923f056db4de40", "message": "APPSERV-59 connect REST API with JsonExporter implementation", "committedDate": "2020-03-19T13:10:13Z", "type": "commit"}, {"oid": "41e6aa65396f46a725188d76ad2bc6f6d284e0a9", "url": "https://github.com/payara/Payara/commit/41e6aa65396f46a725188d76ad2bc6f6d284e0a9", "message": "APPSERV-59 fixes the REST API to exporter connection and JSON GET nesting for 'all metrics by scope'", "committedDate": "2020-03-19T14:27:00Z", "type": "commit"}, {"oid": "e8b91d0740bf350b16e79be8b057485d729b8e27", "url": "https://github.com/payara/Payara/commit/e8b91d0740bf350b16e79be8b057485d729b8e27", "message": "APPSERV-59 fixes misunderstanding on class level annotation naming rules and CDI setup (mostly)", "committedDate": "2020-03-20T14:34:43Z", "type": "commit"}, {"oid": "f70304a4344e41ca4c6e6db7699e61ba54561b46", "url": "https://github.com/payara/Payara/commit/f70304a4344e41ca4c6e6db7699e61ba54561b46", "message": "APPSERV-59 fixes unit to Metadata from annotation for none, Gauge annotation Nonbinding", "committedDate": "2020-03-20T15:36:09Z", "type": "commit"}, {"oid": "be3244f325ed7da3f4623db34e3e9c688ccb8d11", "url": "https://github.com/payara/Payara/commit/be3244f325ed7da3f4623db34e3e9c688ccb8d11", "message": "APPSERV-59 fixes CDI Metric qualifier setup, fixes display name inconsistency\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>", "committedDate": "2020-03-20T19:56:07Z", "type": "commit"}, {"oid": "9e33890e1d5fcf3cf5713ebc320c3e41c159ed41", "url": "https://github.com/payara/Payara/commit/9e33890e1d5fcf3cf5713ebc320c3e41c159ed41", "message": "fixes (work-around) CDI InjectionPoint implementation issue for parameter injecton", "committedDate": "2020-03-30T13:50:40Z", "type": "commit"}, {"oid": "996464eaa02a992b2527704565ec6019f0ad7ede", "url": "https://github.com/payara/Payara/commit/996464eaa02a992b2527704565ec6019f0ad7ede", "message": "APPSERV-59 removes unused imports", "committedDate": "2020-03-31T08:11:57Z", "type": "commit"}, {"oid": "0a601cdac301b1cece9b51949a54ab8a74f919d7", "url": "https://github.com/payara/Payara/commit/0a601cdac301b1cece9b51949a54ab8a74f919d7", "message": "Merge branch 'master' into APPSERV-59-mp-metrics-2.3", "committedDate": "2020-03-31T08:12:36Z", "type": "commit"}, {"oid": "bf3bbe030229c6453d9573488ed3fdee45359fe7", "url": "https://github.com/payara/Payara/commit/bf3bbe030229c6453d9573488ed3fdee45359fe7", "message": "APPSERV-59 work around gauge discovery order dependency with lazy gauge proxy", "committedDate": "2020-03-31T09:18:34Z", "type": "commit"}, {"oid": "0c0c5adc2a5b5aa0b50933090feae09f6bc47924", "url": "https://github.com/payara/Payara/commit/0c0c5adc2a5b5aa0b50933090feae09f6bc47924", "message": "APPSERV-59 fixes details in OpenMetrics and Json export formatting; fixes config source order", "committedDate": "2020-03-31T11:54:52Z", "type": "commit"}, {"oid": "41df514bd1d463f25d98628e522c523c9bb481d1", "url": "https://github.com/payara/Payara/commit/41df514bd1d463f25d98628e522c523c9bb481d1", "message": "APPSERV-59 updates copyright headers", "committedDate": "2020-03-31T12:17:19Z", "type": "commit"}, {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "url": "https://github.com/payara/Payara/commit/0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "message": "Merge branch 'master' into APPSERV-59-mp-metrics-2.3", "committedDate": "2020-03-31T15:37:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402184595", "bodyText": "What's the thought behind this method name? It doesn't quite gel with me.\nAnnotationReader.reading(annotation).???\nMy IDE doesn't find any usages for me to compare against.", "author": "Pandrex247", "createdAt": "2020-04-02T09:42:36Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/AnnotationReader.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.enterprise.inject.spi.Annotated;\n+import javax.enterprise.inject.spi.AnnotatedMember;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+import org.eclipse.microprofile.metrics.annotation.Gauge;\n+import org.eclipse.microprofile.metrics.annotation.Metered;\n+import org.eclipse.microprofile.metrics.annotation.Metric;\n+import org.eclipse.microprofile.metrics.annotation.SimplyTimed;\n+import org.eclipse.microprofile.metrics.annotation.Timed;\n+\n+/**\n+ * Utility that allows reading the different MP metrics {@link Annotation}s from different annotated abstractions\n+ * providing a common interface to allow generic handling and a common logic independent of the source of the\n+ * {@link Annotation}.\n+ *\n+ * Supported are:\n+ * <ul>\n+ * <li>{@link AnnotatedElement}</li>\n+ * <li>{@link Annotated}</li>\n+ * <li>{@link InjectionPoint}</li>\n+ * </ul>\n+ *\n+ * It is important to realise that {@link Annotated} and {@link InjectionPoint} have to be used as a source when\n+ * available as they allow to add or remove {@link Annotation} effectively acting as a runtime override of the compiled\n+ * information provided by {@link AnnotatedElement}.\n+ *\n+ * This utility also encodes most of the logic as defined by the MP Metrics specification. This includes the logic of\n+ * which annotation applied and how the metrics effective name if computed from annotation values and the annotated\n+ * element. For this reason the methods are documented in great detail.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ *\n+ * @param <T> Type of the MP metrics annotation\n+ */\n+public final class AnnotationReader<T extends Annotation> {\n+\n+    /**\n+     * Get {@link AnnotationReader} for a provided {@link Annotation}.\n+     *\n+     * @param annotationType\n+     * @return The {@link AnnotationReader} for the provided {@link Annotation} type\n+     * @throws IllegalAccessException In case no such reader exists\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Annotation> AnnotationReader<T> reading(Class<T> annotationType) {", "originalCommit": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0OTYwNg==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402249606", "bodyText": "AnnotationReader.reading(Metered.class) should be pretty self-explanatory I thought...", "author": "jbee", "createdAt": "2020-04-02T11:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MzE1NA==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402273154", "bodyText": "Renamed it to forAnnotation", "author": "jbee", "createdAt": "2020-04-02T12:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402199600", "bodyText": "Not a fan of this name - it sounds like a method.\nHow about simply MetricGetter or GenericMetricRegistry?\nYou could always go with the super generic MetricUtils \ud83d\ude04\nMore controversially would it work to move this into MetricsService?", "author": "Pandrex247", "createdAt": "2020-04-02T10:07:52Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/MetricGetOrRegister.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+\n+/**\n+ * Unfortunately the {@link MetricRegistry} has no generic versions of the get or register methods for the different\n+ * types of {@link Metric}s. Therefore this utility provides a generic API by mapping the generic methods to the type\n+ * specific ones.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ */\n+public final class MetricGetOrRegister<T extends Metric> {", "originalCommit": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MjQ4OQ==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402252489", "bodyText": "it sounds like a method.\n\nThat was intentional. It essentially is one. I think in MP Metrics 3.0 we can replace it with a method existing on the registry.\n\nMore controversially would it work to move this into MetricsService?\n\nI'd consider this a bad idea and the way to a big ball of mud architecture. Nothing in this class has any dependency to the MetricsService. Why create it just for the sake of putting it in a bucket?\nI have nothing against using a different name but MetricGetter and GenericMetricRegistry are confusing to me given what it does. In that case I rather name it just MetricUtils (or add it to such a class should it exist).", "author": "jbee", "createdAt": "2020-04-02T11:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTc0MQ==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402275741", "bodyText": "Renamed to MetricUtils", "author": "jbee", "createdAt": "2020-04-02T12:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwMTcyNA==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402201724", "bodyText": "How much effort is it to do this?", "author": "Pandrex247", "createdAt": "2020-04-02T10:11:41Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/interceptor/AbstractInterceptor.java", "diffHunk": "@@ -96,10 +101,13 @@ private Object timeoutInvocation(InvocationContext context) throws Exception {\n     private <E extends Member & AnnotatedElement> Object preInterceptor(InvocationContext context, E element) throws Exception {\n         initService();\n         if (metricsService.isEnabled()) {\n+            //FIXME there is an issue here: the element does not correctly reflect the updated annotations", "originalCommit": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDgxNg==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402254816", "bodyText": "I opted to not open that box because of the change of behaviour it might bring. I don't think it is much work but it is this ugly inconsistency in CDI where you cannot ask for the Bean that is intercepted. Weld has a non standard way around it which allows to access the CDI level abstraction which has the correct picture. To be clear: this is just the difference between dynamic adds/removes of annotations on CDI level considered or not.", "author": "jbee", "createdAt": "2020-04-02T11:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwMTcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDc3Mw==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402214773", "bodyText": "I'm probably overlooking something, but why aren't you simply creating the AnnotationReader as the associated type?\nAnnotationReader<HISTOGRAM>", "author": "Pandrex247", "createdAt": "2020-04-02T10:35:18Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/producer/MetricProducer.java", "diffHunk": "@@ -51,105 +52,67 @@\n import org.eclipse.microprofile.metrics.Histogram;\n import org.eclipse.microprofile.metrics.Meter;\n import org.eclipse.microprofile.metrics.MetricRegistry;\n-import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n import org.eclipse.microprofile.metrics.Timer;\n import org.eclipse.microprofile.metrics.annotation.Metric;\n \n @Dependent\n public class MetricProducer {\n \n-    @Inject\n-    private MetricRegistry registry;\n+    private static final AnnotationReader<Metric> COUNTER = AnnotationReader.METRIC.asType(MetricType.COUNTER);\n+    private static final AnnotationReader<Metric> CONCURRENT_GAUGE = AnnotationReader.METRIC.asType(MetricType.CONCURRENT_GAUGE);\n+    private static final AnnotationReader<Metric> GAUGE = AnnotationReader.METRIC.asType(MetricType.GAUGE);\n+    private static final AnnotationReader<Metric> HISTOGRAM = AnnotationReader.METRIC.asType(MetricType.HISTOGRAM);", "originalCommit": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NTMxNA==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402255314", "bodyText": "Indeed. You always read @Metric annotations. Just that they refer or represent different metric types.", "author": "jbee", "createdAt": "2020-04-02T11:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzE2OA==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402217168", "bodyText": "I know it's not a part of this PR, but this is a horribly named class \ud83d\ude02\nCan we not simply call it ExponentiallyWeightedMovingAverage?", "author": "Pandrex247", "createdAt": "2020-04-02T10:39:44Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/EWMA.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- * \n- *    Copyright (c) [2018] Payara Foundation and/or its affiliates. All rights reserved.\n- * \n+ *\n+ *    Copyright (c) [2018-2020] Payara Foundation and/or its affiliates. All rights reserved.", "originalCommit": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTk1NQ==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402275955", "bodyText": "Renamed-", "author": "jbee", "createdAt": "2020-04-02T12:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402221084", "bodyText": "I take it this is required somewhere?\nIt doesn't seem to be used in any comparison.", "author": "Pandrex247", "createdAt": "2020-04-02T10:47:22Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/MetricRegistryImpl.java", "diffHunk": "@@ -341,11 +383,16 @@ public void removeMatching(MetricFilter filter) {\n \n     private <T extends Metric> T findMetricOrCreate(String name, MetricType metricType, Tag... tags) {\n         checkNameIsNotNullOrEmpty(name);\n-        return findMetricOrCreate(Metadata.builder().withName(name).withType(metricType).build(), true, tags);\n+        Metadata metadata = Metadata.builder()\n+                .withName(name)\n+                .withType(metricType)\n+                .withOptionalDisplayName(null)", "originalCommit": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NTk5NQ==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402255995", "bodyText": "You talk about the display name?", "author": "jbee", "createdAt": "2020-04-02T11:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MzY2MQ==", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402293661", "bodyText": "This is a work-around to get a uniform result for both type and display name. This is important since Metadata is compared with equals and expected to be same in case of shared family.\nSee also eclipse/microprofile-metrics#557 and eclipse/microprofile-metrics#558", "author": "jbee", "createdAt": "2020-04-02T13:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA=="}], "type": "inlineReview"}, {"oid": "4ce0dd855575f9f78e83e3b451dbee070368dba9", "url": "https://github.com/payara/Payara/commit/4ce0dd855575f9f78e83e3b451dbee070368dba9", "message": "APPSERV-59 renamed classes and methods as suggested by review", "committedDate": "2020-04-02T12:28:38Z", "type": "commit"}, {"oid": "a4cdc26fe6aaa895e558dee3e191451d9a309af2", "url": "https://github.com/payara/Payara/commit/a4cdc26fe6aaa895e558dee3e191451d9a309af2", "message": "Merge branch 'APPSERV-59-mp-metrics-2.3' of github.com:jbee/Payara into APPSERV-59-mp-metrics-2.3", "committedDate": "2020-04-02T12:28:56Z", "type": "commit"}]}