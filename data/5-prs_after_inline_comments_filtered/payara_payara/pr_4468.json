{"pr_number": 4468, "pr_title": "QACI-80 Cleanup of web-core", "pr_createdAt": "2020-02-04T14:12:04Z", "pr_url": "https://github.com/payara/Payara/pull/4468", "timeline": [{"oid": "a390dcede94c79f7530cf7df0f5c2731e8bd9d7d", "url": "https://github.com/payara/Payara/commit/a390dcede94c79f7530cf7df0f5c2731e8bd9d7d", "message": "Cleanup of web-core com.sun.enterprise* and catalina.authenticator.*", "committedDate": "2019-05-22T14:36:56Z", "type": "commit"}, {"oid": "d14db9c62c436ec329c77040c443228d078e2733", "url": "https://github.com/payara/Payara/commit/d14db9c62c436ec329c77040c443228d078e2733", "message": "Merge branch 'master' of https://github.com/Payara/payara into cleanup-web-core", "committedDate": "2019-11-22T15:01:23Z", "type": "commit"}, {"oid": "aa6d3e139c9d5babe31237f0f26126fd2767cac5", "url": "https://github.com/payara/Payara/commit/aa6d3e139c9d5babe31237f0f26126fd2767cac5", "message": "Cleanup of catalina/connector and cataline/core", "committedDate": "2019-11-22T16:53:56Z", "type": "commit"}, {"oid": "620f5dc236e067e051ff549bb4253322a499592a", "url": "https://github.com/payara/Payara/commit/620f5dc236e067e051ff549bb4253322a499592a", "message": "Cleanup of cataline deploy - servlets", "committedDate": "2019-11-22T17:50:38Z", "type": "commit"}, {"oid": "b27a19fa3e3717007f766e8508dfac54e2b1e36f", "url": "https://github.com/payara/Payara/commit/b27a19fa3e3717007f766e8508dfac54e2b1e36f", "message": "Cleanup of catalina session-ssi packages", "committedDate": "2019-11-25T11:50:08Z", "type": "commit"}, {"oid": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "url": "https://github.com/payara/Payara/commit/eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "message": "QACI-80 Cleanup of web-core tomcat and glassfish packages\n\nMainly adding in @Override", "committedDate": "2020-02-04T14:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxNDI1NQ==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374714255", "bodyText": "Could even use parseBoolean", "author": "jbee", "createdAt": "2020-02-04T14:49:03Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/connector/Constants.java", "diffHunk": "@@ -101,7 +102,5 @@\n      */\n     // In Tomcat, the following constant is in org.apache.coyote.Constants with default true.\n     public static final boolean USE_CUSTOM_STATUS_MSG_IN_HEADER =\n-        Boolean.valueOf(System.getProperty(\n-                \"org.apache.coyote.USE_CUSTOM_STATUS_MSG_IN_HEADER\",\n-                \"true\")).booleanValue(); \n+            Boolean.valueOf(System.getProperty(\"org.apache.coyote.USE_CUSTOM_STATUS_MSG_IN_HEADER\",\"true\")); ", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1Nzg1NQ==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374857855", "bodyText": "How about Boolean.getBoolean()?", "author": "svendiedrichsen", "createdAt": "2020-02-04T18:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxNDI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNzMwMw==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375107303", "bodyText": "In general yes, in this particular case that method would not have a default value of true if the system property does not exist.", "author": "jbee", "createdAt": "2020-02-05T08:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxNDI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxNzI3NA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374717274", "bodyText": "could be boolean crossContext = crossContextFlag == Boolean.True;", "author": "jbee", "createdAt": "2020-02-04T14:53:51Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/core/ApplicationDispatcher.java", "diffHunk": "@@ -670,7 +672,7 @@ private void invoke(ServletRequest request, ServletResponse response,\n             throws IOException, ServletException {\n         //START OF 6364900 original invoke has been renamed to doInvoke\n         boolean crossContext = false;\n-        if (crossContextFlag != null && crossContextFlag.booleanValue()) {\n+        if (crossContextFlag != null && crossContextFlag) {", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxODgwNQ==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374718805", "bodyText": "This works and it is kind of \"smart\" but also confusing. As instanceof is always false for null the else could be made into } else if (values1 != null) {  instead.", "author": "jbee", "createdAt": "2020-02-04T14:56:14Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/core/ApplicationHttpRequest.java", "diffHunk": "@@ -935,27 +935,25 @@ void initSpecialAttributes(String requestUri,\n \n         ArrayList<String> results = new ArrayList<String>();\n \n-        if (values1 == null)\n-            ;\n-        else if (values1 instanceof String)\n-            results.add((String)values1);\n-        else if (values1 instanceof String[]) {\n+        if (values1 == null) {", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxOTY5NA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374719694", "bodyText": "intentional?", "author": "jbee", "createdAt": "2020-02-04T14:57:35Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/core/DummyRequest.java", "diffHunk": "@@ -80,7 +80,7 @@\n  * @author Remy Maucherat\n  * @version $Revision: 1.5.6.2 $ $Date: 2008/04/17 18:37:07 $\n  */\n-\n+@SuppressWarnings(\"override\")", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNzk4Mg==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375237982", "bodyText": "Yes, intentional as lines 200-336 are each a one line method inherited from parent, each of which returns null. I thought it better to suppress warnings then add in a hunderd @Override annotations for methods that do nothing.", "author": "Cousjava", "createdAt": "2020-02-05T12:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxOTY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNTY4Ng==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374725686", "bodyText": "There even is Arrays.copyOf(methods, methods.length + 1) for such cases.", "author": "jbee", "createdAt": "2020-02-04T15:06:37Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/deploy/SecurityCollection.java", "diffHunk": "@@ -213,8 +213,7 @@ public void addMethod(String method) {\n         if (method == null)\n             return;\n         String results[] = new String[methods.length + 1];\n-        for (int i = 0; i < methods.length; i++)\n-            results[i] = methods[i];\n+        System.arraycopy(methods, 0, results, 0, methods.length);", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTEyMA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375175120", "bodyText": "Arrays.copyOf just calls System.arraycopy", "author": "Cousjava", "createdAt": "2020-02-05T10:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNTY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMTI5Mg==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375211292", "bodyText": "Its a more readable call if you want a copy with one extra element at the end and the extra function level is going to be inlined anyhow. Just a suggestion.", "author": "jbee", "createdAt": "2020-02-05T11:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNTY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNjc4NA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374726784", "bodyText": "That loop looks like a Arrays.asList(methods).contains(method)", "author": "jbee", "createdAt": "2020-02-04T15:08:16Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/deploy/SecurityCollection.java", "diffHunk": "@@ -264,9 +261,10 @@ public boolean findMethod(String method) {\n \n         if (methods.length == 0)\n             return (true);\n-        for (int i = 0; i < methods.length; i++) {\n-            if (methods[i].equals(method))\n+        for (String method1 : methods) {", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMTcxOA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374731718", "bodyText": "Last expression looks changed and maybe should also use contains, I'd expect command.contains(\"..\" + File.separator) to be consistent with the other two.", "author": "jbee", "createdAt": "2020-02-04T15:15:44Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/servlets/CGIServlet.java", "diffHunk": "@@ -1667,9 +1668,9 @@ protected void run() throws IOException {\n                 log(\"runCGI(envp=[\" + env + \"], command=\" + command + \")\");\n             }\n \n-            if ((command.indexOf(File.separator + \".\" + File.separator) >= 0)\n-                || (command.indexOf(File.separator + \"..\") >= 0)\n-                || (command.indexOf(\"..\" + File.separator) >= 0)) {\n+            if ((command.contains(File.separator + \".\" + File.separator))\n+                || (command.contains(File.separator + \"..\"))\n+                || (command.indexOf(File.separator + \"..\") >= 0)) {", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzk0Nw==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374733947", "bodyText": "I am surprised by this change. I think a not found for indexOf is commonly checked as < 0 as some APIs would return e.g. -4 to say it would be inserted at index 3 and such things so doing a < 0 check is more defensive than == -1. Is there some special reason to check for == -1 specifically?", "author": "jbee", "createdAt": "2020-02-04T15:18:38Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/servlets/CGIServlet.java", "diffHunk": "@@ -1692,7 +1693,7 @@ protected void run() throws IOException {\n \n             //create query arguments\n             StringBuilder cmdAndArgs = new StringBuilder();\n-            if (command.indexOf(\" \") < 0) {\n+            if (command.indexOf(' ') == -1) {", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NzQ1Ng==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375177456", "bodyText": "I have never heard of something other than -1 being returned, the documentation for String says  if no such character occurs in this string, then -1 is returned.", "author": "Cousjava", "createdAt": "2020-02-05T10:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjEwMw==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375212103", "bodyText": "Its not a common thing in Java I guess but there might be the odd API doing that. String isn't. I was just wondering as I have seen lots of < 0 to do this and far less == -1.", "author": "jbee", "createdAt": "2020-02-05T11:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2MzA3Mg==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r375263072", "bodyText": "One example In Java is https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#binarySearch(java.lang.Object[],%20java.lang.Object)", "author": "jbee", "createdAt": "2020-02-05T13:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4OTA1OA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r378989058", "bodyText": "Comparing < is generally faster than == (comparing bits and searching first difference). But on current machines it is only a premature optimization, because both are single cpu tact and the most expensive opration is moving data from/to memory right in time to be processed.\nSo the most important thing is readibility, but ... yet one thing. indexOf(' ') takes int as argument, not char, and it has to manage UTF-16 characters, so it even is not faster.\nIt tried to test it, but results are not provable, seems rather similar for all three variants (contains(\" \") is third).", "author": "dmatej", "createdAt": "2020-02-13T16:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMzk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNzc0Mw==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374737743", "bodyText": "Specify the product version when the Java name was added to the API specification (if different from the implementation). For example, if a package, class, interface or member was added to the Java 2 Platform, Standard Edition, API Specification at version 1.2, use: @since 1.2", "author": "jbee", "createdAt": "2020-02-04T15:23:58Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/session/BaseSessionLocker.java", "diffHunk": "@@ -73,21 +68,25 @@\n /**\n  *\n  * @author lwhite\n+ * @since January 18, 2006", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0MDQ3MQ==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374740471", "bodyText": "Should be sb.append(\"attrName = \").append(nextAttrName);", "author": "jbee", "createdAt": "2020-02-04T15:28:03Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/session/StandardSession.java", "diffHunk": "@@ -1197,8 +1203,8 @@ public String toString() {\n                 String nextAttrName = attrNamesEnum.nextElement();\n                 Object nextAttrValue = getAttribute(nextAttrName);\n                 sb.append(\"\\n\");\n-                sb.append(\"attrName = \" + nextAttrName);\n-                sb.append(\" : attrValue = \" + nextAttrValue);\n+                sb.append(nextAttrName + \"attrName = \");", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1NDYxMA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374754610", "bodyText": "Goto considered harmful :)\nIf I don't read this wrong this should create an endless loop as going to OUTER does not change index so we go down same path. Better is to so a if (args[index] != null) around the switch.", "author": "jbee", "createdAt": "2020-02-04T15:49:57Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/startup/Tool.java", "diffHunk": "@@ -177,23 +178,34 @@ public static void main(String args[]) {\n \n         // Process command line options\n         int index = 0;\n+        OUTER:\n         while (true) {\n             if (index == args.length) {\n                 usage();\n                 System.exit(1);\n             }\n-            if (\"-ant\".equals(args[index]))\n-                ant = true;\n-            else if (\"-common\".equals(args[index]))\n-                common = true;\n-            //else if (\"-debug\".equals(args[index]))\n-            //    debug = true;\n-            else if (\"-server\".equals(args[index]))\n-                server = true;\n-            else if (\"-shared\".equals(args[index]))\n-                shared = true;\n-            else\n-                break;\n+            if (null == args[index]) {\n+                break OUTER;", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1NTExNA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374755114", "bodyText": "contains", "author": "jbee", "createdAt": "2020-02-04T15:50:46Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/util/DOMWriter.java", "diffHunk": "@@ -142,9 +143,11 @@ else if( encoding.equalsIgnoreCase( \"UTF-16\" ) )\n \n \n    public static boolean isValidJavaEncoding( String encoding ) {\n-      for ( int i = 0; i < MIME2JAVA_ENCODINGS.length; i++ )\n-         if ( encoding.equals( MIME2JAVA_ENCODINGS[i] ) )\n-            return (true);\n+       for (String MIME2JAVA_ENCODINGS1 : MIME2JAVA_ENCODINGS) {\n+           if (encoding.equals(MIME2JAVA_ENCODINGS1)) {\n+               return (true);", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1NjMyOA==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374756328", "bodyText": "appending the empty string surely is not needed. This was done to cause a toString() on the result of isFulfilled() which I assume isn't needed.", "author": "jbee", "createdAt": "2020-02-04T15:52:31Z", "path": "appserver/web/web-core/src/main/java/org/apache/catalina/util/ManifestResource.java", "diffHunk": "@@ -183,13 +184,14 @@ public boolean isFulfilled() {\n         return true;\n     }\n     \n+    @Override\n     public String toString() {\n \n         StringBuilder sb = new StringBuilder(\"ManifestResource[\");\n         sb.append(resourceName);\n \n         sb.append(\", isFulfilled=\");\n-        sb.append(isFulfilled() +\"\");\n+        sb.append(isFulfilled()).append(\"\");", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2MDYzMg==", "url": "https://github.com/payara/Payara/pull/4468#discussion_r374760632", "bodyText": "paramClassNames = paramTypes.clone();", "author": "jbee", "createdAt": "2020-02-04T15:58:50Z", "path": "appserver/web/web-core/src/main/java/org/apache/tomcat/util/digester/CallMethodRule.java", "diffHunk": "@@ -309,9 +310,7 @@ public CallMethodRule(  int targetOffset,\n             // copy the parameter class names into an array\n             // the classes will be loaded when the digester is set \n             this.paramClassNames = new String[paramTypes.length];\n-            for (int i = 0; i < this.paramClassNames.length; i++) {\n-                this.paramClassNames[i] = paramTypes[i];\n-            }\n+            System.arraycopy(paramTypes, 0, this.paramClassNames, 0, this.paramClassNames.length);", "originalCommit": "eb0c5d036e678d7d01515936ff5b1a1f9261ba9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "389103a0f826052fd791e2ccbccc0bd0f27b6e33", "url": "https://github.com/payara/Payara/commit/389103a0f826052fd791e2ccbccc0bd0f27b6e33", "message": "QACI-80 Requested changes from review", "committedDate": "2020-02-05T10:49:28Z", "type": "commit"}, {"oid": "27ce60786e6f02fd9be23a4b54d26531605b5d82", "url": "https://github.com/payara/Payara/commit/27ce60786e6f02fd9be23a4b54d26531605b5d82", "message": "QACI-80 Removed unused Tool.java", "committedDate": "2020-02-05T15:17:38Z", "type": "commit"}]}