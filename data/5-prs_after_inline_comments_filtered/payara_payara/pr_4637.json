{"pr_number": 4637, "pr_title": "APPSERV-141 Fixes undefined behaviour of PayaraConfig ", "pr_createdAt": "2020-04-21T10:58:11Z", "pr_url": "https://github.com/payara/Payara/pull/4637", "timeline": [{"oid": "6b75cc8122611896071b65dce5828b0f9751200a", "url": "https://github.com/payara/Payara/commit/6b75cc8122611896071b65dce5828b0f9751200a", "message": "APPSERV-141 fixes undefined behaviour of PayaraConfig for arrays, lists and sets", "committedDate": "2020-04-21T10:49:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5MTc3Mw==", "url": "https://github.com/payara/Payara/pull/4637#discussion_r412091773", "bodyText": "I was looking into not using getSetValues and getListValues directly (plain Config API access to avoid cast to PayaraConfig) as I realised that these should be implemented by using array access and later wrapping the returned array in a List or Set. What is unclear is how the default gets passed on using the standard API. So I made this cleanup as a preparation and noticed that it was simply assumed that the actual type argument is a Class type which it might not be so I added a more descriptive exception instead of the ClassCastException that was caused in such a case. As far as I understand it using a non Class type is not allowed according to standard but a user might get the idea it is valid and use a type like List<List<String>>.", "author": "jbee", "createdAt": "2020-04-21T11:11:02Z", "path": "appserver/payara-appserver-modules/microprofile/config/src/main/java/fish/payara/microprofile/config/cdi/ConfigPropertyProducer.java", "diffHunk": "@@ -111,4 +112,14 @@ public static final Object getGenericProperty(InjectionPoint ip) {\n         return result;\n     }\n \n+    private static Class<?> getElementTypeFrom(ParameterizedType collectionType) {\n+        Type elementType = collectionType.getActualTypeArguments()[0];\n+        if (!(elementType instanceof Class)) {\n+            throw new DeploymentException(", "originalCommit": "6b75cc8122611896071b65dce5828b0f9751200a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}