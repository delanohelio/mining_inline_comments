{"pr_number": 4534, "pr_title": "APPSERV-55 Addresses causes of FT & Metrics TCK failures", "pr_createdAt": "2020-02-25T16:57:03Z", "pr_url": "https://github.com/payara/Payara/pull/4534", "timeline": [{"oid": "ca4c0fb6a614556b9657504fb345542114d7a2cc", "url": "https://github.com/payara/Payara/commit/ca4c0fb6a614556b9657504fb345542114d7a2cc", "message": "APPSERV-55 more detailed bulkhead tests", "committedDate": "2020-02-25T08:59:56Z", "type": "commit"}, {"oid": "37905230f89e46721b7174e8ea024b4a13940083", "url": "https://github.com/payara/Payara/commit/37905230f89e46721b7174e8ea024b4a13940083", "message": "APPSERV-55 more tests for exception cases", "committedDate": "2020-02-25T10:35:21Z", "type": "commit"}, {"oid": "2154a9cce3c6f0e5b713e8976da9bb37e4a88fee", "url": "https://github.com/payara/Payara/commit/2154a9cce3c6f0e5b713e8976da9bb37e4a88fee", "message": "APPSERV-55 checks method result propagation, adds first converted TCK test", "committedDate": "2020-02-25T11:53:43Z", "type": "commit"}, {"oid": "d438ec0543c11b08fe9cc3dd26dec8948dcf7fe4", "url": "https://github.com/payara/Payara/commit/d438ec0543c11b08fe9cc3dd26dec8948dcf7fe4", "message": "APPSERV-55 synchronisation via single map - fixes remove semantics", "committedDate": "2020-02-25T16:54:01Z", "type": "commit"}, {"oid": "1492ca7374e31ddf3b42be35cd1e3f55170a23f5", "url": "https://github.com/payara/Payara/commit/1492ca7374e31ddf3b42be35cd1e3f55170a23f5", "message": "APPSERV-55 adds tests (and fixes) for MetricRegistryImpl", "committedDate": "2020-02-26T12:54:28Z", "type": "commit"}, {"oid": "589c7adc7afef848e38b1b45ed39fae4ac27750f", "url": "https://github.com/payara/Payara/commit/589c7adc7afef848e38b1b45ed39fae4ac27750f", "message": "APPSERV-55 updates copyright headers", "committedDate": "2020-02-26T13:00:45Z", "type": "commit"}, {"oid": "ef0b70c5a9d65f508fbc4702b9a7e67038e0820a", "url": "https://github.com/payara/Payara/commit/ef0b70c5a9d65f508fbc4702b9a7e67038e0820a", "message": "APPSERV-55 changes metric access to direct access by ID (performance)", "committedDate": "2020-02-26T16:41:49Z", "type": "commit"}, {"oid": "d6022b3bd11a5b2f468a0118d3d2d96568021488", "url": "https://github.com/payara/Payara/commit/d6022b3bd11a5b2f468a0118d3d2d96568021488", "message": "APPSERV-55 fixes FT Gauge linking (when Gauge already exists)", "committedDate": "2020-02-26T17:20:28Z", "type": "commit"}, {"oid": "2064c40f89e03fa0045626e24b1bd57069ebaa95", "url": "https://github.com/payara/Payara/commit/2064c40f89e03fa0045626e24b1bd57069ebaa95", "message": "APPSERV-55 only create a bound FT metrics implementation per method", "committedDate": "2020-02-27T10:22:21Z", "type": "commit"}, {"oid": "aea1ef19b757e0e37c8c8500817ae1377b564af9", "url": "https://github.com/payara/Payara/commit/aea1ef19b757e0e37c8c8500817ae1377b564af9", "message": "Merge branch 'APPSERV-55-bulkhead-race' into APPSERV-55-metrics-race", "committedDate": "2020-02-27T10:23:05Z", "type": "commit"}, {"oid": "3055c0ed0701b9bf33c85bd6592e042f086cd874", "url": "https://github.com/payara/Payara/commit/3055c0ed0701b9bf33c85bd6592e042f086cd874", "message": "APPSERV-55 adds more converted TCK tests for Bulkhead", "committedDate": "2020-02-27T12:12:32Z", "type": "commit"}, {"oid": "b67581bf381e753e6ce20f9fe5c891e8b6cf6b82", "url": "https://github.com/payara/Payara/commit/b67581bf381e753e6ce20f9fe5c891e8b6cf6b82", "message": "APPSERV-55 improves bulkhead concurrency unit tests", "committedDate": "2020-02-27T13:56:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTk4NA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r385365984", "bodyText": "How about using an Optional here?", "author": "svendiedrichsen", "createdAt": "2020-02-27T20:55:24Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java", "diffHunk": "@@ -200,9 +205,17 @@ public FaultToleranceConfig getConfig(InvocationContext context, Stereotypes ste\n \n     @Override\n     public FaultToleranceMetrics getMetrics(InvocationContext context) {\n+\n         FaultToleranceApplicationState appState = getApplicationState(getApplicationContext(context));\n-        return appState.getMetrics().updateAndGet(\n-                metrics -> metrics != null ? metrics : new BindableFaultToleranceMetrics()).bindTo(context);\n+        return appState.getMetrics(this::getApplicationMetricRegistry, FaultToleranceUtils.getCanonicalMethodName(context));\n+    }\n+\n+    private MetricRegistry getApplicationMetricRegistry() {", "originalCommit": "2064c40f89e03fa0045626e24b1bd57069ebaa95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzNjM0Nw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r385536347", "bodyText": "PR is still in development. Let me get back when I feel ready.", "author": "jbee", "createdAt": "2020-02-28T07:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxNjI2OA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r385816268", "bodyText": "sure", "author": "svendiedrichsen", "createdAt": "2020-02-28T17:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MDg0NA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387570844", "bodyText": "@svendiedrichsen I had a look now. The return value is just used internally. I didn't feel that Optional would have improved the code. This might be because I am not a big fan personally or because Optional isn't used in our codebase generally. I don't feel starting here is the way to go. Not even sure I ever want to start using it but if this should be something broadly applied to the codebase. To go from having to expect null basically everywhere to there should not be null references and if that means you need an Optional then use one.", "author": "jbee", "createdAt": "2020-03-04T10:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTk4NA=="}], "type": "inlineReview"}, {"oid": "5549c32179971aff23e4bce929108b7467fded4c", "url": "https://github.com/payara/Payara/commit/5549c32179971aff23e4bce929108b7467fded4c", "message": "APPSERV-55 single context binding per FT method invocation", "committedDate": "2020-02-28T11:02:15Z", "type": "commit"}, {"oid": "2b09c35f3d58f3c36f97d20e12d034199d4d1b6a", "url": "https://github.com/payara/Payara/commit/2b09c35f3d58f3c36f97d20e12d034199d4d1b6a", "message": "APPSERV-55 implements Bulkhead in a more obvious correct way", "committedDate": "2020-03-02T09:56:36Z", "type": "commit"}, {"oid": "25e54db87f1b26fd39d387b03b1d21989044a37e", "url": "https://github.com/payara/Payara/commit/25e54db87f1b26fd39d387b03b1d21989044a37e", "message": "APPSERV-55 adds more tests for bulkhead without queue", "committedDate": "2020-03-02T11:57:49Z", "type": "commit"}, {"oid": "360033ca0b46f55954e658cc767d9ba3aaab4835", "url": "https://github.com/payara/Payara/commit/360033ca0b46f55954e658cc767d9ba3aaab4835", "message": "APPSERV-55 better testing for BulkheadException in case of queue and running space exceeded", "committedDate": "2020-03-02T12:47:58Z", "type": "commit"}, {"oid": "94553e21e62e4b797d1eeb0655dc09939da9d584", "url": "https://github.com/payara/Payara/commit/94553e21e62e4b797d1eeb0655dc09939da9d584", "message": "APPSERV-55 simpifies the map holding FT state", "committedDate": "2020-03-02T16:23:04Z", "type": "commit"}, {"oid": "c5d28ac8ca547bf714b443ea93a3decf576392c6", "url": "https://github.com/payara/Payara/commit/c5d28ac8ca547bf714b443ea93a3decf576392c6", "message": "APPSERV-55 fixes metrics with different tags wrongly colliding", "committedDate": "2020-03-03T08:43:57Z", "type": "commit"}, {"oid": "0d14ace50c80f741c0c159e87cb5d53ff953e3d0", "url": "https://github.com/payara/Payara/commit/0d14ace50c80f741c0c159e87cb5d53ff953e3d0", "message": "APPSERV-55 fixes JMX metrics Metadata reuse detection by implementing equals and hashCode", "committedDate": "2020-03-03T09:02:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4MDQ1OQ==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r386880459", "bodyText": "NB. Both methods are copied straight from DefaultMetadata so they follow the same logic. This is needed because the registry checks for illegal reuse comparing new and existing Metadata with equals. Not having it implemented fails the test and considers them not equal and therefore illegal for reuse. It is beyond me how this did not pop up earlier.", "author": "jbee", "createdAt": "2020-03-03T09:06:04Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/jmx/MBeanMetadata.java", "diffHunk": "@@ -259,16 +233,43 @@ public MetricType getTypeRaw() {\n     public boolean isReusable() {\n         return reusable;\n     }\n-    \n+\n     public void setTags(List<XmlTag> tags) {\n         this.tags = tags;\n     }\n-    \n+\n     public void addTags(List<XmlTag> tags) {\n         if (this.tags == null) {\n             this.tags = new ArrayList<>();\n         }\n         this.tags.addAll(tags);\n     }\n \n+    @Override", "originalCommit": "0d14ace50c80f741c0c159e87cb5d53ff953e3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4MDgzMw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r386880833", "bodyText": "NB. getNames() is a view, whereas getMetadata() is computed collection, therefore the change.", "author": "jbee", "createdAt": "2020-03-03T09:06:45Z", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/jmx/MBeanMetadataHelper.java", "diffHunk": "@@ -88,7 +88,7 @@\n     public List<MBeanMetadata> registerMetadata(MetricRegistry metricRegistry,\n             List<MBeanMetadata> metadataList, boolean isRetry) {\n \n-        if (!metricRegistry.getMetadata().isEmpty() && !isRetry) {\n+        if (!metricRegistry.getNames().isEmpty() && !isRetry) {", "originalCommit": "0d14ace50c80f741c0c159e87cb5d53ff953e3d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "799e60007ad097cabe2c200573c9b71fd3da8f37", "url": "https://github.com/payara/Payara/commit/799e60007ad097cabe2c200573c9b71fd3da8f37", "message": "APPSERV-55 updates/adds copyright header", "committedDate": "2020-03-03T09:57:56Z", "type": "commit"}, {"oid": "3bae292992e60bce3057b2ed91e81af0e0f28670", "url": "https://github.com/payara/Payara/commit/3bae292992e60bce3057b2ed91e81af0e0f28670", "message": "APPSERV-55 changes FT service config from executor names to max pool sizes", "committedDate": "2020-03-03T13:13:02Z", "type": "commit"}, {"oid": "4e37c6cbb3f5d9fc5ea1720d2eb1747dc522c138", "url": "https://github.com/payara/Payara/commit/4e37c6cbb3f5d9fc5ea1720d2eb1747dc522c138", "message": "APPSERV-55 binds policy at start of FT invocation and logs a warning in case FT bulkhead would be breeched", "committedDate": "2020-03-03T14:22:16Z", "type": "commit"}, {"oid": "8316f42a27f1113d3bf2394bcc8b5ae525ad9fd2", "url": "https://github.com/payara/Payara/commit/8316f42a27f1113d3bf2394bcc8b5ae525ad9fd2", "message": "APPSERV-55 fixes race condition in FT due to race condition in InvocationManager", "committedDate": "2020-03-04T08:42:17Z", "type": "commit"}, {"oid": "a1965574b6c1f5eda1d95397631df25f7a3672e0", "url": "https://github.com/payara/Payara/commit/a1965574b6c1f5eda1d95397631df25f7a3672e0", "message": "APPSERV-55 fallback on disabled metrics if MetricRegistry cannot be resolved", "committedDate": "2020-03-04T10:12:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNzg5Mg==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387637892", "bodyText": "NB. Makes sure multiple calls to the supplier function always result in the same config instance.", "author": "jbee", "createdAt": "2020-03-04T12:36:02Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/cdi/FaultToleranceInterceptor.java", "diffHunk": "@@ -74,9 +77,12 @@ public Object intercept(InvocationContext context) throws Exception {\n         try {\n             FaultToleranceService env =\n                     Globals.getDefaultBaseServiceLocator().getService(FaultToleranceService.class);\n-            FaultTolerancePolicy policy = FaultTolerancePolicy.get(context, () -> env.getConfig(context, this));\n+            AtomicReference<FaultToleranceConfig> lazyConfig = new AtomicReference<>();", "originalCommit": "a1965574b6c1f5eda1d95397631df25f7a3672e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzQ0NA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387557444", "bodyText": "It would probably be nicer to deprecate these rather than immediately ripping them out.\nThere's an obsolete attribute for the Param annotation which:\n\nproduce warnings when used in asadmin, are ignored, and are not included in the command usage.", "author": "Pandrex247", "createdAt": "2020-03-04T09:55:03Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/admin/SetFaultToleranceConfigurationCommand.java", "diffHunk": "@@ -74,42 +75,40 @@\n             description = \"Sets the Fault Tolerance Configuration\")\n })\n public class SetFaultToleranceConfigurationCommand implements AdminCommand {\n-    \n+\n     private static final Logger logger = Logger.getLogger(SetFaultToleranceConfigurationCommand.class.getName());\n-    \n+\n     @Inject\n     private Target targetUtil;\n-    \n-    @Param(optional = true, alias = \"managedexecutorservicename\")", "originalCommit": "8316f42a27f1113d3bf2394bcc8b5ae525ad9fd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MzI3MA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387563270", "bodyText": "The most minor of gripes - but Asynch triggers me \ud83d\ude06\nI assume you're trying to mirror the class name in the TCK, but I can't help but read it as cinch rather than sink (closest homophones).", "author": "Pandrex247", "createdAt": "2020-03-04T10:05:15Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/test/java/fish/payara/microprofile/faulttolerance/policy/BulkheadTckAsynchRetryTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.faulttolerance.policy;\n+\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.microprofile.faulttolerance.Asynchronous;\n+import org.eclipse.microprofile.faulttolerance.Bulkhead;\n+import org.eclipse.microprofile.faulttolerance.Retry;\n+import org.eclipse.microprofile.faulttolerance.exceptions.BulkheadException;\n+import org.junit.Test;\n+\n+/**\n+ * Runs test similar to {@code org.eclipse.microprofile.fault.tolerance.tck.bulkhead.BulkheadAsynchRetryTest} as JUnit\n+ * tests.\n+ * \n+ * Uses the same test method names and tries the duplicate the test as good as possible on the\n+ * {@link FaultTolerancePolicy} level. For many identifiers the terminology of the TCK test is used to make them easier\n+ * to compare.\n+ */\n+public class BulkheadTckAsynchRetryTest extends AbstractBulkheadTest {", "originalCommit": "8316f42a27f1113d3bf2394bcc8b5ae525ad9fd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MzU2OA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387743568", "bodyText": "Same here. I can rename it for our sake :)", "author": "jbee", "createdAt": "2020-03-04T15:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MzI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTkwNw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387631907", "bodyText": "See comments on deprecating rather than removing.\nWe might want to leave this for now so that it can still be accessed via get/set commands if necessary.", "author": "Pandrex247", "createdAt": "2020-03-04T12:23:30Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/FaultToleranceServiceConfiguration.java", "diffHunk": "@@ -39,22 +39,38 @@\n  */\n package fish.payara.microprofile.faulttolerance;\n \n+import javax.validation.constraints.Min;\n+\n import org.glassfish.api.admin.config.ConfigExtension;\n import org.jvnet.hk2.config.Attribute;\n import org.jvnet.hk2.config.Configured;\n \n /**\n  * Configuration for the Fault Tolerance Service.\n- * @author Andrew Pielage\n+ *\n+ * @author Andrew Pielage (initial)\n+ * @author Jan Bernitt (change to pool size)\n  */\n @Configured(name = \"microprofile-fault-tolerance-configuration\")\n public interface FaultToleranceServiceConfiguration extends ConfigExtension {\n \n-    @Attribute(defaultValue = \"concurrent/__defaultManagedExecutorService\", dataType = String.class)", "originalCommit": "a1965574b6c1f5eda1d95397631df25f7a3672e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNzE4Mw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387637183", "bodyText": "Another reason for leaving this in is the potential for domain validation exceptions on an upgrade - ottomh I can't remember what happens if there's an attribute in the domain.xml which isn't mapped to a config class, but I have a feeling it might throw an error.", "author": "Pandrex247", "createdAt": "2020-03-04T12:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxMzI3Mw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387713273", "bodyText": "OK just did a quick check and no it doesn't throw an error if the domain.xml has unrecognised entries on startup.", "author": "Pandrex247", "createdAt": "2020-03-04T14:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMDQ5OA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387730498", "bodyText": "I this good news, meaning I can just erase them?", "author": "jbee", "createdAt": "2020-03-04T15:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNzkxMg==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387827912", "bodyText": "The only thing that's stopping me from saying yes is \"what happens when someone updates from 201 and they were using this to use a non-default executor\".\nIt might be nice to check if it's been configured to use a non-default executor on startup and print a warning saying it's not used any more - cleanest way I can think of to do this would be to retain the attribute and read it using the get method rather than doing xml parsing", "author": "Pandrex247", "createdAt": "2020-03-04T17:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjc2OA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387832768", "bodyText": "I kept the fields and added the obsolete = true.", "author": "jbee", "createdAt": "2020-03-04T17:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMTkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5OTM5OQ==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387699399", "bodyText": "Only just noticed this since apparently it's already there in the CircuitBreakerState for some method names: SuccessFul shouldn't have a capital 'F'\no((>\u03c9< ))o", "author": "Pandrex247", "createdAt": "2020-03-04T14:26:20Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java", "diffHunk": "@@ -148,112 +171,63 @@ public void event(Event<?> event) {\n     }\n \n     @Override\n+    @MonitoringData(ns = \"ft\")\n     public void collect(MonitoringDataCollector collector) {\n-        MonitoringDataCollector ftCollector = collector.in(\"ft\");\n-        for (Entry<String, FaultToleranceApplicationState> appStateEntry : stateByApplication.entrySet()) {\n-            String appName = appStateEntry.getKey();\n-            FaultToleranceApplicationState appState = appStateEntry.getValue();\n-            collectMethodState(ftCollector, appName, \"execution\",\n-                    appState.getBulkheadExecutionSemaphores(), FaultToleranceServiceImpl::collectBulkheadSemaphores);\n-            collectMethodState(ftCollector, appName, \"queue\",\n-                    appState.getBulkheadExecutionQueueSemaphores(), FaultToleranceServiceImpl::collectBulkheadSemaphores);\n-            collectMethodState(ftCollector, appName, \"circuit-breaker\",\n-                    appState.getCircuitBreakerStates(), FaultToleranceServiceImpl::collectCircuitBreakerState);\n-\n+        for (Entry<String, FaultToleranceMethodContextImpl> methodValue : methodByTargetObjectAndName.entrySet()) {\n+            String group = methodValue.getKey();\n+            MonitoringDataCollector methodCollector = collector.group(group);\n+            FaultToleranceMethodContext context = methodValue.getValue();\n+            BlockingQueue<Thread> concurrentExecutions = context.getConcurrentExecutions(-1);\n+            if (concurrentExecutions != null) {\n+                collectBulkheadSemaphores(methodCollector, concurrentExecutions);\n+                collectBulkheadSemaphores(methodCollector, concurrentExecutions, context.getQueuingOrRunningPopulation());\n+            }\n+            collectCircuitBreakerState(methodCollector, context.getState(-1));\n         }\n     }\n \n-    private static <V> void collectMethodState(MonitoringDataCollector collector, String appName, String type,\n-            Map<Object, Map<String, V>> entries, BiConsumer<MonitoringDataCollector, V> collect) {\n-        for (Entry<Object, Map<String, V>> entry : entries.entrySet()) {\n-            Object target = entry.getKey();\n-            String targetValue = System.identityHashCode(target) + \"@\" + target.getClass().getSimpleName();\n-            for (Entry<String, V> methodValue : entry.getValue().entrySet()) {\n-                String group = appName + \"-\" + type + \"-\" + targetValue + \"-\" + methodValue.getKey();\n-                collect.accept(collector.group(group), methodValue.getValue());\n-            }\n-        }\n+    private static void collectBulkheadSemaphores(MonitoringDataCollector collector,\n+            BlockingQueue<Thread> concurrentExecutions) {\n+        collector\n+            .collect(\"RemainingConcurrentExecutionsCapacity\", concurrentExecutions.remainingCapacity())\n+            .collect(\"ConcurrentExecutions\", concurrentExecutions.size());\n     }\n \n-    private static void collectBulkheadSemaphores(MonitoringDataCollector collector, BulkheadSemaphore semaphore) {\n+    private static void collectBulkheadSemaphores(MonitoringDataCollector collector,\n+            BlockingQueue<Thread> concurrentExecutions, AtomicInteger queuingOrRunningPopulation) {\n         collector\n-            .collect(\"availablePermits\", semaphore.availablePermits())\n-            .collect(\"acquiredPermits\", semaphore.acquiredPermits());\n+            .collect(\"WaitingQueuePopulation\", queuingOrRunningPopulation.get() - concurrentExecutions.size());\n     }\n \n     private static void collectCircuitBreakerState(MonitoringDataCollector collector, CircuitBreakerState state) {\n+        if (state == null) {\n+            return;\n+        }\n         collector\n-            .collect(\"halfOpenSuccessFul\", state.getHalfOpenSuccessFulResultCounter())\n-            .collect(\"state\", state.getCircuitState().name().charAt(0));\n+            .collect(\"circuitBreakerHalfOpenSuccessFul\", state.getHalfOpenSuccessFulResultCounter())", "originalCommit": "a1965574b6c1f5eda1d95397631df25f7a3672e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NTQ1Nw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387745457", "bodyText": "Going to fix that.", "author": "jbee", "createdAt": "2020-03-04T15:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5OTM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNzA2NQ==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387707065", "bodyText": "Just some food for thought: do we want the timeout and core pool size to be configurable? Even as hidden parameters of the set command so the uninitiated don't use them.\nProbably fine as is but just planting the seed of thought (and/or doubt) \ud83d\ude42", "author": "Pandrex247", "createdAt": "2020-03-04T14:37:54Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java", "diffHunk": "@@ -122,20 +113,52 @@\n     @Inject\n     private Events events;\n \n-    private final Map<String, FaultToleranceApplicationState> stateByApplication = new ConcurrentHashMap<>();\n-    private ManagedScheduledExecutorService defaultScheduledExecutorService;\n-    private ManagedExecutorService defaultExecutorService;\n+    @Inject\n+    private MetricsService metricsService;\n+\n+    private final ConcurrentMap<String, FaultToleranceMethodContextImpl> methodByTargetObjectAndName = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, BindableFaultToleranceConfig> configByApplication = new ConcurrentHashMap<>();\n+    private ThreadPoolExecutor asyncExecutorService;\n+    private ScheduledExecutorService delayExecutorService;\n \n     @PostConstruct\n-    public void postConstruct() throws NamingException {\n+    public void postConstruct() {\n         events.register(this);\n-        serviceConfig = serviceLocator.getService(FaultToleranceServiceConfiguration.class);\n         invocationManager = serviceLocator.getService(InvocationManager.class);\n         requestTracingService = serviceLocator.getService(RequestTracingService.class);\n-        InitialContext context = new InitialContext();\n-        defaultExecutorService = (ManagedExecutorService) context.lookup(\"java:comp/DefaultManagedExecutorService\");\n-        defaultScheduledExecutorService = (ManagedScheduledExecutorService) context\n-                .lookup(\"java:comp/DefaultManagedScheduledExecutorService\");\n+        config = serviceLocator.getService(FaultToleranceServiceConfiguration.class);\n+        delayExecutorService = Executors.newScheduledThreadPool(getMaxDelayPoolSize());\n+        asyncExecutorService = new ThreadPoolExecutor(0, getMaxAsyncPoolSize(), 60L, TimeUnit.SECONDS,", "originalCommit": "a1965574b6c1f5eda1d95397631df25f7a3672e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1MTY4OA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387751688", "bodyText": "I'll add one for the keep alive time (time before an idle worker is removed).", "author": "jbee", "createdAt": "2020-03-04T15:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNzA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNzU3NA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387707574", "bodyText": "See note above - do we want to have some hidden configuration knobs we can turn if this rate isn't ideal?", "author": "Pandrex247", "createdAt": "2020-03-04T14:38:41Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java", "diffHunk": "@@ -122,20 +113,52 @@\n     @Inject\n     private Events events;\n \n-    private final Map<String, FaultToleranceApplicationState> stateByApplication = new ConcurrentHashMap<>();\n-    private ManagedScheduledExecutorService defaultScheduledExecutorService;\n-    private ManagedExecutorService defaultExecutorService;\n+    @Inject\n+    private MetricsService metricsService;\n+\n+    private final ConcurrentMap<String, FaultToleranceMethodContextImpl> methodByTargetObjectAndName = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, BindableFaultToleranceConfig> configByApplication = new ConcurrentHashMap<>();\n+    private ThreadPoolExecutor asyncExecutorService;\n+    private ScheduledExecutorService delayExecutorService;\n \n     @PostConstruct\n-    public void postConstruct() throws NamingException {\n+    public void postConstruct() {\n         events.register(this);\n-        serviceConfig = serviceLocator.getService(FaultToleranceServiceConfiguration.class);\n         invocationManager = serviceLocator.getService(InvocationManager.class);\n         requestTracingService = serviceLocator.getService(RequestTracingService.class);\n-        InitialContext context = new InitialContext();\n-        defaultExecutorService = (ManagedExecutorService) context.lookup(\"java:comp/DefaultManagedExecutorService\");\n-        defaultScheduledExecutorService = (ManagedScheduledExecutorService) context\n-                .lookup(\"java:comp/DefaultManagedScheduledExecutorService\");\n+        config = serviceLocator.getService(FaultToleranceServiceConfiguration.class);\n+        delayExecutorService = Executors.newScheduledThreadPool(getMaxDelayPoolSize());\n+        asyncExecutorService = new ThreadPoolExecutor(0, getMaxAsyncPoolSize(), 60L, TimeUnit.SECONDS,\n+                new SynchronousQueue<Runnable>(true)); // a fair queue => FIFO\n+        delayExecutorService.scheduleAtFixedRate(this::cleanMethodContexts, 1L, 1L, TimeUnit.MINUTES);", "originalCommit": "a1965574b6c1f5eda1d95397631df25f7a3672e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NTQyOQ==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r387755429", "bodyText": "Good idea, I add one.", "author": "jbee", "createdAt": "2020-03-04T15:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNzU3NA=="}], "type": "inlineReview"}, {"oid": "742fe9aa78f4b804fb4f6b8c22cb85727ac86ea4", "url": "https://github.com/payara/Payara/commit/742fe9aa78f4b804fb4f6b8c22cb85727ac86ea4", "message": "APPSERV-55 addressed Andrew's comment and fixed expired detection for FT state cleanup", "committedDate": "2020-03-04T16:17:23Z", "type": "commit"}, {"oid": "abf511d83cafc8df4d1ee826c78bd044b26901e0", "url": "https://github.com/payara/Payara/commit/abf511d83cafc8df4d1ee826c78bd044b26901e0", "message": "APPSERV-55 adds warning in case non default managed executor configuration was used", "committedDate": "2020-03-05T09:52:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzU0NA==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r388233544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Fault tolerance scheduled executor service was configured to managed scheduled executor service {0}. This option has been replaced by 'delay-max-pool-size' to set the maximum size of the used pool.\",\n          \n          \n            \n                                    \"Fault tolerance scheduled executor service was configured to managed scheduled executor service {0}. This option has been replaced by 'delay-max-pool-size' to set the maximum size of a fixed Fault Tolerance pool.\",\n          \n      \n    \n    \n  \n\nJust some extra clarity :)", "author": "Pandrex247", "createdAt": "2020-03-05T11:24:46Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java", "diffHunk": "@@ -133,6 +133,18 @@ public void postConstruct() {\n                 TimeUnit.SECONDS, new SynchronousQueue<Runnable>(true)); // a fair queue => FIFO\n         int interval = getCleanupIntervalInMinutes();\n         delayExecutorService.scheduleAtFixedRate(this::cleanMethodContexts, interval, interval, TimeUnit.MINUTES);\n+        if (config != null) {\n+            if (!\"concurrent/__defaultManagedExecutorService\".equals(config.getManagedExecutorService())) {\n+                logger.log(Level.WARNING,\n+                        \"Fault tolerance executor service was configured to managed executor service {0}. This option has been replaced by 'async-max-pool-size' to set the maximum size of the used pool.\",\n+                        config.getManagedExecutorService());\n+            }\n+            if (!\"concurrent/__defaultManagedScheduledExecutorService\".equals(config.getManagedScheduledExecutorService())) {\n+                logger.log(Level.WARNING,\n+                        \"Fault tolerance scheduled executor service was configured to managed scheduled executor service {0}. This option has been replaced by 'delay-max-pool-size' to set the maximum size of the used pool.\",", "originalCommit": "abf511d83cafc8df4d1ee826c78bd044b26901e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzgyMw==", "url": "https://github.com/payara/Payara/pull/4534#discussion_r388233823", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Fault tolerance executor service was configured to managed executor service {0}. This option has been replaced by 'async-max-pool-size' to set the maximum size of the used pool.\",\n          \n          \n            \n                                    \"Fault tolerance executor service was configured to managed executor service {0}. This option has been replaced by 'async-max-pool-size' to set the maximum size of a fixed Fault Tolerance pool.\",\n          \n      \n    \n    \n  \n\nDitto.", "author": "Pandrex247", "createdAt": "2020-03-05T11:25:23Z", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java", "diffHunk": "@@ -133,6 +133,18 @@ public void postConstruct() {\n                 TimeUnit.SECONDS, new SynchronousQueue<Runnable>(true)); // a fair queue => FIFO\n         int interval = getCleanupIntervalInMinutes();\n         delayExecutorService.scheduleAtFixedRate(this::cleanMethodContexts, interval, interval, TimeUnit.MINUTES);\n+        if (config != null) {\n+            if (!\"concurrent/__defaultManagedExecutorService\".equals(config.getManagedExecutorService())) {\n+                logger.log(Level.WARNING,\n+                        \"Fault tolerance executor service was configured to managed executor service {0}. This option has been replaced by 'async-max-pool-size' to set the maximum size of the used pool.\",", "originalCommit": "abf511d83cafc8df4d1ee826c78bd044b26901e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63c830917a0385f5e1ac0ba74fb27b4763a00e0e", "url": "https://github.com/payara/Payara/commit/63c830917a0385f5e1ac0ba74fb27b4763a00e0e", "message": "Update appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>", "committedDate": "2020-03-05T14:20:56Z", "type": "commit"}, {"oid": "4c9b65a7d0516333d3a7722bcf0dd72a0a812ead", "url": "https://github.com/payara/Payara/commit/4c9b65a7d0516333d3a7722bcf0dd72a0a812ead", "message": "Update appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/service/FaultToleranceServiceImpl.java\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>", "committedDate": "2020-03-05T14:21:20Z", "type": "commit"}, {"oid": "ab90bca3b0e0f2c6a305cb689c746781dd9ec649", "url": "https://github.com/payara/Payara/commit/ab90bca3b0e0f2c6a305cb689c746781dd9ec649", "message": "APPSERV-55 changes admin GUI to new FT settings", "committedDate": "2020-03-05T15:46:48Z", "type": "commit"}, {"oid": "29ba3e5c50ec6fc02ba02a6787b7e4b12f5316c7", "url": "https://github.com/payara/Payara/commit/29ba3e5c50ec6fc02ba02a6787b7e4b12f5316c7", "message": "Merge branch 'APPSERV-55-metrics-race' of github.com:jbee/Payara into APPSERV-55-metrics-race", "committedDate": "2020-03-05T15:46:59Z", "type": "commit"}]}