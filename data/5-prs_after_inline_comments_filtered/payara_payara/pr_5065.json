{"pr_number": 5065, "pr_title": "FISH-663 MicroProfile OpenAPI 2.0 (MP 4.0)", "pr_createdAt": "2020-12-21T16:26:28Z", "pr_url": "https://github.com/payara/Payara/pull/5065", "timeline": [{"oid": "bdf639f954d4f31e860cc5849885df08a9c4507a", "url": "https://github.com/payara/Payara/commit/bdf639f954d4f31e860cc5849885df08a9c4507a", "message": "FISH-663 OpenAPI 2.0-RC3 Upgrade\n\nUpgraded the dependencies and fixed compilation errors.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-11-23T17:35:32Z", "type": "commit"}, {"oid": "10862a0dda5c346cddc888cafa0ba3c4d4f19bb4", "url": "https://github.com/payara/Payara/commit/10862a0dda5c346cddc888cafa0ba3c4d4f19bb4", "message": "FISH-660 Order all HashMaps\n\nAll data returned from the API should be deterministically ordered, so\nall HashMaps have been replaced with LinkedHashMap.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-11-23T17:35:40Z", "type": "commit"}, {"oid": "40726adada04e6e214c4191ae23c1ec84217760c", "url": "https://github.com/payara/Payara/commit/40726adada04e6e214c4191ae23c1ec84217760c", "message": "FISH-663 Remove Empty 'content' instances from response\n\nFor some reason, the upgrade is causing the ContentImpl instance to be\ncounted as not-empty, which is causing the current serialization\ninclusion settings to include it. This breaks several classes and tests\nthat expect any items with $ref tags to be otherwise empty (but it\ncontains 'content: {}'). This commit changes the inclusion settings to\ndisable this behaviour.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-11-23T17:36:04Z", "type": "commit"}, {"oid": "e4b28d7181b1d1a74b65fb0c2ceff1f147d594df", "url": "https://github.com/payara/Payara/commit/e4b28d7181b1d1a74b65fb0c2ceff1f147d594df", "message": "FISH-663 Fix Runtime Exceptions\n\nSome errors were thrown at runtime, so a new test has been added and\nthey have been patched.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-11-27T12:54:53Z", "type": "commit"}, {"oid": "0d308540bd1867681467886f5bdbc727ca96fe37", "url": "https://github.com/payara/Payara/commit/0d308540bd1867681467886f5bdbc727ca96fe37", "message": "FISH-663 Merge Schema classes correctly\n\nIf a Schema was declared in the OpenAPIDefinition, the @Schema class\nannotations would totally replace the initial definition. It is now\nmerged correctly.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-11-27T12:54:58Z", "type": "commit"}, {"oid": "1673ec6afaaf5200f71c65edf8598fea5a304ad8", "url": "https://github.com/payara/Payara/commit/1673ec6afaaf5200f71c65edf8598fea5a304ad8", "message": "FISH-663 Make OpenAPI Collection Types Immutable\n\nThe TCK now checks that the get*() methods return immutable types.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:03Z", "type": "commit"}, {"oid": "7976a0757acb93d9556d71da0569806da75d682b", "url": "https://github.com/payara/Payara/commit/7976a0757acb93d9556d71da0569806da75d682b", "message": "FISH-663 Fix OpenAPI Collection set methods\n\nThe set methods would allow you to set unserializable types or types\nsuch as unmodifiableCollections which could cause issues.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:07Z", "type": "commit"}, {"oid": "99f656127bfa019899f209a8987cbd1e21e2f9db", "url": "https://github.com/payara/Payara/commit/99f656127bfa019899f209a8987cbd1e21e2f9db", "message": "FISH-663 Add detail to OpenAPI test failures\n\nThe node was printed, but not the context for the node. The errors now\nprint the OpenAPI document, with all the problems added as causes.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:07Z", "type": "commit"}, {"oid": "71930fee134cd7c95215b2bc5e6f545c05e5f642", "url": "https://github.com/payara/Payara/commit/71930fee134cd7c95215b2bc5e6f545c05e5f642", "message": "FISH-663 Prevent types being added to references\n\nIf a property Schema had a ref, type=OBJECT was still added. A check has\nnow been added for this.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:07Z", "type": "commit"}, {"oid": "2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "url": "https://github.com/payara/Payara/commit/2b99faba3e4cc8ca5a19ca644764cd1bd42ac0f0", "message": "FISH-663 Fix Collection methods\n\nThe TCK requires that the collections be nullable, where it wasn't\npreviously possible. Technically only one collection is tested, but in\nthe name of consistency, this functionality has been replicated\neverywhere.\n\nThe collection types have also been abstracted, to allow them to be\nchanged if required.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:07Z", "type": "commit"}, {"oid": "982c41e589267c015d96a6c6fb9afcfa85bf6e1a", "url": "https://github.com/payara/Payara/commit/982c41e589267c015d96a6c6fb9afcfa85bf6e1a", "message": "FISH-663 Refactor OpenApiConfiguration\n\nPrevent scanning all Config API Properties multiple times. The methods\nhave been refactored to take less time to scan for OpenAPI properties.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "4a820594f1a460f839acd00c54db2dab0c5675b4", "url": "https://github.com/payara/Payara/commit/4a820594f1a460f839acd00c54db2dab0c5675b4", "message": "FISH-663 Add Config Property Schema Processing\n\nConfig Properties that specify schema objects are now parsed and\nincluded in the final object. Schema objects with parents also include\nall the parent class properties.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "f248f137b8913de0d6a1d9c80fb62ba224b05887", "url": "https://github.com/payara/Payara/commit/f248f137b8913de0d6a1d9c80fb62ba224b05887", "message": "FISH-663 Simplify extractAnnotations Methods\n\nThe extractAnnotations methods hadunused variables, which have been\nremoved. The ServerVariables weren't being added as they were being\nadded directly, then replaced with a blank map. This has been fixed, as\nwell as the UnmodifiableCollection modification issues caused by fixing\nit.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "b2c358f9405384aacd64bc49443dbd73c751963c", "url": "https://github.com/payara/Payara/commit/b2c358f9405384aacd64bc49443dbd73c751963c", "message": "FISH-663 Parse Exception Mappers\n\nOpenAPI should now scan and handle exception mappers. content annotation\nvalues with only one @Content value now set the content value\nimmediately, as they assume they're the only one.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "63753d672488f1399c2ea67f463c68c20e7a38a6", "url": "https://github.com/payara/Payara/commit/63753d672488f1399c2ea67f463c68c20e7a38a6", "message": "FISH-663 Remove Unused 'Contents' variables\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "e060d3bdf3b9bc26d516bad433fadb35cb051cfa", "url": "https://github.com/payara/Payara/commit/e060d3bdf3b9bc26d516bad433fadb35cb051cfa", "message": "FISH-663 Fix OpenAPI @Parameters parsing\n\nWhen parsing the @Parameters annotation, the information wouldn' be\nretained as the method looks for the result of @PathParam etc, which\nhasn't been parsed as the method annotations are found first.\n\nThe Schema implementation handling is done earlier, to allow annotation\nvalues to override the implementation class information.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "e22efc66abcbf783f8092ecae9d0ae7da8acfd47", "url": "https://github.com/payara/Payara/commit/e22efc66abcbf783f8092ecae9d0ae7da8acfd47", "message": "FISH-663 Fix OpenAPI Callback Schema Creation\n\nSchemas created as part of a @Callback annotation didn't parse the\nimplementation properly. The implementation logic is now performed as\npart of the initial creation, and also uses the ARRAY type properly.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "c48528b365a08ca2f01d995184a27adb8ed55b06", "url": "https://github.com/payara/Payara/commit/c48528b365a08ca2f01d995184a27adb8ed55b06", "message": "FISH-663 Fix OpenAPI format parameter\n\nThe TCK passes JSON in uppercase to the format query parameter to test\nit. The field isnow case insensitive.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-16T11:56:08Z", "type": "commit"}, {"oid": "257f338a94499d3f00dd1004f34480632b9f864e", "url": "https://github.com/payara/Payara/commit/257f338a94499d3f00dd1004f34480632b9f864e", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-663", "committedDate": "2020-12-16T11:56:52Z", "type": "commit"}, {"oid": "01567d775d23b896c652593f7a49ab71bd4a7d63", "url": "https://github.com/payara/Payara/commit/01567d775d23b896c652593f7a49ab71bd4a7d63", "message": "FISH-663 MP OpenAPI 2.0 @APIResponseSchema support\n\nImplemented annotation parsing for the new annotation.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-21T13:51:54Z", "type": "commit"}, {"oid": "fca79aee0c41c6754edb037e08d4355318b611fe", "url": "https://github.com/payara/Payara/commit/fca79aee0c41c6754edb037e08d4355318b611fe", "message": "FISH-663 MP OpenAPI add required properties\n\nProperties marked as 'required' weren't added correctly to their parent\nschemas.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-21T13:54:03Z", "type": "commit"}, {"oid": "936002c64b8e23e7e5107f93eba8526c6394209d", "url": "https://github.com/payara/Payara/commit/936002c64b8e23e7e5107f93eba8526c6394209d", "message": "FISH-663 MP OpenAPI use method schema annotations\n\n@Schema annotations are now parsed correctly when attached\nto accessor methods. @XmlRootElement annotations are also now allowed to\ndenote Schema classes.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-21T13:54:07Z", "type": "commit"}, {"oid": "c96f44cfb36f6dcc80d4ecc37b20b78ceeb7b301", "url": "https://github.com/payara/Payara/commit/c96f44cfb36f6dcc80d4ecc37b20b78ceeb7b301", "message": "FISH-663 MP OpenAPI 2.0 @RequestBodySchema support\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-21T13:54:07Z", "type": "commit"}, {"oid": "cb78882409eb173aefd858cc42e1eae6aeda90eb", "url": "https://github.com/payara/Payara/commit/cb78882409eb173aefd858cc42e1eae6aeda90eb", "message": "FISH-760 Fix OpenAPI Enum parsing\n\nEnums were including HK2 data in the enumeration object, rather than the\nenum value name. This commit tests and fixes this behaviour.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-21T17:23:49Z", "type": "commit"}, {"oid": "7fc5a19c3708f0929810bd53a5218e64bf3fa19f", "url": "https://github.com/payara/Payara/commit/7fc5a19c3708f0929810bd53a5218e64bf3fa19f", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-663", "committedDate": "2020-12-22T09:37:32Z", "type": "commit"}, {"oid": "6a610a8b8d2702936e9cf6f584caf4da3d561b33", "url": "https://github.com/payara/Payara/commit/6a610a8b8d2702936e9cf6f584caf4da3d561b33", "message": "FISH-663 HK2 2.6.1.payara-p5 upgrade\n\nUpgraded HK2 to support exception type parsing\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T12:33:04Z", "type": "commit"}, {"oid": "e663b379a9631a49826297835556cdca9b6612ab", "url": "https://github.com/payara/Payara/commit/e663b379a9631a49826297835556cdca9b6612ab", "message": "FISH-663 OpenAPI remove numeric path syntax from tests\n\nIndices in paths should be accessed by using square brackets. The syntax\nwithout this is ambiguous ans interferes with fetching response codes\ne.g. 500 as this will be interpreted as an index in the array.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T12:33:09Z", "type": "commit"}, {"oid": "e663b379a9631a49826297835556cdca9b6612ab", "url": "https://github.com/payara/Payara/commit/e663b379a9631a49826297835556cdca9b6612ab", "message": "FISH-663 OpenAPI remove numeric path syntax from tests\n\nIndices in paths should be accessed by using square brackets. The syntax\nwithout this is ambiguous ans interferes with fetching response codes\ne.g. 500 as this will be interpreted as an index in the array.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T12:33:09Z", "type": "forcePushed"}, {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c", "url": "https://github.com/payara/Payara/commit/a452e202106f7df3234abb1eca61f19790b63f4c", "message": "FISH-663 OpenAPI Fix exception mapping order\n\nWhen encountered in the wrong order, exception mappers weren't\nrespected. @APIResponseSchema also broke on exception mappers. This\ncommit fixes this basic behaviour.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T12:57:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNzkxOA==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547317918", "bodyText": "Suggestion:\nremove the if (from.getSchemas()!= null) { and put it with the if (from == null) {\nLike so:\nif (from==null || from.getSchemas()!= null) {", "author": "MarkWareham", "createdAt": "2020-12-22T14:46:39Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java", "diffHunk": "@@ -305,11 +354,13 @@ public static void merge(Components from, Components to,\n         }\n         // Handle @Schema\n         if (from.getSchemas()!= null) {\n-            for (String schemaName : from.getSchemas().keySet()) {\n+            for (Entry<String, Schema> fromEntry : from.getSchemas().entrySet()) {", "originalCommit": "a452e202106f7df3234abb1eca61f19790b63f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NjIxNg==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547346216", "bodyText": "This method merged quite a lot of properties, and even if one of them exists it needs merging. I'd argue in favour of the current code", "author": "MattGill98", "createdAt": "2020-12-22T15:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNzkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzcwMA==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547323700", "bodyText": "It seems you do a lot of unnecessary null checks. When could the object be null? It's instantiated in the declaration and nothing sets or nullifies it (that I see)", "author": "MarkWareham", "createdAt": "2020-12-22T14:57:00Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "diffHunk": "@@ -58,25 +60,30 @@\n     private static final Logger LOGGER = Logger.getLogger(ExtensibleImpl.class.getName());\n \n     @JsonIgnore\n-    protected Map<String, Object> extensions = new LinkedHashMap<>();\n+    protected Map<String, Object> extensions = createMap();\n \n     @Override\n     public Map<String, Object> getExtensions() {\n-        return extensions;\n+        return readOnlyView(extensions);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public T addExtension(String name, Object value) {\n         if (value != null) {\n+            if (extensions == null) {", "originalCommit": "a452e202106f7df3234abb1eca61f19790b63f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MjMyNA==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547362324", "bodyText": "I'd missed a method in my large collection refactor. I've fixed that now, so the extensions can now be null. The TCK asserts than a handful of these collections are still nullable", "author": "MattGill98", "createdAt": "2020-12-22T16:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTEyOQ==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547325129", "bodyText": "can remove the negation and put into the first if of the method to return. Easier to read, less cyclomatic complexity", "author": "MarkWareham", "createdAt": "2020-12-22T14:59:36Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "diffHunk": "@@ -100,7 +107,7 @@ public static void merge(Extensible<?> from, Extensible<?> to, boolean override)\n             return;\n         }\n         if (to.getExtensions() == null) {\n-            to.setExtensions(new LinkedHashMap<>());\n+            to.setExtensions(createMap());\n         }\n         if (!from.getExtensions().isEmpty()) {", "originalCommit": "a452e202106f7df3234abb1eca61f19790b63f4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNzkxNQ==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547327915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (server != null) {\n          \n          \n            \n                        if (servers == null) {\n          \n          \n            \n                            servers = createList();\n          \n          \n            \n                        }\n          \n          \n            \n                        if (server.getUrl() != null) {\n          \n          \n            \n                            for (Server existingServer : getServers()) {\n          \n          \n            \n                                // If a server with the same URL is found, merge them\n          \n          \n            \n                                if (server.getUrl().equals(existingServer.getUrl())) {\n          \n          \n            \n                                    ModelUtils.merge(server, existingServer, true);\n          \n          \n            \n                                    return this;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                \n          \n          \n            \n                        // If a server with the same URL doesn't exist, create it\n          \n          \n            \n                        servers.add(server);\n          \n          \n            \n                    }\n          \n          \n            \n                    if (server == null || server.getUrl() == null)) {\n          \n          \n            \n                        return this;\n          \n          \n            \n                    }\n          \n          \n            \n                   \n          \n          \n            \n                    if (servers == null) {\n          \n          \n            \n                        servers = createList();\n          \n          \n            \n                    }\n          \n          \n            \n                       \n          \n          \n            \n                     for (Server existingServer : getServers()) {\n          \n          \n            \n                          // If a server with the same URL is found, merge them\n          \n          \n            \n                          if (server.getUrl().equals(existingServer.getUrl())) {\n          \n          \n            \n                              ModelUtils.merge(server, existingServer, true);\n          \n          \n            \n                              return this;\n          \n          \n            \n                          }\n          \n          \n            \n                      }\n          \n          \n            \n                       \n          \n          \n            \n                        // If a server with the same URL doesn't exist, create it\n          \n          \n            \n                        servers.add(server);\n          \n      \n    \n    \n  \n\nreduces complexity", "author": "MarkWareham", "createdAt": "2020-12-22T15:04:35Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java", "diffHunk": "@@ -130,76 +131,95 @@ public void setExternalDocs(ExternalDocumentation externalDocs) {\n \n     @Override\n     public List<Server> getServers() {\n-        return servers;\n+        return readOnlyView(servers);\n     }\n \n     @Override\n     public void setServers(List<Server> servers) {\n-        this.servers = servers;\n+        this.servers = createList(servers);\n     }\n \n     @Override\n     public OpenAPI addServer(Server server) {\n-        if (server.getUrl() != null) {\n-            for (Server existingServer : getServers()) {\n-                // If a server with the same URL is found, merge them\n-                if (server.getUrl().equals(existingServer.getUrl())) {\n-                    ModelUtils.merge(server, existingServer, true);\n-                    return this;\n+        if (server != null) {\n+            if (servers == null) {\n+                servers = createList();\n+            }\n+            if (server.getUrl() != null) {\n+                for (Server existingServer : getServers()) {\n+                    // If a server with the same URL is found, merge them\n+                    if (server.getUrl().equals(existingServer.getUrl())) {\n+                        ModelUtils.merge(server, existingServer, true);\n+                        return this;\n+                    }\n                 }\n             }\n+    \n+            // If a server with the same URL doesn't exist, create it\n+            servers.add(server);\n         }", "originalCommit": "a452e202106f7df3234abb1eca61f19790b63f4c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzYxMw==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547353613", "bodyText": "As per the existing design of OpenAPI Impl, merge operations are invoked after the creation of the instances.\n    public void visitOpenAPI(AnnotationModel definition, AnnotatedElement element, ApiContext context) {\n        OpenAPIImpl.merge(OpenAPIImpl.createInstance(definition, context), context.getApi(), true, context);\n    }", "author": "jGauravGupta", "createdAt": "2020-12-22T15:50:03Z", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/parameters/RequestBodyImpl.java", "diffHunk": "@@ -55,19 +57,24 @@\n \n     private String description;\n     private Content content = new ContentImpl();\n-    private List<ContentImpl> contents = new ArrayList<>();\n     private Boolean required;\n     private String ref;\n \n-    public static RequestBody createInstance(AnnotationModel annotation, ApiContext context) {\n+    public static RequestBodyImpl createInstance(AnnotationModel annotation, ApiContext context) {\n         RequestBodyImpl from = new RequestBodyImpl();\n         from.setDescription(annotation.getValue(\"description\", String.class));\n         from.setRequired(annotation.getValue(\"required\", Boolean.class));\n         String ref = annotation.getValue(\"ref\", String.class);\n         if (ref != null && !ref.isEmpty()) {\n             from.setRef(ref);\n         }\n-        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, from.getContents());\n+\n+        final List<ContentImpl> contents = createList();\n+        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, contents::add);\n+        for (ContentImpl content : contents) {\n+            ContentImpl.merge(content, from.content, true, context);", "originalCommit": "a452e202106f7df3234abb1eca61f19790b63f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MTE3OQ==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547361179", "bodyText": "What do you mean?", "author": "MattGill98", "createdAt": "2020-12-22T16:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MzEyNg==", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547393126", "bodyText": "Discussed impl design over DM. PR LGTM.", "author": "jGauravGupta", "createdAt": "2020-12-22T17:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzYxMw=="}], "type": "inlineReview"}, {"oid": "f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "url": "https://github.com/payara/Payara/commit/f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "message": "FISH-663 OpenAPI minor PR fixes\n\nThe server add function had reasonably high complexity, which has been\nreduced. ExtensibleImpl had been missed in the mass collection fix, so\nthis has been kept consistent with the rest of the collection methods.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T16:09:50Z", "type": "commit"}, {"oid": "f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "url": "https://github.com/payara/Payara/commit/f8daa58589cc1a3832baf4b9de4cd93afd4563ba", "message": "FISH-663 OpenAPI minor PR fixes\n\nThe server add function had reasonably high complexity, which has been\nreduced. ExtensibleImpl had been missed in the mass collection fix, so\nthis has been kept consistent with the rest of the collection methods.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T16:09:50Z", "type": "forcePushed"}, {"oid": "76ca36ee3866d12996ce457352ad97d8b229d4f7", "url": "https://github.com/payara/Payara/commit/76ca36ee3866d12996ce457352ad97d8b229d4f7", "message": "FISH-663 MP OpenAPI separate create and merge phases\n\nContentImpl merge function was being used in creation of Contents, which\ncauses the code to be entangled and difficult to debug. There was no\nreason to merge them, so they've been replaced with simpler add\nfunctions.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-12-22T17:09:21Z", "type": "commit"}]}