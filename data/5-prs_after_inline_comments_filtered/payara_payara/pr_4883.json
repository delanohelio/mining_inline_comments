{"pr_number": 4883, "pr_title": "FISH-333 Add Payara HealthCheck Service checkers to MicroProfile Health Readiness Checks", "pr_createdAt": "2020-09-11T10:09:21Z", "pr_url": "https://github.com/payara/Payara/pull/4883", "timeline": [{"oid": "6e5843535e9e7a4a6cab5eb7e1e3c41bf9915fab", "url": "https://github.com/payara/Payara/commit/6e5843535e9e7a4a6cab5eb7e1e3c41bf9915fab", "message": "FISH-333 Add Payara HealthCheck Service checkers to MicroProfile Health Readiness Checks", "committedDate": "2020-09-10T16:44:01Z", "type": "commit"}, {"oid": "30f9c296fa8a282e259598a3502efccbd2b8d835", "url": "https://github.com/payara/Payara/commit/30f9c296fa8a282e259598a3502efccbd2b8d835", "message": "Add Admin Console support for FISH-333", "committedDate": "2020-09-11T09:51:50Z", "type": "commit"}, {"oid": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "url": "https://github.com/payara/Payara/commit/2de7010d4e77872e3ffa4255435b4353d39d88bc", "message": "Removed debug statments", "committedDate": "2020-09-11T10:01:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NDU5NA==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487064594", "bodyText": "Sysout...", "author": "jbee", "createdAt": "2020-09-11T13:59:56Z", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/servlet/HealthCheckServlet.java", "diffHunk": "@@ -77,8 +83,28 @@ protected void processRequest(HttpServletRequest request, HttpServletResponse re\n             return;\n         }\n \n-        healthCheckService.performHealthChecks(response, HealthCheckType.fromPath(request.getPathInfo()));\n+        for (Checker checker : payaraHealthCheckService.getConfiguration().getCheckerList()) {\n+            String checkName = checker.getName();\n+            System.out.println(\"Checker name = \" + checkName);", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NjgxNQ==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487066815", "bodyText": "I think this whole loop does not belong in this class. If a Checker is configured to also occur in MP HealthCheck it should add a HealthCheck implementation to the service which is then processed like all other registered checks. If the  Checker configuration changes and the Payara health check no longer is exposed in MP the health check should be de-registered as part of the reaction to the configuration change, for example though listening to configuration change events.", "author": "jbee", "createdAt": "2020-09-11T14:03:30Z", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/servlet/HealthCheckServlet.java", "diffHunk": "@@ -77,8 +83,28 @@ protected void processRequest(HttpServletRequest request, HttpServletResponse re\n             return;\n         }\n \n-        healthCheckService.performHealthChecks(response, HealthCheckType.fromPath(request.getPathInfo()));\n+        for (Checker checker : payaraHealthCheckService.getConfiguration().getCheckerList()) {", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3MDA2OA==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487070068", "bodyText": "As far as I can see from the changes this method is never used in the service class but only called from the outside and it does not use any of the service specific state. It should not be here but where it is actually used or as it basically is a static method it could just as well be in a utility so it can be reused easier. I am pretty sure this exact method already exists multiple times in other places where the same issue exists. Would be nice if we finally make it a helper instead of duplicating the code again.", "author": "jbee", "createdAt": "2020-09-11T14:08:43Z", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/HealthCheckService.java", "diffHunk": "@@ -494,5 +502,25 @@ public UnprocessedChangeEvents changed(PropertyChangeEvent[] events) {\n \n         return new UnprocessedChangeEvents(unchangedList);\n     }\n-\n+    \n+      /**\n+     * Gets the application name from the invocation manager.\n+     *\n+     * @return The application name\n+     */\n+    public String getApplicationName() {", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3NTE5MQ==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487075191", "bodyText": "The result is not cumulative. Its collecting entries in a list. The accumulation of the status of these entries is cumulative. So this should just be the mostRecentResult.", "author": "jbee", "createdAt": "2020-09-11T14:16:30Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -98,15 +98,15 @@\n     private final AtomicInteger checksDone = new AtomicInteger();\n     private final AtomicInteger checksFailed = new AtomicInteger();\n     private final AtomicBoolean inProcess = new AtomicBoolean(false);\n-    private volatile HealthCheckResultStatus mostRecentCumulativeStatus;\n+    private volatile HealthCheckResult mostRecentCumulativeResult;", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3NTU1NQ==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487075555", "bodyText": "and accordingly getMostRecentResult()", "author": "jbee", "createdAt": "2020-09-11T14:17:06Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -121,7 +121,11 @@ public final HealthCheckResult doCheck() {\n     public abstract O constructOptions(C c);\n \n     public HealthCheckResultStatus getMostRecentCumulativeStatus() {\n-        return mostRecentCumulativeStatus;\n+        return mostRecentCumulativeResult.getCumulativeStatus();\n+    }\n+    \n+     public HealthCheckResult getMostRecentCumulativeResult() {", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3NjY0MA==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487076640", "bodyText": "pretty sure this can cause NPE. See \u00ecsReady(). Also maybe isReady() can use the isEnabled() in its logic.", "author": "jbee", "createdAt": "2020-09-11T14:18:49Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -140,6 +144,10 @@ public boolean isReady() {\n         O options = getOptions();\n         return !isInProgress() && options != null && options.isEnabled();\n     }\n+    \n+    public boolean isEnabled(){     \n+        return getOptions().isEnabled();", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MDI2NQ==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r496640265", "bodyText": "getOptions().isEnabled() is a boolean, so it can't be null. The isReady() method already uses that isEnabled() method.", "author": "MeroRai", "createdAt": "2020-09-29T11:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3NjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNjcyNA==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r497306724", "bodyText": "from personal experience options can be null", "author": "jbee", "createdAt": "2020-09-30T07:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3NjY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4MDAxMw==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r487080013", "bodyText": "The status is part of the result. If the result is used to update the check the status can be taken from that result and does not have to be set separately.", "author": "jbee", "createdAt": "2020-09-11T14:23:59Z", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/checks/PayaraHealthCheck.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ *\n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ *\n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.microprofile.healthcheck.checks;\n+\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n+\n+/**\n+ *\n+ * @author Susan Rai\n+ */\n+public class PayaraHealthCheck implements HealthCheck {\n+\n+    private String name;\n+    private String healthStatus;\n+    private HealthCheckResult healthCheckResult;\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public void setHealthStatus(String healthStatus) {\n+        this.healthStatus = healthStatus;", "originalCommit": "2de7010d4e77872e3ffa4255435b4353d39d88bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "080273809b402c6580dbefb9e42ec49aa633c4c1", "url": "https://github.com/payara/Payara/commit/080273809b402c6580dbefb9e42ec49aa633c4c1", "message": "Support for printing JSON in pretty format", "committedDate": "2020-09-11T15:03:21Z", "type": "commit"}, {"oid": "4df50406c6030b313b6ac3d58afa59192164448d", "url": "https://github.com/payara/Payara/commit/4df50406c6030b313b6ac3d58afa59192164448d", "message": "Now change on the display-on-health-endpoint parameter will trigger register or un-register of Payara HealthCheck Service Checker into Microprofile Health", "committedDate": "2020-09-29T14:13:59Z", "type": "commit"}, {"oid": "5575e12899917dbe9544126e34d3c0af4acf8b26", "url": "https://github.com/payara/Payara/commit/5575e12899917dbe9544126e34d3c0af4acf8b26", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-333", "committedDate": "2020-09-29T14:34:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MDk5Nw==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r497470997", "bodyText": "Is there a reason to make this modifiable? I would have thought setting name in constructor should be sufficient.", "author": "jbee", "createdAt": "2020-09-30T12:32:16Z", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/checks/PayaraHealthCheck.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ *\n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ *\n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.microprofile.healthcheck.checks;\n+\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n+\n+/**\n+ *\n+ * @author Susan Rai\n+ */\n+public class PayaraHealthCheck implements HealthCheck {\n+\n+    private String name;\n+    private BaseHealthCheck checker;\n+\n+    public PayaraHealthCheck(String name, BaseHealthCheck checker) {\n+        this.name = name;\n+        this.checker = checker;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;", "originalCommit": "5575e12899917dbe9544126e34d3c0af4acf8b26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MTQxMw==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r497471413", "bodyText": "Good candidate for a method returning the state.", "author": "jbee", "createdAt": "2020-09-30T12:33:01Z", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/checks/PayaraHealthCheck.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ *\n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ *\n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.microprofile.healthcheck.checks;\n+\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n+\n+/**\n+ *\n+ * @author Susan Rai\n+ */\n+public class PayaraHealthCheck implements HealthCheck {\n+\n+    private String name;\n+    private BaseHealthCheck checker;\n+\n+    public PayaraHealthCheck(String name, BaseHealthCheck checker) {\n+        this.name = name;\n+        this.checker = checker;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public HealthCheckResponse call() {\n+        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse.named(name);\n+        boolean state = true;\n+\n+        checker.doCheck();\n+        for (HealthCheckResultEntry healthCheckResultEntry : checker.getMostRecentResult().getEntries()) {\n+            responseBuilder.withData(\"Message\", healthCheckResultEntry.getMessage());\n+        }\n+\n+        String healthStatus = checker.getMostRecentCumulativeStatus().name();\n+        if (!healthStatus.trim().isEmpty()) {\n+            responseBuilder.withData(\"HealthCheckStatus\", healthStatus);\n+            if (healthStatus.equals(\"CRITICAL\") || healthStatus.equals(\"CHECK_ERROR\")) {\n+                state = false;\n+            }\n+        }", "originalCommit": "5575e12899917dbe9544126e34d3c0af4acf8b26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MjMyNQ==", "url": "https://github.com/payara/Payara/pull/4883#discussion_r497472325", "bodyText": "I am not sure about the wording. I think this is a flag to make the Payara Health Check appear on MP Health as well, isn't it?", "author": "jbee", "createdAt": "2020-09-30T12:34:33Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/HealthCheckExecutionOptions.java", "diffHunk": "@@ -23,11 +23,13 @@ and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n     private boolean enabled;\n     private long time;\n     private TimeUnit unit;\n+    private boolean displayOnHealthEndpoint;", "originalCommit": "5575e12899917dbe9544126e34d3c0af4acf8b26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3aec4e1e832606a01e83ee49541601029cd4fa88", "url": "https://github.com/payara/Payara/commit/3aec4e1e832606a01e83ee49541601029cd4fa88", "message": "Changed flag name form 'displayOnHealthEndpoint' to 'addToMicroProfileHealth' to reflect more accurate description.", "committedDate": "2020-10-02T14:29:22Z", "type": "commit"}, {"oid": "c65f34d8082dd6b1cd4f61b040f141257ee775b0", "url": "https://github.com/payara/Payara/commit/c65f34d8082dd6b1cd4f61b040f141257ee775b0", "message": "The 'CheckerName' parameter is now optional", "committedDate": "2020-10-03T21:31:51Z", "type": "commit"}, {"oid": "d80f726e6a9df9149d1187fb4ef2bc6d4f0d6c18", "url": "https://github.com/payara/Payara/commit/d80f726e6a9df9149d1187fb4ef2bc6d4f0d6c18", "message": "Removed redundant code", "committedDate": "2020-10-04T01:20:06Z", "type": "commit"}]}