{"pr_number": 4918, "pr_title": "FISH-334 Integrate MicroProfile Metrics into Payara Health Service", "pr_createdAt": "2020-09-27T21:03:19Z", "pr_url": "https://github.com/payara/Payara/pull/4918", "timeline": [{"oid": "e5ea509f4e71ef5bbd8d0a5e8cd990594215e191", "url": "https://github.com/payara/Payara/commit/e5ea509f4e71ef5bbd8d0a5e8cd990594215e191", "message": "FISH-334 Integrate MicroProfile Metrics into Payara Healthcheck Service", "committedDate": "2020-09-25T15:16:47Z", "type": "commit"}, {"oid": "e0d9d5a61766522a3c4d6bf84a8a482bdc45960b", "url": "https://github.com/payara/Payara/commit/e0d9d5a61766522a3c4d6bf84a8a482bdc45960b", "message": "Admin console integration of Microprofile Metrics Checker", "committedDate": "2020-09-25T18:42:05Z", "type": "commit"}, {"oid": "5582668f009c6fc3319425083a3bc000b8195175", "url": "https://github.com/payara/Payara/commit/5582668f009c6fc3319425083a3bc000b8195175", "message": "Support for dynamic loading of application in the Admin Console and support for mutiple monitoring mutiple metrics", "committedDate": "2020-09-27T20:46:02Z", "type": "commit"}, {"oid": "974d33d82335c34455819059678fb587f88419e5", "url": "https://github.com/payara/Payara/commit/974d33d82335c34455819059678fb587f88419e5", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-335", "committedDate": "2020-09-27T21:38:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MDYyNQ==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496060625", "bodyText": "Looks like this has a default, but it's not displayed in the admin console!", "author": "MattGill98", "createdAt": "2020-09-28T15:57:11Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/configuration/MicroProfileMetricsChecker.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ * \n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ * \n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.nucleus.healthcheck.configuration;\n+\n+import static fish.payara.nucleus.healthcheck.HealthCheckConstants.DEFAULT_MICROPROFILE_METRICS_NAME;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+\n+import java.beans.PropertyVetoException;\n+\n+/**\n+ * @author mertcaliskan\n+ */\n+@Configured\n+@CheckerConfigurationType(type = CheckerType.MP_METRICS)\n+public interface MicroProfileMetricsChecker extends Checker {\n+    \n+    @Attribute(defaultValue = DEFAULT_MICROPROFILE_METRICS_NAME)\n+    String getName();", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTQ5Mg==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496065492", "bodyText": "I'd remove extra whitespace here", "author": "MattGill98", "createdAt": "2020-09-28T16:04:35Z", "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTk1NA==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496065954", "bodyText": "This is slow, I'd remove it from the string when removing whitespace to save 2 passes", "author": "MattGill98", "createdAt": "2020-09-28T16:05:17Z", "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NjQ2Nw==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496066467", "bodyText": "Is there any reason you're injecting the metrics service fresh each time?", "author": "MattGill98", "createdAt": "2020-09-28T16:06:05Z", "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));\n+        MetricsService metricsService = Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODM5Nw==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496068397", "bodyText": "Does this need repeating each loop? Also, users won't be familiar with the dot notation of the metrics - they're mote likely to use underscore notation as it appears in the metrics result", "author": "MattGill98", "createdAt": "2020-09-28T16:09:15Z", "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));\n+        MetricsService metricsService = Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);\n+        if (registryName.equalsIgnoreCase(\"application\")) {\n+            registryName = options.getMetricsApplicationName();\n+        }\n+\n+        HealthCheckResult result = new HealthCheckResult();\n+        List<String> metrics = collectMetrics(metricsService.getRegistry(registryName), metricNames);\n+\n+        result.add(new HealthCheckResultEntry(metrics.isEmpty() ? WARNING : GOOD,\n+                metrics.isEmpty() ? \"The metric you entered doesn't exist under \" + registryName : metrics.stream().map(Object::toString).collect(Collectors.joining())));\n+\n+        return result;\n+\n+    }\n+\n+    private List<String> collectMetrics(MetricRegistry state, List<String> metricNames) {\n+        List<String> array = new ArrayList<>();\n+        String metricsInfos;\n+        if (metricNames == null || metricNames.isEmpty()) {\n+            for (String name : state.getNames()) {\n+                metricsInfos = getMetricInfos(name, state);\n+                if (metricsInfos != null) {\n+                    array.add(metricsInfos);\n+                }\n+\n+            }\n+        } else {\n+            for (String metricName : metricNames) {\n+                metricsInfos = getMetricInfos(metricName.trim(), state);\n+                if (metricsInfos != null) {\n+                    array.add(metricsInfos);\n+                }\n+            }\n+        }\n+        return array;\n+    }\n+\n+    private String getMetricInfos(String metricName, MetricRegistry state) {\n+        Map<MetricID, Metric> metricInfos = state.getMetrics().entrySet().stream()", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NTk0NQ==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496075945", "bodyText": "Can we have a few more variables? I don't find the streaming particularly intuitive here, and the result contains excess whitespace", "author": "MattGill98", "createdAt": "2020-09-28T16:20:53Z", "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));\n+        MetricsService metricsService = Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);\n+        if (registryName.equalsIgnoreCase(\"application\")) {\n+            registryName = options.getMetricsApplicationName();\n+        }\n+\n+        HealthCheckResult result = new HealthCheckResult();\n+        List<String> metrics = collectMetrics(metricsService.getRegistry(registryName), metricNames);\n+\n+        result.add(new HealthCheckResultEntry(metrics.isEmpty() ? WARNING : GOOD,\n+                metrics.isEmpty() ? \"The metric you entered doesn't exist under \" + registryName : metrics.stream().map(Object::toString).collect(Collectors.joining())));", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzA3NQ==", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496077075", "bodyText": "This should be an actual list IMO (@Element(\"metric\")), to prevent comma separated strings in XML files - which can cause all sorts of issues!", "author": "MattGill98", "createdAt": "2020-09-28T16:22:35Z", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/configuration/MicroProfileMetricsChecker.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ * \n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ * \n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.nucleus.healthcheck.configuration;\n+\n+import static fish.payara.nucleus.healthcheck.HealthCheckConstants.DEFAULT_MICROPROFILE_METRICS_NAME;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+\n+import java.beans.PropertyVetoException;\n+\n+/**\n+ * @author mertcaliskan\n+ */\n+@Configured\n+@CheckerConfigurationType(type = CheckerType.MP_METRICS)\n+public interface MicroProfileMetricsChecker extends Checker {\n+    \n+    @Attribute(defaultValue = DEFAULT_MICROPROFILE_METRICS_NAME)\n+    String getName();\n+    void setName(String value) throws PropertyVetoException;\n+\n+    @Attribute\n+    String getMetricsScope();\n+    void setMetricsScope(String metricsSource) throws PropertyVetoException;\n+    \n+    @Attribute\n+    String getMetricApplicationName();\n+    void setMetricApplicationName(String metricsType) throws PropertyVetoException;\n+    \n+    @Attribute", "originalCommit": "974d33d82335c34455819059678fb587f88419e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50ab4576d903b44d040821c61cda07327c0da117", "url": "https://github.com/payara/Payara/commit/50ab4576d903b44d040821c61cda07327c0da117", "message": "Monitored metrics can now be added to a list of property", "committedDate": "2020-10-01T18:14:41Z", "type": "commit"}, {"oid": "abfb2248051682f4f4f36c2b1e0a6e5163d12d1a", "url": "https://github.com/payara/Payara/commit/abfb2248051682f4f4f36c2b1e0a6e5163d12d1a", "message": "Added copyright right header, updated portions copyright and refactored the code", "committedDate": "2020-10-02T00:00:41Z", "type": "commit"}, {"oid": "b0f8c128cee01bdb0cf891c3c0ff0494415dd2ef", "url": "https://github.com/payara/Payara/commit/b0f8c128cee01bdb0cf891c3c0ff0494415dd2ef", "message": "Prevent MicroProfileMetricsChecker for registering without monitored metrics", "committedDate": "2020-10-02T01:52:29Z", "type": "commit"}, {"oid": "b4379d59de85ca3f30e58a554b4238baf18cc582", "url": "https://github.com/payara/Payara/commit/b4379d59de85ca3f30e58a554b4238baf18cc582", "message": "Fixed an issue where Monitored Metrics Property table changes were not being recognised", "committedDate": "2020-10-02T10:29:20Z", "type": "commit"}, {"oid": "8f3098b08c5322a15c932a2de42e28846635f942", "url": "https://github.com/payara/Payara/commit/8f3098b08c5322a15c932a2de42e28846635f942", "message": "FISH-334 Use New Custom Writer\n\nAllows monitoring metrics by their actual name, rather than internal\nname. Needs new lines removing from output, and WriterProxy replacing\nwith a new custom Writer.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>", "committedDate": "2020-10-02T15:43:55Z", "type": "commit"}, {"oid": "a981dc248855282dbf1b901d10410db6aa49b50c", "url": "https://github.com/payara/Payara/commit/a981dc248855282dbf1b901d10410db6aa49b50c", "message": "Added copyright header", "committedDate": "2020-10-02T15:45:33Z", "type": "commit"}, {"oid": "6e5f93060eb1511673150975ed157eff68a43e6a", "url": "https://github.com/payara/Payara/commit/6e5f93060eb1511673150975ed157eff68a43e6a", "message": "Enabled parameter is no longer mandatory and add new MicroProfile Metrics Checker to the test.", "committedDate": "2020-10-03T18:50:12Z", "type": "commit"}, {"oid": "26efaafbfcdb466cf9336ea66fc05f92ef7d4612", "url": "https://github.com/payara/Payara/commit/26efaafbfcdb466cf9336ea66fc05f92ef7d4612", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-334", "committedDate": "2020-10-04T11:39:35Z", "type": "commit"}]}