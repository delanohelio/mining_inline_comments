{"pr_number": 4948, "pr_title": "FISH-40 EJB timers with @Clustered will execute on one and only one instance", "pr_createdAt": "2020-10-13T08:39:17Z", "pr_url": "https://github.com/payara/Payara/pull/4948", "timeline": [{"oid": "1ed2cdd04d7304dbc45c55728d36cbb9594575ae", "url": "https://github.com/payara/Payara/commit/1ed2cdd04d7304dbc45c55728d36cbb9594575ae", "message": "FISH-40 Persistence timers on Micro now restart on all other instances", "committedDate": "2020-10-12T16:19:02Z", "type": "commit"}, {"oid": "906d9a87d070d8d95f11f0682574174e4aedaabe", "url": "https://github.com/payara/Payara/commit/906d9a87d070d8d95f11f0682574174e4aedaabe", "message": "FISH-40 Timer is restarted on one and only one other instance", "committedDate": "2020-10-13T08:34:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2OTY3Nw==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r503869677", "bodyText": "Hmmmm really don't like this. Can the DataGridEjbTimerService register this class when it creates it?", "author": "MattGill98", "createdAt": "2020-10-13T11:20:27Z", "path": "appserver/payara-appserver-modules/hazelcast-ejb-timer/src/main/java/fish/payara/ejb/timer/hazelcast/HazelcastTimerStore.java", "diffHunk": "@@ -96,6 +101,7 @@ static void init(HazelcastCore core) {\n         }\n     }\n \n+    @SuppressWarnings(\"LeakingThisInConstructor\")", "originalCommit": "906d9a87d070d8d95f11f0682574174e4aedaabe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwMzY0Ng==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r504503646", "bodyText": "@MattGill98 I assume you refer to the Globals access and registering this as a cluster listener? Can you motivate why you think this should occur in the DataGridEjbTimerService for me? I don't see the connection but I also don't know the details of the timer infrastructure.", "author": "jbee", "createdAt": "2020-10-14T08:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2OTY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3MTgzMQ==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r504671831", "bodyText": "It looked to be the only class that referenced this one so I assume it creates it. It also happens to be a HK2 service, so no Globals reference", "author": "MattGill98", "createdAt": "2020-10-14T13:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2OTY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NzQ5Mw==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r504497493", "bodyText": "Isn't there a field holding the HazelcastCore that was passed to the constructor?", "author": "jbee", "createdAt": "2020-10-14T08:31:29Z", "path": "appserver/payara-appserver-modules/hazelcast-ejb-timer/src/main/java/fish/payara/ejb/timer/hazelcast/HazelcastTimerStore.java", "diffHunk": "@@ -1193,4 +1157,37 @@ private boolean restoreEJBTimers() {\n         return rc;\n     }\n \n+    @Override\n+    public void memberAdded(MemberEvent event) {\n+        //do nothing\n+    }\n+\n+    @Override\n+    public void memberRemoved(MemberEvent event) {\n+        ILock hazelcastLock = Globals.getDefaultBaseServiceLocator().getService(HazelcastCore.class).getInstance().getLock(\"EJB-TIMER-LOCK\");", "originalCommit": "906d9a87d070d8d95f11f0682574174e4aedaabe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5OTc2MQ==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r504499761", "bodyText": "Should the cluster be injected instead of using Globals?", "author": "jbee", "createdAt": "2020-10-14T08:35:03Z", "path": "appserver/payara-appserver-modules/hazelcast-ejb-timer/src/main/java/fish/payara/ejb/timer/hazelcast/HazelcastTimerStore.java", "diffHunk": "@@ -107,6 +113,8 @@ public HazelcastTimerStore(HazelcastCore core) throws Exception {\n         serverName = core.getInstance().getCluster().getLocalMember().getStringAttribute(HazelcastCore.INSTANCE_ATTRIBUTE);\n         this.ownerIdOfThisServer_ = serverName;\n         this.domainName_ = core.getInstance().getConfig().getGroupConfig().getName();\n+        super.enableRescheduleTimers();\n+        Globals.getDefaultBaseServiceLocator().getService(PayaraCluster.class).addClusterListener(this);", "originalCommit": "906d9a87d070d8d95f11f0682574174e4aedaabe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwMTc5MA==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r504501790", "bodyText": "This could become a bit confusing in the logs as it suggest that at this point the timers are restored which might not yet be the case due to putAsync.", "author": "jbee", "createdAt": "2020-10-14T08:38:06Z", "path": "appserver/payara-appserver-modules/hazelcast-ejb-timer/src/main/java/fish/payara/ejb/timer/hazelcast/HazelcastTimerStore.java", "diffHunk": "@@ -1193,4 +1157,37 @@ private boolean restoreEJBTimers() {\n         return rc;\n     }\n \n+    @Override\n+    public void memberAdded(MemberEvent event) {\n+        //do nothing\n+    }\n+\n+    @Override\n+    public void memberRemoved(MemberEvent event) {\n+        ILock hazelcastLock = Globals.getDefaultBaseServiceLocator().getService(HazelcastCore.class).getInstance().getLock(\"EJB-TIMER-LOCK\");\n+        hazelcastLock.lock();\n+        try {\n+            Collection<HZTimer> allTimers = pkCache.values();\n+            Collection<HZTimer> removedTimers = new HashSet<>();\n+            for (HZTimer timer : allTimers) {\n+                if (timer.getMemberName().equals(event.getServer())) {\n+                    removedTimers.add(timer);\n+                }\n+            }\n+            \n+            \n+            \n+            if (!removedTimers.isEmpty()) {\n+                logger.log(Level.INFO, \"==> Restoring Timers ... \");\n+                Collection<HZTimer> restored = _restoreTimers(removedTimers);\n+                for (HZTimer timer : restored) {\n+                    pkCache.putAsync(timer.getKey().getTimerId(), timer);\n+                }\n+                logger.log(Level.INFO, \"<== ... Timers Restored.\");", "originalCommit": "906d9a87d070d8d95f11f0682574174e4aedaabe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7a1b434284948e9b1c530ffa01f7fe5185c6c01", "url": "https://github.com/payara/Payara/commit/e7a1b434284948e9b1c530ffa01f7fe5185c6c01", "message": "FISH-40 requested changes", "committedDate": "2020-10-14T09:06:56Z", "type": "commit"}, {"oid": "e7a1b434284948e9b1c530ffa01f7fe5185c6c01", "url": "https://github.com/payara/Payara/commit/e7a1b434284948e9b1c530ffa01f7fe5185c6c01", "message": "FISH-40 requested changes", "committedDate": "2020-10-14T09:06:56Z", "type": "forcePushed"}, {"oid": "c7c237f20a6213e43385e6ceef87f9bbb394c855", "url": "https://github.com/payara/Payara/commit/c7c237f20a6213e43385e6ceef87f9bbb394c855", "message": "FISH-40 Use a field to store HazelcastInstance", "committedDate": "2020-10-15T10:20:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODcxNw==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r505488717", "bodyText": "I really wonder if this field shouldn't be thread-safe. This class has a number of fields I'd think should be thread-safe as I would assume that methods are called by different threads. Is there any reasoning why this would not be the case?", "author": "jbee", "createdAt": "2020-10-15T12:08:56Z", "path": "appserver/ejb/ejb-container/src/main/java/com/sun/ejb/containers/EJBTimerService.java", "diffHunk": "@@ -1552,6 +1552,17 @@ protected void cancelTimerSynchronization(EJBContextImpl context_,\n             }\n         }\n     }\n+    \n+    /**\n+     * Sets failed times to be rescheduled rather than removed.\n+     * This is called by {@link fish.payara.ejb.timer.hazelcast.HazelcastTimerStore},\n+     * as when an instance is removed from a cluster it is possible that a delivery\n+     * could fail in the time in which an instance is removed from the cluster and before\n+     * the timer is recreated.\n+     */\n+    protected void enableRescheduleTimers() {\n+        rescheduleFailedTimer = true;", "originalCommit": "c7c237f20a6213e43385e6ceef87f9bbb394c855", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNjM2NA==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r505516364", "bodyText": "This method does not need to be thread-safe as it is only called by the constructor of HazelcastTimerStore which will only occur once on startup. The field effectively final, the but I can't make the field final due to the initProperties() method also setting this based on the config, which is what HazelcastTimerStore overrides to always be true (as that is the point of a clustered timer).", "author": "Cousjava", "createdAt": "2020-10-15T12:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NzcxNA==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r505557714", "bodyText": "I see - technically I agree it doesn't need it. But how should someone know looking at the code unless he also knows what you just explained or finds this out by analysing the code. A short comment would help.", "author": "jbee", "createdAt": "2020-10-15T13:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxMjE2Mw==", "url": "https://github.com/payara/Payara/pull/4948#discussion_r505612163", "bodyText": "There is a comment on the method already", "author": "Cousjava", "createdAt": "2020-10-15T14:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODcxNw=="}], "type": "inlineReview"}]}