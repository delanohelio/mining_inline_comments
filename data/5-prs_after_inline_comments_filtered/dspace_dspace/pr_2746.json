{"pr_number": 2746, "pr_title": "Entities related to Entities of the same type", "pr_createdAt": "2020-04-14T13:40:45Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2746", "timeline": [{"oid": "10b3b202923267507173076936d8f41efc3fec7d", "url": "https://github.com/DSpace/DSpace/commit/10b3b202923267507173076936d8f41efc3fec7d", "message": "Support for a relationship from type A to type A (parent/child of same type)", "committedDate": "2020-04-06T12:00:44Z", "type": "commit"}, {"oid": "c88af9f2ce9901783303284a183769cb0cda6755", "url": "https://github.com/DSpace/DSpace/commit/c88af9f2ce9901783303284a183769cb0cda6755", "message": "[Task 70231] Added orgUnit x orgUnit relationshiptype and test to prove the labels in a circular relationship", "committedDate": "2020-04-09T12:08:59Z", "type": "commit"}, {"oid": "85e3bd0c52d4e7e4f12755b2e00440825bedcef2", "url": "https://github.com/DSpace/DSpace/commit/85e3bd0c52d4e7e4f12755b2e00440825bedcef2", "message": "[Task 70401] adding failing IT to prove that count is wrong with parent and child OrgUnits in the findByLabel", "committedDate": "2020-04-16T06:49:06Z", "type": "commit"}, {"oid": "5bff87e4eea63f9294aba94ff7743378d0eaabad", "url": "https://github.com/DSpace/DSpace/commit/5bff87e4eea63f9294aba94ff7743378d0eaabad", "message": "[Task 70401] fixed the RelationshipService#countByItemAndRelationshipType to keep the isLeft parameter into account", "committedDate": "2020-04-16T07:42:04Z", "type": "commit"}, {"oid": "6c91e98f48b223a367fc79512a6fce1b8bda0eb4", "url": "https://github.com/DSpace/DSpace/commit/6c91e98f48b223a367fc79512a6fce1b8bda0eb4", "message": "Merge pull request #19 from atmire/w2p-70401_count-queries-circular-entities\n\nW2p 70401 count queries circular entities", "committedDate": "2020-04-17T10:02:31Z", "type": "commit"}, {"oid": "c7f6a4629649d22785c79273cb1a2140a9c83d48", "url": "https://github.com/DSpace/DSpace/commit/c7f6a4629649d22785c79273cb1a2140a9c83d48", "message": "[Task 70419] fixed a bug where the RelationshipService creation did not check the max cardinality properly", "committedDate": "2020-04-20T15:18:27Z", "type": "commit"}, {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "url": "https://github.com/DSpace/DSpace/commit/ccb18daeb03ea19cf7de3b380380b0618c2e7497", "message": "Git merge https://github.com/atmire/DSpace.git / master\n* Conflict file: RelationshipRestRepositoryIT", "committedDate": "2020-10-28T17:06:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4MDA5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r513780092", "bodyText": "@benbosman : Just a quick note that this PR needs a rebase & cleanup.  It looks like nearly all the changes to RelationshipRestRepositoryIT are space changes (where the IDE seems to have made a lot of unrelated alignment changes).  If you could revert those space changes it'd make this PR easier to review (and it might even fall into the \"1 approval\" category).", "author": "tdonohue", "createdAt": "2020-10-28T21:44:15Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -105,60 +116,60 @@ public void setUp() throws Exception {\n         context.turnOffAuthorisationSystem();\n \n         parentCommunity = CommunityBuilder.createCommunity(context)\n-                                          .withName(\"Parent Community\")\n-                                          .build();\n+                .withName(\"Parent Community\")\n+                .build();", "originalCommit": "effd6410658b15859d6c83479e83a471e4b73397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "url": "https://github.com/DSpace/DSpace/commit/ccb18daeb03ea19cf7de3b380380b0618c2e7497", "message": "Git merge https://github.com/atmire/DSpace.git / master\n* Conflict file: RelationshipRestRepositoryIT", "committedDate": "2020-10-28T17:06:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NDU4OQ==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r516074589", "bodyText": "I don't specially like the approach of passing parameters that in my perspective describe the property of an object. In this particular case the object Relationship. The concept of Left and Right item are always subjective and relative to the person that defines it. I think a different approach that could be considered in the future is to probably considers an Item not for the location/position which is it, but if it's itself in a relation verification.\nBut I understand the reason for having this boolean here. And considering the required effort for a different approach, I'm ok with having it this way in this version.", "author": "paulo-graca", "createdAt": "2020-11-02T16:00:20Z", "path": "dspace-api/src/main/java/org/dspace/content/dao/impl/RelationshipDAOImpl.java", "diffHunk": "@@ -201,18 +201,24 @@ public int countRows(Context context) throws SQLException {\n     }\n \n     @Override\n-    public int countByItemAndRelationshipType(Context context, Item item, RelationshipType relationshipType)\n-            throws SQLException {\n+    public int countByItemAndRelationshipType(Context context, Item item, RelationshipType relationshipType,\n+                                              boolean isLeft) throws SQLException {", "originalCommit": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1ODk5Mw==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533658993", "bodyText": "I agree with @paulo-graca 's comment here.  It seems like this isLeft is needed, but it's an awkward implementation...the left/right concept is turning out to be quite confusing (and it is subjective).  I'm not sure what to replace it with though, as that would take more detailed discussion that would likely need to be delayed for post 7.0", "author": "tdonohue", "createdAt": "2020-12-01T19:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NDU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNzk3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r535407979", "bodyText": "The Left/Right contents is indeed not pre-defined, and just dependent on how the relation is configured. The concept of Left/Right was chosen to make it easier if you draw the relationship on paper.\nIt's not an easy concept to support any relationship in code, but feel free to create a ticket with suggestions to make this easier to understand.\nFor 7.0 it's indeed not realistic to adjust this", "author": "benbosman", "createdAt": "2020-12-03T16:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NDU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzI0NA==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657244", "bodyText": "This post() and all the others in this IT do not seem to be cleaning up after themselves.  Remember we should be using a try/finally, using an .andDo() to capture the ID of the created object (I suspect this code was just written prior to that best practice being established).  In any case, here's an example: https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java#L195-L207", "author": "tdonohue", "createdAt": "2020-12-01T19:12:25Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "originalCommit": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NDc2Mw==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r536094763", "bodyText": "This has been updated", "author": "benbosman", "createdAt": "2020-12-04T13:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzU0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657545", "bodyText": "Again, post should cleanup after itself", "author": "tdonohue", "createdAt": "2020-12-01T19:12:57Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated())\n+                                                   .andReturn();\n+\n+\n+        itemService.getMetadata(orgUnit1, \"*\", \"*\", \"*\", \"*\", true);\n+\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit1.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isParentOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit2.getID()))));\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit2.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isChildOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit1.getID()))));\n+\n+\n+\n+    }\n+\n+    @Test\n+    public void orgUnitFindByLabelParentChildOfCountTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")", "originalCommit": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NDgwOQ==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r536094809", "bodyText": "This has been updated", "author": "benbosman", "createdAt": "2020-12-04T13:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzY3Nw==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657677", "bodyText": "Again, post should cleanup after itself", "author": "tdonohue", "createdAt": "2020-12-01T19:13:12Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated())\n+                                                   .andReturn();\n+\n+\n+        itemService.getMetadata(orgUnit1, \"*\", \"*\", \"*\", \"*\", true);\n+\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit1.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isParentOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit2.getID()))));\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit2.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isChildOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit1.getID()))));\n+\n+\n+\n+    }\n+\n+    @Test\n+    public void orgUnitFindByLabelParentChildOfCountTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit2\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit3\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient().perform(get(\"/api/core/relationships/search/byLabel\")\n+                                .param(\"label\", \"isChildOrgUnitOf\")\n+                                .param(\"dso\", String.valueOf(orgUnit2.getID()))\n+                                .param(\"page\", \"0\")\n+                                .param(\"size\", \"1\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$.page\", PageMatcher.pageEntryWithTotalPagesAndElements(0, 1, 1, 1)));\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void orgUnitLeftMaxCardinalityTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n \n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")", "originalCommit": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NDg0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r536094845", "bodyText": "This has been updated", "author": "benbosman", "createdAt": "2020-12-04T13:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzgzNA==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657834", "bodyText": "Again, post should cleanup after itself", "author": "tdonohue", "createdAt": "2020-12-01T19:13:31Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated())\n+                                                   .andReturn();\n+\n+\n+        itemService.getMetadata(orgUnit1, \"*\", \"*\", \"*\", \"*\", true);\n+\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit1.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isParentOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit2.getID()))));\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit2.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isChildOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit1.getID()))));\n+\n+\n+\n+    }\n+\n+    @Test\n+    public void orgUnitFindByLabelParentChildOfCountTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit2\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit3\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient().perform(get(\"/api/core/relationships/search/byLabel\")\n+                                .param(\"label\", \"isChildOrgUnitOf\")\n+                                .param(\"dso\", String.valueOf(orgUnit2.getID()))\n+                                .param(\"page\", \"0\")\n+                                .param(\"size\", \"1\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$.page\", PageMatcher.pageEntryWithTotalPagesAndElements(0, 1, 1, 1)));\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void orgUnitLeftMaxCardinalityTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n \n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                          .param(\"relationshipType\",\n+                                                 isParentOrgUnitOf.getID().toString())\n+                                          .contentType(MediaType.parseMediaType\n+                                              (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                   .TEXT_URI_LIST_VALUE))\n+                                          .content(\n+                                              \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                  .getID() + \"\\n\" +\n+                                                  \"https://localhost:8080/server/api/core/items\" +\n+                                                  \"/\" + orgUnit2\n+                                                  .getID()))\n+                             .andExpect(status().isCreated());\n+\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")", "originalCommit": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NDg3OA==", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r536094878", "bodyText": "This has been updated", "author": "benbosman", "createdAt": "2020-12-04T13:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzgzNA=="}], "type": "inlineReview"}, {"oid": "aa09fb1074d4a404bd0ce0fd77cf7d19cdad8bff", "url": "https://github.com/DSpace/DSpace/commit/aa09fb1074d4a404bd0ce0fd77cf7d19cdad8bff", "message": "Merge branch 'master' into circular-entities", "committedDate": "2020-12-04T09:23:30Z", "type": "commit"}, {"oid": "c47bd37be358ce30fa7a854eb19f1923b57d21b5", "url": "https://github.com/DSpace/DSpace/commit/c47bd37be358ce30fa7a854eb19f1923b57d21b5", "message": "74947: Missing cleanup after post relationship creation", "committedDate": "2020-12-04T10:13:12Z", "type": "commit"}, {"oid": "d70e121e93a31dba899850aa399eca35aa7dbf82", "url": "https://github.com/DSpace/DSpace/commit/d70e121e93a31dba899850aa399eca35aa7dbf82", "message": "74947: Adjusting HandleDAOImplTest suffixes since this fails in CI tests:\nbecause of an existing Collection with the same handle already existing in test DB\n(problem does not occur running all tests locally)", "committedDate": "2020-12-04T12:21:21Z", "type": "commit"}]}