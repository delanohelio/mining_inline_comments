{"pr_number": 2930, "pr_title": "Default Anonymous READ rights for the site object", "pr_createdAt": "2020-08-17T11:38:24Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2930", "timeline": [{"oid": "63ca007dc2f88d4fa8f79462d4891a0fb8576133", "url": "https://github.com/DSpace/DSpace/commit/63ca007dc2f88d4fa8f79462d4891a0fb8576133", "message": "[Task 72503] added the default Anon READ policy for the site object", "committedDate": "2020-08-14T11:15:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDgxOA==", "url": "https://github.com/DSpace/DSpace/pull/2930#discussion_r479424818", "bodyText": "I think we are going to want to have a way to call this same logic via a (new) Flyway Java Migration.  Where this code is right now, it is in a Flyway Callback...and this callback only gets run after a new migration runs.  This means that, for example, on my local DSpace 7 installation, I cannot get this logic to trigger...as I'm already up to date on my migrations.\nThis same issue will appear on the DSpace 7 demo site if deployed there. It won't ever trigger this logic until a new FlywayMigration is created.\nSo, I think you'll likely need to move this logic into a public method, and then create a new Java-based migration (see examples in org.dspace.storage.rdbms.migration) which calls this method.  That way it'll be guaranteed to be triggered immediately, instead of waiting until the database needs to run a new migration.", "author": "tdonohue", "createdAt": "2020-08-28T16:55:11Z", "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/SiteServiceInitializer.java", "diffHunk": "@@ -37,10 +48,19 @@ public void initializeSiteObject() {\n             context.turnOffAuthorisationSystem();\n             // While it's not really a formal \"registry\", we need to ensure the\n             // default, required Groups exist in the DSpace database\n+            Site site = null;\n             if (siteService.findSite(context) == null) {\n-                siteService.createSite(context);\n+                site = siteService.createSite(context);\n             }\n             context.restoreAuthSystemState();\n+            if (!authorizeService.authorizeActionBoolean(context, site, Constants.READ)) {\n+                context.turnOffAuthorisationSystem();\n+                Group anonGroup = groupService.findByName(context, Group.ANONYMOUS);\n+                if (anonGroup != null) {\n+                    authorizeService.addPolicy(context, site, Constants.READ, anonGroup);\n+                }\n+                context.restoreAuthSystemState();\n+            }", "originalCommit": "63ca007dc2f88d4fa8f79462d4891a0fb8576133", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg1MjA5MQ==", "url": "https://github.com/DSpace/DSpace/pull/2930#discussion_r480852091", "bodyText": "@tdonohue We were in the process of investigating/fixing this through the Java-based migration, but this also has the same problem as described in the initial PR description:\nThe site object is only created AFtER the migrations have been processed, which means that it's impossible to add in the resourcePolicies into the migrations as is.\nWe've investigated further, and initially, we see the following 2 options\n\nThe ResourcePolicy for the anonymous rights to the Site object is generated in the SiteServiceInitializer (Current implementation).\n\nDownfall of this is that this will only be triggered on a new migration, this change by itself won\u2019t trigger a new migration so it\u2019s not kept up to date.\nRequires manual database migrations to be ran\nThis will only be the case until a new migration file is added, when any new migration file is added, this will always be ran properly\n\n\nThe ResourcePolicy could be generated in a java SQL class (Latest proposed option)\n\nThis will work currently as a new migration is triggered and in this new migration the ResourcePolicy will be added\nThis works immediately, doesn\u2019t require a manual update or waiting for a new migration file to be added\nThis will NOT work for any new instances that are being set up. The migration for a new DB/DSpace instance will only run once and when the Java SQL files are being processed, the Site object doesn\u2019t exist yet as it\u2019ll be the first run. This causes the Site anon read to be broken for ANY new DSpaces to be setup if we go this route\n\n\n\nThings that could work:\n\nInclude both, which has the downside of duplicating code but it\u2019ll always work, when making sure to add in enough checks\nMake a java flyway migration class that also creates the site if it doesn\u2019t exist, currently the site creation is handled AFTER all the migrations, it\u2019s done in the SiteServiceInitializer (Where the current implementation adds in the resource policies)\n=> Issue that this is very brittle if any migration AFTER this one alters anything to the Site table in the DB which is not desirable", "author": "jonas-atmire", "createdAt": "2020-09-01T05:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4NjU5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2930#discussion_r481186599", "bodyText": "@jonas-atmire : Thank you for your thorough description of the issue here.  I see what you mean...this isn't easy to solve\nOut of all those choices, it sounds like the current implementation may be our best option.  The problem (as previously stated) is that I'm not sure how we'll trigger this to run on our demo site, unless we just craft a few basic SQL statements that we can run manually to insert the missing resource policies.\nThe good news is though that anyone upgrading from 5.x/6.x to 7.x will autotrigger this callback to run.  So, this manual SQL route would only be necessary for active DSpace 7 developers.\nCould you or your team craft the necessary SQL statement(s) to insert these policies manually?  If so, we can move this forward as-is and just have all DSpace 7 developers run the SQL statements manually for now.", "author": "tdonohue", "createdAt": "2020-09-01T14:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4NjIxNw==", "url": "https://github.com/DSpace/DSpace/pull/2930#discussion_r481786217", "bodyText": "@tdonohue Thanks for the notes.\nDuring the initial investigation/implementation of this, we'd already created the related query to run it through flyway. (But since that was not an option, we banked that option)\nThe following is the postgres version of the required query, which adds in the site wide anonymous read rights into the resourcepolicy table\nI don't have an active h2/ORACLE db running atm, so it might be easiest for someone with the appropriate setup to run this query as well to make sure that all related syntaxes are conform to the conventions.\n\ninsert into resourcepolicy (policy_id, resource_type_id, dspace_object, action_id, epersongroup_id ) select getnextid('resourcepolicy') as policy_id, 5 as resource_type_id, (select site.uuid from site limit 1) as dspace_object, 0 as action_id, (select epersongroup.uuid from epersongroup where name = 'Anonymous') as epersongroup_id;", "author": "jonas-atmire", "createdAt": "2020-09-02T06:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0Mzk5OA==", "url": "https://github.com/DSpace/DSpace/pull/2930#discussion_r488943998", "bodyText": "That INSERT works great for me. Thanks!", "author": "tdonohue", "createdAt": "2020-09-15T20:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDgxOA=="}], "type": "inlineReview"}]}