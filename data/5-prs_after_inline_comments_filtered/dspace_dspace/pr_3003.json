{"pr_number": 3003, "pr_title": "Deleting items with min relationship", "pr_createdAt": "2020-10-14T13:35:15Z", "pr_url": "https://github.com/DSpace/DSpace/pull/3003", "timeline": [{"oid": "645f6b66c93d4cc101e63af0ac00da3bfa6b66ae", "url": "https://github.com/DSpace/DSpace/commit/645f6b66c93d4cc101e63af0ac00da3bfa6b66ae", "message": "[Task 71502] implemented tests that prove that deleting an item with a relationship of min cardinality greater than 1 fails", "committedDate": "2020-06-26T07:32:50Z", "type": "commit"}, {"oid": "2a63f0ff22327554b89d3a5d5e9be52b1ebaa5e5", "url": "https://github.com/DSpace/DSpace/commit/2a63f0ff22327554b89d3a5d5e9be52b1ebaa5e5", "message": "[Task 71502] added forceDelete method to the RelationshipService that won't check the cardinality of the relationships. Used this in the ItemService delete and added tests", "committedDate": "2020-06-26T08:54:34Z", "type": "commit"}, {"oid": "0f433ed2ae5a6f8a1a2de038df502a4890e2b316", "url": "https://github.com/DSpace/DSpace/commit/0f433ed2ae5a6f8a1a2de038df502a4890e2b316", "message": "[Task 71502] moved workspaceItemTest to the workspaceItemRestRepository", "committedDate": "2020-06-26T09:17:40Z", "type": "commit"}, {"oid": "cca43baea4bcea4d1ed548531e7d16dac6efba1f", "url": "https://github.com/DSpace/DSpace/commit/cca43baea4bcea4d1ed548531e7d16dac6efba1f", "message": "Merge remote-tracking branch 'community/main' into w2p-71502_deleting-items-with-min-relationship\n\n# Conflicts:\n#\tdspace-api/src/test/java/org/dspace/builder/WorkspaceItemBuilder.java\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "committedDate": "2020-10-14T11:47:08Z", "type": "commit"}, {"oid": "9a8f81db44b9e3005c5f3d2439dab56917271097", "url": "https://github.com/DSpace/DSpace/commit/9a8f81db44b9e3005c5f3d2439dab56917271097", "message": "Merge conflicts", "committedDate": "2020-10-14T11:51:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NjgwNA==", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r513766804", "bodyText": "Shouldn't this test also check to make sure that deleting the item also deleted the relationship & copied metadata over to the Item?   It looks like right now, we are just verifying that the relationship cannot be deleted directly, but that the Item deletion succeeds.  I know that's also useful (as the item deletion would not succeed), but it seems like it only tests part of the new code?", "author": "tdonohue", "createdAt": "2020-10-28T21:18:00Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -2740,5 +2746,68 @@ public void testHiddenMetadataForUserWithWriteRights() throws Exception {\n \n     }\n \n+    @Test\n+    public void deleteItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item publication1 = ItemBuilder.createItem(context, col1)\n+                                       .withTitle(\"Publication1\")\n+                                       .withAuthor(\"Testy, TEst\")\n+                                       .withIssueDate(\"2015-01-01\")\n+                                       .withRelationshipType(\"Publication\")\n+                                       .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+        //Delete public item\n+        getClient(token).perform(delete(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(404));", "originalCommit": "9a8f81db44b9e3005c5f3d2439dab56917271097", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwNTIxNQ==", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r558305215", "bodyText": "The test to verify the relationship is deleted is now present. This did reveal that the status code of a non-existing relationship was not 404 yet, which has been fixed in this PR now\nWe're working on the details of the metadata copy", "author": "benbosman", "createdAt": "2021-01-15T13:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg5ODgzNA==", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r567898834", "bodyText": "This has been solved now as well", "author": "benbosman", "createdAt": "2021-02-01T15:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NjgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NzA1MQ==", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r513767051", "bodyText": "Same with this test...it seems like we should be checking that the relationship was deleted & metadata copied over.", "author": "tdonohue", "createdAt": "2020-10-28T21:18:28Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -4613,4 +4619,66 @@ public void findOneFullProjectionTest() throws Exception {\n                                 .andExpect(jsonPath(\"$._embedded.collection._embedded.adminGroup\").doesNotExist());\n \n     }\n+\n+    @Test\n+    public void deleteWorkspaceItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        //2. One workspace item.\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                                                          .withRelationshipType(\"Publication\")\n+                                                          .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, workspaceItem.getItem(), author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, workspaceItem.getItem(), author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+\n+        //Delete the workspaceitem\n+        getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + workspaceItem.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + workspaceItem.getID()))\n+                        .andExpect(status().is(404));", "originalCommit": "9a8f81db44b9e3005c5f3d2439dab56917271097", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwNTI2Mw==", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r558305263", "bodyText": "The test to verify the relationship is deleted is now present", "author": "benbosman", "createdAt": "2021-01-15T13:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NzA1MQ=="}], "type": "inlineReview"}, {"oid": "564140b0c8dee3a0df8c412dc9d721eba531ffd7", "url": "https://github.com/DSpace/DSpace/commit/564140b0c8dee3a0df8c412dc9d721eba531ffd7", "message": "Merge remote-tracking branch 'community/main' into w2p-71502_deleting-items-with-min-relationship", "committedDate": "2021-01-15T10:39:07Z", "type": "commit"}, {"oid": "567a9f0567a36cbea0f6c2529ddbf7a35c2db835", "url": "https://github.com/DSpace/DSpace/commit/567a9f0567a36cbea0f6c2529ddbf7a35c2db835", "message": "Verify the relationship is deleted\nStatus 404 is needed for a relationship which doesn't exist", "committedDate": "2021-01-15T12:24:25Z", "type": "commit"}, {"oid": "be48c56cae73de03d382a4bd89c988333c0b3c95", "url": "https://github.com/DSpace/DSpace/commit/be48c56cae73de03d382a4bd89c988333c0b3c95", "message": "Merge branch 'dspace-origin-master' into w2p-76575_IT-for-deleting-items-and-populating-virtual-md\n\n# Conflicts:\n#\tdspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "committedDate": "2021-01-29T10:09:18Z", "type": "commit"}, {"oid": "e32fd1fc4c0586f2c5db60b1cfcf7c0775aecc94", "url": "https://github.com/DSpace/DSpace/commit/e32fd1fc4c0586f2c5db60b1cfcf7c0775aecc94", "message": "76575: ITs for deleting items and populating virtual metadata", "committedDate": "2021-01-29T16:23:49Z", "type": "commit"}, {"oid": "0e8cd8fa5829ed909b2345a37cc80a01b971cec7", "url": "https://github.com/DSpace/DSpace/commit/0e8cd8fa5829ed909b2345a37cc80a01b971cec7", "message": "Merge pull request #59 from atmire/w2p-76575_IT-for-deleting-items-and-populating-virtual-md\n\nW2p 76575 it for deleting items and populating virtual md", "committedDate": "2021-02-01T14:03:22Z", "type": "commit"}, {"oid": "aca41ea8ccba3698fd8960af0f146531a0d206e5", "url": "https://github.com/DSpace/DSpace/commit/aca41ea8ccba3698fd8960af0f146531a0d206e5", "message": "Merge branch 'dspace-origin-master' into w2p-71502_deleting-items-with-min-relationship\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "committedDate": "2021-02-15T20:39:02Z", "type": "commit"}]}