{"pr_number": 3009, "pr_title": "Refactor/remove custom MultipartFileSender to use Spring Boot Range requests", "pr_createdAt": "2020-10-15T14:48:02Z", "pr_url": "https://github.com/DSpace/DSpace/pull/3009", "timeline": [{"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "url": "https://github.com/DSpace/DSpace/commit/867aec4cd10f2a3ef75193dd28a42d22645ab845", "message": "Refactor/remove custom MultipartFileSender to use Spring Boot Range requests", "committedDate": "2020-10-15T16:31:04Z", "type": "commit"}, {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "url": "https://github.com/DSpace/DSpace/commit/867aec4cd10f2a3ef75193dd28a42d22645ab845", "message": "Refactor/remove custom MultipartFileSender to use Spring Boot Range requests", "committedDate": "2020-10-15T16:31:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODEyMw==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517628123", "bodyText": "Please add JavaDocs to this new Class", "author": "tdonohue", "createdAt": "2020-11-04T20:59:51Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/BitstreamResource.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.UUID;\n+\n+import org.springframework.core.io.AbstractResource;\n+\n+public class BitstreamResource extends AbstractResource {", "originalCommit": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODcyNw==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517628727", "bodyText": "Please update these JavaDocs to better describe this new HttpHeadersInitializer.  These old JavaDocs are incorrect & accidentally carried over from the old class.", "author": "tdonohue", "createdAt": "2020-11-04T21:01:02Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java", "originalCommit": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTE5MA==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517629190", "bodyText": "Please remove this TODO & add JavaDocs to this method (as this is one of the primary methods in this class).", "author": "tdonohue", "createdAt": "2020-11-04T21:02:01Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java\n+ *\n+ * @author Tom Desair (tom dot desair at atmire dot com)\n+ * @author Frederic Van Reet (frederic dot vanreet at atmire dot com)\n+ */\n+public class HttpHeadersInitializer {\n+\n+    protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+    private static final String METHOD_HEAD = \"HEAD\";\n+    private static final String MULTIPART_BOUNDARY = \"MULTIPART_BYTERANGES\";\n+    private static final String CONTENT_TYPE_MULTITYPE_WITH_BOUNDARY = \"multipart/byteranges; boundary=\" +\n+        MULTIPART_BOUNDARY;\n+    public static final String CONTENT_DISPOSITION_INLINE = \"inline\";\n+    public static final String CONTENT_DISPOSITION_ATTACHMENT = \"attachment\";\n+    private static final String IF_NONE_MATCH = \"If-None-Match\";\n+    private static final String IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String ETAG = \"ETag\";\n+    private static final String IF_MATCH = \"If-Match\";\n+    private static final String IF_UNMODIFIED_SINCE = \"If-Unmodified-Since\";\n+    private static final String CONTENT_TYPE = \"Content-Type\";\n+    private static final String ACCEPT_RANGES = \"Accept-Ranges\";\n+    private static final String BYTES = \"bytes\";\n+    private static final String LAST_MODIFIED = \"Last-Modified\";\n+    private static final String EXPIRES = \"Expires\";\n+    private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n+    private static final String IMAGE = \"image\";\n+    private static final String ACCEPT = \"Accept\";\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String CONTENT_DISPOSITION_FORMAT = \"%s;filename=\\\"%s\\\"\";\n+    private static final String CACHE_CONTROL = \"Cache-Control\";\n+\n+    private int bufferSize = 1000000;\n+\n+    private static final long DEFAULT_EXPIRE_TIME = 60L * 60L * 1000L;\n+\n+    //no-cache so request is always performed for logging\n+    private static final String CACHE_CONTROL_SETTING = \"private,no-cache\";\n+\n+    private BufferedInputStream inputStream;\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private String contentType;\n+    private String disposition;\n+    private long lastModified;\n+    private long length;\n+    private String fileName;\n+    private String checksum;\n+\n+    public HttpHeadersInitializer(final InputStream inputStream) {\n+        //Convert to BufferedInputStream so we can re-read the stream\n+        this.inputStream = new BufferedInputStream(inputStream);\n+    }\n+\n+\n+    public static HttpHeadersInitializer fromInputStream(InputStream inputStream) {\n+        return new HttpHeadersInitializer(inputStream);\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletRequest httpRequest) {\n+        request = httpRequest;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletResponse httpResponse) {\n+        response = httpResponse;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLength(long length) {\n+        this.length = length;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withChecksum(String checksum) {\n+        this.checksum = checksum;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withMimetype(String mimetype) {\n+        this.contentType = mimetype;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLastModified(long lastModified) {\n+        this.lastModified = lastModified;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withBufferSize(int bufferSize) {\n+        if (bufferSize > 0) {\n+            this.bufferSize = bufferSize;\n+        }\n+        return this;\n+    }\n+    public HttpHeadersInitializer withDisposition(String contentDisposition) {\n+        this.disposition = contentDisposition;\n+        return this;\n+    }\n+\n+    //TODO rename to initialiseHeaders\n+    public HttpHeaders initialiseHeaders() throws IOException {", "originalCommit": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517630665", "bodyText": "Should this have a new issue ticket?  It sounds like you are recommending upgrading to Spring v5.2.9?  While we don't need to do that in this PR, we could take this opportunity to recommend an upgrade to Spring & Spring Boot if there's a good reason to do so.", "author": "tdonohue", "createdAt": "2020-11-04T21:05:02Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java\n+ *\n+ * @author Tom Desair (tom dot desair at atmire dot com)\n+ * @author Frederic Van Reet (frederic dot vanreet at atmire dot com)\n+ */\n+public class HttpHeadersInitializer {\n+\n+    protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+    private static final String METHOD_HEAD = \"HEAD\";\n+    private static final String MULTIPART_BOUNDARY = \"MULTIPART_BYTERANGES\";\n+    private static final String CONTENT_TYPE_MULTITYPE_WITH_BOUNDARY = \"multipart/byteranges; boundary=\" +\n+        MULTIPART_BOUNDARY;\n+    public static final String CONTENT_DISPOSITION_INLINE = \"inline\";\n+    public static final String CONTENT_DISPOSITION_ATTACHMENT = \"attachment\";\n+    private static final String IF_NONE_MATCH = \"If-None-Match\";\n+    private static final String IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String ETAG = \"ETag\";\n+    private static final String IF_MATCH = \"If-Match\";\n+    private static final String IF_UNMODIFIED_SINCE = \"If-Unmodified-Since\";\n+    private static final String CONTENT_TYPE = \"Content-Type\";\n+    private static final String ACCEPT_RANGES = \"Accept-Ranges\";\n+    private static final String BYTES = \"bytes\";\n+    private static final String LAST_MODIFIED = \"Last-Modified\";\n+    private static final String EXPIRES = \"Expires\";\n+    private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n+    private static final String IMAGE = \"image\";\n+    private static final String ACCEPT = \"Accept\";\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String CONTENT_DISPOSITION_FORMAT = \"%s;filename=\\\"%s\\\"\";\n+    private static final String CACHE_CONTROL = \"Cache-Control\";\n+\n+    private int bufferSize = 1000000;\n+\n+    private static final long DEFAULT_EXPIRE_TIME = 60L * 60L * 1000L;\n+\n+    //no-cache so request is always performed for logging\n+    private static final String CACHE_CONTROL_SETTING = \"private,no-cache\";\n+\n+    private BufferedInputStream inputStream;\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private String contentType;\n+    private String disposition;\n+    private long lastModified;\n+    private long length;\n+    private String fileName;\n+    private String checksum;\n+\n+    public HttpHeadersInitializer(final InputStream inputStream) {\n+        //Convert to BufferedInputStream so we can re-read the stream\n+        this.inputStream = new BufferedInputStream(inputStream);\n+    }\n+\n+\n+    public static HttpHeadersInitializer fromInputStream(InputStream inputStream) {\n+        return new HttpHeadersInitializer(inputStream);\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletRequest httpRequest) {\n+        request = httpRequest;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletResponse httpResponse) {\n+        response = httpResponse;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLength(long length) {\n+        this.length = length;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withChecksum(String checksum) {\n+        this.checksum = checksum;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withMimetype(String mimetype) {\n+        this.contentType = mimetype;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLastModified(long lastModified) {\n+        this.lastModified = lastModified;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withBufferSize(int bufferSize) {\n+        if (bufferSize > 0) {\n+            this.bufferSize = bufferSize;\n+        }\n+        return this;\n+    }\n+    public HttpHeadersInitializer withDisposition(String contentDisposition) {\n+        this.disposition = contentDisposition;\n+        return this;\n+    }\n+\n+    //TODO rename to initialiseHeaders\n+    public HttpHeaders initialiseHeaders() throws IOException {\n+\n+        HttpHeaders httpHeaders = new HttpHeaders();\n+        // Validate and process range -------------------------------------------------------------\n+\n+        log.debug(\"Content-Type : {}\", contentType);\n+        // Initialize response.\n+        //TODO response.reset => Can be re-instated if we bump to 5.2.9", "originalCommit": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk4NDU0Mw==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r524984543", "bodyText": "@tdonohue-> (Heads up: it's been a while since we altered this and we seemed to have forgotten to take note of WHY exactly this was commented out)\nOne of the points mentioned in release tag v5.2.9 contains an issue related to the response.reset call, which seems to fit the description (And also jogged Raf's memory)\nThat being said:\n\nThe current spring versions seems 5.2.5 (which is released in march, around 8 months ago.)\nThe last 5.2.x version is 5.2.11, which is only a week old.\nThere are 2 courses that we can take imo\n\nWe upgrade it early to both get the advantage of all fixes that have been done up to now, as well as already getting a bunch of the upgrade done. (Upgrading later on might introduce MORE changes required). This DOES introduce the need for later upgrades as well if in the meantime, a big bug fix is released.\nWe wait until there is a more convenient time for this upgrade (less features/fixes in the making for example), and we upgrade then. That way, we only do one BIG upgrade at that time, instead of multiple smaller ones", "author": "jonas-atmire", "createdAt": "2020-11-17T08:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NDEwNA==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r525254104", "bodyText": "@jonas-atmire : I'm not sure I understand entirely...or at least I have a few more questions:\nIn terms of this response.reset call....what does this add to the code?  Is the code less stable in some way until we upgrade to v5.2.9 (or above)?  Put another way, what is the risk of delaying the upgrade until a later date.  Is the risk minimal, or do you two foresee issues here if we do not upgrade?\nBy default here, I'd rather not complicate this ticket and hold it back for an upgrade to Spring v.5.2.9.  But, it sounds like we might need another ticket here around upgrading to Spring v5.2.9 or above....and I'm not yet sure how to prioritize that upgrade ticket, as I don't quite understand the risk of not upgrading immediately.", "author": "tdonohue", "createdAt": "2020-11-17T15:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkyMjYxNw==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r525922617", "bodyText": "@tdonohue , sorry for the confusion. I seemed to have linked to an incorrect issue previously.\nThis code does the following:\n\nClears any data that exists in the buffer as well as the status code, headers.\n\nI have reconvened with @Raf-atmire, who did the actual implementation of this upgrade.\nDuring this implementation, this line of the code broke the feature when it was being triggered, so it was put in a comment temporarily.\n(We do not actually see any risks with leaving this line out for the time being, so we can reduce the complication of this ticket, and holding it back because of a spring upgrade)\nI have now re-enabled this line locally, and went through a quick test of downloading a content file created through the script processing, and this does NOT break the code anymore.\nAs such, I have re-enabled this line again.\nIf, during your testing, you see any issue with this come up, please let me know so we can indeed check if this is required for the time being or not.\nUPDATE\nThis apparently breaks the actual test builds for some bizarre reason...\n\nhttps://travis-ci.com/github/DSpace/DSpace/jobs/442173587\nI think the response.reset might be doing something incorrectly in the backend during the testing, which\n\nAs such -> This was the underlying reason that it was commented out temporarily.\nIf you agree with this Tim, I'd propose to leave this response.reset as is for now (Commenting it out again), and follow it up later on", "author": "jonas-atmire", "createdAt": "2020-11-18T09:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2MDc5OA==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r526160798", "bodyText": "@jonas-atmire : Thanks for the more thorough testing/explanation.  I'm OK with leaving this commented out for now... if you and @Raf-atmire feel that the ideal behavior is that this response.reset() should be enabled, then I'd ask that we please create an issue ticket about re-enabling it once we upgrade to Spring v5.2.9 or above.  That way you can link/reference the ticket in your comment and say something like //TODO response.reset => Can be re-instated once we upgrade to Spring 5.2.9, see issue #__\nThat seems good enough to me. I'd just ask that we create a ticket as a reminder, as the TODO may end up forgotten otherwise.   I'll likely schedule the Spring upgrade for 7.1 or 7.2 since it seems low priority at this time.  Thanks!", "author": "tdonohue", "createdAt": "2020-11-18T15:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzNDg4Nw==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r526634887", "bodyText": "@tdonohue Sorry again for the back and forth.\nI've subsequently commented out that part of the code again, and created a new issue referencing the piece of code.\n#3056", "author": "jonas-atmire", "createdAt": "2020-11-19T07:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTM2Mg==", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517631362", "bodyText": "Please add JavaDocs to this public method.  (I realize this method was copied over from the old class, but this is a good opportunity to describe it better with JavaDocs, if possible)", "author": "tdonohue", "createdAt": "2020-11-04T21:06:26Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java\n+ *\n+ * @author Tom Desair (tom dot desair at atmire dot com)\n+ * @author Frederic Van Reet (frederic dot vanreet at atmire dot com)\n+ */\n+public class HttpHeadersInitializer {\n+\n+    protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+    private static final String METHOD_HEAD = \"HEAD\";\n+    private static final String MULTIPART_BOUNDARY = \"MULTIPART_BYTERANGES\";\n+    private static final String CONTENT_TYPE_MULTITYPE_WITH_BOUNDARY = \"multipart/byteranges; boundary=\" +\n+        MULTIPART_BOUNDARY;\n+    public static final String CONTENT_DISPOSITION_INLINE = \"inline\";\n+    public static final String CONTENT_DISPOSITION_ATTACHMENT = \"attachment\";\n+    private static final String IF_NONE_MATCH = \"If-None-Match\";\n+    private static final String IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String ETAG = \"ETag\";\n+    private static final String IF_MATCH = \"If-Match\";\n+    private static final String IF_UNMODIFIED_SINCE = \"If-Unmodified-Since\";\n+    private static final String CONTENT_TYPE = \"Content-Type\";\n+    private static final String ACCEPT_RANGES = \"Accept-Ranges\";\n+    private static final String BYTES = \"bytes\";\n+    private static final String LAST_MODIFIED = \"Last-Modified\";\n+    private static final String EXPIRES = \"Expires\";\n+    private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n+    private static final String IMAGE = \"image\";\n+    private static final String ACCEPT = \"Accept\";\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String CONTENT_DISPOSITION_FORMAT = \"%s;filename=\\\"%s\\\"\";\n+    private static final String CACHE_CONTROL = \"Cache-Control\";\n+\n+    private int bufferSize = 1000000;\n+\n+    private static final long DEFAULT_EXPIRE_TIME = 60L * 60L * 1000L;\n+\n+    //no-cache so request is always performed for logging\n+    private static final String CACHE_CONTROL_SETTING = \"private,no-cache\";\n+\n+    private BufferedInputStream inputStream;\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private String contentType;\n+    private String disposition;\n+    private long lastModified;\n+    private long length;\n+    private String fileName;\n+    private String checksum;\n+\n+    public HttpHeadersInitializer(final InputStream inputStream) {\n+        //Convert to BufferedInputStream so we can re-read the stream\n+        this.inputStream = new BufferedInputStream(inputStream);\n+    }\n+\n+\n+    public static HttpHeadersInitializer fromInputStream(InputStream inputStream) {\n+        return new HttpHeadersInitializer(inputStream);\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletRequest httpRequest) {\n+        request = httpRequest;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletResponse httpResponse) {\n+        response = httpResponse;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLength(long length) {\n+        this.length = length;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withChecksum(String checksum) {\n+        this.checksum = checksum;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withMimetype(String mimetype) {\n+        this.contentType = mimetype;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLastModified(long lastModified) {\n+        this.lastModified = lastModified;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withBufferSize(int bufferSize) {\n+        if (bufferSize > 0) {\n+            this.bufferSize = bufferSize;\n+        }\n+        return this;\n+    }\n+    public HttpHeadersInitializer withDisposition(String contentDisposition) {\n+        this.disposition = contentDisposition;\n+        return this;\n+    }\n+\n+    //TODO rename to initialiseHeaders\n+    public HttpHeaders initialiseHeaders() throws IOException {\n+\n+        HttpHeaders httpHeaders = new HttpHeaders();\n+        // Validate and process range -------------------------------------------------------------\n+\n+        log.debug(\"Content-Type : {}\", contentType);\n+        // Initialize response.\n+        //TODO response.reset => Can be re-instated if we bump to 5.2.9\n+        response.setBufferSize(bufferSize);\n+        if (contentType != null) {\n+            httpHeaders.put(CONTENT_TYPE, Collections.singletonList(contentType));\n+        }\n+        httpHeaders.put(ACCEPT_RANGES, Collections.singletonList(BYTES));\n+        if (checksum != null) {\n+            httpHeaders.put(ETAG, Collections.singletonList(checksum));\n+        }\n+        httpHeaders.put(LAST_MODIFIED, Collections.singletonList(FastHttpDateFormat.formatDate(lastModified)));\n+        httpHeaders.put(EXPIRES, Collections.singletonList(FastHttpDateFormat.formatDate(\n+            System.currentTimeMillis() + DEFAULT_EXPIRE_TIME)));\n+\n+        //No-cache so that we can log every download\n+        httpHeaders.put(CACHE_CONTROL, Collections.singletonList(CACHE_CONTROL_SETTING));\n+\n+        if (isNullOrEmpty(disposition)) {\n+            if (contentType == null) {\n+                contentType = APPLICATION_OCTET_STREAM;\n+            } else if (!contentType.startsWith(IMAGE)) {\n+                String accept = request.getHeader(ACCEPT);\n+                disposition = accept != null && accepts(accept,\n+                                                        contentType) ? CONTENT_DISPOSITION_INLINE :\n+                    CONTENT_DISPOSITION_ATTACHMENT;\n+            }\n+\n+        }\n+\n+        httpHeaders.put(CONTENT_DISPOSITION, Collections.singletonList(String.format(CONTENT_DISPOSITION_FORMAT,\n+                                                                                     disposition, fileName)));\n+        log.debug(\"Content-Disposition : {}\", disposition);\n+\n+        // Content phase\n+        if (METHOD_HEAD.equals(request.getMethod())) {\n+            log.debug(\"HEAD request - skipping content\");\n+            return null;\n+        }\n+\n+        return httpHeaders;\n+\n+    }\n+\n+    public boolean isValid() throws IOException {", "originalCommit": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4fe9e667453a1edf7acff713b50da7a6aeb59eb", "url": "https://github.com/DSpace/DSpace/commit/c4fe9e667453a1edf7acff713b50da7a6aeb59eb", "message": "[Task 73179] added javadocs and cleaned up where necessary", "committedDate": "2020-11-06T15:39:31Z", "type": "commit"}, {"oid": "6dd048c68eb9029b4de3d8335e39a4837eda139e", "url": "https://github.com/DSpace/DSpace/commit/6dd048c68eb9029b4de3d8335e39a4837eda139e", "message": "Re-enabling of response.reset() method -> https://github.com/DSpace/DSpace/pull/3009#discussion_r525254104", "committedDate": "2020-11-18T09:08:12Z", "type": "commit"}, {"oid": "50703a0771751c7818f6367234f41fccf34a3aac", "url": "https://github.com/DSpace/DSpace/commit/50703a0771751c7818f6367234f41fccf34a3aac", "message": "Reverting previous commit + clarification comment", "committedDate": "2020-11-19T07:01:42Z", "type": "commit"}]}