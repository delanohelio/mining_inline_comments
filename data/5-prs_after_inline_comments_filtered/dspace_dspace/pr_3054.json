{"pr_number": 3054, "pr_title": "Update claimedtasks and pooltasks to support reloading of workflow actions on individual WorkflowItems", "pr_createdAt": "2020-11-18T10:25:40Z", "pr_url": "https://github.com/DSpace/DSpace/pull/3054", "timeline": [{"oid": "ff436491fb1df139112b27874987660efb434f18", "url": "https://github.com/DSpace/DSpace/commit/ff436491fb1df139112b27874987660efb434f18", "message": "implemented new methods as createAndReturn for claimedTask and search methods for ClaimedTask and PoolTask", "committedDate": "2020-12-06T11:11:09Z", "type": "commit"}, {"oid": "86a6819dd802e00aa0e83d374f38d88eb1431734", "url": "https://github.com/DSpace/DSpace/commit/86a6819dd802e00aa0e83d374f38d88eb1431734", "message": "fixed tests", "committedDate": "2020-12-06T11:12:55Z", "type": "commit"}, {"oid": "170ea73144b16c2518235e13aad4a815646ad579", "url": "https://github.com/DSpace/DSpace/commit/170ea73144b16c2518235e13aad4a815646ad579", "message": "fix failed test", "committedDate": "2020-12-06T11:14:33Z", "type": "commit"}, {"oid": "f6e0712c49fcab44fc2715d495434583dad12606", "url": "https://github.com/DSpace/DSpace/commit/f6e0712c49fcab44fc2715d495434583dad12606", "message": "added ITs to prove the functionality of search methods", "committedDate": "2020-12-06T11:15:05Z", "type": "commit"}, {"oid": "da9efdff6c7b6b5602ddf81bf1d345af96019716", "url": "https://github.com/DSpace/DSpace/commit/da9efdff6c7b6b5602ddf81bf1d345af96019716", "message": "fixed search method of Pooltask endpoint", "committedDate": "2020-12-06T11:15:32Z", "type": "commit"}, {"oid": "10ac8c91cbe33bef798baec3cacccf12f134d52a", "url": "https://github.com/DSpace/DSpace/commit/10ac8c91cbe33bef798baec3cacccf12f134d52a", "message": "fixed search method of ClaimedTask endpoint", "committedDate": "2020-12-06T11:16:20Z", "type": "commit"}, {"oid": "d9299e0039f1587479bd0aba818fea2a08553368", "url": "https://github.com/DSpace/DSpace/commit/d9299e0039f1587479bd0aba818fea2a08553368", "message": "added missing test", "committedDate": "2020-12-06T11:16:38Z", "type": "commit"}, {"oid": "c8f5ca27893e17af145799eae2a119938b02da27", "url": "https://github.com/DSpace/DSpace/commit/c8f5ca27893e17af145799eae2a119938b02da27", "message": "refactored test, removing the double check", "committedDate": "2020-12-06T11:17:03Z", "type": "commit"}, {"oid": "40ec8d70766a079ca7922f47e6c86ae077dd346d", "url": "https://github.com/DSpace/DSpace/commit/40ec8d70766a079ca7922f47e6c86ae077dd346d", "message": "changed type, from Integer to int", "committedDate": "2020-12-06T11:17:26Z", "type": "commit"}, {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "url": "https://github.com/DSpace/DSpace/commit/87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "message": "Implement community feedbacks", "committedDate": "2020-12-06T11:21:04Z", "type": "commit"}, {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "url": "https://github.com/DSpace/DSpace/commit/87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "message": "Implement community feedbacks", "committedDate": "2020-12-06T11:21:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540835354", "bodyText": "Both an incorrect item and no claim tasks for the items result in a 404, the incorrect item should most likely be a 429\nSame applies for the other searches below", "author": "benbosman", "createdAt": "2020-12-11T10:10:50Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -125,6 +135,54 @@ public ClaimedTaskRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<ClaimedTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<ClaimedTask> tasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                return null;", "originalCommit": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwNzM3NQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r541007375", "bodyText": "@benbosman : A 429 is \"Too Many Requests\".  I don't think that's the error code we'd want here.  Is there a reason why 404 isn't sufficient?  I'll look at other search endpoints to see what they return in this scenario.", "author": "tdonohue", "createdAt": "2020-12-11T14:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxNjk2NA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r541016964", "bodyText": "@benbosman : We are returning 404s on (at least some) other endpoints of this type.  For example\n\n/api/config/workflowdefinitions/search/findByCollection?uuid=[invalidCollection] : https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkflowDefinitionRestRepositoryIT.java#L256\n/api/eperson/registration/search/findByToken?token=[invalidToken]: https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/RegistrationRestRepositoryIT.java#L94\n\nIn my opinion, a 404 is sufficient here, unless I'm missing your point.", "author": "tdonohue", "createdAt": "2020-12-11T15:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MTQ5Mg==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r541071492", "bodyText": "Sorry, my mistake.\nI meant 422, in line with https://github.com/DSpace/Rest7Contract/blob/main/vocabularies.md#get-controlled-vocabulary-by-metadata-and-collection", "author": "benbosman", "createdAt": "2020-12-11T16:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3NTE5MA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r541075190", "bodyText": "Thanks for clarifying.  I'm OK with switching this to 422... I can see how that might give more information to the client. A 404 also is returned if the endpoint is \"Not Found\", so in this scenario I can understand that a 404 might be misleading -- the request is valid, but the UUID param is not.\n@abollini : Do you have a strong opinion here?  I can see both sides, and it seems like we've been inconsistent on whether to return 422 or 404 in this scenario.", "author": "tdonohue", "createdAt": "2020-12-11T16:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2NDYxNw==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r542264617", "bodyText": "thanks @benbosman @tdonohue to note that. 404 is not appropriate because the endpoint exists, it is just a matter of the result that must be returned or the parameters that have been provided.\nThere are four possible scenario here\n\nthe item UUID is missing, this should lead to a 400 error as it is a mandatory parameter\nthe parameter for the item UUID is invalid (it is a string, an integer, etc.) it should be treated as the previous case 400\nthe item is not found, this should return 422\nthe item exists but there are no claimed tasks for it, this should return an empty page with a 200 (as there is at least the pagination information in the json, if it was a single element search 204 would be used)\n\nwe have already had a detailed discussion around both aspects 404 vs 400 vs 422 and about the 200/204 for empty search but I was able to find previous references only for the first see\nhttps://jira.lyrasis.org/browse/DS-4428\nDSpace/RestContract#102\nThis also mean that the two enpoints noted by @tdonohue that currently return 404 are wrong and should be fixed", "author": "abollini", "createdAt": "2020-12-14T10:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5NzE3Mg==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r542297172", "bodyText": "Thanks @abollini I've read through your 4 scenarios, and I agree with your proposed error codes for this endpoint\nRegarding the two endpoints noted by @tdonohue :\n\nhttps://github.com/DSpace/Rest7Contract/blob/main/epersonregistrations.md#search-eperson-registration doesn't return a list, and I'd assume it will return a 400 for a missing token and a 404 for a non-existing token\nhttps://github.com/DSpace/Rest7Contract/blob/main/workflowdefinitions.md#findbycollection doesn't specify any details, but https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/WorkflowDefinitionRestRepository.java#L76 seems to also state it doesn't return a list. So this would imply:\n\nthe collection UUID is missing, this should lead to a 400 error as it is a mandatory parameter\nthe parameter for the collection UUID is invalid (it is a string, an integer, etc.) it should be treated as the previous case 400\nthe collection is not found, this should return 422\nthe collection exists but there is no workflow definition for it (if that's even possible), this should return a 404 since it's not a list", "author": "benbosman", "createdAt": "2020-12-14T11:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1NDc1Ng==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r542454756", "bodyText": "@benbosman when a single result is returned by a search method, null is translated to 204 No Content. This is already supported by our RestResourceController, see https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java#L1014", "author": "abollini", "createdAt": "2020-12-14T15:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyODkwNw==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r542628907", "bodyText": "I have also created #3093 to track the discussion about the other two endpoints", "author": "abollini", "createdAt": "2020-12-14T18:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNjU1MA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540836550", "bodyText": "Small typing error", "author": "benbosman", "createdAt": "2020-12-11T10:12:43Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -197,6 +255,33 @@ protected void delete(Context context, Integer id) {\n         throw new RepositoryMethodNotImplementedException(ClaimedTaskRest.NAME, \"findAll\");\n     }\n \n+    @Override\n+    protected ClaimedTaskRest createAndReturn(Context context, List<String> list)\n+            throws AuthorizeException, SQLException, RepositoryMethodNotImplementedException {\n+        HttpServletRequest request = getRequestService().getCurrentRequest().getHttpServletRequest();\n+        ClaimedTask claimedTask = null;\n+        try {\n+            PoolTask task = uriListHandlerService.handle(context, request, list, PoolTask.class);\n+            if (task == null) {\n+                throw\n+                    new ResourceNotFoundException(\"No PoolTask record found, the uri-list does not contait a resource\");", "originalCommit": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0MTI5OQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540841299", "bodyText": "Shouldn't this be a 429?", "author": "benbosman", "createdAt": "2020-12-11T10:20:24Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/TaskRestRepositoriesIT.java", "diffHunk": "@@ -723,9 +728,10 @@ public void claimTaskForbiddenTest() throws Exception {\n     @Test\n     public void claimTaskNotExistingTest() throws Exception {\n         String adminToken = getAuthToken(admin.getEmail(), password);\n-        getClient(adminToken).perform(post(\"/api/workflow/pooltasks/\" + Integer.MAX_VALUE)\n-            .contentType(MediaType.APPLICATION_FORM_URLENCODED))\n-            .andExpect(status().isNotFound());\n+        getClient(adminToken).perform(post(\"/api/workflow/claimedtasks\")\n+                             .contentType(MediaType.parseMediaType(RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                             .content(\"/api/workflow/pooltasks/\" + Integer.MAX_VALUE))\n+                             .andExpect(status().isNotFound());", "originalCommit": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NDMwMw==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540844303", "bodyText": "It seems there are no tests for:\n\nsearching with a UUID not in the workflow (an archived item)\nsearching with a UUID in the workflow, without pooled tasks\n\nThis seems to be missing for the other search methods as well", "author": "benbosman", "createdAt": "2020-12-11T10:25:27Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/TaskRestRepositoriesIT.java", "diffHunk": "@@ -3092,4 +2943,855 @@ public void claimedTaskTest_Upload_EditMetadataOptionAllowed() throws Exception\n         bibtex.close();\n     }\n \n+    @Test\n+    public void findAllPooltasksByItemTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"reviewer1@example.com\")\n+                                          .withPassword(password).build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                                           .withName(\"Collection 1\")\n+                                           .withWorkflowGroup(1, reviewer1, admin).build();\n+\n+        // create a normal user to use as submitter\n+        EPerson submitter = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"submitter@example.com\")\n+                                          .withPassword(password).build();\n+\n+        context.setCurrentUser(submitter);\n+\n+        PoolTask poolTask = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                .withTitle(\"Workflow Item 1\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        Item item1 = poolTask.getWorkflowItem().getItem();\n+\n+        PoolTask poolTask2 = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                .withTitle(\"Workflow Item 2\")\n+                .withIssueDate(\"2020-01-19\")\n+                .withAuthor(\"Tommaso, Donald\").withAuthor(\"Shon, John\")\n+                .withSubject(\"ExtraEntry\").build();\n+\n+        Item item2 = poolTask2.getWorkflowItem().getItem();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdmin = getAuthToken(admin.getEmail(), password);\n+        getClient(tokenAdmin).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+               .param(\"uuid\", item1.getID().toString()))\n+               .andExpect(status().isOk())\n+               .andExpect(jsonPath(\"$._embedded.pooltasks\", Matchers.containsInAnyOrder(\n+                Matchers.allOf(\n+                Matchers.is(PoolTaskMatcher.matchPoolTask(null, \"reviewstep\")), hasJsonPath(\"$._embedded.workflowitem\",\n+                Matchers.is(WorkflowItemMatcher.matchItemWithTitleAndDateIssuedAndSubject(\n+                            poolTask.getWorkflowItem(), \"Workflow Item 1\", \"2017-10-17\", \"ExtraEntry\")))\n+                ))))\n+               .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/workflow/pooltasks\")))\n+               .andExpect(jsonPath(\"$.page.totalElements\", is(1)));\n+\n+        getClient(tokenAdmin).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                .param(\"uuid\", item2.getID().toString()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.pooltasks\", Matchers.containsInAnyOrder(\n+                 Matchers.allOf(\n+                 Matchers.is(PoolTaskMatcher.matchPoolTask(null, \"reviewstep\")), hasJsonPath(\"$._embedded.workflowitem\",\n+                 Matchers.is(WorkflowItemMatcher.matchItemWithTitleAndDateIssuedAndSubject(\n+                             poolTask2.getWorkflowItem(), \"Workflow Item 2\", \"2020-01-19\", \"ExtraEntry\")))\n+                 ))))\n+                .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/workflow/pooltasks\")))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(1)));\n+    }\n+\n+    @Test\n+    public void findAllPooltasksByItemUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"reviewer1@example.com\")\n+                                          .withPassword(password).build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                                           .withName(\"Collection 1\")\n+                                           .withWorkflowGroup(1, reviewer1, admin).build();\n+\n+        // create a normal user to use as submitter\n+        EPerson submitter = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"submitter@example.com\")\n+                                          .withPassword(password).build();\n+\n+        context.setCurrentUser(submitter);\n+\n+        PoolTask poolTask = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                                           .withTitle(\"Workflow Item 1\")\n+                                           .withIssueDate(\"2017-10-17\")\n+                                           .withAuthor(\"Smith, Donald\")\n+                                           .withAuthor(\"Doe, John\")\n+                                           .withSubject(\"ExtraEntry\").build();\n+\n+        Item item1 = poolTask.getWorkflowItem().getItem();\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                   .param(\"uuid\", item1.getID().toString()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void findAllPooltasksByItemForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"reviewer1@example.com\")\n+                                          .withPassword(password).build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                                           .withName(\"Collection 1\")\n+                                           .withWorkflowGroup(1, reviewer1, admin).build();\n+\n+        // create a normal user to use as submitter\n+        EPerson submitter = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"submitter@example.com\")\n+                                          .withPassword(password).build();\n+\n+        context.setCurrentUser(submitter);\n+\n+        PoolTask poolTask = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                                           .withTitle(\"Workflow Item 1\")\n+                                           .withIssueDate(\"2017-10-17\")\n+                                           .withAuthor(\"Smith, Donald\")\n+                                           .withAuthor(\"Doe, John\")\n+                                           .withSubject(\"ExtraEntry\").build();\n+\n+        Item item1 = poolTask.getWorkflowItem().getItem();\n+\n+        context.restoreAuthSystemState();\n+\n+        // Only Admin has access to this end point\n+\n+        String tokenSubmitter = getAuthToken(submitter.getEmail(), password);\n+        getClient(tokenSubmitter).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                                 .param(\"uuid\", item1.getID().toString()))\n+                                 .andExpect(status().isForbidden());\n+\n+        String tokenReviewer1 = getAuthToken(reviewer1.getEmail(), password);\n+        getClient(tokenReviewer1).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                                 .param(\"uuid\", item1.getID().toString()))\n+                                 .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findAllPooltasksByItemWrongUuidTest() throws Exception {", "originalCommit": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MTM3Nw==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r547361377", "bodyText": "the requested tests have been introduced in 3b5130c", "author": "abollini", "createdAt": "2020-12-22T16:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NDMwMw=="}], "type": "inlineReview"}, {"oid": "fd44faa3fc320a70f7edc66b87f6a0fb81ae794d", "url": "https://github.com/DSpace/DSpace/commit/fd44faa3fc320a70f7edc66b87f6a0fb81ae794d", "message": "Implement community feedbacks", "committedDate": "2020-12-15T10:37:18Z", "type": "commit"}, {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3", "url": "https://github.com/DSpace/DSpace/commit/3b5130c5a41d96ccf485b44a6a4d844b124261d3", "message": "added new tests and fixed old", "committedDate": "2020-12-15T10:39:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTE3Ng==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552441176", "bodyText": "Small typing error:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"No PoolTask record found, the uri-list does not contait a resource\");\n          \n          \n            \n                                    \"No PoolTask record found, the uri-list does not contain a resource\");", "author": "benbosman", "createdAt": "2021-01-06T08:46:47Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -263,8 +263,8 @@ protected ClaimedTaskRest createAndReturn(Context context, List<String> list)\n         try {\n             PoolTask task = uriListHandlerService.handle(context, request, list, PoolTask.class);\n             if (task == null) {\n-                throw\n-                    new ResourceNotFoundException(\"No PoolTask record found, the uri-list does not contait a resource\");\n+                throw new UnprocessableEntityException(\n+                        \"No PoolTask record found, the uri-list does not contait a resource\");", "originalCommit": "3b5130c5a41d96ccf485b44a6a4d844b124261d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTkyOQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552441929", "bodyText": "Is there an IT for an existing item which is not in the workflow?\nI can see a test for findByItem, but not for this admin endpoint", "author": "benbosman", "createdAt": "2021-01-06T08:48:37Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -125,6 +135,54 @@ public ClaimedTaskRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<ClaimedTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<ClaimedTask> tasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWFI = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWFI == null) {\n+                return null;", "originalCommit": "3b5130c5a41d96ccf485b44a6a4d844b124261d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyNDE2OA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r557424168", "bodyText": "I'm adding this reference more for me to avoid to look back to that again and again :)\n3b5130c#diff-fc493b8186aa975a2deded8f3c737ceffaa076fad1161fe0c3d7080246237bcdR3924\nand next test", "author": "abollini", "createdAt": "2021-01-14T14:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQxMDQzOQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r559410439", "bodyText": "@abollini this IT verifies /api/workflow/claimedtask/search/findByItem instead of /api/workflow/claimedtask/search/findAllByItem\nSpecifically for /api/workflow/claimedtask/search/findAllByItem I didn't see a method which tests for an existing item which is not in the workflow", "author": "benbosman", "createdAt": "2021-01-18T09:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzNzY0Ng==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r559637646", "bodyText": "@benbosman thanks for the feedback, the test has been added: cfa8b03#diff-fc493b8186aa975a2deded8f3c737ceffaa076fad1161fe0c3d7080246237bcdR3763", "author": "Micheleboychuk", "createdAt": "2021-01-18T15:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjQ1NQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552442455", "bodyText": "Is there an IT for an existing item which is not in the workflow?\nI can see a test for findByItem, but not for this admin endpoint", "author": "benbosman", "createdAt": "2021-01-06T08:49:41Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/PoolTaskRestRepository.java", "diffHunk": "@@ -161,4 +133,52 @@ public void afterPropertiesSet() throws Exception {\n                 new Link(\"/api/\" + PoolTaskRest.CATEGORY + \"/\" + PoolTaskRest.NAME + \"/search\",\n                         PoolTaskRest.NAME + \"-search\")));\n     }\n+\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<PoolTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<PoolTask> poolTasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;", "originalCommit": "3b5130c5a41d96ccf485b44a6a4d844b124261d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMzI5OQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r557423299", "bodyText": "I'm adding this reference more for me to avoid to look back to that again and again :)\n3b5130c#diff-fc493b8186aa975a2deded8f3c737ceffaa076fad1161fe0c3d7080246237bcdR3924\nand next test", "author": "abollini", "createdAt": "2021-01-14T14:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQxMDYxNQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r559410615", "bodyText": "@abollini this IT verifies /api/workflow/claimedtask/search/findByItem instead of /api/workflow/pooltasks/search/findAllByItem\nSpecifically for /api/workflow/pooltasks/search/findAllByItem I didn't see a method which tests for an existing item which is not in the workflow", "author": "benbosman", "createdAt": "2021-01-18T09:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzODIxNw==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r559638217", "bodyText": "@benbosman thanks for the feedback, the test has been added: cfa8b03#diff-fc493b8186aa975a2deded8f3c737ceffaa076fad1161fe0c3d7080246237bcdR3489", "author": "Micheleboychuk", "createdAt": "2021-01-18T15:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjYxMQ==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552442611", "bodyText": "Is there an IT for an existing item which is not in the workflow?\nI can see a test for this method with an XmlWorkflowItem, but no pool task for the current user (the next return null). But I don't see a test for an archived item", "author": "benbosman", "createdAt": "2021-01-06T08:50:03Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/PoolTaskRestRepository.java", "diffHunk": "@@ -161,4 +133,52 @@ public void afterPropertiesSet() throws Exception {\n                 new Link(\"/api/\" + PoolTaskRest.CATEGORY + \"/\" + PoolTaskRest.NAME + \"/search\",\n                         PoolTaskRest.NAME + \"-search\")));\n     }\n+\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<PoolTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<PoolTask> poolTasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;\n+            } else {\n+                poolTasks = poolTaskService.find(context, xmlWorkflowItem);\n+            }\n+            return converter.toRestPage(poolTasks, pageable, utils.obtainProjection());\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @SearchRestMethod(name = \"findByItem\")\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    public PoolTaskRest findByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID) {\n+        PoolTask poolTask = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;", "originalCommit": "3b5130c5a41d96ccf485b44a6a4d844b124261d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMzAyMA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r557423020", "bodyText": "I'm adding this reference more for me to avoid to look back to that again and again :) 3b5130c#diff-fc493b8186aa975a2deded8f3c737ceffaa076fad1161fe0c3d7080246237bcdR4000", "author": "abollini", "createdAt": "2021-01-14T14:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQxMjQ1NA==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r559412454", "bodyText": "This test is not an archived item", "author": "benbosman", "createdAt": "2021-01-18T09:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYzNjI3Ng==", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r559636276", "bodyText": "@benbosman thanks for the feedback, the test has been added: cfa8b03#diff-fc493b8186aa975a2deded8f3c737ceffaa076fad1161fe0c3d7080246237bcdR3458", "author": "Micheleboychuk", "createdAt": "2021-01-18T15:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjYxMQ=="}], "type": "inlineReview"}, {"oid": "cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "url": "https://github.com/DSpace/DSpace/commit/cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "message": "added tests", "committedDate": "2021-01-18T14:14:07Z", "type": "commit"}, {"oid": "cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "url": "https://github.com/DSpace/DSpace/commit/cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "message": "added tests", "committedDate": "2021-01-18T14:14:07Z", "type": "forcePushed"}, {"oid": "5fc63dc140c65eeea8a664751b6a21e4dd42f407", "url": "https://github.com/DSpace/DSpace/commit/5fc63dc140c65eeea8a664751b6a21e4dd42f407", "message": "Merge branch 'main' into CST-3539_rebased", "committedDate": "2021-03-08T09:15:51Z", "type": "commit"}]}