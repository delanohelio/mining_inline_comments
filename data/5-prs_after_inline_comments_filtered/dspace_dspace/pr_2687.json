{"pr_number": 2687, "pr_title": "DS-4123: ITs to prove access restricted Items cannot be accessed anonymously", "pr_createdAt": "2020-02-23T11:42:53Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2687", "timeline": [{"oid": "fad08adcb8db88c8af7bcd79d775920fa555d5dd", "url": "https://github.com/DSpace/DSpace/commit/fad08adcb8db88c8af7bcd79d775920fa555d5dd", "message": "added IT to prove access restricted Items cannot be accessed anonymously", "committedDate": "2020-02-19T10:29:02Z", "type": "commit"}, {"oid": "40ee6e54f74bf65e3d158717a8829d42c4ab952c", "url": "https://github.com/DSpace/DSpace/commit/40ee6e54f74bf65e3d158717a8829d42c4ab952c", "message": "turn on check to verify admin of collection/community", "committedDate": "2020-02-19T10:33:45Z", "type": "commit"}, {"oid": "9a0a5078de99516b939e9afc426f7f6f09e38174", "url": "https://github.com/DSpace/DSpace/commit/9a0a5078de99516b939e9afc426f7f6f09e38174", "message": "refactor tests", "committedDate": "2020-02-20T15:01:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1NzY5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2687#discussion_r383957696", "bodyText": "Two other tests are necessary in this method:\n\nWe need a test that a Full Admin can see the Embargoed Item.\nCan we create a second Community which is not a parent of collection1 and ensure that an Admin of that new Community is also Forbidden?", "author": "tdonohue", "createdAt": "2020-02-25T15:37:40Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -1294,6 +1295,102 @@ public void embargoAccessTest() throws Exception {\n \n     }\n \n+    @Test\n+    public void embargoAccessGrantAdminsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .withAdminGroup(adminParentCommunity)\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        EPerson adminCollection1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection1@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withAdminGroup(adminCollection1)\n+                .build();\n+\n+        EPerson adminCollection2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection2@mail.com\")\n+                .withPassword(\"qwerty03\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .withAdminGroup(adminCollection2)\n+                .build();\n+\n+        Item embargoedItem = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2015-10-21\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .withEmbargoPeriod(\"1 week\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+        // parent community's admin user is allowed access to embargoed item\n+        String tokenAdminParentCommunity = getAuthToken(adminParentCommunity.getEmail(), \"qwerty01\");\n+        getClient(tokenAdminParentCommunity).perform(get(\"/api/core/items/\" + embargoedItem.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(embargoedItem))));\n+\n+        // collection1's admin user is allowed access to embargoed item\n+        String tokenAdminCollection1 = getAuthToken(adminCollection1.getEmail(), \"qwerty02\");\n+        getClient(tokenAdminCollection1).perform(get(\"/api/core/items/\" + embargoedItem.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(embargoedItem))));\n+\n+        // collection2's admin user is NOT allowed access to embargoed item of collection1\n+        String tokenAdminCollection2 = getAuthToken(adminCollection2.getEmail(), \"qwerty03\");\n+        getClient(tokenAdminCollection2).perform(get(\"/api/core/items/\" + embargoedItem.getID()))\n+                .andExpect(status().isForbidden());", "originalCommit": "9a0a5078de99516b939e9afc426f7f6f09e38174", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1OTEyOQ==", "url": "https://github.com/DSpace/DSpace/pull/2687#discussion_r383959129", "bodyText": "We should also have a test here to verify that anonymous users are Forbidden", "author": "tdonohue", "createdAt": "2020-02-25T15:39:49Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -1422,6 +1519,118 @@ public void privateGroupAccessTest() throws Exception {\n                         Matchers.containsString(\"/api/core/items\")));\n     }\n \n+    @Test\n+    public void restrictedGroupAccessForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson memberRestrictGroup = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson1@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        Group restrictGroup = GroupBuilder.createGroup(context)\n+                .addMember(memberRestrictGroup)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Item itemRestrictedByGroup = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2011-11-13\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withReaderGroup(restrictGroup)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //A member of the restricted group is also allowed access to restricted item\n+        String tokenMemberRestrictedGroup = getAuthToken(memberRestrictGroup.getEmail(), \"qwerty01\");\n+        getClient(tokenMemberRestrictedGroup).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        //members who are not part of the restricted group, have no access to the item\n+        String tokenEPerson = getAuthToken(eperson.getEmail(), password);\n+        getClient(tokenEPerson).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isForbidden());", "originalCommit": "9a0a5078de99516b939e9afc426f7f6f09e38174", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2MDcxMA==", "url": "https://github.com/DSpace/DSpace/pull/2687#discussion_r383960710", "bodyText": "Again, here it'd be good to create another Community that is not a parent of collection1, and ensure that a Community Admin of that new Community is also Forbidden.", "author": "tdonohue", "createdAt": "2020-02-25T15:41:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -1422,6 +1519,118 @@ public void privateGroupAccessTest() throws Exception {\n                         Matchers.containsString(\"/api/core/items\")));\n     }\n \n+    @Test\n+    public void restrictedGroupAccessForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson memberRestrictGroup = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson1@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        Group restrictGroup = GroupBuilder.createGroup(context)\n+                .addMember(memberRestrictGroup)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Item itemRestrictedByGroup = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2011-11-13\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withReaderGroup(restrictGroup)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //A member of the restricted group is also allowed access to restricted item\n+        String tokenMemberRestrictedGroup = getAuthToken(memberRestrictGroup.getEmail(), \"qwerty01\");\n+        getClient(tokenMemberRestrictedGroup).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        //members who are not part of the restricted group, have no access to the item\n+        String tokenEPerson = getAuthToken(eperson.getEmail(), password);\n+        getClient(tokenEPerson).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void restrictedGroupAccessGrantAdminsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .withAdminGroup(adminParentCommunity)\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        EPerson adminCollection1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection1@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withAdminGroup(adminCollection1)\n+                .build();\n+\n+        EPerson adminCollection2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection2@mail.com\")\n+                .withPassword(\"qwerty03\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .withAdminGroup(adminCollection2)\n+                .build();\n+\n+        Item itemRestrictedByGroup = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2015-10-21\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+        // parent community's admin user is allowed access to restricted item\n+        String tokenAdminParentCommunity = getAuthToken(adminParentCommunity.getEmail(), \"qwerty01\");\n+        getClient(tokenAdminParentCommunity).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        // collection1's admin user is allowed access to restricted item\n+        String tokenAdminCollection1 = getAuthToken(adminCollection1.getEmail(), \"qwerty02\");\n+        getClient(tokenAdminCollection1).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        // collection2's admin user is NOT allowed access to restricted item of collection1\n+        String tokenAdminCollection2 = getAuthToken(adminCollection2.getEmail(), \"qwerty03\");\n+        getClient(tokenAdminCollection2).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isForbidden());", "originalCommit": "9a0a5078de99516b939e9afc426f7f6f09e38174", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90688555b8a09cb8b44b86583988a00b89673be4", "url": "https://github.com/DSpace/DSpace/commit/90688555b8a09cb8b44b86583988a00b89673be4", "message": "code cleanup - community feedback", "committedDate": "2020-02-28T17:03:18Z", "type": "commit"}, {"oid": "ac61bd0cac8d376624adf8887ffcf9e60d01fd5f", "url": "https://github.com/DSpace/DSpace/commit/ac61bd0cac8d376624adf8887ffcf9e60d01fd5f", "message": "Merge branch 'master' of https://github.com/DSpace/DSpace into ITtoProveAccessRestrictedItem-DS-4123\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CommunityBuilder.java", "committedDate": "2020-03-02T09:08:18Z", "type": "commit"}]}