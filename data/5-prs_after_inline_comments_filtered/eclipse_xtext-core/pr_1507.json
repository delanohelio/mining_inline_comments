{"pr_number": 1507, "pr_title": "[eclipse/xtext#1777] ported more xtend code to java", "pr_createdAt": "2020-05-29T08:33:45Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1507", "timeline": [{"oid": "e51878d77d0cdd638d233b93d949383a92467745", "url": "https://github.com/eclipse/xtext-core/commit/e51878d77d0cdd638d233b93d949383a92467745", "message": "[eclipse/xtext#1777] ported more xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-29T09:03:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0MzY4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432343686", "bodyText": "It's so weird that we catch the cancellation attempt and ignore it.", "author": "szarnekow", "createdAt": "2020-05-29T08:46:52Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/contentassist/ContentAssistService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.contentassist;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.InsertTextFormat;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalProvider;\n+import org.eclipse.xtext.ide.editor.contentassist.antlr.ContentAssistContextFactory;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.service.OperationCanceledManager;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.ReplaceRegion;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+import com.google.common.base.Strings;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @author Dennis Huebner - additionalTextEdits support\n+ * \n+ * @since 2.11\n+ */\n+@Singleton\n+public class ContentAssistService {\n+\tpublic final static int DEFAULT_PROPOSALS_LIMIT = 1000;\n+\n+\t@Inject\n+\tprivate Provider<ContentAssistContextFactory> contextFactoryProvider;\n+\n+\t@Inject\n+\tprivate ExecutorService executorService;\n+\n+\t@Inject\n+\tprivate IdeContentProposalProvider proposalProvider;\n+\n+\t@Inject\n+\tprivate Provider<IdeContentProposalAcceptor> proposalAcceptorProvider;\n+\n+\t@Inject\n+\tprivate OperationCanceledManager operationCanceledManager;\n+\n+\tpublic CompletionList createCompletionList(Document document, XtextResource resource, CompletionParams params,\n+\t\t\tCancelIndicator cancelIndicator) {\n+\t\ttry {\n+\t\t\tCompletionList result = new CompletionList();\n+\t\t\tresult.setIsIncomplete(true);\n+\t\t\tIdeContentProposalAcceptor acceptor = proposalAcceptorProvider.get();\n+\t\t\tint caretOffset = document.getOffSet(params.getPosition());\n+\t\t\tPosition caretPosition = params.getPosition();\n+\t\t\tTextRegion position = new TextRegion(caretOffset, 0);\n+\t\t\ttry {", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NDMxMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432344311", "bodyText": "I know it's kind of API, but I'd prefer if this had a throws clause given that we sneak out all kinds of exceptions.", "author": "szarnekow", "createdAt": "2020-05-29T08:48:02Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/contentassist/ContentAssistService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.contentassist;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.InsertTextFormat;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalProvider;\n+import org.eclipse.xtext.ide.editor.contentassist.antlr.ContentAssistContextFactory;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.service.OperationCanceledManager;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.ReplaceRegion;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+import com.google.common.base.Strings;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @author Dennis Huebner - additionalTextEdits support\n+ * \n+ * @since 2.11\n+ */\n+@Singleton\n+public class ContentAssistService {\n+\tpublic final static int DEFAULT_PROPOSALS_LIMIT = 1000;\n+\n+\t@Inject\n+\tprivate Provider<ContentAssistContextFactory> contextFactoryProvider;\n+\n+\t@Inject\n+\tprivate ExecutorService executorService;\n+\n+\t@Inject\n+\tprivate IdeContentProposalProvider proposalProvider;\n+\n+\t@Inject\n+\tprivate Provider<IdeContentProposalAcceptor> proposalAcceptorProvider;\n+\n+\t@Inject\n+\tprivate OperationCanceledManager operationCanceledManager;\n+\n+\tpublic CompletionList createCompletionList(Document document, XtextResource resource, CompletionParams params,", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NjA4NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432346085", "bodyText": "This looks wrong to me (also in the original verison).\nIf the region is located after the last char, we take the doc length and add the length of the region?\nMaybe start should point to the last position of the document in that case?", "author": "szarnekow", "createdAt": "2020-05-29T08:51:13Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/contentassist/ContentAssistService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.contentassist;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.InsertTextFormat;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalProvider;\n+import org.eclipse.xtext.ide.editor.contentassist.antlr.ContentAssistContextFactory;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.service.OperationCanceledManager;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.ReplaceRegion;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+import com.google.common.base.Strings;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @author Dennis Huebner - additionalTextEdits support\n+ * \n+ * @since 2.11\n+ */\n+@Singleton\n+public class ContentAssistService {\n+\tpublic final static int DEFAULT_PROPOSALS_LIMIT = 1000;\n+\n+\t@Inject\n+\tprivate Provider<ContentAssistContextFactory> contextFactoryProvider;\n+\n+\t@Inject\n+\tprivate ExecutorService executorService;\n+\n+\t@Inject\n+\tprivate IdeContentProposalProvider proposalProvider;\n+\n+\t@Inject\n+\tprivate Provider<IdeContentProposalAcceptor> proposalAcceptorProvider;\n+\n+\t@Inject\n+\tprivate OperationCanceledManager operationCanceledManager;\n+\n+\tpublic CompletionList createCompletionList(Document document, XtextResource resource, CompletionParams params,\n+\t\t\tCancelIndicator cancelIndicator) {\n+\t\ttry {\n+\t\t\tCompletionList result = new CompletionList();\n+\t\t\tresult.setIsIncomplete(true);\n+\t\t\tIdeContentProposalAcceptor acceptor = proposalAcceptorProvider.get();\n+\t\t\tint caretOffset = document.getOffSet(params.getPosition());\n+\t\t\tPosition caretPosition = params.getPosition();\n+\t\t\tTextRegion position = new TextRegion(caretOffset, 0);\n+\t\t\ttry {\n+\t\t\t\tcreateProposals(document.getContents(), position, caretOffset, resource, acceptor);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tif (!operationCanceledManager.isOperationCanceledException(t)) {\n+\t\t\t\t\tthrow t;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint idx = 0;\n+\t\t\tfor (ContentAssistEntry it : acceptor.getEntries()) {\n+\t\t\t\tCompletionItem item = toCompletionItem(it, caretOffset, caretPosition, document);\n+\t\t\t\titem.setSortText(Strings.padStart(Integer.toString(idx), 5, '0'));\n+\t\t\t\tresult.getItems().add(item);\n+\t\t\t\tidx++;\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t} catch (Throwable e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tprotected void createProposals(String document, TextRegion selection, int caretOffset, XtextResource resource,\n+\t\t\tIIdeContentProposalAcceptor acceptor) {\n+\t\tif (caretOffset > document.length()) {\n+\t\t\treturn;\n+\t\t}\n+\t\tContentAssistContextFactory contextFactory = contextFactoryProvider.get();\n+\t\tcontextFactory.setPool(executorService);\n+\t\tContentAssistContext[] contexts = contextFactory.create(document, selection, caretOffset, resource);\n+\t\tproposalProvider.createProposals(Arrays.asList(contexts), acceptor);\n+\t}\n+\n+\tprotected CompletionItem toCompletionItem(ContentAssistEntry entry, int caretOffset, Position caretPosition,\n+\t\t\tDocument document) {\n+\t\tCompletionItem completionItem = new CompletionItem();\n+\t\tString label = entry.getLabel();\n+\t\tif (label == null) {\n+\t\t\tlabel = entry.getProposal();\n+\t\t}\n+\t\tcompletionItem.setLabel(label);\n+\t\tcompletionItem.setDetail(entry.getDescription());\n+\t\tcompletionItem.setDocumentation(entry.getDocumentation());\n+\t\tString prefix = entry.getPrefix();\n+\t\tif (prefix == null) {\n+\t\t\tprefix = \"\";\n+\t\t}\n+\t\tint prefixOffset = caretOffset - prefix.length();\n+\t\tPosition prefixPosition = document.getPosition(prefixOffset);\n+\t\tcompletionItem.setTextEdit(new TextEdit(new Range(prefixPosition, caretPosition), entry.getProposal()));\n+\t\tcompletionItem.setKind(translateKind(entry));\n+\t\tif (!entry.getTextReplacements().isEmpty()) {\n+\t\t\tif (completionItem.getAdditionalTextEdits() == null) {\n+\t\t\t\tcompletionItem.setAdditionalTextEdits(new ArrayList<>(entry.getTextReplacements().size()));\n+\t\t\t}\n+\t\t\tentry.getTextReplacements().forEach(\n+\t\t\t\t\t(ReplaceRegion it) -> completionItem.getAdditionalTextEdits().add(toTextEdit(it, document)));\n+\t\t}\n+\t\tif (ContentAssistEntry.KIND_SNIPPET.equals(entry.getKind())) {\n+\t\t\tcompletionItem.setInsertTextFormat(InsertTextFormat.Snippet);\n+\t\t}\n+\t\treturn completionItem;\n+\t}\n+\n+\tprotected CompletionItemKind translateKind(ContentAssistEntry entry) {\n+\t\tif (entry.getKind() != null) {\n+\t\t\tswitch (entry.getKind()) {\n+\t\t\tcase ContentAssistEntry.KIND_CLASS:\n+\t\t\t\treturn CompletionItemKind.Class;\n+\t\t\tcase ContentAssistEntry.KIND_COLOR:\n+\t\t\t\treturn CompletionItemKind.Color;\n+\t\t\tcase ContentAssistEntry.KIND_CONSTRUCTOR:\n+\t\t\t\treturn CompletionItemKind.Constructor;\n+\t\t\tcase ContentAssistEntry.KIND_ENUM:\n+\t\t\t\treturn CompletionItemKind.Enum;\n+\t\t\tcase ContentAssistEntry.KIND_FIELD:\n+\t\t\t\treturn CompletionItemKind.Field;\n+\t\t\tcase ContentAssistEntry.KIND_FILE:\n+\t\t\t\treturn CompletionItemKind.File;\n+\t\t\tcase ContentAssistEntry.KIND_FUNCTION:\n+\t\t\t\treturn CompletionItemKind.Function;\n+\t\t\tcase ContentAssistEntry.KIND_INTERFACE:\n+\t\t\t\treturn CompletionItemKind.Interface;\n+\t\t\tcase ContentAssistEntry.KIND_KEYWORD:\n+\t\t\t\treturn CompletionItemKind.Keyword;\n+\t\t\tcase ContentAssistEntry.KIND_METHOD:\n+\t\t\t\treturn CompletionItemKind.Method;\n+\t\t\tcase ContentAssistEntry.KIND_MODULE:\n+\t\t\t\treturn CompletionItemKind.Module;\n+\t\t\tcase ContentAssistEntry.KIND_PROPERTY:\n+\t\t\t\treturn CompletionItemKind.Property;\n+\t\t\tcase ContentAssistEntry.KIND_REFERENCE:\n+\t\t\t\treturn CompletionItemKind.Reference;\n+\t\t\tcase ContentAssistEntry.KIND_SNIPPET:\n+\t\t\t\treturn CompletionItemKind.Snippet;\n+\t\t\tcase ContentAssistEntry.KIND_TEXT:\n+\t\t\t\treturn CompletionItemKind.Text;\n+\t\t\tcase ContentAssistEntry.KIND_UNIT:\n+\t\t\t\treturn CompletionItemKind.Unit;\n+\t\t\tcase ContentAssistEntry.KIND_VALUE:\n+\t\t\t\treturn CompletionItemKind.Value;\n+\t\t\tcase ContentAssistEntry.KIND_VARIABLE:\n+\t\t\t\treturn CompletionItemKind.Variable;\n+\t\t\tdefault:\n+\t\t\t\treturn CompletionItemKind.Value;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn CompletionItemKind.Value;\n+\t\t}\n+\t}\n+\n+\tprotected TextEdit toTextEdit(ReplaceRegion region, Document doc) {\n+\t\tPosition start = null;\n+\t\tif (region.getOffset() > doc.getContents().length()) {\n+\t\t\tPosition docEnd = doc.getPosition(doc.getContents().length());\n+\t\t\tstart = new Position(docEnd.getLine(), docEnd.getCharacter() + region.getLength());", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NjQ3MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432356471", "bodyText": "can you please create an separate issue for \"highjack my branch\" when i am doune with first feedbacxk round", "author": "cdietrich", "createdAt": "2020-05-29T09:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NjA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NzM4NA==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432347384", "bodyText": "This will break if the region spans multiple lines. If the endOffset if larger than the document lenght, end should simply point the the last position in the document.", "author": "szarnekow", "createdAt": "2020-05-29T08:53:29Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/contentassist/ContentAssistService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.contentassist;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionItemKind;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.InsertTextFormat;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalProvider;\n+import org.eclipse.xtext.ide.editor.contentassist.antlr.ContentAssistContextFactory;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.service.OperationCanceledManager;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.ReplaceRegion;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+import com.google.common.base.Strings;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @author Dennis Huebner - additionalTextEdits support\n+ * \n+ * @since 2.11\n+ */\n+@Singleton\n+public class ContentAssistService {\n+\tpublic final static int DEFAULT_PROPOSALS_LIMIT = 1000;\n+\n+\t@Inject\n+\tprivate Provider<ContentAssistContextFactory> contextFactoryProvider;\n+\n+\t@Inject\n+\tprivate ExecutorService executorService;\n+\n+\t@Inject\n+\tprivate IdeContentProposalProvider proposalProvider;\n+\n+\t@Inject\n+\tprivate Provider<IdeContentProposalAcceptor> proposalAcceptorProvider;\n+\n+\t@Inject\n+\tprivate OperationCanceledManager operationCanceledManager;\n+\n+\tpublic CompletionList createCompletionList(Document document, XtextResource resource, CompletionParams params,\n+\t\t\tCancelIndicator cancelIndicator) {\n+\t\ttry {\n+\t\t\tCompletionList result = new CompletionList();\n+\t\t\tresult.setIsIncomplete(true);\n+\t\t\tIdeContentProposalAcceptor acceptor = proposalAcceptorProvider.get();\n+\t\t\tint caretOffset = document.getOffSet(params.getPosition());\n+\t\t\tPosition caretPosition = params.getPosition();\n+\t\t\tTextRegion position = new TextRegion(caretOffset, 0);\n+\t\t\ttry {\n+\t\t\t\tcreateProposals(document.getContents(), position, caretOffset, resource, acceptor);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tif (!operationCanceledManager.isOperationCanceledException(t)) {\n+\t\t\t\t\tthrow t;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint idx = 0;\n+\t\t\tfor (ContentAssistEntry it : acceptor.getEntries()) {\n+\t\t\t\tCompletionItem item = toCompletionItem(it, caretOffset, caretPosition, document);\n+\t\t\t\titem.setSortText(Strings.padStart(Integer.toString(idx), 5, '0'));\n+\t\t\t\tresult.getItems().add(item);\n+\t\t\t\tidx++;\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t} catch (Throwable e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tprotected void createProposals(String document, TextRegion selection, int caretOffset, XtextResource resource,\n+\t\t\tIIdeContentProposalAcceptor acceptor) {\n+\t\tif (caretOffset > document.length()) {\n+\t\t\treturn;\n+\t\t}\n+\t\tContentAssistContextFactory contextFactory = contextFactoryProvider.get();\n+\t\tcontextFactory.setPool(executorService);\n+\t\tContentAssistContext[] contexts = contextFactory.create(document, selection, caretOffset, resource);\n+\t\tproposalProvider.createProposals(Arrays.asList(contexts), acceptor);\n+\t}\n+\n+\tprotected CompletionItem toCompletionItem(ContentAssistEntry entry, int caretOffset, Position caretPosition,\n+\t\t\tDocument document) {\n+\t\tCompletionItem completionItem = new CompletionItem();\n+\t\tString label = entry.getLabel();\n+\t\tif (label == null) {\n+\t\t\tlabel = entry.getProposal();\n+\t\t}\n+\t\tcompletionItem.setLabel(label);\n+\t\tcompletionItem.setDetail(entry.getDescription());\n+\t\tcompletionItem.setDocumentation(entry.getDocumentation());\n+\t\tString prefix = entry.getPrefix();\n+\t\tif (prefix == null) {\n+\t\t\tprefix = \"\";\n+\t\t}\n+\t\tint prefixOffset = caretOffset - prefix.length();\n+\t\tPosition prefixPosition = document.getPosition(prefixOffset);\n+\t\tcompletionItem.setTextEdit(new TextEdit(new Range(prefixPosition, caretPosition), entry.getProposal()));\n+\t\tcompletionItem.setKind(translateKind(entry));\n+\t\tif (!entry.getTextReplacements().isEmpty()) {\n+\t\t\tif (completionItem.getAdditionalTextEdits() == null) {\n+\t\t\t\tcompletionItem.setAdditionalTextEdits(new ArrayList<>(entry.getTextReplacements().size()));\n+\t\t\t}\n+\t\t\tentry.getTextReplacements().forEach(\n+\t\t\t\t\t(ReplaceRegion it) -> completionItem.getAdditionalTextEdits().add(toTextEdit(it, document)));\n+\t\t}\n+\t\tif (ContentAssistEntry.KIND_SNIPPET.equals(entry.getKind())) {\n+\t\t\tcompletionItem.setInsertTextFormat(InsertTextFormat.Snippet);\n+\t\t}\n+\t\treturn completionItem;\n+\t}\n+\n+\tprotected CompletionItemKind translateKind(ContentAssistEntry entry) {\n+\t\tif (entry.getKind() != null) {\n+\t\t\tswitch (entry.getKind()) {\n+\t\t\tcase ContentAssistEntry.KIND_CLASS:\n+\t\t\t\treturn CompletionItemKind.Class;\n+\t\t\tcase ContentAssistEntry.KIND_COLOR:\n+\t\t\t\treturn CompletionItemKind.Color;\n+\t\t\tcase ContentAssistEntry.KIND_CONSTRUCTOR:\n+\t\t\t\treturn CompletionItemKind.Constructor;\n+\t\t\tcase ContentAssistEntry.KIND_ENUM:\n+\t\t\t\treturn CompletionItemKind.Enum;\n+\t\t\tcase ContentAssistEntry.KIND_FIELD:\n+\t\t\t\treturn CompletionItemKind.Field;\n+\t\t\tcase ContentAssistEntry.KIND_FILE:\n+\t\t\t\treturn CompletionItemKind.File;\n+\t\t\tcase ContentAssistEntry.KIND_FUNCTION:\n+\t\t\t\treturn CompletionItemKind.Function;\n+\t\t\tcase ContentAssistEntry.KIND_INTERFACE:\n+\t\t\t\treturn CompletionItemKind.Interface;\n+\t\t\tcase ContentAssistEntry.KIND_KEYWORD:\n+\t\t\t\treturn CompletionItemKind.Keyword;\n+\t\t\tcase ContentAssistEntry.KIND_METHOD:\n+\t\t\t\treturn CompletionItemKind.Method;\n+\t\t\tcase ContentAssistEntry.KIND_MODULE:\n+\t\t\t\treturn CompletionItemKind.Module;\n+\t\t\tcase ContentAssistEntry.KIND_PROPERTY:\n+\t\t\t\treturn CompletionItemKind.Property;\n+\t\t\tcase ContentAssistEntry.KIND_REFERENCE:\n+\t\t\t\treturn CompletionItemKind.Reference;\n+\t\t\tcase ContentAssistEntry.KIND_SNIPPET:\n+\t\t\t\treturn CompletionItemKind.Snippet;\n+\t\t\tcase ContentAssistEntry.KIND_TEXT:\n+\t\t\t\treturn CompletionItemKind.Text;\n+\t\t\tcase ContentAssistEntry.KIND_UNIT:\n+\t\t\t\treturn CompletionItemKind.Unit;\n+\t\t\tcase ContentAssistEntry.KIND_VALUE:\n+\t\t\t\treturn CompletionItemKind.Value;\n+\t\t\tcase ContentAssistEntry.KIND_VARIABLE:\n+\t\t\t\treturn CompletionItemKind.Variable;\n+\t\t\tdefault:\n+\t\t\t\treturn CompletionItemKind.Value;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn CompletionItemKind.Value;\n+\t\t}\n+\t}\n+\n+\tprotected TextEdit toTextEdit(ReplaceRegion region, Document doc) {\n+\t\tPosition start = null;\n+\t\tif (region.getOffset() > doc.getContents().length()) {\n+\t\t\tPosition docEnd = doc.getPosition(doc.getContents().length());\n+\t\t\tstart = new Position(docEnd.getLine(), docEnd.getCharacter() + region.getLength());\n+\t\t} else {\n+\t\t\tstart = doc.getPosition(region.getOffset());\n+\t\t}\n+\t\tPosition end = null;\n+\t\tif (region.getEndOffset() > doc.getContents().length()) {\n+\t\t\tend = new Position(start.getLine(), start.getCharacter() + region.getLength());", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NjAzMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432356031", "bodyText": "am not sure if i want to fix all the bugs", "author": "cdietrich", "createdAt": "2020-05-29T09:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NzM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0ODI0Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432348243", "bodyText": "unnecessary @Extension", "author": "szarnekow", "createdAt": "2020-05-29T08:55:02Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ChangeConverter2.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.xmi.XMLResource;\n+import org.eclipse.lsp4j.ClientCapabilities;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentEdit;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.VersionedTextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceClientCapabilities;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.WorkspaceEditCapabilities;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;\n+import org.eclipse.xtext.ide.serializer.IEmfResourceChange;\n+import org.eclipse.xtext.ide.serializer.ITextDocumentChange;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.UriExtensions;\n+import org.eclipse.xtext.parser.IEncodingProvider;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.util.IAcceptor;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.18\n+ */\n+public class ChangeConverter2 implements IAcceptor<IEmfResourceChange> {\n+\tpublic static class Factory {\n+\t\t@Inject\n+\t\tprotected IResourceServiceProvider.Registry registry;\n+\n+\t\t@Inject\n+\t\tprotected UriExtensions uriExtensions;\n+\n+\t\t/**\n+\t\t * @since 2.18\n+\t\t */\n+\t\tpublic ChangeConverter2 create(WorkspaceEdit edit, ILanguageServerAccess access) {\n+\t\t\treturn new ChangeConverter2(registry, edit, access, uriExtensions);\n+\t\t}\n+\t}\n+\n+\tprivate IResourceServiceProvider.Registry registry;\n+\n+\t@Extension", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0ODg3Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432348876", "bodyText": "unnecessary type argument", "author": "szarnekow", "createdAt": "2020-05-29T08:56:13Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ChangeConverter2.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.xmi.XMLResource;\n+import org.eclipse.lsp4j.ClientCapabilities;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentEdit;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.VersionedTextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceClientCapabilities;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.WorkspaceEditCapabilities;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;\n+import org.eclipse.xtext.ide.serializer.IEmfResourceChange;\n+import org.eclipse.xtext.ide.serializer.ITextDocumentChange;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.UriExtensions;\n+import org.eclipse.xtext.parser.IEncodingProvider;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.util.IAcceptor;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.18\n+ */\n+public class ChangeConverter2 implements IAcceptor<IEmfResourceChange> {\n+\tpublic static class Factory {\n+\t\t@Inject\n+\t\tprotected IResourceServiceProvider.Registry registry;\n+\n+\t\t@Inject\n+\t\tprotected UriExtensions uriExtensions;\n+\n+\t\t/**\n+\t\t * @since 2.18\n+\t\t */\n+\t\tpublic ChangeConverter2 create(WorkspaceEdit edit, ILanguageServerAccess access) {\n+\t\t\treturn new ChangeConverter2(registry, edit, access, uriExtensions);\n+\t\t}\n+\t}\n+\n+\tprivate IResourceServiceProvider.Registry registry;\n+\n+\t@Extension\n+\tprivate UriExtensions uriExtensions;\n+\n+\tprivate WorkspaceEdit edit;\n+\n+\tprivate ILanguageServerAccess access;\n+\n+\tprivate boolean useDocumentChanges;\n+\n+\tprotected ChangeConverter2(IResourceServiceProvider.Registry registry, WorkspaceEdit edit,\n+\t\t\tILanguageServerAccess access, UriExtensions uriExtensions) {\n+\t\tthis.registry = registry;\n+\t\tthis.uriExtensions = uriExtensions;\n+\t\tthis.edit = edit;\n+\t\tthis.access = access;\n+\t\tBoolean documentChanges = null;\n+\t\tif (access != null) {\n+\t\t\tInitializeParams initializeParams = access.getInitializeParams();\n+\t\t\tif (initializeParams != null) {\n+\t\t\t\tClientCapabilities clientCapabilities = initializeParams.getCapabilities();\n+\t\t\t\tif (clientCapabilities != null) {\n+\t\t\t\t\tWorkspaceClientCapabilities workspaceClientCapabilities = clientCapabilities.getWorkspace();\n+\t\t\t\t\tif (workspaceClientCapabilities != null) {\n+\t\t\t\t\t\tWorkspaceEditCapabilities workspaceEditCapabilities = workspaceClientCapabilities\n+\t\t\t\t\t\t\t\t.getWorkspaceEdit();\n+\t\t\t\t\t\tif (workspaceEditCapabilities != null) {\n+\t\t\t\t\t\t\tdocumentChanges = workspaceEditCapabilities.getDocumentChanges();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tthis.useDocumentChanges = documentChanges == Boolean.TRUE;\n+\t\tif (this.useDocumentChanges) {\n+\t\t\tthis.edit.setDocumentChanges(new ArrayList<>());\n+\t\t} else {\n+\t\t\tthis.edit.setChanges(new LinkedHashMap<>());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void accept(IEmfResourceChange change) {\n+\t\thandleReplacements(change);\n+\t}\n+\n+\tprotected void _handleReplacements(IEmfResourceChange change) {\n+\t\ttry {\n+\t\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\t\t\tString uri = uriExtensions.toUriString(change.getResource().getURI());\n+\t\t\tchange.getResource().save(outputStream, null);\n+\t\t\tString newContent = new String(outputStream.toByteArray(), getCharset(change.getResource()));\n+\t\t\taccess.doRead(uri, (ILanguageServerAccess.Context context) -> {\n+\t\t\t\tDocument document = context.getDocument();\n+\t\t\t\tRange range = new Range(document.getPosition(0), document.getPosition(document.getContents().length()));\n+\t\t\t\tTextEdit textEdit = new TextEdit(range, newContent);\n+\t\t\t\treturn addTextEdit(uri, document, textEdit);\n+\t\t\t}).get();\n+\t\t} catch (InterruptedException | ExecutionException | IOException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getCharset(Resource resource) {\n+\t\tIEncodingProvider xtextEncodingProvider = registry.getResourceServiceProvider(resource.getURI())", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MTAyMA==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432351020", "bodyText": "map(Either::forRight).collection(..) ?", "author": "szarnekow", "createdAt": "2020-05-29T09:00:00Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/HierarchicalDocumentSymbolService.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.symbol;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.DocumentSymbolParams;\n+import org.eclipse.lsp4j.SymbolInformation;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.lsp4j.jsonrpc.validation.NonNull;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.service.OperationCanceledManager;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Optional;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Document symbol service that is comply with the LSP\n+ * <a href=\"https://microsoft.github.io/language-server-protocol/specification#version_3_10_0\">3.10.0</a> version.\n+ * Unlike the {@link DocumentSymbolService}, this service can provide hierarchical document symbols.\n+ */\n+@Beta\n+@Singleton\n+public class HierarchicalDocumentSymbolService implements IDocumentSymbolService {\n+\t@Inject\n+\tprivate DocumentSymbolMapper symbolMapper;\n+\n+\t@Inject\n+\tprivate OperationCanceledManager operationCanceledManager;\n+\n+\t/**\n+\t * {@code false} if the argument is {@code null} or any of the {@link NonNull} properties are {@code null}.\n+\t * Otherwise, {@code true}.\n+\t */\n+\tpublic static boolean isValid(DocumentSymbol symbol) {\n+\t\tif (symbol != null) {\n+\t\t\tfor (Field field : DocumentSymbol.class.getDeclaredFields()) {\n+\t\t\t\tfor (Annotation annotation : field.getAnnotations()) {\n+\t\t\t\t\tif (NonNull.class == annotation.annotationType()) {\n+\t\t\t\t\t\tfield.setAccessible(true);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tObject o = field.get(symbol);\n+\t\t\t\t\t\t\tif (o == null) {\n+\t\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Throwable e) {\n+\t\t\t\t\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\n+\t}\n+\n+\t@Override\n+\tpublic List<Either<SymbolInformation, DocumentSymbol>> getSymbols(Document document, XtextResource resource,\n+\t\t\tDocumentSymbolParams params, CancelIndicator cancelIndicator) {\n+\t\treturn getSymbols(resource, cancelIndicator);\n+\t}\n+\n+\tpublic List<Either<SymbolInformation, DocumentSymbol>> getSymbols(XtextResource resource,\n+\t\t\tCancelIndicator cancelIndicator) {\n+\t\tHashMap<EObject, DocumentSymbol> allSymbols = new HashMap<>();\n+\t\tArrayList<DocumentSymbol> rootSymbols = new ArrayList<>();\n+\t\tIterator<Object> itr = getAllContents(resource);\n+\t\twhile (itr.hasNext()) {\n+\t\t\toperationCanceledManager.checkCanceled(cancelIndicator);\n+\t\t\tOptional<EObject> next = toEObject(itr.next());\n+\t\t\tif (next.isPresent()) {\n+\t\t\t\tEObject object = next.get();\n+\t\t\t\tDocumentSymbol symbol = symbolMapper.toDocumentSymbol(object);\n+\t\t\t\tif (isValid(symbol)) {\n+\t\t\t\t\tallSymbols.put(object, symbol);\n+\t\t\t\t\tEObject parent = object.eContainer();\n+\t\t\t\t\tif (parent == null) {\n+\t\t\t\t\t\trootSymbols.add(symbol);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tDocumentSymbol parentSymbol = allSymbols.get(parent);\n+\t\t\t\t\t\twhile (parentSymbol == null && parent != null) {\n+\t\t\t\t\t\t\tparent = parent.eContainer();\n+\t\t\t\t\t\t\tparentSymbol = allSymbols.get(parent);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (parentSymbol == null) {\n+\t\t\t\t\t\t\trootSymbols.add(symbol);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tparentSymbol.getChildren().add(symbol);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn rootSymbols.stream().map(symbol -> Either.<SymbolInformation, DocumentSymbol>forRight(symbol))", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NTQxNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432355415", "bodyText": "type inference cannnot do that", "author": "cdietrich", "createdAt": "2020-05-29T09:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MTAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MTU3NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432351575", "bodyText": "Sad.", "author": "szarnekow", "createdAt": "2020-05-29T09:00:55Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/CodeConfig.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.nio.charset.Charset;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.util.XtextVersion;\n+import org.eclipse.xtext.xtext.generator.model.TypeReference;\n+import org.eclipse.xtext.xtext.generator.model.annotations.IClassAnnotation;\n+\n+import com.google.inject.Injector;\n+\n+/**\n+ * Configuration object for generated code.\n+ */\n+public class CodeConfig implements IGuiceAwareGeneratorComponent {\n+\tprivate static final String FILE_HEADER_VAR_TIME = \"${time}\";\n+\n+\tprivate static final String FILE_HEADER_VAR_DATE = \"${date}\";\n+\n+\tprivate static final String FILE_HEADER_VAR_YEAR = \"${year}\";\n+\n+\tprivate static final String FILE_HEADER_VAR_USER = \"${user}\";\n+\n+\tprivate static final String FILE_HEADER_VAR_VERSION = \"${version}\";\n+\n+\tprivate String encoding = Charset.defaultCharset().name();\n+\n+\tprivate String lineDelimiter = Strings.newLine();\n+\n+\tprivate String fileHeader;\n+\n+\tprivate String fileHeaderTemplate = \"/*\\n * generated by Xtext\\n */\";\n+\n+\tprivate final List<IClassAnnotation> classAnnotations = new ArrayList<>();\n+\n+\tprivate boolean preferXtendStubs = true;", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MjUxMw==", "url": "https://github.com/eclipse/xtext-core/pull/1507#discussion_r432352513", "bodyText": "if (eclipsePlugin.isEnabled() || web.isEnabled())", "author": "szarnekow", "createdAt": "2020-05-29T09:02:46Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/XtextProjectConfig.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model.project;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.eclipse.xtext.xtext.generator.CodeConfig;\n+import org.eclipse.xtext.xtext.generator.Issues;\n+import org.eclipse.xtext.xtext.generator.model.ManifestAccess;\n+import org.eclipse.xtext.xtext.generator.model.PluginXmlAccess;\n+import org.eclipse.xtext.xtext.generator.model.XtextGeneratorFileSystemAccess;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Configuration of the subprojects for one or more Xtext languages. If the\n+ * standard project names and layout is sufficient, use\n+ * {@link StandardProjectConfig}.\n+ * \n+ * @noextend This class should not be extended by clients.\n+ */\n+public class XtextProjectConfig implements IXtextProjectConfig {\n+\tprivate RuntimeProjectConfig runtime = new RuntimeProjectConfig();\n+\n+\tprivate BundleProjectConfig runtimeTest = new BundleProjectConfig();\n+\n+\tprivate BundleProjectConfig genericIde = new BundleProjectConfig();\n+\n+\tprivate BundleProjectConfig eclipsePlugin = new BundleProjectConfig();\n+\n+\tprivate BundleProjectConfig eclipsePluginTest = new BundleProjectConfig();\n+\n+\tprivate WebProjectConfig web = new WebProjectConfig();\n+\n+\t@Inject\n+\tprivate CodeConfig codeConfig;\n+\n+\tpublic void checkConfiguration(Issues issues) {\n+\t\tfor (SubProjectConfig it : getEnabledProjects()) {\n+\t\t\tit.checkConfiguration(issues);\n+\t\t}\n+\t}\n+\n+\tpublic List<? extends SubProjectConfig> getAllProjects() {\n+\t\treturn Lists.newArrayList(runtime, runtimeTest, genericIde, eclipsePlugin, eclipsePluginTest, web);\n+\t}\n+\n+\t@Override\n+\tpublic List<? extends SubProjectConfig> getTestProjects() {\n+\t\treturn Lists.newArrayList(runtimeTest, eclipsePluginTest);\n+\t}\n+\n+\t@Override\n+\tpublic List<? extends SubProjectConfig> getEnabledProjects() {\n+\t\tList<SubProjectConfig> enabledProjects = new ArrayList<>();\n+\t\tIterables.addAll(enabledProjects, Iterables.filter(getAllProjects(), SubProjectConfig::isEnabled));\n+\t\treturn enabledProjects;\n+\t}\n+\n+\t@Override\n+\tpublic void initialize(Injector injector) {\n+\t\tsetDefaults();\n+\t\tinjector.injectMembers(this);\n+\t\tfor (SubProjectConfig it : getEnabledProjects()) {\n+\t\t\tit.initialize(injector);\n+\t\t}\n+\t}\n+\n+\tpublic void setDefaults() {\n+\t\truntime.setEnabled(true);\n+\t\tif (Lists.newArrayList(eclipsePlugin, web).stream().anyMatch(SubProjectConfig::isEnabled)) {", "originalCommit": "26e2399cd05e95e61534a6e9960316806716e3e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "953eae58d5327ddb421e7313c16c21cd79beb594", "url": "https://github.com/eclipse/xtext-core/commit/953eae58d5327ddb421e7313c16c21cd79beb594", "message": "[eclipse/xtext#1777] ported more xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-29T09:11:01Z", "type": "commit"}, {"oid": "953eae58d5327ddb421e7313c16c21cd79beb594", "url": "https://github.com/eclipse/xtext-core/commit/953eae58d5327ddb421e7313c16c21cd79beb594", "message": "[eclipse/xtext#1777] ported more xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-29T09:11:01Z", "type": "forcePushed"}]}