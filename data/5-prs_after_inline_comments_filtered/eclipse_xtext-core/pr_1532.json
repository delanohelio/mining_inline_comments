{"pr_number": 1532, "pr_title": "[eclipse/xtext#1777] Translate more code to java.", "pr_createdAt": "2020-06-26T09:45:50Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1532", "timeline": [{"oid": "2c753507e5e048823a52d5fc7ef1d65bdeaeba80", "url": "https://github.com/eclipse/xtext-core/commit/2c753507e5e048823a52d5fc7ef1d65bdeaeba80", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext and org.eclipse.xtext.ide are Xtend free. Remove\nxtend-gen folder from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-06-26T11:51:24Z", "type": "forcePushed"}, {"oid": "7a9edf8ccef90e0455a5af9c39ca44630e279f4c", "url": "https://github.com/eclipse/xtext-core/commit/7a9edf8ccef90e0455a5af9c39ca44630e279f4c", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext, org.eclipse.xtext.ide and org.eclipse.xtext.util are\nXtend free. Remov xtend-gen folders from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-06-26T12:11:15Z", "type": "forcePushed"}, {"oid": "ebd28063c09ab79b3dd82f78d06937f34c3a71b8", "url": "https://github.com/eclipse/xtext-core/commit/ebd28063c09ab79b3dd82f78d06937f34c3a71b8", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext, org.eclipse.xtext.ide and org.eclipse.xtext.util are\nXtend free. Remov xtend-gen folders from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-06-26T12:17:06Z", "type": "forcePushed"}, {"oid": "69e8d14d4526992c80f4685a25fa45f5523df83b", "url": "https://github.com/eclipse/xtext-core/commit/69e8d14d4526992c80f4685a25fa45f5523df83b", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext, org.eclipse.xtext.ide and org.eclipse.xtext.util are\nXtend free. Remov xtend-gen folders from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-06-26T14:28:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwODgxOA==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r446308818", "bodyText": "Not necessary in Java", "author": "szarnekow", "createdAt": "2020-06-26T17:12:44Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/SemanticHighlightingRegistry.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2018 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.semanticHighlight;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.eclipse.lsp4j.ClientCapabilities;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SemanticHighlightingCapabilities;\n+import org.eclipse.lsp4j.SemanticHighlightingInformation;\n+import org.eclipse.lsp4j.SemanticHighlightingParams;\n+import org.eclipse.lsp4j.TextDocumentClientCapabilities;\n+import org.eclipse.lsp4j.VersionedTextDocumentIdentifier;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.lsp4j.util.SemanticHighlightingTokens;\n+import org.eclipse.lsp4j.util.SemanticHighlightingTokens.Token;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.MergingHighlightedPositionAcceptor;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess.Context;\n+import org.eclipse.xtext.ide.server.UriExtensions;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.ImmutableBiMap;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Shared semantic highlighting manager per language server. Responsible for converting the semantic highlighted ranges\n+ * into the LSP standard by producing a compact, {@code base64} encoded token string.\n+ */\n+public class SemanticHighlightingRegistry {\n+\t/**\n+\t * Reserved TextMate scope identifier for styles that cannot be handled.\n+\t */\n+\tpublic static final String UNKNOWN_SCOPE = \"unknown.xtext\";\n+\n+\t/**\n+\t * TextMate scopes indicating an unhandled style ID to TextMate scope mapping.\n+\t */\n+\tpublic static final List<String> UNKNOWN_SCOPES = Collections\n+\t\t\t.singletonList(SemanticHighlightingRegistry.UNKNOWN_SCOPE);\n+\n+\t@Inject\n+\t@Extension", "originalCommit": "69e8d14d4526992c80f4685a25fa45f5523df83b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMTcwOA==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r449401708", "bodyText": "Removed annotation.", "author": "ArneDeutsch", "createdAt": "2020-07-03T06:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwODgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTYxOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r446309619", "bodyText": "Please either go for Stream API, FluentIterable or traditional for loops. But these inversely nested static methods make it really hard to understand the code.", "author": "szarnekow", "createdAt": "2020-06-26T17:14:30Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/SemanticHighlightingRegistry.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2018 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.semanticHighlight;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.eclipse.lsp4j.ClientCapabilities;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SemanticHighlightingCapabilities;\n+import org.eclipse.lsp4j.SemanticHighlightingInformation;\n+import org.eclipse.lsp4j.SemanticHighlightingParams;\n+import org.eclipse.lsp4j.TextDocumentClientCapabilities;\n+import org.eclipse.lsp4j.VersionedTextDocumentIdentifier;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.lsp4j.util.SemanticHighlightingTokens;\n+import org.eclipse.lsp4j.util.SemanticHighlightingTokens.Token;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.MergingHighlightedPositionAcceptor;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess.Context;\n+import org.eclipse.xtext.ide.server.UriExtensions;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.ImmutableBiMap;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Shared semantic highlighting manager per language server. Responsible for converting the semantic highlighted ranges\n+ * into the LSP standard by producing a compact, {@code base64} encoded token string.\n+ */\n+public class SemanticHighlightingRegistry {\n+\t/**\n+\t * Reserved TextMate scope identifier for styles that cannot be handled.\n+\t */\n+\tpublic static final String UNKNOWN_SCOPE = \"unknown.xtext\";\n+\n+\t/**\n+\t * TextMate scopes indicating an unhandled style ID to TextMate scope mapping.\n+\t */\n+\tpublic static final List<String> UNKNOWN_SCOPES = Collections\n+\t\t\t.singletonList(SemanticHighlightingRegistry.UNKNOWN_SCOPE);\n+\n+\t@Inject\n+\t@Extension\n+\tprivate UriExtensions uriExtensions;\n+\n+\t/**\n+\t * Lookup table for all known TextMate scopes.\n+\t */\n+\tprotected BiMap<Integer, List<String>> scopes;\n+\n+\tprotected LanguageClient client;\n+\n+\tpublic void initialize(Iterable<? extends IResourceServiceProvider> allLanguages, ClientCapabilities capabilities,\n+\t\t\tLanguageClient client) {\n+\t\tPreconditions.checkState(this.client == null, \"Already initialized.\");\n+\t\tTextDocumentClientCapabilities textDocument = capabilities == null ? null : capabilities.getTextDocument();\n+\t\tSemanticHighlightingCapabilities semanticHighlightingCapabilities = textDocument == null ? null\n+\t\t\t\t: textDocument.getSemanticHighlightingCapabilities();\n+\t\tboolean semanticHighlighting = semanticHighlightingCapabilities == null ? false\n+\t\t\t\t: semanticHighlightingCapabilities.getSemanticHighlighting();\n+\t\tImmutableBiMap.Builder<Integer, List<String>> builder = ImmutableBiMap.builder();\n+\t\tif (semanticHighlighting) {\n+\t\t\tSet<List<String>> set = IterableExtensions.toSet(IterableExtensions.filter(", "originalCommit": "69e8d14d4526992c80f4685a25fa45f5523df83b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMjIwMw==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r449402203", "bodyText": "Yes, it is hard to understand. Will try to refactor it.", "author": "ArneDeutsch", "createdAt": "2020-07-03T06:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwNjI1OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r449406259", "bodyText": "Refactored to traditional for loops. Please verify that my implementation maps well to the old implementation.", "author": "ArneDeutsch", "createdAt": "2020-07-03T06:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzMTM1MA==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r449431350", "bodyText": "Seems our tests are not THAT bad ... seems they catched a bug in my implementation ... will check.", "author": "ArneDeutsch", "createdAt": "2020-07-03T07:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0ODAxMA==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r449448010", "bodyText": "Have rewritten it using Streams for a more direct mapping to the old code and to fix the tests. Please review again.", "author": "ArneDeutsch", "createdAt": "2020-07-03T08:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxMDE2MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r446310161", "bodyText": "API design at its best. So sad.", "author": "szarnekow", "createdAt": "2020-06-26T17:15:34Z", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/semanticHighlight/SemanticHighlightingRegistry.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2018 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.semanticHighlight;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.eclipse.lsp4j.ClientCapabilities;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SemanticHighlightingCapabilities;\n+import org.eclipse.lsp4j.SemanticHighlightingInformation;\n+import org.eclipse.lsp4j.SemanticHighlightingParams;\n+import org.eclipse.lsp4j.TextDocumentClientCapabilities;\n+import org.eclipse.lsp4j.VersionedTextDocumentIdentifier;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.lsp4j.util.SemanticHighlightingTokens;\n+import org.eclipse.lsp4j.util.SemanticHighlightingTokens.Token;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;\n+import org.eclipse.xtext.ide.editor.syntaxcoloring.MergingHighlightedPositionAcceptor;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess.Context;\n+import org.eclipse.xtext.ide.server.UriExtensions;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.ImmutableBiMap;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Shared semantic highlighting manager per language server. Responsible for converting the semantic highlighted ranges\n+ * into the LSP standard by producing a compact, {@code base64} encoded token string.\n+ */\n+public class SemanticHighlightingRegistry {\n+\t/**\n+\t * Reserved TextMate scope identifier for styles that cannot be handled.\n+\t */\n+\tpublic static final String UNKNOWN_SCOPE = \"unknown.xtext\";\n+\n+\t/**\n+\t * TextMate scopes indicating an unhandled style ID to TextMate scope mapping.\n+\t */\n+\tpublic static final List<String> UNKNOWN_SCOPES = Collections\n+\t\t\t.singletonList(SemanticHighlightingRegistry.UNKNOWN_SCOPE);\n+\n+\t@Inject\n+\t@Extension\n+\tprivate UriExtensions uriExtensions;\n+\n+\t/**\n+\t * Lookup table for all known TextMate scopes.\n+\t */\n+\tprotected BiMap<Integer, List<String>> scopes;\n+\n+\tprotected LanguageClient client;\n+\n+\tpublic void initialize(Iterable<? extends IResourceServiceProvider> allLanguages, ClientCapabilities capabilities,\n+\t\t\tLanguageClient client) {\n+\t\tPreconditions.checkState(this.client == null, \"Already initialized.\");\n+\t\tTextDocumentClientCapabilities textDocument = capabilities == null ? null : capabilities.getTextDocument();\n+\t\tSemanticHighlightingCapabilities semanticHighlightingCapabilities = textDocument == null ? null\n+\t\t\t\t: textDocument.getSemanticHighlightingCapabilities();\n+\t\tboolean semanticHighlighting = semanticHighlightingCapabilities == null ? false\n+\t\t\t\t: semanticHighlightingCapabilities.getSemanticHighlighting();\n+\t\tImmutableBiMap.Builder<Integer, List<String>> builder = ImmutableBiMap.builder();\n+\t\tif (semanticHighlighting) {\n+\t\t\tSet<List<String>> set = IterableExtensions.toSet(IterableExtensions.filter(\n+\t\t\t\t\tIterables.concat(IterableExtensions.map(\n+\t\t\t\t\t\t\tIterableExtensions.filterNull(IterableExtensions.map(allLanguages,\n+\t\t\t\t\t\t\t\t\tit -> it.get(ISemanticHighlightingStyleToTokenMapper.class))),\n+\t\t\t\t\t\t\tmapper -> IterableExtensions.map(mapper.getAllStyleIds(),\n+\t\t\t\t\t\t\t\t\tstyleId -> mapper.toScopes(styleId)))),\n+\t\t\t\t\tit -> !IterableExtensions.isNullOrEmpty(it)));\n+\t\t\tIterableExtensions.forEach(set, (List<String> scope, Integer index) -> builder.put(index, scope));\n+\t\t}\n+\t\tthis.scopes = builder.build();\n+\t\tthis.client = client;\n+\t}\n+\n+\t/**\n+\t * Returns with a list of TextMate scopes for the internal scope index. Returns the\n+\t * {@link SemanticHighlightingRegistry#UNKNOWN_SCOPES unknown scopes} if no scopes are registered for the argument.\n+\t */\n+\tpublic List<String> getScopes(int scopeIndex) {\n+\t\tcheckInitialized();\n+\t\treturn scopes.getOrDefault(scopeIndex, SemanticHighlightingRegistry.UNKNOWN_SCOPES);\n+\t}\n+\n+\t/**\n+\t * Returns with the internal scope index for the argument. Returns {@code -1} if the scopes argument is\n+\t * <code>null</code>, the {@link SemanticHighlightingRegistry#UNKNOWN_SCOPES unknown scopes} or is not registered to\n+\t * this manager.\n+\t */\n+\tpublic int getIndex(List<String> scopes) {\n+\t\tcheckInitialized();\n+\t\tif (isNullOrUnknown(scopes))\n+\t\t\treturn -1;\n+\t\tInteger index = this.scopes.inverse().get(scopes);\n+\t\treturn index == null ? -1 : index;\n+\t}\n+\n+\t/**\n+\t * Returns with a view of all scopes known by this manager.\n+\t */\n+\tpublic List<List<String>> getAllScopes() {", "originalCommit": "69e8d14d4526992c80f4685a25fa45f5523df83b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c226065015a8eef097cd009c5232ab16eab72728", "url": "https://github.com/eclipse/xtext-core/commit/c226065015a8eef097cd009c5232ab16eab72728", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext, org.eclipse.xtext.ide and org.eclipse.xtext.util are\nXtend free. Remove xtend-gen folders from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-07-03T06:49:58Z", "type": "forcePushed"}, {"oid": "95afbc0813ef4ed6c25ee06f2a05c058009e13ce", "url": "https://github.com/eclipse/xtext-core/commit/95afbc0813ef4ed6c25ee06f2a05c058009e13ce", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext, org.eclipse.xtext.ide and org.eclipse.xtext.util are\nXtend free. Remove xtend-gen folders from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-07-03T08:23:21Z", "type": "commit"}, {"oid": "95afbc0813ef4ed6c25ee06f2a05c058009e13ce", "url": "https://github.com/eclipse/xtext-core/commit/95afbc0813ef4ed6c25ee06f2a05c058009e13ce", "message": "[eclipse/xtext#1777] Translate more Xtend to java.\n\norg.eclipse.xtext, org.eclipse.xtext.ide and org.eclipse.xtext.util are\nXtend free. Remove xtend-gen folders from build.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2020-07-03T08:23:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MjE5Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1532#discussion_r449542192", "bodyText": "Rewritign AA to Java goes full circle I suppose :)", "author": "szarnekow", "createdAt": "2020-07-03T11:49:23Z", "path": "org.eclipse.xtext.util/src/org/eclipse/xtext/util/internal/EmfAdaptableProcessor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.util.internal;\n+\n+import java.util.List;\n+\n+import org.eclipse.emf.common.notify.Adapter;\n+import org.eclipse.emf.common.notify.Notifier;\n+import org.eclipse.emf.common.notify.impl.AdapterImpl;\n+import org.eclipse.xtend.lib.macro.AbstractClassProcessor;\n+import org.eclipse.xtend.lib.macro.RegisterGlobalsContext;\n+import org.eclipse.xtend.lib.macro.TransformationContext;\n+import org.eclipse.xtend.lib.macro.declaration.ClassDeclaration;\n+import org.eclipse.xtend.lib.macro.declaration.MutableClassDeclaration;\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+\n+public class EmfAdaptableProcessor extends AbstractClassProcessor {", "originalCommit": "95afbc0813ef4ed6c25ee06f2a05c058009e13ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}