{"pr_number": 1474, "pr_title": "[eclipse/xtext#1679]ported test code to java", "pr_createdAt": "2020-05-05T08:39:04Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1474", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MDcyOA==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420180728", "bodyText": "this.getProposalCreator(); -> getProposalCreator();", "author": "nbhusare", "createdAt": "2020-05-05T15:03:59Z", "path": "org.eclipse.xtext.ide.tests/testlang-src/org/eclipse/xtext/ide/tests/testlanguage/ide/TestLanguageIdeContentProposalProvider.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.testlanguage.ide;\n+\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.RuleCall;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalCreator;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalProvider;\n+import org.eclipse.xtext.ide.tests.testlanguage.services.TestLanguageGrammarAccess;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Christian Dietrich - Initial contribution and API\n+ */\n+public class TestLanguageIdeContentProposalProvider extends IdeContentProposalProvider {\n+\t@Inject\n+\tprivate TestLanguageGrammarAccess testLanguageGrammarAccess;\n+\n+\t@Override\n+\tprotected void _createProposals(RuleCall ruleCall, ContentAssistContext context,\n+\t\t\tIIdeContentProposalAcceptor acceptor) {\n+\t\tboolean _equals = testLanguageGrammarAccess.getTypeDeclarationRule().equals(ruleCall.getRule());\n+\t\tif (_equals) {\n+\t\t\tIdeContentProposalCreator _proposalCreator = this.getProposalCreator();", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTIwNg==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420181206", "bodyText": "ArrayList<Either<Command, CodeAction> -> List<Either<Command, CodeAction>", "author": "nbhusare", "createdAt": "2020-05-05T15:04:37Z", "path": "org.eclipse.xtext.ide.tests/testlang-src/org/eclipse/xtext/ide/tests/testlanguage/ide/server/CodeActionService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.testlanguage.ide.server;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.ECollections;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ide.serializer.IEmfResourceChange;\n+import org.eclipse.xtext.ide.serializer.ITextDocumentChange;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.Member;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.Model;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.TypeDeclaration;\n+import org.eclipse.xtext.ide.tests.testlanguage.validation.TestLanguageValidator;\n+import org.eclipse.xtext.util.CollectionBasedAcceptor;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public class CodeActionService implements ICodeActionService2 {\n+\t@Inject\n+\tprivate IChangeSerializer serializer;\n+\n+\t@Override\n+\tpublic List<Either<Command, CodeAction>> getCodeActions(ICodeActionService2.Options options) {\n+\t\tArrayList<Either<Command, CodeAction>> actions = new ArrayList<>();", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzI0NA==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420183244", "bodyText": "model can be null.", "author": "nbhusare", "createdAt": "2020-05-05T15:07:21Z", "path": "org.eclipse.xtext.ide.tests/testlang-src/org/eclipse/xtext/ide/tests/testlanguage/ide/server/CodeActionService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.testlanguage.ide.server;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.ECollections;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ide.serializer.IEmfResourceChange;\n+import org.eclipse.xtext.ide.serializer.ITextDocumentChange;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.Member;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.Model;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.TypeDeclaration;\n+import org.eclipse.xtext.ide.tests.testlanguage.validation.TestLanguageValidator;\n+import org.eclipse.xtext.util.CollectionBasedAcceptor;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public class CodeActionService implements ICodeActionService2 {\n+\t@Inject\n+\tprivate IChangeSerializer serializer;\n+\n+\t@Override\n+\tpublic List<Either<Command, CodeAction>> getCodeActions(ICodeActionService2.Options options) {\n+\t\tArrayList<Either<Command, CodeAction>> actions = new ArrayList<>();\n+\t\tfor (Diagnostic d : options.getCodeActionParams().getContext().getDiagnostics()) {\n+\t\t\tObject code = d.getCode().get();\n+\t\t\tif (TestLanguageValidator.INVALID_NAME.equals(code)) {\n+\t\t\t\tactions.add(Either.forLeft(fixInvalidName(d, options)));\n+\t\t\t} else if (TestLanguageValidator.UNSORTED_MEMBERS.equals(code)) {\n+\t\t\t\tactions.add(Either.forRight(fixUnsortedMembers(d, options)));\n+\t\t\t}\n+\t\t}\n+\t\treturn actions;\n+\t}\n+\n+\tprivate Command fixInvalidName(Diagnostic d, ICodeActionService2.Options options) {\n+\t\tString string = options.getDocument().getSubstring(d.getRange());\n+\t\tCommand command = new Command();\n+\t\tcommand.setCommand(\"my.textedit.command\");\n+\t\tcommand.setTitle(\"Make '\" + string + \"' upper case\");\n+\t\tWorkspaceEdit workspaceEdit = new WorkspaceEdit();\n+\t\tTextEdit textEdit = new TextEdit();\n+\t\ttextEdit.setNewText(StringExtensions.toFirstUpper(string));\n+\t\ttextEdit.setRange(d.getRange());\n+\t\tworkspaceEdit.getChanges().put(options.getCodeActionParams().getTextDocument().getUri(),\n+\t\t\t\tLists.newArrayList(textEdit));\n+\t\tcommand.setArguments(Lists.newArrayList(workspaceEdit));\n+\t\treturn command;\n+\t}\n+\n+\tprivate CodeAction fixUnsortedMembers(Diagnostic d, ICodeActionService2.Options options) {\n+\t\tWorkspaceEdit wsEdit = recordWorkspaceEdit(options, (Resource copiedResource) -> {\n+\t\t\tModel model = Iterables.getFirst(Iterables.filter(copiedResource.getContents(), Model.class), null);", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MzY2MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420183661", "bodyText": "ArrayList<IEmfResourceChange> -> List<IEmfResourceChange>", "author": "nbhusare", "createdAt": "2020-05-05T15:07:56Z", "path": "org.eclipse.xtext.ide.tests/testlang-src/org/eclipse/xtext/ide/tests/testlanguage/ide/server/CodeActionService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.testlanguage.ide.server;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.ECollections;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ide.serializer.IEmfResourceChange;\n+import org.eclipse.xtext.ide.serializer.ITextDocumentChange;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.Member;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.Model;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.TypeDeclaration;\n+import org.eclipse.xtext.ide.tests.testlanguage.validation.TestLanguageValidator;\n+import org.eclipse.xtext.util.CollectionBasedAcceptor;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ */\n+public class CodeActionService implements ICodeActionService2 {\n+\t@Inject\n+\tprivate IChangeSerializer serializer;\n+\n+\t@Override\n+\tpublic List<Either<Command, CodeAction>> getCodeActions(ICodeActionService2.Options options) {\n+\t\tArrayList<Either<Command, CodeAction>> actions = new ArrayList<>();\n+\t\tfor (Diagnostic d : options.getCodeActionParams().getContext().getDiagnostics()) {\n+\t\t\tObject code = d.getCode().get();\n+\t\t\tif (TestLanguageValidator.INVALID_NAME.equals(code)) {\n+\t\t\t\tactions.add(Either.forLeft(fixInvalidName(d, options)));\n+\t\t\t} else if (TestLanguageValidator.UNSORTED_MEMBERS.equals(code)) {\n+\t\t\t\tactions.add(Either.forRight(fixUnsortedMembers(d, options)));\n+\t\t\t}\n+\t\t}\n+\t\treturn actions;\n+\t}\n+\n+\tprivate Command fixInvalidName(Diagnostic d, ICodeActionService2.Options options) {\n+\t\tString string = options.getDocument().getSubstring(d.getRange());\n+\t\tCommand command = new Command();\n+\t\tcommand.setCommand(\"my.textedit.command\");\n+\t\tcommand.setTitle(\"Make '\" + string + \"' upper case\");\n+\t\tWorkspaceEdit workspaceEdit = new WorkspaceEdit();\n+\t\tTextEdit textEdit = new TextEdit();\n+\t\ttextEdit.setNewText(StringExtensions.toFirstUpper(string));\n+\t\ttextEdit.setRange(d.getRange());\n+\t\tworkspaceEdit.getChanges().put(options.getCodeActionParams().getTextDocument().getUri(),\n+\t\t\t\tLists.newArrayList(textEdit));\n+\t\tcommand.setArguments(Lists.newArrayList(workspaceEdit));\n+\t\treturn command;\n+\t}\n+\n+\tprivate CodeAction fixUnsortedMembers(Diagnostic d, ICodeActionService2.Options options) {\n+\t\tWorkspaceEdit wsEdit = recordWorkspaceEdit(options, (Resource copiedResource) -> {\n+\t\t\tModel model = Iterables.getFirst(Iterables.filter(copiedResource.getContents(), Model.class), null);\n+\t\t\tfor (TypeDeclaration type : Iterables.filter(model.getElements(), TypeDeclaration.class)) {\n+\t\t\t\tECollections.sort(type.getMembers(), (Member a, Member b) -> a.getName().compareTo(b.getName()));\n+\t\t\t}\n+\t\t});\n+\t\tCodeAction codeAction = new CodeAction();\n+\t\tcodeAction.setTitle(\"Sort Members\");\n+\t\tcodeAction.setDiagnostics(Lists.newArrayList(d));\n+\t\tcodeAction.setEdit(wsEdit);\n+\t\treturn codeAction;\n+\t}\n+\n+\tprivate WorkspaceEdit recordWorkspaceEdit(ICodeActionService2.Options options,\n+\t\t\tIChangeSerializer.IModification<Resource> mod) {\n+\t\tResourceSet rs = options.getLanguageServerAccess().newLiveScopeResourceSet(options.getResource().getURI());\n+\t\tResource copy = rs.getResource(options.getResource().getURI(), true);\n+\t\tserializer.addModification(copy, mod);\n+\t\tArrayList<IEmfResourceChange> documentchanges = new ArrayList<>();", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NTIzNw==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420185237", "bodyText": "_model -> model  just to be consistent with rest of the code", "author": "nbhusare", "createdAt": "2020-05-05T15:09:55Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/parser/parameters/AbstractParametersParsingTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.parser.parameters;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.parser.parameters.parametersTestLanguage.ParserRuleParameters;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.tests.AbstractXtextTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractParametersParsingTest extends AbstractXtextTests {\n+\t@Override\n+\tprotected void setInjector(Injector injector) {\n+\t\tsuper.setInjector(injector);\n+\t\tinjectMembers(this);\n+\t}\n+\n+\t@Override\n+\tprotected boolean shouldTestSerializer(XtextResource resource) {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic ParserRuleParameters getModel(String model) throws Exception {\n+\t\tEObject _model = super.getModel(model);", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NTQxMg==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420185412", "bodyText": "Extra ((", "author": "nbhusare", "createdAt": "2020-05-05T15:10:07Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/parser/parameters/AbstractParametersParsingTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.parser.parameters;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.parser.parameters.parametersTestLanguage.ParserRuleParameters;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.tests.AbstractXtextTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractParametersParsingTest extends AbstractXtextTests {\n+\t@Override\n+\tprotected void setInjector(Injector injector) {\n+\t\tsuper.setInjector(injector);\n+\t\tinjectMembers(this);\n+\t}\n+\n+\t@Override\n+\tprotected boolean shouldTestSerializer(XtextResource resource) {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic ParserRuleParameters getModel(String model) throws Exception {\n+\t\tEObject _model = super.getModel(model);\n+\t\treturn ((ParserRuleParameters) _model);", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NTY0Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420185646", "bodyText": "_modelAndExpect -> modelAndExpect", "author": "nbhusare", "createdAt": "2020-05-05T15:10:25Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/parser/parameters/AbstractParametersParsingTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.parser.parameters;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.parser.parameters.parametersTestLanguage.ParserRuleParameters;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.tests.AbstractXtextTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractParametersParsingTest extends AbstractXtextTests {\n+\t@Override\n+\tprotected void setInjector(Injector injector) {\n+\t\tsuper.setInjector(injector);\n+\t\tinjectMembers(this);\n+\t}\n+\n+\t@Override\n+\tprotected boolean shouldTestSerializer(XtextResource resource) {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic ParserRuleParameters getModel(String model) throws Exception {\n+\t\tEObject _model = super.getModel(model);\n+\t\treturn ((ParserRuleParameters) _model);\n+\t}\n+\n+\tprotected ParserRuleParameters getModelWithErrors(String model) throws Exception {\n+\t\tEObject _modelAndExpect = getModelAndExpect(model, AbstractXtextTests.EXPECT_ERRORS);", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NjI2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420186260", "bodyText": "_parametersTestLanguageStandaloneSetup -> parametersTestLanguageStandaloneSetup for consistency", "author": "nbhusare", "createdAt": "2020-05-05T15:11:17Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/parser/parameters/ParametersParsingTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.parser.parameters;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public class ParametersParsingTest extends AbstractParametersParsingTest {\n+\tprivate ParametersTestLanguageStandaloneSetup _parametersTestLanguageStandaloneSetup;", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NjQ2NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420186465", "bodyText": "_parametersTestLanguageStandaloneSetup -> parametersTestLanguageStandaloneSetup", "author": "nbhusare", "createdAt": "2020-05-05T15:11:34Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/parser/parameters/ParametersParsingTest.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.parser.parameters;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public class ParametersParsingTest extends AbstractParametersParsingTest {\n+\tprivate ParametersTestLanguageStandaloneSetup _parametersTestLanguageStandaloneSetup;\n+\n+\t@Override\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\t_parametersTestLanguageStandaloneSetup = new ParametersTestLanguageStandaloneSetup();", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4ODQ1Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420188452", "bodyText": "You might like to use Collections.emptyMap() here.", "author": "nbhusare", "createdAt": "2020-05-05T15:14:14Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/ResourceSetTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.resource;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+\n+public class ResourceSetTest extends AbstractResourceSetTest {\n+\t@Override\n+\tprotected ResourceSetImpl createEmptyResourceSet() {\n+\t\tResourceSetImpl rs = new ResourceSetImpl();\n+\t\trs.setURIResourceMap(new HashMap<>());", "originalCommit": "a1c67c88510a5b8dfe793b165ac7de89d031bc61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5NzA1Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r420197052", "bodyText": "want to keep semantics", "author": "cdietrich", "createdAt": "2020-05-05T15:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4ODQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NTEwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r421345104", "bodyText": "The resourceSet will later populate the map. #emptyMap() will fail on that attempt.", "author": "szarnekow", "createdAt": "2020-05-07T08:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4ODQ1Mg=="}], "type": "inlineReview"}, {"oid": "c1a39a47b697b098770f1db02ffda72db46ef992", "url": "https://github.com/eclipse/xtext-core/commit/c1a39a47b697b098770f1db02ffda72db46ef992", "message": "[eclipse/xtext#1679]ported test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-05T15:08:46Z", "type": "forcePushed"}, {"oid": "16d926c7f3c31ee2726386d98f717fe0ad590262", "url": "https://github.com/eclipse/xtext-core/commit/16d926c7f3c31ee2726386d98f717fe0ad590262", "message": "[eclipse/xtext#1679]ported test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-05T15:26:08Z", "type": "commit"}, {"oid": "16d926c7f3c31ee2726386d98f717fe0ad590262", "url": "https://github.com/eclipse/xtext-core/commit/16d926c7f3c31ee2726386d98f717fe0ad590262", "message": "[eclipse/xtext#1679]ported test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-05T15:26:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NjAzMw==", "url": "https://github.com/eclipse/xtext-core/pull/1474#discussion_r421346033", "bodyText": "Interesting ... custom Setup + InjectorProvider ...", "author": "szarnekow", "createdAt": "2020-05-07T08:54:13Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/xtext/Issue1161Test.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2019, 2020 Malardalen University (http://www.mdh.se) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext;\n+\n+import org.eclipse.xtext.Grammar;\n+import org.eclipse.xtext.XtextPackage;\n+import org.eclipse.xtext.XtextRuntimeModule;\n+import org.eclipse.xtext.XtextStandaloneSetup;\n+import org.eclipse.xtext.diagnostics.Severity;\n+import org.eclipse.xtext.preferences.IPreferenceValuesProvider;\n+import org.eclipse.xtext.preferences.MapBasedPreferenceValues;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.tests.AbstractXtextTests;\n+import org.eclipse.xtext.tests.XtextInjectorProvider;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Lorenzo Addazi - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(XtextInjectorProvider.class)", "originalCommit": "16d926c7f3c31ee2726386d98f717fe0ad590262", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}