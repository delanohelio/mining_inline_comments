{"pr_number": 5728, "pr_title": "Improved the Quarkus benchmark and added a pgclient variant", "pr_createdAt": "2020-06-03T13:32:12Z", "pr_url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4ODA5Ng==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r434788096", "bodyText": "Instantiating a new object for each request is one of the requirements.\n\ni. For each request, an object mapping the key message to Hello, World! must be instantiated.", "author": "michaelhixson", "createdAt": "2020-06-03T19:00:54Z", "path": "frameworks/Java/quarkus/hibernate/src/main/java/io/quarkus/benchmark/resource/JsonResource.java", "diffHunk": "@@ -1,22 +1,22 @@\n package io.quarkus.benchmark.resource;\n \n-import java.util.Map;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n-\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import java.util.Collections;\n+import java.util.Map;\n \n @Path(\"/json\")\n public class JsonResource {\n     private static final String MESSAGE = \"message\";\n     private static final String HELLO = \"Hello, World!\";\n+    private static final Map<String, String> map = Collections.singletonMap( MESSAGE, HELLO );", "originalCommit": "af116a29ebabba790e6ec76651085ae89f49440e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMzI0Nw==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r434813247", "bodyText": "Oops, missed that. Fixed.", "author": "FroMage", "createdAt": "2020-06-03T19:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4ODA5Ng=="}], "type": "inlineReview"}, {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/b862ee66d9c41b9e4eec37f440ba1785fc14bd2d", "message": "Improved the Quarkus benchmark and added a pgclient variant", "committedDate": "2020-06-03T19:45:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTUwMw==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295503", "bodyText": "would be nice for these to be constants for readability", "author": "kenyee", "createdAt": "2020-06-06T19:44:27Z", "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClientFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.benchmark.repository.pgclient;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.pgclient.PgPool;\n+import io.vertx.pgclient.PgConnectOptions;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+@ApplicationScoped\n+public class PgClientFactory {\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.url\")\n+\tString url;\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.username\")\n+\tString user;\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.password\")\n+\tString pass;\n+\n+\t@Inject\n+\tVertx vertx;\n+\n+\t@Produces\n+\t@ApplicationScoped\n+\tpublic PgClients pgClients() {\n+\t    return new PgClients(this);\n+\t}\n+\n+\n+\tPgPool sqlClient(int size) {\n+\t\tPoolOptions options = new PoolOptions();\n+\t\tPgConnectOptions connectOptions = new PgConnectOptions();\n+\t\t// vertx-reactive:postgresql://tfb-database:5432/hello_world\n+\t\tMatcher matcher = Pattern.compile(\"vertx-reactive:postgresql://([-a-zA-Z]+):([0-9]+)/(.*)\").matcher(url);\n+\t\tmatcher.matches();\n+\t\tconnectOptions.setDatabase(matcher.group(3));", "originalCommit": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjI3OA==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436532278", "bodyText": "Done.", "author": "FroMage", "createdAt": "2020-06-08T08:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTU1MQ==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295551", "bodyText": "would be nice for the 4 to be a constant for readability", "author": "kenyee", "createdAt": "2020-06-06T19:45:07Z", "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClients.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.benchmark.repository.pgclient;\n+\n+import io.vertx.mutiny.pgclient.PgPool;\n+import io.vertx.mutiny.sqlclient.SqlClient;\n+\n+class PgClients {\n+    private ThreadLocal<SqlClient> sqlClient = new ThreadLocal<>();\n+    private ThreadLocal<PgPool> pool = new ThreadLocal<>();\n+    private PgClientFactory pgClientFactory;\n+\n+\t// for ArC\n+\tpublic PgClients() {\n+\t}\n+\n+\tpublic PgClients(PgClientFactory pgClientFactory) {\n+\t    this.pgClientFactory = pgClientFactory;\n+    }\n+\n+    SqlClient getClient() {\n+        SqlClient ret = sqlClient.get();\n+        if(ret == null) {\n+            ret = pgClientFactory.sqlClient(1);\n+            sqlClient.set(ret);\n+        }\n+\t\treturn ret;\n+\t}\n+\n+\tsynchronized PgPool getPool() {\n+        PgPool ret = pool.get();\n+        if(ret == null) {\n+            ret = pgClientFactory.sqlClient(4);", "originalCommit": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjIyMA==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436532220", "bodyText": "Done.", "author": "FroMage", "createdAt": "2020-06-08T08:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTYyMw==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295623", "bodyText": "isn't specifying the column names explicitly faster than using *?", "author": "kenyee", "createdAt": "2020-06-06T19:46:11Z", "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/WorldRepository.java", "diffHunk": "@@ -1,46 +1,38 @@\n package io.quarkus.benchmark.repository.pgclient;\n \n-import java.util.concurrent.Executors;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import io.quarkus.benchmark.model.World;\n-import io.reactivex.Maybe;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.schedulers.Schedulers;\n-import io.vertx.reactivex.pgclient.PgPool;\n-import io.vertx.reactivex.sqlclient.RowIterator;\n-import io.vertx.reactivex.sqlclient.RowSet;\n-import io.vertx.reactivex.sqlclient.Tuple;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.sqlclient.Row;\n+import io.vertx.mutiny.sqlclient.Tuple;\n \n @ApplicationScoped\n public class WorldRepository {\n \n-    private static Logger LOG = LoggerFactory.getLogger(WorldRepository.class);\n-\n     @Inject\n-    PgPool client;\n-\n-    private final Scheduler scheduler = Schedulers.from(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2));\n-\n-    public Maybe<World> find(int id) {\n-        return client.rxPreparedQuery(\"SELECT id, randomnumber FROM world WHERE id = $1\", Tuple.of(id))\n-                .map(RowSet::iterator)\n-                .filter(RowIterator::hasNext)\n-                .map(RowIterator::next)\n-                .map(row -> new World(row.getInteger(0), row.getInteger(1)))\n-                .subscribeOn(scheduler);\n+    PgClients clients;\n+\n+    public Uni<World> find(int id) {\n+        return clients.getClient().preparedQuery(\"SELECT * FROM World WHERE id = $1\", Tuple.of(id))", "originalCommit": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjE2Mw==", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436532163", "bodyText": "True, fixed.", "author": "FroMage", "createdAt": "2020-06-08T08:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTYyMw=="}], "type": "inlineReview"}, {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/28e83d9d2d342cb931e925580b35f50ed891b7ca", "message": "Improved the Quarkus benchmark and added a pgclient variant", "committedDate": "2020-06-08T08:26:20Z", "type": "forcePushed"}, {"oid": "0c464c0296f71ce67ba4d2f38ac280c0d0ce6554", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/0c464c0296f71ce67ba4d2f38ac280c0d0ce6554", "message": "Improved the Quarkus benchmark and added a pgclient variant", "committedDate": "2020-06-16T08:14:38Z", "type": "commit"}, {"oid": "0c464c0296f71ce67ba4d2f38ac280c0d0ce6554", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/0c464c0296f71ce67ba4d2f38ac280c0d0ce6554", "message": "Improved the Quarkus benchmark and added a pgclient variant", "committedDate": "2020-06-16T08:14:38Z", "type": "forcePushed"}]}