{"pr_number": 3001, "pr_title": "new perun-auditlogger component", "pr_createdAt": "2020-11-25T12:04:53Z", "pr_url": "https://github.com/CESNET/perun/pull/3001", "timeline": [{"oid": "555cd75e3c0eb6ee8b979059879c52ea0dc437a1", "url": "https://github.com/CESNET/perun/commit/555cd75e3c0eb6ee8b979059879c52ea0dc437a1", "message": "new perun-auditlogger component", "committedDate": "2020-11-25T12:07:31Z", "type": "forcePushed"}, {"oid": "2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "url": "https://github.com/CESNET/perun/commit/2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "message": "new perun-auditlogger component", "committedDate": "2020-11-25T12:09:00Z", "type": "commit"}, {"oid": "2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "url": "https://github.com/CESNET/perun/commit/2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "message": "new perun-auditlogger component", "committedDate": "2020-11-25T12:09:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2MjA1MA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530362050", "bodyText": "I would use own name instead of perunLdapc.", "author": "zlamalp", "createdAt": "2020-11-25T13:09:30Z", "path": "perun-auditlogger/src/main/java/cz/metacentrum/perun/auditlogger/main/AuditLoggerStarter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package cz.metacentrum.perun.auditlogger.main;\n+\n+import cz.metacentrum.perun.auditlogger.service.AuditLoggerManager;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Perun;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class AuditLoggerStarter {\n+\tprivate final static Logger log = LoggerFactory.getLogger(AuditLoggerStarter.class);\n+\n+\tprivate AuditLoggerManager auditLoggerManager;\n+\tprivate AbstractApplicationContext springCtx;\n+\tprivate PerunPrincipal perunPrincipal;\n+\tprivate Perun perunBl;\n+\n+\tpublic AuditLoggerStarter() {\n+\t\tthis.perunPrincipal = new PerunPrincipal(\"perunLdapc\", ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);", "originalCommit": "2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4MDAzNA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530380034", "bodyText": "Fixed. Requires change to the perun.properties.", "author": "mvocu", "createdAt": "2020-11-25T13:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2MjA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MDYyNQ==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530390625", "bodyText": "Although, in light of the last change, probably not.", "author": "mvocu", "createdAt": "2020-11-25T13:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2MjA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NzY4OA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530397688", "bodyText": "As you changed usage of entry to bl, it shouldn't. If you wish, you can update defaultCoreProperties in perun-base.xml.", "author": "zlamalp", "createdAt": "2020-11-25T14:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2MjA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjUxNw==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530372517", "bodyText": "I think we want this to be persistent, not disposable on server restart. Yet I'm not sure, how is this handled in dockerized version of LDAPc @martin-kuba ? On instances without docker, we have this property set to ./[filename] which leads to the same folder as jar.\nSo there are two solutions. We can have default fallback value here and do not set property on each instance or we can explicitly set default in properties file and keep current default value (or any other required by the docker).", "author": "zlamalp", "createdAt": "2020-11-25T13:26:56Z", "path": "perun-auditlogger/src/main/java/cz/metacentrum/perun/auditlogger/service/impl/AuditLoggerManagerImpl.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package cz.metacentrum.perun.auditlogger.service.impl;\n+\n+import java.util.Properties;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import cz.metacentrum.perun.auditlogger.logger.EventLogger;\n+import cz.metacentrum.perun.auditlogger.service.AuditLoggerManager;\n+import cz.metacentrum.perun.core.api.Perun;\n+import cz.metacentrum.perun.core.api.PerunClient;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+\n+@org.springframework.stereotype.Service(value = \"auditLoggerManager\")\n+public class AuditLoggerManagerImpl implements AuditLoggerManager {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(AuditLoggerManagerImpl.class);\n+\n+\tprivate final static String DEFAULT_CONSUMER_NAME = \"auditlogger\";\n+\tprivate final static String DEFAULT_STATE_FILE = \"/tmp/auditlogger.state\";", "originalCommit": "2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NTcyNg==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530385726", "bodyText": "I would argue that the default value should lead to somewhere guaranteed to exist. Anything else is placing constraint (or rather dependency) on the actual packaging and deployment. Sensible deployment should decide on the actual location of state file and there is a couple of ways to configure it; moreover in my opinion placing state file in the same directory as the binary installation is not a good practice.", "author": "mvocu", "createdAt": "2020-11-25T13:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NjgwOA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530396808", "bodyText": "Ok, I'll leave it to @martin-kuba, since he knows deployment details.", "author": "zlamalp", "createdAt": "2020-11-25T14:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTU5MA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530459590", "bodyText": "Docker containers keep their image between restarts, so the file /tmp/auditlogger.state would survive restart. But it will not survive deployment of a new version of the application. Is it a problem? We have the same situation with perun_ldapc, where the setting is ldap.stateFile=./perun-ldapc-last-state and the working directory is outside of the container. So if you want to keep the state between different versions of the application, set it to ./auditerlogger.state.", "author": "martin-kuba", "createdAt": "2020-11-25T15:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2NzcxOQ==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530467719", "bodyText": "OK, changed the default.", "author": "mvocu", "createdAt": "2020-11-25T15:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MjUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3Mjk4NQ==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530372985", "bodyText": "Please remove this line.", "author": "zlamalp", "createdAt": "2020-11-25T13:27:40Z", "path": "perun-auditlogger/src/main/java/cz/metacentrum/perun/auditlogger/main/AuditLoggerStarter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package cz.metacentrum.perun.auditlogger.main;\n+\n+import cz.metacentrum.perun.auditlogger.service.AuditLoggerManager;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Perun;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class AuditLoggerStarter {\n+\tprivate final static Logger log = LoggerFactory.getLogger(AuditLoggerStarter.class);\n+\n+\tprivate AuditLoggerManager auditLoggerManager;\n+\tprivate AbstractApplicationContext springCtx;\n+\tprivate PerunPrincipal perunPrincipal;\n+\tprivate Perun perunBl;\n+\n+\tpublic AuditLoggerStarter() {\n+\t\tthis.perunPrincipal = new PerunPrincipal(\"perunLdapc\", ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);\n+\t\tspringCtx = new ClassPathXmlApplicationContext(\"/perun-auditlogger.xml\");\n+\t\tthis.auditLoggerManager = springCtx.getBean(\"auditLoggerManager\", AuditLoggerManager.class);\n+\t\tthis.perunBl = springCtx.getBean(\"perun\", PerunBl.class);\n+\t}\n+\n+\t/**\n+\t * Main method of auditLogger\n+\t *\n+\t * @param args (the only argument can be id of message to set Consumer on)\n+\t */\n+\tpublic static void main(String[] args) {\n+\t\tSystem.out.println(\"Starting Perun-AuditLogger...\");\n+\n+\t\tint lastProcessedIdToSet = 0;\n+\n+\t\tif (args.length == 0) {\n+\t\t\t//This is normal behavior, do nothing special, just start auditLogger\n+\t\t} else if (args.length == 1) {\n+\t\t\t//This behavior is special, set lastProcessedId\n+\t\t\tString argument = args[0];\n+\t\t\tlastProcessedIdToSet = Integer.valueOf(argument);\n+\t\t} else {\n+\t\t\tSystem.out.println(\"Too much arguments, can't understand what to do, exit starting!\");\n+\t\t\treturn;\n+\t\t}\n+\n+\n+\t\ttry {\n+\t\t\tAuditLoggerStarter auditLoggerStarter = new AuditLoggerStarter();\n+\n+\t\t\t// Just for the Spring IoC to exit gracefully...\n+\t\t\tauditLoggerStarter.springCtx.registerShutdownHook();\n+\n+\t\t\t// Sets RPC Caller and Perun\n+\t\t\t// ldapcStarter.ldapcManager.setRpcCaller(rpcCaller);", "originalCommit": "2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NTc2MA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530385760", "bodyText": "Removed and fixed the comment below.", "author": "mvocu", "createdAt": "2020-11-25T13:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3Mjk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTU4Nw==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530375587", "bodyText": "I think we can use BL instead of Entry layer to avoid authorization check, which might be the reason you used perunLdapc principal in the session, which is by default configured to be perun admin.", "author": "zlamalp", "createdAt": "2020-11-25T13:31:43Z", "path": "perun-auditlogger/src/main/java/cz/metacentrum/perun/auditlogger/logger/impl/EventLoggerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+package cz.metacentrum.perun.auditlogger.logger.impl;\n+\n+import cz.metacentrum.perun.audit.events.AuditEvent;\n+import cz.metacentrum.perun.auditlogger.logger.EventLogger;\n+import cz.metacentrum.perun.auditlogger.service.AuditLoggerManager;\n+import cz.metacentrum.perun.auditparser.AuditParser;\n+import cz.metacentrum.perun.core.api.AuditMessage;\n+import cz.metacentrum.perun.core.api.Perun;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+@org.springframework.stereotype.Service(value = \"eventLogger\")\n+public class EventLoggerImpl implements EventLogger, Runnable {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(EventLoggerImpl.class);\n+\n+\tprivate static final DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n+\n+\tprivate static final String SYSLOG_LOGGER_NAME = \"syslog-logger\";\n+\t\n+\tprivate static final Logger syslog = LoggerFactory.getLogger(SYSLOG_LOGGER_NAME);\n+\t\n+\tprivate static final Map<Class<?>,Class<?>> mixinMap = new HashMap<>();\n+\tprivate static final ObjectMapper mapper = new ObjectMapper();\n+\n+\tstatic {\n+\t\tmapper.enableDefaultTyping();\n+\t\t// TODO - skip any problematic properties using interfaces for mixins\n+\t\tmapper.setMixIns(mixinMap);\n+\t}\n+\n+\t@Autowired\n+\tprivate AuditLoggerManager auditLoggerManager;\n+\n+\tprivate PerunSession perunSession;\n+\tprivate Perun perun;\n+\tprivate int lastProcessedIdNumber;\n+\n+\tprivate boolean running = false;\n+\n+\t@Override\n+\tpublic void run() {\n+\n+\n+\t\trunning = true;\n+\t\tAuditMessage message = null;\n+\t\tList<AuditMessage> messages;\n+\n+\t\ttry {\n+\t\t\tperunSession = auditLoggerManager.getPerunSession();\n+\t\t\tperun = auditLoggerManager.getPerunBl();\n+\t\t\t\n+\t\t\tif (lastProcessedIdNumber == 0) {\n+\t\t\t\tloadLastProcessedId();\n+\t\t\t}\n+\n+\t\t\tmessages = null;\n+\n+\t\t\t//If running is true, then this process will be continuously\n+\t\t\twhile (running) {\n+\n+\t\t\t\tint sleepTime = 1000;\n+\t\t\t\t//Waiting for new messages. If consumer failed in some internal case, waiting until it will be repaired (waiting time is increases by each attempt)\n+\t\t\t\twhile(messages == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t//IMPORTANT STEP1: Get new bulk of messages\n+\t\t\t\t\t\tmessages = perun.getAuditMessagesManager().pollConsumerMessages(perunSession, auditLoggerManager.getConsumerName(), lastProcessedIdNumber);", "originalCommit": "2224d2dedbe40827a0d2891f05c934c0e0ca58e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MDE4OA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530390188", "bodyText": "Ok. Which makes the authorization checks rather superficial imho.", "author": "mvocu", "createdAt": "2020-11-25T13:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NjMwMA==", "url": "https://github.com/CESNET/perun/pull/3001#discussion_r530396300", "bodyText": "Well, I don't think, that internal component (calling single method) should be perun admin just because the called method requires it. We could probably create new role, but it should be then true also for other internal principals, etc. Also entry generally creates new transaction, which might not be desired in other components (overhead). So we probably should improve all this logic in the future, but it is outside of the scope of this pull-request.", "author": "zlamalp", "createdAt": "2020-11-25T14:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTU4Nw=="}], "type": "inlineReview"}, {"oid": "8a3fb39f8da235b3b50d9647374fd0a5f4cd5efe", "url": "https://github.com/CESNET/perun/commit/8a3fb39f8da235b3b50d9647374fd0a5f4cd5efe", "message": "fixes from review", "committedDate": "2020-11-25T13:41:44Z", "type": "commit"}, {"oid": "16046a62764210b7f266fef961b7500fe75e498e", "url": "https://github.com/CESNET/perun/commit/16046a62764210b7f266fef961b7500fe75e498e", "message": "fixes from review", "committedDate": "2020-11-25T13:52:03Z", "type": "commit"}, {"oid": "536b116784779e013bf1a03b9e375b81f61e40ad", "url": "https://github.com/CESNET/perun/commit/536b116784779e013bf1a03b9e375b81f61e40ad", "message": "remove generated files", "committedDate": "2020-11-25T15:39:36Z", "type": "commit"}, {"oid": "7371fde91b32b71e447db344655bc08067aaf119", "url": "https://github.com/CESNET/perun/commit/7371fde91b32b71e447db344655bc08067aaf119", "message": "changed default location of state file", "committedDate": "2020-11-25T15:41:39Z", "type": "commit"}]}