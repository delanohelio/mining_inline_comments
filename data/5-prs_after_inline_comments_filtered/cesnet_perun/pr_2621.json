{"pr_number": 2621, "pr_title": "New authorization in FacilitiesManagerEntry", "pr_createdAt": "2020-03-15T09:55:19Z", "pr_url": "https://github.com/CESNET/perun/pull/2621", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MDM0Nw==", "url": "https://github.com/CESNET/perun/pull/2621#discussion_r392850347", "bodyText": "Shouldn't be there a negation?", "author": "stavamichal", "createdAt": "2020-03-16T08:26:20Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java", "diffHunk": "@@ -129,27 +125,14 @@ public Facility getFacilityByName(PerunSession sess, String name) throws Interna\n \tpublic List<RichFacility> getRichFacilities(PerunSession sess) throws InternalErrorException, PrivilegeException {\n \t\tUtils.checkPerunSession(sess);\n \n-\t\t// Perun admin can see everything\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.PERUNADMIN) || AuthzResolver.isAuthorized(sess, Role.PERUNOBSERVER)) {\n-\t\t\treturn getFacilitiesManagerBl().getRichFacilities(sess);\n-\t\t} else if (AuthzResolver.isAuthorized(sess, Role.FACILITYADMIN)) {\n-\t\t\t/*\n-\t\t\t TODO: this optimization prevents loading facilities by ids, but its not optimal when we have thousands of facilities.\n-\t\t\t We should load facilities where user is manager directly from DB, but it would break contract, that authorization is taken only from session.\n-\t\t\t */\n-\t\t\tList<Facility> facilities = getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\tfacilities.removeIf(facility -> {\n-\t\t\t\ttry {\n-\t\t\t\t\treturn !AuthzResolver.isAuthorized(sess, Role.FACILITYADMIN, facility);\n-\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\t// if we can't determine authorization prevent returning it\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\treturn getFacilitiesManagerBl().getRichFacilities(sess, facilities);\n-\t\t} else {\n+\t\t// Authorization\n+\t\tif (!AuthzResolver.authorizedInternal(sess, \"getRichFacilities_policy\")) {\n \t\t\tthrow new PrivilegeException(sess, \"getRichFacilities\");\n \t\t}\n+\t\tList<Facility> facilities = getFacilitiesManagerBl().getFacilities(sess);\n+\t\tfacilities.removeIf(facility -> AuthzResolver.authorizedInternal(sess, \"filter-getRichFacilities_policy\", Collections.singletonList(facility)));", "originalCommit": "5ffdce0ab0a155513a0643984dc7d4494feb50b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MTU3MA==", "url": "https://github.com/CESNET/perun/pull/2621#discussion_r393741570", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-03-17T14:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MDM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTA2MA==", "url": "https://github.com/CESNET/perun/pull/2621#discussion_r392931060", "bodyText": "The name shoudl be 'host'.", "author": "stavamichal", "createdAt": "2020-03-16T10:47:41Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java", "diffHunk": "@@ -1052,14 +939,14 @@ public PerunBl getPerunBl() {\n \tpublic Host addHost(PerunSession sess, Host host, Facility facility) throws InternalErrorException, FacilityNotExistsException, PrivilegeException {\n \t\tUtils.checkPerunSession(sess);\n \n+\t\tUtils.notNull(host, \"hosts\");", "originalCommit": "5ffdce0ab0a155513a0643984dc7d4494feb50b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MTgzMA==", "url": "https://github.com/CESNET/perun/pull/2621#discussion_r393741830", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-03-17T14:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MzI2OQ==", "url": "https://github.com/CESNET/perun/pull/2621#discussion_r392943269", "bodyText": "Missing definition of returned objects.", "author": "stavamichal", "createdAt": "2020-03-16T11:10:30Z", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/FacilitiesManagerEntry.java", "diffHunk": "@@ -1606,4 +1439,32 @@ private void checkFacilityContactsEntitiesExist(PerunSession sess, List<ContactG\n \t\t\tthis.checkFacilityContactEntitiesExists(sess, contactGroup);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Create a list of PerunBeans from facility, vo and service.\n+\t * If beans are not null it also checks if they exist. It will skip them otherwise.\n+\t *\n+\t * @param sess\n+\t * @param facility\n+\t * @param specificVo\n+\t * @param specificService\n+\t * @return", "originalCommit": "5ffdce0ab0a155513a0643984dc7d4494feb50b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjExNA==", "url": "https://github.com/CESNET/perun/pull/2621#discussion_r393742114", "bodyText": "Fixed", "author": "balcirakpeter", "createdAt": "2020-03-17T14:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MzI2OQ=="}], "type": "inlineReview"}, {"oid": "7f21718b7c3ddeae99bf38cb2658cf42fa28c4ef", "url": "https://github.com/CESNET/perun/commit/7f21718b7c3ddeae99bf38cb2658cf42fa28c4ef", "message": "New authorization in FacilitiesManagerEntry\n\n- In FacilitiesManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the FacilitiesManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- The existence checks for entities were refactored, so they are called\n  before authorization.", "committedDate": "2020-03-17T14:47:10Z", "type": "forcePushed"}, {"oid": "5dd3a663133cd57c0f058f9ccdd9d685ea4ab924", "url": "https://github.com/CESNET/perun/commit/5dd3a663133cd57c0f058f9ccdd9d685ea4ab924", "message": "New authorization in FacilitiesManagerEntry\n\n- In FacilitiesManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the FacilitiesManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- The existence checks for entities were refactored, so they are called\n  before authorization.", "committedDate": "2020-07-09T21:17:49Z", "type": "commit"}, {"oid": "5dd3a663133cd57c0f058f9ccdd9d685ea4ab924", "url": "https://github.com/CESNET/perun/commit/5dd3a663133cd57c0f058f9ccdd9d685ea4ab924", "message": "New authorization in FacilitiesManagerEntry\n\n- In FacilitiesManagerEntry was completely replaced the old authorization.\n- For that purpose was updated also perun-roles.yml file with the\n  policies used in the FacilitiesManagerEntry.\n- All PerunBeans which are passed to the methods and already exist in\n  Perun are passed also to the authorization, even when a policy does not\n  need them for now. It does not have any effect on the policy evaluation.\n  It erase the necessity to change these methods if the policy will change\n  in the future.\n- The existence checks for entities were refactored, so they are called\n  before authorization.", "committedDate": "2020-07-09T21:17:49Z", "type": "forcePushed"}]}