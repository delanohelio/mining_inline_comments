{"pr_number": 2975, "pr_title": "Refactorization of automatic rejection of applications", "pr_createdAt": "2020-11-05T15:42:06Z", "pr_url": "https://github.com/CESNET/perun/pull/2975", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzUxOA==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r518597518", "bodyText": "I would suggest changing the return type of these methods to List<Integer> and moving them to the SearcherImpl component. Then you can call here the SearcherBl and map the ids to Vos.", "author": "Vojtech-Sassmann", "createdAt": "2020-11-06T08:37:09Z", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/AppAutoRejectionScheduler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package cz.metacentrum.perun.registrar.impl;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunClient;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.GroupNotExistsException;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+import cz.metacentrum.perun.core.impl.Synchronizer;\n+import cz.metacentrum.perun.registrar.RegistrarManager;\n+import cz.metacentrum.perun.registrar.model.Application;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcPerunTemplate;\n+\n+import javax.sql.DataSource;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class handling auto rejection of expired applications for VOs and Groups\n+ *\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class AppAutoRejectionScheduler {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(Synchronizer.class);\n+\n+\tprivate JdbcPerunTemplate jdbc;\n+\tprivate PerunSession sess;\n+\tprivate PerunBl perun;\n+\tprivate RegistrarManager registrarManager;\n+\n+\tprivate static final String A_VO_APP_EXP_RULES = \"urn:perun:vo:attribute-def:def:applicationExpirationRules\";\n+\tprivate static final String A_GROUP_APP_EXP_RULES = \"urn:perun:group:attribute-def:def:applicationExpirationRules\";\n+\n+\t@Autowired\n+\tpublic void setDataSource(DataSource dataSource) {\n+\t\tthis.jdbc = new JdbcPerunTemplate(dataSource);\n+\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+\t}\n+\n+\tpublic PerunBl getPerun() {\n+\t\treturn perun;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setPerun(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t}\n+\n+\tpublic RegistrarManager getRegistrarManager() { return registrarManager; }\n+\n+\t@Autowired\n+\tpublic void setRegistrarManager(RegistrarManager registrarManager) { this.registrarManager = registrarManager; }\n+\n+\t/**\n+\t * Constructor for unit tests\n+\t *\n+\t * @param perun PerunBl bean\n+\t */\n+\tpublic AppAutoRejectionScheduler(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t\tinitialize();\n+\t}\n+\n+\tpublic void initialize() {\n+\t\tString synchronizerPrincipal = \"perunSynchronizer\";\n+\t\tthis.sess = perun.getPerunSession(\n+\t\t\tnew PerunPrincipal(synchronizerPrincipal, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL),\n+\t\t\tnew PerunClient());\n+\t}\n+\n+\t/**\n+\t * Perform check on applications state and expiration attribute and reject them, if it is necessary.\n+\t * Rejection is based on current date and their value of application expiration.\n+\t *\n+\t * Method is triggered by Spring scheduler (at midnight everyday).\n+\t *\n+\t * @throws VoNotExistsException if vo not exist (it shouldn't happen)\n+\t * @throws GroupNotExistsException if group not exist (it shouldn't happen)\n+\t */\n+\tpublic void checkApplicationsExpiration() throws VoNotExistsException, GroupNotExistsException {\n+\t\tList<Vo> vos = getAllEligibleVos();\n+\t\t// check applications expiration in eligible vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);\n+\t\t} catch(InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: voApplicationsAutoRejection\", e);\n+\t\t}\n+\n+\t\tList<Group> groups = getAllEligibleGroups();\n+\t\t// check applications expiration in eligible groups\n+\t\ttry {\n+\t\t\tgroupApplicationsAutoRejection(groups);\n+\t\t} catch (InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: groupApplicationsAutoRejection\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns current system time.\n+\t *\n+\t * @return current time.\n+\t */\n+\tpublic LocalDate getCurrentLocalDate() {\n+\t\treturn LocalDate.now();\n+\t}\n+\n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos eligible virtual organizations\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param groups eligible groups\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Group> groups) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares date of last modification of application to values in expiration attribute and if finds expired application, then\n+\t * rejects it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getModifiedAt();\n+\t\t\tLocalDate modifiedAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState() == Application.AppState.NEW) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(modifiedAt)) {\n+\t\t\t\t\tString reasonForVo = \"Your application to VO \" + application.getVo().getName() + \" was auto rejected, because you didn't verify your email address.\";\n+\t\t\t\t\tString reasonForGroup = application.getGroup() == null ? \"\" : \"Your application to group \" + application.getGroup().getName() + \" was auto rejected, because you didn't verify your email address.\";\n+\t\t\t\t\trejectWithReason(application, reasonForVo, reasonForGroup);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(modifiedAt)) {\n+\t\t\t\tString reasonForVo = \"Your application to VO \" + application.getVo().getName() + \" was auto rejected, because admin didn't approve your application in a timely manner.\";\n+\t\t\t\tString reasonForGroup = application.getGroup() == null ? \"\" : \"Your application to group \" + application.getGroup().getName() + \" was auto rejected, because admin didn't approve your application in a timely manner.\";\n+\t\t\t\trejectWithReason(application, reasonForVo, reasonForGroup);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Rejects given application to Vo or group due to given reason.\n+\t *\n+\t * @param application application to reject\n+\t * @param reasonForVo reason for reject VO application\n+\t * @param reasonForGroup reason for reject group application\n+\t */\n+\tprivate void rejectWithReason (Application application, String reasonForVo, String reasonForGroup) {\n+\t\ttry {\n+\t\t\tif (application.getGroup() == null) {\n+\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), reasonForVo);\n+\t\t\t} else {\n+\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), reasonForGroup);\n+\t\t\t}\n+\t\t} catch (PerunException e) {\n+\t\t\tlog.error(\"Failed to reject expired application: {}\", application, e);\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * Selects all vos from database, in which could be some expired applications acceptable for auto rejection.\n+\t *\n+\t * @return list of vos\n+\t * @throws VoNotExistsException if vo not exist (it shouldn't happen)\n+\t */\n+\tprivate List<Vo> getAllEligibleVos() throws VoNotExistsException {", "originalCommit": "a86b9531abf7893bbfa1179a562ec4cddcdb198f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1NDI3MQ==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519854271", "bodyText": "Query moved to the SearcherImpl.", "author": "HejdaJakub", "createdAt": "2020-11-09T14:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzYwMQ==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r518597601", "bodyText": "Same for this one.", "author": "Vojtech-Sassmann", "createdAt": "2020-11-06T08:37:20Z", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/AppAutoRejectionScheduler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package cz.metacentrum.perun.registrar.impl;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunClient;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.GroupNotExistsException;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+import cz.metacentrum.perun.core.impl.Synchronizer;\n+import cz.metacentrum.perun.registrar.RegistrarManager;\n+import cz.metacentrum.perun.registrar.model.Application;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcPerunTemplate;\n+\n+import javax.sql.DataSource;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class handling auto rejection of expired applications for VOs and Groups\n+ *\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class AppAutoRejectionScheduler {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(Synchronizer.class);\n+\n+\tprivate JdbcPerunTemplate jdbc;\n+\tprivate PerunSession sess;\n+\tprivate PerunBl perun;\n+\tprivate RegistrarManager registrarManager;\n+\n+\tprivate static final String A_VO_APP_EXP_RULES = \"urn:perun:vo:attribute-def:def:applicationExpirationRules\";\n+\tprivate static final String A_GROUP_APP_EXP_RULES = \"urn:perun:group:attribute-def:def:applicationExpirationRules\";\n+\n+\t@Autowired\n+\tpublic void setDataSource(DataSource dataSource) {\n+\t\tthis.jdbc = new JdbcPerunTemplate(dataSource);\n+\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+\t}\n+\n+\tpublic PerunBl getPerun() {\n+\t\treturn perun;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setPerun(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t}\n+\n+\tpublic RegistrarManager getRegistrarManager() { return registrarManager; }\n+\n+\t@Autowired\n+\tpublic void setRegistrarManager(RegistrarManager registrarManager) { this.registrarManager = registrarManager; }\n+\n+\t/**\n+\t * Constructor for unit tests\n+\t *\n+\t * @param perun PerunBl bean\n+\t */\n+\tpublic AppAutoRejectionScheduler(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t\tinitialize();\n+\t}\n+\n+\tpublic void initialize() {\n+\t\tString synchronizerPrincipal = \"perunSynchronizer\";\n+\t\tthis.sess = perun.getPerunSession(\n+\t\t\tnew PerunPrincipal(synchronizerPrincipal, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL),\n+\t\t\tnew PerunClient());\n+\t}\n+\n+\t/**\n+\t * Perform check on applications state and expiration attribute and reject them, if it is necessary.\n+\t * Rejection is based on current date and their value of application expiration.\n+\t *\n+\t * Method is triggered by Spring scheduler (at midnight everyday).\n+\t *\n+\t * @throws VoNotExistsException if vo not exist (it shouldn't happen)\n+\t * @throws GroupNotExistsException if group not exist (it shouldn't happen)\n+\t */\n+\tpublic void checkApplicationsExpiration() throws VoNotExistsException, GroupNotExistsException {\n+\t\tList<Vo> vos = getAllEligibleVos();\n+\t\t// check applications expiration in eligible vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);\n+\t\t} catch(InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: voApplicationsAutoRejection\", e);\n+\t\t}\n+\n+\t\tList<Group> groups = getAllEligibleGroups();\n+\t\t// check applications expiration in eligible groups\n+\t\ttry {\n+\t\t\tgroupApplicationsAutoRejection(groups);\n+\t\t} catch (InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: groupApplicationsAutoRejection\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns current system time.\n+\t *\n+\t * @return current time.\n+\t */\n+\tpublic LocalDate getCurrentLocalDate() {\n+\t\treturn LocalDate.now();\n+\t}\n+\n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos eligible virtual organizations\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param groups eligible groups\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Group> groups) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares date of last modification of application to values in expiration attribute and if finds expired application, then\n+\t * rejects it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getModifiedAt();\n+\t\t\tLocalDate modifiedAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState() == Application.AppState.NEW) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(modifiedAt)) {\n+\t\t\t\t\tString reasonForVo = \"Your application to VO \" + application.getVo().getName() + \" was auto rejected, because you didn't verify your email address.\";\n+\t\t\t\t\tString reasonForGroup = application.getGroup() == null ? \"\" : \"Your application to group \" + application.getGroup().getName() + \" was auto rejected, because you didn't verify your email address.\";\n+\t\t\t\t\trejectWithReason(application, reasonForVo, reasonForGroup);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(modifiedAt)) {\n+\t\t\t\tString reasonForVo = \"Your application to VO \" + application.getVo().getName() + \" was auto rejected, because admin didn't approve your application in a timely manner.\";\n+\t\t\t\tString reasonForGroup = application.getGroup() == null ? \"\" : \"Your application to group \" + application.getGroup().getName() + \" was auto rejected, because admin didn't approve your application in a timely manner.\";\n+\t\t\t\trejectWithReason(application, reasonForVo, reasonForGroup);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Rejects given application to Vo or group due to given reason.\n+\t *\n+\t * @param application application to reject\n+\t * @param reasonForVo reason for reject VO application\n+\t * @param reasonForGroup reason for reject group application\n+\t */\n+\tprivate void rejectWithReason (Application application, String reasonForVo, String reasonForGroup) {\n+\t\ttry {\n+\t\t\tif (application.getGroup() == null) {\n+\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), reasonForVo);\n+\t\t\t} else {\n+\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), reasonForGroup);\n+\t\t\t}\n+\t\t} catch (PerunException e) {\n+\t\t\tlog.error(\"Failed to reject expired application: {}\", application, e);\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * Selects all vos from database, in which could be some expired applications acceptable for auto rejection.\n+\t *\n+\t * @return list of vos\n+\t * @throws VoNotExistsException if vo not exist (it shouldn't happen)\n+\t */\n+\tprivate List<Vo> getAllEligibleVos() throws VoNotExistsException {\n+\t\tString sql = \"select distinct vos.id from vos join application on vos.id=application.vo_id join vo_attr_values \" +\n+\t\t\t\"on vos.id=vo_attr_values.vo_id join attr_names on attr_names.id=vo_attr_values.attr_id \" +\n+\t\t\t\"where application.state in ('NEW', 'VERIFIED') and (attr_names.friendly_name= 'applicationExpirationRules' \" +\n+\t\t\t\"and attr_names.namespace= 'urn:perun:vo:attribute-def:def')\";\n+\t\tList<Integer> vosIds = jdbc.queryForList(sql, Integer.class);\n+\t\tList<Vo> vos = new ArrayList<>();\n+\t\tfor(int voId : vosIds){\n+\t\t\tvos.add(perun.getVosManagerBl().getVoById(sess, voId));\n+\t\t}\n+\t\treturn vos;\n+\n+\t}\n+\n+\t/**\n+\t * Selects all groups from database, in which could be some expired applications acceptable for auto rejection.\n+\t *\n+\t * @return list of groups\n+\t * @throws GroupNotExistsException if group not exist (it shouldn't happen)\n+\t */\n+\tprivate List<Group> getAllEligibleGroups() throws GroupNotExistsException {", "originalCommit": "a86b9531abf7893bbfa1179a562ec4cddcdb198f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1NDYxMg==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519854612", "bodyText": "This query also moved to the SearcherImpl.", "author": "HejdaJakub", "createdAt": "2020-11-09T14:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5NzYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NjU0MA==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519176540", "bodyText": "I think this is not perunSynchronizer :)", "author": "balcirakpeter", "createdAt": "2020-11-07T13:15:16Z", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/AppAutoRejectionScheduler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package cz.metacentrum.perun.registrar.impl;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunClient;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.GroupNotExistsException;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+import cz.metacentrum.perun.core.impl.Synchronizer;\n+import cz.metacentrum.perun.registrar.RegistrarManager;\n+import cz.metacentrum.perun.registrar.model.Application;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcPerunTemplate;\n+\n+import javax.sql.DataSource;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class handling auto rejection of expired applications for VOs and Groups\n+ *\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class AppAutoRejectionScheduler {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(Synchronizer.class);\n+\n+\tprivate JdbcPerunTemplate jdbc;\n+\tprivate PerunSession sess;\n+\tprivate PerunBl perun;\n+\tprivate RegistrarManager registrarManager;\n+\n+\tprivate static final String A_VO_APP_EXP_RULES = \"urn:perun:vo:attribute-def:def:applicationExpirationRules\";\n+\tprivate static final String A_GROUP_APP_EXP_RULES = \"urn:perun:group:attribute-def:def:applicationExpirationRules\";\n+\n+\t@Autowired\n+\tpublic void setDataSource(DataSource dataSource) {\n+\t\tthis.jdbc = new JdbcPerunTemplate(dataSource);\n+\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+\t}\n+\n+\tpublic PerunBl getPerun() {\n+\t\treturn perun;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setPerun(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t}\n+\n+\tpublic RegistrarManager getRegistrarManager() { return registrarManager; }\n+\n+\t@Autowired\n+\tpublic void setRegistrarManager(RegistrarManager registrarManager) { this.registrarManager = registrarManager; }\n+\n+\t/**\n+\t * Constructor for unit tests\n+\t *\n+\t * @param perun PerunBl bean\n+\t */\n+\tpublic AppAutoRejectionScheduler(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t\tinitialize();\n+\t}\n+\n+\tpublic void initialize() {\n+\t\tString synchronizerPrincipal = \"perunSynchronizer\";", "originalCommit": "a86b9531abf7893bbfa1179a562ec4cddcdb198f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1ODk0Nw==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519858947", "bodyText": "Changed to perunRegistrar.", "author": "HejdaJakub", "createdAt": "2020-11-09T14:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NjU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NzgyOQ==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519177829", "bodyText": "I would add the whole part with \"ignoreByAdmin\" option to the else branch (or else if (Application.AppState.VERIFIED)).\nThe reason is this (what could happen now):\nIt can happen that the \"ignoredByAdmin\" is set to less days than \"emailVerification\".\nThen when the application is in state NEW but the \"emailVerification\" did not expired yet, it will auto-reject the application with the message saying that admin did not approve the application.\nHowever, this is not true because the application was not even in the approval process yet (it was waiting for the email verification). Therefore, it couldn't (or shouldn't) be approved.", "author": "balcirakpeter", "createdAt": "2020-11-07T13:30:56Z", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/AppAutoRejectionScheduler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package cz.metacentrum.perun.registrar.impl;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunClient;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.GroupNotExistsException;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+import cz.metacentrum.perun.core.impl.Synchronizer;\n+import cz.metacentrum.perun.registrar.RegistrarManager;\n+import cz.metacentrum.perun.registrar.model.Application;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcPerunTemplate;\n+\n+import javax.sql.DataSource;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class handling auto rejection of expired applications for VOs and Groups\n+ *\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class AppAutoRejectionScheduler {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(Synchronizer.class);\n+\n+\tprivate JdbcPerunTemplate jdbc;\n+\tprivate PerunSession sess;\n+\tprivate PerunBl perun;\n+\tprivate RegistrarManager registrarManager;\n+\n+\tprivate static final String A_VO_APP_EXP_RULES = \"urn:perun:vo:attribute-def:def:applicationExpirationRules\";\n+\tprivate static final String A_GROUP_APP_EXP_RULES = \"urn:perun:group:attribute-def:def:applicationExpirationRules\";\n+\n+\t@Autowired\n+\tpublic void setDataSource(DataSource dataSource) {\n+\t\tthis.jdbc = new JdbcPerunTemplate(dataSource);\n+\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+\t}\n+\n+\tpublic PerunBl getPerun() {\n+\t\treturn perun;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setPerun(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t}\n+\n+\tpublic RegistrarManager getRegistrarManager() { return registrarManager; }\n+\n+\t@Autowired\n+\tpublic void setRegistrarManager(RegistrarManager registrarManager) { this.registrarManager = registrarManager; }\n+\n+\t/**\n+\t * Constructor for unit tests\n+\t *\n+\t * @param perun PerunBl bean\n+\t */\n+\tpublic AppAutoRejectionScheduler(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t\tinitialize();\n+\t}\n+\n+\tpublic void initialize() {\n+\t\tString synchronizerPrincipal = \"perunSynchronizer\";\n+\t\tthis.sess = perun.getPerunSession(\n+\t\t\tnew PerunPrincipal(synchronizerPrincipal, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL),\n+\t\t\tnew PerunClient());\n+\t}\n+\n+\t/**\n+\t * Perform check on applications state and expiration attribute and reject them, if it is necessary.\n+\t * Rejection is based on current date and their value of application expiration.\n+\t *\n+\t * Method is triggered by Spring scheduler (at midnight everyday).\n+\t *\n+\t * @throws VoNotExistsException if vo not exist (it shouldn't happen)\n+\t * @throws GroupNotExistsException if group not exist (it shouldn't happen)\n+\t */\n+\tpublic void checkApplicationsExpiration() throws VoNotExistsException, GroupNotExistsException {\n+\t\tList<Vo> vos = getAllEligibleVos();\n+\t\t// check applications expiration in eligible vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);\n+\t\t} catch(InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: voApplicationsAutoRejection\", e);\n+\t\t}\n+\n+\t\tList<Group> groups = getAllEligibleGroups();\n+\t\t// check applications expiration in eligible groups\n+\t\ttry {\n+\t\t\tgroupApplicationsAutoRejection(groups);\n+\t\t} catch (InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: groupApplicationsAutoRejection\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns current system time.\n+\t *\n+\t * @return current time.\n+\t */\n+\tpublic LocalDate getCurrentLocalDate() {\n+\t\treturn LocalDate.now();\n+\t}\n+\n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos eligible virtual organizations\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param groups eligible groups\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Group> groups) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares date of last modification of application to values in expiration attribute and if finds expired application, then\n+\t * rejects it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getModifiedAt();\n+\t\t\tLocalDate modifiedAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState() == Application.AppState.NEW) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(modifiedAt)) {\n+\t\t\t\t\tString reasonForVo = \"Your application to VO \" + application.getVo().getName() + \" was auto rejected, because you didn't verify your email address.\";\n+\t\t\t\t\tString reasonForGroup = application.getGroup() == null ? \"\" : \"Your application to group \" + application.getGroup().getName() + \" was auto rejected, because you didn't verify your email address.\";\n+\t\t\t\t\trejectWithReason(application, reasonForVo, reasonForGroup);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));", "originalCommit": "a86b9531abf7893bbfa1179a562ec4cddcdb198f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTA5Ng==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519669096", "bodyText": "But on the other hand, this is on Vo/Group admin, if he set it like this, isn't it? In the first task (https://homeproj.cesnet.cz/issues/6556) was written, that the second value of attribute (\"ignoredByAdmin\") shouldn't depend on state, so I think, that this possibility is desirable. Due to this I have the \"continue\" in the if statement, so if the number of days for both values is the same, then shouldn\u0165 happen the double try to reject the same application.", "author": "HejdaJakub", "createdAt": "2020-11-09T09:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4MjczMQ==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r519982731", "bodyText": "I see. I think the best way to do is to ask the task requestor :) How should we solve it @vyskocilpavel ?", "author": "balcirakpeter", "createdAt": "2020-11-09T17:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMTA3OQ==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r520021079", "bodyText": "It's possible to make a decision on the combination of both attributes?\n\nuse-case:\n\n\nemailVerification - 14 days\nignoredByAdmin - unset\nthen reject only application in state: \"Waiting for mail verification\" after 14 days\n\n\nuse-case:\n\n\nemailVerification - unset\nignoredByAdmin - 30 days\nthen reject all applications after 30 days\n\n\nuse-case:\n\n\nemailVerification - 14 days\nignoredByAdmin - 30 days\nthen reject all unverified applications after 14 days and all other applications after 30 days. The time period for \"ignoredByAdmin\" should be counted from the last action(if it is possible) - for example, mail verification process", "author": "vyskocilpavel", "createdAt": "2020-11-09T18:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3MjgwNw==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r520672807", "bodyText": "I have discussed it with Pavel and the result is following. If there are both limits set, we want to separately check NEW applications and separately VERIFIED applications. So the code should be constructed something like this:\nif (application.getState() == Application.AppState.NEW && attrValue.containsKey(\"emailVerification\")) {\n    //process this situation\n} else if (attrValue.containsKey(\"ignoredByAdmin\")) {\n    //process this situation\n}\n\nThis should cover all possible use cases. Correct me if I am wrong. I could overlook something.", "author": "balcirakpeter", "createdAt": "2020-11-10T15:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3NzgyOQ=="}], "type": "inlineReview"}, {"oid": "43ab3d8ae9f8cc62738009a2731f2d7f67d2e88f", "url": "https://github.com/CESNET/perun/commit/43ab3d8ae9f8cc62738009a2731f2d7f67d2e88f", "message": "Refactorization of automatic rejection of applications\n\n* Created new class which now handles all functionality about application auto rejection.\n* Optimalized methods check only eligible vos and groups now instead of all vos and groups in Perun.", "committedDate": "2020-11-09T14:17:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1OTgwNw==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r520659807", "bodyText": "I think this could cause nullPointerException when the \"emailVerification\" key is not set. This can happen in all places where you get a value for a key from this attribute.", "author": "balcirakpeter", "createdAt": "2020-11-10T15:39:09Z", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/AppAutoRejectionScheduler.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package cz.metacentrum.perun.registrar.impl;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.ExtSourcesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.PerunClient;\n+import cz.metacentrum.perun.core.api.PerunPrincipal;\n+import cz.metacentrum.perun.core.api.PerunSession;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.GroupNotExistsException;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.VoNotExistsException;\n+import cz.metacentrum.perun.core.bl.PerunBl;\n+import cz.metacentrum.perun.core.bl.SearcherBl;\n+import cz.metacentrum.perun.core.impl.Synchronizer;\n+import cz.metacentrum.perun.registrar.RegistrarManager;\n+import cz.metacentrum.perun.registrar.model.Application;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcPerunTemplate;\n+\n+import javax.sql.DataSource;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class handling auto rejection of expired applications for VOs and Groups\n+ *\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class AppAutoRejectionScheduler {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(Synchronizer.class);\n+\n+\tprivate JdbcPerunTemplate jdbc;\n+\tprivate PerunSession sess;\n+\tprivate PerunBl perun;\n+\tprivate RegistrarManager registrarManager;\n+\tprivate final SearcherBl searcherBl;\n+\n+\tprivate static final String A_VO_APP_EXP_RULES = \"urn:perun:vo:attribute-def:def:applicationExpirationRules\";\n+\tprivate static final String A_GROUP_APP_EXP_RULES = \"urn:perun:group:attribute-def:def:applicationExpirationRules\";\n+\n+\t@Autowired\n+\tpublic void setDataSource(DataSource dataSource) {\n+\t\tthis.jdbc = new JdbcPerunTemplate(dataSource);\n+\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+\t}\n+\n+\tpublic PerunBl getPerun() {\n+\t\treturn perun;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setPerun(PerunBl perun) {\n+\t\tthis.perun = perun;\n+\t}\n+\n+\tpublic RegistrarManager getRegistrarManager() { return registrarManager; }\n+\n+\t@Autowired\n+\tpublic void setRegistrarManager(RegistrarManager registrarManager) { this.registrarManager = registrarManager; }\n+\n+\t/**\n+\t * Constructor for unit tests\n+\t *\n+\t * @param perun PerunBl bean\n+\t */\n+\tpublic AppAutoRejectionScheduler(PerunBl perun, SearcherBl searcherBl) {\n+\t\tthis.perun = perun;\n+\t\tthis.searcherBl = searcherBl;\n+\t\tinitialize();\n+\t}\n+\n+\tpublic void initialize() {\n+\t\tthis.sess = perun.getPerunSession(\n+\t\t\tnew PerunPrincipal(\"perunRegistrar\", ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL),\n+\t\t\tnew PerunClient());\n+\t}\n+\n+\t/**\n+\t * Perform check on applications state and expiration attribute and reject them, if it is necessary.\n+\t * Rejection is based on current date and their value of application expiration.\n+\t *\n+\t * Method is triggered by Spring scheduler (at midnight everyday).\n+\t *\n+\t * @throws VoNotExistsException if vo not exist (it shouldn't happen)\n+\t * @throws GroupNotExistsException if group not exist (it shouldn't happen)\n+\t */\n+\tpublic void checkApplicationsExpiration() throws VoNotExistsException, GroupNotExistsException {\n+\t\tList<Vo> vos = getAllEligibleVos();\n+\t\t// check applications expiration in eligible vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);\n+\t\t} catch(InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: voApplicationsAutoRejection\", e);\n+\t\t}\n+\n+\t\tList<Group> groups = getAllEligibleGroups();\n+\t\t// check applications expiration in eligible groups\n+\t\ttry {\n+\t\t\tgroupApplicationsAutoRejection(groups);\n+\t\t} catch (InternalErrorException | PerunException e){\n+\t\t\tlog.error(\"Synchronizer: groupApplicationsAutoRejection\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns current system time.\n+\t *\n+\t * @return current time.\n+\t */\n+\tpublic LocalDate getCurrentLocalDate() {\n+\t\treturn LocalDate.now();\n+\t}\n+\n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos eligible virtual organizations\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param groups eligible groups\n+\t * @throws PerunException perun exception\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Group> groups) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares date of last modification of application to values in expiration attribute and if finds expired application, then\n+\t * rejects it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getModifiedAt();\n+\t\t\tLocalDate modifiedAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState() == Application.AppState.NEW) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));", "originalCommit": "43ab3d8ae9f8cc62738009a2731f2d7f67d2e88f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyMTU5NQ==", "url": "https://github.com/CESNET/perun/pull/2975#discussion_r520721595", "bodyText": "Good point. Your implementation below should solve this problem and I also think, that it covers all use cases.", "author": "HejdaJakub", "createdAt": "2020-11-10T17:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1OTgwNw=="}], "type": "inlineReview"}, {"oid": "4f23e62aa5e78c3d326f4c49b065b1b76b4b2afc", "url": "https://github.com/CESNET/perun/commit/4f23e62aa5e78c3d326f4c49b065b1b76b4b2afc", "message": "Refactorization of automatic rejection of applications\n\n* Created new class which now handles all functionality about application auto rejection.\n* Optimalized methods check only eligible vos and groups now instead of all vos and groups in Perun.", "committedDate": "2020-11-10T16:28:28Z", "type": "forcePushed"}, {"oid": "28e7aac7c4482da007e52b45fac585517ec88535", "url": "https://github.com/CESNET/perun/commit/28e7aac7c4482da007e52b45fac585517ec88535", "message": "Refactorization of automatic rejection of applications\n\n* Created new class which now handles all functionality about application auto rejection.\n* Optimalized methods check only eligible vos and groups now instead of all vos and groups in Perun.", "committedDate": "2020-11-10T16:46:06Z", "type": "commit"}, {"oid": "28e7aac7c4482da007e52b45fac585517ec88535", "url": "https://github.com/CESNET/perun/commit/28e7aac7c4482da007e52b45fac585517ec88535", "message": "Refactorization of automatic rejection of applications\n\n* Created new class which now handles all functionality about application auto rejection.\n* Optimalized methods check only eligible vos and groups now instead of all vos and groups in Perun.", "committedDate": "2020-11-10T16:46:06Z", "type": "forcePushed"}]}