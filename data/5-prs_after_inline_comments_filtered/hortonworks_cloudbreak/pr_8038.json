{"pr_number": 8038, "pr_title": "CB-6809 Add Audit Service gRPC client", "pr_createdAt": "2020-05-13T13:24:28Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8038", "timeline": [{"oid": "91aaca8147b8bbd448824ae004cd1261982abb35", "url": "https://github.com/hortonworks/cloudbreak/commit/91aaca8147b8bbd448824ae004cd1261982abb35", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing", "committedDate": "2020-05-14T08:09:18Z", "type": "forcePushed"}, {"oid": "d08d64760d18c62d8fe5bbefad0ee60dfff43cd4", "url": "https://github.com/hortonworks/cloudbreak/commit/d08d64760d18c62d8fe5bbefad0ee60dfff43cd4", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing", "committedDate": "2020-05-14T12:45:13Z", "type": "forcePushed"}, {"oid": "97ba434989f971467278402ac038b60520873400", "url": "https://github.com/hortonworks/cloudbreak/commit/97ba434989f971467278402ac038b60520873400", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing", "committedDate": "2020-05-14T12:47:28Z", "type": "forcePushed"}, {"oid": "776e2004e35a7d85902aeb026be463fdcae43319", "url": "https://github.com/hortonworks/cloudbreak/commit/776e2004e35a7d85902aeb026be463fdcae43319", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing", "committedDate": "2020-05-14T19:35:20Z", "type": "commit"}, {"oid": "776e2004e35a7d85902aeb026be463fdcae43319", "url": "https://github.com/hortonworks/cloudbreak/commit/776e2004e35a7d85902aeb026be463fdcae43319", "message": "CB-6809 Add Audit Service gRPC client\n\nCover model validation with extensive unit testing", "committedDate": "2020-05-14T19:35:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU4NDYxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8038#discussion_r425584610", "bodyText": "why dont you use generic type for EventData?", "author": "topolyai5", "createdAt": "2020-05-15T06:05:39Z", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/AuditEventToGrpcAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sequenceiq.cloudbreak.audit.converter;\n+\n+import static com.sequenceiq.cloudbreak.util.ConditionBasedEvaluatorUtil.doIfTrue;\n+import static com.sequenceiq.cloudbreak.util.UuidUtil.uuidSupplier;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.cloudbreak.audit.model.ActorBase;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.ActorService;\n+import com.sequenceiq.cloudbreak.audit.model.ApiRequestData;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.audit.model.EventData;\n+import com.sequenceiq.cloudbreak.audit.model.ServiceEventData;\n+\n+@Component\n+public class AuditEventToGrpcAuditEventConverter {\n+\n+    public AuditProto.AuditEvent convert(AuditEvent source) {\n+        String id = Optional.ofNullable(source.getId()).orElseGet(uuidSupplier());\n+        String requestId = Optional.ofNullable(source.getRequestId()).orElseGet(uuidSupplier());\n+        AuditProto.AuditEvent.Builder auditEventBuilder = prepareBuilderForCreateAuditEvent(source, id, requestId);\n+        updateAuditEventActor(auditEventBuilder, source.getActor());\n+        updateAuditEventData(auditEventBuilder, source.getEventData());\n+        return auditEventBuilder.build();\n+    }\n+\n+    private AuditProto.AuditEvent.Builder prepareBuilderForCreateAuditEvent(AuditEvent source, String id, String requestId) {\n+        AuditProto.AuditEvent.Builder builder = AuditProto.AuditEvent.newBuilder()\n+                .setId(id)\n+                .setTimestamp(System.currentTimeMillis())\n+                .setAccountId(source.getAccountId())\n+                .setRequestId(requestId)\n+                .setEventName(source.getEventName())\n+                .setEventSource(source.getEventSource());\n+        doIfTrue(source.getSourceIp(), StringUtils::isNotEmpty, builder::setSourceIPAddress);\n+        return builder;\n+    }\n+\n+    private void updateAuditEventActor(AuditProto.AuditEvent.Builder auditEventBuilder, ActorBase actorBase) {\n+        if (actorBase instanceof ActorCrn) {\n+            ActorCrn actor = (ActorCrn) actorBase;\n+            auditEventBuilder.setActorCrn(actor.getActorCrn());\n+        } else if (actorBase instanceof ActorService) {\n+            ActorService actor = (ActorService) actorBase;\n+            auditEventBuilder.setActorServiceName(actor.getActorServiceName());\n+        } else {\n+            throw new IllegalArgumentException(\"Actor has an invalid class: \" + actorBase.getClass().getName());\n+        }\n+    }\n+\n+    private void updateAuditEventData(AuditProto.AuditEvent.Builder auditEventBuilder, EventData source) {", "originalCommit": "776e2004e35a7d85902aeb026be463fdcae43319", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}