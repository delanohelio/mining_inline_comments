{"pr_number": 7886, "pr_title": "CB-6347 Redbeams autosync for start/stop", "pr_createdAt": "2020-04-24T07:19:56Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7886", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MTAwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414441003", "bodyText": "You should call the unschedule at the beginning of the termination. As I see, the termination statuses are not the part of the getAutoSyncStatuses()", "author": "topolyai5", "createdAt": "2020-04-24T09:42:22Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/termination/action/RedbeamsTerminationActions.java", "diffHunk": "@@ -99,6 +103,8 @@ protected Selectable createRequest(RedbeamsContext context) {\n                 // through the termination\n                 metricService.incrementMetricCounter(MetricType.DB_TERMINATION_FINISHED, context.getDBStack());\n                 dbStackService.delete(context.getDBStack());\n+                dbStackJobService.unschedule(context.getDBStack());", "originalCommit": "70f0cf7a5233202c53de262ce52c6941b1ffa45c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NzMyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414447323", "bodyText": "if any error is occurring at External DB status lookup failed, you will get an NPE", "author": "topolyai5", "createdAt": "2020-04-24T09:52:31Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();", "originalCommit": "70f0cf7a5233202c53de262ce52c6941b1ffa45c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMDY0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414600645", "bodyText": "Good catch", "author": "pkedvessy", "createdAt": "2020-04-24T14:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NzMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414448647", "bodyText": "please use junit from jupiter package", "author": "topolyai5", "createdAt": "2020-04-24T09:54:35Z", "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.statuschecker.service.JobService;\n+import org.junit.Before;", "originalCommit": "70f0cf7a5233202c53de262ce52c6941b1ffa45c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5MTI1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414591254", "bodyText": "This module is using Junit 4", "author": "pkedvessy", "createdAt": "2020-04-24T13:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNjQzNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414636434", "bodyText": "I've checked and the jupiter api is added to the module", "author": "topolyai5", "createdAt": "2020-04-24T14:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMDg1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414800857", "bodyText": "Ahh, I see, this module contains a mixture of Junit 4 and 5 tests.", "author": "pkedvessy", "createdAt": "2020-04-24T19:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414451058", "bodyText": "is STARTED  means AVAILABLE? What is the difference between STARTED and AVAILABLE?", "author": "topolyai5", "createdAt": "2020-04-24T09:58:16Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "originalCommit": "70f0cf7a5233202c53de262ce52c6941b1ffa45c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5MjA5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414592092", "bodyText": "Yes, STARTED means AVAILABLE but in a different context. As far as I can see AVAILABLE is used by legacy reasons.", "author": "pkedvessy", "createdAt": "2020-04-24T13:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNzU2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414637568", "bodyText": "if in STARTED state, the ui show the db as available?", "author": "topolyai5", "createdAt": "2020-04-24T14:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MTIyNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414861224", "bodyText": "Where do we display the status on the UI?\nAnyway, the status in the DB is AVAILABLE both after start and create, but after start the detaileddbstackstatus is STARTED.", "author": "pkedvessy", "createdAt": "2020-04-24T21:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5MzI0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r415593245", "bodyText": "Oh, I see.", "author": "topolyai5", "createdAt": "2020-04-27T07:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}], "type": "inlineReview"}, {"oid": "49f229b05b86f11c93cb4faa33ed01c71fb9e00b", "url": "https://github.com/hortonworks/cloudbreak/commit/49f229b05b86f11c93cb4faa33ed01c71fb9e00b", "message": "CB-6347 Redbeams autosync for start/stop", "committedDate": "2020-04-24T14:04:04Z", "type": "forcePushed"}, {"oid": "eb17102c2e9069a1d53cd66b5971a2160ae51af9", "url": "https://github.com/hortonworks/cloudbreak/commit/eb17102c2e9069a1d53cd66b5971a2160ae51af9", "message": "CB-6347 Redbeams autosync for start/stop", "committedDate": "2020-04-24T19:13:00Z", "type": "forcePushed"}, {"oid": "8fb3ed3e8c376227e23f2356f549bf0e3af86797", "url": "https://github.com/hortonworks/cloudbreak/commit/8fb3ed3e8c376227e23f2356f549bf0e3af86797", "message": "CB-6347 Redbeams autosync for start/stop", "committedDate": "2020-04-24T21:07:52Z", "type": "commit"}, {"oid": "8fb3ed3e8c376227e23f2356f549bf0e3af86797", "url": "https://github.com/hortonworks/cloudbreak/commit/8fb3ed3e8c376227e23f2356f549bf0e3af86797", "message": "CB-6347 Redbeams autosync for start/stop", "committedDate": "2020-04-24T21:07:52Z", "type": "forcePushed"}]}