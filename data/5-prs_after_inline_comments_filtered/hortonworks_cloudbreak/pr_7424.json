{"pr_number": 7424, "pr_title": "CB-5067 Create external database for DistroX clusters", "pr_createdAt": "2020-02-28T13:57:40Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7424", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzM1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385713357", "bodyText": "is this a tottaly new class for datalake db ?", "author": "doktoric", "createdAt": "2020-02-28T14:07:11Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/ExternalDatabaseConfig.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.conf;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.util.FileReaderUtils;\n+\n+@Configuration\n+public class ExternalDatabaseConfig {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseConfig.class);\n+\n+    @Value(\"${datalake.supported.externaldb.platform:AWS}\")", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4NzU3OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386287578", "bodyText": "the value coordinate is a copy-paste mistake. changed to a more meaningful attribute.", "author": "bergerdenes", "createdAt": "2020-03-02T09:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzgxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385713816", "bodyText": "for cluster -> for Data Hub", "author": "doktoric", "createdAt": "2020-02-28T14:08:07Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.repository.cluster.ClusterRepository;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseOperation;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.PollingConfig;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.service.rdsconfig.RedbeamsClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.requests.AllocateDatabaseServerV4Request;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.responses.DatabaseServerV4Response;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+@Service\n+public class ExternalDatabaseService {\n+\n+    public static final int SLEEP_TIME_IN_SEC_FOR_DB_POLLING = 10;\n+\n+    public static final int DURATION_IN_MINUTES_FOR_DB_POLLING = 60;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseService.class);\n+\n+    private final RedbeamsClientService redbeamsClient;\n+\n+    private final ClusterRepository clusterRepository;\n+\n+    private final  Map<CloudPlatform, DatabaseStackConfig> dbConfigs;\n+\n+    private final Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap;\n+\n+    public ExternalDatabaseService(RedbeamsClientService redbeamsClient, ClusterRepository clusterRepository,\n+            Map<CloudPlatform, DatabaseStackConfig> dbConfigs, Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap) {\n+        this.redbeamsClient = redbeamsClient;\n+        this.clusterRepository = clusterRepository;\n+        this.dbConfigs = dbConfigs;\n+        this.databaseServerParameterSetterMap = databaseServerParameterSetterMap;\n+    }\n+\n+    public void provisionDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Create external {} database server in environment {} for cluster {}\", externalDatabase.name(), environment.getName(), cluster.getName());", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjkxOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386142918", "bodyText": "ok", "author": "bergerdenes", "createdAt": "2020-03-01T21:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzkzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385713931", "bodyText": "for Data Hub", "author": "doktoric", "createdAt": "2020-02-28T14:08:20Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/ExternalDatabaseService.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.dyngr.Polling;\n+import com.dyngr.core.AttemptResults;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryStateStore;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.domain.stack.cluster.Cluster;\n+import com.sequenceiq.cloudbreak.repository.cluster.ClusterRepository;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseOperation;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.DatabaseServerParameterSetter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.PollingConfig;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseStackConfig;\n+import com.sequenceiq.cloudbreak.service.rdsconfig.RedbeamsClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.requests.AllocateDatabaseServerV4Request;\n+import com.sequenceiq.redbeams.api.endpoint.v4.databaseserver.responses.DatabaseServerV4Response;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+@Service\n+public class ExternalDatabaseService {\n+\n+    public static final int SLEEP_TIME_IN_SEC_FOR_DB_POLLING = 10;\n+\n+    public static final int DURATION_IN_MINUTES_FOR_DB_POLLING = 60;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalDatabaseService.class);\n+\n+    private final RedbeamsClientService redbeamsClient;\n+\n+    private final ClusterRepository clusterRepository;\n+\n+    private final  Map<CloudPlatform, DatabaseStackConfig> dbConfigs;\n+\n+    private final Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap;\n+\n+    public ExternalDatabaseService(RedbeamsClientService redbeamsClient, ClusterRepository clusterRepository,\n+            Map<CloudPlatform, DatabaseStackConfig> dbConfigs, Map<CloudPlatform, DatabaseServerParameterSetter> databaseServerParameterSetterMap) {\n+        this.redbeamsClient = redbeamsClient;\n+        this.clusterRepository = clusterRepository;\n+        this.dbConfigs = dbConfigs;\n+        this.databaseServerParameterSetterMap = databaseServerParameterSetterMap;\n+    }\n+\n+    public void provisionDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment) {\n+        LOGGER.info(\"Create external {} database server in environment {} for cluster {}\", externalDatabase.name(), environment.getName(), cluster.getName());\n+        AllocateDatabaseServerV4Request request = getDatabaseRequest(environment, externalDatabase);\n+        String databaseCrn;\n+        try {\n+            databaseCrn = redbeamsClient.create(request).getResourceCrn();\n+            updateClusterWithDatabaseServerCrn(cluster, databaseCrn);\n+        } catch (BadRequestException badRequestException) {\n+            LOGGER.error(\"Redbeams create request failed, bad request\", badRequestException);\n+            throw badRequestException;\n+        }\n+        waitAndGetDatabase(cluster, databaseCrn, DatabaseOperation.CREATION, true);\n+\n+    }\n+\n+    public void terminateDatabase(Cluster cluster, DatabaseAvailabilityType externalDatabase, DetailedEnvironmentResponse environment, boolean forced) {\n+        LOGGER.info(\"Terminate external {} database server in environment {} for cluster {}\",", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjkzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386142930", "bodyText": "ok", "author": "bergerdenes", "createdAt": "2020-03-01T21:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxMzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDEwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385744103", "bodyText": "?", "author": "doktoric", "createdAt": "2020-02-28T15:03:26Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/ExternalDatabaseCreationActions.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.statemachine.StateContext;\n+import org.springframework.statemachine.action.Action;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.ExternalDatabaseContext;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.action.AbstractExternalDatabaseCreationAction;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationState;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.provision.StackCreationEvent;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.StackEvent;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseResult;\n+import com.sequenceiq.cloudbreak.service.metrics.MetricType;\n+import com.sequenceiq.flow.core.Flow;\n+import com.sequenceiq.flow.core.FlowParameters;\n+\n+@Configuration\n+public class ExternalDatabaseCreationActions {\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Bean(name = \"WAIT_FOR_EXTERNAL_DATABASE_STATE\")\n+    public Action<?, ?> externalDatabaseCreation() {\n+        return new AbstractExternalDatabaseCreationAction<>(StackEvent.class) {\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, StackEvent payload, Map<Object, Object> variables) {\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ExternalDatabaseContext context) {\n+                Stack stack = context.getStack();\n+                return new CreateExternalDatabaseRequest(stack.getId(), \"CreateExternalDatabaseRequest\", stack.getName(), stack.getResourceCrn(), stack);\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXTERNAL_DATABASE_CREATION_FINISHED_STATE\")\n+    public Action<?, ?> externalDatabaseCreationFinishedAction() {\n+        return new AbstractExternalDatabaseCreationAction<>(CreateExternalDatabaseResult.class) {\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, CreateExternalDatabaseResult payload, Map<Object, Object> variables) {\n+                getMetricService().incrementMetricCounter(MetricType.EXTERNAL_DATABASE_CREATION_SUCCESSFUL, context.getStack());\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(ExternalDatabaseContext context) {\n+                return new StackEvent(ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_CREATION_FINISHED_EVENT.event(), context.getStack().getId());\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"EXTERNAL_DATABASE_CREATION_FAILED_STATE\")\n+    public Action<?, ?> externalDatabaseCreationFailureAction() {\n+        return new AbstractExternalDatabaseCreationAction<>(CreateExternalDatabaseFailed.class) {\n+\n+            @Override\n+            protected void doExecute(ExternalDatabaseContext context, CreateExternalDatabaseFailed payload, Map<Object, Object> variables) {\n+//                stackCreationService.handleStackCreationFailure(context.getStack(), payload.getException());", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTg1Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386415856", "bodyText": "removed", "author": "bergerdenes", "createdAt": "2020-03-02T14:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385744611", "bodyText": "some log would be nice here", "author": "doktoric", "createdAt": "2020-02-28T15:04:17Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/externaldatabase/provision/handler/CreateExternalDatabaseHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.handler;\n+\n+import static com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_CREATION_FAILED_EVENT;\n+import static com.sequenceiq.cloudbreak.core.flow2.externaldatabase.provision.config.ExternalDatabaseCreationEvent.EXTERNAL_DATABASE_WAIT_SUCCESS_EVENT;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.dyngr.exception.PollerException;\n+import com.dyngr.exception.PollerStoppedException;\n+import com.dyngr.exception.UserBreakException;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.event.Selectable;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.StackUpdaterService;\n+import com.sequenceiq.cloudbreak.core.flow2.externaldatabase.ExternalDatabaseService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseFailed;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseRequest;\n+import com.sequenceiq.cloudbreak.reactor.api.event.externaldatabase.CreateExternalDatabaseResult;\n+import com.sequenceiq.cloudbreak.service.environment.EnvironmentClientService;\n+import com.sequenceiq.environment.api.v1.environment.model.response.DetailedEnvironmentResponse;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CreateExternalDatabaseHandler implements EventHandler<CreateExternalDatabaseRequest> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CreateExternalDatabaseHandler.class);\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private ExternalDatabaseService provisionService;\n+\n+    @Inject\n+    private StackUpdaterService stackUpdaterService;\n+\n+    @Inject\n+    private EnvironmentClientService environmentClientService;\n+\n+    @Override\n+    public String selector() {\n+        return \"CreateExternalDatabaseRequest\";\n+    }\n+\n+    @Override\n+    public void accept(Event<CreateExternalDatabaseRequest> createExternalDatabaseRequest) {\n+        LOGGER.debug(\"In CreateExternalDatabaseHandler.accept\");\n+        CreateExternalDatabaseRequest request = createExternalDatabaseRequest.getData();\n+        Stack stack = request.getStack();\n+        DatabaseAvailabilityType externalDatabase = ObjectUtils.defaultIfNull(stack.getExternalDatabase(), DatabaseAvailabilityType.NONE);\n+        Selectable result;\n+        try {\n+            if (externalDatabase == DatabaseAvailabilityType.NONE) {\n+                LOGGER.info(\"External database for stack {} is not requested.\", stack.getName());\n+                result = new CreateExternalDatabaseResult(stack.getId(), EXTERNAL_DATABASE_WAIT_SUCCESS_EVENT.event(), stack.getName(), null);\n+            } else {\n+                stackUpdaterService.updateStatus(stack.getId(), DetailedStackStatus.EXTERNAL_DATABASE_CREATION_IN_PROGRESS,\n+                        ResourceEvent.CLUSTER_EXTERNAL_DATABASE_CREATION_STARTED, \"External database creation in progress\");", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwODUxMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386308512", "bodyText": "logging added here and to terminate handler as well", "author": "bergerdenes", "createdAt": "2020-03-02T10:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTYwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385745605", "bodyText": "do we really want to remove this ?", "author": "doktoric", "createdAt": "2020-02-28T15:06:05Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/cluster/flow/ClusterTerminationService.java", "diffHunk": "@@ -146,7 +146,6 @@ public void finalizeClusterTermination(Long clusterId, boolean force) throws Tra\n             deleteFileSystemResources(stackId, fs, force);\n         }\n         cluster.setBlueprint(null);\n-        cluster.setStack(null);", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTg1Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385745853", "bodyText": "yes", "author": "bergerdenes", "createdAt": "2020-02-28T15:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjMwNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385746306", "bodyText": "I think the same is used in sdx app so we should expose these classes into a common modul. What do you think ?", "author": "doktoric", "createdAt": "2020-02-28T15:07:21Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.azure.AzureDatabaseServerV4Parameters;\n+\n+@Component\n+public class AzureDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.azure.externaldatabase.retentionperiod:7}\")", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjYwNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385746606", "bodyText": "Database", "author": "doktoric", "createdAt": "2020-02-28T15:07:57Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "diffHunk": "@@ -28,4 +31,24 @@ public DatabaseServerV4Response getByCrn(String dbCrn) {\n             throw new CloudbreakServiceException(message, e);\n         }\n     }\n+\n+    public DatabaseServerStatusV4Response create(AllocateDatabaseServerV4Request request) {\n+        try {\n+            return redbeamsServerEndpoint.create(request);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to create DatabseServer %s\", request.getName());\n+            LOGGER.error(message, e);\n+            throw new CloudbreakServiceException(message, e);\n+        }\n+    }\n+\n+    public DatabaseServerV4Response deleteByCrn(String crn, boolean force) {\n+        try {\n+            return redbeamsServerEndpoint.deleteByCrn(crn, force);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to delete DatabseServer with CRN %s\", crn);", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzA4Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386143083", "bodyText": "ok", "author": "bergerdenes", "createdAt": "2020-03-01T21:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjY3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r385746671", "bodyText": "Database", "author": "doktoric", "createdAt": "2020-02-28T15:08:05Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/rdsconfig/RedbeamsClientService.java", "diffHunk": "@@ -28,4 +31,24 @@ public DatabaseServerV4Response getByCrn(String dbCrn) {\n             throw new CloudbreakServiceException(message, e);\n         }\n     }\n+\n+    public DatabaseServerStatusV4Response create(AllocateDatabaseServerV4Request request) {\n+        try {\n+            return redbeamsServerEndpoint.create(request);\n+        } catch (WebApplicationException | ProcessingException e) {\n+            String message = String.format(\"Failed to create DatabseServer %s\", request.getName());", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzA4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386143087", "bodyText": "ok", "author": "bergerdenes", "createdAt": "2020-03-01T21:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NjY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDg2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386334867", "bodyText": "DatabaseServerParameter serverParameter parameter is not used. Are you sure this is the right method signature?", "author": "attilapalfi92", "createdAt": "2020-03-02T11:19:18Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AzureDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.azure.AzureDatabaseServerV4Parameters;\n+\n+@Component\n+public class AzureDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.azure.externaldatabase.retentionperiod:7}\")\n+    private int retentionPeriod;\n+\n+    @Value(\"${cb.azure.externaldatabase.geoRedundantBackup:true}\")\n+    private Boolean geoRedundantBackup;\n+\n+    @Override\n+    public void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter) {", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODI2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386418266", "bodyText": "Azure has no specifics yet. AWS has. Still, this also has to go into a unified child class.", "author": "bergerdenes", "createdAt": "2020-03-02T14:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDk1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386334958", "bodyText": "DatabaseServerParameter serverParameter parameter is not used. Are you sure this is the right method signature?", "author": "attilapalfi92", "createdAt": "2020-03-02T11:19:29Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/AwsDatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.aws.AwsDatabaseServerV4Parameters;\n+\n+@Component\n+public class AwsDatabaseServerParameterSetter implements DatabaseServerParameterSetter {\n+\n+    @Value(\"${cb.aws.externaldatabase.retentionperiod:1}\")\n+    private int retentionPeriod;\n+\n+    @Value(\"${cb.aws.externaldatabase.engineversion:10.6}\")\n+    private String engineVersion;\n+\n+    @Override\n+    public void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter) {", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODcwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386418702", "bodyText": "it is used here.", "author": "bergerdenes", "createdAt": "2020-03-02T14:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTMyNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386335325", "bodyText": "Could be named DatabaseServerParameterDecorator. Setter name is used for setter method, looks weird as class name,", "author": "attilapalfi92", "createdAt": "2020-03-02T11:20:28Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+public interface DatabaseServerParameterSetter {", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTI0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386419246", "bodyText": "fine. renamed.", "author": "bergerdenes", "createdAt": "2020-03-02T14:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTMyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTU5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386335596", "bodyText": "DatabaseServerParameter serverParameter Where is it used?", "author": "attilapalfi92", "createdAt": "2020-03-02T11:21:02Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/externaldatabase/DatabaseServerParameterSetter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.service.externaldatabase;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.service.externaldatabase.model.DatabaseServerParameter;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.DatabaseServerV4StackRequest;\n+\n+public interface DatabaseServerParameterSetter {\n+    void setParameters(DatabaseServerV4StackRequest request, DatabaseServerParameter serverParameter);", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTU2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386419566", "bodyText": "currently in AWS", "author": "bergerdenes", "createdAt": "2020-03-02T14:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNTU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzODQxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386338419", "bodyText": "We are moving away from using Spring's conversions service, because its very hard to debug and follow through the code. Can you please implement it without extending AbstractConversionServiceAwareConverter?", "author": "attilapalfi92", "createdAt": "2020-03-02T11:27:28Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/converter/v4/stacks/database/DatabaseAvailabilityTypeToDatabaseResponseConverter.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.sequenceiq.cloudbreak.converter.v4.stacks.database;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.database.DatabaseResponse;\n+import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+\n+@Component\n+public class DatabaseAvailabilityTypeToDatabaseResponseConverter  extends AbstractConversionServiceAwareConverter<DatabaseAvailabilityType, DatabaseResponse> {", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMTg2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386431862", "bodyText": "not now.", "author": "bergerdenes", "createdAt": "2020-03-02T14:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzODQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTIzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386339237", "bodyText": "Is this added to the parallel flows too?", "author": "attilapalfi92", "createdAt": "2020-03-02T11:29:15Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/CloudbreakFlowInformation.java", "diffHunk": "@@ -73,7 +74,7 @@\n \n     @Override\n     public List<Class<? extends FlowConfiguration<?>>> getTerminationFlow() {\n-        return Arrays.asList(StackTerminationFlowConfig.class, ClusterTerminationFlowConfig.class);\n+        return Arrays.asList(StackTerminationFlowConfig.class, ClusterTerminationFlowConfig.class, ExternalDatabaseTerminationFlowConfig.class);", "originalCommit": "2d2dbf88df51d4eb753a45458518167ce02595ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyOTU5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7424#discussion_r386429599", "bodyText": "added now", "author": "bergerdenes", "createdAt": "2020-03-02T14:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTIzNw=="}], "type": "inlineReview"}, {"oid": "5eb235faf28584b84c9204e85ba2f9427ffa8776", "url": "https://github.com/hortonworks/cloudbreak/commit/5eb235faf28584b84c9204e85ba2f9427ffa8776", "message": "CB-5067 Create external database for DistroX clusters", "committedDate": "2020-03-02T16:01:55Z", "type": "forcePushed"}, {"oid": "c107b0181e814e00fb061300a3fe2e2f07126c9b", "url": "https://github.com/hortonworks/cloudbreak/commit/c107b0181e814e00fb061300a3fe2e2f07126c9b", "message": "CB-5067 Create external database for DistroX clusters", "committedDate": "2020-03-03T08:51:50Z", "type": "commit"}, {"oid": "c107b0181e814e00fb061300a3fe2e2f07126c9b", "url": "https://github.com/hortonworks/cloudbreak/commit/c107b0181e814e00fb061300a3fe2e2f07126c9b", "message": "CB-5067 Create external database for DistroX clusters", "committedDate": "2020-03-03T08:51:50Z", "type": "forcePushed"}]}