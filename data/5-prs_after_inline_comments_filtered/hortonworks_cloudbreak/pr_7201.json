{"pr_number": 7201, "pr_title": "CB-5114 Edit SSH key in environment", "pr_createdAt": "2020-02-03T16:44:11Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7201", "timeline": [{"oid": "d069f2b6177ce007b306b88d27f99275e141591f", "url": "https://github.com/hortonworks/cloudbreak/commit/d069f2b6177ce007b306b88d27f99275e141591f", "message": "CB-5114 Edit SSH key in environment", "committedDate": "2020-02-04T07:26:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDE1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374550151", "bodyText": "if the credential is access + secretkey then what happens?", "author": "doktoric", "createdAt": "2020-02-04T09:12:39Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPublicKeyConnector.java", "diffHunk": "@@ -64,6 +62,21 @@ public void unregister(PublicKeyUnregisterRequest request) {\n         }\n     }\n \n+    @Override\n+    public boolean exists(PublicKeyDescribeRequest request) {\n+        LOGGER.debug(\"Describe public key {} in {} region on AWS\", request.getPublicKeyId(), request.getRegion());\n+        AwsCredentialView awsCredential = new AwsCredentialView(request.getCredential());\n+        try {\n+            AmazonEC2Client client = awsClient.createAccess(awsCredential, request.getRegion());\n+            return exists(client, request.getPublicKeyId());\n+        } catch (Exception e) {\n+            String errorMessage = String.format(\"Failed to describe public key [roleArn:'%s', region: '%s'], detailed message: %s\",\n+                    awsCredential.getRoleArn(), request.getRegion(), e.getMessage());", "originalCommit": "d069f2b6177ce007b306b88d27f99275e141591f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTg3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374551879", "bodyText": "how about if we ccreate a method in environement and then calling like environment.isEnvironmentMAnagedKEy() ?", "author": "doktoric", "createdAt": "2020-02-04T09:16:23Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -135,10 +140,28 @@ private void editDescriptionIfChanged(Environment environment, EnvironmentEditDt\n         }\n     }\n \n-    private void editAuthenticationIfChanged(EnvironmentEditDto editDto, Environment environment) {\n+    @VisibleForTesting\n+    void editAuthenticationIfChanged(EnvironmentEditDto editDto, Environment environment) {\n         AuthenticationDto authenticationDto = editDto.getAuthentication();\n         if (authenticationDto != null) {\n+            EnvironmentValidatorService validatorService = environmentService.getValidatorService();\n+            ValidationResult validationResult = validatorService.validateAuthenticationModification(editDto, environment);\n+            if (validationResult.hasError()) {\n+                throw new BadRequestException(validationResult.getFormattedErrors());\n+            }\n+            String oldSshKeyIdForDeletion = null;\n+            String oldSshKeyId = environment.getAuthentication().getPublicKeyId();\n+            if (environment.getAuthentication().isManagedKey()) {", "originalCommit": "d069f2b6177ce007b306b88d27f99275e141591f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NTA0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374675043", "bodyText": "the method name does not describe well the functionality.", "author": "topolyai5", "createdAt": "2020-02-04T13:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MjU0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374552541", "bodyText": "can we somehow do this more dynamic so the the cloudconnector giving us this info ?", "author": "doktoric", "createdAt": "2020-02-04T09:17:52Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/EnvironmentValidatorService.java", "diffHunk": "@@ -113,6 +118,28 @@ public ValidationResult validateSecurityGroups(EnvironmentEditDto editDto, Envir\n \n     }\n \n+    public ValidationResult validateAuthenticationModification(EnvironmentEditDto editDto, Environment environment) {\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = ValidationResult.builder();\n+\n+        AuthenticationDto authenticationDto = editDto.getAuthentication();\n+        String publicKeyId = authenticationDto.getPublicKeyId();\n+        if (!environment.getCloudPlatform().equals(CloudPlatform.AWS.name()) && StringUtils.isNotEmpty(publicKeyId)) {", "originalCommit": "d069f2b6177ce007b306b88d27f99275e141591f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1Mjc4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7201#discussion_r374552789", "bodyText": "I think it should reference for the json name", "author": "doktoric", "createdAt": "2020-02-04T09:18:21Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/EnvironmentValidatorService.java", "diffHunk": "@@ -113,6 +118,28 @@ public ValidationResult validateSecurityGroups(EnvironmentEditDto editDto, Envir\n \n     }\n \n+    public ValidationResult validateAuthenticationModification(EnvironmentEditDto editDto, Environment environment) {\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = ValidationResult.builder();\n+\n+        AuthenticationDto authenticationDto = editDto.getAuthentication();\n+        String publicKeyId = authenticationDto.getPublicKeyId();\n+        if (!environment.getCloudPlatform().equals(CloudPlatform.AWS.name()) && StringUtils.isNotEmpty(publicKeyId)) {\n+            validationResultBuilder.error(\"The change of public key id is not supported on \" + environment.getCloudPlatform());\n+        } else {\n+            String publicKey = authenticationDto.getPublicKey();\n+            if (StringUtils.isNotEmpty(publicKeyId) && StringUtils.isNotEmpty(publicKey)) {\n+                validationResultBuilder.error(\"You should define either public-key or public-key-id only\");\n+            }\n+            if (StringUtils.isEmpty(publicKeyId) && StringUtils.isEmpty(publicKey)) {\n+                validationResultBuilder.error(\"You should define public-key or public-key-id\");", "originalCommit": "d069f2b6177ce007b306b88d27f99275e141591f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c2037318c5bc40fd25638de09df367a0b8c0cb9", "url": "https://github.com/hortonworks/cloudbreak/commit/2c2037318c5bc40fd25638de09df367a0b8c0cb9", "message": "CB-5114 Edit SSH key in environment", "committedDate": "2020-02-04T13:39:06Z", "type": "commit"}, {"oid": "2c2037318c5bc40fd25638de09df367a0b8c0cb9", "url": "https://github.com/hortonworks/cloudbreak/commit/2c2037318c5bc40fd25638de09df367a0b8c0cb9", "message": "CB-5114 Edit SSH key in environment", "committedDate": "2020-02-04T13:39:06Z", "type": "forcePushed"}]}