{"pr_number": 9071, "pr_title": "CB-8947-filter-structured-event", "pr_createdAt": "2020-09-23T13:53:50Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9071", "timeline": [{"oid": "15953f8f24dd36adb5ffe10ab33989b55db7b396", "url": "https://github.com/hortonworks/cloudbreak/commit/15953f8f24dd36adb5ffe10ab33989b55db7b396", "message": "asd", "committedDate": "2020-09-23T14:19:38Z", "type": "forcePushed"}, {"oid": "4988b0e4426e6b483569a540f381708f5792278a", "url": "https://github.com/hortonworks/cloudbreak/commit/4988b0e4426e6b483569a540f381708f5792278a", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredNotificationDetails.", "committedDate": "2020-09-23T14:40:12Z", "type": "forcePushed"}, {"oid": "d19552b675b55f314a920055921b5f4f77b0874f", "url": "https://github.com/hortonworks/cloudbreak/commit/d19552b675b55f314a920055921b5f4f77b0874f", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent.", "committedDate": "2020-09-24T07:06:20Z", "type": "forcePushed"}, {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "url": "https://github.com/hortonworks/cloudbreak/commit/7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent.", "committedDate": "2020-09-24T08:02:35Z", "type": "commit"}, {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "url": "https://github.com/hortonworks/cloudbreak/commit/7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent.", "committedDate": "2020-09-24T08:02:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjc1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#discussion_r494206754", "bodyText": "Shouldn't we do something if the eventypes is not empty??", "author": "biharitomi", "createdAt": "2020-09-24T10:28:24Z", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/db/CDPStructuredEventDBService.java", "diffHunk": "@@ -68,43 +69,43 @@ protected void prepareCreation(CDPStructuredEventEntity resource) {\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn, Pageable pageable) {\n+        LOGGER.debug(\"Gathering pageable events for types: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn, pageable);\n+            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn, pageable);\n             return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get pageable events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> List<T> getEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn) {\n+        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(eventType, resourceCrn, pageable);\n-            return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n-        } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n-            LOGGER.warn(msg, ex);\n-            throw new CloudbreakServiceException(msg, ex);\n-        }\n-    }\n-\n-    @Override\n-    public <T extends CDPStructuredEvent> List<T> getNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn) {\n-        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n-        try {\n-            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn);\n+            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn);\n             return (List<T>) Optional.ofNullable(events).orElse(new ArrayList<>()).stream()\n                     .map(event -> conversionService.convert(event, CDPStructuredEvent.class))\n                     .collect(Collectors.toList());\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n+\n+    private List<StructuredEventType> getAllEventTypeIfEmpty(List<StructuredEventType> eventTypes) {\n+        List<StructuredEventType> types = new ArrayList<>(eventTypes);\n+        if (CollectionUtils.isEmpty(eventTypes)) {\n+            LOGGER.info(\"We need to add all structured event types to the filter\");\n+            types.add(StructuredEventType.NOTIFICATION);\n+            types.add(StructuredEventType.REST);\n+            types.add(StructuredEventType.FLOW);\n+        }", "originalCommit": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwOTk0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#discussion_r494209946", "bodyText": "Yes, we do. We return with the original list", "author": "topolyai5", "createdAt": "2020-09-24T10:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjc1NA=="}], "type": "inlineReview"}]}