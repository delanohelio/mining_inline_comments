{"pr_number": 8763, "pr_title": "CB-8308 [azure] image storage account public access should be false", "pr_createdAt": "2020-08-10T07:19:55Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8763", "timeline": [{"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "url": "https://github.com/hortonworks/cloudbreak/commit/afc24a4e8f5a4ec2486dd0090862f8859545a911", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access.", "committedDate": "2020-08-10T07:42:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0MjkzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468342937", "bodyText": "Can you please extract this condition into a private method?", "author": "tiborpopovics", "createdAt": "2020-08-11T05:56:19Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.connector.resource;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.resources.Deployment;\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorageAccountTemplateBuilder;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+\n+@Service\n+public class AzureStorageAccountBuilderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountBuilderService.class);\n+\n+    @Inject\n+    private AzureStorageAccountTemplateBuilder azureStorageAccountTemplateBuilder;\n+\n+    public void buildStorageAccount(AzureClient client, StorageAccountParameters storageAccountParameters) {\n+\n+        try {\n+            String template = azureStorageAccountTemplateBuilder.build(storageAccountParameters);\n+            if (!client.templateDeploymentExists(storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName())) {", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0MzQ0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468343443", "bodyText": "Please write a unit test for this class.", "author": "tiborpopovics", "createdAt": "2020-08-11T05:57:49Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTEzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468421132", "bodyText": "please double check if this parameter is required in redbeams' application.yml", "author": "bergerdenes", "createdAt": "2020-08-11T08:41:58Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzMTEzNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468431135", "bodyText": "The storage account is created for holding the images of VMs and is used in case of freeipa and core (datalake / distrox) services. Redbeams does not create VMs so I have not added this parameter there.", "author": "gergopapi2", "createdAt": "2020-08-11T08:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTk4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468421988", "bodyText": "typo", "author": "bergerdenes", "createdAt": "2020-08-11T08:43:19Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMzUyMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468423522", "bodyText": "is this method necessary? could be inlined into the public getTemplate()", "author": "bergerdenes", "createdAt": "2020-08-11T08:45:50Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);\n+            return generatedTemplate;\n+        } catch (IOException | TemplateException e) {\n+            throw new CloudConnectorException(\"Failed to process the storage account ARM Template\", e);\n+        }\n+    }\n+\n+    public Template getTemplate() {\n+        try {\n+            return new Template(armStorageAccountTemplatePath, getArmTemplate().toString(), freemarkerConfiguration);\n+        } catch (IOException e) {\n+            throw new CloudConnectorException(\"Couldn't create template object\", e);\n+        }\n+    }\n+\n+    private Template getArmTemplate() {", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2NTQwNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468465407", "bodyText": "this could be private", "author": "pdarvasi", "createdAt": "2020-08-11T09:58:16Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);\n+            return generatedTemplate;\n+        } catch (IOException | TemplateException e) {\n+            throw new CloudConnectorException(\"Failed to process the storage account ARM Template\", e);\n+        }\n+    }\n+\n+    public Template getTemplate() {", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MjM3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468472370", "bodyText": "We should use the same mechanism as the other occurrences, e.g: https://github.com/hortonworks/cloudbreak/blob/master/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/upscale/AzureUpscaleService.java#L92-L102", "author": "pdarvasi", "createdAt": "2020-08-11T10:11:38Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.connector.resource;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.resources.Deployment;\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorageAccountTemplateBuilder;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+\n+@Service\n+public class AzureStorageAccountBuilderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountBuilderService.class);\n+\n+    @Inject\n+    private AzureStorageAccountTemplateBuilder azureStorageAccountTemplateBuilder;\n+\n+    public void buildStorageAccount(AzureClient client, StorageAccountParameters storageAccountParameters) {\n+\n+        try {\n+            String template = azureStorageAccountTemplateBuilder.build(storageAccountParameters);\n+            if (!client.templateDeploymentExists(storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName())) {\n+                String parameters = new Json(Map.of()).getValue();\n+                Deployment templateDeployment = client.createTemplateDeployment(\n+                        storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName(), template, parameters);\n+                LOGGER.debug(\"Created template deployment for storage account: {}\", templateDeployment.exportTemplate().template());\n+            }\n+        } catch (Exception e) {", "originalCommit": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1ef115ac2e12464eef2a9a466da05335104d0beb", "url": "https://github.com/hortonworks/cloudbreak/commit/1ef115ac2e12464eef2a9a466da05335104d0beb", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access.", "committedDate": "2020-08-11T14:05:58Z", "type": "forcePushed"}, {"oid": "12eea3d7613e6351713a6c6c03e70b5a68b16e09", "url": "https://github.com/hortonworks/cloudbreak/commit/12eea3d7613e6351713a6c6c03e70b5a68b16e09", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access.", "committedDate": "2020-08-11T14:41:08Z", "type": "forcePushed"}, {"oid": "fd18f276c3c952a64e9f1955266b53cef949f367", "url": "https://github.com/hortonworks/cloudbreak/commit/fd18f276c3c952a64e9f1955266b53cef949f367", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access.", "committedDate": "2020-08-12T05:28:50Z", "type": "commit"}, {"oid": "fd18f276c3c952a64e9f1955266b53cef949f367", "url": "https://github.com/hortonworks/cloudbreak/commit/fd18f276c3c952a64e9f1955266b53cef949f367", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access.", "committedDate": "2020-08-12T05:28:50Z", "type": "forcePushed"}]}