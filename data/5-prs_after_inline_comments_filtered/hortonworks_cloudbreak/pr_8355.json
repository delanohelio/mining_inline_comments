{"pr_number": 8355, "pr_title": "CB-7538 Create a mock audit server", "pr_createdAt": "2020-06-22T11:44:58Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8355", "timeline": [{"oid": "60234d22c74526aee3474d4bad1ba96075a14517", "url": "https://github.com/hortonworks/cloudbreak/commit/60234d22c74526aee3474d4bad1ba96075a14517", "message": "CB-7538 rename mock-caas to mock-thunderhead", "committedDate": "2020-06-22T13:38:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NDY1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8355#discussion_r443584657", "bodyText": "might worth getting the latest audit.proto from thunderhead repo and update client here\nalso, integrate the latest audit service docker image build into cbd.", "author": "bergerdenes", "createdAt": "2020-06-22T14:08:35Z", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/AuditClient.java", "diffHunk": "@@ -151,4 +154,19 @@ private AuditBlockingStub newStub(ManagedChannel channel, String requestId, Stri\n         return AuditGrpc.newBlockingStub(channel)\n                 .withInterceptors(new AltusMetadataInterceptor(requestId, actorCrn));\n     }\n+\n+    public void listEvents(ListAuditEvent listAuditEvent) {", "originalCommit": "60234d22c74526aee3474d4bad1ba96075a14517", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5MjIzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8355#discussion_r443592237", "bodyText": "Can you create a jira ticket for the upgrade?", "author": "topolyai5", "createdAt": "2020-06-22T14:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NDY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4NzA4Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8355#discussion_r443587082", "bodyText": "please reorder params", "author": "bergerdenes", "createdAt": "2020-06-22T14:12:01Z", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/converter/auditeventname/rest/RestCommonService.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.sequenceiq.cloudbreak.audit.converter.auditeventname.rest;\n+\n+import static com.sequenceiq.cloudbreak.audit.converter.EventDataExtractor.CLUSTER_CRN;\n+import static com.sequenceiq.cloudbreak.audit.converter.EventDataExtractor.CLUSTER_NAME;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestRequestDetails;\n+\n+@Component\n+public class RestCommonService {\n+\n+    public void addClusterCrnAndNameIfPresent(StructuredRestCallEvent structuredEvent, Map<String, Object> params) {\n+        String resourceCrn = structuredEvent.getOperation().getResourceCrn();\n+        RestRequestDetails restRequest = structuredEvent.getRestCall().getRestRequest();\n+        Json requestJson = new Json(restRequest.getBody());\n+        if (StringUtils.isEmpty(resourceCrn)) {\n+            resourceCrn = getValueFromJson(requestJson, \"resourceCrn\");\n+        }\n+        String name = null;\n+\n+        String responseBody = structuredEvent.getRestCall().getRestResponse().getBody();\n+        if (StringUtils.isNotEmpty(responseBody)) {\n+            Json responseJson = new Json(responseBody);\n+            if (StringUtils.isEmpty(resourceCrn)) {\n+                resourceCrn = getValueFromJson(responseJson, \"resourceCrn\");\n+            }\n+            name = getValueFromJson(responseJson, \"name\");\n+        }\n+\n+        if (StringUtils.isEmpty(name)) {\n+            name = getValueFromJson(requestJson, \"name\");\n+        }\n+\n+        if (StringUtils.isEmpty(name)) {\n+            String method = restRequest.getMethod();\n+            if (\"DELETE\".equals(method)) {\n+                List<String> names = requestJson.getValue(\"names\");\n+                name = String.join(\",\", names);\n+            }\n+        }\n+\n+        checkNameOrCrnProvided(resourceCrn, restRequest, name);\n+\n+        if (StringUtils.isNotEmpty(name)) {\n+            params.put(CLUSTER_NAME, name);\n+        }\n+\n+        if (StringUtils.isNotEmpty(resourceCrn)) {\n+            params.put(CLUSTER_CRN, resourceCrn);\n+        }\n+    }\n+\n+    private String getValueFromJson(Json responseJson, String resourceCrn) {\n+        return responseJson.getValue(resourceCrn);\n+    }\n+\n+    private void checkNameOrCrnProvided(String resourceCrn, RestRequestDetails restRequest, String name) {", "originalCommit": "60234d22c74526aee3474d4bad1ba96075a14517", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5MTQxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8355#discussion_r443591411", "bodyText": "as above, it might worth refreshing the audit.proto file from thunderhead!", "author": "bergerdenes", "createdAt": "2020-06-22T14:17:59Z", "path": "mock-thunderhead/src/main/java/com/sequenceiq/caas/grpc/service/audit/MockAuditLogService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.caas.grpc.service.audit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.audit.AuditGrpc;\n+import com.cloudera.thunderhead.service.audit.AuditProto;\n+import com.sequenceiq.caas.service.AuditStoreService;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+@Component\n+public class MockAuditLogService extends AuditGrpc.AuditImplBase {\n+\n+    @Inject\n+    private AuditStoreService auditStoreService;\n+\n+    @Override\n+    public void createAttemptAuditEvent(AuditProto.CreateAttemptAuditEventRequest request,\n+            StreamObserver<AuditProto.CreateAttemptAuditEventResponse> responseObserver) {\n+        super.createAttemptAuditEvent(request, responseObserver);\n+    }\n+\n+    @Override\n+    public void createAuditEvent(AuditProto.CreateAuditEventRequest request, StreamObserver<AuditProto.CreateAuditEventResponse> responseObserver) {\n+        auditStoreService.store(request.getAuditEvent());\n+        responseObserver.onNext(AuditProto.CreateAuditEventResponse.newBuilder().build());\n+        responseObserver.onCompleted();\n+    }\n+\n+    @Override\n+    public void listEvents(AuditProto.ListEventsRequest request, StreamObserver<AuditProto.ListEventsResponse> responseObserver) {", "originalCommit": "60234d22c74526aee3474d4bad1ba96075a14517", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a813a9675a3244a76f909399b9dcb281f86bc6f7", "url": "https://github.com/hortonworks/cloudbreak/commit/a813a9675a3244a76f909399b9dcb281f86bc6f7", "message": "CB-7538 Create a mock audit server", "committedDate": "2020-06-23T06:08:00Z", "type": "forcePushed"}, {"oid": "4fb21cc44cc6987383ae8be15c70279bee65d7ea", "url": "https://github.com/hortonworks/cloudbreak/commit/4fb21cc44cc6987383ae8be15c70279bee65d7ea", "message": "CB-7538 Create a mock audit server", "committedDate": "2020-06-23T06:12:18Z", "type": "forcePushed"}, {"oid": "34ec63710ae55496fd39033d6a764387e0abeb11", "url": "https://github.com/hortonworks/cloudbreak/commit/34ec63710ae55496fd39033d6a764387e0abeb11", "message": "CB-7538 Create a mock audit server", "committedDate": "2020-06-23T06:55:25Z", "type": "commit"}, {"oid": "34ec63710ae55496fd39033d6a764387e0abeb11", "url": "https://github.com/hortonworks/cloudbreak/commit/34ec63710ae55496fd39033d6a764387e0abeb11", "message": "CB-7538 Create a mock audit server", "committedDate": "2020-06-23T06:55:25Z", "type": "forcePushed"}]}