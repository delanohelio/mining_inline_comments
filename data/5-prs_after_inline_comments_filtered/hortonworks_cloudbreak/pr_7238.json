{"pr_number": 7238, "pr_title": "CB-5465 RDS subnet selection should use limited number of subnets in an environment", "pr_createdAt": "2020-02-06T16:42:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7238", "timeline": [{"oid": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "url": "https://github.com/hortonworks/cloudbreak/commit/48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "message": "CB-5465 RDS subnet selection should use limited number of subnets in an environment", "committedDate": "2020-02-07T07:47:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5Mjc0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376392743", "bodyText": "I think this should be based on the AWS db deploy config. As I know currently we are using non multi AZ deployments in local mode so probably we dont need 2 subnet.", "author": "doktoric", "createdAt": "2020-02-07T13:36:51Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/AwsSubnetValidator.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+import java.util.Collection;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.redbeams.exception.BadRequestException;\n+\n+@Component\n+public class AwsSubnetValidator {\n+\n+    public void validate(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        validateEnoughSubnetIsPresent(cloudSubnets, minSubnetNeededInDifferentAz);\n+        validateAzNumber(cloudSubnets, minSubnetNeededInDifferentAz);\n+    }\n+\n+    private void validateAzNumber(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        long numAZs = cloudSubnets.stream().map(CloudSubnet::getAvailabilityZone).distinct().count();\n+        if (numAZs < minSubnetNeededInDifferentAz) {\n+            throw new BadRequestException(\"All subnets are in the same availability zone: at least two subnets in two different availability zones needed\");\n+        }\n+    }\n+\n+    private void validateEnoughSubnetIsPresent(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        if (cloudSubnets.size() < minSubnetNeededInDifferentAz) {", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMzAwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376403008", "bodyText": "we won't address it in this pr", "author": "lacikaaa", "createdAt": "2020-02-07T13:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5Mjc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MzE0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376393146", "bodyText": "Can you please validate that we choose 2 subnet in different az ?", "author": "doktoric", "createdAt": "2020-02-07T13:37:48Z", "path": "redbeams/src/test/java/com/sequenceiq/redbeams/service/network/AwsSubnetChooserTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AwsSubnetChooserTest {\n+\n+    private static final String AVAILABILITY_ZONE_A = \"AZ-a\";\n+\n+    private static final String AVAILABILITY_ZONE_B = \"AZ-b\";\n+\n+    private static final String AVAILABILITY_ZONE_C = \"AZ-c\";\n+\n+    private static final String SUBNET_1 = \"subnet-1\";\n+\n+    private static final String SUBNET_2 = \"subnet-2\";\n+\n+    private static final String SUBNET_3 = \"subnet-3\";\n+\n+    private static final String SUBNET_4 = \"subnet-4\";\n+\n+    @Mock\n+    private AwsSubnetValidator awsSubnetValidator;\n+\n+    @InjectMocks\n+    private AwsSubnetChooser underTest;\n+\n+    @Test\n+    public void testMultiplePrivateSubnetDifferentAz() {\n+        List<CloudSubnet> subnets = List.of(\n+                new CloudSubnet(SUBNET_1, \"\", AVAILABILITY_ZONE_A, \"\", true, false, false),\n+                new CloudSubnet(SUBNET_2, \"\", AVAILABILITY_ZONE_B, \"\", true, false, false),\n+                new CloudSubnet(SUBNET_3, \"\", AVAILABILITY_ZONE_B, \"\", true, false, false)\n+        );\n+\n+        List<CloudSubnet> chosenSubnets = underTest.chooseSubnets(subnets);\n+\n+        assertThat(chosenSubnets, hasSize(2));\n+        assertThat(chosenSubnets, hasItem(allOf(hasProperty(\"availabilityZone\", is(AVAILABILITY_ZONE_A)), hasProperty(\"id\", is(SUBNET_1)))));\n+        assertThat(chosenSubnets, hasItem(hasProperty(\"availabilityZone\", is(AVAILABILITY_ZONE_B))));\n+        verify(awsSubnetValidator).validate(subnets, 2);\n+    }\n+\n+    @Test\n+    public void testMultiplePrivateSubnetThreeDifferentAz() {\n+        List<CloudSubnet> subnets = List.of(\n+                new CloudSubnet(SUBNET_1, \"\", AVAILABILITY_ZONE_A, \"\", true, false, false),\n+                new CloudSubnet(SUBNET_2, \"\", AVAILABILITY_ZONE_B, \"\", true, false, false),\n+                new CloudSubnet(SUBNET_3, \"\", AVAILABILITY_ZONE_B, \"\", true, false, false),\n+                new CloudSubnet(SUBNET_4, \"\", AVAILABILITY_ZONE_C, \"\", true, false, false)\n+        );\n+\n+        List<CloudSubnet> chosenSubnets = underTest.chooseSubnets(subnets);\n+\n+        assertThat(chosenSubnets, hasSize(3));\n+        assertThat(chosenSubnets, hasItem(allOf(hasProperty(\"availabilityZone\", is(AVAILABILITY_ZONE_A)), hasProperty(\"id\", is(SUBNET_1)))));\n+        assertThat(chosenSubnets, hasItem(hasProperty(\"availabilityZone\", is(AVAILABILITY_ZONE_B))));\n+        assertThat(chosenSubnets, hasItem(allOf(hasProperty(\"availabilityZone\", is(AVAILABILITY_ZONE_C)), hasProperty(\"id\", is(SUBNET_4)))));\n+        verify(awsSubnetValidator).validate(subnets, 2);\n+    }\n+\n+    @Test\n+    public void testWithSixPrivateSubnetsFromSomeDifferentAz() {\n+        List<CloudSubnet> subnets = List.of(\n+                new CloudSubnet(\"subnet1\", \"\", \"us-west-2c\", \"\", true, false, false),\n+                new CloudSubnet(\"subnet2\", \"\", \"us-west-2c\", \"\", true, false, false),\n+                new CloudSubnet(\"subnet3\", \"\", \"us-west-2b\", \"\", true, false, false),\n+                new CloudSubnet(\"subnet4\", \"\", \"us-west-2a\", \"\", true, false, false),\n+                new CloudSubnet(\"subnet5\", \"\", \"us-west-2a\", \"\", true, false, false),\n+                new CloudSubnet(\"subnet6\", \"\", \"us-west-2b\", \"\", true, false, false)\n+        );\n+\n+        List<CloudSubnet> chosenSubnets = underTest.chooseSubnets(subnets);\n+\n+        assertThat(chosenSubnets, hasSize(3));\n+        assertThat(chosenSubnets, hasItem(hasProperty(\"availabilityZone\", is(\"us-west-2c\"))));\n+        assertThat(chosenSubnets, hasItem(hasProperty(\"availabilityZone\", is(\"us-west-2b\"))));\n+        assertThat(chosenSubnets, hasItem(hasProperty(\"availabilityZone\", is(\"us-west-2a\"))));\n+        verify(awsSubnetValidator).validate(subnets, 2);\n+    }\n+\n+    @Test\n+    public void testWithSixPublicSubnetsFromSomeDifferentAz() {\n+        List<CloudSubnet> subnets = List.of(\n+                new CloudSubnet(\"subnet1\", \"\", \"us-west-2c\", \"\", false, true, true),\n+                new CloudSubnet(\"subnet2\", \"\", \"us-west-2c\", \"\", false, true, true),\n+                new CloudSubnet(\"subnet3\", \"\", \"us-west-2b\", \"\", false, true, true),\n+                new CloudSubnet(\"subnet4\", \"\", \"us-west-2a\", \"\", false, true, true),\n+                new CloudSubnet(\"subnet5\", \"\", \"us-west-2a\", \"\", false, true, true),\n+                new CloudSubnet(\"subnet6\", \"\", \"us-west-2b\", \"\", false, true, true)\n+        );\n+\n+        List<CloudSubnet> chosenSubnets = underTest.chooseSubnets(subnets);\n+\n+        assertThat(chosenSubnets, hasSize(2));\n+        verify(awsSubnetValidator).validate(subnets, 2);", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNjUyNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r377116525", "bodyText": "fixed", "author": "lacikaaa", "createdAt": "2020-02-10T15:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MzE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5Mzc3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376393777", "bodyText": "I think it shoulf be great to check the error message as well.", "author": "doktoric", "createdAt": "2020-02-07T13:39:09Z", "path": "redbeams/src/test/java/com/sequenceiq/redbeams/service/network/AwsSubnetValidatorTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.redbeams.exception.BadRequestException;\n+\n+public class AwsSubnetValidatorTest {\n+\n+    private AwsSubnetValidator underTest = new AwsSubnetValidator();\n+\n+    private CloudSubnet cloudSubnet1 = new CloudSubnet(\"subnet1\", \"\", \"AZ1\", \"\");\n+\n+    private CloudSubnet cloudSubnet2 = new CloudSubnet(\"subnet2\", \"\", \"AZ1\", \"\");\n+\n+    private CloudSubnet cloudSubnet3 = new CloudSubnet(\"subnet3\", \"\", \"AZ2\", \"\");\n+\n+    @Test\n+    public void testOk() {\n+        underTest.validate(List.of(cloudSubnet1, cloudSubnet3), 2);\n+    }\n+\n+    @Test\n+    public void testOkWithMore() {\n+        underTest.validate(List.of(cloudSubnet1, cloudSubnet2, cloudSubnet3), 2);\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testNOkWithTooFewSubnet() {\n+        underTest.validate(List.of(cloudSubnet1), 2);\n+    }\n+\n+    @Test(expected = BadRequestException.class)\n+    public void testNOkWithTooFewAz() {\n+        underTest.validate(List.of(cloudSubnet1, cloudSubnet2), 2);", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNjYzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r377116630", "bodyText": "fixed", "author": "lacikaaa", "createdAt": "2020-02-10T15:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5Mzc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDIwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376394200", "bodyText": "this should be depend on the deployment config", "author": "doktoric", "createdAt": "2020-02-07T13:39:59Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/AwsSubnetChooser.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimaps;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class AwsSubnetChooser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AwsSubnetChooser.class);\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DEFFERENT_AZ = 3;\n+\n+    @Inject\n+    private AwsSubnetValidator awsSubnetValidator;\n+\n+    public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas) {\n+        LOGGER.debug(\"Subnets to choose from: [{}]\", subnetMetas);\n+        awsSubnetValidator.validate(subnetMetas, MIN_SUBNET_IN_DIFFERENT_AZ);", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMzIxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376403216", "bodyText": "we won't address it in this pr", "author": "lacikaaa", "createdAt": "2020-02-07T13:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3OTg2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376379864", "bodyText": "I think if the solution is generalized then this message is not good anymore: \"Subnets are in %d different AZ, but subnets in %d different AZs required.\"", "author": "gergopapi2", "createdAt": "2020-02-07T13:06:42Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/AwsSubnetValidator.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+import java.util.Collection;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.redbeams.exception.BadRequestException;\n+\n+@Component\n+public class AwsSubnetValidator {\n+\n+    public void validate(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        validateEnoughSubnetIsPresent(cloudSubnets, minSubnetNeededInDifferentAz);\n+        validateAzNumber(cloudSubnets, minSubnetNeededInDifferentAz);\n+    }\n+\n+    private void validateAzNumber(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        long numAZs = cloudSubnets.stream().map(CloudSubnet::getAvailabilityZone).distinct().count();\n+        if (numAZs < minSubnetNeededInDifferentAz) {\n+            throw new BadRequestException(\"All subnets are in the same availability zone: at least two subnets in two different availability zones needed\");", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4MDY3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376380671", "bodyText": "In a generalized solution this message is not valid any more. I would suggest \"Insufficient number of subnets: at least %d subnets required\"", "author": "gergopapi2", "createdAt": "2020-02-07T13:09:02Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/AwsSubnetValidator.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+import java.util.Collection;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.redbeams.exception.BadRequestException;\n+\n+@Component\n+public class AwsSubnetValidator {\n+\n+    public void validate(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        validateEnoughSubnetIsPresent(cloudSubnets, minSubnetNeededInDifferentAz);\n+        validateAzNumber(cloudSubnets, minSubnetNeededInDifferentAz);\n+    }\n+\n+    private void validateAzNumber(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        long numAZs = cloudSubnets.stream().map(CloudSubnet::getAvailabilityZone).distinct().count();\n+        if (numAZs < minSubnetNeededInDifferentAz) {\n+            throw new BadRequestException(\"All subnets are in the same availability zone: at least two subnets in two different availability zones needed\");\n+        }\n+    }\n+\n+    private void validateEnoughSubnetIsPresent(Collection<CloudSubnet> cloudSubnets, int minSubnetNeededInDifferentAz) {\n+        if (cloudSubnets.size() < minSubnetNeededInDifferentAz) {\n+            throw new BadRequestException(\"Insufficient number of subnets: at least two subnets in two different availability zones needed\");", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDYzMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376394633", "bodyText": "I would limit to MAX_SUBNET_IN_DIFFERENT_AZ", "author": "gergopapi2", "createdAt": "2020-02-07T13:41:01Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/AwsSubnetChooser.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.Multimaps;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class AwsSubnetChooser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AwsSubnetChooser.class);\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DEFFERENT_AZ = 3;\n+\n+    @Inject\n+    private AwsSubnetValidator awsSubnetValidator;\n+\n+    public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas) {\n+        LOGGER.debug(\"Subnets to choose from: [{}]\", subnetMetas);\n+        awsSubnetValidator.validate(subnetMetas, MIN_SUBNET_IN_DIFFERENT_AZ);\n+        return chooseAwsSubnetsInDifferentAz(subnetMetas);\n+    }\n+\n+    private List<CloudSubnet> chooseAwsSubnetsInDifferentAz(List<CloudSubnet> subnetMetas) {\n+        Map<String, Collection<CloudSubnet>> privateSubnetPerAz = collectPrivateSubnetPerAz(subnetMetas);\n+        Set<CloudSubnet> privateSubnetsInDifferentAz = findMaxThreePrivateSubnetInDiffrentAz(privateSubnetPerAz);\n+        List<CloudSubnet> chosenSubnets = new ArrayList<>(privateSubnetsInDifferentAz);\n+        chosenSubnets.addAll(collectPublicSubnetsIfNeeded(subnetMetas, privateSubnetPerAz, chosenSubnets.size()));\n+        LOGGER.debug(\"Chosen subnets: [{}]\", chosenSubnets);\n+        return chosenSubnets;\n+    }\n+\n+    private Set<CloudSubnet> collectPublicSubnetsIfNeeded(List<CloudSubnet> subnetMetas, Map<String, Collection<CloudSubnet>> privateSubnetPerAz,\n+            int chosenSubnetSize) {\n+        if (chosenSubnetSize < MIN_SUBNET_IN_DIFFERENT_AZ) {\n+            Map<String, Collection<CloudSubnet>> publicSubnetPerAz = mapPublicSubnetPerAz(subnetMetas, privateSubnetPerAz);\n+            return collectLimitedPublicSubnetsInDifferentAz(chosenSubnetSize, publicSubnetPerAz);\n+        } else {\n+            LOGGER.debug(\"No public subnets needed\");\n+            return Set.of();\n+        }\n+    }\n+\n+    private Set<CloudSubnet> collectLimitedPublicSubnetsInDifferentAz(int chosenSubnetSize, Map<String, Collection<CloudSubnet>> publicSubnetPerAz) {\n+        Set<CloudSubnet> chosenPublicSubnets = publicSubnetPerAz.values().stream()\n+                .map(cloudSubnets -> cloudSubnets.stream().findFirst().get())\n+                .limit(MIN_SUBNET_IN_DIFFERENT_AZ - chosenSubnetSize)", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4NTc1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376985751", "bodyText": "we don't want to add public subnet if we can avoid it", "author": "lacikaaa", "createdAt": "2020-02-10T10:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMjYyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7238#discussion_r376402628", "bodyText": "I would rename it to testMultiplePrivateSubnetTwoDifferentAz", "author": "gergopapi2", "createdAt": "2020-02-07T13:58:00Z", "path": "redbeams/src/test/java/com/sequenceiq/redbeams/service/network/AwsSubnetChooserTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.sequenceiq.redbeams.service.network;\n+\n+\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AwsSubnetChooserTest {\n+\n+    private static final String AVAILABILITY_ZONE_A = \"AZ-a\";\n+\n+    private static final String AVAILABILITY_ZONE_B = \"AZ-b\";\n+\n+    private static final String AVAILABILITY_ZONE_C = \"AZ-c\";\n+\n+    private static final String SUBNET_1 = \"subnet-1\";\n+\n+    private static final String SUBNET_2 = \"subnet-2\";\n+\n+    private static final String SUBNET_3 = \"subnet-3\";\n+\n+    private static final String SUBNET_4 = \"subnet-4\";\n+\n+    @Mock\n+    private AwsSubnetValidator awsSubnetValidator;\n+\n+    @InjectMocks\n+    private AwsSubnetChooser underTest;\n+\n+    @Test\n+    public void testMultiplePrivateSubnetDifferentAz() {", "originalCommit": "48c9222152cbb2664ee347f63f5a0f68bbe75fd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db5dccdd157e23cc3f057a9a902346016e8b92a4", "url": "https://github.com/hortonworks/cloudbreak/commit/db5dccdd157e23cc3f057a9a902346016e8b92a4", "message": "CB-5465 RDS subnet selection should use limited number of subnets in an environment", "committedDate": "2020-02-10T15:02:06Z", "type": "forcePushed"}, {"oid": "137bd149273b4a6495b82fb61f8e6a793831c9b1", "url": "https://github.com/hortonworks/cloudbreak/commit/137bd149273b4a6495b82fb61f8e6a793831c9b1", "message": "CB-5465 RDS subnet selection should use limited number of subnets in an environment", "committedDate": "2020-02-10T15:06:58Z", "type": "commit"}, {"oid": "137bd149273b4a6495b82fb61f8e6a793831c9b1", "url": "https://github.com/hortonworks/cloudbreak/commit/137bd149273b4a6495b82fb61f8e6a793831c9b1", "message": "CB-5465 RDS subnet selection should use limited number of subnets in an environment", "committedDate": "2020-02-10T15:06:58Z", "type": "forcePushed"}]}