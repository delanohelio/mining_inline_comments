{"pr_number": 7062, "pr_title": "CB-4980 hardening integration test with better mock api", "pr_createdAt": "2020-01-13T15:39:05Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7062", "timeline": [{"oid": "aff6ee36d7857b77039d73b868aa4fdd4d316f86", "url": "https://github.com/hortonworks/cloudbreak/commit/aff6ee36d7857b77039d73b868aa4fdd4d316f86", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-13T15:47:52Z", "type": "forcePushed"}, {"oid": "ed4cf5e0d08261d37b1d50923ae14870637bc300", "url": "https://github.com/hortonworks/cloudbreak/commit/ed4cf5e0d08261d37b1d50923ae14870637bc300", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-13T18:48:17Z", "type": "forcePushed"}, {"oid": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "url": "https://github.com/hortonworks/cloudbreak/commit/563f43b2e92846c9efec786e4c65e14f83ee8c83", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-14T09:49:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMDk2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366300967", "bodyText": "rename the parameter as well", "author": "topolyai5", "createdAt": "2020-01-14T12:04:07Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/assertion/environment/EnvironmentTestAssertion.java", "diffHunk": "@@ -1,20 +1,20 @@\n package com.sequenceiq.it.cloudbreak.assertion.environment;\n \n-import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n-import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n-import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.EnvironmentClient;\n import com.sequenceiq.it.cloudbreak.assertion.Assertion;\n import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n \n-public class EnvironmentTestAssertion implements Assertion<EnvironmentTestDto, CloudbreakClient> {\n+public class EnvironmentTestAssertion implements Assertion<EnvironmentTestDto, EnvironmentClient> {\n     private String expectedCredentialName;\n \n     public EnvironmentTestAssertion(String expectedCredentialName) {\n         this.expectedCredentialName = expectedCredentialName;\n     }\n \n     @Override\n-    public EnvironmentTestDto doAssertion(TestContext testContext, EnvironmentTestDto testDto, CloudbreakClient cloudbreakClient) throws Exception {\n+    public EnvironmentTestDto doAssertion(TestContext testContext, EnvironmentTestDto testDto, EnvironmentClient cloudbreakClient) throws Exception {", "originalCommit": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMzAzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366303030", "bodyText": "please throw an exception, it will not be handled by test context", "author": "topolyai5", "createdAt": "2020-01-14T12:09:33Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import java.util.List;\n+\n+import org.testng.Assert;\n+\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.TypedRequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+\n+public class CheckCount {\n+    private CheckCount() {\n+    }\n+\n+    public static Verification times(int expectedTimes) {\n+        return new Verification() {\n+            @Override\n+            public <T> void handle(String path, Method method, CloudbreakClient client, DefaultModel model, List<TypedRequestData<T>> calls) {\n+\n+                Assert.assertEquals(calls.size(), expectedTimes,", "originalCommit": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMzE4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366303189", "bodyText": "consider using lambda format", "author": "topolyai5", "createdAt": "2020-01-14T12:10:00Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/CheckCount.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import java.util.List;\n+\n+import org.testng.Assert;\n+\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.TypedRequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+\n+public class CheckCount {\n+    private CheckCount() {\n+    }\n+\n+    public static Verification times(int expectedTimes) {\n+        return new Verification() {\n+            @Override\n+            public <T> void handle(String path, Method method, CloudbreakClient client, DefaultModel model, List<TypedRequestData<T>> calls) {\n+\n+                Assert.assertEquals(calls.size(), expectedTimes,\n+                        String.format(path + \" \" + method.getMethodName() + \" method call count expected to be %d, but was %d\", expectedTimes, calls.size()));\n+            }\n+        };\n+    }\n+\n+    public static Verification atLeast(int expectedMinimumTimes) {\n+        return new Verification() {", "originalCommit": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDI2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366760268", "bodyText": "Verfication is generic, I could not use lambda here", "author": "afarsang", "createdAt": "2020-01-15T09:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMzE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwOTc5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366309795", "bodyText": "Entity is unused, should be deleted from inheritance chain", "author": "topolyai5", "createdAt": "2020-01-14T12:26:44Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/HttpMock.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.sequenceiq.it.cloudbreak.dto.mock;\n+\n+import static com.sequenceiq.it.cloudbreak.context.RunningParameter.emptyRunningParameter;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.sequenceiq.it.TestParameter;\n+import com.sequenceiq.it.cloudbreak.CloudbreakClient;\n+import com.sequenceiq.it.cloudbreak.Entity;\n+import com.sequenceiq.it.cloudbreak.Prototype;\n+import com.sequenceiq.it.cloudbreak.ResourcePropertyProvider;\n+import com.sequenceiq.it.cloudbreak.assertion.Assertion;\n+import com.sequenceiq.it.cloudbreak.cloud.v4.CloudProvider;\n+import com.sequenceiq.it.cloudbreak.context.MockedTestContext;\n+import com.sequenceiq.it.cloudbreak.context.RunningParameter;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.CloudbreakTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.answer.RequestData;\n+import com.sequenceiq.it.cloudbreak.mock.DefaultModel;\n+import com.sequenceiq.it.cloudbreak.spark.DynamicRouteStack;\n+import com.sequenceiq.it.cloudbreak.spark.SparkServer;\n+import com.sequenceiq.it.cloudbreak.spark.SparkServerFactory;\n+\n+@Prototype\n+public class HttpMock extends Entity implements CloudbreakTestDto {", "originalCommit": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNTQ2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366325465", "bodyText": "hm, what is alma", "author": "topolyai5", "createdAt": "2020-01-14T13:04:23Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/mock/model/SaltMock.java", "diffHunk": "@@ -135,6 +136,7 @@ private void postSaltBootActionDistribute(Service sparkService) {\n \n     private void postSaltBootPillar(Service sparkService) {\n         sparkService.post(SALT_SERVER_PILLAR, (request, response) -> {\n+            JsonUtil.readTree(\"alma\");", "originalCommit": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MDkzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366760937", "bodyText": "oops", "author": "afarsang", "createdAt": "2020-01-15T09:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNjY3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366326673", "bodyText": "is it mean: Should be returned with empty?", "author": "topolyai5", "createdAt": "2020-01-14T13:07:07Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/ImageCatalogBasicTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.it.cloudbreak.testcase.mock;\n+\n+import static com.sequenceiq.it.cloudbreak.dto.mock.CheckCount.atLeast;\n+import static com.sequenceiq.it.cloudbreak.mock.ImageCatalogMockServerSetup.responseFromJsonFile;\n+\n+import javax.inject.Inject;\n+\n+import org.testng.annotations.Test;\n+\n+import com.sequenceiq.it.TestParameter;\n+import com.sequenceiq.it.cloudbreak.action.v4.credential.CredentialCreateAction;\n+import com.sequenceiq.it.cloudbreak.action.v4.imagecatalog.ImageCatalogCreateRetryAction;\n+import com.sequenceiq.it.cloudbreak.client.ImageCatalogTestClient;\n+import com.sequenceiq.it.cloudbreak.context.Description;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.credential.CredentialTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.imagecatalog.ImageCatalogTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.mock.HttpMock;\n+import com.sequenceiq.it.cloudbreak.dto.mock.endpoint.ImageCatalogEndpoint;\n+import com.sequenceiq.it.cloudbreak.mock.ImageCatalogMockServerSetup;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractMinimalTest;\n+\n+public class ImageCatalogBasicTest extends AbstractMinimalTest {\n+\n+    @Inject\n+    ImageCatalogMockServerSetup imageCatalogMockServerSetup;\n+\n+    @Inject\n+    private ImageCatalogTestClient imageCatalogTestClient;\n+\n+    @Inject\n+    private TestParameter testParameter;\n+\n+    @Test(dataProvider = TEST_CONTEXT)\n+    @Description(\n+            given = \"image catalog valid URL\",\n+            when = \"calling create image catalog with that URL\",\n+            then = \"getting image catalog response so the creation success\")\n+    public void testIC(TestContext testContext) {\n+        String imgCatalogName = resourcePropertyProvider().getName();\n+\n+        testContext\n+                .as()\n+                .given(HttpMock.class)\n+                .whenRequested(ImageCatalogEndpoint.Base.class).getCatalog().thenReturn(\n+                (model, uriParameters) -> imageCatalogMockServerSetup\n+                        .patchCbVersion(responseFromJsonFile(\"imagecatalog/catalog.json\"), testParameter))\n+                .whenRequested(ImageCatalogEndpoint.Base.class).head()\n+                .thenReturnHeader(\"Content-Length\", \"38\")\n+                .thenReturn((model, uriParameters) -> \"\")", "originalCommit": "563f43b2e92846c9efec786e4c65e14f83ee8c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2MTU2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7062#discussion_r366761566", "bodyText": "yes, i'll clarify this", "author": "afarsang", "createdAt": "2020-01-15T09:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyNjY3Mw=="}], "type": "inlineReview"}, {"oid": "636a26fedc84cf82e069f3da7bb7eca881710d64", "url": "https://github.com/hortonworks/cloudbreak/commit/636a26fedc84cf82e069f3da7bb7eca881710d64", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-15T09:27:47Z", "type": "forcePushed"}, {"oid": "9cf3a9707e7e3a16db94136f674dabb059af4e48", "url": "https://github.com/hortonworks/cloudbreak/commit/9cf3a9707e7e3a16db94136f674dabb059af4e48", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-15T09:46:02Z", "type": "forcePushed"}, {"oid": "71b505e91ea2535d38ca84c02f48e8c81b229273", "url": "https://github.com/hortonworks/cloudbreak/commit/71b505e91ea2535d38ca84c02f48e8c81b229273", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-15T13:59:17Z", "type": "forcePushed"}, {"oid": "d76517c067e6ddaa91edc2f12fc6dc3f1613db78", "url": "https://github.com/hortonworks/cloudbreak/commit/d76517c067e6ddaa91edc2f12fc6dc3f1613db78", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-16T09:20:27Z", "type": "commit"}, {"oid": "d76517c067e6ddaa91edc2f12fc6dc3f1613db78", "url": "https://github.com/hortonworks/cloudbreak/commit/d76517c067e6ddaa91edc2f12fc6dc3f1613db78", "message": "CB-4980 hardening integration test with better mock api", "committedDate": "2020-01-16T09:20:27Z", "type": "forcePushed"}]}