{"pr_number": 9531, "pr_title": "CB-9981 Add retry to FreeIPA healthcheck", "pr_createdAt": "2020-11-26T16:20:58Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9531", "timeline": [{"oid": "bdbf1891b539ee03f96d2f45a172ac4ca4633cac", "url": "https://github.com/hortonworks/cloudbreak/commit/bdbf1891b539ee03f96d2f45a172ac4ca4633cac", "message": "CB-9981 Add retry to FreeIPA healthcheck\n\nUnfortunately CCM is not stable and can cause random momentary network\noutage. If this happens during health check it would render FreeIPA\nunreachable/unusable for 3 minutes, until the next sync.\nTo handle this more gracefully this commit adds `@Retryable` to the\ncall which invokes FreeIPA API in `FreeIpaHealthDetailsService`.\nBy default it will try 3 times with 1 sec delay which should be\nenough for CCM to recover and fails fast enough to avoid congestion in\nquartz thread pool.", "committedDate": "2020-11-26T16:12:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNzAzMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9531#discussion_r532737031", "bodyText": "It is not clear to me that this type of exception is being thrown in the cases where the CCM failure is happening. The change in FreeIpaHealthCheckClientFactory.java will not affect this catch.\nI think this might work when using cluster proxy/CCM modes, but I still question if RetryableFreeIpaClientException is thrown. Can you point me to where it is thrown for this case?\nWhen using direct mode, I think getFreeIpaClientForDirectConnect() will throw FreeIpaClientException since lastInstance will be true on a health check.", "author": "jamisonbennett", "createdAt": "2020-11-30T16:41:02Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -129,6 +132,8 @@ private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing, boolean fo\n                     }\n                 }\n                 return client.orElseThrow(() -> createFreeIpaUnableToBuildClient(new FreeIpaHostNotAvailableException(\"No FreeIPA client was available\")));\n+            } catch (RetryableFreeIpaClientException e) {", "originalCommit": "bdbf1891b539ee03f96d2f45a172ac4ca4633cac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyODM1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9531#discussion_r533128358", "bodyText": "I think the only place we can have issues during building the client is the connect part where we do the login. There is a logic there which would build a retryable exception based on status code.\n\n  \n    \n      cloudbreak/freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java\n    \n    \n        Lines 232 to 236\n      in\n      8b19e19\n    \n    \n    \n    \n\n        \n          \n           throw FreeIpaClientExceptionUtil.convertToRetryableIfNeeded(new FreeIpaClientException(String.format( \n        \n\n        \n          \n                   \"Encountered unexpected response from FreeIPA; details:%n%n\" \n        \n\n        \n          \n                   + \"code: %s%n\" \n        \n\n        \n          \n                   + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()), \n        \n\n        \n          \n                   response.getStatusLine().getStatusCode())); \n        \n    \n  \n\n\nDo you think this would not work well for cluster proxy based connections? I can't remember if I tested this scenario last week, but I will (again) if you think this might be not handled here.", "author": "lacikaaa", "createdAt": "2020-12-01T07:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNzAzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxNDI1Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9531#discussion_r533414256", "bodyText": "Thanks.\nI think this will work for cluster proxy/CCM errors and some direct errors during the connections.", "author": "jamisonbennett", "createdAt": "2020-12-01T13:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNzAzMQ=="}], "type": "inlineReview"}]}