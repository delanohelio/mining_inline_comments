{"pr_number": 7633, "pr_title": "CB-6225: health check not returning status of all hosts.", "pr_createdAt": "2020-03-23T21:31:31Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7633", "timeline": [{"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "url": "https://github.com/hortonworks/cloudbreak/commit/722bc1a91e6495b6f9799b158dc24bee0188c59e", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes.", "committedDate": "2020-03-24T05:38:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NDExNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397194117", "bodyText": "why 3?\nalso it should be configurable", "author": "lacikaaa", "createdAt": "2020-03-24T14:27:09Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -45,6 +45,10 @@\n \n     private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n \n+    private static final String WRONG_MASTER_MESSAGE = \"invalid 'cn': must be\";\n+\n+    private static final int MAX_RETRIES = 3;", "originalCommit": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxODc2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397218762", "bodyText": "Made configurable.  I made it three in case we're in the middle of a replication change or something else that switches the value.", "author": "holleyism", "createdAt": "2020-03-24T14:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NDExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTUxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397195513", "bodyText": "you could use Stack#getNotDeletedInstanceMetaDataList if you don't need the deleted ones, but if you really need terminated instances I think we should add this stream as a method to Stack as it seems to me we might need it multiple times", "author": "lacikaaa", "createdAt": "2020-03-24T14:28:51Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()", "originalCommit": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwODM2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397208364", "bodyText": "I want to report status on all of them.  I'll add it to Stack.", "author": "holleyism", "createdAt": "2020-03-24T14:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NjM0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397196348", "bodyText": "why don't we know which instance we should use?", "author": "lacikaaa", "createdAt": "2020-03-24T14:29:57Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.", "originalCommit": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTI5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397209292", "bodyText": "It's not stored in the stack data, and I haven't been able to determine which one it should be.  If we have multi-master setup, it's not clear which one is the real master.", "author": "holleyism", "createdAt": "2020-03-24T14:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjc1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397216754", "bodyText": "I think this is something we'll need to add in the next round of HA work.", "author": "holleyism", "createdAt": "2020-03-24T14:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NjM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzIwNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397197207", "bodyText": "you should use for (InstanceMetaData instance : instances) as you don't use the index elsewhere", "author": "lacikaaa", "createdAt": "2020-03-24T14:31:03Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {", "originalCommit": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDgwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397210804", "bodyText": "I cannot update the list of instances if using this style for loop.  Per next comment, I add it back to the list to retry since I cannot idx--.", "author": "holleyism", "createdAt": "2020-03-24T14:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNDkwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399624904", "bodyText": "so there is no reason now not to switch to the above format, or am I missing something?", "author": "lacikaaa", "createdAt": "2020-03-28T05:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTkxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r400265919", "bodyText": "changed.", "author": "holleyism", "createdAt": "2020-03-30T15:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTA3MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397199070", "bodyText": "so you add it to the list to check it again or is it a bug?", "author": "lacikaaa", "createdAt": "2020-03-24T14:33:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (!isInstanceTerminatedOrDeleted(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack, masterCn, instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    String msg = e.getLocalizedMessage();\n+                    if (msg.contains(WRONG_MASTER_MESSAGE) && retries < MAX_RETRIES) {\n+                        masterCn = msg.substring(msg.indexOf('\"') + 1);\n+                        masterCn = masterCn.substring(0, masterCn.indexOf('\"'));\n+                        instances.add(instance);", "originalCommit": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMTIwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397211203", "bodyText": "Yes.  I add it back to the list to retry because we don't have a proper health yet.", "author": "holleyism", "createdAt": "2020-03-24T14:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDQwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397200404", "bodyText": "if we get into this branch, shouldn't we exit the for loop?", "author": "lacikaaa", "createdAt": "2020-03-24T14:35:08Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (!isInstanceTerminatedOrDeleted(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack, masterCn, instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    String msg = e.getLocalizedMessage();\n+                    if (msg.contains(WRONG_MASTER_MESSAGE) && retries < MAX_RETRIES) {\n+                        masterCn = msg.substring(msg.indexOf('\"') + 1);\n+                        masterCn = masterCn.substring(0, masterCn.indexOf('\"'));\n+                        instances.add(instance);\n+                        retries++;\n+                    } else {\n+                        NodeHealthDetails nodeResponse = new NodeHealthDetails();", "originalCommit": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMTk2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397211962", "bodyText": "No because this is just one instance.  If we can't reach one instance, we still need to contact the others to get their status.", "author": "holleyism", "createdAt": "2020-03-24T14:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDQwNA=="}], "type": "inlineReview"}, {"oid": "152129b3b9bb2a82cfcd85462a037f7829ab7f57", "url": "https://github.com/hortonworks/cloudbreak/commit/152129b3b9bb2a82cfcd85462a037f7829ab7f57", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes.", "committedDate": "2020-03-24T15:33:11Z", "type": "forcePushed"}, {"oid": "9e07c04b9a67d322f631307d8c8da6aacfe3268a", "url": "https://github.com/hortonworks/cloudbreak/commit/9e07c04b9a67d322f631307d8c8da6aacfe3268a", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes.", "committedDate": "2020-03-24T18:30:04Z", "type": "forcePushed"}, {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "url": "https://github.com/hortonworks/cloudbreak/commit/e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call.", "committedDate": "2020-03-28T05:23:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNTkzOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399625938", "bodyText": "the method name doesn't reflect what it does. I think instance.isAvailable() should be in the caller if, and the else branch from there should call the body of this method (wo the if here oc)", "author": "lacikaaa", "createdAt": "2020-03-28T06:13:32Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +58,49 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getAllInstanceMetaDataList();\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (isInstanceAvailable(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack,  instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    NodeHealthDetails nodeResponse = new NodeHealthDetails();\n+                    response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                    nodeResponse.setName(instance.getDiscoveryFQDN());\n+                    nodeResponse.setStatus(InstanceStatus.UNREACHABLE);\n+                    nodeResponse.addIssue(e.getLocalizedMessage());\n+                    LOGGER.error(String.format(\"Unable to check the health of FreeIPA instance: %s\", instance.getInstanceId()), e);\n+                }\n+            }\n         }\n-        return createResponse(stack, rpcResponse, master);\n+        return updateResponse(stack, response);\n     }\n \n-    private HealthDetailsFreeIpaResponse createResponse(Stack stack, Optional<RPCResponse<Boolean>> rpcResponse, InstanceMetaData master) {\n-        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n-        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n-        response.setCrn(stack.getResourceCrn());\n-        if (rpcResponse.isPresent()) {\n-            response.setName((String) rpcResponse.get().getValue());\n-            parseMessages(rpcResponse.get(), response);\n-            if (isOverallHealthy(response)) {\n-                response.setStatus(DetailedStackStatus.PROVISIONED.getStatus());\n-            } else {\n-                response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n-            }\n+    private boolean isInstanceAvailable(InstanceMetaData instance, HealthDetailsFreeIpaResponse response) {", "originalCommit": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc1MjYxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399752616", "bodyText": "changed", "author": "holleyism", "createdAt": "2020-03-29T06:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNTkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjAwMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399626001", "bodyText": "refactor into a method pls", "author": "lacikaaa", "createdAt": "2020-03-28T06:14:03Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +58,49 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getAllInstanceMetaDataList();\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (isInstanceAvailable(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack,  instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    NodeHealthDetails nodeResponse = new NodeHealthDetails();\n+                    response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                    nodeResponse.setName(instance.getDiscoveryFQDN());\n+                    nodeResponse.setStatus(InstanceStatus.UNREACHABLE);\n+                    nodeResponse.addIssue(e.getLocalizedMessage());\n+                    LOGGER.error(String.format(\"Unable to check the health of FreeIPA instance: %s\", instance.getInstanceId()), e);", "originalCommit": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc1MjYyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399752627", "bodyText": "refactored", "author": "holleyism", "createdAt": "2020-03-29T06:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjA1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399626054", "bodyText": "this is not needed anymore I think", "author": "lacikaaa", "createdAt": "2020-03-28T06:14:43Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -45,6 +45,11 @@\n \n     private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n \n+    private static final String WRONG_MASTER_MESSAGE = \"invalid 'cn': must be\";\n+\n+    @Value(\"${freeipa.healthcheck.max-retries:3}\")\n+    private int maxRetries;", "originalCommit": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc1MjY1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399752654", "bodyText": "removed", "author": "holleyism", "createdAt": "2020-03-29T06:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjA1NA=="}], "type": "inlineReview"}, {"oid": "c1891efbcb8df5492cd81f269e9116265063cd83", "url": "https://github.com/hortonworks/cloudbreak/commit/c1891efbcb8df5492cd81f269e9116265063cd83", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call.", "committedDate": "2020-03-29T07:09:37Z", "type": "forcePushed"}, {"oid": "c16131f88d4ed6c4962b158792f19c8cb199d57e", "url": "https://github.com/hortonworks/cloudbreak/commit/c16131f88d4ed6c4962b158792f19c8cb199d57e", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call.", "committedDate": "2020-03-30T15:06:01Z", "type": "commit"}, {"oid": "c16131f88d4ed6c4962b158792f19c8cb199d57e", "url": "https://github.com/hortonworks/cloudbreak/commit/c16131f88d4ed6c4962b158792f19c8cb199d57e", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call.", "committedDate": "2020-03-30T15:06:01Z", "type": "forcePushed"}]}