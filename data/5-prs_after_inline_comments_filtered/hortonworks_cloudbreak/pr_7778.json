{"pr_number": 7778, "pr_title": "DISTX-415 Reduce the amount of time it takes to add new nodes", "pr_createdAt": "2020-04-12T23:02:43Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7778", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzY3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7778#discussion_r407873677", "bodyText": "Can you please remove these 2 types from RecipeExecutionPhase as well?", "author": "keyki", "createdAt": "2020-04-14T05:22:22Z", "path": "orchestrator-salt/src/main/java/com/sequenceiq/cloudbreak/orchestrator/salt/SaltOrchestrator.java", "diffHunk": "@@ -841,50 +841,28 @@ private void runNewService(SaltConnector sc, BaseSaltJobRunner baseSaltJobRunner\n     @SuppressFBWarnings(\"REC_CATCH_EXCEPTION\")\n     private void executeRecipes(GatewayConfig gatewayConfig, Set<Node> allNodes, ExitCriteriaModel exitCriteriaModel, RecipeExecutionPhase phase, boolean forced)\n             throws CloudbreakOrchestratorFailedException, CloudbreakOrchestratorTimeoutException {\n-        boolean postRecipe = phase.isPostRecipe();\n         int maxRetry = forced ? maxRetryRecipeForced : maxRetryRecipe;\n         try (SaltConnector sc = createSaltConnector(gatewayConfig)) {\n             // add 'recipe' grain to all nodes\n             Set<String> targetHostnames = allNodes.stream().map(Node::getHostname).collect(Collectors.toSet());\n             saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"recipes\", phase.value()), exitCriteriaModel, maxRetry,\n                     exitCriteria);\n-\n-            // Add Deprecated 'PRE/POST' recipe execution for backward compatibility (since version 2.2.0)\n-            if (postRecipe) {\n-                saltCommandRunner.runSaltCommand(sc, new GrainAddRunner(targetHostnames, allNodes, \"recipes\", RecipeExecutionPhase.POST.value()),", "originalCommit": "43a3c6667a111ac3daed9ceaca0c3c82f0d4107a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyNDA0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7778#discussion_r409224047", "bodyText": "Thanks, done.", "author": "cegganesh84", "createdAt": "2020-04-16T01:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzY3Nw=="}], "type": "inlineReview"}, {"oid": "1c1340358ccdaa5be5cee69dfc71c03dd3c467a8", "url": "https://github.com/hortonworks/cloudbreak/commit/1c1340358ccdaa5be5cee69dfc71c03dd3c467a8", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-16T01:15:37Z", "type": "forcePushed"}, {"oid": "8bce60eb334212ea432582837b43a59b5dacd59a", "url": "https://github.com/hortonworks/cloudbreak/commit/8bce60eb334212ea432582837b43a59b5dacd59a", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-18T01:02:26Z", "type": "forcePushed"}, {"oid": "e257d835bdfcb58e8544e1b9e0fcf3d8a5b8766c", "url": "https://github.com/hortonworks/cloudbreak/commit/e257d835bdfcb58e8544e1b9e0fcf3d8a5b8766c", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-18T01:13:56Z", "type": "forcePushed"}, {"oid": "9a91e6018604e797dc388f40693909198d3bbcff", "url": "https://github.com/hortonworks/cloudbreak/commit/9a91e6018604e797dc388f40693909198d3bbcff", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-20T07:23:07Z", "type": "forcePushed"}, {"oid": "6f58832ee05d379de7feaa75b3e55a9e6017b18d", "url": "https://github.com/hortonworks/cloudbreak/commit/6f58832ee05d379de7feaa75b3e55a9e6017b18d", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n6. Adjusted the integration test to account for the optimization.\n7. Since we do not run highstate before pre-termination, we need a kinit on ipa_leave command, adjusted the salt script accordingly.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-20T18:42:01Z", "type": "forcePushed"}, {"oid": "68d8eab01d027e824f6ed36bc1a613da285cd496", "url": "https://github.com/hortonworks/cloudbreak/commit/68d8eab01d027e824f6ed36bc1a613da285cd496", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n6. Adjusted the integration test to account for the optimization.\n7. Since we do not run highstate before pre-termination, we need a kinit on ipa_leave command, adjusted the salt script accordingly.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-20T20:01:48Z", "type": "commit"}, {"oid": "68d8eab01d027e824f6ed36bc1a613da285cd496", "url": "https://github.com/hortonworks/cloudbreak/commit/68d8eab01d027e824f6ed36bc1a613da285cd496", "message": "DISTX-415 Reduce the amount of time it takes to add new nodes\n\n1. In this commit we optimize the salt execution times by removing the high state apply after each phase of recipe execution.\n2. There is only one high state apply in all the nodes after a scale up.\n3. We could still optimize the individual scripts like metering which always removes and adds the same package in all the nodes of the cluster for every scale up.\n4. This is the first time modifying something in salt, so will focus on further optimization after getting initial feedback.\n5. Also removed the deprecated pre/post execution phases. Made sure that there are no existing salt scripts for such phases.\n6. Adjusted the integration test to account for the optimization.\n7. Since we do not run highstate before pre-termination, we need a kinit on ipa_leave command, adjusted the salt script accordingly.\n\n./gradlew build && test scale up in a private stack to see the time getting reduced from 5 mins to 4 mins.", "committedDate": "2020-04-20T20:01:48Z", "type": "forcePushed"}]}