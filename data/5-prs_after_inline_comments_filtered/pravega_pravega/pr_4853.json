{"pr_number": 4853, "pr_title": "Issue 4852: Update segment split/merge metrics after rolling transaction is committed", "pr_createdAt": "2020-06-08T19:59:40Z", "pr_url": "https://github.com/pravega/pravega/pull/4853", "timeline": [{"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "url": "https://github.com/pravega/pravega/commit/dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "message": "Issue-4852: update segment split/merge metrics after rolling transaction is committed.\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>", "committedDate": "2020-06-08T19:52:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5Mjk1NA==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r436992954", "bodyText": "Why don't you fail the test?", "author": "eolivelli", "createdAt": "2020-06-08T20:50:50Z", "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);", "originalCommit": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDc3Nw==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437014777", "bodyText": "Fail the test.", "author": "andreipaduroiu", "createdAt": "2020-06-08T21:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5Mjk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTc0OQ==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437055749", "bodyText": "fixed", "author": "kevinhan88", "createdAt": "2020-06-08T23:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5Mjk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzA3Mg==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r436993072", "bodyText": "Same here", "author": "eolivelli", "createdAt": "2020-06-08T20:51:02Z", "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);\n+            return;\n+        }\n+\n+        @Cleanup\n+        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scaleRollingTxnScopeName, ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerPort)).build());\n+        @Cleanup\n+        TransactionalEventStreamWriter<String> writer = clientFactory.createTransactionalEventWriter(Stream.of(scaleRollingTxnScopeName, scaleRollingTxnStreamName).getStreamName(),\n+                new JavaSerializer<>(), EventWriterConfig.builder().build());\n+        Transaction<String> transaction = writer.beginTxn();\n+        transaction.writeEvent(\"Transactional content\");\n+\n+        //split to 3 segments\n+        Map<Double, Double> keyRanges = new HashMap<>();\n+        keyRanges.put(0.0, 0.25);\n+        keyRanges.put(0.25, 0.75);\n+        keyRanges.put(0.75, 1.0);\n+\n+        Stream scaleRollingTxnStream = new StreamImpl(scaleRollingTxnScopeName, scaleRollingTxnStreamName);\n+        if (!controller.scaleStream(scaleRollingTxnStream, Collections.singletonList(0L), keyRanges, executor).getFuture().get()) {\n+            log.error(\"Scale stream: splitting segment into three failed, exiting\");", "originalCommit": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTgxOA==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437055818", "bodyText": "fixed", "author": "kevinhan88", "createdAt": "2020-06-08T23:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzU2Mg==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r436993562", "bodyText": "This sleep may turn the test into a new flaky one.\nYou could wait for the conditions below to be verified", "author": "eolivelli", "createdAt": "2020-06-08T20:51:56Z", "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);\n+            return;\n+        }\n+\n+        @Cleanup\n+        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scaleRollingTxnScopeName, ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerPort)).build());\n+        @Cleanup\n+        TransactionalEventStreamWriter<String> writer = clientFactory.createTransactionalEventWriter(Stream.of(scaleRollingTxnScopeName, scaleRollingTxnStreamName).getStreamName(),\n+                new JavaSerializer<>(), EventWriterConfig.builder().build());\n+        Transaction<String> transaction = writer.beginTxn();\n+        transaction.writeEvent(\"Transactional content\");\n+\n+        //split to 3 segments\n+        Map<Double, Double> keyRanges = new HashMap<>();\n+        keyRanges.put(0.0, 0.25);\n+        keyRanges.put(0.25, 0.75);\n+        keyRanges.put(0.75, 1.0);\n+\n+        Stream scaleRollingTxnStream = new StreamImpl(scaleRollingTxnScopeName, scaleRollingTxnStreamName);\n+        if (!controller.scaleStream(scaleRollingTxnStream, Collections.singletonList(0L), keyRanges, executor).getFuture().get()) {\n+            log.error(\"Scale stream: splitting segment into three failed, exiting\");\n+            return;\n+        }\n+\n+        assertEquals(3, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_COUNT, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+        assertEquals(1, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_SPLITS, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+        assertEquals(0, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_MERGES, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+\n+        transaction.flush();\n+        transaction.commit();\n+\n+        Thread.sleep(1000);", "originalCommit": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDA0NQ==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437014045", "bodyText": "+1. Please do not add arbitrary thread sleeps in tests", "author": "andreipaduroiu", "createdAt": "2020-06-08T21:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDI3Mg==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437014272", "bodyText": "Use TestUtils.await or AssertExtensions.assertEventuallyEquals", "author": "andreipaduroiu", "createdAt": "2020-06-08T21:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NjI3OA==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437056278", "bodyText": "fixed, sorry for the overlooking, the extensions are being used already in the rest of the class.", "author": "kevinhan88", "createdAt": "2020-06-08T23:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzU2Mg=="}], "type": "inlineReview"}, {"oid": "0ac07c5d845126c63c92f974529072d07478ba41", "url": "https://github.com/pravega/pravega/commit/0ac07c5d845126c63c92f974529072d07478ba41", "message": "Merge branch 'master' into issue-4852", "committedDate": "2020-06-08T21:33:13Z", "type": "commit"}, {"oid": "3c4ee95d0d9dc928a83501b0431b6fb54c718f79", "url": "https://github.com/pravega/pravega/commit/3c4ee95d0d9dc928a83501b0431b6fb54c718f79", "message": "Issue-4852: use AssertExtensions to assert tested values.\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>", "committedDate": "2020-06-08T23:23:16Z", "type": "commit"}, {"oid": "7ecc147d6bb914d7f7ff22fb3036f81e6bab4fd6", "url": "https://github.com/pravega/pravega/commit/7ecc147d6bb914d7f7ff22fb3036f81e6bab4fd6", "message": "Issue-4852: fail test directly instead of throwing exceptions per code review comments.\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>", "committedDate": "2020-06-08T23:31:55Z", "type": "commit"}, {"oid": "787c6838e5c91717fdb51858a7b5ccfc54a65c4e", "url": "https://github.com/pravega/pravega/commit/787c6838e5c91717fdb51858a7b5ccfc54a65c4e", "message": "Issue-4852: minor casting enhancement\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>", "committedDate": "2020-06-08T23:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzM5NQ==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437203395", "bodyText": "It looks like that this code is the same as in scaleSegmentsSealed\nwhat about creating a common method ?\nI am still new with this code, maybe @shrids can give more hints", "author": "eolivelli", "createdAt": "2020-06-09T07:47:07Z", "path": "controller/src/main/java/io/pravega/controller/store/stream/AbstractStreamMetadataStore.java", "diffHunk": "@@ -494,7 +494,13 @@ public OperationContext createContext(String scope, String name) {\n     @Override\n     public CompletableFuture<Void> completeRollingTxn(String scope, String name, Map<Long, Long> sealedActiveEpochSegments,\n                                                       VersionedMetadata<CommittingTransactionsRecord> record, OperationContext context, Executor executor) {\n-        return withCompletion(getStream(scope, name, context).completeRollingTxn(sealedActiveEpochSegments, record), executor);\n+\n+        CompletableFuture<Void> future = withCompletion(getStream(scope, name, context).completeRollingTxn(sealedActiveEpochSegments, record), executor);\n+\n+        future.thenCompose(result -> findNumSplitsMerges(scope, name, context, executor).thenAccept(simpleEntry ->", "originalCommit": "787c6838e5c91717fdb51858a7b5ccfc54a65c4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDkxNw==", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437674917", "bodyText": "No, scaleSegmentSealed updates activeSegment in addition to what rollingTxn does here.\nIf we create a common method, then we have to use if condition. In the end we may have one or two more lines of codes.", "author": "kevinhan88", "createdAt": "2020-06-09T19:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzM5NQ=="}], "type": "inlineReview"}, {"oid": "e4dfa9c7dcaed7ce9e14499c7a786a4ff335a90a", "url": "https://github.com/pravega/pravega/commit/e4dfa9c7dcaed7ce9e14499c7a786a4ff335a90a", "message": "Merge branch 'master' into issue-4852", "committedDate": "2020-06-09T13:17:40Z", "type": "commit"}, {"oid": "3ce847aa9af58fbb18f332ece13edb25b32e5557", "url": "https://github.com/pravega/pravega/commit/3ce847aa9af58fbb18f332ece13edb25b32e5557", "message": "Merge branch 'master' into issue-4852", "committedDate": "2020-06-11T20:41:17Z", "type": "commit"}]}