{"pr_number": 4935, "pr_title": "Issue 4933: (Key-Value Tables) Enforcing Key and Value serialization limits", "pr_createdAt": "2020-07-09T15:52:24Z", "pr_url": "https://github.com/pravega/pravega/pull/4935", "timeline": [{"oid": "ae1e79e93b0705084a4f83a6278654046036e7f3", "url": "https://github.com/pravega/pravega/commit/ae1e79e93b0705084a4f83a6278654046036e7f3", "message": "KeyFamilySerializer: Max Key Family Length is 2KB.\nTableSegment: Enforcing max key length, max value length; defined max batch count and size.\nKeyValueTable: Defined and enforcing max serialized key length (4KB).\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-08T23:36:50Z", "type": "commit"}, {"oid": "a5e9fec7b0e5ff497667d4cc0e1d69a0406b589b", "url": "https://github.com/pravega/pravega/commit/a5e9fec7b0e5ff497667d4cc0e1d69a0406b589b", "message": "PravegaRequestProcessor.readTable: truncating result if it exceeds maximum response size.\nTableSegmentImpl.get: handling truncated result and issuing subsequent requests in that case.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-09T15:36:44Z", "type": "commit"}, {"oid": "26765396a37378714f430060f1fc639b164f2a9e", "url": "https://github.com/pravega/pravega/commit/26765396a37378714f430060f1fc639b164f2a9e", "message": "Merge branch 'master' into issue-4933-kvt-limits", "committedDate": "2020-07-09T15:55:54Z", "type": "commit"}, {"oid": "b3d1d054723ec53b1949853cefe2a023f1c07128", "url": "https://github.com/pravega/pravega/commit/b3d1d054723ec53b1949853cefe2a023f1c07128", "message": "typo\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-09T15:58:05Z", "type": "commit"}, {"oid": "7e5d5445a0761b168134bcfff3af01c74572a64e", "url": "https://github.com/pravega/pravega/commit/7e5d5445a0761b168134bcfff3af01c74572a64e", "message": "typo\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-09T15:59:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1OTg1Nw==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452359857", "bodyText": "FYI this is not 2Kb.", "author": "tkaitchuck", "createdAt": "2020-07-09T16:57:31Z", "path": "client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java", "diffHunk": "@@ -24,8 +24,17 @@\n  * Serializer for Key-Value Table Key Families.\n  */\n class KeyFamilySerializer {\n+    /**\n+     * Maximum length for a Key Family serialization using {@link #ENCODING}.\n+     * If this value is changed, care must be taken such that the sum of it, {@link #PREFIX_LENGTH} and\n+     * {@link TableSegment#MAXIMUM_KEY_LENGTH} do not exceed the server-side limits.\n+     */\n     @VisibleForTesting\n-    static final int MAX_KEY_FAMILY_LENGTH = 1024; // It can't be longer than TableSegment.MAX_KEY_LENGTH\n+    static final int MAX_KEY_FAMILY_LENGTH = 2096;", "originalCommit": "7e5d5445a0761b168134bcfff3af01c74572a64e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NjE0OA==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452376148", "bodyText": "Duh! Fixed.", "author": "andreipaduroiu", "createdAt": "2020-07-09T17:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1OTg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDc1OA==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452374758", "bodyText": "This seems particularly inefficient. Supposing there are N items to be retrieved and a fixed number fit in a batch this is O(n^2) because the first call gets all N and throws all but the first batch away. The second fetches N-batch and throws all but the next batch away etc.\nWe should figure out a way to pass down a limit to the get call, even if it is not exact. It's better to reply with more smaller messages which are efficient than maximizing our wirecommand size out in the reply.", "author": "tkaitchuck", "createdAt": "2020-07-09T17:23:20Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -710,8 +717,11 @@ public void readTable(final WireCommands.ReadTable readTable) {\n         val timer = new Timer();\n         tableStore.get(segment, keys, TIMEOUT)\n                 .thenAccept(values -> {\n-                    connection.send(new WireCommands.TableRead(readTable.getRequestId(), segment, getTableEntriesCommand(keys, values)));\n-                    this.tableStatsRecorder.getKeys(readTable.getSegment(), keys.size(), timer.getElapsed());\n+                    // NOTE: getTableEntriesCommand will truncate the result to prevent it from exceeding MAX_TABLE_RESPONSE_SIZE.\n+                    // In such a situation, not all requested items will be returned to the caller; only the head of the list will.\n+                    WireCommands.TableEntries response = getTableEntriesCommand(readTable.getRequestId(), keys, values);", "originalCommit": "7e5d5445a0761b168134bcfff3af01c74572a64e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MDY2Mg==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452380662", "bodyText": "I agree with this. However I am not sure how easy it is to do this with the current RawClient that expects a single response for a request.\nI filed #4936 to research a way to handle these situations. This may also help iterators too (i.e., to avoid a flurry of request-replies for each iterator iteration).", "author": "andreipaduroiu", "createdAt": "2020-07-09T17:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTE4OQ==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452549189", "bodyText": "I reworked this part. Check out the updated description for details.", "author": "andreipaduroiu", "createdAt": "2020-07-09T23:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDc1OA=="}], "type": "inlineReview"}, {"oid": "bbce08f67d1a02bdacc3cbb6c2a68fbd74a2c442", "url": "https://github.com/pravega/pravega/commit/bbce08f67d1a02bdacc3cbb6c2a68fbd74a2c442", "message": "Code review feedback.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-09T17:31:58Z", "type": "commit"}, {"oid": "84ff956689b018eebd4176106c09e7d6941913c3", "url": "https://github.com/pravega/pravega/commit/84ff956689b018eebd4176106c09e7d6941913c3", "message": "Merge branch 'master' into issue-4933-kvt-limits", "committedDate": "2020-07-09T17:34:54Z", "type": "commit"}, {"oid": "4abf67b83a16531dd4472e670c4bbbd2d4c11856", "url": "https://github.com/pravega/pravega/commit/4abf67b83a16531dd4472e670c4bbbd2d4c11856", "message": "PravegaRequestProcessor: rolled back all changes.\nOrderedProcessor: renamed from OrderedItemProcessor and moved to concurrent package. Changed to adapt to new requirements (no prior usages).\nTableSegmentImpl: splitting large get requests into smaller batches and issuing them in parallel, subject to a max concurrency (using OrderedProcessor).\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-09T23:46:12Z", "type": "commit"}, {"oid": "dd6015b378a081f9c06b1f128d9077be8cdeab4f", "url": "https://github.com/pravega/pravega/commit/dd6015b378a081f9c06b1f128d9077be8cdeab4f", "message": "Rolled back unnecessary changes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-09T23:52:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MjA2Mg==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452552062", "bodyText": "remove?", "author": "tkaitchuck", "createdAt": "2020-07-09T23:57:11Z", "path": "client/src/main/java/io/pravega/client/tables/impl/TableSegmentImpl.java", "diffHunk": "@@ -138,11 +145,37 @@ public void close() {\n     @Override\n     public CompletableFuture<List<TableSegmentEntry>> get(@NonNull Iterator<ByteBuf> keys) {\n         val wireKeys = rawKeysToWireCommand(keys);\n+        val resultBuilder = new GetResultBuilder(wireKeys);\n+        CompletableFuture<Void> result;\n+        if (wireKeys.size() <= MAX_GET_KEY_BATCH_SIZE) {\n+            // The entire request can be satisfied using a single call.\n+            result = fetchSlice(resultBuilder);\n+        } else {\n+            // The request has to be split into multiple calls and then combined.\n+            val processor = new OrderedProcessor<Void>(MAX_GET_CONCURRENT_REQUESTS, this.connectionFactory.getInternalExecutor());\n+            val futures = new ArrayList<CompletableFuture<Void>>();\n+            int index = 0;\n+            while (index < wireKeys.size()) {\n+                final int sliceStart = index;\n+                final int sliceLength = Math.min(MAX_GET_KEY_BATCH_SIZE, wireKeys.size() - sliceStart);\n+                futures.add(processor.execute(() -> fetchSlice(resultBuilder.slice(sliceStart, sliceStart + sliceLength))));\n+                //futures.add(fetchSlice(resultBuilder.slice(index, index + sliceLength)));", "originalCommit": "dd6015b378a081f9c06b1f128d9077be8cdeab4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwOTQ5NQ==", "url": "https://github.com/pravega/pravega/pull/4935#discussion_r452609495", "bodyText": "Done.", "author": "andreipaduroiu", "createdAt": "2020-07-10T03:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MjA2Mg=="}], "type": "inlineReview"}, {"oid": "67c94b3f7658287209d54a42223b9670f526449d", "url": "https://github.com/pravega/pravega/commit/67c94b3f7658287209d54a42223b9670f526449d", "message": "Build fix and code review feedback.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-10T03:57:07Z", "type": "commit"}, {"oid": "614038125b2d2d5ab867bc5b76ad56add0ec257f", "url": "https://github.com/pravega/pravega/commit/614038125b2d2d5ab867bc5b76ad56add0ec257f", "message": "Reworked test to use less memory.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-07-10T04:03:44Z", "type": "commit"}]}