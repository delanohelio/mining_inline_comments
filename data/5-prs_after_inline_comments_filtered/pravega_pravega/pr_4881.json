{"pr_number": 4881, "pr_title": "Issue 4879: (KeyValueTables) List and Delete API for Key Value Tables on Controller", "pr_createdAt": "2020-06-18T12:45:17Z", "pr_url": "https://github.com/pravega/pravega/pull/4881", "timeline": [{"oid": "15c4368c9c96a905351afd8b2081e24d164ea94e", "url": "https://github.com/pravega/pravega/commit/15c4368c9c96a905351afd8b2081e24d164ea94e", "message": "listKeyValueTables API\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-18T12:42:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTgzNQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442311835", "bodyText": "this doesnt need to be public", "author": "shiveshr", "createdAt": "2020-06-18T15:26:20Z", "path": "client/src/main/java/io/pravega/client/control/impl/ControllerImpl.java", "diffHunk": "@@ -1411,5 +1447,11 @@ public void createKeyValueTable(KeyValueTableConfig kvtConfig, RPCAsyncCallback<\n             clientStub.withDeadlineAfter(timeoutMillis, TimeUnit.MILLISECONDS)\n                     .createKeyValueTable(kvtConfig, callback);\n         }\n+\n+        public void listKeyValueTables(KVTablesInScopeRequest request,", "originalCommit": "15c4368c9c96a905351afd8b2081e24d164ea94e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNzE0Mg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442707142", "bodyText": "removed public modifier", "author": "pbelgundi", "createdAt": "2020-06-19T08:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMTgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzQ4OA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442313488", "bodyText": "you shouldnt add the suffix here. This is the authorization resource against which the auth rules will be set outside of pravega.\nthe resource name being scope/tablename is sufficient.", "author": "shiveshr", "createdAt": "2020-06-18T15:28:41Z", "path": "controller/src/main/java/io/pravega/controller/server/AuthResourceRepresentation.java", "diffHunk": "@@ -120,6 +120,6 @@ public static String ofReaderGroupInScope(String scopeName, String readerGroupNa\n      */\n     public static String ofKeyValueTableInScope(String scopeName, String kvtName) {\n         Exceptions.checkNotNullOrEmpty(kvtName, \"KeyValueTableName\");\n-        return String.format(\"%s/%s\", ofStreamsInScope(scopeName), kvtName);\n+        return String.format(\"%s/%s_kvt\", ofStreamsInScope(scopeName), kvtName);", "originalCommit": "15c4368c9c96a905351afd8b2081e24d164ea94e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNTE4NA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442625184", "bodyText": "If a stream and kvtable have the same name inside the same scope, earlier code would generate the same \"resource name\" for both causing confusion.... Hence I thought it would be good to have this suffix to be able to differentiate the two...", "author": "pbelgundi", "createdAt": "2020-06-19T04:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzA2MA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r443313060", "bodyText": "@ravisharda thoughts?", "author": "shiveshr", "createdAt": "2020-06-22T04:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1NzA4OQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r443957089", "bodyText": "Are tables direct members of the scope?\nIf yes, it might help to disambiguate what the resource type is, for authorization purposes. Say, both a stream and a table have the same name abc. So, the resource representation for both shall be myscope/abc. So, if the admin sets up an ACL for a user account such that it has access to myscope/abc, it'll authorize the user to both the stream and the table, which i sundesirable.\nI'd suggest putting the _kvt as a prefix tag, instead of a suffix. And also simplifying the tag name. Something like: _kvtable_abc.\nOn a side note, this also reminds me that we need a more consistent way of structuring these resource names. But, that's for another day.", "author": "ravisharda", "createdAt": "2020-06-23T04:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1ODU3Mw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r443958573", "bodyText": "Yes. Tables are direct members of scope.\nJust like a scope can have streams under it, the same scope can also have KeyValueTables under it and there could be a stream and kvtable with the same name under a given scope.", "author": "pbelgundi", "createdAt": "2020-06-23T04:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2NDM5Nw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r443964397", "bodyText": "Based on an offline discussion with Ravi , decided to use the auth resource string %s/_kvtable/%s for KeyValueTables.", "author": "pbelgundi", "createdAt": "2020-06-23T05:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzk1Ng==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442313956", "bodyText": "revert this class", "author": "shiveshr", "createdAt": "2020-06-18T15:29:23Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/LocalController.java", "diffHunk": "@@ -466,10 +466,10 @@ public String retrieveDelegationToken() {\n             }\n         });\n     }\n-\n+    \n     @Override", "originalCommit": "15c4368c9c96a905351afd8b2081e24d164ea94e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTM1MA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442691350", "bodyText": "This class is used by Integration Tests when invoking Controller operations.\nHence added listKeyValueTables() here too.\nIntegration tests need to be fixed to use ControllerImpl.java in client instead.", "author": "pbelgundi", "createdAt": "2020-06-19T07:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNzQxNg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r442317416", "bodyText": "There is one problem with the logic here. And i realize this same problem is present for streams too.\nIf we filter out unauthorized tables, then the response we send back may endup being empty while there may still be more records to be read from the continuation token.\nSo any such filtering should invoke the call with filtered-out elements and keep doing it until we have collected limit number of elements or have nothing to read anymore.", "author": "shiveshr", "createdAt": "2020-06-18T15:34:22Z", "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -144,6 +144,66 @@ public void getCurrentSegmentsKeyValueTable(KeyValueTableInfo request, StreamObs\n                 responseObserver);\n     }\n \n+    @Override\n+    public void listKeyValueTablesInScope(Controller.KVTablesInScopeRequest request, StreamObserver<Controller.KVTablesInScopeResponse> responseObserver) {\n+\n+        String scopeName = request.getScope().getScope();\n+        RequestTag requestTag = requestTracker.initializeAndTrackRequestTag(requestIdGenerator.get(),\n+                \"listKeyValueTables\", scopeName);\n+        log.info(requestTag.getRequestId(), \"listKeyValueTables called for scope {}.\", scopeName);\n+\n+        final AuthContext ctx;\n+        if (this.grpcAuthHelper.isAuthEnabled()) {\n+            ctx = AuthContext.current();\n+        } else {\n+            ctx = null;\n+        }\n+\n+        authenticateExecuteAndProcessResults(\n+                () -> {\n+                    String result = this.grpcAuthHelper.checkAuthorization(\n+                            AuthResourceRepresentation.ofScope(scopeName),\n+                            AuthHandler.Permissions.READ,\n+                            ctx);\n+                    log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n+                            AuthResourceRepresentation.ofScope(scopeName), result);\n+                    return result;\n+                },\n+                delegationToken -> controllerService\n+                        .listKeyValueTables(scopeName, request.getContinuationToken().getToken(), listStreamsInScopeLimit)\n+                        .handle((response, ex) -> {\n+                            if (ex != null) {\n+                                if (Exceptions.unwrap(ex) instanceof StoreException.DataNotFoundException) {\n+                                    return Controller.KVTablesInScopeResponse.newBuilder().setStatus(Controller.KVTablesInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n+                                } else {\n+                                    throw new CompletionException(ex);\n+                                }\n+                            } else {\n+                                log.debug(\"All KeyValueTables in scope with continuation token: {}\", response);\n+                                List<KeyValueTableInfo> kvtables = response", "originalCommit": "15c4368c9c96a905351afd8b2081e24d164ea94e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2NDU2Nw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r443964567", "bodyText": "Fixed this. Please check.", "author": "pbelgundi", "createdAt": "2020-06-23T05:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNzQxNg=="}], "type": "inlineReview"}, {"oid": "cad6437d6a9828537551a76c19089aaafe8c73a8", "url": "https://github.com/pravega/pravega/commit/cad6437d6a9828537551a76c19089aaafe8c73a8", "message": "fix tests add basic integration test\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-19T04:35:07Z", "type": "commit"}, {"oid": "7712679c412da6fb48f9a00d5674bda6b1a0e179", "url": "https://github.com/pravega/pravega/commit/7712679c412da6fb48f9a00d5674bda6b1a0e179", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-19T13:06:03Z", "type": "commit"}, {"oid": "cfa4729fde53e900e0ffb5f2fd32b84a34c7e065", "url": "https://github.com/pravega/pravega/commit/cfa4729fde53e900e0ffb5f2fd32b84a34c7e065", "message": "unit tests for list API\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-23T11:14:06Z", "type": "commit"}, {"oid": "44109e92692992177f713bad7cf21b03c93551ef", "url": "https://github.com/pravega/pravega/commit/44109e92692992177f713bad7cf21b03c93551ef", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-24T05:30:47Z", "type": "commit"}, {"oid": "17723e7f1d48b55fb10a5b928d8dc1a821e7e2ca", "url": "https://github.com/pravega/pravega/commit/17723e7f1d48b55fb10a5b928d8dc1a821e7e2ca", "message": "more tests for coverage\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-24T09:29:25Z", "type": "commit"}, {"oid": "b15de1134d3a11b56a18281c40e7dc19b058f332", "url": "https://github.com/pravega/pravega/commit/b15de1134d3a11b56a18281c40e7dc19b058f332", "message": "spotbugsfix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-24T10:15:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0ODkyMg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r445048922", "bodyText": "\"kvtables\" -> \"Key-Value Tables\"\nSame below.", "author": "andreipaduroiu", "createdAt": "2020-06-24T17:15:55Z", "path": "controller/src/main/java/io/pravega/controller/store/Scope.java", "diffHunk": "@@ -67,6 +67,18 @@\n      */\n     void refresh();\n \n+    /**\n+     * A paginated api on the scope to get requested number of kvtables from under the scope", "originalCommit": "b15de1134d3a11b56a18281c40e7dc19b058f332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMzMwOA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448113308", "bodyText": "fixed.", "author": "pbelgundi", "createdAt": "2020-07-01T04:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0ODkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0OTMzOA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r445049338", "bodyText": "When are we fixing the test?", "author": "andreipaduroiu", "createdAt": "2020-06-24T17:16:37Z", "path": "controller/src/test/java/io/pravega/controller/server/v1/ZKControllerServiceImplTest.java", "diffHunk": "@@ -238,4 +238,10 @@ public void getCurrentSegmentsKeyValueTableTest() {\n         //TODO: Place holder till we fix the test\n         assertTrue(true);\n     }\n+\n+    @Test\n+    public void kvtablesInScopeTest() {\n+        //TODO: Place holder till we fix the test", "originalCommit": "b15de1134d3a11b56a18281c40e7dc19b058f332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMzQ3Mw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448113473", "bodyText": "As discussed, these are tests for Zookeeper based implementation of KVTables and I would be fixing them in a later PR.", "author": "pbelgundi", "createdAt": "2020-07-01T04:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0OTMzOA=="}], "type": "inlineReview"}, {"oid": "f56b9cdeb7e54c7cad75904a265fdbd621544b7a", "url": "https://github.com/pravega/pravega/commit/f56b9cdeb7e54c7cad75904a265fdbd621544b7a", "message": "Added Delete API\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-25T18:19:05Z", "type": "commit"}, {"oid": "e8c078d732d0d7306d6979c9643350f48ab96ca2", "url": "https://github.com/pravega/pravega/commit/e8c078d732d0d7306d6979c9643350f48ab96ca2", "message": "DeleteAPI fixes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-29T10:06:35Z", "type": "commit"}, {"oid": "0948dbbfe7e2a0916d9615e41fe245e1efb8027a", "url": "https://github.com/pravega/pravega/commit/0948dbbfe7e2a0916d9615e41fe245e1efb8027a", "message": "Unit tests for DeleteAPI\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-29T12:33:21Z", "type": "commit"}, {"oid": "46285eb23bd20de8815410d94a030885a46c2403", "url": "https://github.com/pravega/pravega/commit/46285eb23bd20de8815410d94a030885a46c2403", "message": "merge from upstream\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-29T13:31:28Z", "type": "commit"}, {"oid": "6ee7dddab7d4be8d46039706f3d26aea5af492a5", "url": "https://github.com/pravega/pravega/commit/6ee7dddab7d4be8d46039706f3d26aea5af492a5", "message": "tests fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-06-29T17:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NjQyMA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r447896420", "bodyText": "Please fix the license header.", "author": "andreipaduroiu", "createdAt": "2020-06-30T18:32:34Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/kvtable/DeleteTableTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ * <p>", "originalCommit": "6ee7dddab7d4be8d46039706f3d26aea5af492a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA1Mw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r447897053", "bodyText": "Is this change needed?", "author": "andreipaduroiu", "createdAt": "2020-06-30T18:33:51Z", "path": "controller/src/test/java/io/pravega/controller/task/KeyValueTable/TableMetadataTasksTest.java", "diffHunk": "@@ -58,7 +59,7 @@\n     protected KVTableMetadataStore kvtStore;\n     protected TableMetadataTasks kvtMetadataTasks;\n     protected SegmentHelper segmentHelperMock;\n-    protected final ScheduledExecutorService executor = Executors.newScheduledThreadPool(10);\n+    protected final ScheduledExecutorService executor = Executors.newScheduledThreadPool(30);", "originalCommit": "6ee7dddab7d4be8d46039706f3d26aea5af492a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNjU2Nw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448106567", "bodyText": "Had changed when testing, its not needed. Will revert.", "author": "pbelgundi", "createdAt": "2020-07-01T04:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MTE0MA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448191140", "bodyText": "Fixed", "author": "pbelgundi", "createdAt": "2020-07-01T08:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzMxNQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r447897315", "bodyText": "license header", "author": "andreipaduroiu", "createdAt": "2020-06-30T18:34:22Z", "path": "shared/controller-api/src/main/java/io/pravega/shared/controller/event/kvtable/DeleteTableEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ * <p>", "originalCommit": "6ee7dddab7d4be8d46039706f3d26aea5af492a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNTY1MQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448105651", "bodyText": "What is the issue here?", "author": "pbelgundi", "createdAt": "2020-07-01T04:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NzMxNQ=="}], "type": "inlineReview"}, {"oid": "28db6370264f44fcc0db9ee6717672817882d73a", "url": "https://github.com/pravega/pravega/commit/28db6370264f44fcc0db9ee6717672817882d73a", "message": "Fixed UTs\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-01T04:15:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMzkwMg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448113902", "bodyText": "\"delete operation on table stream\"", "author": "shiveshr", "createdAt": "2020-07-01T04:51:31Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/kvtable/DeleteTableTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.eventProcessor.requesthandlers.kvtable;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.controller.retryable.RetryableException;\n+import io.pravega.controller.store.kvtable.KVTableMetadataStore;\n+import io.pravega.controller.store.kvtable.KVTOperationContext;\n+import io.pravega.controller.store.kvtable.KeyValueTable;\n+import io.pravega.controller.store.stream.StoreException;\n+import io.pravega.controller.task.KeyValueTable.TableMetadataTasks;\n+import io.pravega.controller.util.RetryHelper;\n+import io.pravega.shared.controller.event.kvtable.DeleteTableEvent;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Request handler for performing scale operations received from requeststream.", "originalCommit": "28db6370264f44fcc0db9ee6717672817882d73a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDk4MQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448190981", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-01T08:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMzkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExNDA3Mg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448114072", "bodyText": "please log that this workflow completed because of this condition.", "author": "shiveshr", "createdAt": "2020-07-01T04:52:16Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/kvtable/DeleteTableTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.eventProcessor.requesthandlers.kvtable;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.controller.retryable.RetryableException;\n+import io.pravega.controller.store.kvtable.KVTableMetadataStore;\n+import io.pravega.controller.store.kvtable.KVTOperationContext;\n+import io.pravega.controller.store.kvtable.KeyValueTable;\n+import io.pravega.controller.store.stream.StoreException;\n+import io.pravega.controller.task.KeyValueTable.TableMetadataTasks;\n+import io.pravega.controller.util.RetryHelper;\n+import io.pravega.shared.controller.event.kvtable.DeleteTableEvent;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Request handler for performing scale operations received from requeststream.\n+ */\n+@Slf4j\n+public class DeleteTableTask implements TableTask<DeleteTableEvent> {\n+\n+    private final KVTableMetadataStore kvtMetadataStore;\n+    private final TableMetadataTasks kvtMetadataTasks;\n+    private final ScheduledExecutorService executor;\n+\n+    public DeleteTableTask(final KVTableMetadataStore kvtMetaStore,\n+                           final TableMetadataTasks kvtMetaTasks,\n+                           final ScheduledExecutorService executor) {\n+        Preconditions.checkNotNull(kvtMetaStore);\n+        Preconditions.checkNotNull(kvtMetaTasks);\n+        Preconditions.checkNotNull(executor);\n+        this.kvtMetadataStore = kvtMetaStore;\n+        this.kvtMetadataTasks = kvtMetaTasks;\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> execute(final DeleteTableEvent request) {\n+        String scope = request.getScope();\n+        String kvt = request.getKvtName();\n+        long requestId = request.getRequestId();\n+        String kvTableId = request.getTableId().toString();\n+\n+        return RetryHelper.withRetriesAsync(() -> getKeyValueTable(scope, kvt)\n+                .thenCompose(table -> table.getId()).thenCompose(id -> {\n+            if (!id.equals(kvTableId)) {\n+                return CompletableFuture.completedFuture(null);", "originalCommit": "28db6370264f44fcc0db9ee6717672817882d73a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDkyNA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448190924", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-01T08:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExNDA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExNTg0MQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448115841", "bodyText": "there only seems to be one future.. why CompletableFuture.allOf?", "author": "shiveshr", "createdAt": "2020-07-01T04:59:38Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/PravegaTablesKVTable.java", "diffHunk": "@@ -191,11 +191,14 @@ private String getMetadataTableName(String id) {\n \n     @Override\n     CompletableFuture<Void> createKVTableMetadata() {\n-        return getId().thenCompose(id -> {\n-            String metadataTable = getMetadataTableName(id);\n-            return CompletableFuture.allOf(storeHelper.createTable(metadataTable))\n-                    .thenAccept(v -> log.debug(\"kvtable {}/{} metadata table {} created\", getScopeName(), getName(), metadataTable));\n-        });\n+        return getId().thenCompose(id -> CompletableFuture.allOf(storeHelper.createTable(getMetadataTableName(id)))", "originalCommit": "28db6370264f44fcc0db9ee6717672817882d73a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDg2Mw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448190863", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-01T08:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExNTg0MQ=="}], "type": "inlineReview"}, {"oid": "c3c2c9edea3357c64dcc88f08c6960a20f02dfa9", "url": "https://github.com/pravega/pravega/commit/c3c2c9edea3357c64dcc88f08c6960a20f02dfa9", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-01T08:07:16Z", "type": "commit"}, {"oid": "1f030ab73516bdf45f0a50112ec06729435605e5", "url": "https://github.com/pravega/pravega/commit/1f030ab73516bdf45f0a50112ec06729435605e5", "message": "more UTs for coverage\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-01T09:50:02Z", "type": "commit"}, {"oid": "a415b81c20cc4ca20135f6d7b64adaa4211d5655", "url": "https://github.com/pravega/pravega/commit/a415b81c20cc4ca20135f6d7b64adaa4211d5655", "message": "test fixes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-01T15:07:29Z", "type": "commit"}, {"oid": "d36c925fa527dc66f954d352ffefb919c4ef910a", "url": "https://github.com/pravega/pravega/commit/d36c925fa527dc66f954d352ffefb919c4ef910a", "message": "Improve Code Coverage\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-02T04:16:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQxNg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448862416", "bodyText": "Please, remove thins kind of console prints from the code.", "author": "RaulGracia", "createdAt": "2020-07-02T09:12:20Z", "path": "client/src/test/java/io/pravega/client/control/impl/ControllerImplTest.java", "diffHunk": "@@ -955,6 +957,71 @@ public void getCurrentSegmentsKeyValueTable(Controller.KeyValueTableInfo request\n                     responseObserver.onError(Status.INTERNAL.withDescription(\"Server error\").asRuntimeException());\n                 }\n             }\n+\n+            @Override\n+            public void listKeyValueTablesInScope(Controller.KVTablesInScopeRequest request,\n+                                                  StreamObserver<Controller.KVTablesInScopeResponse> responseObserver) {\n+                if (request.getScope().getScope().equals(NON_EXISTENT)) {\n+                    responseObserver.onNext(Controller.KVTablesInScopeResponse\n+                            .newBuilder().setStatus(Controller.KVTablesInScopeResponse.Status.SCOPE_NOT_FOUND)\n+                            .build());\n+                    responseObserver.onCompleted();\n+                } else if (request.getScope().getScope().equals(\"deadline\")) {\n+                    // dont send any response\n+                    System.err.println(\"i am here\");", "originalCommit": "d36c925fa527dc66f954d352ffefb919c4ef910a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4NzcxNg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448887716", "bodyText": "removed", "author": "pbelgundi", "createdAt": "2020-07-02T09:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MjQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzEyNw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448863127", "bodyText": "Please, use single line imports as it was before.", "author": "RaulGracia", "createdAt": "2020-07-02T09:13:33Z", "path": "controller/src/main/java/io/pravega/controller/metrics/StreamMetrics.java", "diffHunk": "@@ -14,31 +14,7 @@\n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicReference;\n \n-import static io.pravega.shared.MetricsNames.CREATE_STREAM;\n-import static io.pravega.shared.MetricsNames.CREATE_STREAM_FAILED;\n-import static io.pravega.shared.MetricsNames.CREATE_STREAM_LATENCY;\n-import static io.pravega.shared.MetricsNames.DELETE_STREAM;\n-import static io.pravega.shared.MetricsNames.DELETE_STREAM_FAILED;\n-import static io.pravega.shared.MetricsNames.DELETE_STREAM_LATENCY;\n-import static io.pravega.shared.MetricsNames.OPEN_TRANSACTIONS;\n-import static io.pravega.shared.MetricsNames.RETENTION_FREQUENCY;\n-import static io.pravega.shared.MetricsNames.SEAL_STREAM;\n-import static io.pravega.shared.MetricsNames.SEAL_STREAM_FAILED;\n-import static io.pravega.shared.MetricsNames.SEAL_STREAM_LATENCY;\n-import static io.pravega.shared.MetricsNames.SEGMENTS_COUNT;\n-import static io.pravega.shared.MetricsNames.SEGMENTS_MERGES;\n-import static io.pravega.shared.MetricsNames.SEGMENTS_SPLITS;\n-import static io.pravega.shared.MetricsNames.TRUNCATE_STREAM;\n-import static io.pravega.shared.MetricsNames.TRUNCATE_STREAM_FAILED;\n-import static io.pravega.shared.MetricsNames.TRUNCATE_STREAM_LATENCY;\n-import static io.pravega.shared.MetricsNames.UPDATE_STREAM;\n-import static io.pravega.shared.MetricsNames.UPDATE_STREAM_FAILED;\n-import static io.pravega.shared.MetricsNames.UPDATE_STREAM_LATENCY;\n-import static io.pravega.shared.MetricsNames.CREATE_KVTABLE_LATENCY;\n-import static io.pravega.shared.MetricsNames.CREATE_KVTABLE;\n-import static io.pravega.shared.MetricsNames.KVTABLE_SEGMENTS_COUNT;\n-import static io.pravega.shared.MetricsNames.CREATE_KVTABLE_FAILED;\n-import static io.pravega.shared.MetricsNames.globalMetricName;\n+import static io.pravega.shared.MetricsNames.*;", "originalCommit": "d36c925fa527dc66f954d352ffefb919c4ef910a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3MDYzNg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448870636", "bodyText": "This optimization is done by IntelliJ and is not done manually.", "author": "pbelgundi", "createdAt": "2020-07-02T09:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4Nzg0OQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448887849", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-02T09:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NDQ3NA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448864474", "bodyText": "with Is what does it mean?", "author": "RaulGracia", "createdAt": "2020-07-02T09:15:48Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/kvtable/DeleteTableTask.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.eventProcessor.requesthandlers.kvtable;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.controller.retryable.RetryableException;\n+import io.pravega.controller.store.kvtable.KVTableMetadataStore;\n+import io.pravega.controller.store.kvtable.KVTOperationContext;\n+import io.pravega.controller.store.kvtable.KeyValueTable;\n+import io.pravega.controller.store.stream.StoreException;\n+import io.pravega.controller.task.KeyValueTable.TableMetadataTasks;\n+import io.pravega.controller.util.RetryHelper;\n+import io.pravega.shared.controller.event.kvtable.DeleteTableEvent;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Request handler for executing a delete operation for a KeyValueTable.\n+ */\n+@Slf4j\n+public class DeleteTableTask implements TableTask<DeleteTableEvent> {\n+\n+    private final KVTableMetadataStore kvtMetadataStore;\n+    private final TableMetadataTasks kvtMetadataTasks;\n+    private final ScheduledExecutorService executor;\n+\n+    public DeleteTableTask(final KVTableMetadataStore kvtMetaStore,\n+                           final TableMetadataTasks kvtMetaTasks,\n+                           final ScheduledExecutorService executor) {\n+        Preconditions.checkNotNull(kvtMetaStore);\n+        Preconditions.checkNotNull(kvtMetaTasks);\n+        Preconditions.checkNotNull(executor);\n+        this.kvtMetadataStore = kvtMetaStore;\n+        this.kvtMetadataTasks = kvtMetaTasks;\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> execute(final DeleteTableEvent request) {\n+        String scope = request.getScope();\n+        String kvt = request.getKvtName();\n+        long requestId = request.getRequestId();\n+        String kvTableId = request.getTableId().toString();\n+\n+        return RetryHelper.withRetriesAsync(() -> getKeyValueTable(scope, kvt)\n+                .thenCompose(table -> table.getId()).thenCompose(id -> {\n+            if (!id.equals(kvTableId)) {\n+                log.debug(\"Skipped processing delete event for KeyValueTable {}/{} with Is:{} as UUIDs did not match.\", scope, kvt, id);", "originalCommit": "d36c925fa527dc66f954d352ffefb919c4ef910a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4Nzk0MA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448887940", "bodyText": "typo fixed", "author": "pbelgundi", "createdAt": "2020-07-02T09:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NDQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NTIzMg==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448865232", "bodyText": "This can be simplified in a one-liner: final AuthContext ctx = (this.grpcAuthHelper.isAuthEnabled()) ? AuthContext.current() : null;", "author": "RaulGracia", "createdAt": "2020-07-02T09:17:06Z", "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -144,6 +146,67 @@ public void getCurrentSegmentsKeyValueTable(KeyValueTableInfo request, StreamObs\n                 responseObserver);\n     }\n \n+    @Override\n+    public void listKeyValueTablesInScope(Controller.KVTablesInScopeRequest request, StreamObserver<Controller.KVTablesInScopeResponse> responseObserver) {\n+        String scopeName = request.getScope().getScope();\n+        RequestTag requestTag = requestTracker.initializeAndTrackRequestTag(requestIdGenerator.get(),\n+                \"listKeyValueTables\", scopeName);\n+        log.info(requestTag.getRequestId(), \"listKeyValueTables called for scope {}.\", scopeName);\n+\n+        final AuthContext ctx;", "originalCommit": "d36c925fa527dc66f954d352ffefb919c4ef910a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4ODE2MA==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448888160", "bodyText": "done", "author": "pbelgundi", "createdAt": "2020-07-02T09:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NTIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NjE2Mw==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448866163", "bodyText": "Do we have a consistent structure for the logging related to KV tables in controller? If not, it may be a good idea, so we can apply reggex expressions with grep when looking into the logs.", "author": "RaulGracia", "createdAt": "2020-07-02T09:18:43Z", "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -144,6 +146,67 @@ public void getCurrentSegmentsKeyValueTable(KeyValueTableInfo request, StreamObs\n                 responseObserver);\n     }\n \n+    @Override\n+    public void listKeyValueTablesInScope(Controller.KVTablesInScopeRequest request, StreamObserver<Controller.KVTablesInScopeResponse> responseObserver) {\n+        String scopeName = request.getScope().getScope();\n+        RequestTag requestTag = requestTracker.initializeAndTrackRequestTag(requestIdGenerator.get(),\n+                \"listKeyValueTables\", scopeName);\n+        log.info(requestTag.getRequestId(), \"listKeyValueTables called for scope {}.\", scopeName);\n+\n+        final AuthContext ctx;\n+        if (this.grpcAuthHelper.isAuthEnabled()) {\n+            ctx = AuthContext.current();\n+        } else {\n+            ctx = null;\n+        }\n+\n+        authenticateExecuteAndProcessResults(\n+                () -> {\n+                    String result = this.grpcAuthHelper.checkAuthorization(\n+                            AuthResourceRepresentation.ofScope(scopeName),\n+                            AuthHandler.Permissions.READ,\n+                            ctx);\n+                    log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",", "originalCommit": "d36c925fa527dc66f954d352ffefb919c4ef910a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NDQ3OQ==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448874479", "bodyText": "This method is used by both streams and KVTables.", "author": "pbelgundi", "createdAt": "2020-07-02T09:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NjE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzE1Ng==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448867156", "bodyText": "This can be simplified in a one-liner: end = ((start + limit) >= sortedKVTablesList.size()) ? sortedKVTablesList.size() : start + limit;", "author": "RaulGracia", "createdAt": "2020-07-02T09:20:26Z", "path": "controller/src/main/java/io/pravega/controller/store/InMemoryScope.java", "diffHunk": "@@ -147,4 +151,32 @@ public String getName() {\n     @Override\n     public void refresh() {\n     }\n+\n+    @Override\n+    public CompletableFuture<Pair<List<String>, String>> listKeyValueTables(int limit, String continuationToken, Executor executor) {\n+        if (kvTablesMap == null) {\n+            return Futures.failedFuture(StoreException.create(StoreException.Type.DATA_NOT_FOUND, this.scopeName));\n+        }\n+        List<String> sortedKVTablesList = kvTablesMap.keySet().stream().collect(Collectors.toList());\n+        int start = 0, end = 0;\n+        if (!continuationToken.isEmpty()) {\n+            start = Integer.parseInt(continuationToken);\n+        }\n+\n+        if ((start + limit) >= sortedKVTablesList.size()) {", "originalCommit": "d36c925fa527dc66f954d352ffefb919c4ef910a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4Nzk5Ng==", "url": "https://github.com/pravega/pravega/pull/4881#discussion_r448887996", "bodyText": "done", "author": "pbelgundi", "createdAt": "2020-07-02T09:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzE1Ng=="}], "type": "inlineReview"}, {"oid": "e2beb6b6d3f4fce05b13f58e10c39ed6c1273692", "url": "https://github.com/pravega/pravega/commit/e2beb6b6d3f4fce05b13f58e10c39ed6c1273692", "message": "minor review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-02T09:42:21Z", "type": "commit"}]}