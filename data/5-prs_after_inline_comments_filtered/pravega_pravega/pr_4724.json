{"pr_number": 4724, "pr_title": "Issue 4721: Auto-reconciliation of BookKeeperLog Metadata.", "pr_createdAt": "2020-04-22T22:59:28Z", "pr_url": "https://github.com/pravega/pravega/pull/4724", "timeline": [{"oid": "627a71182aef0dc46c78bffb78fe9202ec55cc6c", "url": "https://github.com/pravega/pravega/commit/627a71182aef0dc46c78bffb78fe9202ec55cc6c", "message": "BookKeeperLog.reconcileMetadata\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-22T22:57:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NzQxMQ==", "url": "https://github.com/pravega/pravega/pull/4724#discussion_r413397411", "bodyText": "there is a case in which loadMetadata() can return null. Maybe this is handled by the equals generated by Lombok, but just wanted to create awareness on this corner case.", "author": "RaulGracia", "createdAt": "2020-04-22T23:19:36Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLog.java", "diffHunk": "@@ -870,6 +864,38 @@ private void persistMetadata(LogMetadata metadata, boolean create) throws Durabl\n         log.info(\"{} Metadata persisted ({}).\", this.traceObjectId, metadata);\n     }\n \n+    @VisibleForTesting\n+    protected Stat createZkMetadata(byte[] serializedMetadata) throws Exception {\n+        val result = new Stat();\n+        this.zkClient.create().creatingParentsIfNeeded().storingStatIn(result).forPath(this.logNodePath, serializedMetadata);\n+        return result;\n+    }\n+\n+    @VisibleForTesting\n+    protected Stat updateZkMetadata(byte[] serializedMetadata, int version) throws Exception {\n+        return this.zkClient.setData().withVersion(version).forPath(this.logNodePath, serializedMetadata);\n+    }\n+\n+    /**\n+     * Verifies the given {@link LogMetadata} against the actual one stored in ZooKeeper.\n+     *\n+     * @param metadata The Metadata to check.\n+     * @return True if the metadata stored in ZooKeeper is an identical match to the given one, false otherwise. If true,\n+     * {@link LogMetadata#getUpdateVersion()} will also be updated with the one stored in ZooKeeper.\n+     */\n+    private boolean reconcileMetadata(LogMetadata metadata) {\n+        try {\n+            val actualMetadata = loadMetadata();", "originalCommit": "627a71182aef0dc46c78bffb78fe9202ec55cc6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMTczMQ==", "url": "https://github.com/pravega/pravega/pull/4724#discussion_r413401731", "bodyText": "If we reached this point and we get a BadVersionException for an update that has been actually committed (origin of the issue), this PR can fix the problem (by not throwing, so keeping the BK ledgers along with the new ledger metadata) in the case that the zkClient has a session established with the server. However, as the origin of this issue itself is closely related to the instability of the network, it may be the case that the reconcileMetadata() fails as it is not able to load the current state (whatever it is) from Zookeeper (session may be lost or suspended). If I'm not mistaken, this will leave us in the same situation: the Zookeeper session will be re-established sooner or later, then the initialize() method will get executed upon a container recovery, and the same symptom will appear when executing Ledgers.fenceOut() (the metadata for a ledger is in ZK, but the ledger is not in BK), so the container will keep restarting indefinitely. The question is: what do we do at this point in the code if we cannot know what is the state of the data in Zookeeper? Should we try to reconcile when the container restarts again?", "author": "RaulGracia", "createdAt": "2020-04-22T23:30:36Z", "path": "segmentstore/storage/impl/src/main/java/io/pravega/segmentstore/storage/impl/bookkeeper/BookKeeperLog.java", "diffHunk": "@@ -840,28 +840,22 @@ private LogMetadata updateMetadata(LogMetadata currentMetadata, LedgerHandle new\n     private void persistMetadata(LogMetadata metadata, boolean create) throws DurableDataLogException {\n         try {\n             byte[] serializedMetadata = LogMetadata.SERIALIZER.serialize(metadata).getCopy();\n-            Stat result;\n-            if (create) {\n-                result = new Stat();\n-                this.zkClient.create()\n-                             .creatingParentsIfNeeded()\n-                             .storingStatIn(result)\n-                             .forPath(this.logNodePath, serializedMetadata);\n-            } else {\n-                result = this.zkClient.setData()\n-                                      .withVersion(metadata.getUpdateVersion())\n-                                      .forPath(this.logNodePath, serializedMetadata);\n-\n-            }\n-\n+            Stat result = create\n+                    ? createZkMetadata(serializedMetadata)\n+                    : updateZkMetadata(serializedMetadata, metadata.getUpdateVersion());\n             metadata.withUpdateVersion(result.getVersion());\n         } catch (KeeperException.NodeExistsException | KeeperException.BadVersionException keeperEx) {\n-            // We were fenced out. Clean up and throw appropriate exception.\n-            throw new DataLogWriterNotPrimaryException(\n-                    String.format(\"Unable to acquire exclusive write lock for log (path = '%s%s').\", this.zkClient.getNamespace(), this.logNodePath),\n-                    keeperEx);\n+            if (reconcileMetadata(metadata)) {", "originalCommit": "627a71182aef0dc46c78bffb78fe9202ec55cc6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3a8ed860a3392b1e1b843aeec270d3f9ab88fb2", "url": "https://github.com/pravega/pravega/commit/a3a8ed860a3392b1e1b843aeec270d3f9ab88fb2", "message": "Only deleting ledger if we were fenced out. All other cases leave it behind.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-23T15:22:19Z", "type": "commit"}, {"oid": "d94757645446b842219158a0ec0f26f195104148", "url": "https://github.com/pravega/pravega/commit/d94757645446b842219158a0ec0f26f195104148", "message": "Merge branch 'master' into issue-4721-bklog-metadata", "committedDate": "2020-04-23T15:23:25Z", "type": "commit"}, {"oid": "9cc11b77dca511a4e83d13bbe2128685c7da59e8", "url": "https://github.com/pravega/pravega/commit/9cc11b77dca511a4e83d13bbe2128685c7da59e8", "message": "Fixed unit test.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-23T16:27:04Z", "type": "commit"}]}