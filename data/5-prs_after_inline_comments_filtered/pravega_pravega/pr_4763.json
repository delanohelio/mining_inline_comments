{"pr_number": 4763, "pr_title": "Issue 4656: (KeyValue Tables) Sorted Table Segments", "pr_createdAt": "2020-04-30T17:45:54Z", "pr_url": "https://github.com/pravega/pravega/pull/4763", "timeline": [{"oid": "ef911343197440d18c3184731e56f78b3b775192", "url": "https://github.com/pravega/pravega/commit/ef911343197440d18c3184731e56f78b3b775192", "message": "Refactored TableSegment, TableEntry, TableKey in preparation for creating KeyValueTable. Moved a few classes around.\n\nRefactored SegmentHelper to make use of TableSegmentKey, TableSegmentEntry and TableSegmentKeyVersion which better map to what a Table Segment can do. Refactored upstream code and adjusted unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-02-24T23:51:07Z", "type": "commit"}, {"oid": "05ff3487b0c7e26b69c22e3ef1969823915141a2", "url": "https://github.com/pravega/pravega/commit/05ff3487b0c7e26b69c22e3ef1969823915141a2", "message": "Javadoc.\nMoved IteratorItem into its own file.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-02-25T00:21:59Z", "type": "commit"}, {"oid": "65f52b7d5bc0cc86d9490957498480d151703be2", "url": "https://github.com/pravega/pravega/commit/65f52b7d5bc0cc86d9490957498480d151703be2", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T18:03:54Z", "type": "commit"}, {"oid": "201e5f049c5ba118018d0633463cf739ea11e7e4", "url": "https://github.com/pravega/pravega/commit/201e5f049c5ba118018d0633463cf739ea11e7e4", "message": "Made IteratorState a class.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T18:21:59Z", "type": "commit"}, {"oid": "0bc363a9e6025c935db640f44603b7e67359f57a", "url": "https://github.com/pravega/pravega/commit/0bc363a9e6025c935db640f44603b7e67359f57a", "message": "TableSegmentImpl.\nTableSegmentIterator.\nFixed a bug in MockConnectionFactoryImpl that was closing an externally-provided Executor when it shouldn't be.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T22:30:08Z", "type": "commit"}, {"oid": "2e11121b0ee12384c7bae18228bf06d87bacc3b4", "url": "https://github.com/pravega/pravega/commit/2e11121b0ee12384c7bae18228bf06d87bacc3b4", "message": "Updated TableSegment.keyIterator and TableSegment.entryIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T22:48:52Z", "type": "commit"}, {"oid": "50bf936a5332db202e2153701412b7bc2dc64718", "url": "https://github.com/pravega/pravega/commit/50bf936a5332db202e2153701412b7bc2dc64718", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-02-25T22:49:16Z", "type": "commit"}, {"oid": "fc34a4e4d15ad134512155432fc88e525e2985c2", "url": "https://github.com/pravega/pravega/commit/fc34a4e4d15ad134512155432fc88e525e2985c2", "message": "Updated TableSegment.keyIterator and TableSegment.entryIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T22:50:20Z", "type": "commit"}, {"oid": "206d4847cf8fd13c7ed69deabe9abf7f047a9589", "url": "https://github.com/pravega/pravega/commit/206d4847cf8fd13c7ed69deabe9abf7f047a9589", "message": "Javadoc fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-02-26T18:14:46Z", "type": "commit"}, {"oid": "e848733fbbb3a14ce48713e73a5cfa520dbaca03", "url": "https://github.com/pravega/pravega/commit/e848733fbbb3a14ce48713e73a5cfa520dbaca03", "message": "Merge remote-tracking branch 'remotes/origin/master' into issue-4568-key-value-table-contracts", "committedDate": "2020-03-02T18:24:40Z", "type": "commit"}, {"oid": "bec961271dd6680d2f065f11505cd618bc50e14b", "url": "https://github.com/pravega/pravega/commit/bec961271dd6680d2f065f11505cd618bc50e14b", "message": "Refactored TableSegment, TableEntry, TableKey in preparation for creating KeyValueTable. Moved a few classes around.\n\nRefactored SegmentHelper to make use of TableSegmentKey, TableSegmentEntry and TableSegmentKeyVersion which better map to what a Table Segment can do. Refactored upstream code and adjusted unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "fdc48e967cae0a052e064c0178aacde4a34f7124", "url": "https://github.com/pravega/pravega/commit/fdc48e967cae0a052e064c0178aacde4a34f7124", "message": "Javadoc.\nMoved IteratorItem into its own file.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "57a4ae4f6a76424ffd789947232bb426e7266cec", "url": "https://github.com/pravega/pravega/commit/57a4ae4f6a76424ffd789947232bb426e7266cec", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "9a9cc3e0dbf4d34ac8d51a2e842b999dc2fc471d", "url": "https://github.com/pravega/pravega/commit/9a9cc3e0dbf4d34ac8d51a2e842b999dc2fc471d", "message": "Made IteratorState a class.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "2c138dd219c3bed59ad5998638c3cdf28e27471f", "url": "https://github.com/pravega/pravega/commit/2c138dd219c3bed59ad5998638c3cdf28e27471f", "message": "Updated TableSegment.keyIterator and TableSegment.entryIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "096cdd4843a0cb3dd11893b7c66592c858b1471e", "url": "https://github.com/pravega/pravega/commit/096cdd4843a0cb3dd11893b7c66592c858b1471e", "message": "Javadoc fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "5f81fbb3aa9d099e39986a9c258da838a4e7f630", "url": "https://github.com/pravega/pravega/commit/5f81fbb3aa9d099e39986a9c258da838a4e7f630", "message": "Merge branch 'issue-4568-key-value-table-contracts' of https://github.com/andreipaduroiu/pravega into issue-4568-key-value-table-contracts", "committedDate": "2020-03-04T16:17:34Z", "type": "commit"}, {"oid": "e8a3e9cb0186f3c390a8b500d71be299cceb8c8c", "url": "https://github.com/pravega/pravega/commit/e8a3e9cb0186f3c390a8b500d71be299cceb8c8c", "message": "Unit tests ... for coverage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T16:56:28Z", "type": "commit"}, {"oid": "1cadfa9c07c323757ad24197deccd3e6fb27f577", "url": "https://github.com/pravega/pravega/commit/1cadfa9c07c323757ad24197deccd3e6fb27f577", "message": "Increasing coverage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T21:05:59Z", "type": "commit"}, {"oid": "0fac12be237bb6f5053dad56b446a8e3011cb619", "url": "https://github.com/pravega/pravega/commit/0fac12be237bb6f5053dad56b446a8e3011cb619", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-03-04T22:48:59Z", "type": "commit"}, {"oid": "6d0d197c9913c94f37ec6f9d15361359a70dc33f", "url": "https://github.com/pravega/pravega/commit/6d0d197c9913c94f37ec6f9d15361359a70dc33f", "message": "Default methods.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T22:58:46Z", "type": "commit"}, {"oid": "3adfa77124cf1c79eac5528e8090a8f0ee3e403e", "url": "https://github.com/pravega/pravega/commit/3adfa77124cf1c79eac5528e8090a8f0ee3e403e", "message": "Added Wire Protocol support for prefix-filtered iterators.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T23:59:10Z", "type": "commit"}, {"oid": "df7480352538f93c7ccb10db86216513e019faa5", "url": "https://github.com/pravega/pravega/commit/df7480352538f93c7ccb10db86216513e019faa5", "message": "Fixed some Javadoc verbiage.\nSeparated IteratorState (interface) and IteratorStateImpl (class) to hide some implementation details.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-09T22:03:06Z", "type": "commit"}, {"oid": "afb51fed4467aa7df842b38eba434b58ade7326f", "url": "https://github.com/pravega/pravega/commit/afb51fed4467aa7df842b38eba434b58ade7326f", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-03-09T23:28:42Z", "type": "commit"}, {"oid": "4958aba6aea2fbf39df8a4e247bbe9d92ea3414c", "url": "https://github.com/pravega/pravega/commit/4958aba6aea2fbf39df8a4e247bbe9d92ea3414c", "message": "Merged with parent branch. Fixed some tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-09T23:36:56Z", "type": "commit"}, {"oid": "d3f2e4d22f861bc513255b0a1d26e916c66e905b", "url": "https://github.com/pravega/pravega/commit/d3f2e4d22f861bc513255b0a1d26e916c66e905b", "message": "Javadoc fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-17T16:00:03Z", "type": "commit"}, {"oid": "5fa9ebfaafd25626e344949f70230ca690a41ff4", "url": "https://github.com/pravega/pravega/commit/5fa9ebfaafd25626e344949f70230ca690a41ff4", "message": "KeyValueTable API variant #2\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-17T18:06:19Z", "type": "commit"}, {"oid": "1f6c79281346819c2d1247c9ed1b265d8a761be1", "url": "https://github.com/pravega/pravega/commit/1f6c79281346819c2d1247c9ed1b265d8a761be1", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-03-20T16:57:22Z", "type": "commit"}, {"oid": "53fd8fd07db76368d20a0e2c9b4657eb98044bba", "url": "https://github.com/pravega/pravega/commit/53fd8fd07db76368d20a0e2c9b4657eb98044bba", "message": "Plumbed through key prefix filter. Not yet implemented.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-30T22:39:15Z", "type": "commit"}, {"oid": "828167b4079c763a165fdb8825e091985970c94a", "url": "https://github.com/pravega/pravega/commit/828167b4079c763a165fdb8825e091985970c94a", "message": "TableStore.createSegment now supports 'sorted' flag.\nDefined SegmentSortedKeyIndex.\nWiring up SegmentSortedKeyIndex throughout the codebase.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-31T17:51:28Z", "type": "commit"}, {"oid": "2e4684fd95bbf7ab2916e258aad0d1f9a43890ba", "url": "https://github.com/pravega/pravega/commit/2e4684fd95bbf7ab2916e258aad0d1f9a43890ba", "message": "SegmentSortedKeyIndexImpl: In-Memory Key List.\nAdded BTreeList and BTreeListPage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-03T02:04:50Z", "type": "commit"}, {"oid": "258833c7092e362ce9842b09307bc549e817b3ab", "url": "https://github.com/pravega/pravega/commit/258833c7092e362ce9842b09307bc549e817b3ab", "message": "Merge remote-tracking branch 'remotes/origin/feature-key-value-tables' into issue-4656-iterator-filters\n\n# Conflicts:\n#\tclient/src/main/java/io/pravega/client/tables/IteratorState.java\n#\tclient/src/main/java/io/pravega/client/tables/KeyValueTable.java\n#\tclient/src/main/java/io/pravega/client/tables/TableKey.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegment.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegmentImpl.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegmentIterator.java\n#\tclient/src/test/java/io/pravega/client/tables/IteratorStateTests.java\n#\tclient/src/test/java/io/pravega/client/tables/TableEntryTests.java\n#\tclient/src/test/java/io/pravega/client/tables/TableKeyTests.java\n#\tclient/src/test/java/io/pravega/client/tables/impl/TableSegmentImplTest.java\n#\tcontroller/src/main/java/io/pravega/controller/server/SegmentHelper.java\n#\tsegmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImpl.java", "committedDate": "2020-04-03T02:09:11Z", "type": "commit"}, {"oid": "345d0d2922979b69a7517cb7c14f560ad7bce1ef", "url": "https://github.com/pravega/pravega/commit/345d0d2922979b69a7517cb7c14f560ad7bce1ef", "message": "Merge fallout.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-03T02:10:04Z", "type": "commit"}, {"oid": "4c1a805d41438dce4fa7a5880aa37a9c6d2e8e71", "url": "https://github.com/pravega/pravega/commit/4c1a805d41438dce4fa7a5880aa37a9c6d2e8e71", "message": "BTreeSetPage: unit tests and fixes.\nByteArrayComparator: unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-03T21:56:55Z", "type": "commit"}, {"oid": "76cea1f51b2f60336120b40f29aa8ca603d94629", "url": "https://github.com/pravega/pravega/commit/76cea1f51b2f60336120b40f29aa8ca603d94629", "message": "BTreeSet: update path.\nBTreeSetPage: updated tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-06T20:46:33Z", "type": "commit"}, {"oid": "8aacbad6094866f1115c516e85f0a0dd2813bf9b", "url": "https://github.com/pravega/pravega/commit/8aacbad6094866f1115c516e85f0a0dd2813bf9b", "message": "Refactored update path.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-07T16:10:32Z", "type": "commit"}, {"oid": "45850d0d727bf4221eeef4beaa2124f1f5360ce6", "url": "https://github.com/pravega/pravega/commit/45850d0d727bf4221eeef4beaa2124f1f5360ce6", "message": "Moved BTreeSet into its own package. Factored out some classes.\nItemIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-07T17:42:51Z", "type": "commit"}, {"oid": "0cf52e0b174eb52e629e28cbe45c98fab60c02e4", "url": "https://github.com/pravega/pravega/commit/0cf52e0b174eb52e629e28cbe45c98fab60c02e4", "message": "BTreeSet: unit tests and lots of bug fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-08T22:03:31Z", "type": "commit"}, {"oid": "35d81f9060c743cbf1de7f57efce0f51048acd86", "url": "https://github.com/pravega/pravega/commit/35d81f9060c743cbf1de7f57efce0f51048acd86", "message": "KeyTranslator, SegmentSortedKeyIndexImpl, Sorted Iterators.\n(Next is unit tests for all of these)\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-09T22:22:05Z", "type": "commit"}, {"oid": "2260e33ea82ba88fe40e7c96f6f9949e360fd199", "url": "https://github.com/pravega/pravega/commit/2260e33ea82ba88fe40e7c96f6f9949e360fd199", "message": "KeyTranslator: unit tests.\nSegmentSortedKeyIndexImpl: unit tests and bug fixes.\nBTreeSet: root page Id is now -1L.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-10T22:47:45Z", "type": "commit"}, {"oid": "3c71cf022dbac5dd6ff579b0cf92b5c0b0b9340c", "url": "https://github.com/pravega/pravega/commit/3c71cf022dbac5dd6ff579b0cf92b5c0b0b9340c", "message": "ContainerKeyIndex unit tests updates.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-13T18:13:18Z", "type": "commit"}, {"oid": "5ea83606c8960b9a52e955e43cd53a3fe92bdd98", "url": "https://github.com/pravega/pravega/commit/5ea83606c8960b9a52e955e43cd53a3fe92bdd98", "message": "Remaining unit tests.\nRemoved @Beta on TableStore. Added elsewhere as appropriate.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-13T23:54:36Z", "type": "commit"}, {"oid": "8f4abf549b8a6f903c4f3c028a4950ad6f4f5a58", "url": "https://github.com/pravega/pravega/commit/8f4abf549b8a6f903c4f3c028a4950ad6f4f5a58", "message": "Bug fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T18:23:58Z", "type": "commit"}, {"oid": "894bfd70d259a5789a01d052a67fb8d67a3c26a9", "url": "https://github.com/pravega/pravega/commit/894bfd70d259a5789a01d052a67fb8d67a3c26a9", "message": "Fixed a bug where the sorted iterator may return fewer keys than available if between the iteration initiation and the execution of `getNext`, a call to `persist()` and `updateSegmentIndexedOffset` occurred.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T23:58:32Z", "type": "commit"}, {"oid": "750a7bf6ba52447365870ad82383e6d4c3d38a1c", "url": "https://github.com/pravega/pravega/commit/750a7bf6ba52447365870ad82383e6d4c3d38a1c", "message": "Checkstyle.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-15T15:51:46Z", "type": "commit"}, {"oid": "24355582c3515958bc8b93fe47ffddb31f0bc834", "url": "https://github.com/pravega/pravega/commit/24355582c3515958bc8b93fe47ffddb31f0bc834", "message": "Merge remote-tracking branch 'remotes/origin/feature-key-value-tables' into issue-4656-iterator-filters\n\n# Conflicts:\n#\tcommon/src/main/java/io/pravega/common/util/ArrayView.java\n#\tsegmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerKeyIndex.java", "committedDate": "2020-04-30T17:22:35Z", "type": "commit"}, {"oid": "f49d624bdf368c4fece8d07b5f9f77234b686818", "url": "https://github.com/pravega/pravega/commit/f49d624bdf368c4fece8d07b5f9f77234b686818", "message": "Build fix.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-30T17:24:34Z", "type": "commit"}, {"oid": "7a3375d985df74e01255ae52043877f4a613c8da", "url": "https://github.com/pravega/pravega/commit/7a3375d985df74e01255ae52043877f4a613c8da", "message": "checkstyle\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-30T19:38:35Z", "type": "commit"}, {"oid": "23a8802f315d3b96f85dcc59a368a4410b1a342c", "url": "https://github.com/pravega/pravega/commit/23a8802f315d3b96f85dcc59a368a4410b1a342c", "message": "Merge remote-tracking branch 'remotes/origin/feature-key-value-tables' into issue-4656-iterator-filters\n\n# Conflicts:\n#\tcommon/src/main/java/io/pravega/common/util/ArrayView.java\n#\tcommon/src/main/java/io/pravega/common/util/AsyncIterator.java\n#\tcommon/src/test/java/io/pravega/common/concurrent/AsyncIteratorTests.java", "committedDate": "2020-05-04T15:12:40Z", "type": "commit"}, {"oid": "e23c68e3087386a7ba7090d86218ad916e2dabac", "url": "https://github.com/pravega/pravega/commit/e23c68e3087386a7ba7090d86218ad916e2dabac", "message": "Integrated with upstream branch.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-05-04T15:18:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNjYyMw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432106623", "bodyText": "It is not entirely clear to me why we are making this optional. Could we make all table segments sorted rather than deciding whether it needs to be sorted upon creation?", "author": "fpj", "createdAt": "2020-05-28T20:32:30Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/TableService.java", "diffHunk": "@@ -48,9 +48,9 @@ public TableService(SegmentContainerRegistry segmentContainerRegistry, SegmentTo\n     //region TableStore Implementation\n \n     @Override\n-    public CompletableFuture<Void> createSegment(String segmentName, Duration timeout) {\n+    public CompletableFuture<Void> createSegment(String segmentName, boolean sorted, Duration timeout) {", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDkyOA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432170928", "bodyText": "We could very well do that, but sorting doesn't come for free. There will be additional space requirement (keep all keys in sorted order) and some computational overhead to maintain that sorted index. Not all Table Segments may want that. If all they want is a Hash-Table-like structure with no order between keys, then regular Table Segments will do the job without the overhead of sorted index.\nAdditionally, there is no upgrade path for Hash Table Segments to Sorted Table Segments. IF we converted all HTS into STS, then we'd have to auto-upgrade existing Segments. That would be another challenge by its own.", "author": "andreipaduroiu", "createdAt": "2020-05-28T23:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNjYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxODUzNg==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432418536", "bodyText": "I guess we don't have a concrete answer to this, but I'm wondering about the recommendation we would give about the use of STS, like what's a reasonable number of sorted tables or what is a reasonable amount of traffic to guide users.\nThe migration is indeed a concern.", "author": "fpj", "createdAt": "2020-05-29T11:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNjYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MDA5Nw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432570097", "bodyText": "For now, I think we should keep all metadata (Segment Store and Controller) in hash tables - there is no need for sorted keys there.\nFor KVTs, we will use STSs because we want to use iterators. In the (near) future, we can add an option at the creation of KVTs that says \"I don't need iterators\" which should result in the use of Hash Table Segments as backing store (the API is identical between STS and HTS).\n\nI say \"near future\" because KVTs are going out as Beta, which gives us certain freedoms in altering the API without need for backwards compatibility while having this tag.", "author": "andreipaduroiu", "createdAt": "2020-05-29T15:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwNjYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODIxOQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432108219", "bodyText": "If the sorted key index is updated separately from the table segment index, then is there a chance that the user of this table sees an update in one but not in the other? For example, a regular lookup can return a key that is not present in a range query.\nPerhaps I'm missing an overall view of the flow for the calls in this interface.", "author": "fpj", "createdAt": "2020-05-28T20:35:49Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/SegmentSortedKeyIndex.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.tables;\n+\n+import com.google.common.annotations.Beta;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import javax.annotation.Nullable;\n+import lombok.Data;\n+\n+/**\n+ * Defines an index that maintains a Table Segment's Keys in lexicographic bitwise order.\n+ */\n+@Beta\n+interface SegmentSortedKeyIndex {\n+    /**\n+     * Include and persist updates that have been included in a Table Segment Index.\n+     *\n+     * @param bucketUpdates A Collection of {@link BucketUpdate} instances that reflect what keys have been added and/or\n+     *                      removed.\n+     * @param timeout       Timeout for the operation.\n+     * @return A CompletableFuture that, when completed, will indicate that the operation has completed.\n+     */\n+    CompletableFuture<Void> persistUpdate(Collection<BucketUpdate> bucketUpdates, Duration timeout);", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MTg3NA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432171874", "bodyText": "The Sorted Key Index (SKI) is updated just like the regular Container Key Index (CKI). There is a tail section (you found it below), which gets updated every time we get a user update. The non-tail section (indexed section) gets updated by the WriterTableProcessor when it indexes the next entries (to be indexed) from the tail. At this point, the tail is drained of those Keys, which are then only available in the indexed portion.\nWe update the SKI (via tail portion below) before we ack to the user. As such, the Key will be visible to the user both via the regular (get) API and in the Key/Entry iterator; there will be no inconsistency. The persistUpdate call is done in the background and is completely transparent to upstream code, and hence to the user.", "author": "andreipaduroiu", "createdAt": "2020-05-28T23:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNzI3OQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432417279", "bodyText": "Ok, makes sense.", "author": "fpj", "createdAt": "2020-05-29T11:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyNjE0OA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432126148", "bodyText": "The next three calls are to maintain a tail cache, if I understand it right. By reading these, it is not clear to me the expected flow of these calls for a user of this interface, and it is also not not clear what the consistency guarantee is.", "author": "fpj", "createdAt": "2020-05-28T21:11:47Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/SegmentSortedKeyIndex.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.tables;\n+\n+import com.google.common.annotations.Beta;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import javax.annotation.Nullable;\n+import lombok.Data;\n+\n+/**\n+ * Defines an index that maintains a Table Segment's Keys in lexicographic bitwise order.\n+ */\n+@Beta\n+interface SegmentSortedKeyIndex {\n+    /**\n+     * Include and persist updates that have been included in a Table Segment Index.\n+     *\n+     * @param bucketUpdates A Collection of {@link BucketUpdate} instances that reflect what keys have been added and/or\n+     *                      removed.\n+     * @param timeout       Timeout for the operation.\n+     * @return A CompletableFuture that, when completed, will indicate that the operation has completed.\n+     */\n+    CompletableFuture<Void> persistUpdate(Collection<BucketUpdate> bucketUpdates, Duration timeout);\n+\n+    /**\n+     * Includes the given {@link TableKeyBatch} which contains Keys that have recently been updated or removed, but not\n+     * yet indexed. These will be stored in a memory data structure until {@link #updateSegmentIndexOffset} will be invoked\n+     * with an offset that exceeds their offset.\n+     *\n+     * @param batch              The {@link TableKeyBatch} to include.\n+     * @param batchSegmentOffset The offset of the {@link TableKeyBatch}.\n+     */\n+    void includeTailUpdate(TableKeyBatch batch, long batchSegmentOffset);", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3Mzg4Nw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432173887", "bodyText": "This mirrors ContainerKeyIndex and ContainerKeyCache.\n\nincludeTailUpdate is called every time we insert, update or remove a key (from the API)\nincludeTailCache is called (optionally) after a container failover, if someone wants to access the Segment prior to it being fully indexed by the WriterTableProcessor (via persistUpdate.\n\nWhy is this important? Because the in-memory part is volatile; it is gone after a crash. We accumulate data into it via includeTailUpdate, but that information is gone after a crash. There is special code in the ContainerKeyIndex (pre-existing; not part of this PR) that auto-recovers a Table Segment if it is accessed immediately after a recovery but before it is indexed. (If you remember, we had a few problems last year when the Controller was complaining that Table Segment data was unavailable shortly after a recovery - this pre-recovery was introduced to handle that kind of problems).\n\n\nupdateSegmentIndexOffset is called by the WriterTableProcessor (indirectly, via ContainerKeyIndex to tell the SKI that everything prior to a certain offset has been indexed and it can remove it from the \"tail cache\" (i.e., if anyone needs that info, they can get it from the actual index, and no need to keep a heap data structure filled with redundant info).\n\nDoes this explanation make sense? These are all pre-existing concepts, and have just been applied to the SKI. The consumers of this interface are the ContainerKeyIndex, WriterTableProcessor which work in tandem to offer a unified view of the TableSegment to the upstream code.", "author": "andreipaduroiu", "createdAt": "2020-05-28T23:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyNjE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNjc3MQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432416771", "bodyText": "What actually got me to ask about it is whether this distinction between cached vs. indexed  belongs in the interface or whether it is an implementation detail leaking to the interface. But, if this is symmetric to an existing concept, then there is no point in arguing about it for this PR. At best, we should think about it separately.", "author": "fpj", "createdAt": "2020-05-29T11:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyNjE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MTIxOQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432571219", "bodyText": "While this is an interface, it's an internal one, and the whole point of it was to be able to mock it during unit tests. This is buried so deep within the stack that it will be hard for anyone to surface this if they want to.\nYes, it exposes details about the implementation, but this is the implementation.", "author": "andreipaduroiu", "createdAt": "2020-05-29T15:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyNjE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNTM5Mw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432435393", "bodyText": "I understand that there are different properties and API we want for this set implementation vs. the index implementation backed by a B+ tree. I'm wondering if there is any opportunity for consolidation as they are both backed by a B+ tree. I haven't done a close comparison, but at a high-level sounds possible. Any insight you can share?", "author": "fpj", "createdAt": "2020-05-29T11:58:36Z", "path": "common/src/main/java/io/pravega/common/util/btree/sets/BTreeSet.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util.btree.sets;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArrayComparator;\n+import java.time.Duration;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * A B+Tree-backed Set. Stores all items in a B+Tree Structure using a {@link ByteArrayComparator} for ordering them.\n+ *\n+ * NOTE: This component is in {@link Beta}. There are no guarantees about data or API compatibility with future versions.\n+ * Any component that is directly dependent on this one should either be in {@link Beta} as well.\n+ */\n+@NotThreadSafe\n+@Beta\n+@Slf4j\n+public class BTreeSet {", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3NTM2Mg==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432575362", "bodyText": "If I haven't already, we should file a follow-up issue to unify as much as we can between the existing BTreeIndex and this BTreeSet.\nI tried to do that during development of this class, however they are so different that I preferred to keep them apart.\nWhy are they different?\n\nBTreeIndex is a Key-Value index with all keys of the same length and all values of the same length. BTree set has no values and allows variable-length keys.\n\nThis allows BTreeIndex Nodes/Pages to more efficiently pack the data together (which is necessary (see next bullet)) and execute binary searches for lookups. For BTreeSet I have to keep a header with pointers to data so I can \"jump\" to an entry.\n\n\nBTreeIndex is meant to store data on an append-only medium, while BTreeSet couldn't care less (literally). BtreeIndex is stored directly on Tier2/LTS, while BTreeSet uses the Hash Table Segment itself to store nodes (each node is a Key-Value entry in the Table Segment it keeps keys for). As such, BTreeSet does a lot less work in managing data integrity and compaction (it does none of that!) since it delegates all of it to the Table Segment underneath it.\n\nDue to the fact that BTreeIndex stores on Append only media, it has to deal with write amplification so the amount of data that we need to write must be kept to a minimum, hence the branching factor of the node. BTreeIndex has a max node/page size of 32KB, which gives it a branching factor of about 1000 (more or less), thus reducing the depth of the tree and the size of the writes on updates.\nBTreeSet has no such limitation so its max page/node size is whatever the TableSegment allows as values (1MB as of today). Given that it has variable-length keys, the branching factor will vary, however there is a lower bound on it due to the fact that keys themselves have an upper bound on their length.", "author": "andreipaduroiu", "createdAt": "2020-05-29T15:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3NjMxNA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433676314", "bodyText": "Ok, I searched and couldn't find an issue, so I created #4840, and assigned it to you for now, feel free to reassign as needed. You can resolve this thread once you see this message, I want to make sure you see the created issue.", "author": "fpj", "createdAt": "2020-06-02T07:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNTM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjQyOA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432482428", "bodyText": "If ai understand the flow right, ContainerTableExtensionImpl implements ContainerTableExtension, which implements TableStore. keyIterator and entryIterator are calls in the TableStore interface, so that's how code using table segments use the sorted table segments.\nSegmentSortedKeyIndex is made available via ContainerKeyIndex, which is used in this class. This is how the TableStore interface connects with the SegmentSortedKeyIndex, is it right?", "author": "fpj", "createdAt": "2020-05-29T13:28:49Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImpl.java", "diffHunk": "@@ -269,16 +311,49 @@ public void close() {\n         return builder.getResultFutures();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T, V extends Collection<T>> V translateItems(V items, SegmentProperties segmentInfo, boolean isExternal,\n+                                                          BiFunction<KeyTranslator, T, T> translateFunction) {\n+        if (!ContainerSortedKeyIndex.isSortedTableSegment(segmentInfo)) {\n+            // Nothing to translate for non-sorted segments.\n+            return items;\n+        }\n+\n+        val t = isExternal ? SortedKeyIndexDataSource.EXTERNAL_TRANSLATOR : SortedKeyIndexDataSource.INTERNAL_TRANSLATOR;\n+        return (V) items.stream().map(i -> translateItem(i, t, translateFunction)).collect(Collectors.toList());\n+    }\n+\n+    private <T> T translateItem(T item, KeyTranslator translator, BiFunction<KeyTranslator, T, T> translateItem) {\n+        return item == null ? null : translateItem.apply(translator, item);\n+    }\n+\n     @Override\n     public CompletableFuture<AsyncIterator<IteratorItem<TableKey>>> keyIterator(String segmentName, IteratorArgs args) {\n-        logRequest(\"keyIterator\", segmentName);\n-        return newIterator(segmentName, args, TableBucketReader::key);\n+        return this.segmentContainer.forSegment(segmentName, args.getFetchTimeout())\n+                .thenComposeAsync(segment -> {\n+                    if (ContainerSortedKeyIndex.isSortedTableSegment(segment.getInfo())) {", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3NzI1NQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432577255", "bodyText": "First paragraph is 100% spot on.\nSecond paragraph:\n\nSortedKeyIndex is indeed exposed via ContainerKeyIndex, but it is only used in ContainerTableExtensionImpl, which, depending on whether the Segment is Sorted or not, uses it or uses the default iterator.\nThe connection is done in the ContainerTableExtensionImpl and again (in the back-end) in WriterTableProcessor that invokes its persistUpdate API to insert or remove keys (only when keys are inserted or removed, but not on update).\n\n\nClarification in case I didn't explain it properly: the BTreeSet behind the SKI is only updated when a Key is inserted or removed. It is not touched when a Key is updated. Hence the frequency of writes to that data structure is a function of inserts or deletes, and not in-place updates.", "author": "andreipaduroiu", "createdAt": "2020-05-29T15:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI0MQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432484241", "bodyText": "I'm curious, why you think it is a good idea to have booleans for inclusion rather than pick one option and go with it?", "author": "fpj", "createdAt": "2020-05-29T13:31:51Z", "path": "common/src/main/java/io/pravega/common/util/btree/sets/BTreeSet.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util.btree.sets;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArrayComparator;\n+import java.time.Duration;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * A B+Tree-backed Set. Stores all items in a B+Tree Structure using a {@link ByteArrayComparator} for ordering them.\n+ *\n+ * NOTE: This component is in {@link Beta}. There are no guarantees about data or API compatibility with future versions.\n+ * Any component that is directly dependent on this one should either be in {@link Beta} as well.\n+ */\n+@NotThreadSafe\n+@Beta\n+@Slf4j\n+public class BTreeSet {\n+    //region Members\n+\n+    public static final Comparator<ArrayView> COMPARATOR = new ByteArrayComparator()::compare;\n+    private static final Comparator<PagePointer> POINTER_COMPARATOR = PagePointer.getComparator(COMPARATOR);\n+\n+    private final int maxPageSize;\n+    private final int maxItemSize;\n+    @NonNull\n+    private final ReadPage read;\n+    @NonNull\n+    private final PersistPages update;\n+    @NonNull\n+    private final Executor executor;\n+    @NonNull\n+    private final String traceLogId;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link BTreeSet} class.\n+     *\n+     * @param maxPageSize The maximum size, in bytes, of any page.\n+     * @param maxItemSize The maximum size, in bytes, of any single item in the {@link BTreeSet}.\n+     * @param read        A {@link ReadPage} function that can be used to fetch a single {@link BTreeSet} page from an\n+     *                    external data source.\n+     * @param update      A {@link PersistPages} function that can be used to store and delete multiple {@link BTreeSet}\n+     *                    pages to/from an external data source.\n+     * @param executor    Executor for async operations.\n+     * @param traceLogId  Trace id for logging.\n+     */\n+    public BTreeSet(int maxPageSize, int maxItemSize, @NonNull ReadPage read, @NonNull PersistPages update,\n+                    @NonNull Executor executor, String traceLogId) {\n+        Preconditions.checkArgument(maxItemSize < maxPageSize / 2, \"maxItemSize must be at most half of maxPageSize.\");\n+        this.maxItemSize = maxItemSize;\n+        this.maxPageSize = maxPageSize;\n+        this.read = read;\n+        this.update = update;\n+        this.executor = executor;\n+        this.traceLogId = traceLogId == null ? \"\" : traceLogId;\n+    }\n+\n+    //endregion\n+\n+    //region Updates\n+\n+    /**\n+     * Atomically inserts the items in 'toInsert' into the {@link BTreeSet} and removes the items in 'toRemove'\n+     * from the {@link BTreeSet}. No duplicates are allowed; the same item cannot exist multiple times in either 'toInsert'\n+     * or 'toRemove' or in both of them.\n+     *\n+     * @param toInsert      (Optional). A Collection of {@link ArrayView} instances representing the items to insert.\n+     *                      If an item is already present, it will not be reinserted (updates are idempotent).\n+     * @param toRemove      (Optional). A Collection of {@link ArrayView} instances representing the items to remove.\n+     * @param getNextPageId A Supplier that, when invoked, will return a unique number representing the Id of the next\n+     *                      {@link BTreeSet} page that has to be generated.\n+     * @param timeout       Timeout for the operation.\n+     * @return A CompletableFuture that, when completed normally, will indicate that the updates have been applied\n+     * successfully. If the operation failed, the Future will be completed with the appropriate exception.\n+     */\n+    public CompletableFuture<Void> update(@Nullable Collection<? extends ArrayView> toInsert, @Nullable Collection<? extends ArrayView> toRemove,\n+                                          @NonNull Supplier<Long> getNextPageId, @NonNull Duration timeout) {\n+        TimeoutTimer timer = new TimeoutTimer(timeout);\n+        val updates = new ArrayList<UpdateItem>();\n+        int insertCount = collectUpdates(toInsert, false, updates);\n+        int removeCount = collectUpdates(toRemove, true, updates);\n+        updates.sort(UpdateItem::compareTo);\n+        log.debug(\"{}: Update (Insert={}, Remove={}).\", this.traceLogId, insertCount, removeCount);\n+        if (updates.isEmpty()) {\n+            // Nothing to do.\n+            return CompletableFuture.completedFuture(null);\n+        }\n+\n+        // The updates are sorted, so any empty items will be placed first.\n+        Preconditions.checkArgument(updates.get(0).getItem().getLength() > 0, \"No empty items allowed.\");\n+        return applyUpdates(updates.iterator(), timer)\n+                .thenApply(pageCollection -> processModifiedPages(pageCollection, getNextPageId))\n+                .thenComposeAsync(pageCollection -> writePages(pageCollection, timer), this.executor);\n+    }\n+\n+    private int collectUpdates(Collection<? extends ArrayView> items, boolean isRemoval, List<UpdateItem> updates) {\n+        if (items == null) {\n+            return 0;\n+        }\n+\n+        for (val i : items) {\n+            Preconditions.checkArgument(i.getLength() <= this.maxItemSize,\n+                    \"Item exceeds maximum allowed length (%s).\", this.maxItemSize);\n+            updates.add(new UpdateItem(i, isRemoval));\n+        }\n+        return items.size();\n+    }\n+\n+    private CompletableFuture<PageCollection> applyUpdates(Iterator<UpdateItem> items, TimeoutTimer timer) {\n+        val pageCollection = new PageCollection();\n+        val lastPage = new AtomicReference<BTreeSetPage.LeafPage>(null);\n+        val lastPageUpdates = new ArrayList<UpdateItem>();\n+        return Futures.loop(\n+                items::hasNext,\n+                () -> {\n+                    // Locate the page where the update is to be executed. Do not apply it yet as it is more efficient\n+                    // to bulk-apply multiple at once. Collect all updates for each Page, and only apply them once we have\n+                    // \"moved on\" to another page.\n+                    val next = items.next();\n+                    return locatePage(next.getItem(), pageCollection, timer)\n+                            .thenAccept(page -> {\n+                                val last = lastPage.get();\n+                                if (page != last) {\n+                                    // This key goes to a different page than the one we were looking at.\n+                                    if (last != null) {\n+                                        // Commit the outstanding updates.\n+                                        last.update(lastPageUpdates);\n+                                    }\n+\n+                                    // Update the pointers.\n+                                    lastPage.set(page);\n+                                    lastPageUpdates.clear();\n+                                }\n+\n+                                // Record the current update.\n+                                lastPageUpdates.add(next);\n+                            });\n+                },\n+                this.executor)\n+                .thenApplyAsync(v -> {\n+                    // We need not forget to apply the last batch of updates from the last page.\n+                    if (lastPage.get() != null) {\n+                        lastPage.get().update(lastPageUpdates);\n+                    }\n+                    return pageCollection;\n+                }, this.executor);\n+    }\n+\n+    private PageCollection processModifiedPages(PageCollection pageCollection, Supplier<Long> getNewPageId) {\n+        Collection<BTreeSetPage> candidates = pageCollection.getLeafPages();\n+        while (!candidates.isEmpty()) {\n+            // Process each candidate and determine if it should be deleted or split into multiple pages.\n+            val tmc = new TreeModificationContext(pageCollection);\n+            for (BTreeSetPage p : candidates) {\n+                if (p.getItemCount() == 0) {\n+                    deletePage(p, tmc);\n+                } else {\n+                    splitPageIfNecessary(p, getNewPageId, tmc);\n+                }\n+            }\n+\n+            // Update those pages' parents.\n+            tmc.accept(BTreeSetPage.IndexPage::addChildren, BTreeSetPage.IndexPage::removeChildren, POINTER_COMPARATOR);\n+            candidates = tmc.getModifiedParents();\n+        }\n+\n+        pageCollection.getIndexPages().forEach(p -> {\n+            if (p.isModified()) {\n+                p.seal();\n+            }\n+        });\n+        return pageCollection;\n+    }\n+\n+    private void deletePage(BTreeSetPage p, TreeModificationContext context) {\n+        // Delete the page if it's empty, but only if it's not the root page.\n+        if (p.getPagePointer().hasParent()) {\n+            context.getPageCollection().pageDeleted(p);\n+            context.deleted(p.getPagePointer());\n+            log.debug(\"{}: Deleted empty page {}.\", this.traceLogId, p.getPagePointer());\n+        } else if (p.isIndexPage()) {\n+            p = BTreeSetPage.emptyLeafRoot();\n+            p.markModified();\n+            context.getPageCollection().pageUpdated(p);\n+            log.debug(\"{}: Replaced empty Index Root with empty Leaf Root.\", this.traceLogId);\n+        }\n+    }\n+\n+    private void splitPageIfNecessary(BTreeSetPage p, Supplier<Long> getNewPageId, TreeModificationContext context) {\n+        val splits = p.split(this.maxPageSize, getNewPageId);\n+        if (splits == null) {\n+            // No split necessary\n+            return;\n+        }\n+\n+        if (p.getPagePointer().hasParent()) {\n+            Preconditions.checkArgument(splits.get(0).getPagePointer().getPageId() == p.getPagePointer().getPageId(),\n+                    \"First split result (%s) not current page (%s).\", splits.get(0).getPagePointer(), p.getPagePointer());\n+        } else {\n+            // If we split the root, the new pages will already point to the root; we must create a blank\n+            // index root page, which will be updated in the next step.\n+            context.getPageCollection().pageUpdated(BTreeSetPage.emptyIndexRoot());\n+        }\n+\n+        splits.forEach(splitPage -> {\n+            context.getPageCollection().pageUpdated(splitPage);\n+            context.created(splitPage.getPagePointer());\n+        });\n+        log.debug(\"{}: Page '{}' split into {}: {}.\", this.traceLogId, p, splits.size(), splits);\n+    }\n+\n+    private CompletableFuture<Void> writePages(@NonNull PageCollection pageCollection, TimeoutTimer timer) {\n+        // Order the pages from bottom up. The upstream code may have limitations in how much it can update atomically,\n+        // so it may commit this in multiple non-atomic operations. If the process is interrupted mid-way then we want\n+        // to ensure that parent pages aren't updated before leaf pages (which would cause index corruptions - i.e., by\n+        // pointing to inexistent pages).\n+        val processedPageIds = new HashSet<Long>();\n+\n+        // First collect updates. Begin from the bottom (Leaf Pages).\n+        val toWrite = new ArrayList<Map.Entry<Long, ArrayView>>();\n+        collectWriteCandidates(pageCollection.getLeafPages(), toWrite, processedPageIds, pageCollection);\n+\n+        // Newly split pages may not be reachable from any modified Leaf Pages. Collect them too.\n+        collectWriteCandidates(pageCollection.getIndexPages(), toWrite, processedPageIds, pageCollection);\n+\n+        // Then collect deletions, making sure we also consider all their parents (which should be modified/deleted as well).\n+        collectWriteCandidates(pageCollection.getDeletedPagesParents(), toWrite, processedPageIds, pageCollection);\n+        log.debug(\"{}: Persist (Updates={}, Deletions={}).\", this.traceLogId, toWrite.size(), pageCollection.getDeletedPageIds().size());\n+        return this.update.apply(toWrite, pageCollection.getDeletedPageIds(), timer.getRemaining());\n+    }\n+\n+    private void collectWriteCandidates(Collection<BTreeSetPage> candidates, List<Map.Entry<Long, ArrayView>> toWrite,\n+                                        Set<Long> processedIds, PageCollection pageCollection) {\n+        while (!candidates.isEmpty()) {\n+            val next = new ArrayList<BTreeSetPage>();\n+            candidates.stream()\n+                    .filter(p -> p.isModified() && !processedIds.contains(p.getPagePointer().getPageId()))\n+                    .forEach(p -> {\n+                        toWrite.add(new AbstractMap.SimpleImmutableEntry<>(p.getPagePointer().getPageId(), p.getData()));\n+                        val parent = pageCollection.get(p.getPagePointer().getParentPageId());\n+                        assert p.getPagePointer().hasParent() == (parent != null);\n+                        processedIds.add(p.getPagePointer().getPageId());\n+                        if (parent != null) {\n+                            next.add(parent);\n+                        }\n+                    });\n+            candidates = next;\n+        }\n+    }\n+\n+    //endregion\n+\n+    //region Queries\n+\n+    /**\n+     * Returns an {@link AsyncIterator} that will iterate through all the items in this {@link BTreeSet} within the\n+     * specified bounds. All iterated items will be returned in lexicographic order (smallest to largest).\n+     * See {@link ByteArrayComparator} for ordering details.\n+     *\n+     * @param firstItem          An {@link ArrayView} indicating the first Item to iterate from. If null, the iteration\n+     *                           will begin with the first item in the index.\n+     * @param firstItemInclusive If true, firstIem will be included in the iteration (provided it exists), otherwise it", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3ODY4Ng==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432578686", "bodyText": "Because sometimes I need to iterate starting with an element and sometimes I need to iterate immediately after an element (i.e., I know the last element I processed, so give me the next one).", "author": "andreipaduroiu", "createdAt": "2020-05-29T15:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyOTg5Nw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433829897", "bodyText": "There is probably something silly I'm missing, but they seem unnecessary, here is my reasoning:\n\nit should be always exclusive\nif the caller has the first item and wants it inclusive, then it can use the first item it already has.\nif the caller has the last item and wants it inclusive, then it can return the last item once there are no more items to read within the range of the iterator, then return the last one.\n\nWhat am I missing?", "author": "fpj", "createdAt": "2020-06-02T12:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1MzMwNQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433953305", "bodyText": "if the caller has the first item and wants it inclusive, then it can use the first item it already has.\n\nThe caller may have the first item, but the first item may not be part of the set. If we always make it exclusive, the caller may erroneously include that first item in the result even if it is not part of the set.\nThis is a low-level API. I don't see a problem with giving this type of granularity to the user; in the future we may have other use cases that warrant this flexibility.\nAnother reason would be to make it consistent with the similar method in BTreeIndex, which has uses for both inclusive and exclusive.", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODgxMw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r434518813", "bodyText": "The caller may have the first item, but the first item may not be part of the set. If we always make it exclusive, the caller may erroneously include that first item in the result even if it is not part of the set.\n\nIt is correct that making it always exclusive requires a different code path to add the first or last when you want it inclusive, and that makes it more prone to errors. The developer can always set the flag incorrectly, though.\n\nThis is a low-level API.\n\nThis is part of common, which is principle should be usable even outside Pravega. I'm curious, is this common in the implementation of iterators?  Do you know of other examples outside Pravega that implement iterators like this?\n\nAnother reason would be to make it consistent\n\nWe should make it consistent, at least for this PR as we are not really changing BTreeIndex.", "author": "fpj", "createdAt": "2020-06-03T12:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNTcxMQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r434725711", "bodyText": "Some examples I could quickly came up with:\n\nJava IntStream.range(start, end) and IntStream.rangeClosed(start, end)\nJava NavigableSet\n\nheadSet\nsubSet\nSimilarly for NavigableMap\n\n\n\nNavigableSet and NavigableMap are what I based the APIs for BTreeSet and BTreeIndex on (more or less).", "author": "andreipaduroiu", "createdAt": "2020-06-03T17:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4ODMyOA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432488328", "bodyText": "It is not great that we have to create an exception for the serialization versioning. I understand that the concern is the overhead of serializing, but could you elaborate on why you believe this is concern that justifies creating an exception for not using VersionedSerializer? Is there a way of using VersionedSerializer that could solve the issue, e.g., changing a version such that it is not backwards compatible when the overhead is high?", "author": "fpj", "createdAt": "2020-05-29T13:38:42Z", "path": "common/src/main/java/io/pravega/common/util/btree/sets/BTreeSetPage.java", "diffHunk": "@@ -0,0 +1,879 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util.btree.sets;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.BitConverter;\n+import io.pravega.common.util.ByteArrayComparator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.common.util.IllegalDataFormatException;\n+import io.pravega.common.util.btree.SearchResult;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import javax.annotation.concurrent.NotThreadSafe;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+\n+/**\n+ * Represents a Page (Node) within a {@link BTreeSet}. Pages can be of type {@link IndexPage} or {@link LeafPage}.\n+ */\n+@NotThreadSafe\n+abstract class BTreeSetPage {\n+    //region Serialization format\n+\n+    /**\n+     * Format Version related fields. The version itself is the first byte of the serialization. When we will have to\n+     * support multiple versions, we will need to read this byte and choose the appropriate deserialization approach.\n+     * We cannot use VersionedSerializer in here - doing so would prevent us from efficiently querying and modifying the", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MDUxNQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r432580515", "bodyText": "The problem with VersionedSerializer is that it forces me to read the whole input (buffer) and store it in another buffer. That is, it reads the data before it gives it to me.\nIn this case, since I'm always dealing with huge chunks of data, reading it (and copying it, since that's what VersionedSerializer does) will add extra CPU and GC overhead that will slow down the whole process.\nThis reason alone was enough for me to choose not to use the convenience of VersionedSerializer and use a version flag instead.", "author": "andreipaduroiu", "createdAt": "2020-05-29T15:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4ODMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxMzk5MQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r434513991", "bodyText": "I'm concerned that at this point I don't understand when it is acceptable to not comply and version directly instead of using the versioned serializer. One of the main goals of versioned serializer was to make sure that we are versioning persistent and external data structures across Pravega in a consistent manner.\nIt might be acceptable to do it due to the performance concern, but I'm wondering what the criteria is for exceptions for other PRs.", "author": "fpj", "createdAt": "2020-06-03T12:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4ODMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDQ5OQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r434734499", "bodyText": "Every other place where we use VersionedSerializer we have very small amounts of data to store and the act of writing/reading is rare (i.e., we read data from somewhere and store it as objects in memory and we occasionally need to persist some updates).\nThis data structure contains very little metadata and a lot of external (user) data which is opaque to us. We do a lot of frequent reads and we should not be holding that data in the Java heap long-term. When we read such a node from wherever we store it we deal with a lot of data (1MB per read) that we want to avoid having to re-read and copy in memory. VersionedSerializer would force that copy. By doing it with a version flag we can avoid that.", "author": "andreipaduroiu", "createdAt": "2020-06-03T17:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4ODMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2MDkyOA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r436060928", "bodyText": "(copy-pasting offline conversation conclusion)\nThe way to perform an upgrade with this format is as follows:\n\nWe can create new serialization versions by adding new fields at the end of the current serialization.\nThere isn't anything to do at this time in terms of accepting a larger input for BTreeSetPage. The format encodes the length of the BTreeSetPage and the parsing logic validates that the given buffer isn't smaller.\n\nThe page format is: {Header}{ItemOffsets}{ItemData}{PageId}.\nThe length of an item is calculated by getting the difference between that item's offset and the next item's offset.\nThen line 152 slices the contents buffer to the size encoded in the header.\n\n\nSo in case of a backwards compatible upgrade (from Version 1), it would work like this:\n\nNew code defines Version 2, but does not use it yet (it just understands it)\nNew code will serialize using Version 1, but encode its additional data after the end of the buffer. It will make sure that the size encoded in the header ends where the old code expects it to.\nOld code will read this size and slice the input, essentially dropping new data.\nNew code will be programmed to read past this (if anything) and process any additional fields.\nEventually, in a subsequent release, we will change the code to serialize to Version 2, thus completing the upgrade.\n\n\n\nNot as smooth as VersionedSerializer (which was doing all this legwork for us), but this is the tradeoff I'm willing to accept for better perf.", "author": "andreipaduroiu", "createdAt": "2020-06-05T17:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4ODMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3OTU4MQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433679581", "bodyText": "There is a typo in firstIem.", "author": "fpj", "createdAt": "2020-06-02T07:39:28Z", "path": "common/src/main/java/io/pravega/common/util/btree/sets/BTreeSet.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util.btree.sets;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArrayComparator;\n+import java.time.Duration;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * A B+Tree-backed Set. Stores all items in a B+Tree Structure using a {@link ByteArrayComparator} for ordering them.\n+ *\n+ * NOTE: This component is in {@link Beta}. There are no guarantees about data or API compatibility with future versions.\n+ * Any component that is directly dependent on this one should either be in {@link Beta} as well.\n+ */\n+@NotThreadSafe\n+@Beta\n+@Slf4j\n+public class BTreeSet {\n+    //region Members\n+\n+    public static final Comparator<ArrayView> COMPARATOR = new ByteArrayComparator()::compare;\n+    private static final Comparator<PagePointer> POINTER_COMPARATOR = PagePointer.getComparator(COMPARATOR);\n+\n+    private final int maxPageSize;\n+    private final int maxItemSize;\n+    @NonNull\n+    private final ReadPage read;\n+    @NonNull\n+    private final PersistPages update;\n+    @NonNull\n+    private final Executor executor;\n+    @NonNull\n+    private final String traceLogId;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link BTreeSet} class.\n+     *\n+     * @param maxPageSize The maximum size, in bytes, of any page.\n+     * @param maxItemSize The maximum size, in bytes, of any single item in the {@link BTreeSet}.\n+     * @param read        A {@link ReadPage} function that can be used to fetch a single {@link BTreeSet} page from an\n+     *                    external data source.\n+     * @param update      A {@link PersistPages} function that can be used to store and delete multiple {@link BTreeSet}\n+     *                    pages to/from an external data source.\n+     * @param executor    Executor for async operations.\n+     * @param traceLogId  Trace id for logging.\n+     */\n+    public BTreeSet(int maxPageSize, int maxItemSize, @NonNull ReadPage read, @NonNull PersistPages update,\n+                    @NonNull Executor executor, String traceLogId) {\n+        Preconditions.checkArgument(maxItemSize < maxPageSize / 2, \"maxItemSize must be at most half of maxPageSize.\");\n+        this.maxItemSize = maxItemSize;\n+        this.maxPageSize = maxPageSize;\n+        this.read = read;\n+        this.update = update;\n+        this.executor = executor;\n+        this.traceLogId = traceLogId == null ? \"\" : traceLogId;\n+    }\n+\n+    //endregion\n+\n+    //region Updates\n+\n+    /**\n+     * Atomically inserts the items in 'toInsert' into the {@link BTreeSet} and removes the items in 'toRemove'\n+     * from the {@link BTreeSet}. No duplicates are allowed; the same item cannot exist multiple times in either 'toInsert'\n+     * or 'toRemove' or in both of them.\n+     *\n+     * @param toInsert      (Optional). A Collection of {@link ArrayView} instances representing the items to insert.\n+     *                      If an item is already present, it will not be reinserted (updates are idempotent).\n+     * @param toRemove      (Optional). A Collection of {@link ArrayView} instances representing the items to remove.\n+     * @param getNextPageId A Supplier that, when invoked, will return a unique number representing the Id of the next\n+     *                      {@link BTreeSet} page that has to be generated.\n+     * @param timeout       Timeout for the operation.\n+     * @return A CompletableFuture that, when completed normally, will indicate that the updates have been applied\n+     * successfully. If the operation failed, the Future will be completed with the appropriate exception.\n+     */\n+    public CompletableFuture<Void> update(@Nullable Collection<? extends ArrayView> toInsert, @Nullable Collection<? extends ArrayView> toRemove,\n+                                          @NonNull Supplier<Long> getNextPageId, @NonNull Duration timeout) {\n+        TimeoutTimer timer = new TimeoutTimer(timeout);\n+        val updates = new ArrayList<UpdateItem>();\n+        int insertCount = collectUpdates(toInsert, false, updates);\n+        int removeCount = collectUpdates(toRemove, true, updates);\n+        updates.sort(UpdateItem::compareTo);\n+        log.debug(\"{}: Update (Insert={}, Remove={}).\", this.traceLogId, insertCount, removeCount);\n+        if (updates.isEmpty()) {\n+            // Nothing to do.\n+            return CompletableFuture.completedFuture(null);\n+        }\n+\n+        // The updates are sorted, so any empty items will be placed first.\n+        Preconditions.checkArgument(updates.get(0).getItem().getLength() > 0, \"No empty items allowed.\");\n+        return applyUpdates(updates.iterator(), timer)\n+                .thenApply(pageCollection -> processModifiedPages(pageCollection, getNextPageId))\n+                .thenComposeAsync(pageCollection -> writePages(pageCollection, timer), this.executor);\n+    }\n+\n+    private int collectUpdates(Collection<? extends ArrayView> items, boolean isRemoval, List<UpdateItem> updates) {\n+        if (items == null) {\n+            return 0;\n+        }\n+\n+        for (val i : items) {\n+            Preconditions.checkArgument(i.getLength() <= this.maxItemSize,\n+                    \"Item exceeds maximum allowed length (%s).\", this.maxItemSize);\n+            updates.add(new UpdateItem(i, isRemoval));\n+        }\n+        return items.size();\n+    }\n+\n+    private CompletableFuture<PageCollection> applyUpdates(Iterator<UpdateItem> items, TimeoutTimer timer) {\n+        val pageCollection = new PageCollection();\n+        val lastPage = new AtomicReference<BTreeSetPage.LeafPage>(null);\n+        val lastPageUpdates = new ArrayList<UpdateItem>();\n+        return Futures.loop(\n+                items::hasNext,\n+                () -> {\n+                    // Locate the page where the update is to be executed. Do not apply it yet as it is more efficient\n+                    // to bulk-apply multiple at once. Collect all updates for each Page, and only apply them once we have\n+                    // \"moved on\" to another page.\n+                    val next = items.next();\n+                    return locatePage(next.getItem(), pageCollection, timer)\n+                            .thenAccept(page -> {\n+                                val last = lastPage.get();\n+                                if (page != last) {\n+                                    // This key goes to a different page than the one we were looking at.\n+                                    if (last != null) {\n+                                        // Commit the outstanding updates.\n+                                        last.update(lastPageUpdates);\n+                                    }\n+\n+                                    // Update the pointers.\n+                                    lastPage.set(page);\n+                                    lastPageUpdates.clear();\n+                                }\n+\n+                                // Record the current update.\n+                                lastPageUpdates.add(next);\n+                            });\n+                },\n+                this.executor)\n+                .thenApplyAsync(v -> {\n+                    // We need not forget to apply the last batch of updates from the last page.\n+                    if (lastPage.get() != null) {\n+                        lastPage.get().update(lastPageUpdates);\n+                    }\n+                    return pageCollection;\n+                }, this.executor);\n+    }\n+\n+    private PageCollection processModifiedPages(PageCollection pageCollection, Supplier<Long> getNewPageId) {\n+        Collection<BTreeSetPage> candidates = pageCollection.getLeafPages();\n+        while (!candidates.isEmpty()) {\n+            // Process each candidate and determine if it should be deleted or split into multiple pages.\n+            val tmc = new TreeModificationContext(pageCollection);\n+            for (BTreeSetPage p : candidates) {\n+                if (p.getItemCount() == 0) {\n+                    deletePage(p, tmc);\n+                } else {\n+                    splitPageIfNecessary(p, getNewPageId, tmc);\n+                }\n+            }\n+\n+            // Update those pages' parents.\n+            tmc.accept(BTreeSetPage.IndexPage::addChildren, BTreeSetPage.IndexPage::removeChildren, POINTER_COMPARATOR);\n+            candidates = tmc.getModifiedParents();\n+        }\n+\n+        pageCollection.getIndexPages().forEach(p -> {\n+            if (p.isModified()) {\n+                p.seal();\n+            }\n+        });\n+        return pageCollection;\n+    }\n+\n+    private void deletePage(BTreeSetPage p, TreeModificationContext context) {\n+        // Delete the page if it's empty, but only if it's not the root page.\n+        if (p.getPagePointer().hasParent()) {\n+            context.getPageCollection().pageDeleted(p);\n+            context.deleted(p.getPagePointer());\n+            log.debug(\"{}: Deleted empty page {}.\", this.traceLogId, p.getPagePointer());\n+        } else if (p.isIndexPage()) {\n+            p = BTreeSetPage.emptyLeafRoot();\n+            p.markModified();\n+            context.getPageCollection().pageUpdated(p);\n+            log.debug(\"{}: Replaced empty Index Root with empty Leaf Root.\", this.traceLogId);\n+        }\n+    }\n+\n+    private void splitPageIfNecessary(BTreeSetPage p, Supplier<Long> getNewPageId, TreeModificationContext context) {\n+        val splits = p.split(this.maxPageSize, getNewPageId);\n+        if (splits == null) {\n+            // No split necessary\n+            return;\n+        }\n+\n+        if (p.getPagePointer().hasParent()) {\n+            Preconditions.checkArgument(splits.get(0).getPagePointer().getPageId() == p.getPagePointer().getPageId(),\n+                    \"First split result (%s) not current page (%s).\", splits.get(0).getPagePointer(), p.getPagePointer());\n+        } else {\n+            // If we split the root, the new pages will already point to the root; we must create a blank\n+            // index root page, which will be updated in the next step.\n+            context.getPageCollection().pageUpdated(BTreeSetPage.emptyIndexRoot());\n+        }\n+\n+        splits.forEach(splitPage -> {\n+            context.getPageCollection().pageUpdated(splitPage);\n+            context.created(splitPage.getPagePointer());\n+        });\n+        log.debug(\"{}: Page '{}' split into {}: {}.\", this.traceLogId, p, splits.size(), splits);\n+    }\n+\n+    private CompletableFuture<Void> writePages(@NonNull PageCollection pageCollection, TimeoutTimer timer) {\n+        // Order the pages from bottom up. The upstream code may have limitations in how much it can update atomically,\n+        // so it may commit this in multiple non-atomic operations. If the process is interrupted mid-way then we want\n+        // to ensure that parent pages aren't updated before leaf pages (which would cause index corruptions - i.e., by\n+        // pointing to inexistent pages).\n+        val processedPageIds = new HashSet<Long>();\n+\n+        // First collect updates. Begin from the bottom (Leaf Pages).\n+        val toWrite = new ArrayList<Map.Entry<Long, ArrayView>>();\n+        collectWriteCandidates(pageCollection.getLeafPages(), toWrite, processedPageIds, pageCollection);\n+\n+        // Newly split pages may not be reachable from any modified Leaf Pages. Collect them too.\n+        collectWriteCandidates(pageCollection.getIndexPages(), toWrite, processedPageIds, pageCollection);\n+\n+        // Then collect deletions, making sure we also consider all their parents (which should be modified/deleted as well).\n+        collectWriteCandidates(pageCollection.getDeletedPagesParents(), toWrite, processedPageIds, pageCollection);\n+        log.debug(\"{}: Persist (Updates={}, Deletions={}).\", this.traceLogId, toWrite.size(), pageCollection.getDeletedPageIds().size());\n+        return this.update.apply(toWrite, pageCollection.getDeletedPageIds(), timer.getRemaining());\n+    }\n+\n+    private void collectWriteCandidates(Collection<BTreeSetPage> candidates, List<Map.Entry<Long, ArrayView>> toWrite,\n+                                        Set<Long> processedIds, PageCollection pageCollection) {\n+        while (!candidates.isEmpty()) {\n+            val next = new ArrayList<BTreeSetPage>();\n+            candidates.stream()\n+                    .filter(p -> p.isModified() && !processedIds.contains(p.getPagePointer().getPageId()))\n+                    .forEach(p -> {\n+                        toWrite.add(new AbstractMap.SimpleImmutableEntry<>(p.getPagePointer().getPageId(), p.getData()));\n+                        val parent = pageCollection.get(p.getPagePointer().getParentPageId());\n+                        assert p.getPagePointer().hasParent() == (parent != null);\n+                        processedIds.add(p.getPagePointer().getPageId());\n+                        if (parent != null) {\n+                            next.add(parent);\n+                        }\n+                    });\n+            candidates = next;\n+        }\n+    }\n+\n+    //endregion\n+\n+    //region Queries\n+\n+    /**\n+     * Returns an {@link AsyncIterator} that will iterate through all the items in this {@link BTreeSet} within the\n+     * specified bounds. All iterated items will be returned in lexicographic order (smallest to largest).\n+     * See {@link ByteArrayComparator} for ordering details.\n+     *\n+     * @param firstItem          An {@link ArrayView} indicating the first Item to iterate from. If null, the iteration\n+     *                           will begin with the first item in the index.\n+     * @param firstItemInclusive If true, firstIem will be included in the iteration (provided it exists), otherwise it", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjUwMA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433832500", "bodyText": "When it says \"No duplicates are allowed\", does it mean that a duplicate would cause the execution of the method to return an error? What happens if there is a duplicate in the collection?", "author": "fpj", "createdAt": "2020-06-02T12:20:31Z", "path": "common/src/main/java/io/pravega/common/util/btree/sets/BTreeSet.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util.btree.sets;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.TimeoutTimer;\n+import io.pravega.common.concurrent.Futures;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArrayComparator;\n+import java.time.Duration;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * A B+Tree-backed Set. Stores all items in a B+Tree Structure using a {@link ByteArrayComparator} for ordering them.\n+ *\n+ * NOTE: This component is in {@link Beta}. There are no guarantees about data or API compatibility with future versions.\n+ * Any component that is directly dependent on this one should either be in {@link Beta} as well.\n+ */\n+@NotThreadSafe\n+@Beta\n+@Slf4j\n+public class BTreeSet {\n+    //region Members\n+\n+    public static final Comparator<ArrayView> COMPARATOR = new ByteArrayComparator()::compare;\n+    private static final Comparator<PagePointer> POINTER_COMPARATOR = PagePointer.getComparator(COMPARATOR);\n+\n+    private final int maxPageSize;\n+    private final int maxItemSize;\n+    @NonNull\n+    private final ReadPage read;\n+    @NonNull\n+    private final PersistPages update;\n+    @NonNull\n+    private final Executor executor;\n+    @NonNull\n+    private final String traceLogId;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link BTreeSet} class.\n+     *\n+     * @param maxPageSize The maximum size, in bytes, of any page.\n+     * @param maxItemSize The maximum size, in bytes, of any single item in the {@link BTreeSet}.\n+     * @param read        A {@link ReadPage} function that can be used to fetch a single {@link BTreeSet} page from an\n+     *                    external data source.\n+     * @param update      A {@link PersistPages} function that can be used to store and delete multiple {@link BTreeSet}\n+     *                    pages to/from an external data source.\n+     * @param executor    Executor for async operations.\n+     * @param traceLogId  Trace id for logging.\n+     */\n+    public BTreeSet(int maxPageSize, int maxItemSize, @NonNull ReadPage read, @NonNull PersistPages update,\n+                    @NonNull Executor executor, String traceLogId) {\n+        Preconditions.checkArgument(maxItemSize < maxPageSize / 2, \"maxItemSize must be at most half of maxPageSize.\");\n+        this.maxItemSize = maxItemSize;\n+        this.maxPageSize = maxPageSize;\n+        this.read = read;\n+        this.update = update;\n+        this.executor = executor;\n+        this.traceLogId = traceLogId == null ? \"\" : traceLogId;\n+    }\n+\n+    //endregion\n+\n+    //region Updates\n+\n+    /**\n+     * Atomically inserts the items in 'toInsert' into the {@link BTreeSet} and removes the items in 'toRemove'\n+     * from the {@link BTreeSet}. No duplicates are allowed; the same item cannot exist multiple times in either 'toInsert'", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Njc5Ng==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433956796", "bodyText": "An IllegalArgumentException is thrown.\nFor efficiency reasons, this is bubbled up from BTreeSetPage.preProcessUpdate because the inbound collection may not be sorted. I need to sort it and them pass slices of it to the appropriate BTreeSetPage which makes the determination (it's easy to spot duplicates in a sorted list without extra overhead).", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwODM1OA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r434508358", "bodyText": "Could we update the comment to reflect what happens in the presence of a duplicate?", "author": "fpj", "createdAt": "2020-06-03T11:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNjA5Nw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r434736097", "bodyText": "Added a @throws tag.", "author": "andreipaduroiu", "createdAt": "2020-06-03T17:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NDAwNg==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433864006", "bodyText": "To clarify, is it only the prefixFilter that is experimental? Basically, getpPrefixFilter returns an ArrayView that is not guaranteed to be correct? Do you know whether this is displayed correctly with javadocs (because of the @DaTa lombok annotation)?", "author": "fpj", "createdAt": "2020-06-02T13:13:40Z", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/IteratorArgs.java", "diffHunk": "@@ -24,9 +24,11 @@\n @Builder\n public class IteratorArgs {\n     /**\n+     * EXPERIMENTAL!", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2MDc4Ng==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433960786", "bodyText": "We do not generate or publish Javadocs for internal services since everything is behind the wire protocol, so this is just for someone looking at the code.\nMy IDE correctly displays Javadoc when I hover over a method, so I am not worried about it here.\nAnd yes, it's only the prefixFilter that is experimental, since the whole Sorted Table Segment is experimental too.\n\ngetpPrefixFilter returns an ArrayView that is not guaranteed to be correct\n\nNo. Making use of this feature is experimental and the API and/or underlying behavior could change without notice. There is nothing here that indicates something isn't going to be correct.", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NDAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NzcxMg==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433867712", "bodyText": "Do you want to add that this additional space is proportional to the number and length of keys, but not the size of the value?", "author": "fpj", "createdAt": "2020-06-02T13:19:16Z", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/TableStore.java", "diffHunk": "@@ -41,8 +39,19 @@\n  * will be atomically checked-and-applied.\n  * * Unconditional Updates (insert, update, remove) will take effect regardless of what the current Key version exists in\n  * the Table Segment.\n+ *\n+ * Sorted vs Non-Sorted Table Segments:\n+ * * All Table Segments are a Hash-Table-like data structure, where Keys are mapped to Values.\n+ * * Non-Sorted Table Segments provide no ordering guarantees for {@link #keyIterator} or {@link #entryIterator}.\n+ * * Sorted Table Segments store additional information about the Keys and will return results for {@link #keyIterator}\n+ * or {@link #entryIterator} in lexicographic bitwise order. All other contracts are identical to the Non-Sorted variant.\n+ * * Sorted Table Segments will require additional storage space to store the ordered Keys and may require additional", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2MTc2Nw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433961767", "bodyText": "Good point. Done.", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NzcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MDc5OQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433870799", "bodyText": "This Future will wait on any Segment-specific recovery to complete before executing.\n\nThis is a good information to have, but it made me wonder if that's not true of any segment-related operation. Is there anything special about this call to get the sorted key index with respect to recovery?", "author": "fpj", "createdAt": "2020-06-02T13:23:42Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerKeyIndex.java", "diffHunk": "@@ -538,6 +546,25 @@ void notifyIndexOffsetChanged(long segmentId, long indexOffset) {\n                 ignored -> CompletableFuture.completedFuture(this.cache.getTailHashes(segment.getSegmentId())));\n     }\n \n+    /**\n+     * Gets the {@link SegmentSortedKeyIndex} associated with the given Segment, as provided by\n+     * {@link ContainerSortedKeyIndex#getSortedKeyIndex}. This can be used to safely iterate through Keys of a Sorted\n+     * Table Segment while including both fully indexed and tail updates.\n+     *\n+     * Note: this will return the same result as {@link ContainerSortedKeyIndex#getSortedKeyIndex}, however this method\n+     * will wait on any Segment-specific recovery (and trigger it) to complete before executing, which should enable a\n+     * safe iteration for recently recovered Table Segments.\n+     *\n+     * @param segment A {@link DirectSegmentAccess} representing the Segment for which to get the {@link SegmentSortedKeyIndex}.\n+     * @return A CompletableFuture that, when completed, will contain the desired result. This Future will wait on any", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2MzAyNQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433963025", "bodyText": "It's true of any segment-related operation that have this phrase attached to them. Not all operations need to wait on that. Conditional updates must wait, but unconditional updates do not. Retrievals and iterators must wait.", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MDc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg4NQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433873885", "bodyText": "I'm not sure what this notification is about, could you elaborate?", "author": "fpj", "createdAt": "2020-06-02T13:28:02Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerSortedKeyIndex.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.tables;\n+\n+import io.pravega.segmentstore.contracts.Attributes;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executor;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+\n+/**\n+ * Manages {@link SegmentSortedKeyIndex} instances.\n+ */\n+@RequiredArgsConstructor\n+class ContainerSortedKeyIndex {\n+    //region Members\n+\n+    private final ConcurrentHashMap<Long, SegmentSortedKeyIndex> sortedKeyIndices = new ConcurrentHashMap<>();\n+    @NonNull\n+    private final SortedKeyIndexDataSource dataSource;\n+    @NonNull\n+    private final Executor executor;\n+\n+    //endregion\n+\n+    //region Operations\n+\n+    /**\n+     * Determines whether the given {@link SegmentProperties} instance indicates the associated Table Segment is a sorted one.\n+     *\n+     * @param info The {@link SegmentProperties} to query.\n+     * @return True if Sorted Table Segment, false otherwise.\n+     */\n+    static boolean isSortedTableSegment(SegmentProperties info) {\n+        return info.getAttributes().getOrDefault(TableAttributes.SORTED, Attributes.BOOLEAN_FALSE) == Attributes.BOOLEAN_TRUE;\n+    }\n+\n+    /**\n+     * Gets a {@link SegmentSortedKeyIndex} instance for the given Segment. If there is no {@link SegmentSortedKeyIndex}\n+     * currently associated with the given segment, it will be associated (and the same instance will be returned later).\n+     *\n+     * @param segmentId   The Id of the Segment.\n+     * @param segmentInfo A {@link SegmentProperties} associated with the segment.\n+     * @return A {@link SegmentSortedKeyIndex} if segmentInfo indicates a Sorted Table Segment, or\n+     * {@link SegmentSortedKeyIndex#noop()} otherwise.\n+     */\n+    SegmentSortedKeyIndex getSortedKeyIndex(long segmentId, SegmentProperties segmentInfo) {\n+        if (isSortedTableSegment(segmentInfo)) {\n+            return this.sortedKeyIndices.computeIfAbsent(segmentId, id -> createSortedKeyIndex(segmentInfo.getName()));\n+        } else {\n+            // Not a Sorted Table Segment.\n+            return SegmentSortedKeyIndex.noop();\n+        }\n+    }\n+\n+    /**\n+     * Notifies that the indexed offset for a particular Segment Id has been changed.\n+     *\n+     * @param segmentId   The Segment Id whose indexed offset has changed.\n+     * @param indexOffset The new indexed offset. If -1, and if the given Segment is currently registered, it will be\n+     *                    de-registered (since -1 indicates it has been evicted).\n+     */\n+    void notifyIndexOffsetChanged(long segmentId, long indexOffset) {", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2NDM1OQ==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433964359", "bodyText": "It notifies that \"IndexedOffset\" has changed for this segment. If you look at the method with same name in SegmentSortedKeyIndex, you'll see that this is used to clear the tail cache.", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Mzg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjQyNA==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433876424", "bodyText": "What's this KeyTranslator about?", "author": "fpj", "createdAt": "2020-06-02T13:31:32Z", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/KeyTranslator.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.tables;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Translates Table Segment Keys from an external form into an internal one and back.\n+ */\n+abstract class KeyTranslator {", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2Njc4Ng==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433966786", "bodyText": "I need to separate user keys from the Sorted Key Index keys (since I store the Sorted Key Index alongside the rest of the keys). I do not want internal and external keys to clash, or for a user to (accidentally) modify a SKI key-value or viceversa.\nFor Sorted Table Segments only, this translator adds a 1-byte prefix to each key, as follows:\n\nUser-keys: byte equivalent of E (for External)\nSKI keys: byte equivalent of I (for Internal).\n\nFor Hash Table Segments, the no-op translator is used which doesn't do anything (so no effect on existing keys).\nCurrently this prepend is inefficient due to a mandatory array copy. However with #4837 this will be a simple, zero-copy composition which has no overhead.", "author": "andreipaduroiu", "createdAt": "2020-06-02T15:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODU0Mw==", "url": "https://github.com/pravega/pravega/pull/4763#discussion_r433878543", "bodyText": "Typo.", "author": "fpj", "createdAt": "2020-06-02T13:34:28Z", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/ContainerSortedKeyIndexTests.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.tables;\n+\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.common.util.HashedArray;\n+import io.pravega.segmentstore.contracts.Attributes;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.server.TableStoreMock;\n+import io.pravega.test.common.AssertExtensions;\n+import io.pravega.test.common.ThreadPooledTestSuite;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tess for {@link ContainerSortedKeyIndex} and {@link SegmentSortedKeyIndexImpl}.", "originalCommit": "e23c68e3087386a7ba7090d86218ad916e2dabac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a49f683a8fdfbca002bf902dc4aeaa304868035", "url": "https://github.com/pravega/pravega/commit/7a49f683a8fdfbca002bf902dc4aeaa304868035", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-06-02T15:32:01Z", "type": "commit"}, {"oid": "bc0512d0cc1e492407840516d5e80687c266868b", "url": "https://github.com/pravega/pravega/commit/bc0512d0cc1e492407840516d5e80687c266868b", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-06-03T17:29:11Z", "type": "commit"}, {"oid": "98344ae86c94318e874fc6695d96892394e31ade", "url": "https://github.com/pravega/pravega/commit/98344ae86c94318e874fc6695d96892394e31ade", "message": "Merge remote-tracking branch 'remotes/origin/feature-key-value-tables' into issue-4656-iterator-filters\n\n# Conflicts:\n#\tcommon/src/main/java/io/pravega/common/util/AsyncIterator.java", "committedDate": "2020-06-03T19:51:03Z", "type": "commit"}]}