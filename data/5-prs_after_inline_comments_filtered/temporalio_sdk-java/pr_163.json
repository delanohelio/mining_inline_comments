{"pr_number": 163, "pr_title": "Syncs Java SDK to latest Temporal Proto", "pr_createdAt": "2020-07-30T06:46:07Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/163", "timeline": [{"oid": "0cd1058bdfb8588d375151d868018233bb3edfcd", "url": "https://github.com/temporalio/sdk-java/commit/0cd1058bdfb8588d375151d868018233bb3edfcd", "message": "moves to latest submodule", "committedDate": "2020-07-30T01:02:08Z", "type": "commit"}, {"oid": "a4c8142dd5dfb4b4ff2c313879842ef13efc3b1b", "url": "https://github.com/temporalio/sdk-java/commit/a4c8142dd5dfb4b4ff2c313879842ef13efc3b1b", "message": "first pass", "committedDate": "2020-07-30T04:20:01Z", "type": "commit"}, {"oid": "f6dac690ad678d6670b773415c5b0becfeee5e01", "url": "https://github.com/temporalio/sdk-java/commit/f6dac690ad678d6670b773415c5b0becfeee5e01", "message": "second pass", "committedDate": "2020-07-30T04:51:45Z", "type": "commit"}, {"oid": "063dec9a47935d1132e2b4179650b3cb6ecd5255", "url": "https://github.com/temporalio/sdk-java/commit/063dec9a47935d1132e2b4179650b3cb6ecd5255", "message": "run gradlew build", "committedDate": "2020-07-30T04:52:17Z", "type": "commit"}, {"oid": "58e12059821640eae64eb33ab02ad5f71c865f0f", "url": "https://github.com/temporalio/sdk-java/commit/58e12059821640eae64eb33ab02ad5f71c865f0f", "message": "third pass", "committedDate": "2020-07-30T05:05:32Z", "type": "commit"}, {"oid": "5baa4b5b651761dc090043464ad78733bc517ae7", "url": "https://github.com/temporalio/sdk-java/commit/5baa4b5b651761dc090043464ad78733bc517ae7", "message": "30 errors remaining", "committedDate": "2020-07-30T05:11:25Z", "type": "commit"}, {"oid": "15111630eeb8f345053be860e88ad73b1e690536", "url": "https://github.com/temporalio/sdk-java/commit/15111630eeb8f345053be860e88ad73b1e690536", "message": "15 remaining errors", "committedDate": "2020-07-30T05:24:51Z", "type": "commit"}, {"oid": "f371776e7064f3fe6157db6d399cea7c10b54e96", "url": "https://github.com/temporalio/sdk-java/commit/f371776e7064f3fe6157db6d399cea7c10b54e96", "message": "another pass", "committedDate": "2020-07-30T05:39:46Z", "type": "commit"}, {"oid": "c86b725c734e2f7a5b654da3e2e7696290f44748", "url": "https://github.com/temporalio/sdk-java/commit/c86b725c734e2f7a5b654da3e2e7696290f44748", "message": "last file change", "committedDate": "2020-07-30T05:41:29Z", "type": "commit"}, {"oid": "5735849e79e4c82da37aae7ec215d6ba8910ab73", "url": "https://github.com/temporalio/sdk-java/commit/5735849e79e4c82da37aae7ec215d6ba8910ab73", "message": "fixes tests", "committedDate": "2020-07-30T06:19:44Z", "type": "commit"}, {"oid": "57c623846a7bf06b47f900027405c5cbc8442b30", "url": "https://github.com/temporalio/sdk-java/commit/57c623846a7bf06b47f900027405c5cbc8442b30", "message": "minor cleanup", "committedDate": "2020-07-30T06:43:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjE3NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462776175", "bodyText": "the current method takes in delaySeconds as a long. If we wanted to, we can have it take a Java Duration instead, although perhaps not in this PR", "author": "mastermanu", "createdAt": "2020-07-30T06:50:32Z", "path": "src/main/java/io/temporal/internal/replay/ReplayClockContext.java", "diffHunk": "@@ -140,7 +141,7 @@ boolean isReplaying() {\n     final OpenRequestInfo<?, Long> context = new OpenRequestInfo<>(firingTime);\n     final StartTimerCommandAttributes timer =\n         StartTimerCommandAttributes.newBuilder()\n-            .setStartToFireTimeoutSeconds(delaySeconds)\n+            .setStartToFireTimeout(Durations.fromSeconds(delaySeconds))", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExMzc3OQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463113779", "bodyText": "Let's make it Duration. As the API that calls it uses Duration and milliseconds.", "author": "mfateev", "createdAt": "2020-07-30T16:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjY2NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462776664", "bodyText": "Should we change ReplayWorkflowContextImp to take in a java.time.Duration instead of the start time in Nanoseconds in a subsequent PR?", "author": "mastermanu", "createdAt": "2020-07-30T06:51:15Z", "path": "src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java", "diffHunk": "@@ -115,14 +118,14 @@\n           \"First event in the history is not WorkflowExecutionStarted\");\n     }\n     startedEvent = firstEvent.getWorkflowExecutionStartedEventAttributes();\n-    wfStartTimeNanos = firstEvent.getTimestamp();\n+    wfStartTimeNanos = Timestamps.toNanos(firstEvent.getEventTime());\n \n     context =\n         new ReplayWorkflowContextImpl(", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNjA5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463116097", "bodyText": "I don't think Duration is the right class for timestamps which represent point in time.", "author": "mfateev", "createdAt": "2020-07-30T16:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzODUyOQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463138529", "bodyText": "sorry I meant Timestamp. I definitely interchanged those quite a bit while doing this diff.", "author": "mastermanu", "createdAt": "2020-07-30T16:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NjY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Njk4NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462776985", "bodyText": "should we have processEventLoop take in a java.time.Duration instead?", "author": "mastermanu", "createdAt": "2020-07-30T06:51:40Z", "path": "src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java", "diffHunk": "@@ -460,7 +464,7 @@ private boolean handleWorkflowTaskImpl(\n         forceCreateNewWorkflowTask =\n             processEventLoop(\n                 startTime,\n-                startedEvent.getWorkflowTaskTimeoutSeconds(),\n+                (int) Durations.toSeconds(startedEvent.getWorkflowTaskTimeout()),", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNjM2Mg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463116362", "bodyText": "Yes", "author": "mfateev", "createdAt": "2020-07-30T16:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Njk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzE3NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462777174", "bodyText": "return a Duration instead?", "author": "mastermanu", "createdAt": "2020-07-30T06:51:53Z", "path": "src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java", "diffHunk": "@@ -606,7 +610,7 @@ private boolean executeLocalActivities(long startTime, int workflowTaskTimeoutSe\n   }\n \n   int getWorkflowTaskTimeoutSeconds() {", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNjQ3Ng==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463116476", "bodyText": "yes", "author": "mfateev", "createdAt": "2020-07-30T16:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzUyMQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462777521", "bodyText": "Should we change all the methods here to return Durations instead?", "author": "mastermanu", "createdAt": "2020-07-30T06:52:19Z", "path": "src/main/java/io/temporal/internal/replay/WorkflowContext.java", "diffHunk": "@@ -102,25 +103,25 @@ WorkflowExecution getParentWorkflowExecution() {\n \n   int getWorkflowRunTimeoutSeconds() {\n     WorkflowExecutionStartedEventAttributes attributes = getWorkflowStartedEventAttributes();\n-    return attributes.getWorkflowRunTimeoutSeconds();\n+    return (int) Durations.toSeconds(attributes.getWorkflowRunTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNzIzMw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463117233", "bodyText": "yes, with exception of get..Timestamp ones.", "author": "mfateev", "createdAt": "2020-07-30T16:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NzUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Nzg5MQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462777891", "bodyText": "change to return java.time.Duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:52:48Z", "path": "src/main/java/io/temporal/internal/sync/ActivityInfoImpl.java", "diffHunk": "@@ -65,23 +66,22 @@ public String getActivityType() {\n \n   @Override\n   public long getScheduledTimestamp() {", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNzYxNg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463117616", "bodyText": "No, as it is timestamp", "author": "mfateev", "createdAt": "2020-07-30T16:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Nzg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3ODI5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462778297", "bodyText": "should we change this to Duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:53:23Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -168,15 +171,15 @@\n \n   static final class WorkflowData {\n     Optional<TestServiceRetryState> retryState;\n-    int backoffStartIntervalInSeconds;\n+    long backoffStartIntervalInSeconds;", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExODU0NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463118545", "bodyText": "To Duration or milliseconds", "author": "mfateev", "createdAt": "2020-07-30T16:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3ODI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3OTE4Mg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462779182", "bodyText": "change to use java.time.Duration and java timestamp equivalent?", "author": "mastermanu", "createdAt": "2020-07-30T06:54:39Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -984,7 +987,7 @@ private static void scheduleActivityTask(\n       ScheduleActivityTaskCommandAttributes d,\n       long workflowTaskCompletedEventId) {\n     RetryPolicy retryPolicy = ensureDefaultFieldsForActivityRetryPolicy(d.getRetryPolicy());\n-    long expirationInterval = TimeUnit.SECONDS.toMillis(d.getScheduleToCloseTimeoutSeconds());\n+    long expirationInterval = Durations.toMillis(d.getScheduleToCloseTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExOTg2NQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463119865", "bodyText": "Duration", "author": "mfateev", "createdAt": "2020-07-30T16:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3OTE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDExMw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462780113", "bodyText": "change these intervals/expirations to java.time.Durations?", "author": "mastermanu", "createdAt": "2020-07-30T06:55:45Z", "path": "src/main/java/io/temporal/internal/testservice/TestServiceRetryState.java", "diffHunk": "@@ -104,10 +105,10 @@ BackoffInterval getBackoffIntervalInSeconds(Optional<String> errorType, long cur\n       // MaximumAttempts is the total attempts, including initial (non-retry) attempt.\n       return new BackoffInterval(RetryState.RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED);\n     }\n-    long initInterval = TimeUnit.SECONDS.toMillis(retryPolicy.getInitialIntervalInSeconds());\n+    long initInterval = Durations.toMillis(retryPolicy.getInitialInterval());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMzQ0OQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463123449", "bodyText": "Only if it improves readability of this code.", "author": "mfateev", "createdAt": "2020-07-30T16:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDQ2MQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462780461", "bodyText": "change from long to Duration? Same for the rest of the items in this file", "author": "mastermanu", "createdAt": "2020-07-30T06:56:13Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -163,7 +164,7 @@\n       StartWorkflowExecutionRequest startRequest,\n       String runId,\n       Optional<TestServiceRetryState> retryState,\n-      int backoffStartIntervalInSeconds,\n+      long backoffStartIntervalInSeconds,", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNDI5Mw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463124293", "bodyText": "Either change to the duration or make sure that all the intervals are in milliseconds.", "author": "mfateev", "createdAt": "2020-07-30T16:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTQ3MA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462781470", "bodyText": "can this argument come in as a java duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:57:31Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1258,10 +1269,10 @@ private void startNewCronRun(\n         ContinueAsNewWorkflowExecutionCommandAttributes.newBuilder()\n             .setInput(startRequest.getInput())\n             .setWorkflowType(startRequest.getWorkflowType())\n-            .setWorkflowRunTimeoutSeconds(startRequest.getWorkflowRunTimeoutSeconds())\n-            .setWorkflowTaskTimeoutSeconds(startRequest.getWorkflowTaskTimeoutSeconds())\n+            .setWorkflowRunTimeout(startRequest.getWorkflowRunTimeout())\n+            .setWorkflowTaskTimeout(startRequest.getWorkflowTaskTimeout())\n             .setTaskQueue(startRequest.getTaskQueue())\n-            .setBackoffStartIntervalInSeconds(backoffIntervalSeconds)\n+            .setBackoffStartInterval(Durations.fromSeconds(backoffIntervalSeconds))", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNjQxNQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463126415", "bodyText": "Yes, we should remove \"Seconds\" from everwhere.", "author": "mfateev", "createdAt": "2020-07-30T16:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTY4Mg==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462781682", "bodyText": "java duration here and for the other variables in this file?", "author": "mastermanu", "createdAt": "2020-07-30T06:57:49Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1390,7 +1401,7 @@ public void startWorkflow(\n               scheduleWorkflowTask(ctx);\n             }\n \n-            int runTimeoutSeconds = startRequest.getWorkflowRunTimeoutSeconds();\n+            long runTimeoutSeconds = Durations.toSeconds(startRequest.getWorkflowRunTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNjYyMA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463126620", "bodyText": "If it improves readability", "author": "mfateev", "createdAt": "2020-07-30T16:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MTg1Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462781857", "bodyText": "convert to java duration?", "author": "mastermanu", "createdAt": "2020-07-30T06:58:04Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowService.java", "diffHunk": "@@ -257,7 +258,7 @@ StartWorkflowExecutionResponse startWorkflowExecutionImpl(\n       }\n       Optional<TestServiceRetryState> retryState;\n       if (startRequest.hasRetryPolicy()) {\n-        long expirationInterval = startRequest.getWorkflowExecutionTimeoutSeconds();\n+        long expirationInterval = Durations.toSeconds(startRequest.getWorkflowExecutionTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjE0OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782148", "bodyText": "use actual duration here?", "author": "mastermanu", "createdAt": "2020-07-30T06:58:29Z", "path": "src/main/java/io/temporal/internal/worker/LocalActivityWorker.java", "diffHunk": "@@ -260,16 +262,18 @@ public Throwable wrapFailure(Task task, Throwable failure) {\n       retryPolicy.getNonRetryableErrorTypesList().toArray(doNotRetry);\n       RetryOptions retryOptions =\n           RetryOptions.newBuilder()\n-              .setMaximumInterval(Duration.ofSeconds(retryPolicy.getMaximumIntervalInSeconds()))\n-              .setInitialInterval(Duration.ofSeconds(retryPolicy.getInitialIntervalInSeconds()))\n+              .setMaximumInterval(\n+                  ProtobufTimeUtils.ToJavaDuration(retryPolicy.getMaximumInterval()))\n+              .setInitialInterval(\n+                  ProtobufTimeUtils.ToJavaDuration(retryPolicy.getInitialInterval()))\n               .setMaximumAttempts(retryPolicy.getMaximumAttempts())\n               .setBackoffCoefficient(retryPolicy.getBackoffCoefficient())\n               .setDoNotRetry(doNotRetry)\n               .build();\n       long sleepMillis = retryOptions.calculateSleepTime(attempt);\n       long elapsedTask = System.currentTimeMillis() - task.taskStartTime;\n       long elapsedTotal = elapsedTask + params.getElapsedTime();\n-      int timeoutSeconds = activityTask.getScheduleToCloseTimeoutSeconds();\n+      int timeoutSeconds = (int) Durations.toSeconds(activityTask.getScheduleToCloseTimeout());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNzkzMQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463127931", "bodyText": "Or Duration or millis", "author": "mfateev", "createdAt": "2020-07-30T16:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjQ2OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782468", "bodyText": "use duration here?", "author": "mastermanu", "createdAt": "2020-07-30T06:58:54Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowService.java", "diffHunk": "@@ -305,7 +306,7 @@ private StartWorkflowExecutionResponse startWorkflowExecutionNoRunningCheckLocke\n       String runId,\n       Optional<String> continuedExecutionRunId,\n       Optional<TestServiceRetryState> retryState,\n-      int backoffStartIntervalInSeconds,\n+      long backoffStartIntervalInSeconds,", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjY2OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782668", "bodyText": "use duration here", "author": "mastermanu", "createdAt": "2020-07-30T06:59:12Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1485,8 +1497,8 @@ private void updateHeartbeatTimer(\n       RequestContext ctx,\n       long activityId,\n       StateMachine<ActivityTaskData> activity,\n-      int startToCloseTimeout,\n-      int heartbeatTimeout) {\n+      long startToCloseTimeout,", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4Mjc2NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r462782764", "bodyText": "use duration here", "author": "mastermanu", "createdAt": "2020-07-30T06:59:18Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1637,8 +1649,9 @@ public boolean heartbeatActivityTask(long scheduledEventId, Payloads details) {\n           }\n           ActivityTaskData data = activity.getData();\n           data.lastHeartbeatTime = clock.getAsLong();\n-          int startToCloseTimeout = data.scheduledEvent.getStartToCloseTimeoutSeconds();\n-          int heartbeatTimeout = data.scheduledEvent.getHeartbeatTimeoutSeconds();\n+          long startToCloseTimeout =", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMDcxMQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463120711", "bodyText": "Consider adding a method to ctx that returns Proto Timestamp.", "author": "mfateev", "createdAt": "2020-07-30T16:27:00Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1020,11 +1023,11 @@ private static void scheduleActivityTask(\n             .setWorkflowExecution(ctx.getExecution())\n             .setActivityId(d.getActivityId())\n             .setInput(d.getInput())\n-            .setHeartbeatTimeoutSeconds(d.getHeartbeatTimeoutSeconds())\n-            .setScheduleToCloseTimeoutSeconds(d.getScheduleToCloseTimeoutSeconds())\n-            .setStartToCloseTimeoutSeconds(d.getStartToCloseTimeoutSeconds())\n-            .setScheduledTimestamp(ctx.currentTimeInNanoseconds())\n-            .setScheduledTimestampThisAttempt(ctx.currentTimeInNanoseconds())\n+            .setHeartbeatTimeout(d.getHeartbeatTimeout())\n+            .setScheduleToCloseTimeout(d.getScheduleToCloseTimeout())\n+            .setStartToCloseTimeout(d.getStartToCloseTimeout())\n+            .setScheduledTime(Timestamps.fromNanos(ctx.currentTimeInNanoseconds()))", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMTE2OA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463121168", "bodyText": "Consider adding a method to the store that returns Proto Timestamp.", "author": "mfateev", "createdAt": "2020-07-30T16:27:46Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1272,11 +1274,11 @@ private static void startActivityTask(\n     a.setAttempt(data.getAttempt());\n     // Setting timestamp here as the default logic will set it to the time when it is added to the\n     // history. But in the case of retry it happens only after an activity completion.\n-    long timestamp = TimeUnit.MILLISECONDS.toNanos(data.store.currentTimeMillis());\n+    Timestamp timestamp = Timestamps.fromMillis(data.store.currentTimeMillis());", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMTkzMw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463121933", "bodyText": "Consider changing the constant from seconds as well.", "author": "mfateev", "createdAt": "2020-07-30T16:29:06Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1859,17 +1862,19 @@ private static void failExternalCancellation(\n \n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n-    int initialIntervalInSeconds =\n-        originalPolicy.getInitialIntervalInSeconds() == 0\n-            ? DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS\n-            : originalPolicy.getInitialIntervalInSeconds();\n+    Duration initialInterval =\n+        Durations.compare(originalPolicy.getInitialInterval(), Durations.ZERO) == 0\n+            ? Durations.fromSeconds(DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS)\n+            : originalPolicy.getInitialInterval();", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMjc5Nw==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463122797", "bodyText": "I'm curious if \"originalPolicy.getInitialInterval() == Durations.ZERO\" would work.", "author": "mfateev", "createdAt": "2020-07-30T16:30:28Z", "path": "src/main/java/io/temporal/internal/testservice/StateMachines.java", "diffHunk": "@@ -1859,17 +1862,19 @@ private static void failExternalCancellation(\n \n   // Mimics the default activity retry policy of a standard Temporal server.\n   static RetryPolicy ensureDefaultFieldsForActivityRetryPolicy(RetryPolicy originalPolicy) {\n-    int initialIntervalInSeconds =\n-        originalPolicy.getInitialIntervalInSeconds() == 0\n-            ? DEFAULT_ACTIVITY_RETRY_INITIAL_INTERVAL_SECONDS\n-            : originalPolicy.getInitialIntervalInSeconds();\n+    Duration initialInterval =\n+        Durations.compare(originalPolicy.getInitialInterval(), Durations.ZERO) == 0", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNTk3MQ==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463125971", "bodyText": "Let's migrate timer from seconds", "author": "mfateev", "createdAt": "2020-07-30T16:35:53Z", "path": "src/main/java/io/temporal/internal/testservice/TestWorkflowMutableStateImpl.java", "diffHunk": "@@ -1059,7 +1068,8 @@ private void processStartTimer(\n     timer = StateMachines.newTimerStateMachine();\n     timers.put(timerId, timer);\n     timer.action(StateMachines.Action.START, ctx, a, workflowTaskCompletedId);\n-    ctx.addTimer(a.getStartToFireTimeoutSeconds(), () -> fireTimer(timerId), \"fire timer\");\n+    ctx.addTimer(", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyODc3NA==", "url": "https://github.com/temporalio/sdk-java/pull/163#discussion_r463128774", "bodyText": "the arguments should be converted to Duration", "author": "mfateev", "createdAt": "2020-07-30T16:40:35Z", "path": "src/test/java/io/temporal/testUtils/TestServiceUtils.java", "diffHunk": "@@ -59,8 +60,8 @@ public static void startWorkflowExecution(\n     request.setNamespace(namespace);\n     request.setWorkflowId(UUID.randomUUID().toString());\n     request.setTaskQueue(createNormalTaskQueue(taskqueueName));\n-    request.setWorkflowRunTimeoutSeconds(workflowRunTimeoutSeconds);\n-    request.setWorkflowTaskTimeoutSeconds(workflowTaskTimeoutSeconds);\n+    request.setWorkflowRunTimeout(Durations.fromSeconds(workflowRunTimeoutSeconds));", "originalCommit": "57c623846a7bf06b47f900027405c5cbc8442b30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ffd8bc7c0a4e591c032c850f1fe4e8fb4996bce6", "url": "https://github.com/temporalio/sdk-java/commit/ffd8bc7c0a4e591c032c850f1fe4e8fb4996bce6", "message": "fixes tests against one box server", "committedDate": "2020-07-30T17:19:13Z", "type": "commit"}, {"oid": "0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "url": "https://github.com/temporalio/sdk-java/commit/0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "message": "adjusts for attempt starting at 1", "committedDate": "2020-07-30T20:07:49Z", "type": "commit"}, {"oid": "0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "url": "https://github.com/temporalio/sdk-java/commit/0a2fd32a999afe99c3f11f868efdc82eaa9d9ba5", "message": "adjusts for attempt starting at 1", "committedDate": "2020-07-30T20:07:49Z", "type": "forcePushed"}, {"oid": "a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "url": "https://github.com/temporalio/sdk-java/commit/a1d630ae3ab18fcab7f1821bcb2e1324f096083c", "message": "replace seconds with durations", "committedDate": "2020-07-30T21:30:25Z", "type": "commit"}, {"oid": "2f8119be58e08887bf2dc903a70e136839063554", "url": "https://github.com/temporalio/sdk-java/commit/2f8119be58e08887bf2dc903a70e136839063554", "message": "more cleanup", "committedDate": "2020-07-30T21:45:46Z", "type": "commit"}, {"oid": "8a5b5c098b89aaddf271d38e609db7a7cad530f4", "url": "https://github.com/temporalio/sdk-java/commit/8a5b5c098b89aaddf271d38e609db7a7cad530f4", "message": "adds proto timestamp to ctx", "committedDate": "2020-07-30T22:30:16Z", "type": "commit"}, {"oid": "335d08714ba886855568eca96947dbc19c3551de", "url": "https://github.com/temporalio/sdk-java/commit/335d08714ba886855568eca96947dbc19c3551de", "message": "more changes", "committedDate": "2020-07-30T22:54:50Z", "type": "commit"}, {"oid": "999fe2bdcbbbdc0e826a5464635c25fdb4a7f311", "url": "https://github.com/temporalio/sdk-java/commit/999fe2bdcbbbdc0e826a5464635c25fdb4a7f311", "message": "final cleanup", "committedDate": "2020-07-30T23:03:53Z", "type": "commit"}, {"oid": "d868b2384f9f5a9058ec78bab0d8edb5a9b5fcbc", "url": "https://github.com/temporalio/sdk-java/commit/d868b2384f9f5a9058ec78bab0d8edb5a9b5fcbc", "message": "rename variable", "committedDate": "2020-07-30T23:11:37Z", "type": "commit"}, {"oid": "5b8259e0348bd9c6f8782b23ab713c94cc29dab3", "url": "https://github.com/temporalio/sdk-java/commit/5b8259e0348bd9c6f8782b23ab713c94cc29dab3", "message": "protects against overflow in protobuf library", "committedDate": "2020-07-30T23:13:27Z", "type": "commit"}, {"oid": "70098edc349d8a38ff2c4ce869403b6adaf7adc4", "url": "https://github.com/temporalio/sdk-java/commit/70098edc349d8a38ff2c4ce869403b6adaf7adc4", "message": "more protection against overflow", "committedDate": "2020-07-30T23:18:36Z", "type": "commit"}, {"oid": "4b8f5f9e37db771619921df334602c470b12ffb4", "url": "https://github.com/temporalio/sdk-java/commit/4b8f5f9e37db771619921df334602c470b12ffb4", "message": "nit code cleanup", "committedDate": "2020-07-30T23:22:53Z", "type": "commit"}, {"oid": "231e07ff69b9fda6a738362e4fe6f82f45bda13d", "url": "https://github.com/temporalio/sdk-java/commit/231e07ff69b9fda6a738362e4fe6f82f45bda13d", "message": "gets rid of a few places where toSeconds is used", "committedDate": "2020-07-30T23:29:02Z", "type": "commit"}, {"oid": "5c58a3bdea51db827c1297108d0bbe9fa6b7bf25", "url": "https://github.com/temporalio/sdk-java/commit/5c58a3bdea51db827c1297108d0bbe9fa6b7bf25", "message": "formatting", "committedDate": "2020-07-30T23:29:26Z", "type": "commit"}, {"oid": "3715946b03fcbde2ac6806026e1336b803549a35", "url": "https://github.com/temporalio/sdk-java/commit/3715946b03fcbde2ac6806026e1336b803549a35", "message": "fix static overflow", "committedDate": "2020-07-30T23:30:54Z", "type": "commit"}, {"oid": "8d5de8f82b739bca294ec5e5b76bb95b05b5be08", "url": "https://github.com/temporalio/sdk-java/commit/8d5de8f82b739bca294ec5e5b76bb95b05b5be08", "message": "fixes two places where we are reading a millisecond value as a second", "committedDate": "2020-07-30T23:43:42Z", "type": "commit"}, {"oid": "216204ddebe829b00df3fa88d870a48f3b2bc88d", "url": "https://github.com/temporalio/sdk-java/commit/216204ddebe829b00df3fa88d870a48f3b2bc88d", "message": "fixes situation where we are casting to seconds", "committedDate": "2020-07-30T23:46:51Z", "type": "commit"}, {"oid": "87e0c0b666cf93c6896a767546ffabfedddd7618", "url": "https://github.com/temporalio/sdk-java/commit/87e0c0b666cf93c6896a767546ffabfedddd7618", "message": "protobuf cannot directly compare with ZERO value", "committedDate": "2020-07-31T00:00:11Z", "type": "commit"}]}