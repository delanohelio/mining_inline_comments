{"pr_number": 77, "pr_title": "Added gRPC service call metrics", "pr_createdAt": "2020-05-01T05:46:21Z", "pr_url": "https://github.com/temporalio/sdk-java/pull/77", "timeline": [{"oid": "4900075a5fec6efa66aa2a6fcfd6579462a86522", "url": "https://github.com/temporalio/sdk-java/commit/4900075a5fec6efa66aa2a6fcfd6579462a86522", "message": "Aded GrpcMetricsInterceptor", "committedDate": "2020-05-01T04:24:48Z", "type": "commit"}, {"oid": "77214813f51395db53f72db466ca47b4799bdff7", "url": "https://github.com/temporalio/sdk-java/commit/77214813f51395db53f72db466ca47b4799bdff7", "message": "Merge branch 'master' of github.com:temporalio/temporal-java-sdk into service-metrics", "committedDate": "2020-05-01T04:24:52Z", "type": "commit"}, {"oid": "14e05e9086fe2d215215dce552a39ef5aa20ce56", "url": "https://github.com/temporalio/sdk-java/commit/14e05e9086fe2d215215dce552a39ef5aa20ce56", "message": "Aded GrpcMetricsInterceptor", "committedDate": "2020-05-01T04:29:00Z", "type": "commit"}, {"oid": "8bc9f649ab9e354bec58af134f4507da75a2365d", "url": "https://github.com/temporalio/sdk-java/commit/8bc9f649ab9e354bec58af134f4507da75a2365d", "message": "Added tests", "committedDate": "2020-05-01T05:42:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MjUxNQ==", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418642515", "bodyText": "Are these defined somewhere as consts or is there a common way to generate them?", "author": "shawnhathaway", "createdAt": "2020-05-01T17:20:36Z", "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);\n+\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-DescribeNamespace.temporal-request\", new HashMap<>(), 1);\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-DescribeNamespace.temporal-error\", new HashMap<>(), 1);\n+    testEnvironment.close();\n+  }\n+\n+  @Test\n+  public void testTemporalInvalidRequestMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs\n+          .blockingStub()\n+          .startWorkflowExecution(StartWorkflowExecutionRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.INVALID_ARGUMENT, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);\n+\n+    verify(reporter, times(1))\n+        .reportCounter(\"temporal-StartWorkflowExecution.temporal-request\", new HashMap<>(), 1);\n+    verify(reporter, times(1))\n+        .reportCounter(\n+            \"temporal-StartWorkflowExecution.temporal-invalid-request\", new HashMap<>(), 1);", "originalCommit": "8bc9f649ab9e354bec58af134f4507da75a2365d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Mzg3OA==", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418783878", "bodyText": "Replaced with constants", "author": "mfateev", "createdAt": "2020-05-01T23:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MzM4NA==", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418643384", "bodyText": "Where does 600 come from? Is this long enough for most/all developers who will run these?", "author": "shawnhathaway", "createdAt": "2020-05-01T17:22:29Z", "path": "src/test/java/io/temporal/workflow/MetricsTest.java", "diffHunk": "@@ -335,4 +354,63 @@ public WorkflowInvoker interceptExecuteWorkflow(\n       return new BaseWorkflowInvoker(i, next);\n     }\n   }\n+\n+  @Test\n+  public void testTemporalFailureMetric() throws InterruptedException {\n+    setUp(\n+        com.uber.m3.util.Duration.ofMillis(300),\n+        WorkerFactoryOptions.newBuilder()\n+            .setWorkflowInterceptor(new CorruptedSignalWorkflowInterceptor())\n+            .build());\n+\n+    try {\n+      WorkflowServiceStubs serviceStubs =\n+          testEnvironment.getWorkflowClient().getWorkflowServiceStubs();\n+\n+      serviceStubs.blockingStub().describeNamespace(DescribeNamespaceRequest.newBuilder().build());\n+      fail(\"failure expected\");\n+    } catch (StatusRuntimeException e) {\n+      assertEquals(Status.Code.UNIMPLEMENTED, e.getStatus().getCode());\n+    }\n+\n+    // Wait for reporter\n+    Thread.sleep(600);", "originalCommit": "8bc9f649ab9e354bec58af134f4507da75a2365d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Mzg3MQ==", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418783871", "bodyText": "Changed to more reasonable value.", "author": "mfateev", "createdAt": "2020-05-01T23:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MzM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3ODk4NQ==", "url": "https://github.com/temporalio/sdk-java/pull/77#discussion_r418978985", "bodyText": "It looks like a smaller value leads to intermittent test failures. So keeping it at 600.", "author": "mfateev", "createdAt": "2020-05-02T16:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0MzM4NA=="}], "type": "inlineReview"}, {"oid": "1455e026ce5551cb06eaae243497c4cfc6409d41", "url": "https://github.com/temporalio/sdk-java/commit/1455e026ce5551cb06eaae243497c4cfc6409d41", "message": "PR comments", "committedDate": "2020-05-02T00:08:47Z", "type": "commit"}, {"oid": "bc8d590aeefec4c6fb2dc277c23fe8c11a7c192d", "url": "https://github.com/temporalio/sdk-java/commit/bc8d590aeefec4c6fb2dc277c23fe8c11a7c192d", "message": "Fixed unit tests", "committedDate": "2020-05-02T04:13:46Z", "type": "commit"}]}