{"pr_number": 65596, "pr_title": "Update build to use gradle wrapper 6.8", "pr_createdAt": "2020-11-30T11:58:10Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65596", "timeline": [{"oid": "c26b3cbefc980b2ddc94e72a987757caf0b2f605", "url": "https://github.com/elastic/elasticsearch/commit/c26b3cbefc980b2ddc94e72a987757caf0b2f605", "message": "Rework toolchain resolution filter", "committedDate": "2020-12-01T11:35:21Z", "type": "forcePushed"}, {"oid": "52a70d88bcab482bd93cbedecb438569a04b9991", "url": "https://github.com/elastic/elasticsearch/commit/52a70d88bcab482bd93cbedecb438569a04b9991", "message": "Update gradle to latest nightly", "committedDate": "2020-12-04T12:03:29Z", "type": "forcePushed"}, {"oid": "c654b22acb0ab771b5c61f4d2c2350c98bbf7d6c", "url": "https://github.com/elastic/elasticsearch/commit/c654b22acb0ab771b5c61f4d2c2350c98bbf7d6c", "message": "Fix Global Info log java info string", "committedDate": "2020-12-21T08:36:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4OTAxMg==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r546589012", "bodyText": "This test class is not working in a unit test context anymore. The only non ignored test checked for the existence of the registered extension. Thats not enough for me to have this ported to an integ tests at the moment so I removed the unit test.", "author": "breskeby", "createdAt": "2020-12-21T09:08:50Z", "path": "buildSrc/src/test/java/org/elasticsearch/gradle/plugin/PluginBuildPluginTests.java", "diffHunk": "@@ -1,73 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.elasticsearch.gradle.plugin;\n-\n-import org.elasticsearch.gradle.BwcVersions;\n-import org.elasticsearch.gradle.test.GradleUnitTestCase;\n-import org.gradle.api.Project;\n-import org.gradle.api.Task;\n-import org.gradle.api.internal.project.ProjectInternal;\n-import org.gradle.testfixtures.ProjectBuilder;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.mockito.Mockito;\n-\n-import java.util.stream.Collectors;\n-\n-public class PluginBuildPluginTests extends GradleUnitTestCase {\n-\n-    private Project project;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        project = ProjectBuilder.builder().withName(getClass().getName()).build();\n-    }\n-\n-    public void testApply() {\n-        // FIXME: distribution download plugin doesn't support running externally\n-        project.getExtensions().getExtraProperties().set(\"bwcVersions\", Mockito.mock(BwcVersions.class));\n-        project.getPlugins().apply(PluginBuildPlugin.class);\n-\n-        assertNotNull(\n-            \"plugin extension created with the right name\",\n-            project.getExtensions().findByName(PluginBuildPlugin.PLUGIN_EXTENSION_NAME)\n-        );\n-        assertNotNull(\"plugin extensions has the right type\", project.getExtensions().findByType(PluginPropertiesExtension.class));\n-\n-        assertNull(\"plugin should not create the integTest task\", project.getTasks().findByName(\"integTest\"));\n-    }\n-\n-    @Ignore(\"https://github.com/elastic/elasticsearch/issues/47123\")\n-    public void testApplyWithAfterEvaluate() {\n-        project.getExtensions().getExtraProperties().set(\"bwcVersions\", Mockito.mock(BwcVersions.class));\n-        project.getPlugins().apply(PluginBuildPlugin.class);\n-        PluginPropertiesExtension extension = project.getExtensions().getByType(PluginPropertiesExtension.class);\n-        extension.setNoticeFile(project.file(\"test.notice\"));\n-        extension.setLicenseFile(project.file(\"test.license\"));\n-        extension.setDescription(\"just a test\");\n-        extension.setClassname(getClass().getName());\n-\n-        ((ProjectInternal) project).evaluate();\n-\n-        assertNotNull(\n-            \"Task to generate notice not created: \" + project.getTasks().stream().map(Task::getPath).collect(Collectors.joining(\", \")),\n-            project.getTasks().findByName(\"generateNotice\")\n-        );\n-    }\n-}", "originalCommit": "8a6402253de1d6e92d6685ca7ce3019e94262d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "295be1873c50e0111b712bf711ea0f2d94892c38", "url": "https://github.com/elastic/elasticsearch/commit/295be1873c50e0111b712bf711ea0f2d94892c38", "message": "Update wrapper to 6.8-rc-5", "committedDate": "2021-01-06T08:05:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM1MzAzMw==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555353033", "bodyText": "The bit we lose here is that we no longer enorce that the environment variable name matches the JDK version it points at. I guess this would later fail w/ us not being able to resovle a compatible JDK.", "author": "mark-vieira", "createdAt": "2021-01-11T21:32:31Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/info/GlobalBuildInfoPlugin.java", "diffHunk": "@@ -182,46 +187,33 @@ private JavaVersion determineJavaVersion(String description, File javaHome, Java\n         return actualVersion;\n     }\n \n-    private JavaInstallation getJavaInstallation(File javaHome) {\n-        JavaInstallation installation;\n-        if (isCurrentJavaHome(javaHome)) {\n-            installation = javaInstallationRegistry.getInstallationForCurrentVirtualMachine().get();\n-        } else {\n-            installation = javaInstallationRegistry.installationForDirectory(objects.directoryProperty().fileValue(javaHome)).get();\n-        }\n-\n-        return installation;\n+    private InstallationLocation getJavaInstallation(File javaHome) {\n+        return javaInstallationRegistry.listInstallations()\n+            .stream()\n+            .filter(installationLocation -> isSameFile(javaHome, installationLocation))\n+            .findFirst()\n+            .get();\n     }\n \n-    private List<JavaHome> getAvailableJavaVersions(JavaVersion minimumCompilerVersion) {\n-        final List<JavaHome> javaVersions = new ArrayList<>();\n-        for (int v = 8; v <= Integer.parseInt(minimumCompilerVersion.getMajorVersion()); v++) {\n-            int version = v;\n-            String javaHomeEnvVarName = getJavaHomeEnvVarName(Integer.toString(version));\n-            if (System.getenv(javaHomeEnvVarName) != null) {\n-                File javaHomeDirectory = new File(findJavaHome(Integer.toString(version)));\n-                Provider<JavaInstallation> javaInstallationProvider = javaInstallationRegistry.installationForDirectory(\n-                    objects.directoryProperty().fileValue(javaHomeDirectory)\n-                );\n-                JavaHome javaHome = JavaHome.of(version, providers.provider(() -> {\n-                    int actualVersion = Integer.parseInt(javaInstallationProvider.get().getJavaVersion().getMajorVersion());\n-                    if (actualVersion != version) {\n-                        throwInvalidJavaHomeException(\"env variable \" + javaHomeEnvVarName, javaHomeDirectory, version, actualVersion);\n-                    }\n-                    return javaHomeDirectory;\n-                }));\n-                javaVersions.add(javaHome);\n-            }\n+    private boolean isSameFile(File javaHome, InstallationLocation installationLocation) {\n+        try {\n+            return Files.isSameFile(installationLocation.getLocation().toPath(), javaHome.toPath());\n+        } catch (IOException ioException) {\n+            throw new UncheckedIOException(ioException);\n         }\n-        return javaVersions;\n     }\n \n-    private static boolean isCurrentJavaHome(File javaHome) {\n-        try {\n-            return Files.isSameFile(javaHome.toPath(), Jvm.current().getJavaHome().toPath());\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n+    /**\n+     * We resolve all available java versions using auto detected by gradles tool chain\n+     * To make transition more reliable we only take env var provided installations into account for now\n+     */\n+    private List<JavaHome> getAvailableJavaVersions() {", "originalCommit": "f717ed4027695fdf019c2fb04a064d22d9783a8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYyMjE4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555622182", "bodyText": "good point. is that something you think is worth to invest in? I guess those issues are rare, but when they occur they suck to be debugged I can imagine. Maybe we want to look into this safety net in a follow up?", "author": "breskeby", "createdAt": "2021-01-12T09:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM1MzAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc5ODY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r556798696", "bodyText": "I think realistically what we want to do is remove the reliance on these environment variables and use Gradle's toolchain capabilities to just download a compatible JDK when necessary. These variables are only used for build time purposes, where we intend to run tests with a particular JDK implementation, that's what RUNTIME_JAVA_HOME is for.\nSo I think we can punt here and instead focus on ditching all usages of these things vs resolving JDKs dynamically.", "author": "mark-vieira", "createdAt": "2021-01-13T20:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM1MzAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNjkwNg==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r559436906", "bodyText": "I will look into this in a separate PR. I didn't want to make too many changes in this PR. So  RUNTIME_JAVA_HOME is basically used to configure the jdk on CI to run all tests against?", "author": "breskeby", "createdAt": "2021-01-18T09:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM1MzAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzODYxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r559438615", "bodyText": "The problem I see at the moment is that the compatibility choices (which vendor is available etc.) is limited in gradle at the moment and might not be enough. If you say that's less of an issue for build time then the toolchain capabilities in gradle might be enough at the moment to pick a proper one", "author": "breskeby", "createdAt": "2021-01-18T09:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM1MzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MTEyMw==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555361123", "bodyText": "Do we want to keep this here or was this only for testing? I'm ok with keeping this around across the board BTW.", "author": "mark-vieira", "createdAt": "2021-01-11T21:47:37Z", "path": "buildSrc/src/integTest/java/org/elasticsearch/gradle/BuildPluginIT.java", "diffHunk": "@@ -105,7 +105,9 @@ private void runInsecureArtifactRepositoryTest(final String name, final String u\n             .withProjectDir(tmpDir.getRoot())\n             .withArguments(\"clean\", \"hello\", \"-s\", \"-i\", \"--warning-mode=all\", \"--scan\")\n             .withPluginClasspath()\n+            .forwardOutput()", "originalCommit": "f717ed4027695fdf019c2fb04a064d22d9783a8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYyMzk0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555623946", "bodyText": "I think we should keep it.", "author": "breskeby", "createdAt": "2021-01-12T09:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MTk4MA==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555361980", "bodyText": "I think that's fine anyway as we don't expect this to be replaced.", "author": "mark-vieira", "createdAt": "2021-01-11T21:49:20Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/precommit/JarHellPrecommitPlugin.java", "diffHunk": "@@ -32,6 +32,9 @@\n     public TaskProvider<? extends Task> createTask(Project project) {\n         Configuration jarHellConfig = project.getConfigurations().create(\"jarHell\");\n         if (BuildParams.isInternal() && project.getPath().equals(\":libs:elasticsearch-core\") == false) {\n+            // ideally we would configure this as a default dependency. But Default dependencies do not work correctly", "originalCommit": "f717ed4027695fdf019c2fb04a064d22d9783a8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MjUyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555362529", "bodyText": "Other question though. How does this work for external builds? Where does the jarhell implementation come from?", "author": "mark-vieira", "createdAt": "2021-01-11T21:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYzNDA3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65596#discussion_r555634079", "bodyText": "You would need to add a dependency like `jarHell 'org.elasticsearch:elasticsearch-core:7.10' at the moment. In general I think we need to put some more dedicated effort into making these external available plugins work nicely for contributors. By that I mean having proper test coverage of third party plugin author use cases etc. I remember we talked about that very early on when having our first talks about the elastic build already.\nWe're moving in that direction with having internal plugins nowadays but there's more work required here", "author": "breskeby", "createdAt": "2021-01-12T09:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM2MTk4MA=="}], "type": "inlineReview"}, {"oid": "bc7440a4c39d8e199ea71c465d5ca98985feb931", "url": "https://github.com/elastic/elasticsearch/commit/bc7440a4c39d8e199ea71c465d5ca98985feb931", "message": "Update gradle to 6.8-rc-1\n\n- resolve available gradle versions using built-in toolchain support\n- fixes deprecated usage of JavaInstallationRegistry", "committedDate": "2021-01-12T09:41:48Z", "type": "commit"}, {"oid": "9a60a2237637e34ee55797fb17fff6f1327890a7", "url": "https://github.com/elastic/elasticsearch/commit/9a60a2237637e34ee55797fb17fff6f1327890a7", "message": "Add debug output for resolving jdks", "committedDate": "2021-01-12T09:41:48Z", "type": "commit"}, {"oid": "31fdbaa61f00e4e028d73ab98e7d352537a6bbbf", "url": "https://github.com/elastic/elasticsearch/commit/31fdbaa61f00e4e028d73ab98e7d352537a6bbbf", "message": "Add RUNTIME_JAVA_HOME as resolvable tool chain", "committedDate": "2021-01-12T09:41:48Z", "type": "commit"}, {"oid": "39cf27470c519c24fdc88bd421d5e4bd9499cd49", "url": "https://github.com/elastic/elasticsearch/commit/39cf27470c519c24fdc88bd421d5e4bd9499cd49", "message": "Fix assertions for up-to-date Transforms\n\n- with gradle 6.8 artifact transforms output is kept in build cache\n- therefore there is no skipping info seen in our tests", "committedDate": "2021-01-12T09:41:49Z", "type": "commit"}, {"oid": "757d50746f65ef286e9d0c69c9b2fcac85578b68", "url": "https://github.com/elastic/elasticsearch/commit/757d50746f65ef286e9d0c69c9b2fcac85578b68", "message": "Remove debug output", "committedDate": "2021-01-12T09:41:49Z", "type": "commit"}, {"oid": "e99d42b8711eb99b2cb61e8ba71fba1889a93b8a", "url": "https://github.com/elastic/elasticsearch/commit/e99d42b8711eb99b2cb61e8ba71fba1889a93b8a", "message": "Add debug output for resolved jdk toolchains", "committedDate": "2021-01-12T09:41:50Z", "type": "commit"}, {"oid": "e77944f94de60b15d7feb68deae9bd0047a473ab", "url": "https://github.com/elastic/elasticsearch/commit/e77944f94de60b15d7feb68deae9bd0047a473ab", "message": "Configure defaults for toolchain resolution in gradle func tests", "committedDate": "2021-01-12T09:41:50Z", "type": "commit"}, {"oid": "0b61e3e0cc125ea257d45489a46f9277912c4e3e", "url": "https://github.com/elastic/elasticsearch/commit/0b61e3e0cc125ea257d45489a46f9277912c4e3e", "message": "Fix plugin func test setup", "committedDate": "2021-01-12T09:41:50Z", "type": "commit"}, {"oid": "02926882d515fb4032fc3b92b2067d15c2a52628", "url": "https://github.com/elastic/elasticsearch/commit/02926882d515fb4032fc3b92b2067d15c2a52628", "message": "Rework toolchain resolution filter", "committedDate": "2021-01-12T09:41:51Z", "type": "commit"}, {"oid": "a38d5b94392f454813c60ae21b98f898cfad13f0", "url": "https://github.com/elastic/elasticsearch/commit/a38d5b94392f454813c60ae21b98f898cfad13f0", "message": "Disable toolchain autodetection for now", "committedDate": "2021-01-12T09:41:51Z", "type": "commit"}, {"oid": "e8a9afad45cc77e17130fbc3b0c16d2ca0d75218", "url": "https://github.com/elastic/elasticsearch/commit/e8a9afad45cc77e17130fbc3b0c16d2ca0d75218", "message": "Update gradle to latest nightly", "committedDate": "2021-01-12T09:41:52Z", "type": "commit"}, {"oid": "3dd4234a8d418ab35b21931eb69ddc6da6a82568", "url": "https://github.com/elastic/elasticsearch/commit/3dd4234a8d418ab35b21931eb69ddc6da6a82568", "message": "Fix Global Info log java info string", "committedDate": "2021-01-12T09:41:52Z", "type": "commit"}, {"oid": "bbc37af98756643cc9e229159c8bf31d21ac3bed", "url": "https://github.com/elastic/elasticsearch/commit/bbc37af98756643cc9e229159c8bf31d21ac3bed", "message": "Update to 6.8-rc-3 and some cleanup", "committedDate": "2021-01-12T09:41:52Z", "type": "commit"}, {"oid": "eae583bed202e0cc1d2d7583724fae8c9af58862", "url": "https://github.com/elastic/elasticsearch/commit/eae583bed202e0cc1d2d7583724fae8c9af58862", "message": "Add missing files", "committedDate": "2021-01-12T09:41:53Z", "type": "commit"}, {"oid": "d3611f3b8fdc4376239223ca034cc7280e5b1d1a", "url": "https://github.com/elastic/elasticsearch/commit/d3611f3b8fdc4376239223ca034cc7280e5b1d1a", "message": "Fix artifact transform test", "committedDate": "2021-01-12T09:41:53Z", "type": "commit"}, {"oid": "f2dd4c3edae5185cc71b20514d0d744109f1c30a", "url": "https://github.com/elastic/elasticsearch/commit/f2dd4c3edae5185cc71b20514d0d744109f1c30a", "message": "Update wrapper to 6.8-rc-5", "committedDate": "2021-01-12T09:41:54Z", "type": "commit"}, {"oid": "1e50f5da201f71f637b0bc924582dbd65c31db28", "url": "https://github.com/elastic/elasticsearch/commit/1e50f5da201f71f637b0bc924582dbd65c31db28", "message": "Update to Gradle 6.8 GA", "committedDate": "2021-01-12T09:41:54Z", "type": "commit"}, {"oid": "77dbe627970b6c3eaeee916dd2a45b6837c948f0", "url": "https://github.com/elastic/elasticsearch/commit/77dbe627970b6c3eaeee916dd2a45b6837c948f0", "message": "Polishing func test assertion methods", "committedDate": "2021-01-12T09:41:54Z", "type": "commit"}, {"oid": "77dbe627970b6c3eaeee916dd2a45b6837c948f0", "url": "https://github.com/elastic/elasticsearch/commit/77dbe627970b6c3eaeee916dd2a45b6837c948f0", "message": "Polishing func test assertion methods", "committedDate": "2021-01-12T09:41:54Z", "type": "forcePushed"}]}