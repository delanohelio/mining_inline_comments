{"pr_number": 56797, "pr_title": "SQL: JDBC: fix access to the Manifest for non-entry JAR URLs", "pr_createdAt": "2020-05-14T21:49:49Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56797", "timeline": [{"oid": "cf45b9a9ef0ecb065e71a68e2d7ee7766700ef17", "url": "https://github.com/elastic/elasticsearch/commit/cf45b9a9ef0ecb065e71a68e2d7ee7766700ef17", "message": "JDBC: fix access to the Manifest for non-entry JAR\n\nThe JDBC driver will attempt to read its version from the Manifest file\nembedded into its JAR. The URL pointing to the JAR can be provided in a\nfew ways.\n\nSo far, accessing the Manfiest was attempted by getting a URLConnection\nout of the URL and then getting an input stream out of this connection.\nFor file JAR URLs, this only works however if the URL points to the\ndriver as a JAR file entry (i.e. <sub-url>!/jdbc-driver.jar!/). If\nthat's not the case, the JarURLConnection will throw an IOException.\n\nThis commit fixes that: in case the URL points to a JAR entry\n(jar:file:<path>/jdbc-driver.jar!/), the manifest is read directly with\nJarURLConnection#getManifest().", "committedDate": "2020-05-14T21:31:46Z", "type": "commit"}, {"oid": "0bfdee6473a573641c01e4ffdc40299f2300190c", "url": "https://github.com/elastic/elasticsearch/commit/0bfdee6473a573641c01e4ffdc40299f2300190c", "message": "Fix style errors\n\nRemove unused import.", "committedDate": "2020-05-14T22:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNDQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425604458", "bodyText": ":-)", "author": "astefan", "createdAt": "2020-05-15T07:00:41Z", "path": "x-pack/plugin/sql/sql-client/src/test/java/org/elasticsearch/xpack/sql/client/VersionTests.java", "diffHunk": "@@ -31,27 +31,74 @@ public void testInvalidVersion() {\n         assertEquals(\"Invalid version format [7.1]\", err.getMessage());\n     }\n \n-    public void testVersionFromJarInJar() throws IOException {\n+\n+    private static final String JAR_PATH_SEPARATOR = \"!/\";\n+\n+    private static String versionString(byte[] parts) {\n+        StringBuffer version = new StringBuffer();\n+        for (byte part : parts) {\n+            if (version.length() > 0) {\n+                version.append(\".\");\n+            }\n+            version.append(part);\n+        }\n+        return version.toString();\n+    }\n+\n+    private static Path createDriverJar(byte[] parts) throws IOException {\n         final String JDBC_JAR_NAME = \"es-sql-jdbc.jar\";\n-        final String JAR_PATH_SEPARATOR = \"!/\";\n \n         Path dir = createTempDir();\n-        Path jarPath = dir.resolve(\"uberjar.jar\");          // simulated uberjar containing the jdbc driver\n-        Path innerJarPath = dir.resolve(JDBC_JAR_NAME); // simulated ES JDBC driver file\n+        Path jarPath = dir.resolve(JDBC_JAR_NAME); // simulated ES JDBC driver file\n \n         Manifest jdbcJarManifest = new Manifest();\n         Attributes attributes = jdbcJarManifest.getMainAttributes();\n         attributes.put(Attributes.Name.MANIFEST_VERSION, \"1.0.0\");\n         attributes.put(new Attributes.Name(\"Change\"), \"abc\");\n-        attributes.put(new Attributes.Name(\"X-Compile-Elasticsearch-Version\"), \"1.2.3\");\n+        attributes.put(new Attributes.Name(\"X-Compile-Elasticsearch-Version\"), versionString(parts));\n \n         // create the jdbc driver file\n-        try (JarOutputStream jdbc = new JarOutputStream(Files.newOutputStream(innerJarPath, StandardOpenOption.CREATE), jdbcJarManifest)) {}\n+        try (JarOutputStream __ = new JarOutputStream(Files.newOutputStream(jarPath, StandardOpenOption.CREATE), jdbcJarManifest)) {}", "originalCommit": "0bfdee6473a573641c01e4ffdc40299f2300190c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NDExNg==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425774116", "bodyText": "Yeh, _ is now a keyword (besides a common-ish practice to name unused vars :-) ). I just wanted to have the line within the line len limit and no extra line added.", "author": "bpintea", "createdAt": "2020-05-15T12:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNDQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNzcyMw==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425607723", "bodyText": "do { } while (false) or use a function with the same break conditions (but using return to \"jump\" at the end)?", "author": "astefan", "createdAt": "2020-05-15T07:08:54Z", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -71,23 +72,36 @@\n         CURRENT = extractVersion(url);\n     }\n \n+    // There are three main types of provided URLs:\n+    // (1) a file URL: file:<path><FS separator><driver name>.jar\n+    // (2) jar file URL pointing to a JAR file: jar:<sub-url><separator><driver name>.jar!/\n+    // (3) jar file URL pointing to a JAR file entry (likely a fat JAR, but other types are possible): jar:<sub-url>!/driver name>.jar!/\n     static SqlVersion extractVersion(URL url) {\n+        Manifest manifest = null;\n         String urlStr = url.toString();\n         if (urlStr.endsWith(\".jar\") || urlStr.endsWith(\".jar!/\")) {\n             try {\n                 URLConnection conn = url.openConnection();\n-                conn.setUseCaches(false);\n-\n-                try (JarInputStream jar = new JarInputStream(conn.getInputStream())) {\n-                    Manifest manifest = jar.getManifest();\n-                    String version = manifest.getMainAttributes().getValue(\"X-Compile-Elasticsearch-Version\");\n-                    return SqlVersion.fromString(version);\n-                }\n+                do {\n+                    // For a jar protocol, the implementing java.base/sun.net.www.protocol.jar.JarUrlConnection#getInputStream() will only\n+                    // return a stream (vs. throw an IOException) if the JAR file URL points to a JAR file entry and not a JAR file.\n+                    if (url.getProtocol().equals(\"jar\")) {\n+                        JarURLConnection jarConn = (JarURLConnection) conn;\n+                        if (jarConn.getEntryName() == null) { // the URL points to a JAR file\n+                            manifest = jarConn.getManifest(); // in case of a fat JAR, this would return the outermost JAR's manifest\n+                            break;\n+                        }\n+                    }\n+                    try (JarInputStream jar = new JarInputStream(conn.getInputStream())) {\n+                        manifest = jar.getManifest();\n+                    }\n+                } while (false);", "originalCommit": "0bfdee6473a573641c01e4ffdc40299f2300190c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3MjQ2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425672461", "bodyText": "This section needs improving.\nthe do {} while (false) is unnecessary. The break can also be removed by checking if the manifest is still null before the try block:\nif (url.getProtocol()...) {\n}\n\nif (manifest == null) {\n try (JarInputStream...)\n}\n\nFurther more, if the entry is not-null what would be the returned manifest?\nif (url.getProtocol().equals(\"jar\")) {\n   JarURLConnection jarConn = (JarURLConnection) conn;\n   manifest = jarConn.getManifest(); <-- ? what would this return?", "author": "costin", "createdAt": "2020-05-15T09:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNzcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3MzY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425773659", "bodyText": "do { } while (false)\n\nI thought this might raise some eyebrows. :-)\n\nor use a function with the same break conditions (but using return to \"jump\" at the end)?\n\nI've turned the frame loop into a function. Hope this is what you were suggesting.\n\nthe do {} while (false) is unnecessary.\n\nGenerally this avoids an unnecessary fetch&compare.\nBut in this case if the manifest is still null (shouldn't, but if), conn.getInputStream() would raise an exception (vs. just returning the \"null version\").\n\nif the entry is not-null what would be the returned manifest?\n\nIf the entry is not null, it'd simply return the [outermost] JAR's manifest (since the entry can be any class, i.e. non a JAR). Let me know if I still didn't get your question, though.", "author": "bpintea", "createdAt": "2020-05-15T12:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNDE3MA==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425614170", "bodyText": "Why is this {1, 2, 3} and the previous test is {0, 1, 2}. It is relevant for these tests to have different versions to test? If not, and for the sake of using whatever versions, can you use a random value?", "author": "astefan", "createdAt": "2020-05-15T07:23:27Z", "path": "x-pack/plugin/sql/sql-client/src/test/java/org/elasticsearch/xpack/sql/client/VersionTests.java", "diffHunk": "@@ -31,27 +31,74 @@ public void testInvalidVersion() {\n         assertEquals(\"Invalid version format [7.1]\", err.getMessage());\n     }\n \n-    public void testVersionFromJarInJar() throws IOException {\n+\n+    private static final String JAR_PATH_SEPARATOR = \"!/\";\n+\n+    private static String versionString(byte[] parts) {\n+        StringBuffer version = new StringBuffer();\n+        for (byte part : parts) {\n+            if (version.length() > 0) {\n+                version.append(\".\");\n+            }\n+            version.append(part);\n+        }\n+        return version.toString();\n+    }\n+\n+    private static Path createDriverJar(byte[] parts) throws IOException {\n         final String JDBC_JAR_NAME = \"es-sql-jdbc.jar\";\n-        final String JAR_PATH_SEPARATOR = \"!/\";\n \n         Path dir = createTempDir();\n-        Path jarPath = dir.resolve(\"uberjar.jar\");          // simulated uberjar containing the jdbc driver\n-        Path innerJarPath = dir.resolve(JDBC_JAR_NAME); // simulated ES JDBC driver file\n+        Path jarPath = dir.resolve(JDBC_JAR_NAME); // simulated ES JDBC driver file\n \n         Manifest jdbcJarManifest = new Manifest();\n         Attributes attributes = jdbcJarManifest.getMainAttributes();\n         attributes.put(Attributes.Name.MANIFEST_VERSION, \"1.0.0\");\n         attributes.put(new Attributes.Name(\"Change\"), \"abc\");\n-        attributes.put(new Attributes.Name(\"X-Compile-Elasticsearch-Version\"), \"1.2.3\");\n+        attributes.put(new Attributes.Name(\"X-Compile-Elasticsearch-Version\"), versionString(parts));\n \n         // create the jdbc driver file\n-        try (JarOutputStream jdbc = new JarOutputStream(Files.newOutputStream(innerJarPath, StandardOpenOption.CREATE), jdbcJarManifest)) {}\n+        try (JarOutputStream __ = new JarOutputStream(Files.newOutputStream(jarPath, StandardOpenOption.CREATE), jdbcJarManifest)) {}\n+\n+        return jarPath;\n+    }\n+\n+    public void testVersionFromFileJar() throws IOException {\n+        byte[] parts = {0, 1, 2};\n+        Path jarPath = createDriverJar(parts);\n+\n+        URL fileUrl = new URL(jarPath.toUri().toURL().toString());\n+        SqlVersion version = ClientVersion.extractVersion(fileUrl);\n+\n+        assertEquals(parts[0], version.major);\n+        assertEquals(parts[1], version.minor);\n+        assertEquals(parts[2], version.revision);\n+        assertEquals(versionString(parts), version.version);\n+    }\n+\n+    public void testVersionFromJar() throws IOException {\n+        byte[] parts = {1, 2, 3};", "originalCommit": "0bfdee6473a573641c01e4ffdc40299f2300190c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3MzEzMw==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425773133", "bodyText": "Right, randomising it is a better idea. I've added that, thanks.", "author": "bpintea", "createdAt": "2020-05-15T12:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNDE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NzgyMw==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425647823", "bodyText": "I think there was a reason for that, but can't remember. @astefan do you ?", "author": "matriv", "createdAt": "2020-05-15T08:30:39Z", "path": "x-pack/plugin/sql/sql-client/src/main/java/org/elasticsearch/xpack/sql/client/ClientVersion.java", "diffHunk": "@@ -71,23 +72,36 @@\n         CURRENT = extractVersion(url);\n     }\n \n+    // There are three main types of provided URLs:\n+    // (1) a file URL: file:<path><FS separator><driver name>.jar\n+    // (2) jar file URL pointing to a JAR file: jar:<sub-url><separator><driver name>.jar!/\n+    // (3) jar file URL pointing to a JAR file entry (likely a fat JAR, but other types are possible): jar:<sub-url>!/driver name>.jar!/\n     static SqlVersion extractVersion(URL url) {\n+        Manifest manifest = null;\n         String urlStr = url.toString();\n         if (urlStr.endsWith(\".jar\") || urlStr.endsWith(\".jar!/\")) {\n             try {\n                 URLConnection conn = url.openConnection();\n-                conn.setUseCaches(false);", "originalCommit": "0bfdee6473a573641c01e4ffdc40299f2300190c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1NzY1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425657651", "bodyText": "I didn't notice this change when I reviewed this. Good point.\nI think I added that because the temporary jars that were created during the test couldn't be cleaned-up properly. And I would keep the setUseCaches(false) as is. I was getting something like this:\njava.io.IOException: Could not remove the following files (in the order of attempts):\n   C:\\Users\\AppData\\Local\\Temp\\org.elasticsearch.xpack.sql.client.VersionTests_123F282E30B0C58F-001\\tempDir-002\\foo.jar: java.nio.file.FileSystemException: C:\\Users\\AppData\\Local\\Temp\\org.elasticsearch.xpack.sql.client.VersionTests_123F282E30B0C58F-001\\tempDir-002\\foo.jar: The process cannot access the file because it is being used by another process.\n   C:\\Users\\AppData\\Local\\Temp\\org.elasticsearch.xpack.sql.client.VersionTests_123F282E30B0C58F-001\\tempDir-002: java.nio.file.DirectoryNotEmptyException: C:\\Users\\AppData\\Local\\Temp\\org.elasticsearch.xpack.sql.client.VersionTests_123F282E30B0C58F-001\\tempDir-002\n   C:\\Users\\AppData\\Local\\Temp\\org.elasticsearch.xpack.sql.client.VersionTests_123F282E30B0C58F-001: java.nio.file.DirectoryNotEmptyException: C:\\Users\\AppData\\Local\\Temp\\org.elasticsearch.xpack.sql.client.VersionTests_123F282E30B0C58F-001\n\tat __randomizedtesting.SeedInfo.seed([123F282E30B0C58F]:0)\n\tat org.apache.lucene.util.IOUtils.rm(IOUtils.java:319)\n\tat org.apache.lucene.util.TestRuleTemporaryFilesCleanup.afterAlways(TestRuleTemporaryFilesCleanup.java:216)\n\tat com.carrotsearch.randomizedtesting.rules.TestRuleAdapter$1.afterAlways(TestRuleAdapter.java:31)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:43)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "author": "astefan", "createdAt": "2020-05-15T08:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NzgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1Nzc4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425657782", "bodyText": "Avoid file locking, at least on Windows.", "author": "costin", "createdAt": "2020-05-15T08:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NzgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3MzExMw==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425673113", "bodyText": "Not sure why my previous comment doesn't show up but it's because it avoids file locking on Windows as it frees the stream early on.", "author": "costin", "createdAt": "2020-05-15T09:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NzgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3Mjk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/56797#discussion_r425772994", "bodyText": "Good catch, thanks @matriv. It was unintentional. I've put it back.", "author": "bpintea", "createdAt": "2020-05-15T12:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NzgyMw=="}], "type": "inlineReview"}, {"oid": "988b9b366d390ea4b84797a52383a95302858551", "url": "https://github.com/elastic/elasticsearch/commit/988b9b366d390ea4b84797a52383a95302858551", "message": "Address review comments\n\n- turn frame loop into function call\n- make version randomized\n- readd conn caching disabling, unintentionally removed.", "committedDate": "2020-05-15T12:27:01Z", "type": "commit"}, {"oid": "4f24d3f5e74b971eabe7b7a3c14a46cbcdfbb75f", "url": "https://github.com/elastic/elasticsearch/commit/4f24d3f5e74b971eabe7b7a3c14a46cbcdfbb75f", "message": "Merge branch 'master' into fix/jdbc_version_read", "committedDate": "2020-05-15T14:18:41Z", "type": "commit"}]}