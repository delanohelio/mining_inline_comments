{"pr_number": 65102, "pr_title": "Split precommit plugins into internal and external", "pr_createdAt": "2020-11-16T18:05:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65102", "timeline": [{"oid": "670ee71cc15d2a3ddcde5d38afd560d87a56fac7", "url": "https://github.com/elastic/elasticsearch/commit/670ee71cc15d2a3ddcde5d38afd560d87a56fac7", "message": "Split precommit plugins into internal and external", "committedDate": "2020-11-17T10:11:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwMzEwNw==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525103107", "bodyText": "removing JarHellPrecommitPlugin and ThirdPartyAuditPrecommitPlugin here", "author": "breskeby", "createdAt": "2020-11-17T12:04:20Z", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/internal/precommit/InternalPrecommitTasks.java", "diffHunk": "@@ -16,35 +16,38 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.elasticsearch.gradle.precommit\n \n+package org.elasticsearch.gradle.internal.precommit;\n \n-import org.gradle.api.Project\n+import org.elasticsearch.gradle.precommit.LicenseHeadersPrecommitPlugin;\n+import org.elasticsearch.gradle.precommit.PrecommitTasks;\n+import org.gradle.api.Project;\n \n /**\n- * Validation tasks which should be run before committing. These run before tests.\n- */\n-class PrecommitTasks {\n-\n-    /** Adds a precommit task, which depends on non-test verification tasks. */\n-\n-    static void create(Project project, boolean includeDependencyLicenses) {\n+ * Internal precommit plugins that adds elasticsearch project specific\n+ * checks to the common precommit plugin.\n+ * */\n+public class InternalPrecommitTasks {\n+    /**\n+     * Adds a precommit task, which depends on non-test verification tasks.\n+     */\n+    public static void create(Project project, boolean includeDependencyLicenses) {\n+        PrecommitTasks.create(project);\n \n-        project.pluginManager.apply(CheckstylePrecommitPlugin)\n-        project.pluginManager.apply(ForbiddenApisPrecommitPlugin)\n-        project.pluginManager.apply(JarHellPrecommitPlugin)\n-        project.pluginManager.apply(ForbiddenPatternsPrecommitPlugin)\n-        project.pluginManager.apply(LicenseHeadersPrecommitPlugin)\n-        project.pluginManager.apply(FilePermissionsPrecommitPlugin)\n-        project.pluginManager.apply(ThirdPartyAuditPrecommitPlugin)\n-        project.pluginManager.apply(TestingConventionsPrecommitPlugin)\n+        project.getPluginManager().apply(CheckstylePrecommitPlugin.class);", "originalCommit": "7f3a76ad0a6eacf5dfe41747301be95972f79638", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNDgyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525104825", "bodyText": "the actual change in this class except porting it to java", "author": "breskeby", "createdAt": "2020-11-17T12:07:37Z", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneRestTestPlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.ElasticsearchJavaPlugin;\n+import org.elasticsearch.gradle.ExportElasticsearchBuildResourcesTask;\n+import org.elasticsearch.gradle.RepositoriesSetupPlugin;\n+import org.elasticsearch.gradle.info.BuildParams;\n+import org.elasticsearch.gradle.info.GlobalBuildInfoPlugin;\n+import org.elasticsearch.gradle.internal.precommit.InternalPrecommitTasks;\n+import org.elasticsearch.gradle.precommit.PrecommitTasks;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.gradle.api.InvalidUserDataException;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.plugins.JavaBasePlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.plugins.JavaPluginExtension;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.plugins.ide.eclipse.model.EclipseModel;\n+import org.gradle.plugins.ide.idea.model.IdeaModel;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Configures the build to compile tests against Elasticsearch's test framework\n+ * and run REST tests. Use BuildPlugin if you want to build main code as well\n+ * as tests.\n+ */\n+public class StandaloneRestTestPlugin implements Plugin<Project> {\n+    @Override\n+    public void apply(Project project) {\n+        project.getPluginManager().withPlugin(\"elasticsearch.build\", appliedPlugin -> {\n+            throw new InvalidUserDataException(\n+                \"elasticsearch.standalone-test \"\n+                    + \"elasticsearch.standalone-rest-test, \"\n+                    + \"and elasticsearch.build \"\n+                    + \"are mutually exclusive\"\n+            );\n+        });\n+\n+        project.getRootProject().getPluginManager().apply(GlobalBuildInfoPlugin.class);\n+        project.getPluginManager().apply(JavaBasePlugin.class);\n+        project.getPluginManager().apply(TestClustersPlugin.class);\n+        project.getPluginManager().apply(RepositoriesSetupPlugin.class);\n+        project.getPluginManager().apply(RestTestBasePlugin.class);\n+\n+        project.getTasks().register(\"buildResources\", ExportElasticsearchBuildResourcesTask.class);\n+        ElasticsearchJavaPlugin.configureInputNormalization(project);\n+        ElasticsearchJavaPlugin.configureCompile(project);\n+\n+        project.getExtensions().getByType(JavaPluginExtension.class).setSourceCompatibility(BuildParams.getMinimumRuntimeVersion());\n+        project.getExtensions().getByType(JavaPluginExtension.class).setTargetCompatibility(BuildParams.getMinimumRuntimeVersion());\n+\n+        // only setup tests to build\n+        SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);\n+        final SourceSet testSourceSet = sourceSets.create(\"test\");\n+\n+        project.getTasks().withType(Test.class).configureEach(test -> {\n+            test.setTestClassesDirs(testSourceSet.getOutput().getClassesDirs());\n+            test.setClasspath(testSourceSet.getRuntimeClasspath());\n+        });\n+\n+        // create a compileOnly configuration as others might expect it\n+        project.getConfigurations().create(\"compileOnly\");\n+        project.getDependencies().add(\"testImplementation\", project.project(\":test:framework\"));\n+        EclipseModel eclipse = project.getExtensions().getByType(EclipseModel.class);\n+        eclipse.getClasspath().setSourceSets(Arrays.asList(testSourceSet));\n+        List<Configuration> plusConfigurations = Arrays.asList(\n+            project.getConfigurations().getByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME)\n+        );\n+        eclipse.getClasspath().setPlusConfigurations(plusConfigurations);\n+        IdeaModel idea = project.getExtensions().getByType(IdeaModel.class);\n+        idea.getModule()\n+            .setTestSourceDirs(\n+                Stream.of(idea.getModule().getTestSourceDirs(), testSourceSet.getJava().getSrcDirs())\n+                    .flatMap(x -> x.stream())\n+                    .collect(Collectors.toSet())\n+            );\n+        idea.getModule().getScopes().put(\"TEST\", Map.of(\"plus\", plusConfigurations));\n+\n+        BuildParams.withInternalBuild(() -> InternalPrecommitTasks.create(project, false)).orElse(() -> PrecommitTasks.create(project));", "originalCommit": "7f3a76ad0a6eacf5dfe41747301be95972f79638", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODgyNg==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525538826", "bodyText": "Since we removed jarhell and thirdpartyaudit from InternalPrecommitTasks what then applies those? Shouldn't we always apply PrecommitTasks, not just as part of this else condition?", "author": "mark-vieira", "createdAt": "2020-11-17T21:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNDgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMzYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526323623", "bodyText": "PrecommitTasks are applied within InternalPrecommitTasks", "author": "breskeby", "createdAt": "2020-11-18T18:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNDgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwNjg2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525506869", "bodyText": "Shouldn't this be true?", "author": "mark-vieira", "createdAt": "2020-11-17T20:35:57Z", "path": "buildSrc/src/main/java/org/elasticsearch/gradle/info/BuildParams.java", "diffHunk": "@@ -154,6 +154,36 @@ private static String propertyName(String methodName) {\n         return propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);\n     }\n \n+    public static InternalMarker withInternalBuild(Runnable configBlock) {\n+        if (isInternal()) {\n+            configBlock.run();\n+            return InternalMarker.INTERNAL;\n+        } else {\n+            return InternalMarker.EXTERNAL;\n+        }\n+    }\n+\n+    public enum InternalMarker {\n+        INTERNAL(false),", "originalCommit": "7f3a76ad0a6eacf5dfe41747301be95972f79638", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMzc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526323761", "bodyText": "true, fixed", "author": "breskeby", "createdAt": "2020-11-18T18:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUwNjg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODExOA==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r525538118", "bodyText": "I'd prefer we just stick with the slightly more verbose streams api here than rely on internal Gradle util classes. Or introduce our own util method.", "author": "mark-vieira", "createdAt": "2020-11-17T21:32:02Z", "path": "buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersPrecommitPlugin.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.precommit;\n+\n+import org.elasticsearch.gradle.util.GradleUtils;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+import org.gradle.api.provider.ProviderFactory;\n+import org.gradle.api.tasks.SourceSetContainer;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.util.CollectionUtils;\n+\n+import javax.inject.Inject;\n+\n+public class LicenseHeadersPrecommitPlugin extends PrecommitPlugin {\n+\n+    private final ProviderFactory providerFactory;\n+\n+    @Inject\n+    public LicenseHeadersPrecommitPlugin(ProviderFactory providerFactory) {\n+        this.providerFactory = providerFactory;\n+    }\n+\n+    @Override\n+    public TaskProvider<? extends Task> createTask(Project project) {\n+        return project.getTasks().register(\"licenseHeaders\", LicenseHeadersTask.class, licenseHeadersTask -> {\n+            licenseHeadersTask.getSourceFolders().addAll(providerFactory.provider(() -> {\n+                final SourceSetContainer sourceSets = GradleUtils.getJavaSourceSets(project);\n+                return CollectionUtils.collect(sourceSets, sourceSet -> sourceSet.getAllJava());", "originalCommit": "7f3a76ad0a6eacf5dfe41747301be95972f79638", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTYzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65102#discussion_r526325631", "bodyText": "For now kept this to be groovy so reverted this change", "author": "breskeby", "createdAt": "2020-11-18T18:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODExOA=="}], "type": "inlineReview"}, {"oid": "072a7ece38e50af1328b4192a091fbf433b0ad5e", "url": "https://github.com/elastic/elasticsearch/commit/072a7ece38e50af1328b4192a091fbf433b0ad5e", "message": "Split precommit plugins into internal and external", "committedDate": "2020-11-18T16:17:39Z", "type": "commit"}, {"oid": "f33da4cc78e085450c060d72cd180e0af6828161", "url": "https://github.com/elastic/elasticsearch/commit/f33da4cc78e085450c060d72cd180e0af6828161", "message": "Introduce interface for InternalPlugins", "committedDate": "2020-11-18T16:17:39Z", "type": "commit"}, {"oid": "7fbf0e25d5c0d9a64880a68ff4526fed398d13f1", "url": "https://github.com/elastic/elasticsearch/commit/7fbf0e25d5c0d9a64880a68ff4526fed398d13f1", "message": "Some polishing", "committedDate": "2020-11-18T16:17:39Z", "type": "commit"}, {"oid": "4d9c004bafcea3490520b6b19beceb7f1debbe1f", "url": "https://github.com/elastic/elasticsearch/commit/4d9c004bafcea3490520b6b19beceb7f1debbe1f", "message": "Minor polishing", "committedDate": "2020-11-18T16:17:39Z", "type": "commit"}, {"oid": "71942652142f3d2b1a1d9f7de71a1b80dc031d21", "url": "https://github.com/elastic/elasticsearch/commit/71942652142f3d2b1a1d9f7de71a1b80dc031d21", "message": "Apply review feedback\n\n- avoid joint java groovy compilation", "committedDate": "2020-11-18T16:17:40Z", "type": "commit"}, {"oid": "ece5df594f67b9eebb58d7c12a4b5df86bea01c6", "url": "https://github.com/elastic/elasticsearch/commit/ece5df594f67b9eebb58d7c12a4b5df86bea01c6", "message": "Fix integ tests", "committedDate": "2020-11-18T16:17:40Z", "type": "commit"}, {"oid": "ece5df594f67b9eebb58d7c12a4b5df86bea01c6", "url": "https://github.com/elastic/elasticsearch/commit/ece5df594f67b9eebb58d7c12a4b5df86bea01c6", "message": "Fix integ tests", "committedDate": "2020-11-18T16:17:40Z", "type": "forcePushed"}, {"oid": "27f69cf7cf7c1657fc69b62ccae23c4d420c294b", "url": "https://github.com/elastic/elasticsearch/commit/27f69cf7cf7c1657fc69b62ccae23c4d420c294b", "message": "Move isModule handling into internal only", "committedDate": "2020-11-18T19:03:21Z", "type": "commit"}, {"oid": "15cd33b08f97c05a332f6109d7128f9ea6c39b07", "url": "https://github.com/elastic/elasticsearch/commit/15cd33b08f97c05a332f6109d7128f9ea6c39b07", "message": "More polishin", "committedDate": "2020-11-18T19:30:12Z", "type": "commit"}]}