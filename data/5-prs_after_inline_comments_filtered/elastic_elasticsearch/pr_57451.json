{"pr_number": 57451, "pr_title": "SQL: Make CASTing string to DATETIME more lenient", "pr_createdAt": "2020-06-01T17:22:24Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57451", "timeline": [{"oid": "5def43e65e5a84cf259b192bd4b09dca7db352d0", "url": "https://github.com/elastic/elasticsearch/commit/5def43e65e5a84cf259b192bd4b09dca7db352d0", "message": "SQL: Make CASTing string to DATETIME more lenient\n\nSome BI tools (i.e. Tableau) would try to cast strings where the time\npart is separated from the date part with a whitespace instead of `T`.\nAdjust type convertion used by CAST to support this.", "committedDate": "2020-06-01T17:18:19Z", "type": "commit"}, {"oid": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "url": "https://github.com/elastic/elasticsearch/commit/e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "message": "fix tests", "committedDate": "2020-06-01T17:39:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MzEwMg==", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433393102", "bodyText": "Why '+3' here?", "author": "astefan", "createdAt": "2020-06-01T17:53:05Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -33,10 +54,21 @@ public static ZonedDateTime asDateTime(long millis) {\n      * Parses the given string into a DateTime using UTC as a default timezone.\n      */\n     public static ZonedDateTime asDateTime(String dateFormat) {\n-        return DateFormatters.from(UTC_DATE_TIME_FORMATTER.parse(dateFormat)).withZoneSameInstant(UTC);\n+        int separatorIdx = dateFormat.indexOf('-');\n+        if (separatorIdx == 0) { // negative year\n+            separatorIdx = dateFormat.indexOf('-', 1);\n+        }\n+        separatorIdx = dateFormat.indexOf('-', separatorIdx + 1) + 3;", "originalCommit": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNzA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433407091", "bodyText": "if you have a date like -1000-11-22T10:20:30....:\ncheck for the first char, if - move to idx 1.\nThen detect the first -, then detect the second - and +3 to move past 22 to the T or whitespace.", "author": "matriv", "createdAt": "2020-06-01T18:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMzg5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433413891", "bodyText": "Worth a comment in the code.", "author": "costin", "createdAt": "2020-06-01T18:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MzEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NTI5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433395299", "bodyText": "Why are these needed in QL and not SQL only?\nAlso, SQL has a DateUtils class with DateTimeFormatters that use whitespace separators. Haven't looked into this in more depth, but have you considered having a single definition source for these DateTimeFormatters?", "author": "astefan", "createdAt": "2020-06-01T17:57:14Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -6,19 +6,40 @@\n \n package org.elasticsearch.xpack.ql.type;\n \n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.time.DateFormatters;\n \n import java.time.Instant;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;\n \n //NB: Taken from sql-proto.\n public final class DateUtils {\n \n     public static final ZoneId UTC = ZoneId.of(\"Z\");\n \n-    private static final DateFormatter UTC_DATE_TIME_FORMATTER = DateFormatter.forPattern(\"date_optional_time\").withZone(UTC);\n+    private static final DateTimeFormatter DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()", "originalCommit": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMTM5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433411391", "bodyText": "Currently SQL is using the QL for the String->DATETIME conversion, and SQL has the additional conversions for String->DATE, String->TIME. If we move the leniency only to SQL we'll have to move that conversion there. What do you think?\nAlso we have this issue for consolidating the date related utils: #56494 so I'd rather do the whole refactoring in a separate PR.", "author": "matriv", "createdAt": "2020-06-01T18:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NTI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNDMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/57451#discussion_r433414303", "bodyText": "It's annoying the format builder does not allow for two literals to be specified as either/or yet supports optional.", "author": "costin", "createdAt": "2020-06-01T18:33:36Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/type/DateUtils.java", "diffHunk": "@@ -6,19 +6,40 @@\n \n package org.elasticsearch.xpack.ql.type;\n \n-import org.elasticsearch.common.time.DateFormatter;\n import org.elasticsearch.common.time.DateFormatters;\n \n import java.time.Instant;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;\n \n //NB: Taken from sql-proto.\n public final class DateUtils {\n \n     public static final ZoneId UTC = ZoneId.of(\"Z\");\n \n-    private static final DateFormatter UTC_DATE_TIME_FORMATTER = DateFormatter.forPattern(\"date_optional_time\").withZone(UTC);\n+    private static final DateTimeFormatter DATE_OPTIONAL_TIME_FORMATTER_WHITESPACE = new DateTimeFormatterBuilder()", "originalCommit": "e4c6d3622d73e94a9c56ac0b5e686da798ffb465", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee9cdf7e3947aa36ad3020cf10f83c6875b62edd", "url": "https://github.com/elastic/elasticsearch/commit/ee9cdf7e3947aa36ad3020cf10f83c6875b62edd", "message": "address comments", "committedDate": "2020-06-01T19:00:06Z", "type": "commit"}, {"oid": "c08a2de7fe9540e44e699dc87a656ee683073e3e", "url": "https://github.com/elastic/elasticsearch/commit/c08a2de7fe9540e44e699dc87a656ee683073e3e", "message": "add integ tests", "committedDate": "2020-06-01T20:17:07Z", "type": "commit"}]}