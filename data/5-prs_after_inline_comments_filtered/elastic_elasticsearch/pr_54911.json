{"pr_number": 54911, "pr_title": "Add analytics plugin usage stats to _xpack/usage", "pr_createdAt": "2020-04-07T17:43:21Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54911", "timeline": [{"oid": "b86bd5772d2cb4e719de03ec00759c57750f4769", "url": "https://github.com/elastic/elasticsearch/commit/b86bd5772d2cb4e719de03ec00759c57750f4769", "message": "Add analytics plugin usage stats to _xpack/usage\n\nAdds analytics plugin usage stats to _xpack/usage.\n\nCloses #54847", "committedDate": "2020-04-07T17:35:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMjYxNw==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405002617", "bodyText": "Ouch.", "author": "nik9000", "createdAt": "2020-04-07T17:54:36Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsPlugin.java", "diffHunk": "@@ -137,7 +137,7 @@ public AnalyticsPlugin() { }\n             ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry,\n             Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n             IndexNameExpressionResolver indexNameExpressionResolver) {\n-        return singletonList(new AnalyticsUsage());", "originalCommit": "b86bd5772d2cb4e719de03ec00759c57750f4769", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNjA2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405006061", "bodyText": "I feel like we might be better off using an EnumMap<AnalyticsStatsAction.Item, AtomicLong> than this string based thing. Serialization would have to be a bit more explicit, but I don't mind that too much.", "author": "nik9000", "createdAt": "2020-04-07T17:59:59Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/AnalyticsUsage.java", "diffHunk": "@@ -9,53 +9,35 @@\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.elasticsearch.common.xcontent.ContextParser;\n import org.elasticsearch.xpack.core.analytics.action.AnalyticsStatsAction;\n+import org.elasticsearch.xpack.core.watcher.common.stats.Counters;", "originalCommit": "b86bd5772d2cb4e719de03ec00759c57750f4769", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDQ1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405020453", "bodyText": "On the other hand, Counters is nice from a BWC perspective. Maybe just move it out of the watcher package in a follow up change? Maybe drop the enum entirely and just us a string?", "author": "nik9000", "createdAt": "2020-04-07T18:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNjA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5OTg4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405099885", "bodyText": "I have replaced Counters with Enum-based Counters, which for now resides in the analytics package, but we can move it to a more generic package if we decide to start using them for other areas.", "author": "imotov", "createdAt": "2020-04-07T20:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNjA2MQ=="}], "type": "inlineReview"}, {"oid": "0e1bb698a50b19139feee6a3e9734b44ca25b2fe", "url": "https://github.com/elastic/elasticsearch/commit/0e1bb698a50b19139feee6a3e9734b44ca25b2fe", "message": "Address review comments by replacing String based counters with enum based counters", "committedDate": "2020-04-07T20:41:21Z", "type": "commit"}, {"oid": "c6818b96a9c7c4524079bc63835b3c1284eec523", "url": "https://github.com/elastic/elasticsearch/commit/c6818b96a9c7c4524079bc63835b3c1284eec523", "message": "Fix usage docs", "committedDate": "2020-04-07T20:41:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNzU4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405827584", "bodyText": "So, like, we have to add enum entries to the end and they'll come through as 0 if they aren't set. Right?", "author": "nik9000", "createdAt": "2020-04-08T21:32:01Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/EnumCounters.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.analytics;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLongArray;\n+\n+/**\n+ * Utility class similar to org.elasticsearch.xpack.core.watcher.common.stats.Counters, but it is using Enum instead\n+ * of string to identify the counter.\n+ */\n+public class EnumCounters<E extends Enum<E>> implements Writeable {\n+    private final AtomicLongArray counters;\n+    private final E[] enums;\n+\n+    public EnumCounters(Class<E> enumClass) {\n+        counters = new AtomicLongArray(enumClass.getEnumConstants().length);\n+        enums = enumClass.getEnumConstants();\n+    }\n+\n+    public EnumCounters(StreamInput in, Class<E> enumClass) throws IOException {\n+        int size = in.readVInt();\n+        enums = enumClass.getEnumConstants();\n+        long[] vals = new long[enums.length];\n+        for (int i = 0; i < size; i++) {\n+            long val = in.readVLong();\n+            if (i < vals.length) {\n+                vals[i] = val;\n+            }\n+        }\n+        counters = new AtomicLongArray(vals);", "originalCommit": "c6818b96a9c7c4524079bc63835b3c1284eec523", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyODQ4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405828486", "bodyText": "I think it is worth adding comments about that, both to the enum class and to this one.", "author": "nik9000", "createdAt": "2020-04-08T21:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNzU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMjc3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405832772", "bodyText": "This is basically to handle the situation when an older node have less stat categories or a newer node has more stats categories. I added a comment to the enum but I agree I should duplicate it here.", "author": "imotov", "createdAt": "2020-04-08T21:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNzU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5ODczNw==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r407498737", "bodyText": "\ud83d\udc4d", "author": "polyfractal", "createdAt": "2020-04-13T14:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNzU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyODc4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r405828789", "bodyText": "Nice trick!", "author": "nik9000", "createdAt": "2020-04-08T21:34:30Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/analytics/EnumCountersTests.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.analytics;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.test.AbstractWireTestCase;\n+import org.elasticsearch.xpack.core.analytics.EnumCounters;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+public class EnumCountersTests extends AbstractWireTestCase<EnumCounters<EnumCountersTests.TestV2>> {\n+\n+    enum TestV1 {A, B, C}\n+\n+    enum TestV2 {A, B, C, D}\n+\n+    @Override\n+    protected EnumCounters<TestV2> createTestInstance() {\n+        EnumCounters<TestV2> inst = new EnumCounters<>(TestV2.class);\n+        inst.inc(TestV2.A, randomNonNegativeLong());\n+        inst.inc(TestV2.B, randomNonNegativeLong());\n+        inst.inc(TestV2.C, randomNonNegativeLong());\n+        inst.inc(TestV2.D, randomNonNegativeLong());\n+        return inst;\n+    }\n+\n+    @Override\n+    protected EnumCounters<TestV2> copyInstance(EnumCounters<TestV2> instance, Version version) throws IOException {\n+        return serialize(instance, in -> new EnumCounters<>(in, TestV2.class));\n+    }\n+\n+    public void testIncrements() {\n+        EnumCounters<TestV1> counters = new EnumCounters<>(TestV1.class);\n+        int a = randomIntBetween(0, 100);\n+        int b = randomIntBetween(0, 100);\n+        int c = randomIntBetween(0, 100);\n+        incrementRandomly(counters, TestV1.A, a);\n+        incrementRandomly(counters, TestV1.B, b);\n+        incrementRandomly(counters, TestV1.C, c);\n+        assertEquals(a, counters.get(TestV1.A));\n+        assertEquals(b, counters.get(TestV1.B));\n+        assertEquals(c, counters.get(TestV1.C));\n+        Map<String, Object> map = counters.toMap();\n+        assertThat(map.keySet(), hasSize(3));\n+        assertThat(map.get(\"a\"), equalTo((long) a));\n+        assertThat(map.get(\"b\"), equalTo((long) b));\n+        assertThat(map.get(\"c\"), equalTo((long) c));\n+    }\n+\n+    public void testBackwardCompatibility() throws Exception {\n+        EnumCounters<TestV2> counters = new EnumCounters<>(TestV2.class);\n+        counters.inc(TestV2.A, 1);\n+        counters.inc(TestV2.B, 2);\n+        counters.inc(TestV2.C, 3);\n+        counters.inc(TestV2.D, 4);\n+        EnumCounters<TestV1> oldCounters = serialize(counters, in -> new EnumCounters<>(in, TestV1.class));\n+        assertEquals(counters.get(TestV2.A), oldCounters.get(TestV1.A));\n+        assertEquals(counters.get(TestV2.B), oldCounters.get(TestV1.B));\n+        assertEquals(counters.get(TestV2.C), oldCounters.get(TestV1.C));\n+    }\n+\n+\n+    public void testForwardCompatibility() throws Exception {\n+        EnumCounters<TestV1> counters = new EnumCounters<>(TestV1.class);\n+        counters.inc(TestV1.A, 1);\n+        counters.inc(TestV1.B, 2);\n+        counters.inc(TestV1.C, 3);\n+        EnumCounters<TestV2> newCounters = serialize(counters, in -> new EnumCounters<>(in, TestV2.class));", "originalCommit": "c6818b96a9c7c4524079bc63835b3c1284eec523", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c22680e0e8eed8228b9fada2c1c055d9fcf1965a", "url": "https://github.com/elastic/elasticsearch/commit/c22680e0e8eed8228b9fada2c1c055d9fcf1965a", "message": "Add comment about underlying EnumCounters assumptions", "committedDate": "2020-04-10T13:08:26Z", "type": "commit"}, {"oid": "67eb9fa5e0d8e1bb502f555ef6b0e1279aa0a1ec", "url": "https://github.com/elastic/elasticsearch/commit/67eb9fa5e0d8e1bb502f555ef6b0e1279aa0a1ec", "message": "Merge remote-tracking branch 'elastic/master' into issue-54847-analytics-xpack-usage", "committedDate": "2020-04-10T13:10:25Z", "type": "commit"}, {"oid": "684cbc3c0d895587eddfdba48b0c6e5c1d1707e2", "url": "https://github.com/elastic/elasticsearch/commit/684cbc3c0d895587eddfdba48b0c6e5c1d1707e2", "message": "Fix checkstyle", "committedDate": "2020-04-10T13:31:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5Nzk3MA==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r407497970", "bodyText": "Oof, just noticed \"DataScience\"... we should probably change that at some point \ud83d\ude13  Not for this PR though :)", "author": "polyfractal", "createdAt": "2020-04-13T14:11:35Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/action/AnalyticsUsageTransportAction.java", "diffHunk": "@@ -20,26 +21,49 @@\n import org.elasticsearch.xpack.core.action.XPackUsageFeatureResponse;\n import org.elasticsearch.xpack.core.action.XPackUsageFeatureTransportAction;\n import org.elasticsearch.xpack.core.analytics.AnalyticsFeatureSetUsage;\n+import org.elasticsearch.xpack.core.analytics.EnumCounters;\n+import org.elasticsearch.xpack.core.analytics.action.AnalyticsStatsAction;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n public class AnalyticsUsageTransportAction extends XPackUsageFeatureTransportAction {\n     private final XPackLicenseState licenseState;\n+    private final Client client;\n \n     @Inject\n     public AnalyticsUsageTransportAction(TransportService transportService, ClusterService clusterService, ThreadPool threadPool,\n                                          ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,\n-                                         XPackLicenseState licenseState) {\n+                                         XPackLicenseState licenseState, Client client) {\n         super(XPackUsageFeatureAction.ANALYTICS.name(), transportService, clusterService,\n             threadPool, actionFilters, indexNameExpressionResolver);\n         this.licenseState = licenseState;\n+        this.client = client;\n     }\n \n     @Override\n     protected void masterOperation(Task task, XPackUsageRequest request, ClusterState state,\n                                    ActionListener<XPackUsageFeatureResponse> listener) {\n         boolean available = licenseState.isDataScienceAllowed();", "originalCommit": "684cbc3c0d895587eddfdba48b0c6e5c1d1707e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwMDgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r407500820", "bodyText": "I think this should be a readVLong() instead of readLong()?", "author": "polyfractal", "createdAt": "2020-04-13T14:17:21Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "diffHunk": "@@ -96,110 +107,52 @@ public Response(ClusterName clusterName, List<NodeResponse> nodes, List<FailedNo\n         protected void writeNodesTo(StreamOutput out, List<NodeResponse> nodes) throws IOException {\n             out.writeList(nodes);\n         }\n-\n-        @Override\n-        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n-            builder.startArray(\"stats\");\n-            for (NodeResponse node : getNodes()) {\n-                node.toXContent(builder, params);\n-            }\n-            builder.endArray();\n-\n-            return builder;\n-        }\n     }\n \n-    public static class NodeResponse extends BaseNodeResponse implements ToXContentObject {\n-        static final ParseField BOXPLOT_USAGE = new ParseField(\"boxplot_usage\");\n-        static final ParseField CUMULATIVE_CARDINALITY_USAGE = new ParseField(\"cumulative_cardinality_usage\");\n-        static final ParseField STRING_STATS_USAGE = new ParseField(\"string_stats_usage\");\n-        static final ParseField TOP_METRICS_USAGE = new ParseField(\"top_metrics_usage\");\n-        static final ParseField T_TEST_USAGE = new ParseField(\"t_test_usage\");\n-\n-        private final long boxplotUsage;\n-        private final long cumulativeCardinalityUsage;\n-        private final long stringStatsUsage;\n-        private final long topMetricsUsage;\n-        private final long ttestUsage;\n-\n-        public NodeResponse(DiscoveryNode node, long boxplotUsage, long cumulativeCardinalityUsage, long stringStatsUsage,\n-                long topMetricsUsage, long ttestUsage) {\n+    public static class NodeResponse extends BaseNodeResponse {\n+        private final EnumCounters<Item> counters;\n+\n+        public NodeResponse(DiscoveryNode node, EnumCounters<Item> counters) {\n             super(node);\n-            this.boxplotUsage = boxplotUsage;\n-            this.cumulativeCardinalityUsage = cumulativeCardinalityUsage;\n-            this.stringStatsUsage = stringStatsUsage;\n-            this.topMetricsUsage = topMetricsUsage;\n-            this.ttestUsage = ttestUsage;\n+            this.counters = counters;\n         }\n \n         public NodeResponse(StreamInput in) throws IOException {\n             super(in);\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                boxplotUsage = in.readVLong();\n-            } else {\n-                boxplotUsage = 0;\n-            }\n-            cumulativeCardinalityUsage = in.readZLong();\n-            if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n-                stringStatsUsage = in.readVLong();\n-                topMetricsUsage = in.readVLong();\n-            } else {\n-                stringStatsUsage = 0;\n-                topMetricsUsage = 0;\n-            }\n             if (in.getVersion().onOrAfter(Version.V_7_8_0)) {\n-                ttestUsage = in.readVLong();\n+                counters = new EnumCounters<>(in, Item.class);\n             } else {\n-                ttestUsage = 0;\n+                counters = new EnumCounters<>(Item.class);\n+                if (in.getVersion().onOrAfter(Version.V_7_7_0)) {\n+                    counters.inc(Item.BOXPLOT, in.readLong());", "originalCommit": "684cbc3c0d895587eddfdba48b0c6e5c1d1707e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwOTA4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r407509083", "bodyText": "Good catch!", "author": "imotov", "createdAt": "2020-04-13T14:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwMDgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwMjQzMw==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r407502433", "bodyText": "Should we have a test somewhere that enforces this?  E.g. enums that extend writeable directly can implement AbstractWriteableEnumTestCase.  Not the same situation here, but having something conceptually similar to testValidOrdinals() would be nice.  Just verifies that BOXPLOT == 0, etc etc", "author": "polyfractal", "createdAt": "2020-04-13T14:20:22Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/analytics/action/AnalyticsStatsAction.java", "diffHunk": "@@ -33,6 +33,17 @@ private AnalyticsStatsAction() {\n         super(NAME, Response::new);\n     }\n \n+    /**\n+     * Items to track. Serialized by ordinals. Append only, don't remove or change order of items in this list.", "originalCommit": "684cbc3c0d895587eddfdba48b0c6e5c1d1707e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMDY4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54911#discussion_r407510688", "bodyText": "Indeed we need a bwc test for usage. Right now it is completely broken so it didn't make sense to have it. But as soon as I back port this I will open a PR for bwc test for usage.", "author": "imotov", "createdAt": "2020-04-13T14:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwMjQzMw=="}], "type": "inlineReview"}, {"oid": "7f5e89e136e5d0be32ff770751d6163aec15ee33", "url": "https://github.com/elastic/elasticsearch/commit/7f5e89e136e5d0be32ff770751d6163aec15ee33", "message": "Fix boxplot stats serialization", "committedDate": "2020-04-13T14:33:57Z", "type": "commit"}, {"oid": "950be0f02c8c69b9115bc244e35cc8b74f20e652", "url": "https://github.com/elastic/elasticsearch/commit/950be0f02c8c69b9115bc244e35cc8b74f20e652", "message": "Add node response tests", "committedDate": "2020-04-13T15:24:38Z", "type": "commit"}]}