{"pr_number": 61241, "pr_title": "Drop single node test case from runtime fields", "pr_createdAt": "2020-08-17T21:43:15Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61241", "timeline": [{"oid": "30b5b9884d679c7c9d0e278e72cd73b3ea2ff08e", "url": "https://github.com/elastic/elasticsearch/commit/30b5b9884d679c7c9d0e278e72cd73b3ea2ff08e", "message": "Drop single node test case from runtime fields\n\nThis replaces the `ESSingleNodeTestCase` with `ESTestCase` in runtime\nfields, proving that we can use `ESTestCase` to test field mappers.", "committedDate": "2020-08-17T21:41:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1ODE3OA==", "url": "https://github.com/elastic/elasticsearch/pull/61241#discussion_r472058178", "bodyText": "One thing I can't wrap my head around: as it stands this depends on #60933 . There is no final agreement yet on how to expose script service to the mappings code, so I was wondering whether it's wise to build on that, or whether we would still be able to adapt the test code once we find an alternative solution that we have agreement on.", "author": "javanna", "createdAt": "2020-08-18T09:53:03Z", "path": "x-pack/plugin/runtime-fields/src/test/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeScriptFieldMapperTests.java", "diffHunk": "@@ -311,110 +312,127 @@ private XContentBuilder mapping(String type, CheckedConsumer<XContentBuilder, IO\n         return mapping.endObject();\n     }\n \n-    public static class TestScriptPlugin extends Plugin implements ScriptPlugin {\n+    private static final ScriptEngine TEST_ENGINE = new ScriptEngine() {\n         @Override\n-        public ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {\n-            return new ScriptEngine() {\n-                @Override\n-                public String getType() {\n-                    return \"test\";\n-                }\n+        public String getType() {\n+            return \"test\";\n+        }\n \n-                @Override\n-                public <FactoryType> FactoryType compile(\n-                    String name,\n-                    String code,\n-                    ScriptContext<FactoryType> context,\n-                    Map<String, String> paramsMap\n-                ) {\n-                    if (\"dummy_source\".equals(code)) {\n-                        @SuppressWarnings(\"unchecked\")\n-                        FactoryType castFactory = (FactoryType) dummyScriptFactory(context);\n-                        return castFactory;\n-                    }\n-                    throw new IllegalArgumentException(\"No test script for [\" + code + \"]\");\n-                }\n+        @Override\n+        public <FactoryType> FactoryType compile(\n+            String name,\n+            String code,\n+            ScriptContext<FactoryType> context,\n+            Map<String, String> paramsMap\n+        ) {\n+            if (\"dummy_source\".equals(code)) {\n+                @SuppressWarnings(\"unchecked\")\n+                FactoryType castFactory = (FactoryType) dummyScriptFactory(context);\n+                return castFactory;\n+            }\n+            throw new IllegalArgumentException(\"No test script for [\" + code + \"]\");\n+        }\n \n-                private Object dummyScriptFactory(ScriptContext<?> context) {\n-                    if (context == BooleanScriptFieldScript.CONTEXT) {\n-                        return (BooleanScriptFieldScript.Factory) (params, lookup) -> ctx -> new BooleanScriptFieldScript(\n-                            params,\n-                            lookup,\n-                            ctx\n-                        ) {\n-                            @Override\n-                            public void execute() {\n-                                new BooleanScriptFieldScript.Value(this).value(true);\n-                            }\n-                        };\n+        private Object dummyScriptFactory(ScriptContext<?> context) {\n+            if (context == BooleanScriptFieldScript.CONTEXT) {\n+                return (BooleanScriptFieldScript.Factory) (params, lookup) -> ctx -> new BooleanScriptFieldScript(params, lookup, ctx) {\n+                    @Override\n+                    public void execute() {\n+                        new BooleanScriptFieldScript.Value(this).value(true);\n                     }\n-                    if (context == DateScriptFieldScript.CONTEXT) {\n-                        return (DateScriptFieldScript.Factory) (params, lookup, formatter) -> ctx -> new DateScriptFieldScript(\n-                            params,\n-                            lookup,\n-                            formatter,\n-                            ctx\n-                        ) {\n-                            @Override\n-                            public void execute() {\n-                                new DateScriptFieldScript.Millis(this).millis(1595431354874L);\n-                            }\n-                        };\n+                };\n+            }\n+            if (context == DateScriptFieldScript.CONTEXT) {\n+                return (DateScriptFieldScript.Factory) (params, lookup, formatter) -> ctx -> new DateScriptFieldScript(\n+                    params,\n+                    lookup,\n+                    formatter,\n+                    ctx\n+                ) {\n+                    @Override\n+                    public void execute() {\n+                        new DateScriptFieldScript.Millis(this).millis(1595431354874L);\n                     }\n-                    if (context == DoubleScriptFieldScript.CONTEXT) {\n-                        return (DoubleScriptFieldScript.Factory) (params, lookup) -> ctx -> new DoubleScriptFieldScript(\n-                            params,\n-                            lookup,\n-                            ctx\n-                        ) {\n-                            @Override\n-                            public void execute() {\n-                                new DoubleScriptFieldScript.Value(this).value(1.0);\n-                            }\n-                        };\n+                };\n+            }\n+            if (context == DoubleScriptFieldScript.CONTEXT) {\n+                return (DoubleScriptFieldScript.Factory) (params, lookup) -> ctx -> new DoubleScriptFieldScript(params, lookup, ctx) {\n+                    @Override\n+                    public void execute() {\n+                        new DoubleScriptFieldScript.Value(this).value(1.0);\n                     }\n-                    if (context == IpScriptFieldScript.CONTEXT) {\n-                        return (IpScriptFieldScript.Factory) (params, lookup) -> ctx -> new IpScriptFieldScript(params, lookup, ctx) {\n-                            @Override\n-                            public void execute() {\n-                                new IpScriptFieldScript.StringValue(this).stringValue(\"192.168.0.1\");\n-                            }\n-                        };\n+                };\n+            }\n+            if (context == IpScriptFieldScript.CONTEXT) {\n+                return (IpScriptFieldScript.Factory) (params, lookup) -> ctx -> new IpScriptFieldScript(params, lookup, ctx) {\n+                    @Override\n+                    public void execute() {\n+                        new IpScriptFieldScript.StringValue(this).stringValue(\"192.168.0.1\");\n                     }\n-                    if (context == StringScriptFieldScript.CONTEXT) {\n-                        return (StringScriptFieldScript.Factory) (params, lookup) -> ctx -> new StringScriptFieldScript(\n-                            params,\n-                            lookup,\n-                            ctx\n-                        ) {\n-                            @Override\n-                            public void execute() {\n-                                new StringScriptFieldScript.Value(this).value(\"test\");\n-                            }\n-                        };\n+                };\n+            }\n+            if (context == StringScriptFieldScript.CONTEXT) {\n+                return (StringScriptFieldScript.Factory) (params, lookup) -> ctx -> new StringScriptFieldScript(params, lookup, ctx) {\n+                    @Override\n+                    public void execute() {\n+                        new StringScriptFieldScript.Value(this).value(\"test\");\n                     }\n-                    if (context == LongScriptFieldScript.CONTEXT) {\n-                        return (LongScriptFieldScript.Factory) (params, lookup) -> ctx -> new LongScriptFieldScript(params, lookup, ctx) {\n-                            @Override\n-                            public void execute() {\n-                                new LongScriptFieldScript.Value(this).value(1);\n-                            }\n-                        };\n+                };\n+            }\n+            if (context == LongScriptFieldScript.CONTEXT) {\n+                return (LongScriptFieldScript.Factory) (params, lookup) -> ctx -> new LongScriptFieldScript(params, lookup, ctx) {\n+                    @Override\n+                    public void execute() {\n+                        new LongScriptFieldScript.Value(this).value(1);\n                     }\n-                    throw new IllegalArgumentException(\"No test script for [\" + context + \"]\");\n-                }\n+                };\n+            }\n+            throw new IllegalArgumentException(\"No test script for [\" + context + \"]\");\n+        };\n \n-                @Override\n-                public Set<ScriptContext<?>> getSupportedContexts() {\n-                    return Set.of(\n-                        BooleanScriptFieldScript.CONTEXT,\n-                        DateScriptFieldScript.CONTEXT,\n-                        DoubleScriptFieldScript.CONTEXT,\n-                        StringScriptFieldScript.CONTEXT,\n-                        LongScriptFieldScript.CONTEXT\n-                    );\n-                }\n-            };\n+        @Override\n+        public Set<ScriptContext<?>> getSupportedContexts() {\n+            return Set.of(\n+                BooleanScriptFieldScript.CONTEXT,\n+                DateScriptFieldScript.CONTEXT,\n+                DoubleScriptFieldScript.CONTEXT,\n+                IpScriptFieldScript.CONTEXT,\n+                StringScriptFieldScript.CONTEXT,\n+                LongScriptFieldScript.CONTEXT\n+            );\n         }\n+    };\n+    private static final ScriptService SCRIPT_SERVICE = new ScriptService(\n+        Settings.EMPTY,\n+        Map.of(TEST_ENGINE.getType(), TEST_ENGINE),\n+        TEST_ENGINE.getSupportedContexts().stream().collect(toMap(ctx -> ctx.name, Function.identity()))\n+    );\n+    private static final MapperRegistry MAPPER_REGISTRY = new IndicesModule(List.of(new RuntimeFields())).getMapperRegistry();\n+\n+    private MapperService createIndex(String index, Settings settings, XContentBuilder mappings) throws IOException {\n+        IndexMetadata meta = IndexMetadata.builder(\"index\")\n+            .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT))\n+            .numberOfReplicas(0)\n+            .numberOfShards(1)\n+            .build();\n+        IndexSettings indexSettings = new IndexSettings(meta, Settings.EMPTY);\n+        IndexAnalyzers indexAnalyzers = new IndexAnalyzers(\n+            Map.of(\"default\", new NamedAnalyzer(\"default\", AnalyzerScope.INDEX, new StandardAnalyzer())),\n+            Map.of(),\n+            Map.of()\n+        );\n+        SimilarityService similarityService = new SimilarityService(indexSettings, SCRIPT_SERVICE, Map.of());\n+        MapperService mapperService = new MapperService(\n+            indexSettings,\n+            indexAnalyzers,\n+            xContentRegistry(),\n+            similarityService,\n+            MAPPER_REGISTRY,\n+            () -> { throw new UnsupportedOperationException(); },\n+            () -> true,\n+            SCRIPT_SERVICE", "originalCommit": "30b5b9884d679c7c9d0e278e72cd73b3ea2ff08e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxODg5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61241#discussion_r472218893", "bodyText": "I think we can adapt it to whatever we decide on, yeah.", "author": "nik9000", "createdAt": "2020-08-18T13:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1ODE3OA=="}], "type": "inlineReview"}, {"oid": "0640a23bd26b9b332e4ca58af99ba62adbf5c76e", "url": "https://github.com/elastic/elasticsearch/commit/0640a23bd26b9b332e4ca58af99ba62adbf5c76e", "message": "Merge branch 'feature/runtime_fields' into script_no_single_node", "committedDate": "2020-08-24T15:55:36Z", "type": "commit"}, {"oid": "693f194deadf24fd24e2b007e2f16f99eeda9cd0", "url": "https://github.com/elastic/elasticsearch/commit/693f194deadf24fd24e2b007e2f16f99eeda9cd0", "message": "fixup", "committedDate": "2020-08-24T17:09:32Z", "type": "commit"}, {"oid": "d4d8a5370102c235d3f1ced850dac3a2df5df8af", "url": "https://github.com/elastic/elasticsearch/commit/d4d8a5370102c235d3f1ced850dac3a2df5df8af", "message": "Fix test", "committedDate": "2020-08-24T18:12:32Z", "type": "commit"}, {"oid": "98b2f70fb81f2c16b9f9c9ce8cbc0c18e8a7dbdc", "url": "https://github.com/elastic/elasticsearch/commit/98b2f70fb81f2c16b9f9c9ce8cbc0c18e8a7dbdc", "message": "Fixup", "committedDate": "2020-08-24T18:34:40Z", "type": "commit"}]}