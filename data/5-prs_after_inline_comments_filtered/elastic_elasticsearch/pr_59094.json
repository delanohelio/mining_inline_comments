{"pr_number": 59094, "pr_title": "Improve vwh's distant bucket handling", "pr_createdAt": "2020-07-06T19:16:02Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59094", "timeline": [{"oid": "956ad7e41e90080662c99593ff814d818d94c02c", "url": "https://github.com/elastic/elasticsearch/commit/956ad7e41e90080662c99593ff814d818d94c02c", "message": "Improve vwh's distant bucket handling\n\nThis modifies the `variable_width_histogram`'s distant bucket handling\nto:\n1. Properly handle integer overflows\n2. Recalculate the average distance when new buckets are added on the\n   ends. This should slow down the rate at which we build extra buckets\n   as we build more of them.", "committedDate": "2020-07-06T19:06:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzOTc2MA==", "url": "https://github.com/elastic/elasticsearch/pull/59094#discussion_r450639760", "bodyText": "This is a really interesting observation! It took me a bit of thinking to convince myself that this is equivalent to the previous equation, but I agree that this makes sense.\nThe next question I had was whether this is the right metric to use after all, since this means that if a bucket is placed between the first and last bucket, its actual location doesn't affect the avgBucketDistance.\nBut upon further consideration I think it definitely makes sense, since this is still just measuring the distance between buckets.", "author": "jamesdorfman", "createdAt": "2020-07-07T06:34:02Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "diffHunk": "@@ -293,17 +283,33 @@ public CollectionPhase collectValue(LeafBucketCollector sub, int doc, double val\n                 collectBucket(sub, doc, numClusters - 1);\n \n                 if(val > clusterCentroids.get(bucketOrd)){\n-                    // Insert just ahead of bucketOrd so that the array remains sorted\n+                    /*\n+                     * If the new value is bigger than the nearest bucket then insert\n+                     * just ahead of bucketOrd so that the array remains sorted.\n+                     */\n                     bucketOrd += 1;\n                 }\n                 moveLastCluster(bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             } else {\n                 addToCluster(bucketOrd, val);\n                 collectExistingBucket(sub, doc, bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             }\n             return this;\n         }\n \n+        private void updateAvgBucketDistanceIfModified(int modifiedBucketOrd) {\n+            if (modifiedBucketOrd == 0 || modifiedBucketOrd == numClusters - 1) {\n+                updateAvgBucketDistance();\n+            }\n+        }\n+\n+        private void updateAvgBucketDistance() {\n+            // Centroids are sorted so the average distance is the difference between the first and last.", "originalCommit": "956ad7e41e90080662c99593ff814d818d94c02c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MTcxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/59094#discussion_r450641711", "bodyText": "This looks correct for when a centroid is modified. But numClusters is the denominator of the avgBucketDistance equation. So when a new bucket is added I think the distance should be updated regardless of the bucket's position. In that case maybe you can just call updateAvgBucketDistance() directly?\nThis makes sense to me intuitively. If a bucket is added within the existing range of buckets, this should decrease the average bucket distance, since there are more buckets in the same range.", "author": "jamesdorfman", "createdAt": "2020-07-07T06:39:27Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregator.java", "diffHunk": "@@ -293,17 +283,33 @@ public CollectionPhase collectValue(LeafBucketCollector sub, int doc, double val\n                 collectBucket(sub, doc, numClusters - 1);\n \n                 if(val > clusterCentroids.get(bucketOrd)){\n-                    // Insert just ahead of bucketOrd so that the array remains sorted\n+                    /*\n+                     * If the new value is bigger than the nearest bucket then insert\n+                     * just ahead of bucketOrd so that the array remains sorted.\n+                     */\n                     bucketOrd += 1;\n                 }\n                 moveLastCluster(bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             } else {\n                 addToCluster(bucketOrd, val);\n                 collectExistingBucket(sub, doc, bucketOrd);\n+                updateAvgBucketDistanceIfModified(bucketOrd);\n             }\n             return this;\n         }\n \n+        private void updateAvgBucketDistanceIfModified(int modifiedBucketOrd) {\n+            if (modifiedBucketOrd == 0 || modifiedBucketOrd == numClusters - 1) {", "originalCommit": "956ad7e41e90080662c99593ff814d818d94c02c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MTU0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/59094#discussion_r450991546", "bodyText": "++", "author": "nik9000", "createdAt": "2020-07-07T16:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MTcxMQ=="}], "type": "inlineReview"}, {"oid": "f65d67f9850441e21021d0abb28feb29e0c7b707", "url": "https://github.com/elastic/elasticsearch/commit/f65d67f9850441e21021d0abb28feb29e0c7b707", "message": "Update distance every time", "committedDate": "2020-07-07T16:31:08Z", "type": "commit"}, {"oid": "c754e80f4e9f63e6e88b68f4df3ae519d7bad874", "url": "https://github.com/elastic/elasticsearch/commit/c754e80f4e9f63e6e88b68f4df3ae519d7bad874", "message": "Merge branch 'master' into variable_width_histo_distant_create", "committedDate": "2020-07-07T19:41:15Z", "type": "commit"}]}