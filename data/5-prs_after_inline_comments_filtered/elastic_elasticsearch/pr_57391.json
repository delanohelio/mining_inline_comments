{"pr_number": 57391, "pr_title": "SQL: Implement DATE_PARSE function for parsing strings into DATE values", "pr_createdAt": "2020-05-30T05:36:16Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57391", "timeline": [{"oid": "e57504bed26bc0968bb51f38abe8171b647c360f", "url": "https://github.com/elastic/elasticsearch/commit/e57504bed26bc0968bb51f38abe8171b647c360f", "message": "add DateParse Function", "committedDate": "2020-05-30T05:24:52Z", "type": "commit"}, {"oid": "9b1313cf33061c92d007fe55f743321c1970698b", "url": "https://github.com/elastic/elasticsearch/commit/9b1313cf33061c92d007fe55f743321c1970698b", "message": "fix imports", "committedDate": "2020-05-30T16:07:21Z", "type": "commit"}, {"oid": "f19d477d2a724f8c901fa7a036cf5f7eb19c9c6a", "url": "https://github.com/elastic/elasticsearch/commit/f19d477d2a724f8c901fa7a036cf5f7eb19c9c6a", "message": "modify LocalDate to ZoneDateTime and fix function name", "committedDate": "2020-06-02T04:59:11Z", "type": "commit"}, {"oid": "969f1f65d36f7e93e2e9b4163c6a4a021a5d262c", "url": "https://github.com/elastic/elasticsearch/commit/969f1f65d36f7e93e2e9b4163c6a4a021a5d262c", "message": "add DATE_PARSE unit tests", "committedDate": "2020-06-02T05:29:22Z", "type": "commit"}, {"oid": "62f2b099640db3ac9bc9a6e7d561d680e78deccb", "url": "https://github.com/elastic/elasticsearch/commit/62f2b099640db3ac9bc9a6e7d561d680e78deccb", "message": "add integration tests and InternalSqlScriptUtils.dateParse function", "committedDate": "2020-06-03T07:02:40Z", "type": "commit"}, {"oid": "f4fa462469e8ad63f12e09b913ce7c7f54644f3b", "url": "https://github.com/elastic/elasticsearch/commit/f4fa462469e8ad63f12e09b913ce7c7f54644f3b", "message": "sort sql function", "committedDate": "2020-06-03T07:03:14Z", "type": "commit"}, {"oid": "28b5068bd561d039020723c20d1c46f7049a4fef", "url": "https://github.com/elastic/elasticsearch/commit/28b5068bd561d039020723c20d1c46f7049a4fef", "message": "add doc", "committedDate": "2020-06-03T07:46:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzI3NA==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435407274", "bodyText": "I don't think you should throw an exception here, it should be handled by the code here: https://github.com/elastic/elasticsearch/pull/57391/files#diff-abec0662fc741468125e83032b91a634R66", "author": "matriv", "createdAt": "2020-06-04T16:55:36Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -31,7 +32,8 @@\n \n     public enum Parser {\n         DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        TIME(\"time\", OffsetTime::from, LocalTime::from),\n+        DATE(\"date\", LocalDate::from, (TemporalAccessor ta) -> {throw new RuntimeException();});", "originalCommit": "28b5068bd561d039020723c20d1c46f7049a4fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMjcxNg==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435702716", "bodyText": "DateTimeFormatter.parseBest needs two queries at least. May be adding (TemporalAccessor ta) -> {throw new RuntimeException();} in constructor is better? or use DateTimeFormatter.parse in constructor where queries.length == 1?", "author": "Patrick0308", "createdAt": "2020-06-05T05:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzUzOA==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435407538", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (ta instanceof LocalDate){\n          \n          \n            \n                    } else if (ta instanceof LocalDate) {", "author": "matriv", "createdAt": "2020-06-04T16:56:00Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/util/DateUtils.java", "diffHunk": "@@ -235,6 +239,8 @@ public static TemporalAccessor atTimeZone(TemporalAccessor ta, ZoneId zoneId) {\n             return atTimeZone((OffsetTime) ta, zoneId);\n         } else if (ta instanceof LocalTime) {\n             return atTimeZone((LocalTime) ta, zoneId);\n+        } else if (ta instanceof LocalDate){", "originalCommit": "28b5068bd561d039020723c20d1c46f7049a4fef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwOTM0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435409341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ZonedDateTime date(int year, int month, int day, ZoneId zoneId){\n          \n          \n            \n                public static ZonedDateTime date(int year, int month, int day, ZoneId zoneId) {", "author": "matriv", "createdAt": "2020-06-04T16:58:47Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeTestUtils.java", "diffHunk": "@@ -63,6 +63,10 @@ public static OffsetTime time(int hour, int minute, int second, int nano, ZoneId\n         return OffsetTime.of(lt, zoneId.getRules().getValidOffsets(ldt).get(0));\n     }\n \n+    public static ZonedDateTime date(int year, int month, int day, ZoneId zoneId){", "originalCommit": "28b5068bd561d039020723c20d1c46f7049a4fef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMDA2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r435410063", "bodyText": "Please add one more test where there are both valid date and time parts which should also throw an exception as time parts are not allowed.", "author": "matriv", "createdAt": "2020-06-04T16:59:55Z", "path": "x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessorTests.java", "diffHunk": "@@ -113,44 +114,86 @@ public void testDateTimeInvalidInputs() {\n     \n     public void testTimeInvalidInputs() {\n         SqlIllegalArgumentException siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"A string is required; received [10]\", siae.getMessage());\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\"A string is required; received [20]\", siae.getMessage());\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [11:04:07] or pattern [invalid] is received; Unknown pattern letter: i\",\n-                siae.getMessage()\n+            \"Invalid time string [11:04:07] or pattern [invalid] is received; Unknown pattern letter: i\",\n+            siae.getMessage()\n         );\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [11:04:07] or pattern [HH:mm] is received; \" +\n-                        \"Text '11:04:07' could not be parsed, unparsed text found at index 5\",\n-                siae.getMessage()\n+            \"Invalid time string [11:04:07] or pattern [HH:mm] is received; \" +\n+                \"Text '11:04:07' could not be parsed, unparsed text found at index 5\",\n+            siae.getMessage()\n         );\n         \n         siae = expectThrows(\n-                SqlIllegalArgumentException.class,\n-                () -> new TimeParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM/uuuu\"), randomZone()).makePipe().asProcessor().process(null)\n+            SqlIllegalArgumentException.class,\n+            () -> new TimeParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM/uuuu\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"Invalid time string [07/05/2020] or pattern [dd/MM/uuuu] is received; Unable to convert parsed text into [time]\",\n+            siae.getMessage()\n+        );\n+    }\n+ \n+    public void testDateInvalidInputs() {\n+        SqlIllegalArgumentException siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(10), randomStringLiteral(), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"A string is required; received [10]\", siae.getMessage());\n+\n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, randomStringLiteral(), l(20), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\"A string is required; received [20]\", siae.getMessage());\n+\n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(\"07/05/2020\"), l(\"invalid\"), randomZone()).makePipe().asProcessor().process(null)\n         );\n         assertEquals(\n-                \"Invalid time string [07/05/2020] or pattern [dd/MM/uuuu] is received; Unable to convert parsed text into [time]\",\n+            \"Invalid date string [07/05/2020] or pattern [invalid] is received; Unknown pattern letter: i\",\n                 siae.getMessage()\n         );\n+\n+        siae = expectThrows(\n+             SqlIllegalArgumentException.class,\n+             () -> new DateParse(Source.EMPTY, l(\"07/05/2020\"), l(\"dd/MM\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+           \"Invalid date string [07/05/2020] or pattern [dd/MM] is received; \" +\n+                \"Text '07/05/2020' could not be parsed, unparsed text found at index 5\",\n+           siae.getMessage()\n+        );\n+    \n+        siae = expectThrows(\n+            SqlIllegalArgumentException.class,\n+            () -> new DateParse(Source.EMPTY, l(\"11:04:07\"), l(\"HH:mm:ss\"), randomZone()).makePipe().asProcessor().process(null)\n+        );\n+        assertEquals(\n+            \"Invalid date string [11:04:07] or pattern [HH:mm:ss] is received; Unable to convert parsed text into [date]\",\n+            siae.getMessage()\n+        );", "originalCommit": "28b5068bd561d039020723c20d1c46f7049a4fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwODI5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r438208293", "bodyText": "Same problem as above, is both valid date and time parts must not be allowed? I add unit test in testParsing for now.", "author": "Patrick0308", "createdAt": "2020-06-10T15:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMDA2Mw=="}], "type": "inlineReview"}, {"oid": "8761fe5d1d1132723dc7e6524bed988299c3248f", "url": "https://github.com/elastic/elasticsearch/commit/8761fe5d1d1132723dc7e6524bed988299c3248f", "message": "modify parser constructor", "committedDate": "2020-06-05T08:25:35Z", "type": "commit"}, {"oid": "72dd036c75105c36c7dda48a2fd222fa819944a9", "url": "https://github.com/elastic/elasticsearch/commit/72dd036c75105c36c7dda48a2fd222fa819944a9", "message": "formats code and modify doc", "committedDate": "2020-06-10T15:02:24Z", "type": "commit"}, {"oid": "769cd21e0c6ec1b6e6f4e15b333920dbbaa96dbe", "url": "https://github.com/elastic/elasticsearch/commit/769cd21e0c6ec1b6e6f4e15b333920dbbaa96dbe", "message": "formats code", "committedDate": "2020-06-10T15:05:12Z", "type": "commit"}, {"oid": "a65f074e7d34eb737a90b3bdd696f2a75d4fdc4d", "url": "https://github.com/elastic/elasticsearch/commit/a65f074e7d34eb737a90b3bdd696f2a75d4fdc4d", "message": "add DATE_PARSE unit test", "committedDate": "2020-06-10T15:14:51Z", "type": "commit"}, {"oid": "ff7f1461ca2b3dd5a4bf776f78b8be18208740ea", "url": "https://github.com/elastic/elasticsearch/commit/ff7f1461ca2b3dd5a4bf776f78b8be18208740ea", "message": "format code", "committedDate": "2020-06-10T15:16:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNzEzOA==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r441007138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n          \n          \n            \n                    DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from),\n          \n          \n            \n                    TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n          \n          \n            \n                    DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> { throw new DateTimeException(\"InvalidDate\");});\n          \n          \n            \n                    \n          \n          \n            \n                    private final BiFunction<String, String, TemporalAccessor> parser;\n          \n          \n            \n                    \n          \n          \n            \n                    private final String parseType;\n          \n          \n            \n            \n          \n          \n            \n                    Parser(DataType parseType,  TemporalQuery<?>... queries) {\n          \n          \n            \n                        this.parseType = parseType.typeName();\n          \n          \n            \n                        this.parser = (timestampStr, pattern) -> DateTimeFormatter.ofPattern(pattern, Locale.ROOT).parseBest(timestampStr, queries);\n          \n          \n            \n                    }", "author": "matriv", "createdAt": "2020-06-16T17:04:15Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -31,16 +32,21 @@\n \n     public enum Parser {\n         DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), ", "originalCommit": "ff7f1461ca2b3dd5a4bf776f78b8be18208740ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5cf4020c50f0f584e40da4e76c734297a22b1efd", "url": "https://github.com/elastic/elasticsearch/commit/5cf4020c50f0f584e40da4e76c734297a22b1efd", "message": "fix some problem", "committedDate": "2020-06-17T08:20:35Z", "type": "commit"}, {"oid": "9ed890e32a7836e85804bbd479d0681a8897d9db", "url": "https://github.com/elastic/elasticsearch/commit/9ed890e32a7836e85804bbd479d0681a8897d9db", "message": "add comment", "committedDate": "2020-06-17T08:23:48Z", "type": "commit"}, {"oid": "819176f07dd840dd9ec11a21fae867fb575c1d2d", "url": "https://github.com/elastic/elasticsearch/commit/819176f07dd840dd9ec11a21fae867fb575c1d2d", "message": "Merge remote-tracking branch 'upstream/master' into date-parse", "committedDate": "2020-06-19T02:04:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMzAwNg==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r444203006", "bodyText": "Please remove.", "author": "matriv", "createdAt": "2020-06-23T12:59:03Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -30,15 +34,17 @@\n public class DateTimeParseProcessor extends BinaryDateTimeProcessor {\n \n     public enum Parser {\n-        DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from), \n+        TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n+        DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> {throw new DateTimeException(\"InvalidDate\");});\n         \n         private final BiFunction<String, String, TemporalAccessor> parser;\n         \n-        private final String parseType;\n+        private final DataType parseType;\n \n-        Parser(String parseType,  TemporalQuery<?>... queries) {\n+        Parser(DataType parseType, TemporalQuery<?>... queries) {\n             this.parseType = parseType;\n+            // queries's length must must be greater than one", "originalCommit": "819176f07dd840dd9ec11a21fae867fb575c1d2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMzY2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r444203665", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.parseType = parseType;\n          \n          \n            \n                        this.parseType = parseType.typeName();", "author": "matriv", "createdAt": "2020-06-23T13:00:04Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -30,15 +34,17 @@\n public class DateTimeParseProcessor extends BinaryDateTimeProcessor {\n \n     public enum Parser {\n-        DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from), \n+        TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n+        DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> {throw new DateTimeException(\"InvalidDate\");});\n         \n         private final BiFunction<String, String, TemporalAccessor> parser;\n         \n-        private final String parseType;\n+        private final DataType parseType;\n \n-        Parser(String parseType,  TemporalQuery<?>... queries) {\n+        Parser(DataType parseType, TemporalQuery<?>... queries) {\n             this.parseType = parseType;", "originalCommit": "819176f07dd840dd9ec11a21fae867fb575c1d2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMzc4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57391#discussion_r444203789", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final DataType parseType;\n          \n          \n            \n                    private final String parseType;", "author": "matriv", "createdAt": "2020-06-23T13:00:18Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeParseProcessor.java", "diffHunk": "@@ -30,15 +34,17 @@\n public class DateTimeParseProcessor extends BinaryDateTimeProcessor {\n \n     public enum Parser {\n-        DATE_TIME(\"datetime\", ZonedDateTime::from, LocalDateTime::from), \n-        TIME(\"time\", OffsetTime::from, LocalTime::from);\n+        DATE_TIME(DataTypes.DATETIME, ZonedDateTime::from, LocalDateTime::from), \n+        TIME(SqlDataTypes.TIME, OffsetTime::from, LocalTime::from),\n+        DATE(SqlDataTypes.DATE, LocalDate::from, (TemporalAccessor ta) -> {throw new DateTimeException(\"InvalidDate\");});\n         \n         private final BiFunction<String, String, TemporalAccessor> parser;\n         \n-        private final String parseType;\n+        private final DataType parseType;", "originalCommit": "819176f07dd840dd9ec11a21fae867fb575c1d2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a802cc0406b16352c792cf08a399c4d57b0d5ab0", "url": "https://github.com/elastic/elasticsearch/commit/a802cc0406b16352c792cf08a399c4d57b0d5ab0", "message": "modify dateType to String", "committedDate": "2020-06-24T08:29:28Z", "type": "commit"}, {"oid": "188e3760f15bdba115f9aafe5dbd475585c972f5", "url": "https://github.com/elastic/elasticsearch/commit/188e3760f15bdba115f9aafe5dbd475585c972f5", "message": "modify csv", "committedDate": "2020-06-28T06:06:57Z", "type": "commit"}, {"oid": "fb9f4700fee3b67b8d484ed412dd7a01e9182e47", "url": "https://github.com/elastic/elasticsearch/commit/fb9f4700fee3b67b8d484ed412dd7a01e9182e47", "message": "Merge branch 'master' into date-parse", "committedDate": "2020-06-30T10:06:46Z", "type": "commit"}, {"oid": "70c2d72a74ddf9d0621f8bc62d64b979383c69c5", "url": "https://github.com/elastic/elasticsearch/commit/70c2d72a74ddf9d0621f8bc62d64b979383c69c5", "message": "Merge branch 'master' into date-parse", "committedDate": "2020-07-06T14:12:28Z", "type": "commit"}, {"oid": "c6c4d6d63a79c7bc24d8b187c7b667938c7d2975", "url": "https://github.com/elastic/elasticsearch/commit/c6c4d6d63a79c7bc24d8b187c7b667938c7d2975", "message": "Update docs/reference/sql/functions/date-time.asciidoc\n\nCo-authored-by: Bogdan Pintea <bpintea@gmail.com>", "committedDate": "2020-07-15T04:38:49Z", "type": "commit"}, {"oid": "32360629a6c91a73fd66eab9bee7a367b9c65045", "url": "https://github.com/elastic/elasticsearch/commit/32360629a6c91a73fd66eab9bee7a367b9c65045", "message": "Merge branch 'master' into date-parse", "committedDate": "2020-07-16T09:09:30Z", "type": "commit"}]}