{"pr_number": 51355, "pr_title": "Add HLRC docs for AuthN and TLS", "pr_createdAt": "2020-01-23T15:45:00Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51355", "timeline": [{"oid": "9841d316d0e59c0bd20bee977a9391530ece043e", "url": "https://github.com/elastic/elasticsearch/commit/9841d316d0e59c0bd20bee977a9391530ece043e", "message": "Add HLRC docs for AuthN and TLS\n\nThis commit adds examples in our documentation for\n\n- An HLRC instance authenticating to an elasticsearch cluster using\nan elasticsearch token service access token or an API key\n- An HLRC instance connecting to an elasticsearch cluster that is\nsetup for TLS on the HTTP layer when the CA certificate of the\ncluster is available either as a PEM file or a keystore\n- An HLRC instance connecting to an elasticsearch cluster that\nrequires client authentication where the client key and certificate\nare available in a keystore\n\nResolves:  #44202", "committedDate": "2020-01-23T15:19:14Z", "type": "commit"}, {"oid": "0c060524a5c2f0181876e8f981d70fe3998f25b8", "url": "https://github.com/elastic/elasticsearch/commit/0c060524a5c2f0181876e8f981d70fe3998f25b8", "message": "add paths in the examples", "committedDate": "2020-01-23T15:41:33Z", "type": "commit"}, {"oid": "38fdea2f644488a71772a519f376f15112ed1c8e", "url": "https://github.com/elastic/elasticsearch/commit/38fdea2f644488a71772a519f376f15112ed1c8e", "message": "fix snippet length", "committedDate": "2020-01-23T16:03:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MjY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370472695", "bodyText": "This doesn't look like a real API key to me (or am I confused?)\n$ printf \"%s\" 'VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw' | base64 -D\nVuaCfGcBCdbkQm-e5aOxZL\ufffds%\n\nI think maybe we should we show the base64 process as well?\nString apiKeyId = \"uqlEyn8B_gQ_jlvwDIvM\"\nString apiKeySecret = \"HxHWk2m4RN-V_qg9cDpuX\"\nString apiKeyAuth = Base64.getEncoder().encodeToString((apiKeyId + \":\" + apiKeySecret).getBytes());", "author": "tvernum", "createdAt": "2020-01-24T04:49:09Z", "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -400,5 +402,81 @@ public HttpAsyncClientBuilder customizeHttpClient(\n                 });\n             //end::rest-client-config-encrypted-communication\n         }\n+        {\n+            //tag::rest-client-config-trust-ca-pem\n+            Path caCertificatePath = Paths.get(\"/path/to/ca.crt\");\n+            CertificateFactory factory =\n+                CertificateFactory.getInstance(\"X.509\");\n+            Certificate trustedCa;\n+            try (InputStream is = Files.newInputStream(caCertificatePath)) {\n+                trustedCa = factory.generateCertificate(is);\n+            }\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            trustStore.load(null, null);\n+            trustStore.setCertificateEntry(\"ca\", trustedCa);\n+            SSLContextBuilder sslContextBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null);\n+            final SSLContext sslContext = sslContextBuilder.build();\n+            RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-trust-ca-pem\n+        }\n+        {\n+            String trustStorePass = \"\";\n+            String keyStorePass = \"\";\n+            //tag::rest-client-config-mutual-tls-authentication\n+            Path trustStorePath = Paths.get(\"/path/to/your/truststore.p12\");\n+            Path keyStorePath = Paths.get(\"/path/to/your/keystore.p12\");\n+            KeyStore trustStore = KeyStore.getInstance(\"pkcs12\");\n+            KeyStore keyStore = KeyStore.getInstance(\"pkcs12\");\n+            try (InputStream is = Files.newInputStream(trustStorePath)) {\n+                trustStore.load(is, trustStorePass.toCharArray());\n+            }\n+            try (InputStream is = Files.newInputStream(keyStorePath)) {\n+                keyStore.load(is, keyStorePass.toCharArray());\n+            }\n+            SSLContextBuilder sslBuilder = SSLContexts.custom()\n+                .loadTrustMaterial(trustStore, null)\n+                .loadKeyMaterial(keyStore, keyStorePass.toCharArray());\n+            final SSLContext sslContext = sslBuilder.build();\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"https\"))\n+                .setHttpClientConfigCallback(new HttpClientConfigCallback() {\n+                    @Override\n+                    public HttpAsyncClientBuilder customizeHttpClient(\n+                        HttpAsyncClientBuilder httpClientBuilder) {\n+                        return httpClientBuilder.setSSLContext(sslContext);\n+                    }\n+                });\n+            //end::rest-client-config-mutual-tls-authentication\n+        }\n+        {\n+            //tag::rest-client-auth-bearer-token\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"Bearer u6iuAxZ0RG1Kcm5jVFI4eU4tZU9aVFEwT2F3\")};\n+            builder.setDefaultHeaders(defaultHeaders);\n+            //end::rest-client-auth-bearer-token\n+        }\n+        {\n+            //tag::rest-client-auth-api-key\n+            RestClientBuilder builder = RestClient.builder(\n+                new HttpHost(\"localhost\", 9200, \"http\"));\n+            Header[] defaultHeaders =\n+                new Header[]{new BasicHeader(\"Authorization\",\n+                    \"ApiKey VnVhQ2ZHY0JDZGJrUW0tZTVhT3gdWkybHAdzw==\")};", "originalCommit": "38fdea2f644488a71772a519f376f15112ed1c8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4NDg3NA==", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370484874", "bodyText": "This doesn't look like a real API key to me (or am I confused?)\n\nIt's not. An API Key doesn't fit in the 72 line limit and since there was no way to add an API key that would work in a request to an arbitrary cluster either way ... I cheated.\nYou're right, since the create API key only returns the ID and secret now, it makes sense to show how to base64 encode it too, which also thankfully solves the above issue too.", "author": "jkakavas", "createdAt": "2020-01-24T06:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MjY5NQ=="}], "type": "inlineReview"}, {"oid": "31efd746869de7e11c5b96396bf2970b5f51b309", "url": "https://github.com/elastic/elasticsearch/commit/31efd746869de7e11c5b96396bf2970b5f51b309", "message": "Address feedback", "committedDate": "2020-01-24T06:11:36Z", "type": "commit"}, {"oid": "0e57234cdc9c04f5a179848699573ac9a8ff86c3", "url": "https://github.com/elastic/elasticsearch/commit/0e57234cdc9c04f5a179848699573ac9a8ff86c3", "message": "that's what you get for not running precommit locally", "committedDate": "2020-01-24T06:23:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MDY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51355#discussion_r370490696", "bodyText": ":) Sorry, my fault :)", "author": "tvernum", "createdAt": "2020-01-24T06:36:54Z", "path": "client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java", "diffHunk": "@@ -474,7 +475,8 @@ public HttpAsyncClientBuilder customizeHttpClient(\n             String apiKeySecret = \"HxHWk2m4RN-V_qg9cDpuX\";\n             String apiKeyAuth =\n                 Base64.getEncoder().encodeToString(\n-                    (apiKeyId + \":\" + apiKeySecret).getBytes());\n+                    (apiKeyId + \":\" + apiKeySecret)\n+                        .getBytes(StandardCharsets.UTF_8));", "originalCommit": "0e57234cdc9c04f5a179848699573ac9a8ff86c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1da1c982941266060aac7774a4b5041ca3ffe67", "url": "https://github.com/elastic/elasticsearch/commit/f1da1c982941266060aac7774a4b5041ca3ffe67", "message": "add authentication scheme in the Authorization header for API keys", "committedDate": "2020-01-24T08:52:33Z", "type": "commit"}, {"oid": "8f19a284cb4bd6594e657e47164696d5ca78adec", "url": "https://github.com/elastic/elasticsearch/commit/8f19a284cb4bd6594e657e47164696d5ca78adec", "message": "Apply suggestions from code review\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-01-24T18:46:47Z", "type": "commit"}, {"oid": "95207c8a668cc5c0039bf41b59d6e99dd263939f", "url": "https://github.com/elastic/elasticsearch/commit/95207c8a668cc5c0039bf41b59d6e99dd263939f", "message": "Update docs/java-rest/low-level/configuration.asciidoc\n\nCo-Authored-By: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-01-28T05:31:12Z", "type": "commit"}]}