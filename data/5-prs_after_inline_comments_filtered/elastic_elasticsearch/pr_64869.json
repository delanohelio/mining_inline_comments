{"pr_number": 64869, "pr_title": "EQL: Add option for returning results from the tail of the stream", "pr_createdAt": "2020-11-10T14:21:43Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/64869", "timeline": [{"oid": "9259e294c22970d2868793b551afccaab60da8d9", "url": "https://github.com/elastic/elasticsearch/commit/9259e294c22970d2868793b551afccaab60da8d9", "message": "EQL: Add option for returning results from the tail of the stream\n\nIntroduce option for specifying whether the results are returned from\nthe tail (end) of the stream or the head (beginning).\nImprove sequencing algorithm by significantly eliminating the number\nof in-flight sequences for spare datasets.\nRefactor the sequence class by eliminating some of the redundant code.\nChange matching behavior for tail sequences.\nReturn results based on their first entry ordinal instead of\ninsertion order (which was ordered on the last match ordinal).\nRandomize results position inside test suite.\n\nClose #58646", "committedDate": "2020-11-10T14:15:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMDgzNg==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520600836", "bodyText": "I've kept the existing default for now to not make this PR even bigger or complicate backporting to 7.10.\nI'll follow-up with a separate PR for changing the values themselves.", "author": "costin", "createdAt": "2020-11-10T14:24:32Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -39,6 +39,7 @@\n     private QueryBuilder filter = null;\n     private String timestampField = \"@timestamp\";\n     private String eventCategoryField = \"event.category\";\n+    private String resultPosition = \"head\";", "originalCommit": "9259e294c22970d2868793b551afccaab60da8d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520601944", "bodyText": "I don't like this name; any suggestions? /cc @jrodewig.\nI had variations with order but that's incorrect since the order of the results is always ascending, it's rather the position from the stream where the results are picked up.\nHowever I don't think the name makes that obvious...", "author": "costin", "createdAt": "2020-11-10T14:25:55Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -57,6 +58,7 @@\n     static final String KEY_SIZE = \"size\";\n     static final String KEY_FETCH_SIZE = \"fetch_size\";\n     static final String KEY_QUERY = \"query\";\n+    static final String KEY_RESULT_POSITION = \"result_position\";", "originalCommit": "9259e294c22970d2868793b551afccaab60da8d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2NjI5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520666295", "bodyText": "This is about oldest or newest sequences first.\nMaybe change this in a true/false option and call it newest_first with default true. Overriding the default means false, implicitly newest first == false == newest last == oldest first.", "author": "astefan", "createdAt": "2020-11-10T15:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMTE4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520701183", "bodyText": "This one is tricky. +1 to Andrei's idea of converting this to a Boolean with a param name of latest_first or most_recent_first. That would address most of my concerns.\nIf we decide to keep this as an enum, here are some suggestions in order of preference:\n\nhead_or_tail\norientation with earliest and latest values\nrecency with earliest and latest values\nresult_end\n\nI don't think there is a common phrase that encapsulates both the head/tail concepts. end may work but is probably a bit too vague to be useful here. The head/tail values make the purpose of the enum param much clearer. As these values are unlikely to change, I'd advocate for including them in the param name if we keep this as an enum.", "author": "jrodewig", "createdAt": "2020-11-10T16:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxMDI4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520710282", "bodyText": "Most recent / orientation suggests a different order. When one does tail the results are still ordered ASC but one gets the last X results not the first X.\nI ended up with head and tail since we already have those in the languages as pipes and it's actually what happens if you don't specify them. We could use something like default_pipe but then that one is too cryptic...", "author": "costin", "createdAt": "2020-11-10T16:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNTc4OA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520725788", "bodyText": "I ended up with head and tail since we already have those in the languages as pipes and it's actually what happens if you don't specify them.\n\nThat makes sense. Rather than forcing another term, it may be simpler and more intuitive to lean into that language:\n\nhead_or_tail with head and tail enum values\nA head true/false option with a default of false OR a tail true/false option with a default of true\n\nIt seems like the other options are too vague or confusing.", "author": "jrodewig", "createdAt": "2020-11-10T17:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4OTc2NA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r521689764", "bodyText": "Forcing \"head\" or \"tail\" in the name of the parameter will implicitly assume the user knows about the purpose of head or tail and I like it. So, theoretically, there shouldn't be a concern about some implied ordering the user would assume. In Elasticsearch there are some settings that have technical terms in them and, unless one reads the documentation and knows something more about Elasticsearch, that setting will not make sense. And I think the events selection window (from start or end of the time stream) can be categorized as a more advanced feature that needs a bit more knowledge about EQL. One has to understand which events are selected and that the order in which these events are returned is always ascending.\nAlso, since we assume the user knows about \"head\" and \"tail\" we can push this a bit more and add \"default\" and \"pipe\" to the name of the parameter and make it boolean: \"default_head_pipe\": true to be more explicit. Using default_pipe is too abstract and it doesn't suggest a limited list of pipes to choose from, whereas default_head_pipe refers explicitly to head and its negation (a value of false) implies tail.", "author": "astefan", "createdAt": "2020-11-11T23:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyNjQ2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r522826465", "bodyText": "Booleans are more akin to on/off switches. default_head_pipe false simply means there's no default head pipe not that there is a tail one instead.", "author": "costin", "createdAt": "2020-11-13T09:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyODYzOA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r520628638", "bodyText": "Add a timeout setting (which is not straight-forward) to the base test.", "author": "costin", "createdAt": "2020-11-10T14:59:41Z", "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/BaseEqlSpecTestCase.java", "diffHunk": "@@ -118,11 +119,19 @@ protected EqlSearchResponse runQuery(String index, String query) throws Exceptio\n         // some queries return more than 10 results\n         request.size(50);\n         request.fetchSize(randomIntBetween(2, 50));\n+        request.resultPosition(randomBoolean() ? \"head\" : \"tail\");\n         return runRequest(eqlClient(), request);\n     }\n \n     protected  EqlSearchResponse runRequest(EqlClient eqlClient, EqlSearchRequest request) throws IOException {\n-        return eqlClient.search(request, RequestOptions.DEFAULT);\n+        int timeout = Math.toIntExact(timeout().millis());\n+\n+        RequestConfig config = RequestConfig.copy(RequestConfig.DEFAULT)\n+            .setConnectionRequestTimeout(timeout)\n+            .setConnectTimeout(timeout)\n+            .setSocketTimeout(timeout)\n+            .build();\n+        return eqlClient.search(request, RequestOptions.DEFAULT.toBuilder().setRequestConfig(config).build());", "originalCommit": "9259e294c22970d2868793b551afccaab60da8d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a214fdf2dff27c5d4f2df2d86e0f57d66a57ed56", "url": "https://github.com/elastic/elasticsearch/commit/a214fdf2dff27c5d4f2df2d86e0f57d66a57ed56", "message": "Put back PITAwareQueryClient\nRevert the sequence matching order from first to current/last.", "committedDate": "2020-11-10T16:38:45Z", "type": "commit"}, {"oid": "5865c127a10b364544d8b618c29a0ae5b35351a1", "url": "https://github.com/elastic/elasticsearch/commit/5865c127a10b364544d8b618c29a0ae5b35351a1", "message": "polish", "committedDate": "2020-11-12T23:11:14Z", "type": "commit"}, {"oid": "43ef5ef630f4de8436be658a481be0c4e3af90b8", "url": "https://github.com/elastic/elasticsearch/commit/43ef5ef630f4de8436be658a481be0c4e3af90b8", "message": "Fix too aggressive trim\nPolishing", "committedDate": "2020-11-12T23:11:14Z", "type": "commit"}, {"oid": "faa489752845ae10033b08689c1f0b0659ec73ef", "url": "https://github.com/elastic/elasticsearch/commit/faa489752845ae10033b08689c1f0b0659ec73ef", "message": "Merge remote-tracking branch 'remotes/upstream/master' into fix/58646", "committedDate": "2020-11-12T23:29:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r521694854", "bodyText": "if (start == null || start.compareTo(ordinal) > 0) {\n   start = ordinal;\n}\nif (stop == null || stop.compareTo(ordinal) < 0) {\n   stop = ordinal;\n}", "author": "astefan", "createdAt": "2020-11-11T23:17:26Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/OrdinalGroup.java", "diffHunk": "@@ -56,15 +55,13 @@ void add(E element) {\n         Ordinal ordinal = extractor.apply(element);\n         if (start == null) {\n             start = ordinal;\n-        } else if (stop == null) {\n+        } else if (start.compareTo(ordinal) > 0) {", "originalCommit": "a214fdf2dff27c5d4f2df2d86e0f57d66a57ed56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNTUxNg==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r521705516", "bodyText": "This method doesn't seem to be used anywhere else except in trimToLast. Is it really necessary?", "author": "astefan", "createdAt": "2020-11-11T23:38:09Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/OrdinalGroup.java", "diffHunk": "@@ -109,6 +107,18 @@ E before(Ordinal ordinal) {\n         return match != null ? match.v1() : null;\n     }\n \n+    void trimToLast() {\n+        keepOnly(elements.peekLast());\n+    }\n+\n+    private void keepOnly(E element) {", "originalCommit": "a214fdf2dff27c5d4f2df2d86e0f57d66a57ed56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM5OTk4OA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r523399988", "bodyText": "If you notice the last update, it was merged into trimToLast", "author": "costin", "createdAt": "2020-11-14T09:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNTUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MjQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/64869#discussion_r523272420", "bodyText": "Combine these two conditions into one? if (currentStage > 0 && matcher.hasCandidates() == false) {", "author": "astefan", "createdAt": "2020-11-13T22:48:38Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TumblingWindow.java", "diffHunk": "@@ -75,91 +87,234 @@ public TumblingWindow(QueryClient client,\n         this.until = until;\n         this.criteria = criteria;\n         this.maxStages = criteria.size();\n-        this.windowSize = criteria.get(0).queryRequest().searchSource().size();\n-\n         this.matcher = matcher;\n+\n+        Criterion<BoxedQueryRequest> baseRequest = criteria.get(0);\n+        this.windowSize = baseRequest.queryRequest().searchSource().size();\n+        this.hasKeys = baseRequest.keySize() > 0;\n+        this.restartWindowFromTailQuery = baseRequest.descending();\n+        this.earlyUntil = baseRequest.descending();\n     }\n \n     @Override\n     public void execute(ActionListener<Payload> listener) {\n         log.trace(\"Starting sequence window w/ fetch size [{}]\", windowSize);\n         startTime = System.currentTimeMillis();\n-        advance(0, listener);\n+        tumbleWindow(0, listener);\n     }\n \n-    private void advance(int baseStage, ActionListener<Payload> listener) {\n+    /**\n+     * Move the window while preserving the same base.\n+     */\n+    private void tumbleWindow(int currentStage, ActionListener<Payload> listener) {\n+        if (currentStage > 0) {", "originalCommit": "faa489752845ae10033b08689c1f0b0659ec73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2209e924d3c19493b643d48ee21ffc8e616ad935", "url": "https://github.com/elastic/elasticsearch/commit/2209e924d3c19493b643d48ee21ffc8e616ad935", "message": "Address feedback", "committedDate": "2020-11-14T09:43:07Z", "type": "commit"}]}