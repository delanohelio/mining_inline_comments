{"pr_number": 63121, "pr_title": "EQL: Introduce case-insensitive equality", "pr_createdAt": "2020-10-01T11:41:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/63121", "timeline": [{"oid": "057ebd7d794df549449ed5ec7231780393f6588b", "url": "https://github.com/elastic/elasticsearch/commit/057ebd7d794df549449ed5ec7231780393f6588b", "message": "EQL: Introduce case-sensitive equality\n\nIntroduce : and !: operator for doing case insensitive string\ncomparisons. When dealing with non-string, the operator gets optimized\nto usual equality checks so that it can be combined with other\noperators.\n\nRelates #62941", "committedDate": "2020-10-01T11:48:12Z", "type": "commit"}, {"oid": "057ebd7d794df549449ed5ec7231780393f6588b", "url": "https://github.com/elastic/elasticsearch/commit/057ebd7d794df549449ed5ec7231780393f6588b", "message": "EQL: Introduce case-sensitive equality\n\nIntroduce : and !: operator for doing case insensitive string\ncomparisons. When dealing with non-string, the operator gets optimized\nto usual equality checks so that it can be combined with other\noperators.\n\nRelates #62941", "committedDate": "2020-10-01T11:48:12Z", "type": "forcePushed"}, {"oid": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "url": "https://github.com/elastic/elasticsearch/commit/b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "message": "Preserve the equals null semantics in :\nAdd test for wildcard being applied on literals too", "committedDate": "2020-10-01T12:06:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3MTM3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498271373", "bodyText": "Does it make sense to test String against numeric?", "author": "matriv", "createdAt": "2020-10-01T14:06:12Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/predicate/operator/comparison/InsensitiveBinaryComparisonProcessorTests.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.predicate.operator.comparison;\n+\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.io.stream.Writeable.Reader;\n+import org.elasticsearch.test.AbstractWireSerializingTestCase;\n+import org.elasticsearch.xpack.ql.TestUtils;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.ConstantProcessor;\n+import org.elasticsearch.xpack.ql.expression.processor.Processors;\n+\n+import static org.elasticsearch.xpack.eql.EqlTestUtils.seq;\n+import static org.elasticsearch.xpack.eql.EqlTestUtils.sneq;\n+import static org.elasticsearch.xpack.ql.tree.Source.EMPTY;\n+\n+public class InsensitiveBinaryComparisonProcessorTests extends AbstractWireSerializingTestCase<InsensitiveBinaryComparisonProcessor> {\n+    public static InsensitiveBinaryComparisonProcessor randomProcessor() {\n+        return new InsensitiveBinaryComparisonProcessor(\n+            new ConstantProcessor(randomLong()),\n+            new ConstantProcessor(randomLong()),\n+            randomFrom(InsensitiveBinaryComparisonProcessor.InsensitiveBinaryComparisonOperation.values()));\n+    }\n+\n+    @Override\n+    protected InsensitiveBinaryComparisonProcessor createTestInstance() {\n+        return randomProcessor();\n+    }\n+\n+    @Override\n+    protected Reader<InsensitiveBinaryComparisonProcessor> instanceReader() {\n+        return InsensitiveBinaryComparisonProcessor::new;\n+    }\n+\n+    @Override\n+    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n+        return new NamedWriteableRegistry(Processors.getNamedWriteables());\n+    }\n+\n+    public void testStringEq() {\n+        assertEquals(true, p(seq(l(\"a\"), l(\"a\"))));\n+        assertEquals(true, p(seq(l(\"A\"), l(\"a\"))));\n+        assertEquals(true, p(seq(l(\"aBcD\"), l(\"AbCd\"))));\n+        assertEquals(true, p(seq(l(\"abc\"), l(\"abc\"))));\n+\n+        assertEquals(false, p(seq(l(\"abc\"), l(\"cba\"))));\n+    }\n+\n+    public void testRegularEquals() {\n+        assertEquals(true, p(seq(l(12), l(12))));\n+        assertEquals(true, p(seq(l(2f), l(2f))));", "originalCommit": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NzA5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498497091", "bodyText": "Not really since the validation would fail. Yet I've added a test for it and put another check inside the operation just in case.", "author": "costin", "createdAt": "2020-10-01T20:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3MTM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDM1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498344359", "bodyText": "Only if you make any other changes to this PR, I think this method should be placed after doTranslate.", "author": "astefan", "createdAt": "2020-10-01T15:43:37Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -64,6 +72,50 @@ public static Query toQuery(Expression e, TranslatorHandler handler) {\n         throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n     }\n \n+    public static class InsensitiveBinaryComparisons extends ExpressionTranslator<InsensitiveBinaryComparison> {\n+\n+        @Override\n+        protected Query asQuery(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            return doTranslate(bc, handler);\n+        }\n+\n+        public static void checkInsensitiveComparison(InsensitiveBinaryComparison bc) {", "originalCommit": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM0NDk3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/63121#discussion_r498344976", "bodyText": "Query query = new TermQuery..... (meaning, these two lines should be placed on a single one instead.", "author": "astefan", "createdAt": "2020-10-01T15:44:29Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -64,6 +72,50 @@ public static Query toQuery(Expression e, TranslatorHandler handler) {\n         throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n     }\n \n+    public static class InsensitiveBinaryComparisons extends ExpressionTranslator<InsensitiveBinaryComparison> {\n+\n+        @Override\n+        protected Query asQuery(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            return doTranslate(bc, handler);\n+        }\n+\n+        public static void checkInsensitiveComparison(InsensitiveBinaryComparison bc) {\n+            Check.isTrue(bc.right().foldable(),\n+                \"Line {}:{}: Comparisons against fields are not (currently) supported; offender [{}] in [{}]\",\n+                bc.right().sourceLocation().getLineNumber(), bc.right().sourceLocation().getColumnNumber(),\n+                Expressions.name(bc.right()), bc.symbol());\n+        }\n+\n+        public static Query doTranslate(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            checkInsensitiveComparison(bc);\n+            return handler.wrapFunctionQuery(bc, bc.left(), translate(bc, handler));\n+        }\n+\n+        private static Query translate(InsensitiveBinaryComparison bc, TranslatorHandler handler) {\n+            Source source = bc.source();\n+            String name = handler.nameOf(bc.left());\n+            Object value = valueOf(bc.right());\n+\n+            if (bc instanceof InsensitiveEquals || bc instanceof InsensitiveNotEquals) {\n+                if (bc.left() instanceof FieldAttribute) {\n+                    // equality should always be against an exact match\n+                    // (which is important for strings)\n+                    name = ((FieldAttribute) bc.left()).exactAttribute().name();\n+                }\n+                Query query;", "originalCommit": "b17b485242d5bc5c6ca5b98f505c083baaa7b0ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7b3af791d003015f218dd28c1a878c1a4af0438", "url": "https://github.com/elastic/elasticsearch/commit/a7b3af791d003015f218dd28c1a878c1a4af0438", "message": "Remove !:\nRestrict : usage to strings only", "committedDate": "2020-10-01T17:03:11Z", "type": "commit"}, {"oid": "7320428cf2b88cc1bd77b068a392679031ef986a", "url": "https://github.com/elastic/elasticsearch/commit/7320428cf2b88cc1bd77b068a392679031ef986a", "message": "Merge branch 'master' into fix/62941", "committedDate": "2020-10-01T17:04:21Z", "type": "commit"}, {"oid": "7e1154230a7339fc6c7c40e2ad7f735073b8f49d", "url": "https://github.com/elastic/elasticsearch/commit/7e1154230a7339fc6c7c40e2ad7f735073b8f49d", "message": "Restrict : operator only to strings", "committedDate": "2020-10-01T17:56:50Z", "type": "commit"}, {"oid": "e0b1ab716cba614c7e512bf24977d3a65f793e38", "url": "https://github.com/elastic/elasticsearch/commit/e0b1ab716cba614c7e512bf24977d3a65f793e38", "message": "Address feedback\nAdd more tests + minor formatting", "committedDate": "2020-10-01T20:30:18Z", "type": "commit"}]}