{"pr_number": 53533, "pr_title": "Enable support for decompression of compressed response within RestHighLevelClient", "pr_createdAt": "2020-03-13T09:41:59Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53533", "timeline": [{"oid": "566fb2a639ac42431aa0aacef78137c5693e8dc7", "url": "https://github.com/elastic/elasticsearch/commit/566fb2a639ac42431aa0aacef78137c5693e8dc7", "message": "Added decompression of gzip when gzip value is return as an header from Elasticsearch", "committedDate": "2020-03-13T01:20:24Z", "type": "commit"}, {"oid": "a6e74d1db57031f1f52cefc7ad39a9db2caa2664", "url": "https://github.com/elastic/elasticsearch/commit/a6e74d1db57031f1f52cefc7ad39a9db2caa2664", "message": "Importing only specific classes", "committedDate": "2020-03-13T09:15:51Z", "type": "commit"}, {"oid": "f028fee6faf7f6277948bf40733334bc4c9e6787", "url": "https://github.com/elastic/elasticsearch/commit/f028fee6faf7f6277948bf40733334bc4c9e6787", "message": "Merge pull request #1 from elastic/master\n\nPulling latest changes from master", "committedDate": "2020-03-13T09:29:25Z", "type": "commit"}, {"oid": "2bdcc7248ff9af5d8693f9d5d1fd8ecb3311eb79", "url": "https://github.com/elastic/elasticsearch/commit/2bdcc7248ff9af5d8693f9d5d1fd8ecb3311eb79", "message": "Merge branch 'master' of github.com:Hakky54/elasticsearch into feature/add-support-for-decompression-of-compressed-response", "committedDate": "2020-03-13T09:32:44Z", "type": "commit"}, {"oid": "c275faef0c16f036e305dd1b1bdfe86150b04772", "url": "https://github.com/elastic/elasticsearch/commit/c275faef0c16f036e305dd1b1bdfe86150b04772", "message": "Fixed imports", "committedDate": "2020-03-13T10:14:11Z", "type": "commit"}, {"oid": "0191c26241022677ce2c2f17acee3e6ead03f7b3", "url": "https://github.com/elastic/elasticsearch/commit/0191c26241022677ce2c2f17acee3e6ead03f7b3", "message": "Fixed getting byte array the correct way", "committedDate": "2020-03-13T16:14:29Z", "type": "commit"}, {"oid": "a47f894be8cc7d0f97b6139c6a650b58d396faf8", "url": "https://github.com/elastic/elasticsearch/commit/a47f894be8cc7d0f97b6139c6a650b58d396faf8", "message": "Fixed unit test", "committedDate": "2020-03-13T22:38:15Z", "type": "commit"}, {"oid": "8671fc0e550d53c0f159ba8420affeaa9f0e957d", "url": "https://github.com/elastic/elasticsearch/commit/8671fc0e550d53c0f159ba8420affeaa9f0e957d", "message": "Renamed variables and method names", "committedDate": "2020-03-16T16:17:02Z", "type": "commit"}, {"oid": "d719b842642a2335a1d77d405298c46b404f960d", "url": "https://github.com/elastic/elasticsearch/commit/d719b842642a2335a1d77d405298c46b404f960d", "message": "Applied review remarks", "committedDate": "2020-03-31T08:57:00Z", "type": "commit"}, {"oid": "0edc3c83b279dd487360f036d1669ce7ec0fa8d5", "url": "https://github.com/elastic/elasticsearch/commit/0edc3c83b279dd487360f036d1669ce7ec0fa8d5", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response", "committedDate": "2020-03-31T09:15:58Z", "type": "commit"}, {"oid": "4d14a9776273c5c8c888f623d1e546446953e281", "url": "https://github.com/elastic/elasticsearch/commit/4d14a9776273c5c8c888f623d1e546446953e281", "message": "Reverted change", "committedDate": "2020-03-31T09:32:31Z", "type": "commit"}, {"oid": "e1145c0a611b3135493e384a9a473af45325e079", "url": "https://github.com/elastic/elasticsearch/commit/e1145c0a611b3135493e384a9a473af45325e079", "message": "Removed unnecessary method as assertOk with StatusToXContentObject is sufficient", "committedDate": "2020-03-31T09:44:32Z", "type": "commit"}, {"oid": "12c802d65e2b897bb8af21438b177ccd6fdfbee1", "url": "https://github.com/elastic/elasticsearch/commit/12c802d65e2b897bb8af21438b177ccd6fdfbee1", "message": "Removed unused import", "committedDate": "2020-03-31T11:21:46Z", "type": "commit"}, {"oid": "f01476e2c0a4889b1cf04ddbc9401251994a15db", "url": "https://github.com/elastic/elasticsearch/commit/f01476e2c0a4889b1cf04ddbc9401251994a15db", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response", "committedDate": "2020-03-31T11:22:18Z", "type": "commit"}, {"oid": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "url": "https://github.com/elastic/elasticsearch/commit/5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "message": "Removed duplicate assertions, as that part is the same as the unit test of testParseEntity()", "committedDate": "2020-04-01T08:12:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzNjc2OA==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401536768", "bodyText": "very minor, but should we go with UTF_8 here? (to stay within the \"utf8 everywhere\" bounds)", "author": "andreidan", "createdAt": "2020-04-01T11:12:28Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java", "diffHunk": "@@ -320,6 +326,50 @@ public void testParseEntity() throws IOException {\n         }\n     }\n \n+    public void testParseCompressedEntity() throws IOException {\n+        CheckedFunction<XContentParser, String, IOException> entityParser = parser -> {\n+            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());\n+            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());\n+            assertTrue(parser.nextToken().isValue());\n+            String value = parser.text();\n+            assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken());\n+            return value;\n+        };\n+\n+        HttpEntity jsonEntity = new NByteArrayEntity(compress(\"{\\\"field\\\":\\\"value\\\"}\"), ContentType.APPLICATION_JSON);\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser));\n+        HttpEntity yamlEntity = new NByteArrayEntity(compress(\"---\\nfield: value\\n\"), ContentType.create(\"application/yaml\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(yamlEntity), entityParser));\n+        HttpEntity smileEntity = createCompressedBinaryEntity(SmileXContent.contentBuilder(), ContentType.create(\"application/smile\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(smileEntity), entityParser));\n+        HttpEntity cborEntity = createCompressedBinaryEntity(CborXContent.contentBuilder(), ContentType.create(\"application/cbor\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(cborEntity), entityParser));\n+    }\n+\n+    private static byte[] compress(String content) throws IOException {\n+        return compress(content.getBytes(StandardCharsets.ISO_8859_1));", "originalCommit": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2Mjg2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r402162863", "bodyText": "The reason why I used ISO_8859_1 here was because in a previous commit I was not using the GzipDecompressingEntity and somehow it was not able to correctly compress and decompress. I changed it now to UTF_8, great catch!", "author": "Hakky54", "createdAt": "2020-04-02T09:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzNjc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401542623", "bodyText": "I think we can make use of ESRestHighLevelClientTestCase and have HttpCompressionIT moved to the client (org.elasticsearch.client) tests and extend it? That way we'll keep ESRestTestCase agnostic of the high level rest client as it's already quite knowledgeable, and HttpCompressionIT is essentially testing how our clients are handling the compression so I think it would fit in the client package. What do you think?", "author": "andreidan", "createdAt": "2020-04-01T11:23:56Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java", "diffHunk": "@@ -139,6 +141,7 @@ public static boolean hasXPack() {\n      * A client for the running Elasticsearch cluster\n      */\n     private static RestClient client;\n+    private static RestHighLevelClient restHighLevelClient;", "originalCommit": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NjQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r402166431", "bodyText": "Good one, I refactored it!", "author": "Hakky54", "createdAt": "2020-04-02T09:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzU5OA==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401553598", "bodyText": "Nice test! Should we also assert we got one hit back? (we'd read something from the payload this way)", "author": "andreidan", "createdAt": "2020-04-01T11:45:53Z", "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/HttpCompressionIT.java", "diffHunk": "@@ -59,4 +66,29 @@ public void testUncompressedResponseByDefault() throws IOException {\n         assertNull(response.getHeader(HttpHeaders.CONTENT_ENCODING));\n     }\n \n+    public void testCompressesResponseIfRequestedWhileUsingRestHighLevelClient() throws IOException {\n+        String documentId = \"1\";\n+        String indexName = \"company\";\n+\n+        IndexRequest indexRequest = new IndexRequest(indexName)\n+            .source(SAMPLE_DOCUMENT, XContentType.JSON)\n+            .id(documentId);\n+        IndexResponse indexResponse = restHighLevelClient().index(indexRequest, RequestOptions.DEFAULT);\n+        assertOK(indexResponse);\n+\n+        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder()\n+            .query(new MatchQueryBuilder(\"_id\", documentId));\n+\n+        SearchRequest searchRequest = new SearchRequest()\n+            .indices(indexName)\n+            .source(sourceBuilder);\n+\n+        RequestOptions requestOptions = RequestOptions.DEFAULT.toBuilder()\n+            .addHeader(HttpHeaders.ACCEPT_ENCODING, GZIP_ENCODING)\n+            .build();\n+\n+        SearchResponse searchResponse = restHighLevelClient().search(searchRequest, requestOptions);\n+        assertOK(searchResponse);", "originalCommit": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzQ5NA==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r402163494", "bodyText": "Included asserting amount of hits and even the source of the hit", "author": "Hakky54", "createdAt": "2020-04-02T09:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDAzNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401560035", "bodyText": "Shall we convert this to a method that creates an encoded HttpEntity?\nie. HttpEntity createGzipEncodedEntity(String content)\nAnd we could use real apache entities instead of mocks/spies. We can create a BasicHttpEntity, a BasicHeader for the encoding and set the header we create on the entity using setContentEncoding(Header contentEncoding)", "author": "andreidan", "createdAt": "2020-04-01T11:58:27Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java", "diffHunk": "@@ -320,6 +326,50 @@ public void testParseEntity() throws IOException {\n         }\n     }\n \n+    public void testParseCompressedEntity() throws IOException {\n+        CheckedFunction<XContentParser, String, IOException> entityParser = parser -> {\n+            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());\n+            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());\n+            assertTrue(parser.nextToken().isValue());\n+            String value = parser.text();\n+            assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken());\n+            return value;\n+        };\n+\n+        HttpEntity jsonEntity = new NByteArrayEntity(compress(\"{\\\"field\\\":\\\"value\\\"}\"), ContentType.APPLICATION_JSON);\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser));\n+        HttpEntity yamlEntity = new NByteArrayEntity(compress(\"---\\nfield: value\\n\"), ContentType.create(\"application/yaml\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(yamlEntity), entityParser));\n+        HttpEntity smileEntity = createCompressedBinaryEntity(SmileXContent.contentBuilder(), ContentType.create(\"application/smile\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(smileEntity), entityParser));\n+        HttpEntity cborEntity = createCompressedBinaryEntity(CborXContent.contentBuilder(), ContentType.create(\"application/cbor\"));\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(cborEntity), entityParser));\n+    }\n+\n+    private static byte[] compress(String content) throws IOException {\n+        return compress(content.getBytes(StandardCharsets.ISO_8859_1));\n+    }\n+\n+    private static byte[] compress(byte[] content) throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream(content.length);\n+        GZIPOutputStream gzip = new GZIPOutputStream(bos);\n+        gzip.write(content);\n+        gzip.close();\n+        bos.close();\n+\n+        return bos.toByteArray();\n+    }\n+\n+    private static HttpEntity enrichHeaderContentEncodingWithGzip(HttpEntity httpEntity) {", "originalCommit": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NzgyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r402177821", "bodyText": "Yes, also done. And instead of using BasicHttpEntity I have used NByteArrayEntity and included the content encoding and discarded enrichHeaderContentEncodingWithGzip method as that one is not needed anymore. Thank you for the feedback!", "author": "Hakky54", "createdAt": "2020-04-02T09:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDY2OA==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401560668", "bodyText": "This might be subjective, but this is a bit hard to read. I find it hard to see what exactly is being tested. Would it be a bit easier to read if we extract the enriched header entities on a separate line above the assert statement?\nie. assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser)); could become\nHttpEntity jsonEntity = createGzipEncodedEntity(\"{ ... }\"); \nassertThat(restHighLevelClient.parseEntity(jsonEntity, entityParser), is(\"value));", "author": "andreidan", "createdAt": "2020-04-01T11:59:41Z", "path": "client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java", "diffHunk": "@@ -320,6 +326,50 @@ public void testParseEntity() throws IOException {\n         }\n     }\n \n+    public void testParseCompressedEntity() throws IOException {\n+        CheckedFunction<XContentParser, String, IOException> entityParser = parser -> {\n+            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());\n+            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());\n+            assertTrue(parser.nextToken().isValue());\n+            String value = parser.text();\n+            assertEquals(XContentParser.Token.END_OBJECT, parser.nextToken());\n+            return value;\n+        };\n+\n+        HttpEntity jsonEntity = new NByteArrayEntity(compress(\"{\\\"field\\\":\\\"value\\\"}\"), ContentType.APPLICATION_JSON);\n+        assertEquals(\"value\", restHighLevelClient.parseEntity(enrichHeaderContentEncodingWithGzip(jsonEntity), entityParser));", "originalCommit": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NDY3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r402164672", "bodyText": "Yes, you are right. It is indeed hard to read. I have refactored it with your suggestion, hope it make easier to understand and more enjoyable to read", "author": "Hakky54", "createdAt": "2020-04-02T09:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTMwNA==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r401565304", "bodyText": "super minor: shall we rename headerValue to gzipHeaderValue to point out we found the gzip encoding header?", "author": "andreidan", "createdAt": "2020-04-01T12:09:02Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java", "diffHunk": "@@ -1872,11 +1874,18 @@ protected final ElasticsearchStatusException parseResponseException(ResponseExce\n         return elasticsearchException;\n     }\n \n-    protected final <Resp> Resp parseEntity(final HttpEntity entity,\n+    protected final <Resp> Resp parseEntity(final HttpEntity httpEntity,\n                                       final CheckedFunction<XContentParser, Resp, IOException> entityParser) throws IOException {\n-        if (entity == null) {\n+        if (httpEntity == null) {\n             throw new IllegalStateException(\"Response body expected but not returned\");\n         }\n+\n+        final HttpEntity entity = Optional.ofNullable(httpEntity.getContentEncoding())\n+            .map(Header::getValue)\n+            .filter(\"gzip\"::equalsIgnoreCase)\n+            .map(headerValue -> (HttpEntity) new GzipDecompressingEntity(httpEntity))", "originalCommit": "5aac2e6b8dd3ebd092def8a82231484ac9a664cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NzEzNw==", "url": "https://github.com/elastic/elasticsearch/pull/53533#discussion_r402167137", "bodyText": "Good suggestion, also applied!", "author": "Hakky54", "createdAt": "2020-04-02T09:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTMwNA=="}], "type": "inlineReview"}, {"oid": "a339f5de2c6ab52b963c27bd4f44bf9df2a1a6c0", "url": "https://github.com/elastic/elasticsearch/commit/a339f5de2c6ab52b963c27bd4f44bf9df2a1a6c0", "message": "Applied review remarks", "committedDate": "2020-04-02T08:49:32Z", "type": "commit"}, {"oid": "c0b43a581390d344f3a3bf994aa5f573da706051", "url": "https://github.com/elastic/elasticsearch/commit/c0b43a581390d344f3a3bf994aa5f573da706051", "message": "Applied review remarks for excluding spied objects", "committedDate": "2020-04-02T09:27:44Z", "type": "commit"}, {"oid": "b2943f6e277a4d0429cf89a9e5b3712c79b9802a", "url": "https://github.com/elastic/elasticsearch/commit/b2943f6e277a4d0429cf89a9e5b3712c79b9802a", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response", "committedDate": "2020-04-02T09:32:44Z", "type": "commit"}, {"oid": "14aeb0ffa7cb54d719727d5928ba7e18c8832dfa", "url": "https://github.com/elastic/elasticsearch/commit/14aeb0ffa7cb54d719727d5928ba7e18c8832dfa", "message": "Applied review remarks", "committedDate": "2020-04-02T14:10:33Z", "type": "commit"}, {"oid": "a68f3800845991420fe77365a001b4e6d9db0b6f", "url": "https://github.com/elastic/elasticsearch/commit/a68f3800845991420fe77365a001b4e6d9db0b6f", "message": "Merge branch 'master' into feature/add-support-for-decompression-of-compressed-response", "committedDate": "2020-04-02T14:11:19Z", "type": "commit"}, {"oid": "3045c87f0535f9e74de12308bccb6989fb36763f", "url": "https://github.com/elastic/elasticsearch/commit/3045c87f0535f9e74de12308bccb6989fb36763f", "message": "Added static import", "committedDate": "2020-04-02T14:17:44Z", "type": "commit"}]}