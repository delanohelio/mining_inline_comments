{"pr_number": 52985, "pr_title": "Resolve runtime SP model from index doc", "pr_createdAt": "2020-02-29T23:05:38Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52985", "timeline": [{"oid": "73f1d4639cab192b7ee1fcb2478f6e00b443a09e", "url": "https://github.com/elastic/elasticsearch/commit/73f1d4639cab192b7ee1fcb2478f6e00b443a09e", "message": "Resolve runtime SP model from index doc\n\nThis change adds a `SamlServiceProviderResolver` that can build a\n`SamlServiceProvider` object for a given entity-id, based on the\ndocument model stored in `SamlServiceProviderDocument`.\n\nThis resolver includes a cache that is aware of document versioning\n(seqNo, primaryTerm) and avoids JSON parsing and object construction\nif the document has not changed since last use.", "committedDate": "2020-02-29T12:58:01Z", "type": "commit"}, {"oid": "422baf56a083c610d3f9770e0e9736956f0ee0cd", "url": "https://github.com/elastic/elasticsearch/commit/422baf56a083c610d3f9770e0e9736956f0ee0cd", "message": "Merge branch 'feature-internal-idp' into idp/sp-resolve\n\n# Conflicts:\n#\tx-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java\n#\tx-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java\n#\tx-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdentityProvider.java\n#\tx-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/CloudServiceProvider.java\n#\tx-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProvider.java\n#\tx-pack/plugin/identity-provider/src/test/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidatorTests.java", "committedDate": "2020-02-29T23:57:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2OTA2MA==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r387269060", "bodyText": "I like that we throw specifically on urlencode errors now but I find the two very similar methods with almost identical signatures confusing. I think that changing the parameter names in the other method accordingly will help alleviate some of that - in any case I'm nitpicking, these are private methods eitherway", "author": "jkakavas", "createdAt": "2020-03-03T20:16:49Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java", "diffHunk": "@@ -170,22 +174,38 @@ private void validateAuthnRequest(AuthnRequest authnRequest, SamlServiceProvider\n         checkAcs(authnRequest, sp);\n     }\n \n-    private boolean validateSignature(String samlRequest, String sigAlg, String signature, X509Credential credential,\n+    private boolean validateSignature(String samlRequest, String sigAlg, String signature, Collection<X509Credential> credentials,\n                                       @Nullable String relayState) {\n         try {\n             final String queryParam = relayState == null ?\n                 \"SAMLRequest=\" + urlEncode(samlRequest) + \"&SigAlg=\" + urlEncode(sigAlg) :\n                 \"SAMLRequest=\" + urlEncode(samlRequest) + \"&RelayState=\" + urlEncode(relayState) + \"&SigAlg=\" + urlEncode(sigAlg);\n-            Signature sig = Signature.getInstance(samlFactory.getJavaAlorithmNameFromUri(sigAlg));\n-            sig.initVerify(credential.getEntityCertificate().getPublicKey());\n-            sig.update(queryParam.getBytes(StandardCharsets.UTF_8));\n-            return sig.verify(Base64.getDecoder().decode(signature));\n-        } catch (Exception e) {\n-            throw new ElasticsearchSecurityException(\"Unable to validate signature of authentication request using credentials [{}]\",\n-                samlFactory.describeCredentials(Collections.singletonList(credential)), e);\n+            return validateSignature(queryParam.getBytes(StandardCharsets.UTF_8), sigAlg, signature, credentials);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new ElasticsearchSecurityException(\"Cannot reconstruct query for signature verification\", e);\n         }\n     }\n \n+    private boolean validateSignature(byte[] content, String algorithm, String base64Signature, Collection<X509Credential> credentials) {", "originalCommit": "422baf56a083c610d3f9770e0e9736956f0ee0cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3MjIwNw==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r388072207", "bodyText": "I need to merge this with #52986 and then I can bring it all together. I was constrained a bit by not wanting to touch the same place too many times.", "author": "tvernum", "createdAt": "2020-03-05T04:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2OTA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NjIwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r387286201", "bodyText": "I do feel we have discussed this already but it evades me now. Why did we select this approach over i.e returning the cached version of the ServiceProvider if one exists without hitting the index and invalidate entries when an sp document changes ?", "author": "jkakavas", "createdAt": "2020-03-03T20:52:03Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderResolver.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.cache.CacheBuilder;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.iterable.Iterables;\n+import org.elasticsearch.xpack.idp.privileges.ServiceProviderPrivileges;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex.DocumentSupplier;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex.DocumentVersion;\n+import org.joda.time.ReadableDuration;\n+import org.opensaml.security.x509.BasicX509Credential;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class SamlServiceProviderResolver {\n+\n+    private static final int CACHE_SIZE_DEFAULT = 1000;\n+    private static final TimeValue CACHE_TTL_DEFAULT = TimeValue.timeValueMinutes(60);\n+\n+    public static final Setting<Integer> CACHE_SIZE\n+        = Setting.intSetting(\"xpack.idp.sp.cache.size\", CACHE_SIZE_DEFAULT, Setting.Property.NodeScope);\n+    public static final Setting<TimeValue> CACHE_TTL\n+        = Setting.timeSetting(\"xpack.idp.sp.cache.ttl\", CACHE_TTL_DEFAULT, Setting.Property.NodeScope);\n+\n+    private final Cache<String, CachedServiceProvider> cache;\n+    private final SamlServiceProviderIndex index;\n+    private final SamlIdentityProvider identityProvider;\n+\n+    public SamlServiceProviderResolver(Settings settings, SamlServiceProviderIndex index, SamlIdentityProvider identityProvider) {\n+        this.cache = CacheBuilder.<String, CachedServiceProvider>builder()\n+            .setMaximumWeight(CACHE_SIZE.get(settings))\n+            .setExpireAfterAccess(CACHE_TTL.get(settings))\n+            .build();\n+        this.index = index;\n+        this.identityProvider = identityProvider;\n+    }\n+\n+    /**\n+     * Find a {@link SamlServiceProvider} by entity-id.\n+     *\n+     * @param listener Callback for the service provider object. Calls {@link ActionListener#onResponse} with a {@code null} value if the\n+     *                 service provider does not exist.\n+     */\n+    public void resolve(String entityId, ActionListener<SamlServiceProvider> listener) {", "originalCommit": "422baf56a083c610d3f9770e0e9736956f0ee0cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3MTAzMA==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r388071030", "bodyText": "Mostly because the alternative needs more plumbing.\nIt needs:\n\nA transport action to clear the cache on change\nsomething to fix the cache if a node leaves the cluster for a period of time, in case it missed clear-cache events\nA rest action to clear the cache if you've done something that wasn't automatically detected as a change\ndocs explaining the conditions under which you'd need to call the rest action\n\nOur history with doing that for users & roles has shown that issues slip through and they're really hard to track down.", "author": "tvernum", "createdAt": "2020-03-05T04:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NjIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTE2OA==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r388121168", "bodyText": "Thanks for the explanation - I agree with your reasoning and it's good to have it written down for future reference too", "author": "jkakavas", "createdAt": "2020-03-05T07:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NjIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5NDY0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r387294646", "bodyText": "Are those placeholder values mostly?\nI feel the answer is \"the latter\", but asking either way: should we try to determine some sane numbers relevant to the number of SPs we estimate or leave this entirely up to the administrators?", "author": "jkakavas", "createdAt": "2020-03-03T21:08:55Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderResolver.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.sp;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.common.cache.Cache;\n+import org.elasticsearch.common.cache.CacheBuilder;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.common.util.iterable.Iterables;\n+import org.elasticsearch.xpack.idp.privileges.ServiceProviderPrivileges;\n+import org.elasticsearch.xpack.idp.saml.idp.SamlIdentityProvider;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex.DocumentSupplier;\n+import org.elasticsearch.xpack.idp.saml.sp.SamlServiceProviderIndex.DocumentVersion;\n+import org.joda.time.ReadableDuration;\n+import org.opensaml.security.x509.BasicX509Credential;\n+import org.opensaml.security.x509.X509Credential;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class SamlServiceProviderResolver {\n+\n+    private static final int CACHE_SIZE_DEFAULT = 1000;", "originalCommit": "422baf56a083c610d3f9770e0e9736956f0ee0cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3MTU5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52985#discussion_r388071596", "bodyText": "I think these are reasonable defaults for ECE and/or a very small region.\nI can't predict defaults for a large region (they're probably not identical across all such regions) but I think 1000 is a good default for a small environment - it's enough capacity to satisfy most usage, but small enough not to introduce overhead.", "author": "tvernum", "createdAt": "2020-03-05T04:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5NDY0Ng=="}], "type": "inlineReview"}, {"oid": "1ae0373af3ea3930de4756db5636dfb9790d4311", "url": "https://github.com/elastic/elasticsearch/commit/1ae0373af3ea3930de4756db5636dfb9790d4311", "message": "Merge branch 'feature-internal-idp' into idp/sp-resolve", "committedDate": "2020-03-05T06:21:03Z", "type": "commit"}, {"oid": "6a6b6f64ca45765183429bbf7d596dec1f64f96d", "url": "https://github.com/elastic/elasticsearch/commit/6a6b6f64ca45765183429bbf7d596dec1f64f96d", "message": "Minor cleanup", "committedDate": "2020-03-05T07:29:13Z", "type": "commit"}]}