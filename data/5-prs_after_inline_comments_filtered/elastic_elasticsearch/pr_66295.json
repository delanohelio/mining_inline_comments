{"pr_number": 66295, "pr_title": "Bust the request cache when the mapping changes", "pr_createdAt": "2020-12-14T19:44:01Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66295", "timeline": [{"oid": "528bfc6b488bdfa99aa777f4c88d5874e0fae073", "url": "https://github.com/elastic/elasticsearch/commit/528bfc6b488bdfa99aa777f4c88d5874e0fae073", "message": "Bust the request cache when the mapping changes\n\nThis makes sure that we only serve a hit from the request cache if it\nwas build using the same mapping and that the entire search phase is\nprocessed using the same mapping. These are both bugs that Elasticsearch\nhas had for a long, long time but now that we have runtime fields they\nare much more likely to matter because runtime fields can be changed\n*drastically* from moment to moment.\n\nIt does by adding a counter to the local mapping that is incremented\nwhenever the mapping changes. This counter and the mapping is stored\nunder a single `volatile` variable that is updated to point to the new\nmapping whenever the mapping changes. When the search phase begins we\nread the contents of the `volatile` and use it to power the entire\nphase, and including the version counter into the cache key.\n\nBefore this change we'd go back to the `volatile` over and over again,\npotentially getting a new version of the mapping every time. This was\nconvenient but made it possible that we'd see the mapping update half\nway through the search phase which could cause trouble.\n\nMechanically, this creates a `snapshot()` method on `MapperService` to\ndo the volatile read of the current mapping. The snapshot does all of\nthe reading we need from here on out. I kept all of the methods on\n`MapperService` that read directly from the mapping but deprecated all\nof them because using them can lead to seeing the mapping updates when\nyou don't expect them. We can slowly remove the usages in follow up\nchanges. This change is big enough as is.\n\nSadly, the `Mapper`s are also mutable. Luckilly, we only mutate them\nbefore sticking them behind the `volatile` reference. Hopefully. There\nis a lot of code there and it is hard to be sure. But it looks like we\n*intend* to do this. We should make them properly immutable in a follow\nup change.\n\nCloses #62033", "committedDate": "2020-11-24T14:17:23Z", "type": "commit"}, {"oid": "8c808e79fda2075bddd7c37f54c815753a1459ab", "url": "https://github.com/elastic/elasticsearch/commit/8c808e79fda2075bddd7c37f54c815753a1459ab", "message": "Refactor", "committedDate": "2020-11-24T14:59:43Z", "type": "commit"}, {"oid": "3fc61e8bbaf06775ea5b740b97dedd7032f83766", "url": "https://github.com/elastic/elasticsearch/commit/3fc61e8bbaf06775ea5b740b97dedd7032f83766", "message": "Refactor again", "committedDate": "2020-11-24T15:05:49Z", "type": "commit"}, {"oid": "1dedc0a8b809632d09b22bd7be78abfb730e3ca2", "url": "https://github.com/elastic/elasticsearch/commit/1dedc0a8b809632d09b22bd7be78abfb730e3ca2", "message": "Javadoc", "committedDate": "2020-11-24T15:38:39Z", "type": "commit"}, {"oid": "fddfdb09a29a15d7fcf51faf3d963f67a9c7e538", "url": "https://github.com/elastic/elasticsearch/commit/fddfdb09a29a15d7fcf51faf3d963f67a9c7e538", "message": "Moar javadoc", "committedDate": "2020-11-24T15:57:44Z", "type": "commit"}, {"oid": "b42f493e966b89d640d6d3fee212f353f57e9be4", "url": "https://github.com/elastic/elasticsearch/commit/b42f493e966b89d640d6d3fee212f353f57e9be4", "message": "Merge branch 'master' into cache_bust", "committedDate": "2020-11-24T17:34:24Z", "type": "commit"}, {"oid": "58af6feea5553003cf5e12b38248f438fabf5c52", "url": "https://github.com/elastic/elasticsearch/commit/58af6feea5553003cf5e12b38248f438fabf5c52", "message": "Add example in core", "committedDate": "2020-11-24T22:08:04Z", "type": "commit"}, {"oid": "5f54e5bb0f89422b9b562e8b0a14bcc2e53b80be", "url": "https://github.com/elastic/elasticsearch/commit/5f54e5bb0f89422b9b562e8b0a14bcc2e53b80be", "message": "Merge branch 'master' into cache_bust", "committedDate": "2020-11-30T22:40:36Z", "type": "commit"}, {"oid": "177e4d8509ab33d37408e9e90d8fb35372cefd57", "url": "https://github.com/elastic/elasticsearch/commit/177e4d8509ab33d37408e9e90d8fb35372cefd57", "message": "WIP", "committedDate": "2020-12-01T14:42:51Z", "type": "commit"}, {"oid": "e59716408d1899689565f8e48dd1826af7a9ec81", "url": "https://github.com/elastic/elasticsearch/commit/e59716408d1899689565f8e48dd1826af7a9ec81", "message": "WIP", "committedDate": "2020-12-01T16:22:25Z", "type": "commit"}, {"oid": "72887cd830d6e6f51f42359f0df06f512ac304b7", "url": "https://github.com/elastic/elasticsearch/commit/72887cd830d6e6f51f42359f0df06f512ac304b7", "message": "Merge branch 'master' into cache_bust", "committedDate": "2020-12-09T18:43:10Z", "type": "commit"}, {"oid": "35873854c68b2aa71e11acc879ab3e2e3815c19e", "url": "https://github.com/elastic/elasticsearch/commit/35873854c68b2aa71e11acc879ab3e2e3815c19e", "message": "ooops:", "committedDate": "2020-12-09T18:49:26Z", "type": "commit"}, {"oid": "82b2a53c6b5d927473ccfd86f1d7138310c9b365", "url": "https://github.com/elastic/elasticsearch/commit/82b2a53c6b5d927473ccfd86f1d7138310c9b365", "message": "Compile plz", "committedDate": "2020-12-09T18:55:10Z", "type": "commit"}, {"oid": "d30da9aae2a5e3a5d6c8238597d2fb93aa971c24", "url": "https://github.com/elastic/elasticsearch/commit/d30da9aae2a5e3a5d6c8238597d2fb93aa971c24", "message": "Fix test", "committedDate": "2020-12-09T19:28:30Z", "type": "commit"}, {"oid": "bcd8e52922f93dd3b6022182c2ba69def0c2c5f2", "url": "https://github.com/elastic/elasticsearch/commit/bcd8e52922f93dd3b6022182c2ba69def0c2c5f2", "message": "Checkstyle", "committedDate": "2020-12-09T20:14:46Z", "type": "commit"}, {"oid": "c3ace97a77fcd32abd45432a048a5ba140c8377d", "url": "https://github.com/elastic/elasticsearch/commit/c3ace97a77fcd32abd45432a048a5ba140c8377d", "message": "Merge branch 'master' into cache_bust", "committedDate": "2020-12-09T20:54:47Z", "type": "commit"}, {"oid": "81b9824e5ea80d26faf9c7ac19bc115e259203ea", "url": "https://github.com/elastic/elasticsearch/commit/81b9824e5ea80d26faf9c7ac19bc115e259203ea", "message": "WIP", "committedDate": "2020-12-14T17:46:47Z", "type": "commit"}, {"oid": "a36ea7fdf21ff60ca5e97811eb249d6fd4752bfd", "url": "https://github.com/elastic/elasticsearch/commit/a36ea7fdf21ff60ca5e97811eb249d6fd4752bfd", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-14T17:48:26Z", "type": "commit"}, {"oid": "dde49961be732ae6bcbf8d4606ff906fbe99cb12", "url": "https://github.com/elastic/elasticsearch/commit/dde49961be732ae6bcbf8d4606ff906fbe99cb12", "message": "Checkstyle", "committedDate": "2020-12-14T17:59:50Z", "type": "commit"}, {"oid": "7519d7787b2f0b8b49b02f60e138e5d28a0ed73d", "url": "https://github.com/elastic/elasticsearch/commit/7519d7787b2f0b8b49b02f60e138e5d28a0ed73d", "message": "Implement sourceEnabled", "committedDate": "2020-12-14T18:14:51Z", "type": "commit"}, {"oid": "56cc6472187f4fdc7376640ddbd1fecceebd021c", "url": "https://github.com/elastic/elasticsearch/commit/56cc6472187f4fdc7376640ddbd1fecceebd021c", "message": "Fixup test", "committedDate": "2020-12-14T19:03:37Z", "type": "commit"}, {"oid": "a075886e13bb94c908c359bb53f71d6010d1890e", "url": "https://github.com/elastic/elasticsearch/commit/a075886e13bb94c908c359bb53f71d6010d1890e", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-15T14:24:46Z", "type": "commit"}, {"oid": "76a512cd98f5079892593302cf785b7691212525", "url": "https://github.com/elastic/elasticsearch/commit/76a512cd98f5079892593302cf785b7691212525", "message": "Fix test", "committedDate": "2020-12-15T14:31:31Z", "type": "commit"}, {"oid": "5769100e0f487244a9a0199bbfe801535fba7641", "url": "https://github.com/elastic/elasticsearch/commit/5769100e0f487244a9a0199bbfe801535fba7641", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-15T15:03:42Z", "type": "commit"}, {"oid": "d4fe787a07b4f927d694f2b53c08e87d9233be34", "url": "https://github.com/elastic/elasticsearch/commit/d4fe787a07b4f927d694f2b53c08e87d9233be34", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-15T17:25:47Z", "type": "commit"}, {"oid": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "url": "https://github.com/elastic/elasticsearch/commit/c1cf01b03391d58c451d3f4c0edb915d251ce137", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-15T17:26:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MzQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543573444", "bodyText": "Changed to make testing easier.", "author": "nik9000", "createdAt": "2020-12-15T18:12:21Z", "path": "modules/parent-join/src/main/java/org/elasticsearch/join/mapper/MetaJoinFieldMapper.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n         private final String joinField;\n \n-        private MetaJoinFieldType(String joinField) {\n+        public MetaJoinFieldType(String joinField) {", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MzgyMg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543573822", "bodyText": "Replaced with withJoinFields which allows us to use a non-mocked version.", "author": "nik9000", "createdAt": "2020-12-15T18:12:52Z", "path": "modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ChildrenToParentAggregatorTests.java", "diffHunk": "@@ -272,34 +265,14 @@ private static SortedDocValuesField createJoinField(String parentType, String id\n         return new SortedDocValuesField(\"join_field#\" + parentType, new BytesRef(id));\n     }\n \n-    @Override\n-    protected MapperService mapperServiceMock() {", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMDQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543700448", "bodyText": "Moving to #66395.", "author": "nik9000", "createdAt": "2020-12-15T21:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MzgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMDkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543700905", "bodyText": "I could pass just the MapperService here but then we'd often have to mock the mapper service just to return the lookup.", "author": "nik9000", "createdAt": "2020-12-15T21:31:36Z", "path": "server/src/main/java/org/elasticsearch/index/IndexService.java", "diffHunk": "@@ -604,9 +604,26 @@ public QueryShardContext newQueryShardContext(\n         final SearchIndexNameMatcher indexNameMatcher =\n             new SearchIndexNameMatcher(index().getName(), clusterAlias, clusterService, expressionResolver);\n         return new QueryShardContext(\n-            shardId, indexSettings, bigArrays, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),\n-            similarityService(), scriptService, xContentRegistry, namedWriteableRegistry, client, searcher, nowInMillis, clusterAlias,\n-            indexNameMatcher, allowExpensiveQueries, valuesSourceRegistry, runtimeMappings);\n+            shardId,\n+            indexSettings,\n+            bigArrays,\n+            indexCache.bitsetFilterCache(),\n+            indexFieldData::getForField,\n+            mapperService(),", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543701315", "bodyText": "The extra arguments are required so that MappingLookup can do all the things we need it to do now.", "author": "nik9000", "createdAt": "2020-12-15T21:32:20Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -115,13 +113,13 @@ private DocumentMapper(IndexSettings indexSettings,\n         this.documentParser = documentParser;\n         this.indexSettings = indexSettings;\n         this.indexAnalyzers = indexAnalyzers;\n-        this.fieldMappers = MappingLookup.fromMapping(this.mapping);\n \n         try {\n             mappingSource = new CompressedXContent(this, XContentType.JSON, ToXContent.EMPTY_PARAMS);\n         } catch (Exception e) {\n             throw new ElasticsearchGenerationException(\"failed to serialize source for type [\" + type + \"]\", e);\n         }\n+        this.fieldMappers = MappingLookup.fromMapping(mapping, this::parse, w -> w.write(mappingSource.compressed()));", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTU1NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543701554", "bodyText": "Probably should have javadoc.", "author": "nik9000", "createdAt": "2020-12-15T21:32:44Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -399,30 +398,20 @@ public DocumentMapperForType documentMapperWithAutoCreate() {\n      * Given the full name of a field, returns its {@link MappedFieldType}.\n      */\n     public MappedFieldType fieldType(String fullName) {\n-        if (fullName.equals(TypeFieldType.NAME)) {\n-            return new TypeFieldType(this.mapper == null ? \"_doc\" : this.mapper.type());\n-        }\n-        return this.mapper == null ? null : this.mapper.mappers().fieldTypes().get(fullName);\n+        return lookup().fieldTypes().get(fullName);\n     }\n \n     /**\n      * Returns all the fields that match the given pattern. If the pattern is prefixed with a type\n      * then the fields will be returned with a type prefix.\n      */\n     public Set<String> simpleMatchToFullName(String pattern) {\n-        if (Regex.isSimpleMatchPattern(pattern) == false) {\n-            // no wildcards\n-            return Collections.singleton(pattern);\n-        }\n-        return this.mapper == null ? Collections.emptySet() : this.mapper.mappers().fieldTypes().simpleMatchToFullName(pattern);\n+        return lookup().simpleMatchToFullName(pattern);\n     }\n \n-    /**\n-     * Given a field name, returns its possible paths in the _source. For example,\n-     * the 'source path' for a multi-field is the path to its parent field.\n-     */\n-    public Set<String> sourcePath(String fullName) {\n-        return this.mapper == null ? Collections.emptySet() : this.mapper.mappers().fieldTypes().sourcePaths(fullName);\n+    public MappingLookup lookup() {", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMjcwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546732705", "bodyText": "maybe I would call it mappingLookup()", "author": "javanna", "createdAt": "2020-12-21T14:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwOTM1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546809353", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-12-21T16:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTcxOA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543701718", "bodyText": "Instead of two volatile reads this method now does one. I think that is nice.", "author": "nik9000", "createdAt": "2020-12-15T21:33:04Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -132,7 +131,7 @@ public MapperService(IndexSettings indexSettings, IndexAnalyzers indexAnalyzers,\n     }\n \n     public boolean hasNested() {\n-        return this.mapper != null && this.mapper.hasNestedObjects();\n+        return lookup().hasNested();", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjEwNw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543702107", "bodyText": "All of this has been moved.", "author": "nik9000", "createdAt": "2020-12-15T21:33:48Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentFieldMapperTests.java", "diffHunk": "@@ -1,139 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.elasticsearch.index.mapper;\n-\n-import org.apache.lucene.analysis.Analyzer;\n-import org.apache.lucene.analysis.TokenStream;\n-import org.apache.lucene.analysis.Tokenizer;\n-import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;\n-import org.apache.lucene.util.LuceneTestCase;\n-import org.elasticsearch.index.analysis.AnalyzerScope;\n-import org.elasticsearch.index.analysis.NamedAnalyzer;\n-import org.elasticsearch.index.query.QueryShardContext;\n-\n-import java.io.IOException;\n-import java.io.StringReader;\n-import java.util.Arrays;\n-import java.util.Collections;\n-\n-public class DocumentFieldMapperTests extends LuceneTestCase {\n-\n-    private static class FakeAnalyzer extends Analyzer {", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjg2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543702869", "bodyText": "This is required by this change because we can no longer mock anything and magic nested fields into place with any object that starts with nested_. Now tests that use nested fields need to declare them", "author": "nik9000", "createdAt": "2020-12-15T21:35:07Z", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -288,16 +296,24 @@ protected AggregationContext createAggregationContext(IndexSearcher indexSearche\n         );\n     }\n \n+    /**\n+     * {@link ObjectMapper}s to add to the lookup. By default we don't need\n+     * any {@link ObjectMapper}s but testing nested objects will require adding some.\n+     */\n+    protected List<ObjectMapper> objectMappers() {", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1OTU0OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547059548", "bodyText": "I didn't look into this deeply, but would it make any sense to mock MappingLookup in these tests to retain flexibility?", "author": "jtibshirani", "createdAt": "2020-12-22T04:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4NDM4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547284382", "bodyText": "We couldn't easily mock MappingLookup until yesterday because we exposed FieldTypeLookup. But now that we don't we could. I don't particularly want to though. I kind of like having a real lookup now. But maybe I've just gotten used to it.", "author": "nik9000", "createdAt": "2020-12-22T13:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDk5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547554997", "bodyText": "Got it, it just seems like this adds some complexity to the aggregation test framework. I don't feel strongly about this though, perhaps the nested/ object mapper set-up here is already a bit complex (as seen in your comment below about mapperService.hasNested()).", "author": "jtibshirani", "createdAt": "2020-12-22T23:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMjg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3NjgxNw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543876817", "bodyText": "I could be missing an important consideration, but could we key on some Java object related to MappingLookup instead of appending the serialized source? This would be consistent with what we do for DirectoryReader, where we use the object reader.getReaderCacheHelper().getKey().", "author": "jtibshirani", "createdAt": "2020-12-16T03:16:28Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesService.java", "diffHunk": "@@ -1408,7 +1408,8 @@ public void loadIntoContext(ShardSearchRequest request, SearchContext context, Q\n         final DirectoryReader directoryReader = context.searcher().getDirectoryReader();\n \n         boolean[] loadedFromCache = new boolean[] { true };\n-        BytesReference bytesReference = cacheShardLevelResult(context.indexShard(), directoryReader, request.cacheKey(),\n+        BytesReference cacheKey = request.cacheKey(context.getQueryShardContext().mappingKey());", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0NDE2NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r544344164", "bodyText": "The cache key is serialized so we have to serialize something. We could use the hash code of the lookup but it when we talked about his in a group a week ago we said we just didn't want to have to think about the chance of collisions.", "author": "nik9000", "createdAt": "2020-12-16T14:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3NjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMTY2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r544511662", "bodyText": "I talked with @jtibshirani and she pointed out that we don't have to serialize something. She totally said that 13 hours ago but I didn't understand because I was being dense. I'm going to try and do the thing she proposed.", "author": "nik9000", "createdAt": "2020-12-16T18:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3NjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYyNDg1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r544624859", "bodyText": "And done!", "author": "nik9000", "createdAt": "2020-12-16T21:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3NjgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4MDg1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543880859", "bodyText": "It would be really nice if we could remove MapperService here -- that way we'd be sure MappingLookup represents all the mapping configuration relevant to the search. We could look into removing the remaining references?", "author": "jtibshirani", "createdAt": "2020-12-16T03:21:51Z", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -119,6 +123,7 @@ public QueryShardContext(\n         BitsetFilterCache bitsetFilterCache,\n         TriFunction<MappedFieldType, String, Supplier<SearchLookup>, IndexFieldData<?>> indexFieldDataLookup,\n         MapperService mapperService,", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0NDk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r544344958", "bodyText": "We could. That require moving a couple other things to MappingLookup and it is the kind of thing I did in my first iteration but folks didn't like how \"big\" the abstraction got.", "author": "nik9000", "createdAt": "2020-12-16T14:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4MDg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMjM4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547212382", "bodyText": "I am really on the fence about this. I also would like to remove references to MapperService, yet I don't see a contained way of doing it, and I would not want to add all kinds of methods to MappingLookup. I wonder if it would be acceptable to consider this a (very important) follow-up, meaning that 7.11 will still have direct MapperService access while we are going to think about a long term solution for 7.x and master moving forward.", "author": "javanna", "createdAt": "2020-12-22T11:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4MDg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4MDc0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547280741", "bodyText": "I'd like to delay this simply because we aren't sure we want this. I think its reasonable but I understand the argument of wanting the MapperService reference for the \"immutable stuff\". It just that MapperService lets you do the mutable read too and it'd be nice not to have to worry about accidentally doing it.\nIf we had a separate object or interface for the immutable stuff I think it'd be really compelling to keep them separate.", "author": "nik9000", "createdAt": "2020-12-22T13:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg4MDg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r543965464", "bodyText": "I remembered that search analyzers can be reloaded which doesn't cause a mapping update but changes how fields are analyzed! This is also an important way in which MappingLookup is not immutable.", "author": "jtibshirani", "createdAt": "2020-12-16T05:13:47Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -444,18 +433,7 @@ public ObjectMapper getObjectMapper(String name) {\n      *                                  directly associated index-time analyzer\n      */\n     public NamedAnalyzer indexAnalyzer(String field, Function<String, NamedAnalyzer> unindexedFieldAnalyzer) {", "originalCommit": "c1cf01b03391d58c451d3f4c0edb915d251ce137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0NTU3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r544345575", "bodyText": "Yikes! We probably should figure out a way to make that replace the MappingLookup somehow. Do you want to save that for a follow up or for me to grab it now?", "author": "nik9000", "createdAt": "2020-12-16T14:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDE0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547054147", "bodyText": "@nik9000 and I discussed offline, and decided we'd like to just document the behavior for now instead of trying to fix it in this PR. He also filed #66722 to track the issue.", "author": "jtibshirani", "createdAt": "2020-12-22T03:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwOTc3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547209775", "bodyText": "Makes sense. These changes though are still required so that QueryShardContext goes through MappingLookup instead of MapperService as part of its indexAnalyzer method? Or should it be part of those leftover methods that we need to decide what to do about (that are not necessary to move over yet we want to remove MapperService access so we need to make up our minds)?", "author": "javanna", "createdAt": "2020-12-22T10:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3OTEwOA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547279108", "bodyText": "These are required for QueryShardContext to get the snapshot, yeah.", "author": "nik9000", "createdAt": "2020-12-22T13:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MTE0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547351141", "bodyText": "I get it. My question is: given that we are not fixing analyzers reloading, do we need query shard context to go through mapping lookup to get this? Or can we leave it on MapperService until we properly address it?", "author": "javanna", "createdAt": "2020-12-22T15:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5NzA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547397070", "bodyText": "I think if we don't use the snapshot like we are here there are (rare) cases where you could see the addition of a new field without it getting in the snapshot's key. That is probably safe but its the kind of thing I don't want to have to think about and moving it over feels pretty safe too. But I think you are right about looking at this method again to make sure we actually need it.", "author": "nik9000", "createdAt": "2020-12-22T17:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk2NTQ2NA=="}], "type": "inlineReview"}, {"oid": "6273512265704334aac49c6c77890b2c64af5096", "url": "https://github.com/elastic/elasticsearch/commit/6273512265704334aac49c6c77890b2c64af5096", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-16T18:18:15Z", "type": "commit"}, {"oid": "a359630f2ad2f0d2cef50b91b3a233832876e430", "url": "https://github.com/elastic/elasticsearch/commit/a359630f2ad2f0d2cef50b91b3a233832876e430", "message": "Fixup", "committedDate": "2020-12-16T18:21:17Z", "type": "commit"}, {"oid": "1335aab3556145ba98e7215fa26ca6003ed3a2f7", "url": "https://github.com/elastic/elasticsearch/commit/1335aab3556145ba98e7215fa26ca6003ed3a2f7", "message": "Remove spacing change", "committedDate": "2020-12-16T18:25:52Z", "type": "commit"}, {"oid": "9900fcbfafdc5649fddda931bf45401908df5eaf", "url": "https://github.com/elastic/elasticsearch/commit/9900fcbfafdc5649fddda931bf45401908df5eaf", "message": "Javadoc", "committedDate": "2020-12-16T18:27:34Z", "type": "commit"}, {"oid": "501aea892b6c731e356f90cf8d819e4f67b1ad2e", "url": "https://github.com/elastic/elasticsearch/commit/501aea892b6c731e356f90cf8d819e4f67b1ad2e", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-16T19:38:12Z", "type": "commit"}, {"oid": "ed582f4e3df951b065bf415116ccdf1270484279", "url": "https://github.com/elastic/elasticsearch/commit/ed582f4e3df951b065bf415116ccdf1270484279", "message": "Switch cache around", "committedDate": "2020-12-16T20:33:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzOTg2OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r544639868", "bodyText": "@javanna and I talked earlier today and we thought that this function hid a volatile read. I think it doesn't. It is genuinely weird to be able to parse documents at search time but that is how the percolator does its thing.", "author": "nik9000", "createdAt": "2020-12-16T21:35:58Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -28,19 +29,45 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-public final class MappingLookup {\n+public class MappingLookup {\n+    /**\n+     * Key for the lookup to be used in caches.\n+     */\n+    public class CacheKey {\n+        private CacheKey() {}\n+    }\n+\n+    /**\n+     * A lookup representing an empty mapping.\n+     */\n+    public static final MappingLookup EMPTY = new MappingLookup(\n+        \"_doc\",\n+        List.of(),\n+        List.of(),\n+        List.of(),\n+        List.of(),\n+        0,\n+        souceToParse -> null,\n+        false\n+    );\n+\n+    private final CacheKey cacheKey = new CacheKey();\n+\n     /** Full field name to mapper */\n     private final Map<String, Mapper> fieldMappers;\n     private final Map<String, ObjectMapper> objectMappers;\n     private final boolean hasNested;\n     private final FieldTypeLookup fieldTypeLookup;\n     private final int metadataFieldCount;\n     private final Map<String, NamedAnalyzer> indexAnalyzers = new HashMap<>();\n+    private final Function<SourceToParse, ParsedDocument> documentParser;", "originalCommit": "ed582f4e3df951b065bf415116ccdf1270484279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NjM0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547566342", "bodyText": "I also don't think it hides a volatile read, but I do find the logic hard to follow: this function uses DocumentMapper, which is a holder object with more state. For this change I think it'd be cleanest to remove this function parameter and use MapperService directly to perform parsing: mapperService.documentMapper().parse(...). Then we can figure out how to remove this as we work through the other follow-ups.", "author": "jtibshirani", "createdAt": "2020-12-23T00:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzOTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MTYwNw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547951607", "bodyText": "I am also under the impression that we could do without a function, which ends up hiding the dependency on DocumentMapper, though I like that the dependency is then on a single method rather than on all of DocumentMapper or MapperService which end up exposing much more stuff that is not needed and I would not want to end up relying on.\nI have been trying to simplify this by removing the need for the whole document mapper. I was not incredibly sure but I gave it a try with #66780 and I think we may be able to use DocumentParser directly here, which I think may make us all happier.\nFor the sake of this PR, I don't have a strong opinion but I am slightly in favour of leaving the function knowing that we have plans to replace it. If you feel strongly about mapperService.documentMapper().parse(...) I won't object ;)", "author": "javanna", "createdAt": "2020-12-23T13:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzOTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA2OTQzNg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r548069436", "bodyText": "I don't have strong feelings, given we are tracking plans to replace it! I had missed that when I tried to summarize the follow-ups.", "author": "jtibshirani", "createdAt": "2020-12-23T17:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzOTg2OA=="}], "type": "inlineReview"}, {"oid": "eed96df4f22ae8b6cf37ec2a7dae8140ee86b314", "url": "https://github.com/elastic/elasticsearch/commit/eed96df4f22ae8b6cf37ec2a7dae8140ee86b314", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-16T21:42:05Z", "type": "commit"}, {"oid": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "url": "https://github.com/elastic/elasticsearch/commit/2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "message": "We use up to field 10!", "committedDate": "2020-12-16T21:45:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1ODQzMg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546658432", "bodyText": "this can stay private right?", "author": "javanna", "createdAt": "2020-12-21T11:37:34Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -105,7 +103,7 @@ public DocumentMapper build() {\n     private final MetadataFieldMapper[] deleteTombstoneMetadataFieldMappers;\n     private final MetadataFieldMapper[] noopTombstoneMetadataFieldMappers;\n \n-    private DocumentMapper(IndexSettings indexSettings,\n+    protected DocumentMapper(IndexSettings indexSettings,", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4MzgxNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546783814", "bodyText": "Yeah, I think this is a leftover.", "author": "nik9000", "createdAt": "2020-12-21T15:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1ODQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyNTQzMg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546725432", "bodyText": "does it? we are within DocumentMapper, and we call parse on it, which calls DocumentParser#parse and passes this through. Where do we go through MapperService? I was under the impression that we always use the same DcoumentMapper instance", "author": "javanna", "createdAt": "2020-12-21T14:09:03Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java", "diffHunk": "@@ -115,13 +113,14 @@ private DocumentMapper(IndexSettings indexSettings,\n         this.documentParser = documentParser;\n         this.indexSettings = indexSettings;\n         this.indexAnalyzers = indexAnalyzers;\n-        this.fieldMappers = MappingLookup.fromMapping(this.mapping);\n \n         try {\n             mappingSource = new CompressedXContent(this, XContentType.JSON, ToXContent.EMPTY_PARAMS);\n         } catch (Exception e) {\n             throw new ElasticsearchGenerationException(\"failed to serialize source for type [\" + type + \"]\", e);\n         }\n+        // TODO this::parse performs a volatile read on mapping from MapperService. Yikes!", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NDA1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546784056", "bodyText": "Yeah. I was just realizing last week that we're ok here. I'll drop it. It is pretty tricky though!", "author": "nik9000", "createdAt": "2020-12-21T15:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyNTQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MTY2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546791663", "bodyText": "Agreed, I have some plans to maybe make it a bit better, but still, Mapping and some other stuff is needed all the way in ParseContext. I was wondering if parse does fit in MappingLookup, and I think the answer is that we don't have many alternatives. The only one I can think of is forget about percolator and let it do a volatile read, but it would be a shame in the context of this whole PR, so I think we are good.", "author": "javanna", "createdAt": "2020-12-21T16:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcyNTQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546730283", "bodyText": "I wonder if, instead of making FieldTypeLookup as well as its needed methods public, we should rather add these two/three methods to MappingLookup. I am not extremely sure, just thinking that while I like the FieldTypeLookup abstraction as it isolates dealing with field types, maybe it should not be exposed directly to consumers.", "author": "javanna", "createdAt": "2020-12-21T14:18:06Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java", "diffHunk": "@@ -124,7 +133,10 @@ MappedFieldType get(String field) {\n      *              should be a concrete field and *not* an alias.\n      * @return A set of paths in the _source that contain the field's values.\n      */\n-    Set<String> sourcePaths(String field) {\n+    public Set<String> sourcePaths(String field) {", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NDc0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546784747", "bodyText": "I'm ok either way.", "author": "nik9000", "createdAt": "2020-12-21T15:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MjEwNw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546792107", "bodyText": "I think that for instead simpleMatchtoFullName is already exposed that way, so let's do it that way and restore the original visibility of FieldTypeLookup?", "author": "javanna", "createdAt": "2020-12-21T16:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgxMzM1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546813352", "bodyText": "Sure", "author": "nik9000", "createdAt": "2020-12-21T16:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMDM4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547200386", "bodyText": "sorry I thought it was a typo", "author": "javanna", "createdAt": "2020-12-22T10:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMDI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczMTU5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546731596", "bodyText": "along the lines of what I wrote above, maybe having lookup().getFieldType(fullName) would be nicer here.", "author": "javanna", "createdAt": "2020-12-21T14:20:40Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -399,30 +398,23 @@ public DocumentMapperForType documentMapperWithAutoCreate() {\n      * Given the full name of a field, returns its {@link MappedFieldType}.\n      */\n     public MappedFieldType fieldType(String fullName) {\n-        if (fullName.equals(TypeFieldType.NAME)) {\n-            return new TypeFieldType(this.mapper == null ? \"_doc\" : this.mapper.type());\n-        }\n-        return this.mapper == null ? null : this.mapper.mappers().fieldTypes().get(fullName);\n+        return lookup().fieldTypes().get(fullName);", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNjI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546736287", "bodyText": "maybe this logic should be pushed down to FieldTypeLookup?", "author": "javanna", "createdAt": "2020-12-21T14:29:05Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -234,4 +274,116 @@ private static String parentObject(String field) {\n         }\n         return field.substring(0, lastDot);\n     }\n+\n+    public Set<String> simpleMatchToFullName(String pattern) {\n+        if (Regex.isSimpleMatchPattern(pattern) == false) {\n+            // no wildcards\n+            return Collections.singleton(pattern);\n+        }", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgxNTQyMg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546815422", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-12-21T16:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNjI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNzYxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546737615", "bodyText": "given where this is used (QueryShardContext#hasMappings) and how, I wonder if this should rather be a comparison between this and EMPTY.", "author": "javanna", "createdAt": "2020-12-21T14:31:38Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -234,4 +274,116 @@ private static String parentObject(String field) {\n         }\n         return field.substring(0, lastDot);\n     }\n+\n+    public Set<String> simpleMatchToFullName(String pattern) {\n+        if (Regex.isSimpleMatchPattern(pattern) == false) {\n+            // no wildcards\n+            return Collections.singleton(pattern);\n+        }\n+        return fieldTypes().simpleMatchToFullName(pattern);\n+    }\n+\n+    public ParsedDocument parseDocument(SourceToParse source) {\n+        return documentParser.apply(source);\n+    }\n+\n+    public boolean isEmpty() {\n+        return objectMappers.isEmpty() && fieldTypeLookup.isEmpty();", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NjYyMw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546786623", "bodyText": "I think if we go that route we'd want some protection to make sure that any code the tries to build an empty mapping would get EMPTY. It doesn't feel worth it to me but I could do it if you thought it was imporant.", "author": "nik9000", "createdAt": "2020-12-21T15:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNzYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzQyNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546793424", "bodyText": "I don't follow: hasMappings was checking if document mapper is null. You are now returning EMPTY whenever document mapper is null. What else is needed? Maybe bad naming is the cause of misunderstandings here. To me it is not about empty mappings, but rather no mappings or any mappings.", "author": "javanna", "createdAt": "2020-12-21T16:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNzYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NDM5NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546794394", "bodyText": "Yeah, maybe its bad naming. If I renamed it to, like, hasMappings or something then I think it'd be cool to check for EMPTY.", "author": "nik9000", "createdAt": "2020-12-21T16:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNzYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NjI3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546796271", "bodyText": "cool, the method that calls it is named hasMappings, in QueryShardContext", "author": "javanna", "createdAt": "2020-12-21T16:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNzYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NjU3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546796572", "bodyText": "This may be something different from the other internal usage you have introduced in FieldTypeLookup, but that one does not need a public method.", "author": "javanna", "createdAt": "2020-12-21T16:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczNzYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczODI0OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546738248", "bodyText": "want to make this a link?", "author": "javanna", "createdAt": "2020-12-21T14:32:50Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -234,4 +274,116 @@ private static String parentObject(String field) {\n         }\n         return field.substring(0, lastDot);\n     }\n+\n+    public Set<String> simpleMatchToFullName(String pattern) {\n+        if (Regex.isSimpleMatchPattern(pattern) == false) {\n+            // no wildcards\n+            return Collections.singleton(pattern);\n+        }\n+        return fieldTypes().simpleMatchToFullName(pattern);\n+    }\n+\n+    public ParsedDocument parseDocument(SourceToParse source) {\n+        return documentParser.apply(source);\n+    }\n+\n+    public boolean isEmpty() {\n+        return objectMappers.isEmpty() && fieldTypeLookup.isEmpty();\n+    }\n+\n+    public boolean isSourceEnabled() {\n+        return sourceEnabled;\n+    }\n+\n+    /**\n+     * Returns all nested object mappers which contain further nested object mappers\n+     *\n+     * Used by BitSetProducerWarmer", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NjM2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546786362", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-12-21T15:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczODI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczOTYwNw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546739607", "bodyText": "static?", "author": "javanna", "createdAt": "2020-12-21T14:35:18Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -28,19 +29,45 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-public final class MappingLookup {\n+public class MappingLookup {\n+    /**\n+     * Key for the lookup to be used in caches.\n+     */\n+    public class CacheKey {", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4Njc1MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546786750", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-12-21T15:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczOTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MjkzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546742939", "bodyText": "would it make sense to add javadoc especially as it gets used more?", "author": "javanna", "createdAt": "2020-12-21T14:41:13Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -28,19 +29,45 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-public final class MappingLookup {\n+public class MappingLookup {", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NjgwNg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546786806", "bodyText": "\ud83d\udc4d", "author": "nik9000", "createdAt": "2020-12-21T15:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MjkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MzMyNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546743324", "bodyText": "getObjectMapper is now only used in tests, let's track that as a followup?", "author": "javanna", "createdAt": "2020-12-21T14:41:56Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -132,7 +131,7 @@ public MapperService(IndexSettings indexSettings, IndexAnalyzers indexAnalyzers,\n     }\n \n     public boolean hasNested() {", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4Njg4MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546786880", "bodyText": "Oh nice!", "author": "nik9000", "createdAt": "2020-12-21T15:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MzMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MzE1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547053156", "bodyText": "+1 it'd be nice to remove a few of these methods on MapperService and reroute callers to MappingLookup. That way we won't have the same method like simpleMatchToFullName in so many places.", "author": "jtibshirani", "createdAt": "2020-12-22T03:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MzMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3ODY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547278695", "bodyText": "I did that sort of thing in my original cache busting change and it made the change too difficult to review. I'd like to save it for a follow up so we can get this one in.", "author": "nik9000", "createdAt": "2020-12-22T13:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MzMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzIwNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547403204", "bodyText": "I'm in agreement!", "author": "jtibshirani", "createdAt": "2020-12-22T17:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MzMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547955315", "bodyText": "I tried to clarify this in the meta issue: one thing is to care for consumers accessing the same snapshot, which sounds to me like a big project. Another thing is, I think, to remove duplicated methods that are exposed in multiple places (e.g. simpleMatchToFullName) and could be rather called directly retrieving MappingLookup", "author": "javanna", "createdAt": "2020-12-23T13:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc0MzMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1MzY2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546753665", "bodyText": "This is the type of change that we could make as a follow-up to keep this one contained. If we made this separately, there would probably be other things that catch our eyes in DefaultSearchContext to address with it. Also, we are not after fixing the fetch phase, so what are the gains? Could we leave the method in SearchContext for now and retrieve the MappingLookup from the MapperService in this case, and file it as a followup?", "author": "javanna", "createdAt": "2020-12-21T15:00:31Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java", "diffHunk": "@@ -111,7 +111,7 @@ public void execute(SearchContext context) {\n         SearchHit[] hits = new SearchHit[context.docIdsToLoadSize()];\n \n         List<FetchSubPhaseProcessor> processors = getProcessors(context.shardTarget(), fetchContext);\n-        NestedDocuments nestedDocuments = context.getNestedDocuments();\n+        NestedDocuments nestedDocuments = context.getQueryShardContext().getNestedDocuments();", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc2MTczOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546761739", "bodyText": "Along the same lines, I wonder: if we avoid moving the method to QueryShardContext, do we still need to migrate NestedDocuments to MappingLookup, and to consequently move the method it uses from DocumentMapper to MappingLookup? It is a good change I think, but I don't see if it's required. In fact, QueryShardContext only needs hasNested which requires no changes as it's already part of MappingLookup? Am I missing anything?", "author": "javanna", "createdAt": "2020-12-21T15:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1MzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NzYxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546787615", "bodyText": "Makes sense to me. I'll have another look. I remember it being obvious to me at the time but I think all kinds of silly things.", "author": "nik9000", "createdAt": "2020-12-21T16:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1MzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0Mzk3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547443978", "bodyText": "I've removed this change and added it as a follow up listed in #64663.", "author": "nik9000", "createdAt": "2020-12-22T18:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1MzY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1NjczNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546756734", "bodyText": "s/Analyzes/Analyzers", "author": "javanna", "createdAt": "2020-12-21T15:06:02Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java", "diffHunk": "@@ -53,20 +63,135 @@ public void testSubfieldOverride() {\n         MockFieldMapper fieldMapper = new MockFieldMapper(\"object.subfield\");\n         ObjectMapper objectMapper = new ObjectMapper(\"object\", \"object\", new Explicit<>(true, true), ObjectMapper.Nested.NO,\n             ObjectMapper.Dynamic.TRUE, Collections.singletonMap(\"object.subfield\", fieldMapper), Version.CURRENT);\n-        MappingLookup mappingLookup = new MappingLookup(Collections.singletonList(fieldMapper), Collections.singletonList(objectMapper),\n-            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"object.subfield\", \"type\")), 0);\n+        MappingLookup mappingLookup = new MappingLookup(\n+            \"_doc\",\n+            Collections.singletonList(fieldMapper),\n+            Collections.singletonList(objectMapper),\n+            Collections.emptyList(),\n+            Collections.singletonList(new TestRuntimeField(\"object.subfield\", \"type\")),\n+            0,\n+            null,\n+            false\n+        );\n         assertThat(mappingLookup.getMapper(\"object.subfield\"), instanceOf(MockFieldMapper.class));\n         assertEquals(1, size(mappingLookup.fieldMappers()));\n         assertEquals(1, mappingLookup.objectMappers().size());\n         assertThat(mappingLookup.fieldTypes().get(\"object.subfield\"), instanceOf(TestRuntimeField.class));\n         assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n     }\n \n+\n+    public void testAnalyzers() throws IOException {\n+        FakeFieldType fieldType1 = new FakeFieldType(\"field1\");\n+        FieldMapper fieldMapper1 = new FakeFieldMapper(fieldType1, \"index1\");\n+\n+        FakeFieldType fieldType2 = new FakeFieldType(\"field2\");\n+        FieldMapper fieldMapper2 = new FakeFieldMapper(fieldType2, \"index2\");\n+\n+        MappingLookup mappingLookup = new MappingLookup(\n+            \"_doc\",\n+            Arrays.asList(fieldMapper1, fieldMapper2),\n+            Collections.emptyList(),\n+            Collections.emptyList(),\n+            Collections.emptyList(),\n+            0,\n+            null,\n+            false\n+        );\n+\n+        assertAnalyzes(mappingLookup.indexAnalyzer(\"field1\", f -> null), \"field1\", \"index1\");\n+        assertAnalyzes(mappingLookup.indexAnalyzer(\"field2\", f -> null), \"field2\", \"index2\");\n+        expectThrows(IllegalArgumentException.class,\n+            () -> mappingLookup.indexAnalyzer(\"field3\", f -> {\n+                throw new IllegalArgumentException();\n+            }).tokenStream(\"field3\", \"blah\"));\n+    }\n+\n+    private void assertAnalyzes(Analyzer analyzer, String field, String output) throws IOException {", "originalCommit": "2b6fbce312c8fb54b5255a6a0ec053ce0f775f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNTY1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r546825655", "bodyText": "I think it is right as is. It is asserting that the term analyzes to the output term.", "author": "nik9000", "createdAt": "2020-12-21T17:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1NjczNA=="}], "type": "inlineReview"}, {"oid": "4621ff8d3ca63e343e0423fa6d4b3b66f501c16b", "url": "https://github.com/elastic/elasticsearch/commit/4621ff8d3ca63e343e0423fa6d4b3b66f501c16b", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-21T16:32:16Z", "type": "commit"}, {"oid": "d9c19afaf77ffd5582eac54a745f83c184d887f3", "url": "https://github.com/elastic/elasticsearch/commit/d9c19afaf77ffd5582eac54a745f83c184d887f3", "message": "Fixup", "committedDate": "2020-12-21T16:37:49Z", "type": "commit"}, {"oid": "000ea6871d63cbf9db7fd23e6b597209e2b9c7ed", "url": "https://github.com/elastic/elasticsearch/commit/000ea6871d63cbf9db7fd23e6b597209e2b9c7ed", "message": "Iter", "committedDate": "2020-12-21T16:57:10Z", "type": "commit"}, {"oid": "e151e5d14d3061727d9326b57ab49dd00a0a99bb", "url": "https://github.com/elastic/elasticsearch/commit/e151e5d14d3061727d9326b57ab49dd00a0a99bb", "message": "link to public", "committedDate": "2020-12-21T16:58:33Z", "type": "commit"}, {"oid": "de00a13b7357baf58fe2a3ff110235cfaea521c9", "url": "https://github.com/elastic/elasticsearch/commit/de00a13b7357baf58fe2a3ff110235cfaea521c9", "message": "Revert cleanup of nested", "committedDate": "2020-12-21T17:05:04Z", "type": "commit"}, {"oid": "fafa83812939474b5e443dc3512dc7fccd7bab98", "url": "https://github.com/elastic/elasticsearch/commit/fafa83812939474b5e443dc3512dc7fccd7bab98", "message": "Fix test", "committedDate": "2020-12-21T17:08:14Z", "type": "commit"}, {"oid": "4ecd7813a3980996648ed445d0a9070c1f269fca", "url": "https://github.com/elastic/elasticsearch/commit/4ecd7813a3980996648ed445d0a9070c1f269fca", "message": "Finish reverting nested change", "committedDate": "2020-12-21T17:20:04Z", "type": "commit"}, {"oid": "6ef65a7e048704580c48e20c0a03e996776e636b", "url": "https://github.com/elastic/elasticsearch/commit/6ef65a7e048704580c48e20c0a03e996776e636b", "message": "Checkstyle, you loveable scamp", "committedDate": "2020-12-21T17:21:43Z", "type": "commit"}, {"oid": "4fc3ed96ac66294ce3d00c183c7dfdc94cd87224", "url": "https://github.com/elastic/elasticsearch/commit/4fc3ed96ac66294ce3d00c183c7dfdc94cd87224", "message": "Probably not neeeded", "committedDate": "2020-12-21T17:23:54Z", "type": "commit"}, {"oid": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "url": "https://github.com/elastic/elasticsearch/commit/07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "message": "Revert moar", "committedDate": "2020-12-21T17:32:22Z", "type": "commit"}, {"oid": "dcfdf441b03dacaa0c9fea9bd49d7f6a4c833ac5", "url": "https://github.com/elastic/elasticsearch/commit/dcfdf441b03dacaa0c9fea9bd49d7f6a4c833ac5", "message": "Document not fixed issue", "committedDate": "2020-12-21T22:50:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0ODYyOA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547048628", "bodyText": "\"snapshot current mapping\" -> \"snapshot of the current mapping\"", "author": "jtibshirani", "createdAt": "2020-12-22T03:35:44Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -28,19 +28,49 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-public final class MappingLookup {\n+/**\n+ * A (mostly) immutable snapshot current mapping of an index with access", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1OTE0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547259145", "bodyText": "6736482", "author": "nik9000", "createdAt": "2020-12-22T12:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0ODYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0ODgwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547048801", "bodyText": "souceToParse -> sourceToParse", "author": "jtibshirani", "createdAt": "2020-12-22T03:36:19Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MappingLookup.java", "diffHunk": "@@ -28,19 +28,49 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-public final class MappingLookup {\n+/**\n+ * A (mostly) immutable snapshot current mapping of an index with access\n+ * to everything we need for the search phase.\n+ */\n+public class MappingLookup {\n+    /**\n+     * Key for the lookup to be used in caches.\n+     */\n+    public static class CacheKey {\n+        private CacheKey() {}\n+    }\n+\n+    /**\n+     * A lookup representing an empty mapping.\n+     */\n+    public static final MappingLookup EMPTY = new MappingLookup(\n+        \"_doc\",\n+        List.of(),\n+        List.of(),\n+        List.of(),\n+        List.of(),\n+        0,\n+        souceToParse -> null,", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3OTUyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547279529", "bodyText": "d479591", "author": "nik9000", "createdAt": "2020-12-22T13:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0ODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0OTY5MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547049690", "bodyText": "Should we be removing this final?", "author": "jtibshirani", "createdAt": "2020-12-22T03:40:07Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java", "diffHunk": "@@ -309,7 +309,7 @@ protected void doXContentBody(XContentBuilder builder, boolean includeDefaults,\n \n     protected abstract String contentType();\n \n-    public final Map<String, NamedAnalyzer> indexAnalyzers() {\n+    public Map<String, NamedAnalyzer> indexAnalyzers() {", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1OTYyNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547259624", "bodyText": "I needed it to handle the mocking. It looks like you suggested in another spot to use MockFieldMapper which should let me avoid it.", "author": "nik9000", "createdAt": "2020-12-22T12:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0OTY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MjE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547262153", "bodyText": "65962e2", "author": "nik9000", "createdAt": "2020-12-22T12:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0OTY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MTQ3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547051479", "bodyText": "It's too bad we're adding back a type parameter here, but I see you're just moving existing logic around. Hopefully we'll be able to remove this from master soon as part of the types removal effort.", "author": "jtibshirani", "createdAt": "2020-12-22T03:47:56Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/FieldTypeLookup.java", "diffHunk": "@@ -43,11 +44,16 @@\n      * For convenience, the set of copied fields includes the field itself.\n      */\n     private final Map<String, Set<String>> fieldToCopiedFields = new HashMap<>();\n+    private final String type;\n     private final DynamicKeyFieldTypeLookup dynamicKeyLookup;\n \n-    FieldTypeLookup(Collection<FieldMapper> fieldMappers,\n-                    Collection<FieldAliasMapper> fieldAliasMappers,\n-                    Collection<RuntimeFieldType> runtimeFieldTypes) {\n+    FieldTypeLookup(", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MDE1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547350157", "bodyText": "indeed, this looks odd, I am sure Alan would not like it :) at the same time, I don't see an alternative for now. Would be nice to remove DocumentMapper#type as least but there are other usages of it. And given types will be completely removed, we are sure this will go away.", "author": "javanna", "createdAt": "2020-12-22T15:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MTQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MzU2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547053562", "bodyText": "I noticed some other places where we still refer to this.mapper.mappers() directly, for example getEagerGlobalOrdinalsFields. Should we switch these onto mappingLookup() too?", "author": "jtibshirani", "createdAt": "2020-12-22T03:55:22Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -399,30 +398,23 @@ public DocumentMapperForType documentMapperWithAutoCreate() {\n      * Given the full name of a field, returns its {@link MappedFieldType}.\n      */\n     public MappedFieldType fieldType(String fullName) {\n-        if (fullName.equals(TypeFieldType.NAME)) {\n-            return new TypeFieldType(this.mapper == null ? \"_doc\" : this.mapper.type());\n-        }\n-        return this.mapper == null ? null : this.mapper.mappers().fieldTypes().get(fullName);", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNDM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547204381", "bodyText": "let's track this as a follow-up so we can keep this change as contained as possible?", "author": "javanna", "createdAt": "2020-12-22T10:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3ODI5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547278295", "bodyText": "Given how folks received my last attempt at this I wanted to keep my change as small as I could manage. I think it is correct to switch them all to mappingLookup and my instinct is to do it now, while I'm here. But I don't want to make this harder to review.", "author": "nik9000", "createdAt": "2020-12-22T13:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0MzQ4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547343483", "bodyText": "I think that would not only make it harder to review, but it would make the PR bigger by making changes that are not strictly necessary. I think we should totally do it, but as a follow-up which is not going to be backported to 7.11", "author": "javanna", "createdAt": "2020-12-22T15:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MzU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NzAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547387039", "bodyText": "It works for me to do it in a follow-up.", "author": "jtibshirani", "createdAt": "2020-12-22T16:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1MzU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjM3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547056379", "bodyText": "I wonder if we could just use MockFieldMapper here instead of using mockito? It's pretty widely used.", "author": "jtibshirani", "createdAt": "2020-12-22T04:06:32Z", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MappingLookupUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+import org.elasticsearch.index.mapper.FieldMapper.CopyTo;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MappingLookupUtils {\n+    public static MappingLookup fromTypes(MappedFieldType... types) {\n+        return fromTypes(Arrays.stream(types));\n+    }\n+    \n+    public static MappingLookup fromTypes(Stream<MappedFieldType> types) {\n+        List<FieldMapper> mappers = types.map(MappingLookupUtils::mockFieldMapper).collect(toList());\n+        //  Alias <name>-alias to <name> so we can test aliases\n+        return new MappingLookup(\n+            \"_doc\",\n+            mappers,\n+            List.of(),\n+            List.of(),\n+            List.of(),\n+            0,\n+            souceToParse -> null,\n+            true\n+        );\n+    }\n+\n+    public static FieldMapper mockFieldMapper(MappedFieldType type) {\n+        FieldMapper mapper = mock(FieldMapper.class);", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNzY2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547217667", "bodyText": "++", "author": "javanna", "createdAt": "2020-12-22T11:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MjMzNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547262334", "bodyText": "65962e2", "author": "nik9000", "createdAt": "2020-12-22T12:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjUyNw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547056527", "bodyText": "souceToParse -> sourceToParse", "author": "jtibshirani", "createdAt": "2020-12-22T04:07:01Z", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -227,38 +225,41 @@ protected AggregationContext createAggregationContext(IndexSearcher indexSearche\n          */\n         BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), breakerService).withCircuitBreaking();\n \n-        // TODO: now just needed for top_hits, this will need to be revised for other agg unit tests:\n-        MapperService mapperService = mock(MapperService.class);\n-        when(mapperService.getIndexSettings()).thenReturn(indexSettings);\n-        when(mapperService.hasNested()).thenReturn(false);\n-        when(mapperService.indexAnalyzer(anyString(), any())).thenReturn(Lucene.STANDARD_ANALYZER); // for significant text\n-        for (MappedFieldType type : fieldTypes) {\n-            String name = type.name();\n-            when(mapperService.fieldType(name)).thenReturn(type);\n-            // Alias each field to <name>-alias so everyone can test aliases\n-            when(mapperService.fieldType(name + \"-alias\")).thenReturn(type);\n-        }\n-        when(mapperService.getObjectMapper(anyString())).thenAnswer(invocation -> {\n-            String fieldName = (String) invocation.getArguments()[0];\n-            if (fieldName.startsWith(NESTEDFIELD_PREFIX)) {\n-                return new ObjectMapper.Builder(fieldName, Version.CURRENT).nested(Nested.newNested()).build(new ContentPath());\n-            }\n-            return null;\n-        });\n+        MappingLookup mappingLookup = new MappingLookup(\n+            \"_doc\",\n+            Arrays.stream(fieldTypes).map(MappingLookupUtils::mockFieldMapper).collect(toList()),\n+            objectMappers(),\n+            // Alias all fields to <name>-alias to test aliases\n+            Arrays.stream(fieldTypes)\n+                .map(ft -> new FieldAliasMapper(ft.name() + \"-alias\", ft.name() + \"-alias\", ft.name()))\n+                .collect(toList()),\n+            List.of(),\n+            0,\n+            souceToParse -> null,", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MjY0OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547262648", "bodyText": "0f4adcc", "author": "nik9000", "createdAt": "2020-12-22T12:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NjUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NDM0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547074342", "bodyText": "Thanks for adding this clarifying comment.", "author": "jtibshirani", "createdAt": "2020-12-22T05:23:06Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java", "diffHunk": "@@ -128,6 +129,15 @@ BytesReference getOrCompute(CacheEntity cacheEntity, CheckedSupplier<BytesRefere\n                     ElasticsearchDirectoryReader.addReaderCloseListener(reader, cleanupKey);\n                 }\n             }\n+            /*\n+             * note that we don't use a closed listener for the mapping. Instead", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzM3MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547207370", "bodyText": "do we still need this TODO considering that you opened an issue about it?", "author": "javanna", "createdAt": "2020-12-22T10:50:23Z", "path": "server/src/main/java/org/elasticsearch/index/mapper/MapperService.java", "diffHunk": "@@ -504,6 +485,7 @@ public boolean isMetadataField(String field) {\n                 reloadedAnalyzers.add(analyzerName);\n             }\n         }\n+        // TODO this should make a new MappingLookup to bust the cache", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MzM4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547263383", "bodyText": "I kind of like having the TODO just for folks reading the code to bump into the issue. I've added the issue url to it.", "author": "nik9000", "createdAt": "2020-12-22T12:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzYyMA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547213620", "bodyText": "testMappingLookup?", "author": "javanna", "createdAt": "2020-12-22T11:03:36Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java", "diffHunk": "@@ -46,6 +47,17 @@ public void testPreflightUpdateDoesNotChangeMapping() throws Throwable {\n         assertThat(\"field was not created by mapping update\", mapperService.fieldType(\"field0\"), notNullValue());\n     }\n \n+    public void testLookup() throws IOException {", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MzcwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547263705", "bodyText": "7b7cc27", "author": "nik9000", "createdAt": "2020-12-22T12:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODE4MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547218180", "bodyText": "The way that this is used looks suspicious to me. I see it being used with runtime fields, which don't have a corresponding mapper normally. With this method they end up being exposed as ordinary fields to tests?", "author": "javanna", "createdAt": "2020-12-22T11:13:47Z", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MappingLookupUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+import org.elasticsearch.index.mapper.FieldMapper.CopyTo;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MappingLookupUtils {\n+    public static MappingLookup fromTypes(MappedFieldType... types) {\n+        return fromTypes(Arrays.stream(types));\n+    }\n+    \n+    public static MappingLookup fromTypes(Stream<MappedFieldType> types) {\n+        List<FieldMapper> mappers = types.map(MappingLookupUtils::mockFieldMapper).collect(toList());\n+        //  Alias <name>-alias to <name> so we can test aliases\n+        return new MappingLookup(\n+            \"_doc\",\n+            mappers,\n+            List.of(),\n+            List.of(),\n+            List.of(),\n+            0,\n+            souceToParse -> null,\n+            true\n+        );\n+    }\n+\n+    public static FieldMapper mockFieldMapper(MappedFieldType type) {", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODYwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547218609", "bodyText": "There should be a separate code-path for creating runtime fields, that only provides them to MappingLookup without them causing the creation of field mappers.", "author": "javanna", "createdAt": "2020-12-22T11:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MDA5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547270092", "bodyText": "QueryShardContextTests has been doing that sort of thing for a month or so now. We didn't have runtime fields without the MappedFieldType back then. I've pushed 83f9f30 to fork off runtime fields. I'm not a huge fan of the instanceof that it adds but it seems like a useful thing for testing.", "author": "nik9000", "createdAt": "2020-12-22T13:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMDM3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547220377", "bodyText": "how bad would you feel about leaving this test as-is, and simply providing mapperService.mappingLookup() to the query shard context constructor? Would that work? I figured we'll get back to this anyways once we work on NestedDocuments access.", "author": "javanna", "createdAt": "2020-12-22T11:18:36Z", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -227,38 +225,41 @@ protected AggregationContext createAggregationContext(IndexSearcher indexSearche\n          */\n         BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), breakerService).withCircuitBreaking();\n \n-        // TODO: now just needed for top_hits, this will need to be revised for other agg unit tests:\n-        MapperService mapperService = mock(MapperService.class);\n-        when(mapperService.getIndexSettings()).thenReturn(indexSettings);\n-        when(mapperService.hasNested()).thenReturn(false);\n-        when(mapperService.indexAnalyzer(anyString(), any())).thenReturn(Lucene.STANDARD_ANALYZER); // for significant text\n-        for (MappedFieldType type : fieldTypes) {\n-            String name = type.name();\n-            when(mapperService.fieldType(name)).thenReturn(type);\n-            // Alias each field to <name>-alias so everyone can test aliases\n-            when(mapperService.fieldType(name + \"-alias\")).thenReturn(type);\n-        }\n-        when(mapperService.getObjectMapper(anyString())).thenAnswer(invocation -> {\n-            String fieldName = (String) invocation.getArguments()[0];\n-            if (fieldName.startsWith(NESTEDFIELD_PREFIX)) {\n-                return new ObjectMapper.Builder(fieldName, Version.CURRENT).nested(Nested.newNested()).build(new ContentPath());\n-            }\n-            return null;\n-        });\n+        MappingLookup mappingLookup = new MappingLookup(\n+            \"_doc\",\n+            Arrays.stream(fieldTypes).map(MappingLookupUtils::mockFieldMapper).collect(toList()),\n+            objectMappers(),\n+            // Alias all fields to <name>-alias to test aliases\n+            Arrays.stream(fieldTypes)\n+                .map(ft -> new FieldAliasMapper(ft.name() + \"-alias\", ft.name() + \"-alias\", ft.name()))\n+                .collect(toList()),\n+            List.of(),\n+            0,\n+            souceToParse -> null,\n+            true\n+        );\n \n         TriFunction<MappedFieldType, String, Supplier<SearchLookup>, IndexFieldData<?>> fieldDataBuilder = (\n             fieldType,\n             s,\n-            searchLookup) -> fieldType.fielddataBuilder(mapperService.getIndexSettings().getIndex().getName(), searchLookup)\n+            searchLookup) -> fieldType.fielddataBuilder(indexSettings.getIndex().getName(), searchLookup)\n                 .build(new IndexFieldDataCache.None(), breakerService);\n+        BitsetFilterCache bitsetFilterCache = new BitsetFilterCache(indexSettings, new BitsetFilterCache.Listener() {", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTc3NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547271774", "bodyText": "I didn't mock MappingLookup at first because we were exposing FieldTypeLookup and it would have made mocks returning mocks which would have been a pain. So I ended up doing this to use the \"real\" stuff because it was just a ton of work to mock.\nI guess at this point we don't need to keep them because we are routing everything through MappingLookup but they were a pain to get right so I'd like to keep them. But if you are really uncomfortable with them I could try and fork them out and get them back in.", "author": "nik9000", "createdAt": "2020-12-22T13:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMDM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MjMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547272301", "bodyText": "I couldn't keep the test as is though - I'd have to mock MappingLookup instead of MapperService i believe.", "author": "nik9000", "createdAt": "2020-12-22T13:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMDM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMjQzMw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547222433", "bodyText": "these changes are great. They make what tests do much more readable, and also allow us to only plug in the needed behaviour. Before the field type lookup would always return the same field type regardless of the provided field name, which is not so easy to follow.", "author": "javanna", "createdAt": "2020-12-22T11:23:33Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/SecurityIndexReaderWrapperIntegrationTests.java", "diffHunk": "@@ -182,15 +173,12 @@ protected IndicesAccessControl getIndicesAccessControl() {\n \n     public void testDLSWithLimitedPermissions() throws Exception {\n         ShardId shardId = new ShardId(\"_index\", \"_na_\", 0);\n-        MapperService mapperService = mock(MapperService.class);\n-        ScriptService  scriptService = mock(ScriptService.class);\n-        when(mapperService.documentMapper()).thenReturn(null);\n-        when(mapperService.simpleMatchToFullName(anyString()))\n-                .then(invocationOnMock -> Collections.singletonList((String) invocationOnMock.getArguments()[0]));\n-        when(mapperService.fieldType(Mockito.anyString())).then(invocation -> {\n-            final String fieldName = (String) invocation.getArguments()[0];\n-            return new KeywordFieldMapper.KeywordFieldType(fieldName);\n-        });\n+        MappingLookup mappingLookup = MappingLookupUtils.fromTypes(\n+            new KeywordFieldType(\"field\"),\n+            new KeywordFieldType(\"f1\"),\n+            new KeywordFieldType(\"f2\")\n+        );", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMzYzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547223639", "bodyText": "This one throws me off: why do we need to mock hasNested now compared to before? It looks to me that these test changes are not strictly required and could be made as a follow-up. But I am probably missing something.", "author": "javanna", "createdAt": "2020-12-22T11:26:08Z", "path": "test/framework/src/main/java/org/elasticsearch/search/aggregations/AggregatorTestCase.java", "diffHunk": "@@ -325,11 +333,13 @@ public boolean shouldCache(Query query) {\n         }\n         when(ctx.fetchPhase()).thenReturn(new FetchPhase(Arrays.asList(new FetchSourcePhase(), new FetchDocValuesPhase())));\n         when(ctx.getQueryShardContext()).thenReturn(queryShardContext);\n-        NestedDocuments nestedDocuments = new NestedDocuments(mapperService, bitsetFilterCache::getBitSetProducer);\n-        when(ctx.getNestedDocuments()).thenReturn(nestedDocuments);\n         IndexShard indexShard = mock(IndexShard.class);\n         when(indexShard.shardId()).thenReturn(new ShardId(\"test\", \"test\", 0));\n         when(ctx.indexShard()).thenReturn(indexShard);\n+        MapperService mapperService = mock(MapperService.class);\n+        when(mapperService.hasNested()).thenReturn(false);", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3Mjc2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547272761", "bodyText": "This is because the agg tests never want to try and fetch nested hits but are quite happy to do the aggs on them. Its weird but this funny dance keeps them working the way they were before.", "author": "nik9000", "createdAt": "2020-12-22T13:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMzYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4NDkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547284923", "bodyText": "Previously we bumped into this behavior because of the defaults of mockito - it returns false unless you tell it otherwise. So I'm making this explicit....", "author": "nik9000", "createdAt": "2020-12-22T13:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMzYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzOTE5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547339197", "bodyText": "I see makes sense", "author": "javanna", "createdAt": "2020-12-22T15:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMzYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMDYwMA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547230600", "bodyText": "shouldn't we add mappingCacheKey to hashcode as well? Maybe we should expand IndicesRequestCacheTests so that it catches this?", "author": "javanna", "createdAt": "2020-12-22T11:42:05Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java", "diffHunk": "@@ -236,7 +248,8 @@ public boolean equals(Object o) {\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Key key = (Key) o;\n-            if (Objects.equals(readerCacheKey, key.readerCacheKey) == false) return false;\n+            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3Mjk5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547272992", "bodyText": "I'm not sure how I managed to miss that. I'll do it.", "author": "nik9000", "createdAt": "2020-12-22T13:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3NzIxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547277219", "bodyText": "78d5b33", "author": "nik9000", "createdAt": "2020-12-22T13:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMDYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTA4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547231085", "bodyText": "could we simply use an empty mapping lookup here instead of calling fromTypes without providing any type?", "author": "javanna", "createdAt": "2020-12-22T11:43:20Z", "path": "server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java", "diffHunk": "@@ -198,13 +203,93 @@ public void testCacheDifferentReaders() throws Exception {\n         assertEquals(0, requestCacheStats.stats().getEvictions());\n         assertTrue(loader.loadedFromCache);\n         assertEquals(0, cache.count());\n-        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n+        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n \n         IOUtils.close(secondReader, writer, dir, cache);\n         assertEquals(0, cache.numRegisteredCloseListeners());\n     }\n \n+    public void testCacheDifferentMapping() throws Exception {\n+        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n+        MappingLookup.CacheKey mappingKey1 = MappingLookupUtils.fromTypes().cacheKey();\n+        MappingLookup.CacheKey mappingKey2 = MappingLookupUtils.fromTypes().cacheKey();", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3NjY2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547276669", "bodyText": "We could use it for one of the keys I guess but I wanted distinct cache keys for both keys and this manages it.", "author": "nik9000", "createdAt": "2020-12-22T13:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzOTQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547339475", "bodyText": "oh boy you are right.", "author": "javanna", "createdAt": "2020-12-22T15:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTY0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547235642", "bodyText": "maybe I only need to get used to this approach, but I wonder if it is necessary to carry around this additional cache key. I guess it is no option to make it become part of the existing cacheKey that the request exposes or something along these lines?", "author": "javanna", "createdAt": "2020-12-22T11:54:27Z", "path": "server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java", "diffHunk": "@@ -603,15 +613,19 @@ public BigArrays bigArrays() {  // TODO this is only used in agg land, maybe rem\n         return bigArrays;\n     }\n \n-    private static Map<String, MappedFieldType> parseRuntimeMappings(\n-        Map<String, Object> runtimeMappings,\n-        MapperService mapperService\n-    ) {\n+    private static Map<String, MappedFieldType> parseRuntimeMappings(Map<String, Object> runtimeMappings, MapperService mapperService) {\n         Map<String, MappedFieldType> runtimeFieldTypes = new HashMap<>();\n         if (runtimeMappings.isEmpty() == false) {\n             RuntimeFieldType.parseRuntimeFields(new HashMap<>(runtimeMappings), mapperService.parserContext(),\n                 runtimeFieldType -> runtimeFieldTypes.put(runtimeFieldType.name(), runtimeFieldType));\n         }\n         return Collections.unmodifiableMap(runtimeFieldTypes);\n     }\n+\n+    /**\n+     * Cache key for current mapping.\n+     */\n+    public MappingLookup.CacheKey mappingCacheKey() {\n+        return mappingLookup.cacheKey();", "originalCommit": "07c74b37ed7fbc137c5bef587a108289bb0fb7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3NjIyNA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547276224", "bodyText": "I have to carry it around somewhere for us be able to assert on it. Originally I was using a Writeable key and inserting it into the request's cache key. When I was just writing a long it was fine but writing the whole mapping was quite big. And it was incomplete because we couldn't possibly handle analyzer reloading. Using the dummy object is nicer because it is smaller and can handle the analyzer reloading.\nBut, yeah, there is a fair bit of plumbing to get it to a better spot. What were you thinking?", "author": "nik9000", "createdAt": "2020-12-22T13:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0MjEzOA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547342138", "bodyText": "I will defer to @jtibshirani on this. I don't have any specific idea, just noticing that while this approach has advantages, it does require some additional plumbing and complexity. Maybe it's the right compromise though. I will drop another question: do we need to worry about hash collisions?", "author": "javanna", "createdAt": "2020-12-22T15:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NTQ1OA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547345458", "bodyText": "I will drop another question: do we need to worry about hash collisions?\n\nWhen we last talked with @jpountz he said something along the lines of \"I don't want to ever has to double check that we're not getting a hash collision when helping someone debug something.\" The resonated with me. Hash collisions aren't likely at all but it gives us a nice piece of mind at a fairly low cost. We'd have to plumb something through anyway, I think. Going this way does require all those changes to the IndicesRequestCache but they weren't too bad. Probably worth the peace of mind.", "author": "nik9000", "createdAt": "2020-12-22T15:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwOTc2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547409763", "bodyText": "I liked how this matched our approach for incorporating DirectoryReader into the cache key. We use a dedicated object reference, instead of keying on the actual content of MappingLookup. Specifically, we're not keying on a hash, so we shouldn't need to handle hash collisions ourself.\nI suggested this approach as an option, but not an expert in this caching code and would be happy if you wanted to check with someone more familiar!", "author": "jtibshirani", "createdAt": "2020-12-22T17:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTY0Mg=="}], "type": "inlineReview"}, {"oid": "67364828c4273a83df8ad074fdf6115bb8461cd0", "url": "https://github.com/elastic/elasticsearch/commit/67364828c4273a83df8ad074fdf6115bb8461cd0", "message": "words are hard", "committedDate": "2020-12-22T12:51:23Z", "type": "commit"}, {"oid": "65962e2fdd083fb54ac8ef53425216475cecc0dc", "url": "https://github.com/elastic/elasticsearch/commit/65962e2fdd083fb54ac8ef53425216475cecc0dc", "message": "Switch to MockFieldMapper", "committedDate": "2020-12-22T12:57:51Z", "type": "commit"}, {"oid": "0f4adcca0e78c0889b172a9d91d6a4ee838157bb", "url": "https://github.com/elastic/elasticsearch/commit/0f4adcca0e78c0889b172a9d91d6a4ee838157bb", "message": "Speeling", "committedDate": "2020-12-22T12:59:15Z", "type": "commit"}, {"oid": "068e67d02a1861698d63411824eb7053e513753f", "url": "https://github.com/elastic/elasticsearch/commit/068e67d02a1861698d63411824eb7053e513753f", "message": "Add link in todo", "committedDate": "2020-12-22T13:00:24Z", "type": "commit"}, {"oid": "7b7cc2786da39c1e5e81435cbec1b5ed4cb15b07", "url": "https://github.com/elastic/elasticsearch/commit/7b7cc2786da39c1e5e81435cbec1b5ed4cb15b07", "message": "Finish rename", "committedDate": "2020-12-22T13:01:29Z", "type": "commit"}, {"oid": "83f9f30acfe3557643603d00444fd05ff48a1c42", "url": "https://github.com/elastic/elasticsearch/commit/83f9f30acfe3557643603d00444fd05ff48a1c42", "message": "Special handling of runtime fields", "committedDate": "2020-12-22T13:14:13Z", "type": "commit"}, {"oid": "fc89ecbcb171eb9b5c60a6b6721ee6fb570bf91c", "url": "https://github.com/elastic/elasticsearch/commit/fc89ecbcb171eb9b5c60a6b6721ee6fb570bf91c", "message": "Extra casting", "committedDate": "2020-12-22T13:15:21Z", "type": "commit"}, {"oid": "78d5b334f2526363f58dc35fd343239bd3225c48", "url": "https://github.com/elastic/elasticsearch/commit/78d5b334f2526363f58dc35fd343239bd3225c48", "message": "equals and hashcode for the key", "committedDate": "2020-12-22T13:30:16Z", "type": "commit"}, {"oid": "d4795914b6dc5f888466e583ae22c0c85771c203", "url": "https://github.com/elastic/elasticsearch/commit/d4795914b6dc5f888466e583ae22c0c85771c203", "message": "Speeling", "committedDate": "2020-12-22T13:35:24Z", "type": "commit"}, {"oid": "86575731d7c8c3e7b4732c593f8455c336cd9e88", "url": "https://github.com/elastic/elasticsearch/commit/86575731d7c8c3e7b4732c593f8455c336cd9e88", "message": "Start your paragraph with a capital letter", "committedDate": "2020-12-22T13:39:26Z", "type": "commit"}, {"oid": "50ca0ef12bed7ee379ec91ba9a6c90553807bda8", "url": "https://github.com/elastic/elasticsearch/commit/50ca0ef12bed7ee379ec91ba9a6c90553807bda8", "message": "Not null", "committedDate": "2020-12-22T13:43:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4MjIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547282206", "bodyText": "This isn't strictly required but the old method is deprecated and I figured I'd clean it up while I was here.", "author": "nik9000", "createdAt": "2020-12-22T13:38:15Z", "path": "server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java", "diffHunk": "@@ -80,14 +85,14 @@ public void testBasicOperationsCache() throws Exception {\n         // cache hit\n         entity = new TestEntity(requestCacheStats, indexShard);\n         loader = new Loader(reader, 0);\n-        value = cache.getOrCompute(entity, loader, reader, termBytes);\n+        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n         assertEquals(\"foo\", value.streamInput().readString());\n         assertEquals(1, requestCacheStats.stats().getHitCount());\n         assertEquals(1, requestCacheStats.stats().getMissCount());\n         assertEquals(0, requestCacheStats.stats().getEvictions());\n         assertTrue(loader.loadedFromCache);\n         assertEquals(1, cache.count());\n-        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n+        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());", "originalCommit": "78d5b334f2526363f58dc35fd343239bd3225c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "551ce49d863443b9d0e4cbd847b8fc81f0f6e9d6", "url": "https://github.com/elastic/elasticsearch/commit/551ce49d863443b9d0e4cbd847b8fc81f0f6e9d6", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-22T15:35:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1Mzg2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547353866", "bodyText": "was this change necessary?", "author": "javanna", "createdAt": "2020-12-22T15:50:31Z", "path": "server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java", "diffHunk": "@@ -236,7 +248,8 @@ public boolean equals(Object o) {\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Key key = (Key) o;\n-            if (Objects.equals(readerCacheKey, key.readerCacheKey) == false) return false;\n+            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;\n+            if (readerCacheKey.equals(key.readerCacheKey) == false) return false;", "originalCommit": "50ca0ef12bed7ee379ec91ba9a6c90553807bda8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5ODQ5MA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547398490", "bodyText": "I mean, I had to add the line above it and we didn't need null handling. So, no I could revert it, but it feels nice to have the two lines \"line up\". I could use Objects.equals in the new code too, but the but the mappingCacheKey can't be null so it'd confuse me when I go to read it later.", "author": "nik9000", "createdAt": "2020-12-22T17:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1Mzg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MjEwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547362105", "bodyText": "we have EqualsHashCodeTestUtils, not sure it's worth using it here", "author": "javanna", "createdAt": "2020-12-22T16:05:20Z", "path": "server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java", "diffHunk": "@@ -441,19 +532,51 @@ public void testEqualsKey() throws IOException {\n         IndexReader reader2 = DirectoryReader.open(writer);\n         IndexReader.CacheKey rKey2 = reader2.getReaderCacheHelper().getKey();\n         IOUtils.close(reader1, reader2, writer, dir);\n-        IndicesRequestCache.Key key1 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey1, new TestBytesReference(1));\n-        IndicesRequestCache.Key key2 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey1, new TestBytesReference(1));\n-        IndicesRequestCache.Key key3 = new IndicesRequestCache.Key(new TestEntity(null, falseBoolean), rKey1, new TestBytesReference(1));\n-        IndicesRequestCache.Key key4 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey2, new TestBytesReference(1));\n-        IndicesRequestCache.Key key5 = new IndicesRequestCache.Key(new TestEntity(null, trueBoolean), rKey1, new TestBytesReference(2));\n-        String s = \"Some other random object\";\n-        assertEquals(key1, key1);\n+        List<IndicesRequestCache.Key> keys = new ArrayList<>();\n+        for (AtomicBoolean bool : new AtomicBoolean[] { trueBoolean, falseBoolean }) {\n+            for (MappingLookup.CacheKey mKey : new MappingLookup.CacheKey[] { mKey1, mKey2 }) {\n+                for (IndexReader.CacheKey rKey : new IndexReader.CacheKey[] { rKey1, rKey2 }) {\n+                    for (BytesReference requestKey : new BytesReference[] { new TestBytesReference(1), new TestBytesReference(2) }) {\n+                        keys.add(new IndicesRequestCache.Key(new TestEntity(null, bool), mKey, rKey, requestKey));\n+                    }\n+                }\n+            }\n+        }\n+        for (IndicesRequestCache.Key key : keys) {\n+            assertNotEquals(key, null);\n+            assertNotEquals(key, \"Some other random object\");\n+        }\n+        for (IndicesRequestCache.Key key1 : keys) {\n+            assertNotEquals(key1, null);\n+            for (IndicesRequestCache.Key key2 : keys) {\n+                if (key1 == key2) {\n+                    assertEquals(key1, key2);\n+                    assertEquals(key1.hashCode(), key2.hashCode());", "originalCommit": "50ca0ef12bed7ee379ec91ba9a6c90553807bda8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5Mzc2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547393766", "bodyText": "Me neither given that we already had all this stuff to test it.", "author": "nik9000", "createdAt": "2020-12-22T17:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MjEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NzIzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547377239", "bodyText": "not a fan of this if either. I would rather do one of the following two things:\n\n\nsubclass MappingLookup and override only the needed methods, that way we don't have to create a field mapper at all. not sure if till work everywhere, but it's what were previously doing in QueryShardContextTests.\n\n\nhave a different method that accepts RuntimeFieldTypes. Along these lines I was wondering if the following method needs to be public, and if the analyzers logic is needed in all the callers or should be rather be pushed to the callers that need it, in which case we could make callers provide field mappers instead of mapped field types as they'd only need to do  new MockFieldMapper(fieldType).", "author": "javanna", "createdAt": "2020-12-22T16:33:33Z", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MappingLookupUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import org.elasticsearch.index.analysis.NamedAnalyzer;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class MappingLookupUtils {\n+    public static MappingLookup fromTypes(MappedFieldType... types) {\n+        return fromTypes(Arrays.asList(types));\n+    }\n+\n+    public static MappingLookup fromTypes(List<MappedFieldType> fields) {\n+        List<FieldMapper> mappers = new ArrayList<>();\n+        List<RuntimeFieldType> runtimeFields = new ArrayList<>();\n+        for (MappedFieldType type : fields) {\n+            if (type instanceof RuntimeFieldType) {\n+                runtimeFields.add((RuntimeFieldType) type);\n+            } else {\n+                mappers.add(mockFieldMapper(type));\n+            }", "originalCommit": "50ca0ef12bed7ee379ec91ba9a6c90553807bda8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMDQzMw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547400433", "bodyText": "I think it'd be pretty fair to move the analyzers change into MockFieldMapper. It is weird if the analyzers don't line up with the MappedFieldType's analyzers. Sort of a \"testing is weird\" thing.\nI don't much like the subclassing idea because MappedFieldType does a lot of stuff when we build it and I kind of think we should let it keep doing it. I'd be all for simplifying that stuff, I guess, but as it stands now I like using it raw. I'm quite happy pass two lists to this method.", "author": "nik9000", "createdAt": "2020-12-22T17:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNjg4NA==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547406884", "bodyText": "Doing the two lists works well.\nI'm going to investigate who needs the analyzers. Its weird not to have any analyzers if the field type you are using has some. But it is kind of also weird to copy the ones from the search analyzer.", "author": "nik9000", "createdAt": "2020-12-22T17:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MDMzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547440331", "bodyText": "I think I've pushed a working version that isolates the analyzer bit to just the test that needs it.", "author": "nik9000", "createdAt": "2020-12-22T18:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3NzIzOQ=="}], "type": "inlineReview"}, {"oid": "465e6a649b51ddd58e6bca20cc317bff92bc0963", "url": "https://github.com/elastic/elasticsearch/commit/465e6a649b51ddd58e6bca20cc317bff92bc0963", "message": "Try this", "committedDate": "2020-12-22T17:45:06Z", "type": "commit"}, {"oid": "caba1497e62a25915b96505b02528c2f79565b4d", "url": "https://github.com/elastic/elasticsearch/commit/caba1497e62a25915b96505b02528c2f79565b4d", "message": "Merge branch 'master' into cache_bust_take_two", "committedDate": "2020-12-23T14:04:24Z", "type": "commit"}, {"oid": "27eef8b884a127a2ccfc0f0e9ff881186e608354", "url": "https://github.com/elastic/elasticsearch/commit/27eef8b884a127a2ccfc0f0e9ff881186e608354", "message": "Update cache invalidation", "committedDate": "2020-12-23T14:17:03Z", "type": "commit"}, {"oid": "629f510ea9db1212df07531509b098766703bc27", "url": "https://github.com/elastic/elasticsearch/commit/629f510ea9db1212df07531509b098766703bc27", "message": "Speeling", "committedDate": "2020-12-23T14:17:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NDczMg==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547994732", "bodyText": "the size of this class makes me now wonder if we should drop it in favour of an additional test constructor/method in MappingLookup.", "author": "javanna", "createdAt": "2020-12-23T14:50:10Z", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MappingLookupUtils.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.mapper;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class MappingLookupUtils {\n+    public static MappingLookup fromTypes(MappedFieldType... types) {\n+        return fromTypes(Arrays.asList(types), List.of());\n+    }\n+\n+    public static MappingLookup fromTypes(List<MappedFieldType> concreteFields, List<RuntimeFieldType> runtimeFields) {\n+        List<FieldMapper> mappers = concreteFields.stream().map(MockFieldMapper::new).collect(toList());\n+        return new MappingLookup(\"_doc\", mappers, List.of(), List.of(), runtimeFields, 0, souceToParse -> null, true);\n+    }", "originalCommit": "629f510ea9db1212df07531509b098766703bc27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NjAwMw==", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547996003", "bodyText": "Yeah. Me too. It's pretty small. It does depend on MockFieldMapper which is in the test framework. I could make move the methods to static methods on MockFieldMapper. It isn't quite right for runtime fields though.", "author": "nik9000", "createdAt": "2020-12-23T14:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk5NDczMg=="}], "type": "inlineReview"}, {"oid": "4f4efd64699b89dae240a2e3b1a929f8105942d5", "url": "https://github.com/elastic/elasticsearch/commit/4f4efd64699b89dae240a2e3b1a929f8105942d5", "message": "Typo", "committedDate": "2020-12-23T17:24:02Z", "type": "commit"}]}