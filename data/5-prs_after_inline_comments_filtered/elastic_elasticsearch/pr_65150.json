{"pr_number": 65150, "pr_title": "URI parts ingest processor ", "pr_createdAt": "2020-11-17T16:30:11Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65150", "timeline": [{"oid": "df786f8cebc52c07e4eb3819b7e40bc3327875af", "url": "https://github.com/elastic/elasticsearch/commit/df786f8cebc52c07e4eb3819b7e40bc3327875af", "message": "URL parts processor with new ingest module", "committedDate": "2020-11-17T16:03:04Z", "type": "commit"}, {"oid": "3d7650216f62b61f4a625887937406787557694c", "url": "https://github.com/elastic/elasticsearch/commit/3d7650216f62b61f4a625887937406787557694c", "message": "spotless making code less readable :(", "committedDate": "2020-11-17T16:36:28Z", "type": "commit"}, {"oid": "828914e249183e31c86cadf6041936c5ae3af7e3", "url": "https://github.com/elastic/elasticsearch/commit/828914e249183e31c86cadf6041936c5ae3af7e3", "message": "forbidden APIs", "committedDate": "2020-11-17T16:49:30Z", "type": "commit"}, {"oid": "caf2715201ea493f835e8e013e86dd2cc58de363", "url": "https://github.com/elastic/elasticsearch/commit/caf2715201ea493f835e8e013e86dd2cc58de363", "message": "add tests, don't remove target field", "committedDate": "2020-11-17T22:32:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjA2NA==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r525632064", "bodyText": "Are there limitations on which schemes that this can parse? Would these parse?\n\nftp://ftp.is.co.za/rfc/rfc1808.txt\nldap://[2001:db8::7]/c=GB?objectClass?one\ntelnet://192.0.2.16:80/\n\nPerhaps using java.net.URI would be more forgiving and not require a URLStreamHandler to be loaded.", "author": "andrewkroh", "createdAt": "2020-11-18T01:18:32Z", "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UrlPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UrlPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"url_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UrlPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URL url;\n+        try {\n+            url = new URL(value);", "originalCommit": "caf2715201ea493f835e8e013e86dd2cc58de363", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNzI1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r525637256", "bodyText": "Similarly parts of the URL are required for parsing to work?", "author": "andrewkroh", "createdAt": "2020-11-18T01:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MDgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r526270828", "bodyText": "@andrewkroh, thanks for looking it over and commenting. I switched over to java.net.URI which does support more schemes including all three of the examples you list above.\nRight now, no parts of a URI are required beyond what java.net.URI needs to construct an instance. Is that what you would prefer?", "author": "danhermann", "createdAt": "2020-11-18T17:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzMjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNTQyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r525635429", "bodyText": "ECS isn't clear on what's correct here, but what does getHost return for bracked IPv6 addresses?\n@elastic/ecs Should url.domain include the brackets that are required when using IPv6 addresses in URLs? https://www.ietf.org/rfc/rfc2732.txt", "author": "andrewkroh", "createdAt": "2020-11-18T01:28:40Z", "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UrlPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UrlPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"url_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UrlPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URL url;\n+        try {\n+            url = new URL(value);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"unable to parse URL [\" + value + \"]\");\n+        }\n+        var urlParts = new HashMap<String, Object>();\n+        urlParts.put(\"domain\", url.getHost());", "originalCommit": "caf2715201ea493f835e8e013e86dd2cc58de363", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MjAxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r526242019", "bodyText": "Per this source, getHost() will return the IPv6 address enclosed in the brackets.\nSince brackets are required with a literal IPv6 address, url.domain should include the brackets. We can improve the description of url.domain in the ECS docs to clarify.", "author": "ebeahan", "createdAt": "2020-11-18T16:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYzNTQyOQ=="}], "type": "inlineReview"}, {"oid": "0c9163fabd8d91ce375138d4c649307f311a9ea6", "url": "https://github.com/elastic/elasticsearch/commit/0c9163fabd8d91ce375138d4c649307f311a9ea6", "message": "switch to java.net.URI and add additional test cases", "committedDate": "2020-11-18T17:27:20Z", "type": "commit"}, {"oid": "30b9effef3197e36bec1e8aba515f75bdb0262cf", "url": "https://github.com/elastic/elasticsearch/commit/30b9effef3197e36bec1e8aba515f75bdb0262cf", "message": "disable testing conventions check", "committedDate": "2020-11-18T20:11:10Z", "type": "commit"}, {"oid": "44bb39448e815e65dc9e51bd8e7f8ca1a2e897a4", "url": "https://github.com/elastic/elasticsearch/commit/44bb39448e815e65dc9e51bd8e7f8ca1a2e897a4", "message": "spotless. again.", "committedDate": "2020-11-18T20:17:06Z", "type": "commit"}, {"oid": "6b052cb443611b0d00552408350ad7192562ea62", "url": "https://github.com/elastic/elasticsearch/commit/6b052cb443611b0d00552408350ad7192562ea62", "message": "rename URL to URI", "committedDate": "2020-11-18T21:04:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2Mjk1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r527662955", "bodyText": "would this fail with IndexOutOfBounds for http://user:@www.google.com:80/blarg.gif#ref ? (no password)\nShall we add a test for this?", "author": "andreidan", "createdAt": "2020-11-20T12:35:54Z", "path": "x-pack/plugin/ingest/src/main/java/org/elasticsearch/xpack/ingest/UriPartsProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.ingest;\n+\n+import org.elasticsearch.ingest.AbstractProcessor;\n+import org.elasticsearch.ingest.ConfigurationUtils;\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.ingest.Processor;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class UriPartsProcessor extends AbstractProcessor {\n+\n+    public static final String TYPE = \"uri_parts\";\n+\n+    private final String field;\n+    private final String targetField;\n+    private final boolean removeIfSuccessful;\n+    private final boolean keepOriginal;\n+\n+    UriPartsProcessor(String tag, String description, String field, String targetField, boolean removeIfSuccessful, boolean keepOriginal) {\n+        super(tag, description);\n+        this.field = field;\n+        this.targetField = targetField;\n+        this.removeIfSuccessful = removeIfSuccessful;\n+        this.keepOriginal = keepOriginal;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public String getTargetField() {\n+        return targetField;\n+    }\n+\n+    public boolean getRemoveIfSuccessful() {\n+        return removeIfSuccessful;\n+    }\n+\n+    public boolean getKeepOriginal() {\n+        return keepOriginal;\n+    }\n+\n+    @Override\n+    public IngestDocument execute(IngestDocument ingestDocument) throws Exception {\n+        String value = ingestDocument.getFieldValue(field, String.class);\n+\n+        URI uri;\n+        try {\n+            uri = new URI(value);\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"unable to parse URI [\" + value + \"]\");\n+        }\n+        var uriParts = new HashMap<String, Object>();\n+        uriParts.put(\"domain\", uri.getHost());\n+        if (uri.getFragment() != null) {\n+            uriParts.put(\"fragment\", uri.getFragment());\n+        }\n+        if (keepOriginal) {\n+            uriParts.put(\"original\", value);\n+        }\n+        final String path = uri.getPath();\n+        if (path != null) {\n+            uriParts.put(\"path\", path);\n+            if (path.contains(\".\")) {\n+                int periodIndex = path.lastIndexOf('.');\n+                uriParts.put(\"extension\", periodIndex < path.length() ? path.substring(periodIndex + 1) : \"\");\n+            }\n+        }\n+        if (uri.getPort() != -1) {\n+            uriParts.put(\"port\", uri.getPort());\n+        }\n+        if (uri.getQuery() != null) {\n+            uriParts.put(\"query\", uri.getQuery());\n+        }\n+        uriParts.put(\"scheme\", uri.getScheme());\n+        final String userInfo = uri.getUserInfo();\n+        if (userInfo != null) {\n+            uriParts.put(\"user_info\", userInfo);\n+            if (userInfo.contains(\":\")) {\n+                int colonIndex = userInfo.indexOf(\":\");\n+                uriParts.put(\"username\", userInfo.substring(0, colonIndex));\n+                uriParts.put(\"password\", colonIndex < userInfo.length() ? userInfo.substring(colonIndex + 1) : \"\");", "originalCommit": "6b052cb443611b0d00552408350ad7192562ea62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNDI1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r527704251", "bodyText": "In that case, the password is set to an empty string. I'll add another test case to make that clear.", "author": "danhermann", "createdAt": "2020-11-20T13:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2Mjk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczODI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/65150#discussion_r527738244", "bodyText": "Thanks for the review, @andreidan!", "author": "danhermann", "createdAt": "2020-11-20T14:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2Mjk1NQ=="}], "type": "inlineReview"}, {"oid": "c128522e4afef02dd24f5279d9fee483ba921b8a", "url": "https://github.com/elastic/elasticsearch/commit/c128522e4afef02dd24f5279d9fee483ba921b8a", "message": "test case for blank password in user info", "committedDate": "2020-11-20T13:54:48Z", "type": "commit"}]}