{"pr_number": 57757, "pr_title": "Fix a bug with missing fields in sig_terms", "pr_createdAt": "2020-06-05T18:37:44Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57757", "timeline": [{"oid": "bcc4f02bd7f544648a506312d12aee7bd8562178", "url": "https://github.com/elastic/elasticsearch/commit/bcc4f02bd7f544648a506312d12aee7bd8562178", "message": "Fix a bug with missing fields in sig_terms\n\nWhen you run a `significant_terms` aggregation on a field and it *is*\nmapped but there aren't any values for it then the count of the\ndocuments that match the query on that shard still have to be added to\nthe overall doc count. I broke that in #57361. This fixes that.\n\nCloses #57402", "committedDate": "2020-06-05T18:34:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDgzOA==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436100838", "bodyText": "These actually reproduce the issue.", "author": "nik9000", "createdAt": "2020-06-05T18:41:47Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMTQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436101475", "bodyText": "I thought this would reproduce the issue but it doesn't. It still feels useful to add.", "author": "nik9000", "createdAt": "2020-06-05T18:43:13Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testAllDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\");\n+                    SignificantLongTerms result = search(searcher, new MatchAllDocsQuery(), request, longField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testSomeDocsWithoutStringFieldviaGlobalOrds() throws IOException {", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMTU2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436101561", "bodyText": "These are coming in #57758 and I thought they might reproduce the issue so I added them as well. No dice. Either way, they are nice to have.", "author": "nik9000", "createdAt": "2020-06-05T18:43:26Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testAllDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\");\n+                    SignificantLongTerms result = search(searcher, new MatchAllDocsQuery(), request, longField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testSomeDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testSomeDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testSomeDocsWithoutStringFieldViaMap() throws IOException {\n+        testSomeDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testSomeDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(d);\n+                writer.flush();\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(2L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testSomeDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedNumericDocValuesField(\"f\", 1));\n+                writer.addDocument(d);\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\");\n+                    SignificantLongTerms result = search(searcher, new MatchAllDocsQuery(), request, longField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(2L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testThreeLayerStringViaGlobalOrds() throws IOException {", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMTY4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436101682", "bodyText": "0 bad!", "author": "nik9000", "createdAt": "2020-06-05T18:43:42Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java", "diffHunk": "@@ -49,12 +49,12 @@ protected StringTerms buildEmptyTermsAggregation() {\n                 metadata(), format, bucketCountThresholds.getShardSize(), showTermDocCountError, 0, emptyList(), 0);\n     }\n \n-    protected SignificantStringTerms buildEmptySignificantTermsAggregation(SignificanceHeuristic significanceHeuristic) {\n+    protected SignificantStringTerms buildEmptySignificantTermsAggregation(long subsetSize, SignificanceHeuristic significanceHeuristic) {\n         // We need to account for the significance of a miss in our global stats - provide corpus size as context\n         ContextIndexSearcher searcher = context.searcher();\n         IndexReader topReader = searcher.getIndexReader();\n         int supersetSize = topReader.numDocs();\n         return new SignificantStringTerms(name, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getMinDocCount(),\n-                metadata(), format, 0, supersetSize, significanceHeuristic, emptyList());", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3MjA4MA==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436672080", "bodyText": "This test (or it's mapped/global wrappers, if you'd rather) needs javadoc.  It's not at all clear from the name what path this is intended to exercise.", "author": "not-napoleon", "createdAt": "2020-06-08T12:57:19Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Njc1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436676751", "bodyText": "Does d not get added to the index? Why are we even creating this document?", "author": "not-napoleon", "createdAt": "2020-06-08T13:02:15Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MTU0MA==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436681540", "bodyText": "That'd be a copy and paste error. Sorry!", "author": "nik9000", "createdAt": "2020-06-08T13:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Njc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3ODAyMA==", "url": "https://github.com/elastic/elasticsearch/pull/57757#discussion_r436678020", "bodyText": "As above, why do we even need this document?", "author": "not-napoleon", "createdAt": "2020-06-08T13:03:42Z", "path": "server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java", "diffHunk": "@@ -379,6 +387,153 @@ public void testFieldAlias() throws IOException {\n         }\n     }\n \n+    public void testAllDocsWithoutStringFieldviaGlobalOrds() throws IOException {\n+        testAllDocsWithoutStringField(\"global_ordinals\");\n+    }\n+\n+    public void testAllDocsWithoutStringFieldViaMap() throws IOException {\n+        testAllDocsWithoutStringField(\"map\");\n+    }\n+\n+    private void testAllDocsWithoutStringField(String executionHint) throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();\n+                d.add(new SortedDocValuesField(\"f\", new BytesRef(\"f\")));\n+                writer.addDocument(new Document());\n+                try (IndexReader reader = maybeWrapReaderEs(writer.getReader())) {\n+                    IndexSearcher searcher = newIndexSearcher(reader);\n+                    SignificantTermsAggregationBuilder request = new SignificantTermsAggregationBuilder(\"f\").field(\"f\")\n+                        .executionHint(executionHint);\n+                    SignificantStringTerms result = search(searcher, new MatchAllDocsQuery(), request, keywordField(\"f\"));\n+                    assertThat(result.getSubsetSize(), equalTo(1L));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testAllDocsWithoutNumericField() throws IOException {\n+        try (Directory dir = newDirectory()) {\n+            try (RandomIndexWriter writer = new RandomIndexWriter(random(), dir)) {\n+                Document d = new Document();", "originalCommit": "bcc4f02bd7f544648a506312d12aee7bd8562178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c0e7f5f8b3b55cd49183bd5d740eaab0ba4140b4", "url": "https://github.com/elastic/elasticsearch/commit/c0e7f5f8b3b55cd49183bd5d740eaab0ba4140b4", "message": "Cleanup after review", "committedDate": "2020-06-08T13:12:07Z", "type": "commit"}]}