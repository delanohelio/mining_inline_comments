{"pr_number": 56246, "pr_title": "EQL: Fix cidrMatch function fails to match when used in scripts", "pr_createdAt": "2020-05-05T21:04:16Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/56246", "timeline": [{"oid": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "url": "https://github.com/elastic/elasticsearch/commit/eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "message": "EQL: Fix cidrMatch function fails to match when used in scripts", "committedDate": "2020-05-05T21:00:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMDUyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420410521", "bodyText": "I believe this exists and would be more succinct.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Expression address : addresses) {\n          \n          \n            \n                        if (address.foldable() == false) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return Expressions.foldable(addresses);\n          \n      \n    \n    \n  \n\nI think we could also do Expressions.foldable(children()) in more places.", "author": "rw-access", "createdAt": "2020-05-05T21:14:39Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "originalCommit": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDcxOQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420444719", "bodyText": "Thanks! Didn't notice this one. Will update.", "author": "aleksmaus", "createdAt": "2020-05-05T22:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMDUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3Njg3MA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421076870", "bodyText": "Addressed", "author": "aleksmaus", "createdAt": "2020-05-06T20:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMDUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTMwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420411301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object o = field.fold();\n          \n          \n            \n                    ArrayList<Object> arr = new ArrayList<>(addresses.size());\n          \n          \n            \n                    for (Expression address : addresses) {\n          \n          \n            \n                        final Equals eq = new Equals(source(), field, address);\n          \n          \n            \n                        func = (func == null) ? eq : new Or(source(), func, eq);\n          \n          \n            \n                        arr.add(address.fold());\n          \n          \n            \n                    }\n          \n          \n            \n                    return doProcess(o, arr);\n          \n          \n            \n                    return doProcess(field.fold(), Expressions.fold(addresses));", "author": "rw-access", "createdAt": "2020-05-05T21:16:13Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n+    @Override\n+    public Object fold() {\n+        Object o = field.fold();\n+        ArrayList<Object> arr = new ArrayList<>(addresses.size());\n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n-            func = (func == null) ? eq : new Or(source(), func, eq);\n+            arr.add(address.fold());\n+        }\n+        return doProcess(o, arr);", "originalCommit": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NzEzMA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421077130", "bodyText": "Updated", "author": "aleksmaus", "createdAt": "2020-05-06T20:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420411974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Object> values = new ArrayList<>(new LinkedHashSet<>(foldListOfValues(addresses, field.dataType())));\n          \n          \n            \n                    List<Object> values = Expressions.fold(addresses)", "author": "rw-access", "createdAt": "2020-05-05T21:17:30Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n \n+    @Override\n+    public Object fold() {\n+        Object o = field.fold();\n+        ArrayList<Object> arr = new ArrayList<>(addresses.size());\n         for (Expression address : addresses) {\n-            final Equals eq = new Equals(source(), field, address);\n-            func = (func == null) ? eq : new Or(source(), func, eq);\n+            arr.add(address.fold());\n+        }\n+        return doProcess(o, arr);\n+    }\n+\n+    @Override\n+    protected NodeInfo<? extends Expression> info() {\n+        return NodeInfo.create(this, CIDRMatch::new, field, addresses);\n+    }\n+\n+    @Override\n+    public ScriptTemplate asScript() {\n+        ScriptTemplate leftScript = asScript(field);\n+\n+        List<Object> values = new ArrayList<>(new LinkedHashSet<>(foldListOfValues(addresses, field.dataType())));", "originalCommit": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NjYwMw==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421076603", "bodyText": "this will not eliminate duplicated values as far as I see", "author": "aleksmaus", "createdAt": "2020-05-06T20:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMTk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNDY2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420414667", "bodyText": "I believe this exists and would be more succinct.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Expression address : addresses) {\n          \n          \n            \n                        if (address.foldable() == false) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return Expressions.foldable(addresses);\n          \n      \n    \n    \n  \n\nI think we could also do Expressions.foldable(children()) in more places.", "author": "rw-access", "createdAt": "2020-05-05T21:22:58Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRMatch.java", "diffHunk": "@@ -101,14 +82,81 @@ protected TypeResolution resolveType() {\n     }\n \n     @Override\n-    public ScalarFunction makeSubstitute() {\n-        ScalarFunction func = null;\n+    protected Pipe makePipe() {\n+        ArrayList<Pipe> arr = new ArrayList<>(addresses.size());\n+        for (Expression address : addresses) {\n+            arr.add(Expressions.pipe(address));\n+        }\n+        return new CIDRMatchFunctionPipe(source(), this, Expressions.pipe(field), arr);\n+    }\n+\n+    @Override\n+    public boolean foldable() {\n+        if (field.foldable() == false) {\n+            return false;\n+        }\n+        for (Expression address : addresses) {\n+            if (address.foldable() == false) {\n+                return false;\n+            }\n+        }\n+        return true;", "originalCommit": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3NzAxOA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r421077018", "bodyText": "Updated", "author": "aleksmaus", "createdAt": "2020-05-06T20:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNDY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjE5NA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420416194", "bodyText": "how close does org.elasticsearch.common.network.Cidrs get us?", "author": "rw-access", "createdAt": "2020-05-05T21:26:03Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.network.InetAddresses;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+\n+public class CIDRUtils {", "originalCommit": "eaf7bb72c63f5e73a3bf6dc59b26e86ad4284c95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r420444421", "bodyText": "No ipv6 support, same problem with apache commons SubnetUtils", "author": "aleksmaus", "createdAt": "2020-05-05T22:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjE5NA=="}], "type": "inlineReview"}, {"oid": "8b0ea2365fe4288a9ca01552f42cddcc9be7947f", "url": "https://github.com/elastic/elasticsearch/commit/8b0ea2365fe4288a9ca01552f42cddcc9be7947f", "message": "Merge branch 'master' into fix/cidrmatch", "committedDate": "2020-05-06T20:48:50Z", "type": "commit"}, {"oid": "f84ec05d316cb67c0f60a70ce3d5558067af3d18", "url": "https://github.com/elastic/elasticsearch/commit/f84ec05d316cb67c0f60a70ce3d5558067af3d18", "message": "Address code review", "committedDate": "2020-05-06T20:49:48Z", "type": "commit"}, {"oid": "087273c0bc50ebcddf4d500bb8f1fb6163ceeefb", "url": "https://github.com/elastic/elasticsearch/commit/087273c0bc50ebcddf4d500bb8f1fb6163ceeefb", "message": "Merge branch 'master' into fix/cidrmatch", "committedDate": "2020-05-12T00:45:30Z", "type": "commit"}, {"oid": "236a1d6c28f417b17f5b06c2bcebd26c5d85df0e", "url": "https://github.com/elastic/elasticsearch/commit/236a1d6c28f417b17f5b06c2bcebd26c5d85df0e", "message": "Translate cidrMatch to term query when possible, otherwise fallback to script", "committedDate": "2020-05-12T21:59:15Z", "type": "commit"}, {"oid": "e00c92ab1dd20af39f9a00673d15df3d750164b0", "url": "https://github.com/elastic/elasticsearch/commit/e00c92ab1dd20af39f9a00673d15df3d750164b0", "message": "Add one more test case for cidrMatch fallback to script", "committedDate": "2020-05-12T22:06:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjI1OA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424062258", "bodyText": "Is this worthwhile to  add as a method? It's also called within CidrMatch.asScript", "author": "rw-access", "createdAt": "2020-05-12T22:08:19Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()\n+    );\n+\n+    public static Query toQuery(Expression e) {\n+        return toQuery(e, new EqlTranslatorHandler());\n+    }\n+\n+    public static Query toQuery(Expression e, TranslatorHandler handler) {\n+        Query translation = null;\n+        for (ExpressionTranslator<?> translator : QUERY_TRANSLATORS) {\n+            translation = translator.translate(e, handler);\n+            if (translation != null) {\n+                return translation;\n+            }\n+        }\n+\n+        throw new QlIllegalArgumentException(\"Don't know how to translate {} {}\", e.nodeName(), e);\n+    }\n+\n+    public static class BinaryLogic extends ExpressionTranslator<org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogic> {\n+\n+        @Override\n+        protected Query asQuery(org.elasticsearch.xpack.ql.expression.predicate.logical.BinaryLogic e, TranslatorHandler handler) {\n+            if (e instanceof And) {\n+                return and(e.source(), toQuery(e.left(), handler), toQuery(e.right(), handler));\n+            }\n+            if (e instanceof Or) {\n+                return or(e.source(), toQuery(e.left(), handler), toQuery(e.right(), handler));\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n+    public static Object valueOf(Expression e) {\n+        if (e.foldable()) {\n+            return e.fold();\n+        }\n+        throw new QlIllegalArgumentException(\"Cannot determine value for {}\", e);\n+    }\n+\n+    public static class Scalars extends ExpressionTranslator<ScalarFunction> {\n+\n+        @Override\n+        protected Query asQuery(ScalarFunction f, TranslatorHandler handler) {\n+            return doTranslate(f, handler);\n+        }\n+\n+        public static Query doTranslate(ScalarFunction f, TranslatorHandler handler) {\n+            if (f instanceof CIDRMatch) {\n+                CIDRMatch cm = (CIDRMatch) f;\n+                if (cm.field() instanceof FieldAttribute && Expressions.foldable(cm.addresses())) {\n+                    String targetFieldName = handler.nameOf(((FieldAttribute) cm.field()).exactAttribute());\n+\n+                    Set<Object> set = new LinkedHashSet<>(CollectionUtils.mapSize(cm.addresses().size()));", "originalCommit": "e00c92ab1dd20af39f9a00673d15df3d750164b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Mzg2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424063861", "bodyText": "Not exactly, needed Set here for TermsQuery constructor and List for the scripting func", "author": "aleksmaus", "createdAt": "2020-05-12T22:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424062431", "bodyText": "preferred without static importing everything here, more visible QL translators vs EQL.", "author": "aleksmaus", "createdAt": "2020-05-12T22:08:44Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/QueryTranslator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.CIDRMatch;\n+import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.And;\n+import org.elasticsearch.xpack.ql.expression.predicate.logical.Or;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslators;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.querydsl.query.TermsQuery;\n+import org.elasticsearch.xpack.ql.util.CollectionUtils;\n+\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.and;\n+import static org.elasticsearch.xpack.ql.planner.ExpressionTranslators.or;\n+\n+final class QueryTranslator {\n+\n+    public static final List<ExpressionTranslator<?>> QUERY_TRANSLATORS = List.of(\n+            new ExpressionTranslators.BinaryComparisons(),\n+            new ExpressionTranslators.Ranges(),\n+            new BinaryLogic(),\n+            new ExpressionTranslators.Nots(),\n+            new ExpressionTranslators.Likes(),\n+            new ExpressionTranslators.InComparisons(),\n+            new ExpressionTranslators.StringQueries(),\n+            new ExpressionTranslators.Matches(),\n+            new ExpressionTranslators.MultiMatches(),\n+            new Scalars()", "originalCommit": "236a1d6c28f417b17f5b06c2bcebd26c5d85df0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyOTQ0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424229447", "bodyText": "A relevant aspect here: you might want to update your branch from master, to incorporate the StartsWith changes from #56404. In that PR, the Scalars from QL was updated to have startsWith use a PrefixQuery whenever possible. And for EQL and its QueryTranslator that you added, it will probably need the Scalars from QL, as well.", "author": "astefan", "createdAt": "2020-05-13T07:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NTM1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424555359", "bodyText": "Updated, and adjusted Scalar translation in EQ to be able to reuse it for startsWith function", "author": "aleksmaus", "createdAt": "2020-05-13T16:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MjQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424213131", "bodyText": "Since this code is in EQL, maybe we should handle the IllegalArgumentException here and wrap it in EqlIllegalArgumentException?", "author": "astefan", "createdAt": "2020-05-13T06:59:40Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/CIDRUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.network.InetAddresses;\n+\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+\n+public class CIDRUtils {\n+    // Borrowed from Lucene, rfc4291 prefix\n+    static final byte[] IPV4_PREFIX = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1};\n+\n+    private CIDRUtils() {\n+    }\n+\n+    public static boolean isInRange(String address, String... cidrAddresses) {\n+        // Check if address is parsable first\n+        byte[] addr = InetAddresses.forString(address).getAddress();", "originalCommit": "e00c92ab1dd20af39f9a00673d15df3d750164b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NDQ5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424554495", "bodyText": "Done", "author": "aleksmaus", "createdAt": "2020-05-13T16:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMzQzNA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424233434", "bodyText": "This class is the same as QlTranslatorHandler except asQuery method. Maybe you could reuse most of the code from QlTranslatorHandler and only change the relevant bit in EqlTranslatorHandler. For example, why not extending QlTranslatorHandler and override asQuery only?", "author": "astefan", "createdAt": "2020-05-13T07:39:19Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/planner/EqlTranslatorHandler.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.planner;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.NamedExpression;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.planner.ExpressionTranslator;\n+import org.elasticsearch.xpack.ql.planner.TranslatorHandler;\n+import org.elasticsearch.xpack.ql.querydsl.query.Query;\n+import org.elasticsearch.xpack.ql.querydsl.query.ScriptQuery;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypeConverter;\n+\n+public class EqlTranslatorHandler implements TranslatorHandler {", "originalCommit": "e00c92ab1dd20af39f9a00673d15df3d750164b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NjQ2MA==", "url": "https://github.com/elastic/elasticsearch/pull/56246#discussion_r424556460", "bodyText": "Updated.", "author": "aleksmaus", "createdAt": "2020-05-13T16:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMzQzNA=="}], "type": "inlineReview"}, {"oid": "dcf6645e44e1e2a15660f4ad03044fd62243d732", "url": "https://github.com/elastic/elasticsearch/commit/dcf6645e44e1e2a15660f4ad03044fd62243d732", "message": "Merge branch 'master' into fix/cidrmatch", "committedDate": "2020-05-13T13:21:26Z", "type": "commit"}, {"oid": "c84485b9104d3a6eecc58d73d4e1381e98db010b", "url": "https://github.com/elastic/elasticsearch/commit/c84485b9104d3a6eecc58d73d4e1381e98db010b", "message": "Address code review comments from Andrei", "committedDate": "2020-05-13T17:01:57Z", "type": "commit"}, {"oid": "97df132c4caa7565ee75f94b6ad327213a6fc6d6", "url": "https://github.com/elastic/elasticsearch/commit/97df132c4caa7565ee75f94b6ad327213a6fc6d6", "message": "Update test per code review feedback", "committedDate": "2020-05-13T20:25:32Z", "type": "commit"}, {"oid": "70d7d7752219427f9c8ba2a81c1fbf1197fdcc43", "url": "https://github.com/elastic/elasticsearch/commit/70d7d7752219427f9c8ba2a81c1fbf1197fdcc43", "message": "Merge branch 'master' into fix/cidrmatch", "committedDate": "2020-05-13T21:34:52Z", "type": "commit"}]}