{"pr_number": 61860, "pr_title": "Speed up empty highlighting many fields", "pr_createdAt": "2020-09-02T15:25:47Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61860", "timeline": [{"oid": "b0606f64d568f65d4a402c934783c61e1a421e01", "url": "https://github.com/elastic/elasticsearch/commit/b0606f64d568f65d4a402c934783c61e1a421e01", "message": "Speed up empty highlighting many fields\n\nKibana often highlights *everything* like this:\n```\nPOST /_search\n{\n  \"query\": ...,\n  \"size\": 500,\n  \"highlight\": {\n    \"fields\": {\n      \"*\": { ... }\n    }\n  }\n}\n```\n\nThis can get slow when there are hundreds of mapped fields. I tested\nthis locally and unscientifically and it took a request from 20ms to\n150ms when there are 100 fields. I've seen clusters with 2000 fields\nwhere simple search go from 500ms to 1500ms just by turning on this sort\nof highlighting. Even when the query is just a `range` that and the\nfields are all numbers and stuff so it won't highlight anything.\n\nThis speeds up the `unified` highlighter in this case in a few ways:\n1. Build the highlighting infrastructure once field rather than once pre\n   document per field. This cuts out a *ton* of work analyzing the query\n   over and over and over again.\n2. Bail out of the highlighter before loading values if we can't produce\n   any results.\n\nCombined these take that local 150ms case down to 65ms. This is unlikely\nto be really useful when there are only a few fetched docs and only a\nfew fields, but we often end up having many fields with many fetched\ndocs.", "committedDate": "2020-09-02T15:22:50Z", "type": "commit"}, {"oid": "e7a2333be2e81b4655c87c247dc2c67c92648081", "url": "https://github.com/elastic/elasticsearch/commit/e7a2333be2e81b4655c87c247dc2c67c92648081", "message": "Remove oops", "committedDate": "2020-09-02T15:43:06Z", "type": "commit"}, {"oid": "58d0b87543f644bac00237345b1249dfca849da1", "url": "https://github.com/elastic/elasticsearch/commit/58d0b87543f644bac00237345b1249dfca849da1", "message": "Merge branch 'master' into uhilight_extra_one_time", "committedDate": "2020-09-04T16:47:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTAxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/61860#discussion_r484431015", "bodyText": "I think this change means we can remove hitContext from the method sig here as well - we only added it in to access the cache.", "author": "romseygeek", "createdAt": "2020-09-07T13:26:13Z", "path": "plugins/mapper-annotated-text/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/AnnotatedTextHighlighter.java", "diffHunk": "@@ -37,39 +38,37 @@\n \n     public static final String NAME = \"annotated\";\n \n-    @Override\n-    protected Analyzer getAnalyzer(DocumentMapper docMapper, HitContext hitContext) {\n-        return new AnnotatedHighlighterAnalyzer(super.getAnalyzer(docMapper, hitContext), hitContext);\n-    }\n-\n     // Convert the marked-up values held on-disk to plain-text versions for highlighting\n     @Override\n-    protected List<Object> loadFieldValues(MappedFieldType fieldType,\n-                                           Field field,\n-                                           HitContext hitContext,\n-                                           boolean forceSource) throws IOException {\n-        List<Object> fieldValues = super.loadFieldValues(fieldType, field, hitContext, forceSource);\n-        String[] fieldValuesAsString = fieldValues.toArray(new String[fieldValues.size()]);\n+    protected List<Object> loadFieldValues(\n+        CustomUnifiedHighlighter highlighter,\n+        MappedFieldType fieldType,\n+        Field field,\n+        HitContext hitContext,\n+        boolean forceSource\n+    ) throws IOException {\n+        List<Object> fieldValues = super.loadFieldValues(highlighter, fieldType, field, hitContext, forceSource);\n \n-        AnnotatedText[] annotations = new AnnotatedText[fieldValuesAsString.length];\n-        for (int i = 0; i < fieldValuesAsString.length; i++) {\n-            annotations[i] = AnnotatedText.parse(fieldValuesAsString[i]);\n+        List<Object> strings = new ArrayList<>(fieldValues.size());\n+        AnnotatedText[] annotations = new AnnotatedText[fieldValues.size()];\n+        for (int i = 0; i < fieldValues.size(); i++) {\n+            annotations[i] = AnnotatedText.parse(fieldValues.get(i).toString());\n+            strings.add(annotations[i].textMinusMarkup);\n         }\n-        // Store the annotations in the hitContext\n-        hitContext.cache().put(AnnotatedText.class.getName(), annotations);\n+        // Store the annotations in the formatter and analyzer\n+        ((AnnotatedPassageFormatter) highlighter.getFormatter()).setAnnotations(annotations);\n+        ((AnnotatedHighlighterAnalyzer) highlighter.getIndexAnalyzer()).setAnnotations(annotations);\n+        return strings;\n+    }\n \n-        ArrayList<Object> result = new ArrayList<>(annotations.length);\n-        for (int i = 0; i < annotations.length; i++) {\n-            result.add(annotations[i].textMinusMarkup);\n-        }\n-        return result;\n+    @Override", "originalCommit": "58d0b87543f644bac00237345b1249dfca849da1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTE5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61860#discussion_r484431192", "bodyText": "\u2764\ufe0f", "author": "romseygeek", "createdAt": "2020-09-07T13:26:35Z", "path": "plugins/mapper-annotated-text/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/AnnotatedTextHighlighterTests.java", "diffHunk": "@@ -93,17 +88,14 @@ private void assertHighlightOneDoc(String fieldName, String []markedUpInputs,\n         IndexSearcher searcher = newSearcher(reader);\n         iw.close();\n \n-        LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n-        HitContext mockHitContext = new HitContext(null, context, 0, null, new HashMap<>());\n-        AnnotatedHighlighterAnalyzer hiliteAnalyzer = new AnnotatedHighlighterAnalyzer(wrapperAnalyzer, mockHitContext);", "originalCommit": "58d0b87543f644bac00237345b1249dfca849da1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTkxMw==", "url": "https://github.com/elastic/elasticsearch/pull/61860#discussion_r484431913", "bodyText": "Pretty sure we can rework the highlighter API now to remove the need for this dumb cache, which would be a really nice cleanup.", "author": "romseygeek", "createdAt": "2020-09-07T13:28:00Z", "path": "server/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/UnifiedHighlighter.java", "diffHunk": "@@ -60,84 +62,97 @@ public boolean canHighlight(MappedFieldType fieldType) {\n \n     @Override\n     public HighlightField highlight(FieldHighlightContext fieldContext) {\n-        MappedFieldType fieldType = fieldContext.fieldType;\n-        SearchHighlightContext.Field field = fieldContext.field;\n-        QueryShardContext context = fieldContext.context;\n-        FetchSubPhase.HitContext hitContext = fieldContext.hitContext;\n-        Encoder encoder = field.fieldOptions().encoder().equals(\"html\") ? HighlightUtils.Encoders.HTML : HighlightUtils.Encoders.DEFAULT;\n-        final int maxAnalyzedOffset = context.getIndexSettings().getHighlightMaxAnalyzedOffset();\n-        Integer keywordIgnoreAbove = null;\n-        if (fieldType instanceof KeywordFieldMapper.KeywordFieldType) {\n-            KeywordFieldMapper mapper = (KeywordFieldMapper) context.getMapperService().documentMapper()\n-                .mappers().getMapper(fieldContext.fieldName);\n-            keywordIgnoreAbove = mapper.ignoreAbove();\n-        }\n-\n-        List<Snippet> snippets = new ArrayList<>();\n-        int numberOfFragments = field.fieldOptions().numberOfFragments();\n-        try {\n-            final Analyzer analyzer = getAnalyzer(context.getMapperService().documentMapper(), hitContext);\n-            List<Object> fieldValues = loadFieldValues(fieldType, field, hitContext, fieldContext.forceSource);\n-            if (fieldValues.size() == 0) {\n-                return null;\n-            }\n-            final PassageFormatter passageFormatter = getPassageFormatter(hitContext, field, encoder);\n-            final IndexSearcher searcher = new IndexSearcher(hitContext.reader());\n-            final CustomUnifiedHighlighter highlighter;\n-            final String fieldValue = mergeFieldValues(fieldValues, MULTIVAL_SEP_CHAR);\n-            final OffsetSource offsetSource = getOffsetSource(fieldType);\n-            int fieldValueLength = fieldValue.length();\n-            if (keywordIgnoreAbove != null  && fieldValueLength > keywordIgnoreAbove) {\n-                return null; // skip highlighting keyword terms that were ignored during indexing\n-            }\n-            if ((offsetSource == OffsetSource.ANALYSIS) && (fieldValueLength > maxAnalyzedOffset)) {\n-                throw new IllegalArgumentException(\n-                    \"The length of [\" + fieldContext.fieldName + \"] field of [\" + hitContext.hit().getId() +\n-                        \"] doc of [\" + context.index().getName() + \"] index \" + \"has exceeded [\" +\n-                        maxAnalyzedOffset + \"] - maximum allowed to be analyzed for highlighting. \" +\n-                        \"This maximum can be set by changing the [\" + IndexSettings.MAX_ANALYZED_OFFSET_SETTING.getKey() +\n-                        \"] index level setting. \" + \"For large texts, indexing with offsets or term vectors is recommended!\");\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, CustomUnifiedHighlighter> cache = (Map<String, CustomUnifiedHighlighter>) fieldContext.hitContext.cache()\n+            .computeIfAbsent(UnifiedHighlighter.class.getName(), k -> new HashMap<>());", "originalCommit": "58d0b87543f644bac00237345b1249dfca849da1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MzI4OA==", "url": "https://github.com/elastic/elasticsearch/pull/61860#discussion_r484953288", "bodyText": "It totally would be!", "author": "nik9000", "createdAt": "2020-09-08T14:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTkxMw=="}], "type": "inlineReview"}, {"oid": "5932804cd56b493b5de40d19ad68a6cc65c2064b", "url": "https://github.com/elastic/elasticsearch/commit/5932804cd56b493b5de40d19ad68a6cc65c2064b", "message": "Drop hitcontext", "committedDate": "2020-09-08T14:42:04Z", "type": "commit"}, {"oid": "6b6f1df5d1889675e4ebf3a23033e9a4b90f10c1", "url": "https://github.com/elastic/elasticsearch/commit/6b6f1df5d1889675e4ebf3a23033e9a4b90f10c1", "message": "Merge branch 'master' into uhilight_extra_one_time", "committedDate": "2020-09-08T15:29:09Z", "type": "commit"}]}