{"pr_number": 50886, "pr_title": "Fix ActionListener.map exception handling", "pr_createdAt": "2020-01-11T16:21:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50886", "timeline": [{"oid": "09b55769e9e3aab45789b019d362111f51fc8e35", "url": "https://github.com/elastic/elasticsearch/commit/09b55769e9e3aab45789b019d362111f51fc8e35", "message": "Fix ActionListener.map exception handling\n\nmap would call listener.onFailure for exceptions from\nlistener.onResponse, but this means we could double trigger some\nlisteners which is generally unexpected. Instead, we should assume that\na listener's onResponse (and onFailure) implementation is responsible\nfor its own exception handling.", "committedDate": "2020-01-11T16:10:10Z", "type": "commit"}, {"oid": "308798111695b0d9004524aa63718108b0c169c3", "url": "https://github.com/elastic/elasticsearch/commit/308798111695b0d9004524aa63718108b0c169c3", "message": "Fix checkstyle", "committedDate": "2020-01-11T20:12:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyNzUyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r365727521", "bodyText": "I see the point in this change, but note that I added the .map shortcut back when I added it to dry up a bunch of ActionListener.wrap(..., listener::onFailure) spots.\nI think we'd basically have to audit every spot that we use .map in now and make sure that the listener/delegate will actually handle it's own onResponse failures (from a quick read over the spots we use map in this may already hold true).\nMaybe we should assert this and do something like:\ntry {\n   delegate.onResponse(mapped);\n} catch (Exception e) {\n   assert false: e;\n   throw e;\n}", "author": "original-brownbear", "createdAt": "2020-01-13T10:18:35Z", "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -136,14 +136,27 @@ public void onFailure(Exception e) {\n      * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along\n      * exceptions to the delegate.\n      *\n+     * Notice that if the listener onResponse handler fails, the exception will bubble out, whereas if the function fails, the listeners\n+     * onFailure handler will be called. The principle is that the code using this is responsible for the function, whereas the listener\n+     * should do its own exception handling since it is a different component.\n+     *\n      * @param listener Listener to delegate to\n      * @param fn Function to apply to listener response\n      * @param <Response> Response type of the new listener\n      * @param <T> Response type of the wrapped listener\n      * @return a listener that maps the received response and then passes it to its delegate listener\n      */\n     static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {\n-        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);\n+        return delegateFailure(listener, (ActionListener<T> delegate, Response response) -> {\n+            T mapped;\n+            try {\n+                mapped = fn.apply(response);\n+            } catch (Exception e) {\n+                delegate.onFailure(e);\n+                return;\n+            }\n+            delegate.onResponse(mapped);", "originalCommit": "308798111695b0d9004524aa63718108b0c169c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4NzIxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r367487211", "bodyText": "I added the assert. Local CI seems happy about it.", "author": "henningandersen", "createdAt": "2020-01-16T15:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyNzUyMQ=="}], "type": "inlineReview"}, {"oid": "198651b22672b353955779eb074074686e46e7e5", "url": "https://github.com/elastic/elasticsearch/commit/198651b22672b353955779eb074074686e46e7e5", "message": "Add javadoc", "committedDate": "2020-01-13T15:15:12Z", "type": "commit"}, {"oid": "62eaedc6ec4d44ca8d9f3281e119cf9818e61253", "url": "https://github.com/elastic/elasticsearch/commit/62eaedc6ec4d44ca8d9f3281e119cf9818e61253", "message": "Fix SearchTransportService DFS action\n\nThe DFS action relied on map notifying onFailure (sort of, at least this\nway it is bwc). But there seems to be no reason it cannot simply use\nthe ChannelActionListener, so change it into using that.", "committedDate": "2020-01-13T16:09:43Z", "type": "commit"}, {"oid": "15e4199dd398035893e790d67c73ad5f1509baeb", "url": "https://github.com/elastic/elasticsearch/commit/15e4199dd398035893e790d67c73ad5f1509baeb", "message": "Try assert", "committedDate": "2020-01-16T15:32:23Z", "type": "commit"}, {"oid": "2b24d570b14087a644a14cae135c4494323f10f3", "url": "https://github.com/elastic/elasticsearch/commit/2b24d570b14087a644a14cae135c4494323f10f3", "message": "Adapt to asserting on failure.", "committedDate": "2020-01-16T15:32:37Z", "type": "commit"}, {"oid": "0dae4f47ddf4f4e64d4095f7873873f3e79af7ea", "url": "https://github.com/elastic/elasticsearch/commit/0dae4f47ddf4f4e64d4095f7873873f3e79af7ea", "message": "Remove test that cannot live with assertion error.", "committedDate": "2020-01-16T15:32:46Z", "type": "commit"}, {"oid": "b62a2b71d5c713495d17bd897c6935de7814006f", "url": "https://github.com/elastic/elasticsearch/commit/b62a2b71d5c713495d17bd897c6935de7814006f", "message": "Merge remote-tracking branch 'origin/master' into fix_map_exception_handling", "committedDate": "2020-01-16T15:46:13Z", "type": "commit"}, {"oid": "65ba493a87952ad4528f07592bf91a61df7b1abf", "url": "https://github.com/elastic/elasticsearch/commit/65ba493a87952ad4528f07592bf91a61df7b1abf", "message": "Merge remote-tracking branch 'origin/master' into fix_map_exception_handling", "committedDate": "2020-01-17T13:43:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjI0MA==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r368036240", "bodyText": "why assert here but not when calling delegate.onFailure(e);?", "author": "ywelsch", "createdAt": "2020-01-17T16:53:18Z", "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -136,14 +136,32 @@ public void onFailure(Exception e) {\n      * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along\n      * exceptions to the delegate.\n      *\n+     * Notice that if the listener onResponse handler fails, the exception will bubble out, whereas if the function fails, the listeners\n+     * onFailure handler will be called. The principle is that the code using this is responsible for the function, whereas the listener\n+     * should do its own exception handling since it is a different component.\n+     *\n      * @param listener Listener to delegate to\n      * @param fn Function to apply to listener response\n      * @param <Response> Response type of the new listener\n      * @param <T> Response type of the wrapped listener\n      * @return a listener that maps the received response and then passes it to its delegate listener\n      */\n     static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {\n-        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);\n+        return delegateFailure(listener, (ActionListener<T> delegate, Response response) -> {\n+            T mapped;\n+            try {\n+                mapped = fn.apply(response);\n+            } catch (Exception e) {\n+                delegate.onFailure(e);\n+                return;\n+            }\n+            try {\n+                delegate.onResponse(mapped);\n+            } catch (RuntimeException e) {\n+                assert false : new AssertionError(\"map: listener.onResponse failed\", e);", "originalCommit": "65ba493a87952ad4528f07592bf91a61df7b1abf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwOTc5MA==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r370509790", "bodyText": "Thanks, added that in ca31964 and tests seems unaffected.", "author": "henningandersen", "createdAt": "2020-01-24T08:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg5NA==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r368036894", "bodyText": "ChannelActionListener also has this weird double-sending logic.", "author": "ywelsch", "createdAt": "2020-01-17T16:54:48Z", "path": "server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java", "diffHunk": "@@ -306,27 +305,11 @@ public static void registerRequestHandler(TransportService transportService, Sea\n             (in) -> TransportResponse.Empty.INSTANCE);\n \n         transportService.registerRequestHandler(DFS_ACTION_NAME, ThreadPool.Names.SAME, ShardSearchRequest::new,\n-            (request, channel, task) -> {\n-                searchService.executeDfsPhase(request, (SearchShardTask) task, new ActionListener<SearchPhaseResult>() {\n-                    @Override\n-                    public void onResponse(SearchPhaseResult searchPhaseResult) {\n-                        try {\n-                            channel.sendResponse(searchPhaseResult);\n-                        } catch (IOException e) {\n-                            throw new UncheckedIOException(e);\n-                        }\n-                    }\n-\n-                    @Override\n-                    public void onFailure(Exception e) {\n-                        try {\n-                            channel.sendResponse(e);\n-                        } catch (IOException e1) {\n-                            throw new UncheckedIOException(e1);\n-                        }\n-                    }\n-                });\n-            });\n+            (request, channel, task) ->\n+                searchService.executeDfsPhase(request, (SearchShardTask) task,\n+                    new ChannelActionListener<>(channel, DFS_ACTION_NAME, request))", "originalCommit": "65ba493a87952ad4528f07592bf91a61df7b1abf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMjg5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r370512892", "bodyText": "Yes, but the code used to propagate the exception out. This seemed to be a left-over from when the ChannelActionListener was introduced. The old map exception handling would ensure onFailure were called on exception. This means this change is effectively a no-op now (with the caveat that onFailure will be called on exceptions like for all other ChannelActionListener usages).\nWe should notice that DirectTransportChannel will not bubble out exceptions from invoking the TransportResponseHandler. So it seems likely that the primary exceptions bubbled out are related to communicating the response over a wire, in which case invoking onFailure might be desirable (for instance an NPE on serialization).\nSo I would like to keep using ChannelActionListener here and then deal with ChannelActionListener in a follow-up. WDYT?", "author": "henningandersen", "createdAt": "2020-01-24T08:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1MjE3NA==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r370552174", "bodyText": "++", "author": "ywelsch", "createdAt": "2020-01-24T09:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzODA3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r368038073", "bodyText": "undo", "author": "ywelsch", "createdAt": "2020-01-17T16:57:21Z", "path": "server/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java", "diffHunk": "@@ -378,5 +378,4 @@ public void testIndexNameInResponse() {\n \n         assertEquals(\"Should have index name in response\", \"foo\", response.index());\n     }\n-", "originalCommit": "65ba493a87952ad4528f07592bf91a61df7b1abf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca31964870ea47b1391fa0cae78ee3c9272a7dcd", "url": "https://github.com/elastic/elasticsearch/commit/ca31964870ea47b1391fa0cae78ee3c9272a7dcd", "message": "Review comments\n\nAlso assert that onFailure does not fail.", "committedDate": "2020-01-20T09:31:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MzM2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r369483363", "bodyText": "Maybe word this a little differently, this reads somewhat confusing (IMO):\nThe principle is that the mapped listener will handle exceptions from the mapping function {@code fn} but it is the responsibility of {@code delegate} to handle its own exceptions inside `onResponse` and `onFailure`.\n\n?", "author": "original-brownbear", "createdAt": "2020-01-22T10:35:45Z", "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -136,14 +136,49 @@ public void onFailure(Exception e) {\n      * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along\n      * exceptions to the delegate.\n      *\n-     * @param listener Listener to delegate to\n+     * Notice that it is considered a bug if the listener's onResponse or onFailure fails. onResponse failures will not call onFailure.\n+     *\n+     * If the function fails, the listener's onFailure handler will be called. The principle is that the code using this is responsible for", "originalCommit": "ca31964870ea47b1391fa0cae78ee3c9272a7dcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxODgwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/50886#discussion_r369518809", "bodyText": "Thanks Armin, I used your improved comment here: 09b5576", "author": "henningandersen", "createdAt": "2020-01-22T11:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4MzM2Mw=="}], "type": "inlineReview"}, {"oid": "084790e7153bdf9440d0d1f4fbce31a804a9bcfc", "url": "https://github.com/elastic/elasticsearch/commit/084790e7153bdf9440d0d1f4fbce31a804a9bcfc", "message": "Merge remote-tracking branch 'origin/master' into fix_map_exception_handling", "committedDate": "2020-01-22T11:45:11Z", "type": "commit"}, {"oid": "534c2bc4acc7b2bd546e0b516becc6037b15d215", "url": "https://github.com/elastic/elasticsearch/commit/534c2bc4acc7b2bd546e0b516becc6037b15d215", "message": "Armins improved javadoc", "committedDate": "2020-01-22T11:55:02Z", "type": "commit"}]}