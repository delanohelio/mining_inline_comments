{"pr_number": 57787, "pr_title": "EQL: Introduce tie breaker support", "pr_createdAt": "2020-06-07T17:21:04Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57787", "timeline": [{"oid": "c8b81962ffec29346efea821293f1dae68698847", "url": "https://github.com/elastic/elasticsearch/commit/c8b81962ffec29346efea821293f1dae68698847", "message": "EQL: Introduce tie breaker support\n\nAllow a field inside the data to be used as a tie breaker for events\nthat have the same timestamp.\nThe default points to event.sequence (based on ECS) which for the\nmoment, needs to exist in the schema.\nIf used, the tie-breaker always requires a non-null value since it is\nused inside `search_after` which requires a non-null value.\n\nFix #56824", "committedDate": "2020-06-07T17:18:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MzgxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436383811", "bodyText": "Changed this one since Eclipse cannot run it (it's an invalid method name according to the Java conventions).", "author": "costin", "createdAt": "2020-06-07T17:21:46Z", "path": "x-pack/plugin/eql/qa/common/src/main/java/org/elasticsearch/test/eql/CommonEqlActionTestCase.java", "diffHunk": "@@ -162,8 +152,9 @@ public void cleanup() throws Exception {\n                 name = spec.note();\n             }\n             if (Strings.isNullOrEmpty(name)) {\n-                name = spec.query();\n+                name = \"\" + (counter.get() + 1);", "originalCommit": "c8b81962ffec29346efea821293f1dae68698847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDE0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r436384146", "bodyText": "This needs to be cleaned-up since we don't use it - future work if anybody wants to pick it.", "author": "costin", "createdAt": "2020-06-07T17:25:55Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/action/EqlSearchRequest.java", "diffHunk": "@@ -272,6 +293,7 @@ public boolean equals(Object o) {\n                 Objects.equals(indicesOptions, that.indicesOptions) &&\n                 Objects.equals(filter, that.filter) &&\n                 Objects.equals(timestampField, that.timestampField) &&\n+                Objects.equals(tieBreakerField, that.tieBreakerField) &&\n                 Objects.equals(eventCategoryField, that.eventCategoryField) &&\n                 Objects.equals(implicitJoinKeyField, that.implicitJoinKeyField) &&\n                 Objects.equals(searchAfterBuilder, that.searchAfterBuilder) &&", "originalCommit": "c8b81962ffec29346efea821293f1dae68698847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzODkwMw==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437438903", "bodyText": "Btw, this is about implictJoinKeyField not tieBreakerField.", "author": "costin", "createdAt": "2020-06-09T13:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4NDE0Ng=="}], "type": "inlineReview"}, {"oid": "11bd66e12df0271ed6179f71acb4414f412a8bec", "url": "https://github.com/elastic/elasticsearch/commit/11bd66e12df0271ed6179f71acb4414f412a8bec", "message": "Make tie breaker field optional\nDeclare EQL the high level rest client aware of tie breaker", "committedDate": "2020-06-08T07:40:23Z", "type": "commit"}, {"oid": "f5d7cbd7630ddf509f3a6ff0739bd824eeffc855", "url": "https://github.com/elastic/elasticsearch/commit/f5d7cbd7630ddf509f3a6ff0739bd824eeffc855", "message": "Introduce EmptyAttribute to avoid having to deal with nulls\n\nIt still requires filtering to avoid it leaking through-out the plan", "committedDate": "2020-06-08T09:16:41Z", "type": "commit"}, {"oid": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81", "url": "https://github.com/elastic/elasticsearch/commit/b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81", "message": "Remove EmptyAttribute from projection", "committedDate": "2020-06-08T09:38:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MzIyMg==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437173222", "bodyText": "Unnecessary empty line?", "author": "astefan", "createdAt": "2020-06-09T06:46:59Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/SequenceStateMachine.java", "diffHunk": "@@ -27,17 +27,24 @@\n     /** this ignores the key */\n     private final long[] timestampMarkers;\n \n+    private final Comparable<Object>[] tieBreakerMarkers;\n+    private final boolean hasTieBreaker;\n+\n     private final int completionStage;\n \n     /** list of completed sequences - separate to avoid polluting the other stages */\n     private final List<Sequence> completed;\n \n-    public SequenceStateMachine(int stages) {\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public SequenceStateMachine(int stages, boolean hasTieBreaker) {\n         this.completionStage = stages - 1;\n         this.stageToKeys = new StageToKeys(completionStage);\n         this.keyToSequences = new KeyToSequences(completionStage);\n         this.timestampMarkers = new long[completionStage];\n+        this.tieBreakerMarkers = new Comparable[completionStage];\n         this.completed = new LinkedList<>();\n+", "originalCommit": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4Mzk4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437583983", "bodyText": "I've added it to differentiate between value vs collection initialization.", "author": "costin", "createdAt": "2020-06-09T17:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MzIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM0NA==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437312344", "bodyText": "Ordinal doesn't feel right in this context tbh. How about TimeOrdering?", "author": "astefan", "createdAt": "2020-06-09T10:39:27Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/TimeOrdinal.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.execution.sequence;\n+\n+import org.elasticsearch.xpack.ql.capabilities.Resolvable;\n+import org.elasticsearch.xpack.ql.expression.Attribute;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+\n+/**\n+ * Time ordinal for a given event.\n+ * It is an internal construct that wraps the mandatory timestamp attribute and the optional application tie-breaker.\n+ */\n+public class TimeOrdinal implements Resolvable {", "originalCommit": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437439828", "bodyText": "It's not the order per se but rather where in the stream an event stands. And it's not just the time but also the tiebreaker that define the position in the stream.", "author": "costin", "createdAt": "2020-06-09T13:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxMjM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxNzEwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437317109", "bodyText": "I know this is old code, but shouldn't this be called timestamp?", "author": "astefan", "createdAt": "2020-06-09T10:48:47Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plan/physical/SequenceExec.java", "diffHunk": "@@ -16,52 +16,59 @@\n import org.elasticsearch.xpack.ql.expression.NamedExpression;\n import org.elasticsearch.xpack.ql.tree.NodeInfo;\n import org.elasticsearch.xpack.ql.tree.Source;\n-import org.elasticsearch.xpack.ql.util.CollectionUtils;\n \n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n \n import static java.util.Collections.singletonList;\n+import static org.elasticsearch.xpack.ql.util.CollectionUtils.combine;\n \n public class SequenceExec extends PhysicalPlan {\n \n     private final List<List<Attribute>> keys;\n     private final Attribute timestamp;\n+    private final Attribute tieBreaker;\n \n     public SequenceExec(Source source,\n                         List<List<Attribute>> keys,\n                         List<PhysicalPlan> matches,\n                         List<Attribute> untilKeys,\n                         PhysicalPlan until,\n-                        Attribute timestampField) {\n-        this(source, CollectionUtils.combine(matches, until), CollectionUtils.combine(keys, singletonList(untilKeys)), timestampField);\n+                        Attribute timestampField,", "originalCommit": "b9fb43d7d6cbf30f883be3de9f11b12e92e9cf81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9058ae4aec903af858265c18d975c4b099c1b2e4", "url": "https://github.com/elastic/elasticsearch/commit/9058ae4aec903af858265c18d975c4b099c1b2e4", "message": "Polish", "committedDate": "2020-06-09T17:03:33Z", "type": "commit"}, {"oid": "76fff87bea723b8b55745ad6eb11dabc4702a1b6", "url": "https://github.com/elastic/elasticsearch/commit/76fff87bea723b8b55745ad6eb11dabc4702a1b6", "message": "Merge branch 'master' into eql/tie-breaker", "committedDate": "2020-06-09T18:45:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDQ5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r437734492", "bodyText": "tiebreaker is one word, tiebreaker_field maybe?", "author": "aleksmaus", "createdAt": "2020-06-09T21:31:39Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/eql/EqlSearchRequest.java", "diffHunk": "@@ -43,9 +43,11 @@\n     private int fetchSize = 50;\n     private SearchAfterBuilder searchAfterBuilder;\n     private String query;\n+    private String tieBreakerField;\n \n     static final String KEY_FILTER = \"filter\";\n     static final String KEY_TIMESTAMP_FIELD = \"timestamp_field\";\n+    static final String KEY_TIE_BREAKER_FIELD = \"tie_breaker_field\";", "originalCommit": "76fff87bea723b8b55745ad6eb11dabc4702a1b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NjcwOA==", "url": "https://github.com/elastic/elasticsearch/pull/57787#discussion_r438096708", "bodyText": "https://en.wikipedia.org/wiki/Tiebreaker", "author": "aleksmaus", "createdAt": "2020-06-10T12:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDQ5Mg=="}], "type": "inlineReview"}]}