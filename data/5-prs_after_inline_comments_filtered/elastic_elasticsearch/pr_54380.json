{"pr_number": 54380, "pr_title": "EQL: implement stringContains function", "pr_createdAt": "2020-03-28T19:04:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54380", "timeline": [{"oid": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "url": "https://github.com/elastic/elasticsearch/commit/c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "message": "EQL: implement stringContains function", "committedDate": "2020-03-28T19:02:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjI2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400296261", "bodyText": "I think (per a slack conversation) that we'll handle case-sensitivity separately, so no need for the argument?", "author": "rw-access", "createdAt": "2020-03-30T15:44:33Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400297322", "bodyText": "yeah, was not clear on this last week, so left it here for now. will remove as needed.", "author": "aleksmaus", "createdAt": "2020-03-30T15:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODIxMw==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478213", "bodyText": "Removed the optional parameter.", "author": "aleksmaus", "createdAt": "2020-04-04T14:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NjI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NTM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400375376", "bodyText": "Package I think should be org.elasticsearch.xpack.eql.expression.function.scalar.string.", "author": "astefan", "createdAt": "2020-03-30T17:41:34Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODE5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478195", "bodyText": "Moved to the scalar.string package.", "author": "aleksmaus", "createdAt": "2020-04-04T14:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NTM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzQyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400377429", "bodyText": "Personally, I find haystack and needle inappropriate here. I know that it fits with the purpose of the function :-), but I prefer string and pattern  or substring.", "author": "astefan", "createdAt": "2020-03-30T17:44:49Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMTg3OA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400531878", "bodyText": "http://man7.org/linux/man-pages/man3/strstr.3.html :-)", "author": "aleksmaus", "createdAt": "2020-03-30T22:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODI1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478255", "bodyText": "Renamed params to string and substring.", "author": "aleksmaus", "createdAt": "2020-04-04T14:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3OTU1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400379557", "bodyText": "I'm not convinced this method is really needed. It's just a short one-liner... Maybe other reviewers thing otherwise, but I would keep using the ternary operator inline.", "author": "astefan", "createdAt": "2020-03-30T17:48:08Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContains.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains\n+ * stringContains(a, b)\n+ * Returns true if b is a substring of a\n+ */\n+public class StringContains extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression haystack, needle, caseSensitive;\n+\n+    public StringContains(Source source, Expression haystack, Expression needle, Expression caseSensitive) {\n+        super(source, Arrays.asList(haystack, needle, toDefault(caseSensitive)));\n+        this.haystack = haystack;\n+        this.needle = needle;\n+        this.caseSensitive = arguments().get(2);\n+    }\n+\n+    private static Expression toDefault(Expression exp) {", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478322", "bodyText": "Removed the method since no more optional param.", "author": "aleksmaus", "createdAt": "2020-04-04T14:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3OTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDY4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400380681", "bodyText": "No caseSensitive?", "author": "astefan", "createdAt": "2020-03-30T17:49:50Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionPipe.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.xpack.ql.execution.search.QlSourceBuilder;\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionPipe extends Pipe {\n+\n+    private final Pipe haystack, needle, caseSensitive;\n+\n+    public StringContainsFunctionPipe(Source source, Expression expression, Pipe haystack, Pipe needle, Pipe caseSensitive) {\n+        super(source, expression, Arrays.asList(haystack, needle));", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478360", "bodyText": "Removed caseSensitive param completely.", "author": "aleksmaus", "createdAt": "2020-04-04T14:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTI3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400381276", "bodyText": "sstc maybe?", "author": "astefan", "createdAt": "2020-03-30T17:50:48Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstringcontains\";", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODQyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478429", "bodyText": "Updated the NAME", "author": "aleksmaus", "createdAt": "2020-04-04T14:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjM0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400382347", "bodyText": "Why this class? Shouldn't this method belong to a class that has other String utility method like this one here? And is this really needed to be placed in a separate class?", "author": "astefan", "createdAt": "2020-03-30T17:52:35Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/stringcontains/StringContainsUtils.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.stringcontains;\n+\n+import java.util.Locale;\n+\n+import static org.elasticsearch.common.Strings.hasLength;\n+\n+final class StringContainsUtils {", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyODM2MA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400528360", "bodyText": "I think these methods could be in function.scalar.string.StringUtils", "author": "rw-access", "createdAt": "2020-03-30T22:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODQ4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r403478482", "bodyText": "Moved the method to function.scalar.string.StringUtils.", "author": "aleksmaus", "createdAt": "2020-04-04T14:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyODczMw==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r400528733", "bodyText": "same convention as the existing? I believe function names are looked up case insensitive anyway\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            def(StringContains.class, StringContains::new, \"stringcontains\"),\n          \n          \n            \n                            def(StringContains.class, StringContains::new, \"stringContains\"),", "author": "rw-access", "createdAt": "2020-03-30T22:19:11Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -23,6 +24,7 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(StringContains.class, StringContains::new, \"stringcontains\"),", "originalCommit": "c01c093f8dc47bb2871e8b91c2cf7d1886d16d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed9f799e8ae9348c5a6a0ee31faf13aa3436f9a5", "url": "https://github.com/elastic/elasticsearch/commit/ed9f799e8ae9348c5a6a0ee31faf13aa3436f9a5", "message": "Merge branch 'master' into feature/stringContains", "committedDate": "2020-04-04T13:37:15Z", "type": "commit"}, {"oid": "8472a00078de62d3402eef0790cfbeb1716ad5eb", "url": "https://github.com/elastic/elasticsearch/commit/8472a00078de62d3402eef0790cfbeb1716ad5eb", "message": "Address code review comments", "committedDate": "2020-04-04T14:49:53Z", "type": "commit"}, {"oid": "4e6adef70e5a82270a9b281dc25e3e54717b99c2", "url": "https://github.com/elastic/elasticsearch/commit/4e6adef70e5a82270a9b281dc25e3e54717b99c2", "message": "Fix javadoc comment for stringContains function", "committedDate": "2020-04-04T14:53:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMjgzNA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404232834", "bodyText": "we can probably remove this link since Elasticsearch will eventually be the authoritative documentation", "author": "rw-access", "createdAt": "2020-04-06T16:38:59Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContains.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringContainsFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific stringContains function.\n+ * https://eql.readthedocs.io/en/latest/query-guide/functions.html#stringContains", "originalCommit": "4e6adef70e5a82270a9b281dc25e3e54717b99c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NzU4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404267583", "bodyText": "Removed.", "author": "aleksmaus", "createdAt": "2020-04-06T17:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMjgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzI3OA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404233278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (string == null) {\n          \n          \n            \n                    if (string == null || substring == null) {", "author": "rw-access", "createdAt": "2020-04-06T16:39:35Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class StringContainsFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sstc\";\n+\n+    private final Processor string, substring;\n+\n+    public StringContainsFunctionProcessor(Processor string, Processor substring) {\n+        this.string = string;\n+        this.substring = substring;\n+    }\n+\n+    public StringContainsFunctionProcessor(StreamInput in) throws IOException {\n+        string = in.readNamedWriteable(Processor.class);\n+        substring = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(string);\n+        out.writeNamedWriteable(substring);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(string.process(input), substring.process(input));\n+    }\n+\n+    public static Object doProcess(Object string, Object substring) {\n+        if (string == null) {", "originalCommit": "4e6adef70e5a82270a9b281dc25e3e54717b99c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjEwNA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404266104", "bodyText": "throwing exception for now if the second param is null, consistent across all 3 functions that I implemented so far", "author": "aleksmaus", "createdAt": "2020-04-06T17:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MTM4OA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404271388", "bodyText": "are we leaning towards returning nulls more often and not throwing exceptions?", "author": "aleksmaus", "createdAt": "2020-04-06T17:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDA3NA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404234074", "bodyText": "before substring for alphabetical order", "author": "rw-access", "createdAt": "2020-04-06T16:40:47Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -36,4 +37,9 @@ public static Boolean startsWith(String s, String pattern) {\n     public static String substring(String s, Number start, Number end) {\n         return (String) SubstringFunctionProcessor.doProcess(s, start, end);\n     }\n+\n+    public static Boolean stringContains(String string, String substring) {", "originalCommit": "4e6adef70e5a82270a9b281dc25e3e54717b99c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDI5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404270295", "bodyText": "Moved.", "author": "aleksmaus", "createdAt": "2020-04-06T17:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDA3NA=="}], "type": "inlineReview"}, {"oid": "e19ba6736a86e1e42be059fd2e9747f87734ac00", "url": "https://github.com/elastic/elasticsearch/commit/e19ba6736a86e1e42be059fd2e9747f87734ac00", "message": "Address code review comments", "committedDate": "2020-04-06T17:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzOTAyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404439025", "bodyText": "string == null ? null : true", "author": "astefan", "createdAt": "2020-04-06T23:01:21Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringContainsFunctionProcessorTests.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.eql.expression.function.scalar.string.StringContainsFunctionProcessor;\n+\n+import java.util.concurrent.Callable;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class StringContainsFunctionProcessorTests extends ESTestCase {\n+\n+    // TODO (AM): consolidate with other functions tests in previous PRs where I already used this pattern once they are merged\n+    protected static final int NUMBER_OF_TEST_RUNS = 20;\n+\n+    protected static void run(Callable<Void> callable) throws Exception {\n+        for (int runs = 0; runs < NUMBER_OF_TEST_RUNS; runs++) {\n+            callable.call();\n+        }\n+    }\n+\n+    public void testNullOrEmptyParameters() throws Exception {\n+        run(() -> {\n+            String substring = randomBoolean() ? null : randomAlphaOfLength(10);\n+            String str = randomBoolean() ? null : randomAlphaOfLength(10);\n+            if (str != null && substring != null) {\n+                str += substring;\n+                str += randomAlphaOfLength(10);\n+            }\n+            final String string = str;\n+\n+            // The string parameter can be null. Expect exception if any of other parameters is null.\n+            if ((string != null) && (substring == null)) {\n+                EqlIllegalArgumentException e = expectThrows(EqlIllegalArgumentException.class,\n+                        () -> StringContainsFunctionProcessor.doProcess(string, substring));\n+                    assertThat(e.getMessage(), equalTo(\"A string/char is required; received [null]\"));\n+            } else {\n+                assertThat(StringContainsFunctionProcessor.doProcess(string, substring),\n+                        equalTo(string == null? null : true));", "originalCommit": "e19ba6736a86e1e42be059fd2e9747f87734ac00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MTIwMA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404961200", "bodyText": "Fixed.", "author": "aleksmaus", "createdAt": "2020-04-07T16:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzOTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404440315", "bodyText": "Imo, I don't think we need this high degree of unit tests for this particular functionality, but wait for @costin's take on this before modifying this or leaving it as is.", "author": "astefan", "createdAt": "2020-04-06T23:05:04Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -8,10 +8,21 @@\n \n import org.elasticsearch.test.ESTestCase;\n \n+import java.util.concurrent.Callable;\n+\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.stringContains;\n import static org.elasticsearch.xpack.eql.expression.function.scalar.string.StringUtils.substringSlice;\n \n public class StringUtilsTests extends ESTestCase {\n \n+    protected static final int NUMBER_OF_TEST_RUNS = 20;\n+\n+    private static void run(Callable<Void> callable) throws Exception {\n+        for (int runs = 0; runs < NUMBER_OF_TEST_RUNS; runs++) {", "originalCommit": "e19ba6736a86e1e42be059fd2e9747f87734ac00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1OTUzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404959531", "bodyText": "Removed.", "author": "aleksmaus", "createdAt": "2020-04-07T16:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDQ1NA==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404440454", "bodyText": "I think this line fits inside the previous one.", "author": "astefan", "createdAt": "2020-04-06T23:05:32Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/planner/QueryFolderFailTests.java", "diffHunk": "@@ -11,6 +11,23 @@\n import org.elasticsearch.xpack.ql.QlIllegalArgumentException;\n \n public class QueryFolderFailTests extends AbstractQueryFolderTestCase {\n+\n+    private String error(String query) {\n+        VerificationException e = expectThrows(VerificationException.class,\n+                () -> plan(query));", "originalCommit": "e19ba6736a86e1e42be059fd2e9747f87734ac00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MTU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54380#discussion_r404961573", "bodyText": "Updated.", "author": "aleksmaus", "createdAt": "2020-04-07T16:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MDQ1NA=="}], "type": "inlineReview"}, {"oid": "6d259675c3ceb0effecfce7a6ecb847b85162a1a", "url": "https://github.com/elastic/elasticsearch/commit/6d259675c3ceb0effecfce7a6ecb847b85162a1a", "message": "Merge branch 'master' into feature/stringContains", "committedDate": "2020-04-07T17:05:16Z", "type": "commit"}, {"oid": "dd075560122d02da3a1aaa0543cb8096845ad872", "url": "https://github.com/elastic/elasticsearch/commit/dd075560122d02da3a1aaa0543cb8096845ad872", "message": "Merge branch 'master' into feature/stringContains", "committedDate": "2020-04-07T19:23:09Z", "type": "commit"}, {"oid": "65765cc1316489776c75d6d8316b864e395aea9c", "url": "https://github.com/elastic/elasticsearch/commit/65765cc1316489776c75d6d8316b864e395aea9c", "message": "Adjust queryfolder_tests.txt to the new format", "committedDate": "2020-04-07T19:29:03Z", "type": "commit"}]}