{"pr_number": 54832, "pr_title": "SQL: Implement DATETIME_FORMAT function for date/time formatting", "pr_createdAt": "2020-04-06T17:29:18Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54832", "timeline": [{"oid": "7e0b4bc1da6cf2a3ee656a1cf85d8d691e5c266c", "url": "https://github.com/elastic/elasticsearch/commit/7e0b4bc1da6cf2a3ee656a1cf85d8d691e5c266c", "message": "SQL: Implement TO_CHAR function for date/time formatting\n\nImplement TO_CHAR(<date/datetime/time>, <pattern>) function with\naliases: TOCHAR, DATE_FORMAT, FORMAT which allows for formatting a\ntimestamp to the specified format. The patterns allowed as those of\n`java.time.format.DateTimeFormatter`.\n\nRelated to #53714", "committedDate": "2020-04-06T17:28:14Z", "type": "commit"}, {"oid": "dfa65155d03f5a28bc4c845984c3bebfc8b5cf60", "url": "https://github.com/elastic/elasticsearch/commit/dfa65155d03f5a28bc4c845984c3bebfc8b5cf60", "message": "fix imports and typo", "committedDate": "2020-04-06T18:05:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjc4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r404326784", "bodyText": "Why is the function called ToChar and not DateFormat?", "author": "costin", "createdAt": "2020-04-06T19:13:27Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/ToChar.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.sql.expression.function.scalar.datetime;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.BinaryScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.time.ZoneId;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isString;\n+import static org.elasticsearch.xpack.sql.expression.SqlTypeResolutions.isDateOrTime;\n+\n+public class ToChar extends BinaryDateTimeFunction {", "originalCommit": "dfa65155d03f5a28bc4c845984c3bebfc8b5cf60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NjQ0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r404346446", "bodyText": "No real reason, I just started with the to_char from PostgreSQL.", "author": "matriv", "createdAt": "2020-04-06T19:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MDg0MA==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r404350840", "bodyText": "Will rename it according to the name of the function we decide to use finally.", "author": "matriv", "createdAt": "2020-04-06T19:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjc4NA=="}], "type": "inlineReview"}, {"oid": "0b46e1dc65e4914e0640812dbb3e6ab3dd228423", "url": "https://github.com/elastic/elasticsearch/commit/0b46e1dc65e4914e0640812dbb3e6ab3dd228423", "message": "Fix docs", "committedDate": "2020-04-07T13:30:48Z", "type": "commit"}, {"oid": "d4a3372ac4385ed038fa7e3fabf8ee091cdbda4d", "url": "https://github.com/elastic/elasticsearch/commit/d4a3372ac4385ed038fa7e3fabf8ee091cdbda4d", "message": "Rename function and keep only one name", "committedDate": "2020-04-07T17:58:48Z", "type": "commit"}, {"oid": "525fc28f59b0d134a226addd9b3bd2474136d016", "url": "https://github.com/elastic/elasticsearch/commit/525fc28f59b0d134a226addd9b3bd2474136d016", "message": "Merge remote-tracking branch 'upstream/master' into impl-tochar", "committedDate": "2020-04-07T17:58:59Z", "type": "commit"}, {"oid": "824934f879ca501ef7d64abaf124b70b4d9bb47e", "url": "https://github.com/elastic/elasticsearch/commit/824934f879ca501ef7d64abaf124b70b4d9bb47e", "message": "Merge remote-tracking branch 'upstream/master' into impl-tochar", "committedDate": "2020-04-07T18:48:29Z", "type": "commit"}, {"oid": "43af070ef31013db03dd301ff283b84e119d2b96", "url": "https://github.com/elastic/elasticsearch/commit/43af070ef31013db03dd301ff283b84e119d2b96", "message": "Update docs/reference/sql/functions/date-time.asciidoc\n\nCo-Authored-By: Bogdan Pintea <bpintea@gmail.com>", "committedDate": "2020-04-07T18:52:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDMzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r405184339", "bodyText": "Any particular reason for not using the alphabetical order (as it is now in the registry)?", "author": "astefan", "createdAt": "2020-04-08T00:07:39Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/SqlFunctionRegistry.java", "diffHunk": "@@ -177,6 +178,7 @@ public SqlFunctionRegistry() {\n                 def(MonthName.class, MonthName::new, \"MONTH_NAME\", \"MONTHNAME\"),\n                 def(MonthOfYear.class, MonthOfYear::new, \"MONTH_OF_YEAR\", \"MONTH\"),\n                 def(SecondOfMinute.class, SecondOfMinute::new, \"SECOND_OF_MINUTE\", \"SECOND\"),\n+                def(DateTimeFormat.class, DateTimeFormat::new, \"DATETIME_FORMAT\"),", "originalCommit": "43af070ef31013db03dd301ff283b84e119d2b96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTg0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r405359845", "bodyText": "Good catch, will fix, It was because of the original name ToChar.", "author": "matriv", "createdAt": "2020-04-08T08:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NTM0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r405185349", "bodyText": ":-(", "author": "astefan", "createdAt": "2020-04-08T00:11:03Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/BinaryDateTimeDatePartFunction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.sql.expression.function.scalar.datetime;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+\n+import java.time.ZoneId;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.common.logging.LoggerMessageFormat.format;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isString;\n+\n+/**\n+ * Abstract super class for functions like {@link DateTrunc} and {@link DatePart}\n+ * which require an argument denoting a unit of date/time.\n+ */\n+public abstract class BinaryDateTimeDatePartFunction extends BinaryDateTimeFunction {\n+\n+    public BinaryDateTimeDatePartFunction(Source source, Expression datePart, Expression timestamp, ZoneId zoneId) {\n+        super(source, datePart, timestamp, zoneId);\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = isString(left(), sourceText(), Expressions.ParamOrdinal.FIRST);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+\n+        if (left().foldable()) {\n+            String datePartValue = (String) left().fold();\n+            if (datePartValue != null && resolveDateTimeField(datePartValue) == false) {\n+                List<String> similar = findSimilarDateTimeFields(datePartValue);\n+                if (similar.isEmpty()) {\n+                    return new TypeResolution(\n+                        format(\n+                            null,\n+                            \"first argument of [{}] must be one of {} or their aliases; found value [{}]\",\n+                            sourceText(),\n+                            validDateTimeFieldValues(),\n+                            Expressions.name(left())\n+                        )", "originalCommit": "43af070ef31013db03dd301ff283b84e119d2b96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NzA2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r405187061", "bodyText": "isString is enough here? (vs. isStringAndExact)", "author": "astefan", "createdAt": "2020-04-08T00:16:36Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFormat.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.sql.expression.function.scalar.datetime;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.BinaryScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.time.ZoneId;\n+\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isString;\n+import static org.elasticsearch.xpack.sql.expression.SqlTypeResolutions.isDateOrTime;\n+\n+public class DateTimeFormat extends BinaryDateTimeFunction {\n+\n+    public DateTimeFormat(Source source, Expression timestamp, Expression pattern, ZoneId zoneId) {\n+        super(source, timestamp, pattern, zoneId);\n+    }\n+\n+    @Override\n+    public DataType dataType() {\n+        return DataTypes.KEYWORD;\n+    }\n+\n+    @Override\n+    protected TypeResolution resolveType() {\n+        TypeResolution resolution = isDateOrTime(left(), sourceText(), Expressions.ParamOrdinal.FIRST);\n+        if (resolution.unresolved()) {\n+            return resolution;\n+        }\n+        resolution = isString(right(), sourceText(), Expressions.ParamOrdinal.SECOND);", "originalCommit": "43af070ef31013db03dd301ff283b84e119d2b96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2NzU0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54832#discussion_r405367541", "bodyText": "Yep, it's enough, tried for example:\nSELECT * FROM test WHERE DATETIME_FORMAT(field1, 'uuuu-MM-dd') = '2020-04-08';\nSELECT DATETIME_FORMAT(field1, 'uuuu-MM-dd') FROM test;\n\non an index:\n{\n    \"mappings\": {\n    \"properties\": {\n      \"field1\": {\n        \"type\": \"date\"\n      },\n      \"field2\": {\n      \t\"type\": \"text\"\n      }\n    }\n  }\n}\n\nand data:\n{\n    \"field1\": \"05/04/2020 10:20:30\",\n    \"field2\": \"uuuu-MM-dd\"\n}\n\nand it works.", "author": "matriv", "createdAt": "2020-04-08T08:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NzA2MQ=="}], "type": "inlineReview"}, {"oid": "e11a07721f1ed700693b33e5e3f43e1e3ac9bcdd", "url": "https://github.com/elastic/elasticsearch/commit/e11a07721f1ed700693b33e5e3f43e1e3ac9bcdd", "message": "Rearrange entry in registry", "committedDate": "2020-04-08T09:00:51Z", "type": "commit"}]}