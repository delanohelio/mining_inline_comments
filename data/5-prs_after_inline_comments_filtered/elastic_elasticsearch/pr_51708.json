{"pr_number": 51708, "pr_title": "Always rewrite search shard request outside of the search thread pool", "pr_createdAt": "2020-01-30T21:55:14Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51708", "timeline": [{"oid": "28fa23b8cb69dc2e78d6aaf491d08d47b1164e43", "url": "https://github.com/elastic/elasticsearch/commit/28fa23b8cb69dc2e78d6aaf491d08d47b1164e43", "message": "Always rewrite search shard request outside of the search thread pool\n\nThis change ensures that the rewrite of the shard request is executed in the network thread or in the refresh listener\nwhen waiting for an active shard. This allows queries that rewrite to match_no_docs to bypass the search thread pool\nentirely even if the can_match phase was skipped (pre_filter_shard_size > number of shards). Coordinating nodes\ndon't have the ability to create empty responses so this change also ensures that at least one shard creates a full empty\nresponse while the other can return null ones. This is needed since creating true empty responses on shards require to create\nconcrete aggregators which would be too costly to build on a network thread. We should move this functionality to aggregation\nbuilders in a follow up but that would be a much bigger change.\nThis change is also important for #49601 since we want to add the ability to use the result of other shards to rewrite the request\nof subsequent ones. For instance if the first M shards have their top N computed, the top worst document in the global queue can be pass\nto subsequent shards that can then rewrite to match_no_docs if they can guarantee that they don't have any document better than the provided\none.", "committedDate": "2020-01-30T21:52:08Z", "type": "commit"}, {"oid": "534b5525ed54f1e4efbe6267bb154b9be578a6f7", "url": "https://github.com/elastic/elasticsearch/commit/534b5525ed54f1e4efbe6267bb154b9be578a6f7", "message": "add serialization test", "committedDate": "2020-01-30T22:03:28Z", "type": "commit"}, {"oid": "c02f352fe574de396eef1c89f98de74314a35133", "url": "https://github.com/elastic/elasticsearch/commit/c02f352fe574de396eef1c89f98de74314a35133", "message": "iter", "committedDate": "2020-01-30T22:40:32Z", "type": "commit"}, {"oid": "010ec08d4c01c55b49a5584e6ee2b57d5b67a180", "url": "https://github.com/elastic/elasticsearch/commit/010ec08d4c01c55b49a5584e6ee2b57d5b67a180", "message": "Merge branch 'master' into rewrite_shard_request_no_rejection", "committedDate": "2020-01-30T22:41:02Z", "type": "commit"}, {"oid": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "url": "https://github.com/elastic/elasticsearch/commit/f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "message": "fix bwc issue", "committedDate": "2020-01-30T23:35:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTMyNw==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373921327", "bodyText": "Can we skip these steps entirely? If so, we might not need to acquire an engine searcher, which potentially triggers a refresh.", "author": "dnhatn", "createdAt": "2020-02-03T04:50:33Z", "path": "server/src/main/java/org/elasticsearch/search/SearchService.java", "diffHunk": "@@ -340,15 +360,59 @@ private void loadOrExecuteQueryPhase(final ShardSearchRequest request, final Sea\n     }\n \n     public void executeQueryPhase(ShardSearchRequest request, SearchShardTask task, ActionListener<SearchPhaseResult> listener) {\n-        rewriteShardRequest(request, ActionListener.map(listener, r -> executeQueryPhase(r, task)));\n+        assert request.isMatchNoDocsReturnNullResponse() == false || request.numberOfShards() > 1\n+            : \"empty responses require more than one shard\";\n+        rewriteShardRequest(request, ActionListener.wrap(\n+            context -> {\n+                try {\n+                    ShardSearchRequest rewritten = context.request;\n+                    if (rewritten.isMatchNoDocsReturnNullResponse()\n+                            && canRewriteToMatchNone(rewritten.source())\n+                            && rewritten.source().query() instanceof MatchNoneQueryBuilder) {\n+                        onMatchNoDocs(context, listener);\n+                    } else {\n+                        // fork the execution in the search thread pool and wraps the searcher\n+                        // to execute the query\n+                        context.wrapSearcher().execute(() -> {\n+                            final SearchPhaseResult result;\n+                            try {\n+                                result = executeQueryPhase(context, task);\n+                            } catch (Exception exc) {\n+                                listener.onFailure(exc);\n+                                return;\n+                            }\n+                            listener.onResponse(result);\n+                        });\n+                    }\n+                } catch (Exception exc) {\n+                    // if the execution is rejected we need to close the searcher\n+                    IOUtils.closeWhileHandlingException(context.searcher);\n+                    listener.onFailure(exc);\n+                }\n+            }, listener::onFailure));\n+    }\n+\n+    private void onMatchNoDocs(SearchRewriteContext rewriteContext, ActionListener<SearchPhaseResult> listener) {\n+        // creates a lightweight search context that we use to inform context listeners\n+        // before closing\n+        SearchContext searchContext = createSearchContext(rewriteContext, defaultSearchTimeout);\n+        try (searchContext) {\n+            onNewContext(searchContext);", "originalCommit": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODQyMw==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373998423", "bodyText": "I added this to ensure that frozen indices are \"unregistered\" (nullify) when the context is freed. It should be easier when we move to a simple reader context ;).\nFor the refresh, I think this is required since we have to handle the search-idle case that automatically refreshes on the first query.", "author": "jimczi", "createdAt": "2020-02-03T09:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNTIyMw==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374135223", "bodyText": "Ok, let's make this change later with the reader context.", "author": "dnhatn", "createdAt": "2020-02-03T14:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373921420", "bodyText": "nit: can we use successfulOps instead? Also, I think we can have up to maxConcurrentRequestsPerNode responses instead of one. But I don't see a way to avoid this as any shard request can fail.", "author": "dnhatn", "createdAt": "2020-02-03T04:51:14Z", "path": "server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java", "diffHunk": "@@ -462,9 +464,10 @@ public final void onShardFailure(final int shardIndex, @Nullable SearchShardTarg\n      * @param result the result returned form the shard\n      * @param shardIt the shard iterator\n      */\n-    private void onShardResult(Result result, SearchShardIterator shardIt) {\n+    protected void onShardResult(Result result, SearchShardIterator shardIt) {\n         assert result.getShardIndex() != -1 : \"shard index is not set\";\n         assert result.getSearchShardTarget() != null : \"search shard target must not be null\";\n+        hasShardResponse.set(true);", "originalCommit": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373996659", "bodyText": "successfulOps is incremented when we skip a shard so we need to introduce another boolean to indicate that at least one shard returned a valid response. We only need one, when it is set, all subsequent shard requests can be ignored by the coordinator node.", "author": "jimczi", "createdAt": "2020-02-03T09:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzE1MA==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374133150", "bodyText": "Ah, I missed that. Thanks for the explanation.", "author": "dnhatn", "createdAt": "2020-02-03T14:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTU0OA==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373921548", "bodyText": "nit: I think canReturnNullResponseIfMatchNoDocs is a better name.", "author": "dnhatn", "createdAt": "2020-02-03T04:52:11Z", "path": "server/src/main/java/org/elasticsearch/search/internal/ShardSearchRequest.java", "diffHunk": "@@ -275,6 +286,19 @@ public String preference() {\n         return preference;\n     }\n \n+    /**\n+     * Returns true if the caller can handle null response {@link QuerySearchResult#nullInstance()}.\n+     * Defaults to false since the coordinator node needs at least one shard response to build the global\n+     * response.\n+     */\n+    public boolean isMatchNoDocsReturnNullResponse() {", "originalCommit": "f5684ecfc7c42588d167d0eec759f9f6f6a1ceb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjcwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r373996709", "bodyText": "++", "author": "jimczi", "createdAt": "2020-02-03T09:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTU0OA=="}], "type": "inlineReview"}, {"oid": "0acf244b16fc4a7e9bbfeb64160b71d1ae1a7535", "url": "https://github.com/elastic/elasticsearch/commit/0acf244b16fc4a7e9bbfeb64160b71d1ae1a7535", "message": "address review", "committedDate": "2020-02-03T10:17:08Z", "type": "commit"}, {"oid": "6016fa43c844868940c1cf4f5b8572ab69093d52", "url": "https://github.com/elastic/elasticsearch/commit/6016fa43c844868940c1cf4f5b8572ab69093d52", "message": "adapt test", "committedDate": "2020-02-03T10:49:40Z", "type": "commit"}, {"oid": "a0581270a25c6a11182a5eae9ec2cdeec39e2a07", "url": "https://github.com/elastic/elasticsearch/commit/a0581270a25c6a11182a5eae9ec2cdeec39e2a07", "message": "fix test", "committedDate": "2020-02-03T10:52:09Z", "type": "commit"}, {"oid": "8534ed25df43ced97d8ff983caaaec115f6d0ea6", "url": "https://github.com/elastic/elasticsearch/commit/8534ed25df43ced97d8ff983caaaec115f6d0ea6", "message": "fix topNSize when size is reset to 0", "committedDate": "2020-02-03T14:24:37Z", "type": "commit"}, {"oid": "27cdf19dfe2c98cd9939cb15f1cab7b34a6e5254", "url": "https://github.com/elastic/elasticsearch/commit/27cdf19dfe2c98cd9939cb15f1cab7b34a6e5254", "message": "add more comments", "committedDate": "2020-02-03T19:44:59Z", "type": "commit"}, {"oid": "a313d1d002930b1f3cc93c925ec7c4607997870e", "url": "https://github.com/elastic/elasticsearch/commit/a313d1d002930b1f3cc93c925ec7c4607997870e", "message": "Merge branch 'master' into rewrite_shard_request_no_rejection", "committedDate": "2020-02-03T19:45:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMDg2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374320861", "bodyText": "nit: I think both results and onShardResult() can stay private.", "author": "dnhatn", "createdAt": "2020-02-03T20:22:13Z", "path": "server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java", "diffHunk": "@@ -462,11 +464,12 @@ public final void onShardFailure(final int shardIndex, @Nullable SearchShardTarg\n      * @param result the result returned form the shard\n      * @param shardIt the shard iterator\n      */\n-    private void onShardResult(Result result, SearchShardIterator shardIt) {\n+    protected void onShardResult(Result result, SearchShardIterator shardIt) {", "originalCommit": "a313d1d002930b1f3cc93c925ec7c4607997870e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374327613", "bodyText": "Thanks, I pushed 662972c", "author": "jimczi", "createdAt": "2020-02-03T20:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMDg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTM5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374321393", "bodyText": "Since we no longer execute requests concurrently, we can drop both latches and use a blocking get() instead of non-blocking execute().", "author": "dnhatn", "createdAt": "2020-02-03T20:23:20Z", "path": "x-pack/plugin/frozen-indices/src/test/java/org/elasticsearch/index/engine/FrozenIndexTests.java", "diffHunk": "@@ -122,26 +123,48 @@ public void testSearchAndGetAPIsAreThrottled() throws InterruptedException, IOEx\n         int numRefreshes = 0;\n         for (int i = 0; i < numRequests; i++) {\n             numRefreshes++;\n-            switch (randomIntBetween(0, 3)) {\n+            // make sure that we don't share the frozen reader in concurrent requests since we acquire the\n+            // searcher and rewrite the request outside of the search-throttle thread pool\n+            CountDownLatch reqLatch = new CountDownLatch(1);", "originalCommit": "a313d1d002930b1f3cc93c925ec7c4607997870e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzQ5OA==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374327498", "bodyText": "Indeed, thanks !", "author": "jimczi", "createdAt": "2020-02-03T20:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51708#discussion_r374327647", "bodyText": "662972c", "author": "jimczi", "createdAt": "2020-02-03T20:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTM5Mw=="}], "type": "inlineReview"}, {"oid": "662972cf2de9b2ad36077b886c4930c8d2a08468", "url": "https://github.com/elastic/elasticsearch/commit/662972cf2de9b2ad36077b886c4930c8d2a08468", "message": "more review", "committedDate": "2020-02-03T20:36:16Z", "type": "commit"}]}