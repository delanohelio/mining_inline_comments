{"pr_number": 61744, "pr_title": "Keep checkpoint file channel open across fsyncs", "pr_createdAt": "2020-08-31T16:52:54Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61744", "timeline": [{"oid": "2807f74a43d0ce3752777f92426d894cd01d954f", "url": "https://github.com/elastic/elasticsearch/commit/2807f74a43d0ce3752777f92426d894cd01d954f", "message": "Keep checkpoint file channel open in-between syncs\n\nCurrently we open, write, fsync, and close the same file for every\nfsync. This is unnecessary as fsyncs are common and we continue to use\nthe same checkpoint file. This commit modifies the translog to open the\ncheckpoint when a new writer is created and close it when we roll or\nclose the writer.", "committedDate": "2020-08-27T20:06:17Z", "type": "commit"}, {"oid": "b4d2f5b8f5d4cf6d4171f4da72ba2b47984f4bc8", "url": "https://github.com/elastic/elasticsearch/commit/b4d2f5b8f5d4cf6d4171f4da72ba2b47984f4bc8", "message": "Merge remote-tracking branch 'upstream/master' into file_channel_open", "committedDate": "2020-08-31T16:49:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTY5NA==", "url": "https://github.com/elastic/elasticsearch/pull/61744#discussion_r480941694", "bodyText": "What's a bit subtle here is that we assume callers to not have any concurrent access to this method. Also we assume that once an exception occurs, this method is no more called on the same FileChannel. The surrounding context currently correctly implements this, but it is easy to break and can have disastrous effects. Is there a way we can strengthen these assumptions via assertions?  I was also wondering if we should use positional writes (see FileChannel.write(ByteBuffer src, long position), to ensure we truly always write starting with offset 0 in all cases, and move the positioning logic to the Checkpoint.write method.", "author": "ywelsch", "createdAt": "2020-09-01T07:55:43Z", "path": "server/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java", "diffHunk": "@@ -414,10 +427,12 @@ protected void readBytes(ByteBuffer targetBuffer, long position) throws IOExcept\n     }\n \n     private static void writeCheckpoint(\n-            final ChannelFactory channelFactory,\n-            final Path translogFile,\n-            final Checkpoint checkpoint) throws IOException {\n-        Checkpoint.write(channelFactory, translogFile.resolve(Translog.CHECKPOINT_FILE_NAME), checkpoint, StandardOpenOption.WRITE);\n+        final FileChannel fileChannel,\n+        final Path checkpointFile,\n+        final Checkpoint checkpoint) throws IOException {\n+        // Since we used a fixed size checkpoint, we overwrite the checkpoint each time.\n+        fileChannel.position(0);", "originalCommit": "b4d2f5b8f5d4cf6d4171f4da72ba2b47984f4bc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk3NTYwNA==", "url": "https://github.com/elastic/elasticsearch/pull/61744#discussion_r480975604", "bodyText": "++ to using positional writes, those should technically be slightly faster as well I think because we only have to lock the internal positionLock in the file channel once.", "author": "original-brownbear", "createdAt": "2020-09-01T08:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk0MTY5NA=="}], "type": "inlineReview"}, {"oid": "1a36c985845221c6e79226c97c8f6334daeeceb2", "url": "https://github.com/elastic/elasticsearch/commit/1a36c985845221c6e79226c97c8f6334daeeceb2", "message": "Change", "committedDate": "2020-09-01T15:01:09Z", "type": "commit"}, {"oid": "e96d8b09a7490572111d1b4224479c09c2f98193", "url": "https://github.com/elastic/elasticsearch/commit/e96d8b09a7490572111d1b4224479c09c2f98193", "message": "Merge remote-tracking branch 'upstream/master' into file_channel_open", "committedDate": "2020-09-01T15:40:30Z", "type": "commit"}, {"oid": "8cf440c0ac240ebe869d8e31158328f303db66a9", "url": "https://github.com/elastic/elasticsearch/commit/8cf440c0ac240ebe869d8e31158328f303db66a9", "message": "Changes", "committedDate": "2020-09-01T16:12:22Z", "type": "commit"}]}