{"pr_number": 50938, "pr_title": "Add \"did you mean\" to ObjectParser", "pr_createdAt": "2020-01-13T20:25:13Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50938", "timeline": [{"oid": "11ccd115ac5efee0610dafbd6bbd7df909891459", "url": "https://github.com/elastic/elasticsearch/commit/11ccd115ac5efee0610dafbd6bbd7df909891459", "message": "Add \"did you mean\" to ObjectParser\n\nCheck it out:\n```\n$ curl -u elastic:password -HContent-Type:application/json -XPOST localhost:9200/test/_update/foo?pretty -d'{\n  \"dac\": {}\n}'\n\n{\n  \"error\" : {\n    \"root_cause\" : [\n      {\n        \"type\" : \"x_content_parse_exception\",\n        \"reason\" : \"[2:3] [UpdateRequest] unknown field [dac] did you mean [doc]?\"\n      }\n    ],\n    \"type\" : \"x_content_parse_exception\",\n    \"reason\" : \"[2:3] [UpdateRequest] unknown field [dac] did you mean [doc]?\"\n  },\n  \"status\" : 400\n}\n```\n\nThe tricky thing about implementing this is that x-content doesn't\ndepend on Lucene. So this works by creating an extension point for the\nerror message using SPI. Elasticsearch's server module provides the\n\"spell checking\" implementation.", "committedDate": "2020-01-13T20:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMDc4OA==", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366010788", "bodyText": "I think passing ObjectParser here is ok because the interface is entirely private already. I could certainly be convinced otherwise though.", "author": "nik9000", "createdAt": "2020-01-13T20:26:12Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java", "diffHunk": "@@ -81,18 +81,17 @@\n     }\n \n     private interface UnknownFieldParser<Value, Context> {\n-\n-        void acceptUnknownField(String parserName, String field, XContentLocation location, XContentParser parser,\n-                                Value value, Context context) throws IOException;\n+        void acceptUnknownField(ObjectParser<Value, Context> objectParser, String field, XContentLocation location, XContentParser parser,\n+                Value value, Context context) throws IOException;", "originalCommit": "11ccd115ac5efee0610dafbd6bbd7df909891459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMDk2MA==", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366010960", "bodyText": "I could preserve this bit of the message, but I don't think it was really helping anything.", "author": "nik9000", "createdAt": "2020-01-13T20:26:37Z", "path": "libs/x-content/src/test/java/org/elasticsearch/common/xcontent/ObjectParserTests.java", "diffHunk": "@@ -206,7 +206,7 @@ public void setTest(int test) {\n         {\n             XContentParser parser = createParser(JsonXContent.jsonXContent, \"{\\\"not_supported_field\\\" : \\\"foo\\\"}\");\n             XContentParseException ex = expectThrows(XContentParseException.class, () -> objectParser.parse(parser, s, null));\n-            assertEquals(ex.getMessage(), \"[1:2] [the_parser] unknown field [not_supported_field], parser not found\");\n+            assertEquals(ex.getMessage(), \"[1:2] [the_parser] unknown field [not_supported_field]\");", "originalCommit": "11ccd115ac5efee0610dafbd6bbd7df909891459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTMwMg==", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366011302", "bodyText": "This seems like a problem for a follow up PR. I don't think it'd be hard, but a little fiddly.", "author": "nik9000", "createdAt": "2020-01-13T20:27:34Z", "path": "server/src/main/java/org/elasticsearch/common/xcontent/SuggestingErrorOnUnknown.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.lucene.search.spell.LevenshteinDistance;\n+import org.apache.lucene.util.CollectionUtil;\n+import org.elasticsearch.common.collect.Tuple;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class SuggestingErrorOnUnknown implements ErrorOnUnknown {\n+    @Override\n+    public String errorMessage(String parserName, String unknownField, Iterable<String> candidates) {\n+        String message = String.format(Locale.ROOT, \"[%s] unknown field [%s]\", parserName, unknownField);\n+        // TODO it'd be nice to combine this with BaseRestHandler's implementation.", "originalCommit": "11ccd115ac5efee0610dafbd6bbd7df909891459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf8ef05143a7c50df51f52f7fc95ec96518bbef9", "url": "https://github.com/elastic/elasticsearch/commit/bf8ef05143a7c50df51f52f7fc95ec96518bbef9", "message": "Checkstyle, you annoying, lovely thing", "committedDate": "2020-01-13T20:50:35Z", "type": "commit"}, {"oid": "5be1e7a9213f3bbfaedf9196c18d0ad3e94fbd2f", "url": "https://github.com/elastic/elasticsearch/commit/5be1e7a9213f3bbfaedf9196c18d0ad3e94fbd2f", "message": "Oh boy", "committedDate": "2020-01-13T21:44:42Z", "type": "commit"}, {"oid": "bb36d919385f5cc49c821afc25c1bded70569f3f", "url": "https://github.com/elastic/elasticsearch/commit/bb36d919385f5cc49c821afc25c1bded70569f3f", "message": "Merge branch 'master' into object_parser_did_you_mean", "committedDate": "2020-01-13T22:04:19Z", "type": "commit"}, {"oid": "e97b199fd6894bc57e8731f0b6a6bf17e68e5a9b", "url": "https://github.com/elastic/elasticsearch/commit/e97b199fd6894bc57e8731f0b6a6bf17e68e5a9b", "message": "Fixup tests", "committedDate": "2020-01-13T22:08:10Z", "type": "commit"}, {"oid": "0a63a711e9ca208095b7c3d254248cee32193b3c", "url": "https://github.com/elastic/elasticsearch/commit/0a63a711e9ca208095b7c3d254248cee32193b3c", "message": "Fix tests?", "committedDate": "2020-01-14T13:51:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM1MTU3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/50938#discussion_r366351575", "bodyText": "nit: s/form/from/", "author": "romseygeek", "createdAt": "2020-01-14T13:58:14Z", "path": "libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ErrorOnUnknown.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.common.xcontent;\n+\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Extension point to customize the error message for unknown fields. We expect\n+ * Elasticsearch to plug a fancy implementation that uses Lucene's spelling\n+ * correction infrastructure to suggest corrections.\n+ */\n+public interface ErrorOnUnknown {\n+    /**\n+     * The implementation of this interface that was loaded form SPI.", "originalCommit": "e97b199fd6894bc57e8731f0b6a6bf17e68e5a9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cc67258db8e1a70be10c69214475b839cdf00f8e", "url": "https://github.com/elastic/elasticsearch/commit/cc67258db8e1a70be10c69214475b839cdf00f8e", "message": "Speeling", "committedDate": "2020-01-14T14:14:50Z", "type": "commit"}, {"oid": "477e9efce0d9b123eaa3e9eb20698cf15b8bbe61", "url": "https://github.com/elastic/elasticsearch/commit/477e9efce0d9b123eaa3e9eb20698cf15b8bbe61", "message": "Merge branch 'master' into object_parser_did_you_mean", "committedDate": "2020-01-14T14:18:34Z", "type": "commit"}]}