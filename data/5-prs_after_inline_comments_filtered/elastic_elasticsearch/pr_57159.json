{"pr_number": 57159, "pr_title": "SQL: Fix unecessary evaluation for CASE/IIF", "pr_createdAt": "2020-05-26T16:14:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57159", "timeline": [{"oid": "276d7572aa63bee1c6f74921023abb24a763ce54", "url": "https://github.com/elastic/elasticsearch/commit/276d7572aa63bee1c6f74921023abb24a763ce54", "message": "SQL: Fix unecessary evaluation for CASE/IIF\n\nPreviously, CASE and IIF when translated to painless scripts\n(used in GROUP BY, HAVING, WHERE) a custom `caseFunction` registered\nin the `InternalSqlScriptUtils` was used. This function received and\narray of arbitrary length:\n```\n[condition1, result1, condition2, result2, ... elseResult]\n```\nPainless doesn't know of the context and therefore is evaluating\nall conditions and results before invoking the `caseFunction` on them.\nAs a consequence erroneous results (i.e. division by 0) where always\nevaluated despite of the guarding condition.\n\nReplace the `caseFunction` with painless if/else if/else expressions\nto properly guard the result expressions and only evaluate the one\nits guarding condition evaluates to true (or of course the elseResult).\n\nFixes: #49672", "committedDate": "2020-05-26T15:53:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MzczNQ==", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r430693735", "bodyText": "...is guarded by evaluation to...?", "author": "bpintea", "createdAt": "2020-05-26T20:37:16Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "diffHunk": "@@ -161,14 +161,24 @@ public ScriptTemplate asScript() {\n         }\n         templates.add(asScript(elseResult));\n \n-        StringJoiner template = new StringJoiner(\",\", \"{sql}.caseFunction([\", \"])\");\n+        // Use painless if-else expressions to prevent evaluation of return expression\n+        // if the condition is guarded by evaluates to false (e.g. division by 0)", "originalCommit": "276d7572aa63bee1c6f74921023abb24a763ce54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r430913265", "bodyText": "Why is nullSafeFilter added at this level  - we already add it (or should do so) on the top-level (ScriptQuery), why does this has to happen inside Case?", "author": "costin", "createdAt": "2020-05-27T07:32:34Z", "path": "x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/Case.java", "diffHunk": "@@ -161,14 +161,24 @@ public ScriptTemplate asScript() {\n         }\n         templates.add(asScript(elseResult));\n \n-        StringJoiner template = new StringJoiner(\",\", \"{sql}.caseFunction([\", \"])\");\n+        // Use painless if-else expressions to prevent evaluation of return expression\n+        // if the condition is guarded by evaluates to false (e.g. division by 0)\n+        StringBuilder sb = new StringBuilder();\n         ParamsBuilder params = paramsBuilder();\n-\n-        for (ScriptTemplate scriptTemplate : templates) {\n-            template.add(scriptTemplate.template());\n+        for (int i = 0; i < templates.size(); i++) {\n+            ScriptTemplate scriptTemplate = templates.get(i);\n+            if (i < templates.size() - 1) {", "originalCommit": "276d7572aa63bee1c6f74921023abb24a763ce54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzY2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r430927669", "bodyText": "Because the painless ? : operator complains when receives a Boolean object instead of primitive boolean.", "author": "matriv", "createdAt": "2020-05-27T07:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDkzMw==", "url": "https://github.com/elastic/elasticsearch/pull/57159#discussion_r431044933", "bodyText": "I see - the nullSafe then is a good wrapper. Please add a comment since this Painless behavior is not obvious looking at the assembly.", "author": "costin", "createdAt": "2020-05-27T11:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2NQ=="}], "type": "inlineReview"}, {"oid": "e5ea5161a1afeb335f312afb606467bc9338c4fa", "url": "https://github.com/elastic/elasticsearch/commit/e5ea5161a1afeb335f312afb606467bc9338c4fa", "message": "rephrase comment", "committedDate": "2020-05-27T07:59:41Z", "type": "commit"}, {"oid": "fe67c784ef58b62fdb6931a6ca828ce7fbb742b1", "url": "https://github.com/elastic/elasticsearch/commit/fe67c784ef58b62fdb6931a6ca828ce7fbb742b1", "message": "address comments", "committedDate": "2020-05-27T22:57:04Z", "type": "commit"}]}