{"pr_number": 58635, "pr_title": "EQL: Introduce support for sequence maxspan", "pr_createdAt": "2020-06-27T20:16:51Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58635", "timeline": [{"oid": "d8ab429fe37c97e74a0df14d9bde73fbe272edc6", "url": "https://github.com/elastic/elasticsearch/commit/d8ab429fe37c97e74a0df14d9bde73fbe272edc6", "message": "Encapsulate timestamp and timebreaker into Ordinal", "committedDate": "2020-06-27T15:01:24Z", "type": "commit"}, {"oid": "3a1593f3752b5e082722fddb49939bec1ef2bc09", "url": "https://github.com/elastic/elasticsearch/commit/3a1593f3752b5e082722fddb49939bec1ef2bc09", "message": "Stop descending from leaking inside the runtime", "committedDate": "2020-06-27T20:08:38Z", "type": "commit"}, {"oid": "f1c310a2f1e9f02302225336c67455ebe5ab63eb", "url": "https://github.com/elastic/elasticsearch/commit/f1c310a2f1e9f02302225336c67455ebe5ab63eb", "message": "Add maxspan check", "committedDate": "2020-06-27T20:08:39Z", "type": "commit"}, {"oid": "a98bcba2ec62767465577b937980f68e1978265c", "url": "https://github.com/elastic/elasticsearch/commit/a98bcba2ec62767465577b937980f68e1978265c", "message": "Enable integration tests with maxspan", "committedDate": "2020-06-27T20:08:39Z", "type": "commit"}, {"oid": "5b2a97e07697c147335efaa1b5481401674ddf29", "url": "https://github.com/elastic/elasticsearch/commit/5b2a97e07697c147335efaa1b5481401674ddf29", "message": "Convert windows filetime to unix time", "committedDate": "2020-06-28T10:57:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NDUyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/58635#discussion_r446964529", "bodyText": "iterable sounds better.", "author": "astefan", "createdAt": "2020-06-29T13:19:27Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/assembler/Criterion.java", "diffHunk": "@@ -54,54 +62,45 @@ public HitExtractor tiebreakerExtractor() {\n         return tiebreakerExtractor;\n     }\n \n-    public long timestamp(SearchHit hit) {\n+    @SuppressWarnings({ \"unchecked\" })\n+    public Ordinal ordinal(SearchHit hit) {\n+\n         Object ts = timestampExtractor.extract(hit);\n-        if (ts instanceof Number) {\n-            return ((Number) ts).longValue();\n+        if (ts instanceof Number == false) {\n+            throw new EqlIllegalArgumentException(\"Expected timestamp as long but got {}\", ts);\n         }\n-        throw new EqlIllegalArgumentException(\"Expected timestamp as long but got {}\", ts);\n-    }\n \n-    @SuppressWarnings({ \"unchecked\" })\n-    public Comparable<Object> tiebreaker(SearchHit hit) {\n-        if (tiebreakerExtractor == null) {\n-            return null;\n-        }\n-        Object tb = tiebreakerExtractor.extract(hit);\n-        if (tb instanceof Comparable) {\n-            return (Comparable<Object>) tb;\n-        }\n-        throw new EqlIllegalArgumentException(\"Expected tiebreaker to be Comparable but got {}\", tb);\n-    }\n+        long timestamp = ((Number) ts).longValue();\n+        Comparable<Object> tiebreaker = null;\n \n-    public Object[] startMarker() {\n-        return startMarker;\n+        if (tiebreakerExtractor != null) {\n+            Object tb = tiebreakerExtractor.extract(hit);\n+            if (tb instanceof Comparable == false) {\n+                throw new EqlIllegalArgumentException(\"Expected tiebreaker to be Comparable but got {}\", tb);\n+            }\n+            tiebreaker = (Comparable<Object>) tb;\n+        }\n+        return new Ordinal(timestamp, tiebreaker);\n     }\n \n-    public Object[] stopMarker() {\n-        return stopMarker;\n+    public void startMarker(Ordinal ordinal) {\n+        startMarker = ordinal;\n     }\n \n-    private Object[] marker(SearchHit hit) {\n-        long timestamp = timestamp(hit);\n-        Object tiebreaker = null;\n-        if (tiebreakerExtractor() != null) {\n-            tiebreaker = tiebreaker(hit);\n-        }\n-\n-        return tiebreaker != null ? new Object[] { timestamp, tiebreaker } : new Object[] { timestamp };\n+    public void stopMarker(Ordinal ordinal) {\n+        stopMarker = ordinal;\n     }\n \n-    public void startMarker(SearchHit hit) {\n-        startMarker = marker(hit);\n+    public Ordinal nextMarker() {\n+        return startMarker.compareTo(stopMarker) < 1 ? startMarker : stopMarker;\n     }\n \n-    public void stopMarker(SearchHit hit) {\n-        stopMarker = marker(hit);\n+    public Criterion useMarker(Ordinal marker) {\n+        searchSource.searchAfter(marker.toArray());\n+        return this;\n     }\n \n-    public Criterion useMarker(Object[] marker) {\n-        searchSource.searchAfter(marker);\n-        return this;\n+    public Iterable<SearchHit> iterateable(List<SearchHit> hits) {", "originalCommit": "5b2a97e07697c147335efaa1b5481401674ddf29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjY5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58635#discussion_r446972691", "bodyText": "before and after have almost the same code. Could you reuse it in a common method?", "author": "astefan", "createdAt": "2020-06-29T13:30:46Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/sequence/SequenceFrame.java", "diffHunk": "@@ -78,24 +63,15 @@ else if (tiebreaker != null && sequence.currentTimestamp() == timestamp) {\n      * Returns the first Sequence from the group that has its timestamp\n      * greater than the given argument alongside its position in the list.\n      */\n-    public Tuple<Sequence, Integer> after(long timestamp, Comparable<Object> tiebreaker) {\n+    public Tuple<Sequence, Integer> after(Ordinal ordinal) {", "originalCommit": "5b2a97e07697c147335efaa1b5481401674ddf29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b4c19d528bffc0a3b7d327e0866560de220dea77", "url": "https://github.com/elastic/elasticsearch/commit/b4c19d528bffc0a3b7d327e0866560de220dea77", "message": "Address feedback", "committedDate": "2020-06-29T15:34:10Z", "type": "commit"}, {"oid": "bf69b597eda3e0002a105cac59cd3075a8e39ae7", "url": "https://github.com/elastic/elasticsearch/commit/bf69b597eda3e0002a105cac59cd3075a8e39ae7", "message": "Merge remote-tracking branch 'remotes/upstream/master' into eql/span-until", "committedDate": "2020-06-29T15:59:37Z", "type": "commit"}, {"oid": "9d5ae3318cda8d8a2157303e97bc98c3c366c624", "url": "https://github.com/elastic/elasticsearch/commit/9d5ae3318cda8d8a2157303e97bc98c3c366c624", "message": "Disable unsupported tests", "committedDate": "2020-06-29T16:38:54Z", "type": "commit"}]}