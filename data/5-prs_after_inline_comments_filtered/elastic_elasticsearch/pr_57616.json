{"pr_number": 57616, "pr_title": "ILM add data stream support to the Shrink action", "pr_createdAt": "2020-06-03T17:03:48Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57616", "timeline": [{"oid": "7aa4c97b8944faf2cefb0fac2311d448592990e6", "url": "https://github.com/elastic/elasticsearch/commit/7aa4c97b8944faf2cefb0fac2311d448592990e6", "message": "ILM add data stream support to the Shrink action\n\nThe shrink action creates a shrunken index with the target number of shards.\nThis makes the shrink action data stream aware. If the ILM managed index is\npart of a data stream the shrink action will make sure to swap the original\nmanaged index with the shrunken one as part of the data stream's backing\nindices and then delete the original index.\n\nThis also relaxes the validation of data stream backing indices names to\nallow for prefixed indices.", "committedDate": "2020-06-03T16:59:21Z", "type": "commit"}, {"oid": "e8937fa4a1980570d8730cd359646da642a14f22", "url": "https://github.com/elastic/elasticsearch/commit/e8937fa4a1980570d8730cd359646da642a14f22", "message": "Fix line length", "committedDate": "2020-06-03T17:14:43Z", "type": "commit"}, {"oid": "93646c674e2bb2ebf13cbc118add1b99f7383c61", "url": "https://github.com/elastic/elasticsearch/commit/93646c674e2bb2ebf13cbc118add1b99f7383c61", "message": "Merge branch 'master' into ilm-shrink-datastream", "committedDate": "2020-06-03T18:30:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MTI0OA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r434771248", "bodyText": "We can definitely relax the logic on the naming of backing indices, but I think the write index needs to stay the same. In other words, ILM may trigger a rollover which creates a new write index, but the current write index should always conform to the naming scheme and ILM should not shrink or otherwise modify that one.", "author": "danhermann", "createdAt": "2020-06-03T18:30:03Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/DataStream.java", "diffHunk": "@@ -48,7 +48,7 @@ public DataStream(String name, String timeStampField, List<Index> indices, long\n         this.indices = indices;\n         this.generation = generation;\n         assert indices.size() > 0;\n-        assert indices.get(indices.size() - 1).getName().equals(getBackingIndexName(name, generation));\n+        assert indices.get(indices.size() - 1).getName().endsWith(getBackingIndexName(name, generation));", "originalCommit": "e8937fa4a1980570d8730cd359646da642a14f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NzgxNw==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r434777817", "bodyText": "I started with that invariant in place but if we want to enforce that we will have to invalidate policies that don't have a hot phase (ie. a rollover action).\nA policy that only has a warm phase (the scenario in the integration test https://github.com/elastic/elasticsearch/pull/57616/files#diff-fd8498322f0015d57152688358ddaa0aR45 ) will attempt to shrink the write index.\nI believe we can fail in this particular case and not allow any index replacement (shrink, restore index) on the write index but then the user will have to manually add another index to the data stream (ie. changing the write index) in order for shrink to eventually be successful and the policy to be able to continue.\nIs this a hard constraint?", "author": "andreidan", "createdAt": "2020-06-03T18:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMTExNw==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435431117", "bodyText": "We decided to not allow the shrink operation on the write index. This means the naming of the write index will remain consistent with the agreed naming scheme for backing indices.", "author": "andreidan", "createdAt": "2020-06-04T17:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MTI0OA=="}], "type": "inlineReview"}, {"oid": "be54fb4b60d957d8500f527f88eacad84cf1fd65", "url": "https://github.com/elastic/elasticsearch/commit/be54fb4b60d957d8500f527f88eacad84cf1fd65", "message": "Merge branch 'master' into ilm-shrink-datastream", "committedDate": "2020-06-04T08:38:43Z", "type": "commit"}, {"oid": "9f1f8516b103aeb08cbc6898032fa50f069b6a1e", "url": "https://github.com/elastic/elasticsearch/commit/9f1f8516b103aeb08cbc6898032fa50f069b6a1e", "message": "Extract manual rollover api in the rest driver", "committedDate": "2020-06-04T13:39:40Z", "type": "commit"}, {"oid": "17ffc98476fb5758bb156139fac3d1bc80639c84", "url": "https://github.com/elastic/elasticsearch/commit/17ffc98476fb5758bb156139fac3d1bc80639c84", "message": "Prohibit shrinking the write index", "committedDate": "2020-06-04T13:39:40Z", "type": "commit"}, {"oid": "2845d59edeaf13ff1cbfb6638878906dea939d99", "url": "https://github.com/elastic/elasticsearch/commit/2845d59edeaf13ff1cbfb6638878906dea939d99", "message": "Update assertion to not allow renaming of the write index", "committedDate": "2020-06-04T13:50:03Z", "type": "commit"}, {"oid": "8ce25f092845413761178ed8d3b6ce6e5a7d56d8", "url": "https://github.com/elastic/elasticsearch/commit/8ce25f092845413761178ed8d3b6ce6e5a7d56d8", "message": "Merge branch 'master' into ilm-shrink-datastream", "committedDate": "2020-06-04T13:54:44Z", "type": "commit"}, {"oid": "8dde7af20939177307ffc4fce883d61899d18062", "url": "https://github.com/elastic/elasticsearch/commit/8dde7af20939177307ffc4fce883d61899d18062", "message": "Fix line length", "committedDate": "2020-06-04T14:18:31Z", "type": "commit"}, {"oid": "96857c086a5e0ce8fdab6e9eb473144eab036c1a", "url": "https://github.com/elastic/elasticsearch/commit/96857c086a5e0ce8fdab6e9eb473144eab036c1a", "message": "Extract `createFullPolicy` into TimeSeriesRestDriver", "committedDate": "2020-06-04T17:09:10Z", "type": "commit"}, {"oid": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "url": "https://github.com/elastic/elasticsearch/commit/0ab909d960da5e44c78db1bf9d2309df57944b4f", "message": "Validate write index target on first conditional shrink step", "committedDate": "2020-06-04T17:15:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435432571", "bodyText": "we still need to be lenient here as, in the case where we're replacing a backing index with one that has a prefix, the source backing index will be detected as a conflict (it'll usually be the case, thinking of shrinking and searchable snapshot indices, that we'll promptly delete the source backing index so this is a temporary state)", "author": "andreidan", "createdAt": "2020-06-04T17:37:56Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/Metadata.java", "diffHunk": "@@ -1463,7 +1463,7 @@ private void validateDataStreams(SortedMap<String, IndexAbstraction> indicesLook\n                         List<String> conflicts = new ArrayList<>();\n                         for (Map.Entry<String, IndexAbstraction> entry : potentialConflicts.entrySet()) {\n                             if (entry.getValue().getType() != IndexAbstraction.Type.CONCRETE_INDEX ||\n-                                indexNames.contains(entry.getKey()) == false) {\n+                                indexNames.stream().noneMatch(name -> name.endsWith(entry.getKey()))) {", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Nzk2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435477965", "bodyText": "Wouldn't an index with a prefix not be identified as a potential conflict since it no longer starts with ds.getName()?", "author": "danhermann", "createdAt": "2020-06-04T18:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTYzNg==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435581636", "bodyText": "This code is a bit difficult to read (in that it's difficult for me to understand what we're validating, and also exactly what we're checking for), I think some comments would be really helpful to signal behavior and intent, can you add comments for this (especially so it doesn't get reverted in the future)?", "author": "dakrone", "createdAt": "2020-06-04T22:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg0Mjk5NA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435842994", "bodyText": "I agree completely.\nSo the reason why this needed relaxing was that we're setting a new DataStream after we replaced the original index. So from the Metadata's perspective we're trying to add a DataStream with backing indices\n[shrink-foo-000001, foo-000002]\n\nwhile the index we replaced foo-000001 is not part of any DataStream anymore.\n@danhermann the potentialConflicts will contain foo-000001 because the ds.getName in this case is foo.\nIterating a this a bit more I believe we can document it better or question this validation entirely? What is it trying to prevent? Accidentally adding indices to a data stream si not possible so is it so that users don't run into an index already exists error when a backing index is rolled over?\nWhat do you think @danhermann @dakrone ?", "author": "andreidan", "createdAt": "2020-06-05T10:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5MDU3OA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435890578", "bodyText": "@andreidan, ah, thanks for the explanation. The original purpose of that validation was to prevent name collisions on rollover as you suggested. I have a PR out (#57721) that changes the naming convention and I believe that will resolve this issue.", "author": "danhermann", "createdAt": "2020-06-05T12:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5MzA3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435893076", "bodyText": "Hmm, even with the naming change above, we'll still have the problem since ILM may be removing an index with the new naming scheme. I'll have to think about this one.", "author": "danhermann", "createdAt": "2020-06-05T12:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTU5NA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435895594", "bodyText": "@danhermann Thanks for pointing out #57721. I believe this problem will persist even with this PR in place.\nSo after 57221 is merged, shrinking a backing index of a DataStream will atempt to create a DataStream with backing indices\n[shrink-.ds-foo-000001, .ds-foo-000002]\n\nwhile, at least temporary, index ds-foo-000001 will still be found in the index lookup (as we're deleting it in a later step).\nUnless I'm missing something I think we still need to keep the updated validation as shown in this PR (or a different/better way? I'm a bit out of ideas on this one)\nI just pushed some documentation for the validation to (hopefully) make reasoning about it easier", "author": "andreidan", "createdAt": "2020-06-05T12:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMDM5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435900399", "bodyText": "Maybe we can change the validation to look at the names in potentialConflicts and flag them only if they would conflict  with a future rollover, i.e., with a number > the current generation.", "author": "danhermann", "createdAt": "2020-06-05T12:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNzE5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435917195", "bodyText": "That's an interesting idea. Shall we do this in a separate PR to keep the scope of this (already rather large) PR manageable?", "author": "andreidan", "createdAt": "2020-06-05T13:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzcyNw==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r436047727", "bodyText": "Opened #57750 for the validation change", "author": "andreidan", "createdAt": "2020-06-05T17:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5ODM2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r436598363", "bodyText": "#57750 has been merged to master and I just merged master into this branch", "author": "andreidan", "createdAt": "2020-06-08T10:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMjc4MA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435432780", "bodyText": "this is just formatting", "author": "andreidan", "createdAt": "2020-06-04T17:38:16Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/BranchingStep.java", "diffHunk": "@@ -49,17 +49,22 @@ public BranchingStep(StepKey key, StepKey nextStepKeyOnFalse, StepKey nextStepKe\n         this.predicateValue = new SetOnce<>();\n     }\n \n-   @Override\n-   public ClusterState performAction(Index index, ClusterState clusterState) {\n-       IndexMetadata indexMetadata = clusterState.metadata().index(index);\n-       if (indexMetadata == null) {\n-           // Index must have been since deleted, ignore it\n-           logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n-           return clusterState;\n-       }\n-       predicateValue.set(predicate.test(index, clusterState));\n-       return clusterState;\n-   }\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public ClusterState performAction(Index index, ClusterState clusterState) {\n+        IndexMetadata indexMetadata = clusterState.metadata().index(index);\n+        if (indexMetadata == null) {\n+            // Index must have been since deleted, ignore it\n+            logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", getKey().getAction(), index.getName());\n+            return clusterState;\n+        }\n+        predicateValue.set(predicate.test(index, clusterState));\n+        return clusterState;\n+    }", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4Mzg3OA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435583878", "bodyText": "I think just to be safe we need a null check for these two here, probably with a better message than an NPE further down the line", "author": "dakrone", "createdAt": "2020-06-04T22:19:33Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/ReplaceDataStreamBackingIndexStep.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexAbstraction;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.index.Index;\n+\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+/**\n+ * This step replaces a data stream backing index with the target index, as part of the data stream's backing indices.\n+ * Eg. if data stream `foo-stream` is backed by indices [`foo-stream-000001`, `foo-stream-000002`] and we'd like to replace the first\n+ * generation index, `foo-stream-000001`, with `shrink-foo-stream-000001`, after this step the `foo-stream` data stream will contain\n+ * the following indices\n+ * <p>\n+ * [`shrink-foo-stream-000001`, `foo-stream-000002`]\n+ * <p>\n+ * The `foo-stream-000001` index will continue to exist but will not be part of the data stream anymore.\n+ * <p>\n+ * As the last generation is the write index of the data stream, replacing the last generation index is not allowed.\n+ * <p>\n+ * This is useful in scenarios following a restore from snapshot operation where the restored index will take the place of the source\n+ * index in the ILM lifecycle or in the case where we shrink an index and the shrunk index will take the place of the original index.\n+ */\n+public class ReplaceDataStreamBackingIndexStep extends ClusterStateActionStep {\n+    public static final String NAME = \"replace-datastream-backing-index\";\n+    private static final Logger logger = LogManager.getLogger(ReplaceDataStreamBackingIndexStep.class);\n+\n+    private final String targetIndexPrefix;\n+\n+    public ReplaceDataStreamBackingIndexStep(StepKey key, StepKey nextStepKey, String targetIndexPrefix) {\n+        super(key, nextStepKey);\n+        this.targetIndexPrefix = targetIndexPrefix;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    public String getTargetIndexPrefix() {\n+        return targetIndexPrefix;\n+    }\n+\n+    @Override\n+    public ClusterState performAction(Index index, ClusterState clusterState) {\n+        String originalIndex = index.getName();\n+        final String targetIndexName = targetIndexPrefix + originalIndex;\n+        IndexMetadata targetIndexMetadata = clusterState.metadata().index(targetIndexName);\n+\n+        IndexMetadata originalIndexMetadata = clusterState.metadata().index(index);", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDc1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435584757", "bodyText": "Ah I see you already have a null check for the target, we should check the original also (and maybe move the existing null check up here so it doesn't accidentally get used and cause an NPE?)", "author": "dakrone", "createdAt": "2020-06-04T22:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4Mzg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxNzA2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435817066", "bodyText": "for ClusterStateActionSteps we don't do this check as the ExecuteStepsUpdateTask performs it before calling performAction.\nI think it's alright to keep this as it is for consistency reasons or otherwise update all ClusterStateActionSteps.\nWhat do you think?", "author": "andreidan", "createdAt": "2020-06-05T09:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4Mzg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzc1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435823756", "bodyText": "Ah, I misread this, I'll add the check to the step. ExecuteStepsUpdateTask does indeed perform the check too, but we do indeed test in every step.", "author": "andreidan", "createdAt": "2020-06-05T10:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4Mzg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTY5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435585696", "bodyText": "We usually have a null check here for indices that have been deleted immediately prior to this execution", "author": "dakrone", "createdAt": "2020-06-04T22:24:59Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/ShrinkAction.java", "diffHunk": "@@ -85,31 +96,77 @@ public boolean isSafeAction() {\n     public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {\n         Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n \n-        StepKey branchingKey = new StepKey(phase, NAME, BranchingStep.NAME);\n+        StepKey preShrinkBranchingKey = new StepKey(phase, NAME, CONDITIONAL_SKIP_SHRINK_STEP);\n         StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);\n         StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n         StepKey setSingleNodeKey = new StepKey(phase, NAME, SetSingleNodeAllocateStep.NAME);\n         StepKey allocationRoutedKey = new StepKey(phase, NAME, CheckShrinkReadyStep.NAME);\n         StepKey shrinkKey = new StepKey(phase, NAME, ShrinkStep.NAME);\n         StepKey enoughShardsKey = new StepKey(phase, NAME, ShrunkShardsAllocatedStep.NAME);\n         StepKey copyMetadataKey = new StepKey(phase, NAME, CopyExecutionStateStep.NAME);\n+        StepKey dataStreamCheckBranchingKey = new StepKey(phase, NAME, CONDITIONAL_DATASTREAM_CHECK_KEY);\n         StepKey aliasKey = new StepKey(phase, NAME, ShrinkSetAliasStep.NAME);\n         StepKey isShrunkIndexKey = new StepKey(phase, NAME, ShrunkenIndexCheckStep.NAME);\n+        StepKey replaceDataStreamIndexKey = new StepKey(phase, NAME, ReplaceDataStreamBackingIndexStep.NAME);\n+        StepKey deleteIndexKey = new StepKey(phase, NAME, DeleteStep.NAME);\n \n-        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,\n-            (index, clusterState) -> clusterState.getMetadata().index(index).getNumberOfShards() == numberOfShards);\n+        BranchingStep conditionalSkipShrinkStep = new BranchingStep(preShrinkBranchingKey, waitForNoFollowerStepKey, nextStepKey,\n+            getSkipShrinkStepPredicate(numberOfShards));\n         WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);\n         UpdateSettingsStep readOnlyStep = new UpdateSettingsStep(readOnlyKey, setSingleNodeKey, client, readOnlySettings);\n         SetSingleNodeAllocateStep setSingleNodeStep = new SetSingleNodeAllocateStep(setSingleNodeKey, allocationRoutedKey, client);\n         CheckShrinkReadyStep checkShrinkReadyStep = new CheckShrinkReadyStep(allocationRoutedKey, shrinkKey);\n         ShrinkStep shrink = new ShrinkStep(shrinkKey, enoughShardsKey, client, numberOfShards, SHRUNKEN_INDEX_PREFIX);\n         ShrunkShardsAllocatedStep allocated = new ShrunkShardsAllocatedStep(enoughShardsKey, copyMetadataKey, SHRUNKEN_INDEX_PREFIX);\n-        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, aliasKey, SHRUNKEN_INDEX_PREFIX,\n-            ShrunkenIndexCheckStep.NAME);\n+        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, dataStreamCheckBranchingKey,\n+            SHRUNKEN_INDEX_PREFIX, ShrunkenIndexCheckStep.NAME);\n+        // by the time we get to this step we have 2 indices, the source and the shrunken one. we now need to choose an index\n+        // swapping strategy such that the shrunken index takes the place of the source index (which is also deleted).\n+        // if the source index is part of a data stream it's a matter of replacing it with the shrunken index one in the data stream and\n+        // then deleting the source index; otherwise we'll use the alias management api to atomically transfer the aliases from source to\n+        // the shrunken index and delete the source\n+        BranchingStep isDataStreamBranchingStep = new BranchingStep(dataStreamCheckBranchingKey, aliasKey, replaceDataStreamIndexKey,\n+            (index, clusterState) -> {\n+                IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n+                assert indexAbstraction != null : \"invalid cluster metadata. index [\" + index.getName() + \"] was not found\";\n+                return indexAbstraction.getParentDataStream() != null;\n+            });\n         ShrinkSetAliasStep aliasSwapAndDelete = new ShrinkSetAliasStep(aliasKey, isShrunkIndexKey, client, SHRUNKEN_INDEX_PREFIX);\n+        ReplaceDataStreamBackingIndexStep replaceDataStreamBackingIndex = new ReplaceDataStreamBackingIndexStep(replaceDataStreamIndexKey,\n+            deleteIndexKey, SHRUNKEN_INDEX_PREFIX);\n+        DeleteStep deleteSourceIndexStep = new DeleteStep(deleteIndexKey, isShrunkIndexKey, client);\n         ShrunkenIndexCheckStep waitOnShrinkTakeover = new ShrunkenIndexCheckStep(isShrunkIndexKey, nextStepKey, SHRUNKEN_INDEX_PREFIX);\n         return Arrays.asList(conditionalSkipShrinkStep, waitForNoFollowersStep, readOnlyStep, setSingleNodeStep, checkShrinkReadyStep,\n-            shrink, allocated, copyMetadata, aliasSwapAndDelete, waitOnShrinkTakeover);\n+            shrink, allocated, copyMetadata, isDataStreamBranchingStep, aliasSwapAndDelete, waitOnShrinkTakeover,\n+            replaceDataStreamBackingIndex, deleteSourceIndexStep);\n+    }\n+\n+    static BiPredicate<Index, ClusterState> getSkipShrinkStepPredicate(int targetNumberOfShards) {\n+        return (index, clusterState) -> {\n+            IndexMetadata indexMetadata = clusterState.getMetadata().index(index);", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxNTExNg==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435815116", "bodyText": "the BranchingStep performs this check before testing the predicate. I'll add it here as well for readability purposes and because this predicate has semantics on its own, irrespective of ILM steps", "author": "andreidan", "createdAt": "2020-06-05T09:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NjIxNg==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435586216", "bodyText": "I think rather than wrapping and all that, you can do:\nif (indexMetadata.getNumberOfShards() == targetNumberOfShards) {\n    return true;\n}\n\nAnd then not have to wrap the below parts", "author": "dakrone", "createdAt": "2020-06-04T22:26:27Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/ShrinkAction.java", "diffHunk": "@@ -85,31 +96,77 @@ public boolean isSafeAction() {\n     public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {\n         Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n \n-        StepKey branchingKey = new StepKey(phase, NAME, BranchingStep.NAME);\n+        StepKey preShrinkBranchingKey = new StepKey(phase, NAME, CONDITIONAL_SKIP_SHRINK_STEP);\n         StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);\n         StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n         StepKey setSingleNodeKey = new StepKey(phase, NAME, SetSingleNodeAllocateStep.NAME);\n         StepKey allocationRoutedKey = new StepKey(phase, NAME, CheckShrinkReadyStep.NAME);\n         StepKey shrinkKey = new StepKey(phase, NAME, ShrinkStep.NAME);\n         StepKey enoughShardsKey = new StepKey(phase, NAME, ShrunkShardsAllocatedStep.NAME);\n         StepKey copyMetadataKey = new StepKey(phase, NAME, CopyExecutionStateStep.NAME);\n+        StepKey dataStreamCheckBranchingKey = new StepKey(phase, NAME, CONDITIONAL_DATASTREAM_CHECK_KEY);\n         StepKey aliasKey = new StepKey(phase, NAME, ShrinkSetAliasStep.NAME);\n         StepKey isShrunkIndexKey = new StepKey(phase, NAME, ShrunkenIndexCheckStep.NAME);\n+        StepKey replaceDataStreamIndexKey = new StepKey(phase, NAME, ReplaceDataStreamBackingIndexStep.NAME);\n+        StepKey deleteIndexKey = new StepKey(phase, NAME, DeleteStep.NAME);\n \n-        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,\n-            (index, clusterState) -> clusterState.getMetadata().index(index).getNumberOfShards() == numberOfShards);\n+        BranchingStep conditionalSkipShrinkStep = new BranchingStep(preShrinkBranchingKey, waitForNoFollowerStepKey, nextStepKey,\n+            getSkipShrinkStepPredicate(numberOfShards));\n         WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);\n         UpdateSettingsStep readOnlyStep = new UpdateSettingsStep(readOnlyKey, setSingleNodeKey, client, readOnlySettings);\n         SetSingleNodeAllocateStep setSingleNodeStep = new SetSingleNodeAllocateStep(setSingleNodeKey, allocationRoutedKey, client);\n         CheckShrinkReadyStep checkShrinkReadyStep = new CheckShrinkReadyStep(allocationRoutedKey, shrinkKey);\n         ShrinkStep shrink = new ShrinkStep(shrinkKey, enoughShardsKey, client, numberOfShards, SHRUNKEN_INDEX_PREFIX);\n         ShrunkShardsAllocatedStep allocated = new ShrunkShardsAllocatedStep(enoughShardsKey, copyMetadataKey, SHRUNKEN_INDEX_PREFIX);\n-        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, aliasKey, SHRUNKEN_INDEX_PREFIX,\n-            ShrunkenIndexCheckStep.NAME);\n+        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, dataStreamCheckBranchingKey,\n+            SHRUNKEN_INDEX_PREFIX, ShrunkenIndexCheckStep.NAME);\n+        // by the time we get to this step we have 2 indices, the source and the shrunken one. we now need to choose an index\n+        // swapping strategy such that the shrunken index takes the place of the source index (which is also deleted).\n+        // if the source index is part of a data stream it's a matter of replacing it with the shrunken index one in the data stream and\n+        // then deleting the source index; otherwise we'll use the alias management api to atomically transfer the aliases from source to\n+        // the shrunken index and delete the source\n+        BranchingStep isDataStreamBranchingStep = new BranchingStep(dataStreamCheckBranchingKey, aliasKey, replaceDataStreamIndexKey,\n+            (index, clusterState) -> {\n+                IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n+                assert indexAbstraction != null : \"invalid cluster metadata. index [\" + index.getName() + \"] was not found\";\n+                return indexAbstraction.getParentDataStream() != null;\n+            });\n         ShrinkSetAliasStep aliasSwapAndDelete = new ShrinkSetAliasStep(aliasKey, isShrunkIndexKey, client, SHRUNKEN_INDEX_PREFIX);\n+        ReplaceDataStreamBackingIndexStep replaceDataStreamBackingIndex = new ReplaceDataStreamBackingIndexStep(replaceDataStreamIndexKey,\n+            deleteIndexKey, SHRUNKEN_INDEX_PREFIX);\n+        DeleteStep deleteSourceIndexStep = new DeleteStep(deleteIndexKey, isShrunkIndexKey, client);\n         ShrunkenIndexCheckStep waitOnShrinkTakeover = new ShrunkenIndexCheckStep(isShrunkIndexKey, nextStepKey, SHRUNKEN_INDEX_PREFIX);\n         return Arrays.asList(conditionalSkipShrinkStep, waitForNoFollowersStep, readOnlyStep, setSingleNodeStep, checkShrinkReadyStep,\n-            shrink, allocated, copyMetadata, aliasSwapAndDelete, waitOnShrinkTakeover);\n+            shrink, allocated, copyMetadata, isDataStreamBranchingStep, aliasSwapAndDelete, waitOnShrinkTakeover,\n+            replaceDataStreamBackingIndex, deleteSourceIndexStep);\n+    }\n+\n+    static BiPredicate<Index, ClusterState> getSkipShrinkStepPredicate(int targetNumberOfShards) {\n+        return (index, clusterState) -> {\n+            IndexMetadata indexMetadata = clusterState.getMetadata().index(index);\n+            boolean skipShrink = indexMetadata.getNumberOfShards() == targetNumberOfShards;\n+\n+            if (skipShrink == false) {", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NzExNg==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435587116", "bodyText": "I think this can happen if the index was deleted, it would be good to check whether the index's metadata still exists in the cluster state, and just moving on otherwise (we have this check in our other ClusterStateActionSteps)", "author": "dakrone", "createdAt": "2020-06-04T22:29:04Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/ShrinkAction.java", "diffHunk": "@@ -85,31 +96,77 @@ public boolean isSafeAction() {\n     public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {\n         Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n \n-        StepKey branchingKey = new StepKey(phase, NAME, BranchingStep.NAME);\n+        StepKey preShrinkBranchingKey = new StepKey(phase, NAME, CONDITIONAL_SKIP_SHRINK_STEP);\n         StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);\n         StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n         StepKey setSingleNodeKey = new StepKey(phase, NAME, SetSingleNodeAllocateStep.NAME);\n         StepKey allocationRoutedKey = new StepKey(phase, NAME, CheckShrinkReadyStep.NAME);\n         StepKey shrinkKey = new StepKey(phase, NAME, ShrinkStep.NAME);\n         StepKey enoughShardsKey = new StepKey(phase, NAME, ShrunkShardsAllocatedStep.NAME);\n         StepKey copyMetadataKey = new StepKey(phase, NAME, CopyExecutionStateStep.NAME);\n+        StepKey dataStreamCheckBranchingKey = new StepKey(phase, NAME, CONDITIONAL_DATASTREAM_CHECK_KEY);\n         StepKey aliasKey = new StepKey(phase, NAME, ShrinkSetAliasStep.NAME);\n         StepKey isShrunkIndexKey = new StepKey(phase, NAME, ShrunkenIndexCheckStep.NAME);\n+        StepKey replaceDataStreamIndexKey = new StepKey(phase, NAME, ReplaceDataStreamBackingIndexStep.NAME);\n+        StepKey deleteIndexKey = new StepKey(phase, NAME, DeleteStep.NAME);\n \n-        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,\n-            (index, clusterState) -> clusterState.getMetadata().index(index).getNumberOfShards() == numberOfShards);\n+        BranchingStep conditionalSkipShrinkStep = new BranchingStep(preShrinkBranchingKey, waitForNoFollowerStepKey, nextStepKey,\n+            getSkipShrinkStepPredicate(numberOfShards));\n         WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);\n         UpdateSettingsStep readOnlyStep = new UpdateSettingsStep(readOnlyKey, setSingleNodeKey, client, readOnlySettings);\n         SetSingleNodeAllocateStep setSingleNodeStep = new SetSingleNodeAllocateStep(setSingleNodeKey, allocationRoutedKey, client);\n         CheckShrinkReadyStep checkShrinkReadyStep = new CheckShrinkReadyStep(allocationRoutedKey, shrinkKey);\n         ShrinkStep shrink = new ShrinkStep(shrinkKey, enoughShardsKey, client, numberOfShards, SHRUNKEN_INDEX_PREFIX);\n         ShrunkShardsAllocatedStep allocated = new ShrunkShardsAllocatedStep(enoughShardsKey, copyMetadataKey, SHRUNKEN_INDEX_PREFIX);\n-        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, aliasKey, SHRUNKEN_INDEX_PREFIX,\n-            ShrunkenIndexCheckStep.NAME);\n+        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, dataStreamCheckBranchingKey,\n+            SHRUNKEN_INDEX_PREFIX, ShrunkenIndexCheckStep.NAME);\n+        // by the time we get to this step we have 2 indices, the source and the shrunken one. we now need to choose an index\n+        // swapping strategy such that the shrunken index takes the place of the source index (which is also deleted).\n+        // if the source index is part of a data stream it's a matter of replacing it with the shrunken index one in the data stream and\n+        // then deleting the source index; otherwise we'll use the alias management api to atomically transfer the aliases from source to\n+        // the shrunken index and delete the source\n+        BranchingStep isDataStreamBranchingStep = new BranchingStep(dataStreamCheckBranchingKey, aliasKey, replaceDataStreamIndexKey,\n+            (index, clusterState) -> {\n+                IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n+                assert indexAbstraction != null : \"invalid cluster metadata. index [\" + index.getName() + \"] was not found\";", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzNjE3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435836175", "bodyText": "I think we'll have to rely on the check that is executed in the BranchingStep here as we can't decide if the predicate should be true or false in this case (and throwing an exception would keep ILM on this step and keep retrying it)", "author": "andreidan", "createdAt": "2020-06-05T10:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NzExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4ODg5NA==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435588894", "bodyText": "I think (but I'm not sure), that this might fail for the alias case, because the index will already have been deleted in the ShrinkSetAliasStep, so we may need changes in DeleteStep to ignore deleting an index that doesn't exist", "author": "dakrone", "createdAt": "2020-06-04T22:33:55Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/ShrinkAction.java", "diffHunk": "@@ -85,31 +96,77 @@ public boolean isSafeAction() {\n     public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {\n         Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n \n-        StepKey branchingKey = new StepKey(phase, NAME, BranchingStep.NAME);\n+        StepKey preShrinkBranchingKey = new StepKey(phase, NAME, CONDITIONAL_SKIP_SHRINK_STEP);\n         StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);\n         StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n         StepKey setSingleNodeKey = new StepKey(phase, NAME, SetSingleNodeAllocateStep.NAME);\n         StepKey allocationRoutedKey = new StepKey(phase, NAME, CheckShrinkReadyStep.NAME);\n         StepKey shrinkKey = new StepKey(phase, NAME, ShrinkStep.NAME);\n         StepKey enoughShardsKey = new StepKey(phase, NAME, ShrunkShardsAllocatedStep.NAME);\n         StepKey copyMetadataKey = new StepKey(phase, NAME, CopyExecutionStateStep.NAME);\n+        StepKey dataStreamCheckBranchingKey = new StepKey(phase, NAME, CONDITIONAL_DATASTREAM_CHECK_KEY);\n         StepKey aliasKey = new StepKey(phase, NAME, ShrinkSetAliasStep.NAME);\n         StepKey isShrunkIndexKey = new StepKey(phase, NAME, ShrunkenIndexCheckStep.NAME);\n+        StepKey replaceDataStreamIndexKey = new StepKey(phase, NAME, ReplaceDataStreamBackingIndexStep.NAME);\n+        StepKey deleteIndexKey = new StepKey(phase, NAME, DeleteStep.NAME);\n \n-        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,\n-            (index, clusterState) -> clusterState.getMetadata().index(index).getNumberOfShards() == numberOfShards);\n+        BranchingStep conditionalSkipShrinkStep = new BranchingStep(preShrinkBranchingKey, waitForNoFollowerStepKey, nextStepKey,\n+            getSkipShrinkStepPredicate(numberOfShards));\n         WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);\n         UpdateSettingsStep readOnlyStep = new UpdateSettingsStep(readOnlyKey, setSingleNodeKey, client, readOnlySettings);\n         SetSingleNodeAllocateStep setSingleNodeStep = new SetSingleNodeAllocateStep(setSingleNodeKey, allocationRoutedKey, client);\n         CheckShrinkReadyStep checkShrinkReadyStep = new CheckShrinkReadyStep(allocationRoutedKey, shrinkKey);\n         ShrinkStep shrink = new ShrinkStep(shrinkKey, enoughShardsKey, client, numberOfShards, SHRUNKEN_INDEX_PREFIX);\n         ShrunkShardsAllocatedStep allocated = new ShrunkShardsAllocatedStep(enoughShardsKey, copyMetadataKey, SHRUNKEN_INDEX_PREFIX);\n-        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, aliasKey, SHRUNKEN_INDEX_PREFIX,\n-            ShrunkenIndexCheckStep.NAME);\n+        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, dataStreamCheckBranchingKey,\n+            SHRUNKEN_INDEX_PREFIX, ShrunkenIndexCheckStep.NAME);\n+        // by the time we get to this step we have 2 indices, the source and the shrunken one. we now need to choose an index\n+        // swapping strategy such that the shrunken index takes the place of the source index (which is also deleted).\n+        // if the source index is part of a data stream it's a matter of replacing it with the shrunken index one in the data stream and\n+        // then deleting the source index; otherwise we'll use the alias management api to atomically transfer the aliases from source to\n+        // the shrunken index and delete the source\n+        BranchingStep isDataStreamBranchingStep = new BranchingStep(dataStreamCheckBranchingKey, aliasKey, replaceDataStreamIndexKey,\n+            (index, clusterState) -> {\n+                IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n+                assert indexAbstraction != null : \"invalid cluster metadata. index [\" + index.getName() + \"] was not found\";\n+                return indexAbstraction.getParentDataStream() != null;\n+            });\n         ShrinkSetAliasStep aliasSwapAndDelete = new ShrinkSetAliasStep(aliasKey, isShrunkIndexKey, client, SHRUNKEN_INDEX_PREFIX);\n+        ReplaceDataStreamBackingIndexStep replaceDataStreamBackingIndex = new ReplaceDataStreamBackingIndexStep(replaceDataStreamIndexKey,\n+            deleteIndexKey, SHRUNKEN_INDEX_PREFIX);\n+        DeleteStep deleteSourceIndexStep = new DeleteStep(deleteIndexKey, isShrunkIndexKey, client);", "originalCommit": "0ab909d960da5e44c78db1bf9d2309df57944b4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNDczOQ==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r435824739", "bodyText": "on the non-data stream branch (ie. the alias handling) we don't try to delete the index using this step as the alias swap will delete it. This step is only used on the data stream handling branch, after the replace-datastream-backing-index step\n        ShrinkSetAliasStep aliasSwapAndDelete = new ShrinkSetAliasStep(aliasKey, isShrunkIndexKey, client, SHRUNKEN_INDEX_PREFIX);\n\nThe isShrunkIndexKey step is next on the alias handling branch.", "author": "andreidan", "createdAt": "2020-06-05T10:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4ODg5NA=="}], "type": "inlineReview"}, {"oid": "dcb97055b987aa35f7ba44e570de543a3d64b71a", "url": "https://github.com/elastic/elasticsearch/commit/dcb97055b987aa35f7ba44e570de543a3d64b71a", "message": "Add checks for index missing", "committedDate": "2020-06-05T10:53:34Z", "type": "commit"}, {"oid": "e3a2a20f6a632496e93ef31ab8e67de0f71b34ea", "url": "https://github.com/elastic/elasticsearch/commit/e3a2a20f6a632496e93ef31ab8e67de0f71b34ea", "message": "Document eased of validation for backing indices naming", "committedDate": "2020-06-05T12:37:09Z", "type": "commit"}, {"oid": "ac6b0f0509e5d1e81247d78f143f162f1f13b4f0", "url": "https://github.com/elastic/elasticsearch/commit/ac6b0f0509e5d1e81247d78f143f162f1f13b4f0", "message": "Merge branch 'master' into ilm-shrink-datastream", "committedDate": "2020-06-08T10:18:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDcxNg==", "url": "https://github.com/elastic/elasticsearch/pull/57616#discussion_r437050716", "bodyText": "Super minor, but I think we should add a debug log that shrink is being skipped because the targeted number of shards has already been met", "author": "dakrone", "createdAt": "2020-06-08T23:12:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/ShrinkAction.java", "diffHunk": "@@ -85,31 +96,83 @@ public boolean isSafeAction() {\n     public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {\n         Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n \n-        StepKey branchingKey = new StepKey(phase, NAME, BranchingStep.NAME);\n+        StepKey preShrinkBranchingKey = new StepKey(phase, NAME, CONDITIONAL_SKIP_SHRINK_STEP);\n         StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);\n         StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n         StepKey setSingleNodeKey = new StepKey(phase, NAME, SetSingleNodeAllocateStep.NAME);\n         StepKey allocationRoutedKey = new StepKey(phase, NAME, CheckShrinkReadyStep.NAME);\n         StepKey shrinkKey = new StepKey(phase, NAME, ShrinkStep.NAME);\n         StepKey enoughShardsKey = new StepKey(phase, NAME, ShrunkShardsAllocatedStep.NAME);\n         StepKey copyMetadataKey = new StepKey(phase, NAME, CopyExecutionStateStep.NAME);\n+        StepKey dataStreamCheckBranchingKey = new StepKey(phase, NAME, CONDITIONAL_DATASTREAM_CHECK_KEY);\n         StepKey aliasKey = new StepKey(phase, NAME, ShrinkSetAliasStep.NAME);\n         StepKey isShrunkIndexKey = new StepKey(phase, NAME, ShrunkenIndexCheckStep.NAME);\n+        StepKey replaceDataStreamIndexKey = new StepKey(phase, NAME, ReplaceDataStreamBackingIndexStep.NAME);\n+        StepKey deleteIndexKey = new StepKey(phase, NAME, DeleteStep.NAME);\n \n-        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,\n-            (index, clusterState) -> clusterState.getMetadata().index(index).getNumberOfShards() == numberOfShards);\n+        BranchingStep conditionalSkipShrinkStep = new BranchingStep(preShrinkBranchingKey, waitForNoFollowerStepKey, nextStepKey,\n+            getSkipShrinkStepPredicate(numberOfShards));\n         WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);\n         UpdateSettingsStep readOnlyStep = new UpdateSettingsStep(readOnlyKey, setSingleNodeKey, client, readOnlySettings);\n         SetSingleNodeAllocateStep setSingleNodeStep = new SetSingleNodeAllocateStep(setSingleNodeKey, allocationRoutedKey, client);\n         CheckShrinkReadyStep checkShrinkReadyStep = new CheckShrinkReadyStep(allocationRoutedKey, shrinkKey);\n         ShrinkStep shrink = new ShrinkStep(shrinkKey, enoughShardsKey, client, numberOfShards, SHRUNKEN_INDEX_PREFIX);\n         ShrunkShardsAllocatedStep allocated = new ShrunkShardsAllocatedStep(enoughShardsKey, copyMetadataKey, SHRUNKEN_INDEX_PREFIX);\n-        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, aliasKey, SHRUNKEN_INDEX_PREFIX,\n-            ShrunkenIndexCheckStep.NAME);\n+        CopyExecutionStateStep copyMetadata = new CopyExecutionStateStep(copyMetadataKey, dataStreamCheckBranchingKey,\n+            SHRUNKEN_INDEX_PREFIX, ShrunkenIndexCheckStep.NAME);\n+        // by the time we get to this step we have 2 indices, the source and the shrunken one. we now need to choose an index\n+        // swapping strategy such that the shrunken index takes the place of the source index (which is also deleted).\n+        // if the source index is part of a data stream it's a matter of replacing it with the shrunken index one in the data stream and\n+        // then deleting the source index; otherwise we'll use the alias management api to atomically transfer the aliases from source to\n+        // the shrunken index and delete the source\n+        BranchingStep isDataStreamBranchingStep = new BranchingStep(dataStreamCheckBranchingKey, aliasKey, replaceDataStreamIndexKey,\n+            (index, clusterState) -> {\n+                IndexAbstraction indexAbstraction = clusterState.metadata().getIndicesLookup().get(index.getName());\n+                assert indexAbstraction != null : \"invalid cluster metadata. index [\" + index.getName() + \"] was not found\";\n+                return indexAbstraction.getParentDataStream() != null;\n+            });\n         ShrinkSetAliasStep aliasSwapAndDelete = new ShrinkSetAliasStep(aliasKey, isShrunkIndexKey, client, SHRUNKEN_INDEX_PREFIX);\n+        ReplaceDataStreamBackingIndexStep replaceDataStreamBackingIndex = new ReplaceDataStreamBackingIndexStep(replaceDataStreamIndexKey,\n+            deleteIndexKey, SHRUNKEN_INDEX_PREFIX);\n+        DeleteStep deleteSourceIndexStep = new DeleteStep(deleteIndexKey, isShrunkIndexKey, client);\n         ShrunkenIndexCheckStep waitOnShrinkTakeover = new ShrunkenIndexCheckStep(isShrunkIndexKey, nextStepKey, SHRUNKEN_INDEX_PREFIX);\n         return Arrays.asList(conditionalSkipShrinkStep, waitForNoFollowersStep, readOnlyStep, setSingleNodeStep, checkShrinkReadyStep,\n-            shrink, allocated, copyMetadata, aliasSwapAndDelete, waitOnShrinkTakeover);\n+            shrink, allocated, copyMetadata, isDataStreamBranchingStep, aliasSwapAndDelete, waitOnShrinkTakeover,\n+            replaceDataStreamBackingIndex, deleteSourceIndexStep);\n+    }\n+\n+    static BiPredicate<Index, ClusterState> getSkipShrinkStepPredicate(int targetNumberOfShards) {\n+        return (index, clusterState) -> {\n+            IndexMetadata indexMetadata = clusterState.getMetadata().index(index);\n+            if (indexMetadata == null) {\n+                // Index must have been since deleted, skip the shrink action\n+                logger.debug(\"[{}] lifecycle action for index [{}] executed but index no longer exists\", NAME, index.getName());\n+                return true;\n+            }\n+\n+            if (indexMetadata.getNumberOfShards() == targetNumberOfShards) {\n+                return true;", "originalCommit": "ac6b0f0509e5d1e81247d78f143f162f1f13b4f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f68429427dce129ac244beb3b4254b50eb775f11", "url": "https://github.com/elastic/elasticsearch/commit/f68429427dce129ac244beb3b4254b50eb775f11", "message": "Debug log when skipping Shrink action", "committedDate": "2020-06-09T09:03:43Z", "type": "commit"}, {"oid": "983232a118558670e5e217fe5d3549e66a17bb08", "url": "https://github.com/elastic/elasticsearch/commit/983232a118558670e5e217fe5d3549e66a17bb08", "message": "Merge branch 'master' into ilm-shrink-datastream", "committedDate": "2020-06-09T09:10:52Z", "type": "commit"}, {"oid": "cc929c99c869cc0adf916962218eb62eec4b7eba", "url": "https://github.com/elastic/elasticsearch/commit/cc929c99c869cc0adf916962218eb62eec4b7eba", "message": "Fix master merge", "committedDate": "2020-06-09T09:13:18Z", "type": "commit"}, {"oid": "86bff1d1d5bfb959d4bf45620efd6326a8a39f9e", "url": "https://github.com/elastic/elasticsearch/commit/86bff1d1d5bfb959d4bf45620efd6326a8a39f9e", "message": "Tests: use DataStream.getDefaultBackingIndexName", "committedDate": "2020-06-09T09:42:05Z", "type": "commit"}]}