{"pr_number": 57350, "pr_title": "Fix Local Translog Recovery not Updating Safe Commit in Edge Case", "pr_createdAt": "2020-05-29T11:23:56Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/57350", "timeline": [{"oid": "340b51b97685630b591dd5fc2cb0327aaded86f0", "url": "https://github.com/elastic/elasticsearch/commit/340b51b97685630b591dd5fc2cb0327aaded86f0", "message": "Fix Local Translog Recovery not Updating Safe Commit\n\nIn case the local checkpoint in the latest commit is less\nthan the last processed local checkpoint we would recover\n0 ops and hence not commit again.\nThis would lead to the logic in `IndexShard#recoverLocallyUpToGlobalCheckpoint`\nnot seeing the latest local checkpoint when it reload the safe commit from the store\nand thus cause inefficient recoveries because the recoveries would work from a\nlower than possible local checkpoint.\n\nCloses #57010", "committedDate": "2020-05-29T11:18:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTAwMw==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432421003", "bodyText": "Adjusted this because it's called more often now and translog.currentFileGeneration() actually does lock and create a ReleaseableLock instance", "author": "original-brownbear", "createdAt": "2020-05-29T11:24:59Z", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -485,11 +486,11 @@ private void recoverFromTranslogInternal(TranslogRecoveryRunner translogRecovery\n         // note: if opsRecovered == 0 and we have older translogs it means they are corrupted or 0 length.\n         assert pendingTranslogRecovery.get() : \"translogRecovery is not pending but should be\";\n         pendingTranslogRecovery.set(false); // we are good - now we can commit\n+        logger.trace(() -> new ParameterizedMessage(", "originalCommit": "340b51b97685630b591dd5fc2cb0327aaded86f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTg1NA==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432421854", "bodyText": "I kept this condition around the external refresh triggered here. Not sure if that optimization is necessary now to be honest, but removing it breaks a large number of unit tests that would now see two refreshes instead of one (since the flush also refreshes)", "author": "original-brownbear", "createdAt": "2020-05-29T11:26:55Z", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -485,11 +486,11 @@ private void recoverFromTranslogInternal(TranslogRecoveryRunner translogRecovery\n         // note: if opsRecovered == 0 and we have older translogs it means they are corrupted or 0 length.\n         assert pendingTranslogRecovery.get() : \"translogRecovery is not pending but should be\";\n         pendingTranslogRecovery.set(false); // we are good - now we can commit\n+        logger.trace(() -> new ParameterizedMessage(\n+                \"flushing post recovery from translog: ops recovered [{}], current translog generation [{}]\",\n+                opsRecovered, translog.currentFileGeneration()));\n+        flush(false, true);\n         if (opsRecovered > 0) {", "originalCommit": "340b51b97685630b591dd5fc2cb0327aaded86f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MzE0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432443149", "bodyText": "The refresh in the flush method is an internal refresh, not an external one. I don't think that the external refresh is actually necessary (we do the relevant refresh in IndexShard.postRecovery, which is called before moving the shard to started). What happens if you just remove the refresh call here?", "author": "ywelsch", "createdAt": "2020-05-29T12:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1MzYzMw==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432453633", "bodyText": "It breaks a few tests that relied on the external refresh when recovering from translog, but it's a manageable number. I'll adjust those and run a few iterations of tests to make sure I didn't miss a spot.", "author": "original-brownbear", "createdAt": "2020-05-29T12:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432422202", "bodyText": "We discussed this on AoN, we're now potentially rolling the translog redundantly one additional time during flush.", "author": "original-brownbear", "createdAt": "2020-05-29T11:27:47Z", "path": "server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java", "diffHunk": "@@ -1021,8 +1021,8 @@ private void finish() {\n                     assertNull(onFailure.get());\n                     assertThat(getTranslog(indexShard).getGeneration().translogFileGeneration,\n                         // if rollback happens we roll translog twice: one when we flush a commit before opening a read-only engine\n-                        // and one after replaying translog (upto the global checkpoint); otherwise we roll translog once.\n-                        either(equalTo(translogGen + 1)).or(equalTo(translogGen + 2)));\n+                        // and two or three times after replaying translog (upto the global checkpoint); otherwise we roll translog once.", "originalCommit": "340b51b97685630b591dd5fc2cb0327aaded86f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNTU5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432425591", "bodyText": "I looked at this, and think we can remove the redundant rollover with the following:\ndiff --cc server/src/main/java/org/elasticsearch/index/translog/Translog.java\nindex 0a8e38816fa,0a8e38816fa..60375d5b485\n--- a/server/src/main/java/org/elasticsearch/index/translog/Translog.java\n+++ b/server/src/main/java/org/elasticsearch/index/translog/Translog.java\n@@@ -1615,13 -1615,13 +1615,17 @@@ public class Translog extends AbstractI\n      }\n  \n      /**\n--     * Roll the current translog generation into a new generation. This does not commit the\n++     * Roll the current translog generation into a new generation if it's not empty. This does not commit the\n       * translog.\n       *\n       * @throws IOException if an I/O exception occurred during any file operations\n       */\n      public void rollGeneration() throws IOException {\n          syncBeforeRollGeneration();\n++        // no need to roll over when it's empty\n++        if (current.totalOperations() == 0) {\n++            return;\n++        }\n          try (Releasable ignored = writeLock.acquire()) {\n              ensureOpen();\n              try {\n\nThe reason we have the rollover in the first place is to make sue we no longer need to hold on to certain ops, or that we do not mix ops from different terms in the same generation. For  an empty translog generation, neither is necessary.", "author": "ywelsch", "createdAt": "2020-05-29T11:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MjQ5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432462491", "bodyText": "This works fine I think. The only adjustment I had to make is to also check if the primary term is still in sync with the current writer in addition to the operations.", "author": "original-brownbear", "createdAt": "2020-05-29T12:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNjI1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432436255", "bodyText": "This is very subtle, as the persisted local checkpoint is driven mainly by Translog fsyncing (even though both local checkpoints are initialized from what's in the safe commit), i.e. getPersistedLocalCheckpoint() means the local checkpoint last persisted by the translog, not Lucene. I'm inclined to instead use lastCommittedSegmentInfos.getUserData()... here and look at the actually last Lucene-persisted local checkpoint.", "author": "ywelsch", "createdAt": "2020-05-29T12:00:32Z", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -1654,10 +1655,12 @@ public void flush(boolean force, boolean waitIfOngoing) throws EngineException {\n             }\n             try {\n                 // Only flush if (1) Lucene has uncommitted docs, or (2) forced by caller, or (3) the\n-                // newly created commit points to a different translog generation (can free translog)\n+                // newly created commit points to a different translog generation (can free translog),\n+                // or (4) the processed local checkpoint is ahead of the local checkpoint tracked in the safe commit\n                 boolean hasUncommittedChanges = indexWriter.hasUncommittedChanges();\n                 boolean shouldPeriodicallyFlush = shouldPeriodicallyFlush();\n-                if (hasUncommittedChanges || force || shouldPeriodicallyFlush) {\n+                if (hasUncommittedChanges || force || shouldPeriodicallyFlush\n+                        || getProcessedLocalCheckpoint() > getPersistedLocalCheckpoint()) {", "originalCommit": "340b51b97685630b591dd5fc2cb0327aaded86f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MjkwOA==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432462908", "bodyText": "++ moved to reading it from the lastCommittedSegmentInfos", "author": "original-brownbear", "createdAt": "2020-05-29T12:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNjI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNzMxNQ==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432437315", "bodyText": "It's unclear what the safe commit is in the case of calling this method. Instead I would say something along the lines of:\n// or (4) the local checkpoint information in the last commit is stale, which slows down future recoveries.", "author": "ywelsch", "createdAt": "2020-05-29T12:03:05Z", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -1654,10 +1655,12 @@ public void flush(boolean force, boolean waitIfOngoing) throws EngineException {\n             }\n             try {\n                 // Only flush if (1) Lucene has uncommitted docs, or (2) forced by caller, or (3) the\n-                // newly created commit points to a different translog generation (can free translog)\n+                // newly created commit points to a different translog generation (can free translog),\n+                // or (4) the processed local checkpoint is ahead of the local checkpoint tracked in the safe commit", "originalCommit": "340b51b97685630b591dd5fc2cb0327aaded86f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "689a392977d91ce94a49a935e09fbc648d898901", "url": "https://github.com/elastic/elasticsearch/commit/689a392977d91ce94a49a935e09fbc648d898901", "message": "CR: comments", "committedDate": "2020-05-29T12:52:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NTk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/57350#discussion_r432555984", "bodyText": "I am a bit concerned about the locking order inflush (readLock -> flushLock) and recoverFromTranslog (flushLock -> readLock). I think we can remove the flushLock in recoverFromTranslog as it's safe to flush during recovery.", "author": "dnhatn", "createdAt": "2020-05-29T15:16:42Z", "path": "server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java", "diffHunk": "@@ -485,13 +486,10 @@ private void recoverFromTranslogInternal(TranslogRecoveryRunner translogRecovery\n         // note: if opsRecovered == 0 and we have older translogs it means they are corrupted or 0 length.\n         assert pendingTranslogRecovery.get() : \"translogRecovery is not pending but should be\";\n         pendingTranslogRecovery.set(false); // we are good - now we can commit\n-        if (opsRecovered > 0) {\n-            logger.trace(\"flushing post recovery from translog: ops recovered [{}], current translog generation [{}]\",\n-                opsRecovered, translog.currentFileGeneration());\n-            commitIndexWriter(indexWriter, translog);\n-            refreshLastCommittedSegmentInfos();\n-            refresh(\"translog_recovery\");\n-        }\n+        logger.trace(() -> new ParameterizedMessage(\n+                \"flushing post recovery from translog: ops recovered [{}], current translog generation [{}]\",\n+                opsRecovered, translog.currentFileGeneration()));\n+        flush(false, true);", "originalCommit": "689a392977d91ce94a49a935e09fbc648d898901", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78282fc39b6de8ba45f5a9fe0f21ff6c81421aea", "url": "https://github.com/elastic/elasticsearch/commit/78282fc39b6de8ba45f5a9fe0f21ff6c81421aea", "message": "Merge remote-tracking branch 'elastic/master' into 57010", "committedDate": "2020-05-29T15:21:26Z", "type": "commit"}, {"oid": "a1172d114264c483d39702fb177dcca49017e68d", "url": "https://github.com/elastic/elasticsearch/commit/a1172d114264c483d39702fb177dcca49017e68d", "message": "CR: remove flushlog from translog recovery", "committedDate": "2020-05-29T15:24:32Z", "type": "commit"}, {"oid": "0e9c5f52ebcfe1806ee8fa5f65217b67e41a9b35", "url": "https://github.com/elastic/elasticsearch/commit/0e9c5f52ebcfe1806ee8fa5f65217b67e41a9b35", "message": "CR: drop outdated comment", "committedDate": "2020-05-29T15:41:09Z", "type": "commit"}]}