{"pr_number": 52965, "pr_title": "Support multiple metrics in `top_metrics` agg", "pr_createdAt": "2020-02-28T17:35:05Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52965", "timeline": [{"oid": "cdb776098baa74beec20330a5d532a82b65d8bc6", "url": "https://github.com/elastic/elasticsearch/commit/cdb776098baa74beec20330a5d532a82b65d8bc6", "message": "Support multiple metrics in `top_metrics` agg\n\nThis adds support for returning multiple metrics to the `top_metrics`\nagg. It looks like:\n```\nPOST /test/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"tm\": {\n      \"top_metrics\": {\n        \"metrics\": [\n          {\"field\": \"v\"},\n          {\"field\": \"m\"}\n        ],\n        \"sort\": {\"s\": \"desc\"}\n      }\n    }\n  }\n}\n```", "committedDate": "2020-02-28T17:22:58Z", "type": "commit"}, {"oid": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "url": "https://github.com/elastic/elasticsearch/commit/ce163a69f1475961e28e5f21fcbda876a70fc5ea", "message": "Ooops", "committedDate": "2020-02-28T18:22:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMzE4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387833185", "bodyText": "Just checking, again, that there are still no released versions of the serialization format, and thus changing it here is safe?", "author": "not-napoleon", "createdAt": "2020-03-04T17:52:50Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/topmetrics/InternalTopMetrics.java", "diffHunk": "@@ -55,15 +59,15 @@ static InternalTopMetrics buildEmptyAggregation(String name, String metricField,\n     public InternalTopMetrics(StreamInput in) throws IOException {\n         super(in);\n         sortOrder = SortOrder.readFromStream(in);\n-        metricName = in.readString();\n+        metricNames = in.readStringList();", "originalCommit": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MDA4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387860081", "bodyText": "Still safe!", "author": "nik9000", "createdAt": "2020-03-04T18:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMzE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNjM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387836381", "bodyText": "I don't understand what this error message means.   Should it read \"Unknown metric...\"?", "author": "not-napoleon", "createdAt": "2020-03-04T17:58:35Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/topmetrics/InternalTopMetrics.java", "diffHunk": "@@ -128,37 +136,38 @@ public boolean isMapped() {\n     public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {\n         builder.startArray(\"top\");\n         for (TopMetric top : topMetrics) {\n-            top.toXContent(builder, metricName);\n+            top.toXContent(builder, metricNames);\n         }\n         builder.endArray();\n         return builder;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(super.hashCode(), sortOrder, metricName, size, topMetrics);\n+        return Objects.hash(super.hashCode(), sortOrder, metricNames, size, topMetrics);\n     }\n \n     @Override\n     public boolean equals(Object obj) {\n         if (super.equals(obj) == false) return false;\n         InternalTopMetrics other = (InternalTopMetrics) obj;\n         return sortOrder.equals(other.sortOrder) &&\n-            metricName.equals(other.metricName) &&\n+            metricNames.equals(other.metricNames) &&\n             size == other.size &&\n             topMetrics.equals(other.topMetrics);\n     }\n \n     @Override\n     public double value(String name) {\n-        if (metricName.equals(name)) {\n-            if (topMetrics.isEmpty()) {\n-                return Double.NaN;\n-            }\n-            assert topMetrics.size() == 1 : \"property paths should only resolve against top metrics with size == 1.\";\n-            return topMetrics.get(0).metricValue;\n+        int index = metricNames.indexOf(name);\n+        if (index < 0) {\n+            throw new IllegalArgumentException(\"known metric [\" + name + \"]\");            ", "originalCommit": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MDY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387860676", "bodyText": "+1 - it should be unknown metric. I don't believe we'll ever throw it because of the interplay with hasValue. Which bothers me, but is a problem for another PR.", "author": "nik9000", "createdAt": "2020-03-04T18:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNjM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzOTgwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387839809", "bodyText": "Can you expand on this a bit, and/or open a ticket for it? Feel free to ignore this comment if you're planing to resolve this TODO soon, but I'm worried that if we find this again in a few months we won't remember what it is we intended to do here.\nAlso, it looks like later on, we just turn this into a list of ValuesSourceConfig.  Why not just start with ValuesSourceConfig at this point?", "author": "not-napoleon", "createdAt": "2020-03-04T18:05:11Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/topmetrics/TopMetricsAggregationBuilder.java", "diffHunk": "@@ -47,34 +47,35 @@\n                 if (size < 1) {\n                     throw new IllegalArgumentException(\"[size] must be more than 0 but was [\" + size + \"]\");\n                 }\n-                MultiValuesSourceFieldConfig metricField = (MultiValuesSourceFieldConfig) args[2];\n-                return new TopMetricsAggregationBuilder(name, sorts, size, metricField);\n+                @SuppressWarnings(\"unchecked\")\n+                List<MultiValuesSourceFieldConfig> metricFields = (List<MultiValuesSourceFieldConfig>) args[2];\n+                return new TopMetricsAggregationBuilder(name, sorts, size, metricFields);\n             });\n     static {\n         PARSER.declareField(constructorArg(), (p, n) -> SortBuilder.fromXContent(p), SORT_FIELD,\n                 ObjectParser.ValueType.OBJECT_ARRAY_OR_STRING);\n         PARSER.declareInt(optionalConstructorArg(), SIZE_FIELD);\n         ContextParser<Void, MultiValuesSourceFieldConfig.Builder> metricParser = MultiValuesSourceFieldConfig.PARSER.apply(true, false);\n-        PARSER.declareObject(constructorArg(), (p, n) -> metricParser.parse(p, null).build(), METRIC_FIELD);\n+        PARSER.declareObjectArray(constructorArg(), (p, n) -> metricParser.parse(p, null).build(), METRIC_FIELD);\n     }\n \n     private final List<SortBuilder<?>> sortBuilders;\n-    // TODO MultiValuesSourceFieldConfig has more things than we support and less things than we want to support\n     private final int size;\n-    private final MultiValuesSourceFieldConfig metricField;\n+    private final List<MultiValuesSourceFieldConfig> metricFields;\n+    // TODO MultiValuesSourceFieldConfig has more things than we support and less things than we want to support", "originalCommit": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MTE5MA==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387861190", "bodyText": "I inherited this from @polyfractal's original implementation. I can look into changing to directly to ValuesSourceConfig.", "author": "nik9000", "createdAt": "2020-03-04T18:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzOTgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MzM5Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387883393", "bodyText": "ha, that's exactly the kind of problem I want to prevent ;)\nWe could leave this as a TODO for now, since we're hoping to merge the new Values Source work soon-ish, and that dramatically reduces the complexity of ValuesSourceConfig, making it more like an actual config object and less like a magic box.", "author": "not-napoleon", "createdAt": "2020-03-04T19:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzOTgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4Mzc1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387883756", "bodyText": "(but if we do leave it as a todo, we should still clarify what we want to do and when)", "author": "not-napoleon", "createdAt": "2020-03-04T19:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzOTgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDkyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387844921", "bodyText": "Does ValuesSourceConfig#resolve actually return null in some cases? I didn't see a path that would cause that.  Or is this just being defensive?", "author": "not-napoleon", "createdAt": "2020-03-04T18:14:43Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/topmetrics/TopMetricsAggregator.java", "diffHunk": "@@ -117,41 +117,122 @@ public void setScorer(Scorable s) throws IOException {\n \n     @Override\n     public InternalAggregation buildAggregation(long bucket) throws IOException {\n-        if (metricValueSource == null) {\n-            return buildEmptyAggregation();\n-        }\n-        List<InternalTopMetrics.TopMetric> topMetrics = sort.getValues(bucket, values.resultBuilder(sort.getFormat()));\n+        List<InternalTopMetrics.TopMetric> topMetrics = sort.getValues(bucket, metrics.resultBuilder(sort.getFormat()));\n         assert topMetrics.size() <= size;\n-        return new InternalTopMetrics(name, sort.getOrder(), metricName, size, topMetrics, pipelineAggregators(), metaData());\n+        return new InternalTopMetrics(name, sort.getOrder(), metrics.names, size, topMetrics, pipelineAggregators(), metaData());\n     }\n \n     @Override\n     public InternalTopMetrics buildEmptyAggregation() {\n-        // The sort format and sort order aren't used in reduction so we pass the simplest thing.\n-        return InternalTopMetrics.buildEmptyAggregation(name, metricName, pipelineAggregators(),\n-                metaData());\n+        return InternalTopMetrics.buildEmptyAggregation(name, metrics.names, pipelineAggregators(), metaData());\n     }\n \n     @Override\n     public void doClose() {\n-        Releasables.close(sort, values);\n+        Releasables.close(sort, metrics);\n+    }\n+\n+    private static class Metrics implements BucketedSort.ExtraData, Releasable {\n+        private final List<String> names;\n+        private final MetricValues[] values;\n+\n+        Metrics(int size, QueryShardContext ctx, List<MultiValuesSourceFieldConfig> fieldsConfig) {\n+            names = fieldsConfig.stream().map(MultiValuesSourceFieldConfig::getFieldName).collect(toList());\n+            values = new MetricValues[fieldsConfig.size()];\n+            int i = 0;\n+            for (MultiValuesSourceFieldConfig config : fieldsConfig) {\n+                ValuesSourceConfig<ValuesSource.Numeric> resolved = ValuesSourceConfig.resolve(ctx, ValueType.NUMERIC,\n+                        config.getFieldName(), config.getScript(), config.getMissing(), config.getTimeZone(), null);\n+                if (resolved == null) {", "originalCommit": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MTg2MA==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387861860", "bodyText": "I thought it did. Looks like I was confused. I'll dig.", "author": "nik9000", "createdAt": "2020-03-04T18:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NTM0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387845343", "bodyText": "Be aware that this can throw on invalid configs (i.e. configs containing neither a script nor a field)", "author": "not-napoleon", "createdAt": "2020-03-04T18:15:30Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/topmetrics/TopMetricsAggregator.java", "diffHunk": "@@ -117,41 +117,122 @@ public void setScorer(Scorable s) throws IOException {\n \n     @Override\n     public InternalAggregation buildAggregation(long bucket) throws IOException {\n-        if (metricValueSource == null) {\n-            return buildEmptyAggregation();\n-        }\n-        List<InternalTopMetrics.TopMetric> topMetrics = sort.getValues(bucket, values.resultBuilder(sort.getFormat()));\n+        List<InternalTopMetrics.TopMetric> topMetrics = sort.getValues(bucket, metrics.resultBuilder(sort.getFormat()));\n         assert topMetrics.size() <= size;\n-        return new InternalTopMetrics(name, sort.getOrder(), metricName, size, topMetrics, pipelineAggregators(), metaData());\n+        return new InternalTopMetrics(name, sort.getOrder(), metrics.names, size, topMetrics, pipelineAggregators(), metaData());\n     }\n \n     @Override\n     public InternalTopMetrics buildEmptyAggregation() {\n-        // The sort format and sort order aren't used in reduction so we pass the simplest thing.\n-        return InternalTopMetrics.buildEmptyAggregation(name, metricName, pipelineAggregators(),\n-                metaData());\n+        return InternalTopMetrics.buildEmptyAggregation(name, metrics.names, pipelineAggregators(), metaData());\n     }\n \n     @Override\n     public void doClose() {\n-        Releasables.close(sort, values);\n+        Releasables.close(sort, metrics);\n+    }\n+\n+    private static class Metrics implements BucketedSort.ExtraData, Releasable {\n+        private final List<String> names;\n+        private final MetricValues[] values;\n+\n+        Metrics(int size, QueryShardContext ctx, List<MultiValuesSourceFieldConfig> fieldsConfig) {\n+            names = fieldsConfig.stream().map(MultiValuesSourceFieldConfig::getFieldName).collect(toList());\n+            values = new MetricValues[fieldsConfig.size()];\n+            int i = 0;\n+            for (MultiValuesSourceFieldConfig config : fieldsConfig) {\n+                ValuesSourceConfig<ValuesSource.Numeric> resolved = ValuesSourceConfig.resolve(ctx, ValueType.NUMERIC,\n+                        config.getFieldName(), config.getScript(), config.getMissing(), config.getTimeZone(), null);\n+                if (resolved == null) {\n+                    values[i++] = new MissingMetricValues();\n+                    continue;\n+                }\n+                ValuesSource.Numeric valuesSource = resolved.toValuesSource(ctx);", "originalCommit": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MTE5NA==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387851194", "bodyText": "This seems late in the game to be resolving values sources.  Usually we do that at the border between the builder and the factory, and pass the values source(s) into the aggregator.  If it has to be this way, let's at least leave a comment as to why that's the case, please.", "author": "not-napoleon", "createdAt": "2020-03-04T18:26:23Z", "path": "x-pack/plugin/analytics/src/main/java/org/elasticsearch/xpack/analytics/topmetrics/TopMetricsAggregator.java", "diffHunk": "@@ -117,41 +117,122 @@ public void setScorer(Scorable s) throws IOException {\n \n     @Override\n     public InternalAggregation buildAggregation(long bucket) throws IOException {\n-        if (metricValueSource == null) {\n-            return buildEmptyAggregation();\n-        }\n-        List<InternalTopMetrics.TopMetric> topMetrics = sort.getValues(bucket, values.resultBuilder(sort.getFormat()));\n+        List<InternalTopMetrics.TopMetric> topMetrics = sort.getValues(bucket, metrics.resultBuilder(sort.getFormat()));\n         assert topMetrics.size() <= size;\n-        return new InternalTopMetrics(name, sort.getOrder(), metricName, size, topMetrics, pipelineAggregators(), metaData());\n+        return new InternalTopMetrics(name, sort.getOrder(), metrics.names, size, topMetrics, pipelineAggregators(), metaData());\n     }\n \n     @Override\n     public InternalTopMetrics buildEmptyAggregation() {\n-        // The sort format and sort order aren't used in reduction so we pass the simplest thing.\n-        return InternalTopMetrics.buildEmptyAggregation(name, metricName, pipelineAggregators(),\n-                metaData());\n+        return InternalTopMetrics.buildEmptyAggregation(name, metrics.names, pipelineAggregators(), metaData());\n     }\n \n     @Override\n     public void doClose() {\n-        Releasables.close(sort, values);\n+        Releasables.close(sort, metrics);\n+    }\n+\n+    private static class Metrics implements BucketedSort.ExtraData, Releasable {\n+        private final List<String> names;\n+        private final MetricValues[] values;\n+\n+        Metrics(int size, QueryShardContext ctx, List<MultiValuesSourceFieldConfig> fieldsConfig) {\n+            names = fieldsConfig.stream().map(MultiValuesSourceFieldConfig::getFieldName).collect(toList());\n+            values = new MetricValues[fieldsConfig.size()];\n+            int i = 0;\n+            for (MultiValuesSourceFieldConfig config : fieldsConfig) {\n+                ValuesSourceConfig<ValuesSource.Numeric> resolved = ValuesSourceConfig.resolve(ctx, ValueType.NUMERIC,\n+                        config.getFieldName(), config.getScript(), config.getMissing(), config.getTimeZone(), null);", "originalCommit": "ce163a69f1475961e28e5f21fcbda876a70fc5ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MjUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/52965#discussion_r387862510", "bodyText": "I believe this is right at aggregator construction time - so it is on the boarder, just on the Aggregator side of it. I can see if I can move it if it'd make things nicer.", "author": "nik9000", "createdAt": "2020-03-04T18:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MTE5NA=="}], "type": "inlineReview"}, {"oid": "09cdff0734ab6e7a38b6735c95c7f4a3d6cf570f", "url": "https://github.com/elastic/elasticsearch/commit/09cdff0734ab6e7a38b6735c95c7f4a3d6cf570f", "message": "Merge branch 'master' into top_metrics_many", "committedDate": "2020-03-04T21:47:48Z", "type": "commit"}, {"oid": "537459a4a8310044fb55c4491b96bf70b4acfa0a", "url": "https://github.com/elastic/elasticsearch/commit/537459a4a8310044fb55c4491b96bf70b4acfa0a", "message": "Update from comments", "committedDate": "2020-03-04T21:59:34Z", "type": "commit"}, {"oid": "8dd3b36e63dd422e32ff6d0afdac20cd42eff4f8", "url": "https://github.com/elastic/elasticsearch/commit/8dd3b36e63dd422e32ff6d0afdac20cd42eff4f8", "message": "Merge branch 'master' into top_metrics_many", "committedDate": "2020-03-04T22:06:31Z", "type": "commit"}]}