{"pr_number": 54214, "pr_title": "[ML] add num_matches and preferred_to_categories to category defintion objects", "pr_createdAt": "2020-03-25T17:33:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54214", "timeline": [{"oid": "d338acd6b5d89373c0946f35cc359d2eccd1b5c2", "url": "https://github.com/elastic/elasticsearch/commit/d338acd6b5d89373c0946f35cc359d2eccd1b5c2", "message": "[ML] add new category object fields", "committedDate": "2020-03-25T18:14:04Z", "type": "commit"}, {"oid": "d338acd6b5d89373c0946f35cc359d2eccd1b5c2", "url": "https://github.com/elastic/elasticsearch/commit/d338acd6b5d89373c0946f35cc359d2eccd1b5c2", "message": "[ML] add new category object fields", "committedDate": "2020-03-25T18:14:04Z", "type": "forcePushed"}, {"oid": "cba91ed3322dc36472a1372f1c6972736acb4ff3", "url": "https://github.com/elastic/elasticsearch/commit/cba91ed3322dc36472a1372f1c6972736acb4ff3", "message": "adding documentation", "committedDate": "2020-03-31T18:46:50Z", "type": "commit"}, {"oid": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "url": "https://github.com/elastic/elasticsearch/commit/4581f01dc182b9c4efbd0822324dd85b6d98e177", "message": "Merge remote-tracking branch 'upstream/master' into feature/ml-adding-new-category-fields", "committedDate": "2020-03-31T18:46:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzMzgwNA==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401433804", "bodyText": "I think you could simplify this to:\nLongStream.generate(ESTestCase::randomNonNegativeLong).limit(10).toArray()", "author": "przemekwitek", "createdAt": "2020-04-01T08:15:13Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/results/CategoryDefinitionTests.java", "diffHunk": "@@ -28,6 +31,15 @@ public CategoryDefinition createTestInstance(String jobId) {\n         if (randomBoolean()) {\n             categoryDefinition.setGrokPattern(randomAlphaOfLength(50));\n         }\n+        if (randomBoolean()) {\n+            categoryDefinition.setNumMatches(randomNonNegativeLong());\n+        }\n+        if (randomBoolean()) {\n+            categoryDefinition.setPreferredToCategories(Stream.generate(ESTestCase::randomNonNegativeLong)", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNDE3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401434173", "bodyText": "Just out of curiosity: Is this something new? I haven't seen this before.", "author": "przemekwitek", "createdAt": "2020-04-01T08:15:51Z", "path": "x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/results/CategoryDefinitionTests.java", "diffHunk": "@@ -5,18 +5,21 @@\n  */\n package org.elasticsearch.xpack.ml.job.results;\n \n+import org.elasticsearch.Version;\n import org.elasticsearch.common.io.stream.Writeable;\n import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.common.xcontent.json.JsonXContent;\n-import org.elasticsearch.test.AbstractSerializingTestCase;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.ml.AbstractBWCSerializationTestCase;\n import org.elasticsearch.xpack.core.ml.job.results.CategoryDefinition;\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.stream.Stream;\n \n import static org.hamcrest.Matchers.containsString;\n \n-public class CategoryDefinitionTests extends AbstractSerializingTestCase<CategoryDefinition> {\n+public class CategoryDefinitionTests extends AbstractBWCSerializationTestCase<CategoryDefinition> {", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDE1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401574153", "bodyText": "yes, well, sort of new.", "author": "benwtrent", "createdAt": "2020-04-01T12:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNDE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjI0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401436245", "bodyText": "I would feel better if preferredToCategories.isEmpty() == false was in parentheses, just in case ;)", "author": "przemekwitek", "createdAt": "2020-04-01T08:19:25Z", "path": "client/rest-high-level/src/main/java/org/elasticsearch/client/ml/job/results/CategoryDefinition.java", "diffHunk": "@@ -140,6 +163,10 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (grokPattern != null) {\n             builder.field(GROK_PATTERN.getPreferredName(), grokPattern);\n         }\n+        builder.field(NUM_MATCHES.getPreferredName(), numMatches);\n+        if (preferredToCategories != null && preferredToCategories.isEmpty() == false) {", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401436755", "bodyText": "Is it ok to pass array reference here? Should we make a copy maybe?", "author": "przemekwitek", "createdAt": "2020-04-01T08:20:23Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/results/CategoryDefinition.java", "diffHunk": "@@ -152,6 +167,26 @@ public void setGrokPattern(String grokPattern) {\n         this.grokPattern = grokPattern;\n     }\n \n+    public long[] getPreferredToCategories() {\n+        return preferredToCategories;", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTE4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401591181", "bodyText": "I don't think there is much danger. No code paths are using this getter outside of tests.", "author": "benwtrent", "createdAt": "2020-04-01T12:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzODI2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401438263", "bodyText": "You could use hasSize here for brevity.", "author": "przemekwitek", "createdAt": "2020-04-01T08:23:02Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java", "diffHunk": "@@ -205,6 +205,93 @@ public void testCategorizationPerformance() {\n                 (MachineLearning.CATEGORIZATION_TOKENIZATION_IN_JAVA ? \"Java\" : \"C++\") + \" took \" + duration + \"ms\");\n     }\n \n+    @AwaitsFix(bugUrl = \"https://github.com/elastic/ml-cpp/pull/1062\")\n+    public void testNumMatchesAndCategoryPreference() throws Exception {\n+        String index = \"hadoop_logs\";\n+        client().admin().indices().prepareCreate(index)\n+            .setMapping(\"time\", \"type=date,format=epoch_millis\",\n+                \"msg\", \"type=text\")\n+            .get();\n+\n+        nowMillis = System.currentTimeMillis();\n+\n+        BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();\n+        IndexRequest indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(8).millis(),\n+            \"msg\", \"2015-10-18 18:01:51,963 INFO [main] org.mortbay.log: jetty-6.1.26\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(7).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:52,728 INFO [main] org.mortbay.log: Started HttpServer2$SelectChannelConnectorWithSafeStartup@0.0.0.0:62267\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(6).millis(),\n+            \"msg\", \"2015-10-18 18:01:53,400 INFO [main] org.apache.hadoop.yarn.webapp.WebApps: Registered webapp guice modules\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(5).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:53,447 INFO [main] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerRequestor: nodeBlacklistingEnabled:true\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(4).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:52,728 INFO [main] org.apache.hadoop.yarn.webapp.WebApps: Web app /mapreduce started at 62267\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(2).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:53,557 INFO [main] org.apache.hadoop.yarn.client.RMProxy: \" +\n+                \"Connecting to ResourceManager at msra-sa-41/10.190.173.170:8030\");\n+        bulkRequestBuilder.add(indexRequest);\n+\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(1).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:53,713 INFO [main] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: \" +\n+                \"maxContainerCapability: <memory:8192, vCores:32>\");\n+        bulkRequestBuilder.add(indexRequest);\n+\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis,\n+            \"msg\",\n+            \"2015-10-18 18:01:53,713 INFO [main] org.apache.hadoop.yarn.client.api.impl.ContainerManagementProtocolProxy: \" +\n+                \"yarn.client.max-cached-nodemanagers-proxies : 0\");\n+        bulkRequestBuilder.add(indexRequest);\n+\n+\n+        BulkResponse bulkResponse = bulkRequestBuilder\n+            .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n+            .get();\n+        assertThat(bulkResponse.hasFailures(), is(false));\n+\n+        Job.Builder job = newJobBuilder(\"categorization-with-preferred-categories\", Collections.emptyList());\n+        registerJob(job);\n+        putJob(job);\n+        openJob(job.getId());\n+\n+        String datafeedId = job.getId() + \"-feed\";\n+        DatafeedConfig.Builder datafeedConfig = new DatafeedConfig.Builder(datafeedId, job.getId());\n+        datafeedConfig.setIndices(Collections.singletonList(index));\n+        DatafeedConfig datafeed = datafeedConfig.build();\n+        registerDatafeed(datafeed);\n+        putDatafeed(datafeed);\n+        startDatafeed(datafeedId, 0, nowMillis + 1);\n+        waitUntilJobIsClosed(job.getId());\n+\n+        List<CategoryDefinition> categories = getCategories(job.getId());\n+        assertThat(categories.size(), equalTo(7));", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzODQwOA==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401438408", "bodyText": "You could use arrayWithSize matcher here.", "author": "przemekwitek", "createdAt": "2020-04-01T08:23:20Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/CategorizationIT.java", "diffHunk": "@@ -205,6 +205,93 @@ public void testCategorizationPerformance() {\n                 (MachineLearning.CATEGORIZATION_TOKENIZATION_IN_JAVA ? \"Java\" : \"C++\") + \" took \" + duration + \"ms\");\n     }\n \n+    @AwaitsFix(bugUrl = \"https://github.com/elastic/ml-cpp/pull/1062\")\n+    public void testNumMatchesAndCategoryPreference() throws Exception {\n+        String index = \"hadoop_logs\";\n+        client().admin().indices().prepareCreate(index)\n+            .setMapping(\"time\", \"type=date,format=epoch_millis\",\n+                \"msg\", \"type=text\")\n+            .get();\n+\n+        nowMillis = System.currentTimeMillis();\n+\n+        BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();\n+        IndexRequest indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(8).millis(),\n+            \"msg\", \"2015-10-18 18:01:51,963 INFO [main] org.mortbay.log: jetty-6.1.26\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(7).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:52,728 INFO [main] org.mortbay.log: Started HttpServer2$SelectChannelConnectorWithSafeStartup@0.0.0.0:62267\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(6).millis(),\n+            \"msg\", \"2015-10-18 18:01:53,400 INFO [main] org.apache.hadoop.yarn.webapp.WebApps: Registered webapp guice modules\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(5).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:53,447 INFO [main] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerRequestor: nodeBlacklistingEnabled:true\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(4).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:52,728 INFO [main] org.apache.hadoop.yarn.webapp.WebApps: Web app /mapreduce started at 62267\");\n+        bulkRequestBuilder.add(indexRequest);\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(2).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:53,557 INFO [main] org.apache.hadoop.yarn.client.RMProxy: \" +\n+                \"Connecting to ResourceManager at msra-sa-41/10.190.173.170:8030\");\n+        bulkRequestBuilder.add(indexRequest);\n+\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis - TimeValue.timeValueHours(1).millis(),\n+            \"msg\",\n+            \"2015-10-18 18:01:53,713 INFO [main] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: \" +\n+                \"maxContainerCapability: <memory:8192, vCores:32>\");\n+        bulkRequestBuilder.add(indexRequest);\n+\n+        indexRequest = new IndexRequest(index);\n+        indexRequest.source(\"time\", nowMillis,\n+            \"msg\",\n+            \"2015-10-18 18:01:53,713 INFO [main] org.apache.hadoop.yarn.client.api.impl.ContainerManagementProtocolProxy: \" +\n+                \"yarn.client.max-cached-nodemanagers-proxies : 0\");\n+        bulkRequestBuilder.add(indexRequest);\n+\n+\n+        BulkResponse bulkResponse = bulkRequestBuilder\n+            .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n+            .get();\n+        assertThat(bulkResponse.hasFailures(), is(false));\n+\n+        Job.Builder job = newJobBuilder(\"categorization-with-preferred-categories\", Collections.emptyList());\n+        registerJob(job);\n+        putJob(job);\n+        openJob(job.getId());\n+\n+        String datafeedId = job.getId() + \"-feed\";\n+        DatafeedConfig.Builder datafeedConfig = new DatafeedConfig.Builder(datafeedId, job.getId());\n+        datafeedConfig.setIndices(Collections.singletonList(index));\n+        DatafeedConfig datafeed = datafeedConfig.build();\n+        registerDatafeed(datafeed);\n+        putDatafeed(datafeed);\n+        startDatafeed(datafeedId, 0, nowMillis + 1);\n+        waitUntilJobIsClosed(job.getId());\n+\n+        List<CategoryDefinition> categories = getCategories(job.getId());\n+        assertThat(categories.size(), equalTo(7));\n+\n+        CategoryDefinition category1 = categories.get(0);\n+        assertThat(category1.getNumMatches(), equalTo(2L));\n+        long[] expectedPreferenceTo = new long[]{2L, 3L, 4L, 5L, 6L};\n+        assertThat(category1.getPreferredToCategories().length, equalTo(5));", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjQ3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401592472", "bodyText": "that only works on boxed object arrays. Not native arrays.", "author": "benwtrent", "createdAt": "2020-04-01T12:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzODQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ5NDk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401494984", "bodyText": "Since the value is being serialized using writeVLong() this should throw if passed a negative number.", "author": "droberts195", "createdAt": "2020-04-01T09:56:06Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/results/CategoryDefinition.java", "diffHunk": "@@ -152,6 +167,26 @@ public void setGrokPattern(String grokPattern) {\n         this.grokPattern = grokPattern;\n     }\n \n+    public long[] getPreferredToCategories() {\n+        return preferredToCategories;\n+    }\n+\n+    public void setPreferredToCategories(long[] preferredToCategories) {\n+        this.preferredToCategories = preferredToCategories;\n+    }\n+\n+    private void setPreferredToCategories(List<Long> preferredToCategories) {\n+        setPreferredToCategories(preferredToCategories.stream().mapToLong(Long::longValue).toArray());\n+    }\n+\n+    public long getNumMatches() {\n+        return numMatches;\n+    }\n+\n+    public void setNumMatches(long numMatches) {\n+        this.numMatches = numMatches;", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ5NTcyOA==", "url": "https://github.com/elastic/elasticsearch/pull/54214#discussion_r401495728", "bodyText": "Since the value is being serialized using writeVLongArray() this should throw if any value in the array is negative.", "author": "droberts195", "createdAt": "2020-04-01T09:57:21Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/results/CategoryDefinition.java", "diffHunk": "@@ -152,6 +167,26 @@ public void setGrokPattern(String grokPattern) {\n         this.grokPattern = grokPattern;\n     }\n \n+    public long[] getPreferredToCategories() {\n+        return preferredToCategories;\n+    }\n+\n+    public void setPreferredToCategories(long[] preferredToCategories) {\n+        this.preferredToCategories = preferredToCategories;", "originalCommit": "4581f01dc182b9c4efbd0822324dd85b6d98e177", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8f066325b4701ccbec65e8e9793a444fc204e9fd", "url": "https://github.com/elastic/elasticsearch/commit/8f066325b4701ccbec65e8e9793a444fc204e9fd", "message": "addressing PR comments", "committedDate": "2020-04-01T12:56:25Z", "type": "commit"}]}