{"pr_number": 52531, "pr_title": "[ML][Inference] Add support for multi-value leaves to the tree model", "pr_createdAt": "2020-02-19T18:45:49Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/52531", "timeline": [{"oid": "34fa2a0957d6c36313586a3038bf46ecb968d337", "url": "https://github.com/elastic/elasticsearch/commit/34fa2a0957d6c36313586a3038bf46ecb968d337", "message": "[ML][Inference] Add support for multi-value leaves to the tree model", "committedDate": "2020-02-19T18:43:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNzM4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/52531#discussion_r382017385", "bodyText": "This isn't quite right: we turn the set of values into a collection of predicted probabilities via the softmax function, i.e. the i'th predicted probability is exp(values[i]) / sum_j{ exp(values[j]) }. I think it is also worthwhile dividing through by k = exp(max_j{ values[j] }) to handle the case the exp overflows: whence exp(values[i] - k) / sum_j{ (exp(values[j] - k)) }.", "author": "tveasey", "createdAt": "2020-02-20T14:03:54Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/ensemble/LogisticRegression.java", "diffHunk": "@@ -78,31 +78,29 @@ public Integer expectedValueSize() {\n     }\n \n     @Override\n-    public List<Double> processValues(List<Double> values) {\n+    public double[] processValues(double[][] values) {\n         Objects.requireNonNull(values, \"values must not be null\");\n-        if (weights != null && values.size() != weights.length) {\n+        assert values[0].length == 1;\n+        if (weights != null && values.length != weights.length) {\n             throw new IllegalArgumentException(\"values must be the same length as weights.\");\n         }\n         double summation = weights == null ?\n-            values.stream().mapToDouble(Double::valueOf).sum() :\n-            IntStream.range(0, weights.length).mapToDouble(i -> values.get(i) * weights[i]).sum();\n+            Arrays.stream(values).mapToDouble(vs -> vs[0]).sum() :\n+            IntStream.range(0, weights.length).mapToDouble(i -> values[i][0] * weights[i]).sum();\n         double probOfClassOne = sigmoid(summation);\n         assert 0.0 <= probOfClassOne && probOfClassOne <= 1.0;\n-        return Arrays.asList(1.0 - probOfClassOne, probOfClassOne);\n+        return new double[] {1.0 - probOfClassOne, probOfClassOne};", "originalCommit": "34fa2a0957d6c36313586a3038bf46ecb968d337", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3NTIzMw==", "url": "https://github.com/elastic/elasticsearch/pull/52531#discussion_r382075233", "bodyText": "@tveasey I will adjust to allow logistic_regression to be binomial and multinomial.\nYour concerns about overflow are handled in the already existing Statistics#softMax function.\nThanks for the feedback!", "author": "benwtrent", "createdAt": "2020-02-20T15:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNzM4NQ=="}], "type": "inlineReview"}, {"oid": "9c702a56ee797c19f96220c83b9f4efca687803e", "url": "https://github.com/elastic/elasticsearch/commit/9c702a56ee797c19f96220c83b9f4efca687803e", "message": "updating logistic regression to be multinomial", "committedDate": "2020-02-20T15:43:32Z", "type": "commit"}, {"oid": "9f3611eb3a332befb77f3d63ca53d1d721cd780f", "url": "https://github.com/elastic/elasticsearch/commit/9f3611eb3a332befb77f3d63ca53d1d721cd780f", "message": "Merge branch 'master' into feature/ml-inference-multi-value-leaves", "committedDate": "2020-02-24T13:07:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxOTI1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/52531#discussion_r384619257", "bodyText": "I am not sure about this.  To what extent does it cause a problem for the receiving node?  Could it cause problems for the reading of a subsequent wire transfer?  I don't know the serialisation code well enough to say whether this is OK or not.\nAlso, would it make sense to an end user who saw it?  I guess they'd see a remote transport exception from a 7.6 coordinating node wrapping this exception.  But which endpoint would they have called?  Would leaf_value make sense to somebody who had called that endpoint?\nFinally, maybe we can defend against this at an earlier stage by banning creation of multi-class classification jobs until all nodes in the cluster are on version 7.7.", "author": "droberts195", "createdAt": "2020-02-26T16:42:02Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/tree/TreeNode.java", "diffHunk": "@@ -190,7 +196,18 @@ public void writeTo(StreamOutput out) throws IOException {\n         out.writeInt(splitFeature);\n         out.writeDouble(splitGain);\n         out.writeVInt(nodeIndex);\n-        out.writeDouble(leafValue);\n+        if (out.getVersion().onOrAfter(Version.V_7_7_0)) {\n+            out.writeDoubleArray(leafValue);\n+        } else {\n+            if (leafValue.length > 1) {\n+                throw new IOException(\"[leaf_value] only supports multiple values after version 7.7.0\");", "originalCommit": "9f3611eb3a332befb77f3d63ca53d1d721cd780f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMzI2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/52531#discussion_r384713261", "bodyText": "To what extent does it cause a problem for the receiving node?\n\nReceiver node gets an exception. The serialization fails.\nThis type of thing is done in aggregations as well https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/search/aggregations/bucket/composite/CompositeValuesSourceParserHelper.java#L72\nI think throwing here is OK.\nAs for the message, I will fix it. I think something like Multi-class classification model attempted to serialize to node before version X. Multi-class classification is only supported if the node is greater than version X\n\nmaybe we can defend against this at an earlier stage by banning creation of multi-class classification jobs until all nodes in the cluster are on version 7.7.\n\nI agree, right now it is not possible to create a multi-class model via the analytics process. Once it is, we should defend against it there.\nAdditionally, on PUT I can verify the minimum node version", "author": "benwtrent", "createdAt": "2020-02-26T19:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxOTI1Nw=="}], "type": "inlineReview"}, {"oid": "bf4dcef29a6b285913b8af2f0010a906277ae110", "url": "https://github.com/elastic/elasticsearch/commit/bf4dcef29a6b285913b8af2f0010a906277ae110", "message": "protecting against incompatibility, making error bettter", "committedDate": "2020-02-26T20:16:34Z", "type": "commit"}]}