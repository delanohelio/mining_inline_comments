{"pr_number": 61922, "pr_title": "[ML] Add new include flag to GET inference/<model_id> API for model training metadata", "pr_createdAt": "2020-09-03T14:38:36Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61922", "timeline": [{"oid": "eacc213f188a3290ae74768b43a8a190f647780d", "url": "https://github.com/elastic/elasticsearch/commit/eacc213f188a3290ae74768b43a8a190f647780d", "message": "[ML] Add new inference/<model_id>/_metadata API for model training metadata", "committedDate": "2020-09-03T16:22:46Z", "type": "forcePushed"}, {"oid": "082aff666a315204940f5948110af398068b79f6", "url": "https://github.com/elastic/elasticsearch/commit/082aff666a315204940f5948110af398068b79f6", "message": "[ML] Add new inference/<model_id>/_metadata API for model training metadata", "committedDate": "2020-09-04T13:37:21Z", "type": "forcePushed"}, {"oid": "19b0eb6056b0114fb5601049e186f4ab3497eeaf", "url": "https://github.com/elastic/elasticsearch/commit/19b0eb6056b0114fb5601049e186f4ab3497eeaf", "message": "[ML] Add new inference/<model_id>/_metadata API for model training metadata", "committedDate": "2020-09-04T13:50:24Z", "type": "forcePushed"}, {"oid": "bfb390e4e4257c2337c5df0d820f70a50620bbb9", "url": "https://github.com/elastic/elasticsearch/commit/bfb390e4e4257c2337c5df0d820f70a50620bbb9", "message": "[ML] Add new inference/<model_id>/_metadata API for model training metadata", "committedDate": "2020-09-04T17:21:31Z", "type": "commit"}, {"oid": "bfb390e4e4257c2337c5df0d820f70a50620bbb9", "url": "https://github.com/elastic/elasticsearch/commit/bfb390e4e4257c2337c5df0d820f70a50620bbb9", "message": "[ML] Add new inference/<model_id>/_metadata API for model training metadata", "committedDate": "2020-09-04T17:21:31Z", "type": "forcePushed"}, {"oid": "90547d3233668a212eeb1a19d0c4090777716843", "url": "https://github.com/elastic/elasticsearch/commit/90547d3233668a212eeb1a19d0c4090777716843", "message": "Apply suggestions from code review\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-09-08T14:32:45Z", "type": "commit"}, {"oid": "8b962b523c54a68eeaa7daaa7f7152ca55e806bf", "url": "https://github.com/elastic/elasticsearch/commit/8b962b523c54a68eeaa7daaa7f7152ca55e806bf", "message": "Merge branch 'master' into feature/ml-inference-add-description-api", "committedDate": "2020-09-08T15:39:43Z", "type": "commit"}, {"oid": "4e9147ba11b2304affa5931a1e1b4a3af5046eb5", "url": "https://github.com/elastic/elasticsearch/commit/4e9147ba11b2304affa5931a1e1b4a3af5046eb5", "message": "addressing pr comments", "committedDate": "2020-09-09T12:02:49Z", "type": "commit"}, {"oid": "29a35a94bb70bd85870cb746555efdc8a718d888", "url": "https://github.com/elastic/elasticsearch/commit/29a35a94bb70bd85870cb746555efdc8a718d888", "message": "Merge branch 'master' into feature/ml-inference-add-description-api", "committedDate": "2020-09-09T18:15:23Z", "type": "commit"}, {"oid": "4e4a198d4b769e46a7b4695925ce99680b740ad4", "url": "https://github.com/elastic/elasticsearch/commit/4e4a198d4b769e46a7b4695925ce99680b740ad4", "message": "Merge branch 'master' into feature/ml-inference-add-description-api", "committedDate": "2020-09-16T14:11:34Z", "type": "commit"}, {"oid": "4e4a198d4b769e46a7b4695925ce99680b740ad4", "url": "https://github.com/elastic/elasticsearch/commit/4e4a198d4b769e46a7b4695925ce99680b740ad4", "message": "Merge branch 'master' into feature/ml-inference-add-description-api", "committedDate": "2020-09-16T14:11:34Z", "type": "forcePushed"}, {"oid": "02abb2bd8bcaf2d369860fe7dc927d66646cfbd8", "url": "https://github.com/elastic/elasticsearch/commit/02abb2bd8bcaf2d369860fe7dc927d66646cfbd8", "message": "adjusting api changes to include feature importance via flag", "committedDate": "2020-09-16T17:18:41Z", "type": "commit"}, {"oid": "181200279350579e5a8f892faaa25b02f71452d6", "url": "https://github.com/elastic/elasticsearch/commit/181200279350579e5a8f892faaa25b02f71452d6", "message": "fixing test", "committedDate": "2020-09-16T17:26:39Z", "type": "commit"}, {"oid": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "url": "https://github.com/elastic/elasticsearch/commit/ed50912feb97d444f9ac153c1f26b2dbc425191c", "message": "test fix", "committedDate": "2020-09-16T17:53:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4NTc4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61922#discussion_r490085782", "bodyText": "The package private ctor also wraps this map in line 151\nthis.metadata = metadata == null ? null : Collections.unmodifiableMap(metadata);\nMake the ctor argument a UnmodifiableMap and getMetadata() return an UnmodifiableMap and I think that simplifies these maps being wrapped in a map in a map etc", "author": "davidkyle", "createdAt": "2020-09-17T09:00:46Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -408,7 +412,7 @@ public Builder(TrainedModelConfig config) {\n             this.definition = config.definition == null ? null : new LazyModelDefinition(config.definition);\n             this.description = config.getDescription();\n             this.tags = config.getTags();\n-            this.metadata = config.getMetadata();\n+            this.metadata = config.getMetadata() == null ? null : new HashMap<>(config.getMetadata());", "originalCommit": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTA2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61922#discussion_r490089065", "bodyText": "Make a copy of the unmodifiable map here", "author": "davidkyle", "createdAt": "2020-09-17T09:06:00Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/TrainedModelConfig.java", "diffHunk": "@@ -460,6 +464,18 @@ public Builder setMetadata(Map<String, Object> metadata) {\n             return this;\n         }\n \n+        public Builder setFeatureImportance(List<TotalFeatureImportance> totalFeatureImportance) {\n+            if (totalFeatureImportance == null) {\n+                return this;\n+            }\n+            if (this.metadata == null) {\n+                this.metadata = new HashMap<>();\n+            }", "originalCommit": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5OTIwNg==", "url": "https://github.com/elastic/elasticsearch/pull/61922#discussion_r490099206", "bodyText": "nit: It is clearer if finalListener is used for these onFailure calls.", "author": "davidkyle", "createdAt": "2020-09-17T09:22:08Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -482,11 +518,11 @@ public void getTrainedModel(final String modelId, final boolean includeDefinitio\n                 try {\n                     builder = handleSearchItem(multiSearchResponse.getResponses()[0], modelId, this::parseInferenceDocLenientlyFromSource);\n                 } catch (ResourceNotFoundException ex) {\n-                    listener.onFailure(new ResourceNotFoundException(\n+                    getTrainedModelListener.onFailure(new ResourceNotFoundException(", "originalCommit": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMjUxNw==", "url": "https://github.com/elastic/elasticsearch/pull/61922#discussion_r490102517", "bodyText": "Configs are still sorted by the search aren't they? Sorting here shouldn't be necessary", "author": "davidkyle", "createdAt": "2020-09-17T09:27:08Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -540,23 +579,65 @@ public void getTrainedModels(Set<String> modelIds, boolean allowNoResources, fin\n             .setQuery(queryBuilder)\n             .setSize(modelIds.size())\n             .request();\n-        List<TrainedModelConfig> configs = new ArrayList<>(modelIds.size());\n+        List<TrainedModelConfig.Builder> configs = new ArrayList<>(modelIds.size());\n         Set<String> modelsInIndex = Sets.difference(modelIds, MODELS_STORED_AS_RESOURCE);\n         Set<String> modelsAsResource = Sets.intersection(MODELS_STORED_AS_RESOURCE, modelIds);\n         for(String modelId : modelsAsResource) {\n             try {\n                 configs.add(loadModelFromResource(modelId, true));\n             } catch (ElasticsearchException ex) {\n-                listener.onFailure(ex);\n+                finalListener.onFailure(ex);\n                 return;\n             }\n         }\n         if (modelsInIndex.isEmpty()) {\n-            configs.sort(Comparator.comparing(TrainedModelConfig::getModelId));\n-            listener.onResponse(configs);\n+            finalListener.onResponse(configs.stream()\n+                .map(TrainedModelConfig.Builder::build)\n+                .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                .collect(Collectors.toList()));\n             return;\n         }\n \n+        ActionListener<List<TrainedModelConfig.Builder>> getTrainedModelListener = ActionListener.wrap(\n+            modelBuilders -> {\n+                if (includeTotalFeatureImportance == false) {\n+                    finalListener.onResponse(modelBuilders.stream()\n+                        .map(TrainedModelConfig.Builder::build)\n+                        .sorted(Comparator.comparing(TrainedModelConfig::getModelId))", "originalCommit": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMzQ1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61922#discussion_r490103456", "bodyText": "nit: delete extra blank line", "author": "davidkyle", "createdAt": "2020-09-17T09:28:40Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -540,23 +579,65 @@ public void getTrainedModels(Set<String> modelIds, boolean allowNoResources, fin\n             .setQuery(queryBuilder)\n             .setSize(modelIds.size())\n             .request();\n-        List<TrainedModelConfig> configs = new ArrayList<>(modelIds.size());\n+        List<TrainedModelConfig.Builder> configs = new ArrayList<>(modelIds.size());\n         Set<String> modelsInIndex = Sets.difference(modelIds, MODELS_STORED_AS_RESOURCE);\n         Set<String> modelsAsResource = Sets.intersection(MODELS_STORED_AS_RESOURCE, modelIds);\n         for(String modelId : modelsAsResource) {\n             try {\n                 configs.add(loadModelFromResource(modelId, true));\n             } catch (ElasticsearchException ex) {\n-                listener.onFailure(ex);\n+                finalListener.onFailure(ex);\n                 return;\n             }\n         }\n         if (modelsInIndex.isEmpty()) {\n-            configs.sort(Comparator.comparing(TrainedModelConfig::getModelId));\n-            listener.onResponse(configs);\n+            finalListener.onResponse(configs.stream()\n+                .map(TrainedModelConfig.Builder::build)\n+                .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                .collect(Collectors.toList()));\n             return;\n         }\n \n+        ActionListener<List<TrainedModelConfig.Builder>> getTrainedModelListener = ActionListener.wrap(\n+            modelBuilders -> {\n+                if (includeTotalFeatureImportance == false) {\n+                    finalListener.onResponse(modelBuilders.stream()\n+                        .map(TrainedModelConfig.Builder::build)\n+                        .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                        .collect(Collectors.toList()));\n+                    return;\n+                }\n+                this.getTrainedModelMetadata(modelIds, ActionListener.wrap(\n+                    metadata ->\n+                        finalListener.onResponse(modelBuilders.stream()\n+                            .map(builder -> {\n+                                TrainedModelMetadata modelMetadata = metadata.get(builder.getModelId());\n+                                if (modelMetadata != null) {\n+                                    builder.setFeatureImportance(modelMetadata.getTotalFeatureImportances());\n+                                }\n+                                return builder.build();\n+                            })\n+                            .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                            .collect(Collectors.toList())),\n+                    failure -> {\n+                        // total feature importance is not necessary for a model to be valid\n+                        // we shouldn't fail if it is not found\n+                        if (ExceptionsHelper.unwrapCause(failure) instanceof ResourceNotFoundException) {\n+                            finalListener.onResponse(modelBuilders.stream()\n+                                .map(TrainedModelConfig.Builder::build)\n+                                .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                                .collect(Collectors.toList()));\n+                            return;\n+", "originalCommit": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwNDczNw==", "url": "https://github.com/elastic/elasticsearch/pull/61922#discussion_r490104737", "bodyText": "\ud83d\udc4d  makes sense\nIs it the case that newer models after version 7.10 will always have the total feature importance?", "author": "davidkyle", "createdAt": "2020-09-17T09:30:41Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java", "diffHunk": "@@ -540,23 +579,65 @@ public void getTrainedModels(Set<String> modelIds, boolean allowNoResources, fin\n             .setQuery(queryBuilder)\n             .setSize(modelIds.size())\n             .request();\n-        List<TrainedModelConfig> configs = new ArrayList<>(modelIds.size());\n+        List<TrainedModelConfig.Builder> configs = new ArrayList<>(modelIds.size());\n         Set<String> modelsInIndex = Sets.difference(modelIds, MODELS_STORED_AS_RESOURCE);\n         Set<String> modelsAsResource = Sets.intersection(MODELS_STORED_AS_RESOURCE, modelIds);\n         for(String modelId : modelsAsResource) {\n             try {\n                 configs.add(loadModelFromResource(modelId, true));\n             } catch (ElasticsearchException ex) {\n-                listener.onFailure(ex);\n+                finalListener.onFailure(ex);\n                 return;\n             }\n         }\n         if (modelsInIndex.isEmpty()) {\n-            configs.sort(Comparator.comparing(TrainedModelConfig::getModelId));\n-            listener.onResponse(configs);\n+            finalListener.onResponse(configs.stream()\n+                .map(TrainedModelConfig.Builder::build)\n+                .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                .collect(Collectors.toList()));\n             return;\n         }\n \n+        ActionListener<List<TrainedModelConfig.Builder>> getTrainedModelListener = ActionListener.wrap(\n+            modelBuilders -> {\n+                if (includeTotalFeatureImportance == false) {\n+                    finalListener.onResponse(modelBuilders.stream()\n+                        .map(TrainedModelConfig.Builder::build)\n+                        .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                        .collect(Collectors.toList()));\n+                    return;\n+                }\n+                this.getTrainedModelMetadata(modelIds, ActionListener.wrap(\n+                    metadata ->\n+                        finalListener.onResponse(modelBuilders.stream()\n+                            .map(builder -> {\n+                                TrainedModelMetadata modelMetadata = metadata.get(builder.getModelId());\n+                                if (modelMetadata != null) {\n+                                    builder.setFeatureImportance(modelMetadata.getTotalFeatureImportances());\n+                                }\n+                                return builder.build();\n+                            })\n+                            .sorted(Comparator.comparing(TrainedModelConfig::getModelId))\n+                            .collect(Collectors.toList())),\n+                    failure -> {\n+                        // total feature importance is not necessary for a model to be valid\n+                        // we shouldn't fail if it is not found", "originalCommit": "ed50912feb97d444f9ac153c1f26b2dbc425191c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7ec181355914a17dc8b3cf5dcf248bff8323ae66", "url": "https://github.com/elastic/elasticsearch/commit/7ec181355914a17dc8b3cf5dcf248bff8323ae66", "message": "addressing pr comments", "committedDate": "2020-09-17T11:45:52Z", "type": "commit"}, {"oid": "21bdf09054d7c80b5807f1ceec375cf7ca14beee", "url": "https://github.com/elastic/elasticsearch/commit/21bdf09054d7c80b5807f1ceec375cf7ca14beee", "message": "Merge branch 'master' into feature/ml-inference-add-description-api", "committedDate": "2020-09-17T11:45:57Z", "type": "commit"}]}