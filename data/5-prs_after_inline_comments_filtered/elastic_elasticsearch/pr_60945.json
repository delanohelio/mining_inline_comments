{"pr_number": 60945, "pr_title": "Deprecate REST access to System Indices", "pr_createdAt": "2020-08-11T01:35:32Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/60945", "timeline": [{"oid": "9d5dc5fcb5522e088177504ffd6a6a9259d4fc06", "url": "https://github.com/elastic/elasticsearch/commit/9d5dc5fcb5522e088177504ffd6a6a9259d4fc06", "message": "YAML syntax is THE WORST", "committedDate": "2020-10-05T23:08:09Z", "type": "commit"}, {"oid": "5211807da498a3bbc32110ecd42e756e9f06dd99", "url": "https://github.com/elastic/elasticsearch/commit/5211807da498a3bbc32110ecd42e756e9f06dd99", "message": "More specifying _refresh more closely in YAML tests", "committedDate": "2020-10-05T23:11:37Z", "type": "commit"}, {"oid": "1e4223bfab1a558a72af09fccb5ae1d0d6fa0713", "url": "https://github.com/elastic/elasticsearch/commit/1e4223bfab1a558a72af09fccb5ae1d0d6fa0713", "message": "Yet another _refresh call with a warning", "committedDate": "2020-10-05T23:55:31Z", "type": "commit"}, {"oid": "4e6c6d2b7f721c94352e0afc74a0241ade907402", "url": "https://github.com/elastic/elasticsearch/commit/4e6c6d2b7f721c94352e0afc74a0241ade907402", "message": "Fix a couple _refresh calls that got mixed up", "committedDate": "2020-10-05T23:58:07Z", "type": "commit"}, {"oid": "b9342bb80019ba6967c98e7f90a6d81a5347c992", "url": "https://github.com/elastic/elasticsearch/commit/b9342bb80019ba6967c98e7f90a6d81a5347c992", "message": "Even more _refresh index specifying", "committedDate": "2020-10-06T01:09:51Z", "type": "commit"}, {"oid": "0ea0be50bf135f020ef5c49506dd88e0a390a1be", "url": "https://github.com/elastic/elasticsearch/commit/0ea0be50bf135f020ef5c49506dd88e0a390a1be", "message": "Another _refresh that sparks a warning", "committedDate": "2020-10-06T02:00:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM2NzAyNw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r500367027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static DeprecationLogger deprecationLogger = DeprecationLogger.getLogger(TransportGetAliasesAction.class);\n          \n          \n            \n                private static final DeprecationLogger deprecationLogger = DeprecationLogger.getLogger(TransportGetAliasesAction.class);", "author": "jaymode", "createdAt": "2020-10-06T15:03:36Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/TransportGetAliasesAction.java", "diffHunk": "@@ -25,27 +25,39 @@\n import org.elasticsearch.cluster.block.ClusterBlockException;\n import org.elasticsearch.cluster.block.ClusterBlockLevel;\n import org.elasticsearch.cluster.metadata.AliasMetadata;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.collect.ImmutableOpenMap;\n import org.elasticsearch.common.inject.Inject;\n import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.indices.SystemIndices;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.threadpool.ThreadPool;\n import org.elasticsearch.transport.TransportService;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n public class TransportGetAliasesAction extends TransportMasterNodeReadAction<GetAliasesRequest, GetAliasesResponse> {\n+    private static DeprecationLogger deprecationLogger = DeprecationLogger.getLogger(TransportGetAliasesAction.class);", "originalCommit": "0ea0be50bf135f020ef5c49506dd88e0a390a1be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NTcwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r500375701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    client.close();\n          \n          \n            \n                    IOUtils.close(client);\n          \n      \n    \n    \n  \n\nThis allows us to guard in case the client is null to avoid unnecessary exceptions in case of odd setup failure. The IOUtils class I am referencing is from package org.elasticsearch.core.internal.io", "author": "jaymode", "createdAt": "2020-10-06T15:12:42Z", "path": "server/src/test/java/org/elasticsearch/rest/RestControllerTests.java", "diffHunk": "@@ -103,8 +107,13 @@ public void setup() {\n         httpServerTransport.start();\n     }\n \n+    @After\n+    public void teardown() {\n+        client.close();", "originalCommit": "0ea0be50bf135f020ef5c49506dd88e0a390a1be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NzA0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r500377045", "bodyText": "why did closed get dropped here?", "author": "jaymode", "createdAt": "2020-10-06T15:14:16Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java", "diffHunk": "@@ -798,7 +812,17 @@ private void wipeRollupJobs() throws IOException {\n     protected void refreshAllIndices() throws IOException {\n         boolean includeHidden = minimumNodeVersion().onOrAfter(Version.V_7_7_0);\n         Request refreshRequest = new Request(\"POST\", \"/_refresh\");\n-        refreshRequest.addParameter(\"expand_wildcards\", \"open,closed\" + (includeHidden ? \",hidden\" : \"\"));\n+        refreshRequest.addParameter(\"expand_wildcards\", \"open\" + (includeHidden ? \",hidden\" : \"\"));", "originalCommit": "0ea0be50bf135f020ef5c49506dd88e0a390a1be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODIxMw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r500408213", "bodyText": "Trying to refresh a closed index appears to cause an exception, but that only came up after I switched a test which involves closing an index to use this instead of a direct POST _refresh call (to take advantage of the deprecation warning handling). This method is only used in a few tests, and I think specifying closed was always wrong, it just never mattered before.", "author": "gwbrown", "createdAt": "2020-10-06T15:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NzA0NQ=="}], "type": "inlineReview"}, {"oid": "dac5c74a15e38a57fd5ab16db285a3ae04ff1f66", "url": "https://github.com/elastic/elasticsearch/commit/dac5c74a15e38a57fd5ab16db285a3ae04ff1f66", "message": "Review feedback", "committedDate": "2020-10-06T15:56:01Z", "type": "commit"}, {"oid": "a014f0f9d6339a9e9307fc286d2d4e2fb5aeef0b", "url": "https://github.com/elastic/elasticsearch/commit/a014f0f9d6339a9e9307fc286d2d4e2fb5aeef0b", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-10-06T16:08:39Z", "type": "commit"}, {"oid": "dd6c770db3fb4e876d46160b1229bc490a3d3836", "url": "https://github.com/elastic/elasticsearch/commit/dd6c770db3fb4e876d46160b1229bc490a3d3836", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-09T21:09:16Z", "type": "commit"}, {"oid": "773272eb9698503315a482beb97d0110ff097c6a", "url": "https://github.com/elastic/elasticsearch/commit/773272eb9698503315a482beb97d0110ff097c6a", "message": "Drop response headers during SQL index resolution to prevent deprecation warnings", "committedDate": "2020-09-09T21:10:04Z", "type": "commit"}, {"oid": "2beeb31cc597cbce3dd7a3b9b7083c05b2f1f457", "url": "https://github.com/elastic/elasticsearch/commit/2beeb31cc597cbce3dd7a3b9b7083c05b2f1f457", "message": "Drop response headers during Enrich reindex to prevent deprecation warnings", "committedDate": "2020-09-10T16:10:57Z", "type": "commit"}, {"oid": "df0a9b2a375c9aa214f9ea1c91af61f36578b1f0", "url": "https://github.com/elastic/elasticsearch/commit/df0a9b2a375c9aa214f9ea1c91af61f36578b1f0", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-10T16:20:05Z", "type": "commit"}, {"oid": "646dd12fd9bd1d31b3168f253caaefd622edd795", "url": "https://github.com/elastic/elasticsearch/commit/646dd12fd9bd1d31b3168f253caaefd622edd795", "message": "Fix compilation error due to merge", "committedDate": "2020-09-10T17:27:40Z", "type": "commit"}, {"oid": "676d0e3a7864c791c627a5361f1da16dccda8f3d", "url": "https://github.com/elastic/elasticsearch/commit/676d0e3a7864c791c627a5361f1da16dccda8f3d", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-10T21:03:10Z", "type": "commit"}, {"oid": "02cf28e5a45d340219d8701342502fd3586895ec", "url": "https://github.com/elastic/elasticsearch/commit/02cf28e5a45d340219d8701342502fd3586895ec", "message": "ThreadPool -> ThreadContext in test per review", "committedDate": "2020-09-10T22:16:19Z", "type": "commit"}, {"oid": "c405757112765add8ec4bd096980c6840377a4cd", "url": "https://github.com/elastic/elasticsearch/commit/c405757112765add8ec4bd096980c6840377a4cd", "message": "Formatting per review", "committedDate": "2020-09-10T22:19:53Z", "type": "commit"}, {"oid": "0be7d2b9c1d0746f8fddd0402cd7535e40ad1ee9", "url": "https://github.com/elastic/elasticsearch/commit/0be7d2b9c1d0746f8fddd0402cd7535e40ad1ee9", "message": "Add comment on enrich hack", "committedDate": "2020-09-10T22:25:57Z", "type": "commit"}, {"oid": "56faa3fa75b4e8c65a7101f1c58d92c2b3e93acd", "url": "https://github.com/elastic/elasticsearch/commit/56faa3fa75b4e8c65a7101f1c58d92c2b3e93acd", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-14T15:49:19Z", "type": "commit"}, {"oid": "828879c4e0a3892f7bddfb683f744eace2646992", "url": "https://github.com/elastic/elasticsearch/commit/828879c4e0a3892f7bddfb683f744eace2646992", "message": "Expect deprecation warnings in ML upgrade tests", "committedDate": "2020-09-14T17:34:14Z", "type": "commit"}, {"oid": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "url": "https://github.com/elastic/elasticsearch/commit/e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-14T20:44:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MDkzNA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488490934", "bodyText": "Why have we combined two tests into one, where before they were using assumeTrue / assumeFalse?", "author": "pugnascotia", "createdAt": "2020-09-15T08:40:30Z", "path": "qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java", "diffHunk": "@@ -1386,67 +1390,97 @@ public void testResize() throws Exception {\n         }\n     }\n \n-    public void testCreateSystemIndexInOldVersion() throws Exception {\n-        assumeTrue(\"only run on old cluster\", isRunningAgainstOldCluster());\n-        // create index\n-        Request createTestIndex = new Request(\"PUT\", \"/test_index_old\");\n-        createTestIndex.setJsonEntity(\"{\\\"settings\\\": {\\\"index.number_of_replicas\\\": 0}}\");\n-        client().performRequest(createTestIndex);\n-\n-        Request bulk = new Request(\"POST\", \"/_bulk\");\n-        bulk.addParameter(\"refresh\", \"true\");\n-        bulk.setJsonEntity(\"{\\\"index\\\": {\\\"_index\\\": \\\"test_index_old\\\"}}\\n\" +\n-            \"{\\\"f1\\\": \\\"v1\\\", \\\"f2\\\": \\\"v2\\\"}\\n\");\n-        client().performRequest(bulk);\n-\n-        // start a async reindex job\n-        Request reindex = new Request(\"POST\", \"/_reindex\");\n-        reindex.setJsonEntity(\n-            \"{\\n\" +\n-                \"  \\\"source\\\":{\\n\" +\n-                \"    \\\"index\\\":\\\"test_index_old\\\"\\n\" +\n-                \"  },\\n\" +\n-                \"  \\\"dest\\\":{\\n\" +\n-                \"    \\\"index\\\":\\\"test_index_reindex\\\"\\n\" +\n-                \"  }\\n\" +\n-                \"}\");\n-        reindex.addParameter(\"wait_for_completion\", \"false\");\n-        Map<String, Object> response = entityAsMap(client().performRequest(reindex));\n-        String taskId = (String) response.get(\"task\");\n-\n-        // wait for task\n-        Request getTask = new Request(\"GET\", \"/_tasks/\" + taskId);\n-        getTask.addParameter(\"wait_for_completion\", \"true\");\n-        client().performRequest(getTask);\n-\n-        // make sure .tasks index exists\n-        assertBusy(() -> {\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSystemIndexMetadataIsUpgraded() throws Exception {\n+        if (isRunningAgainstOldCluster()) {", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0MjQ0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488742447", "bodyText": "The code is logically the same, but combines the setup and check steps into one test method.\nUsing assumeTrue/assumeFalse causes the assuming test method to effectively be skipped when the assumed condition is not met - and in this case, they weren't really separate test cases, but a setup step (on the old cluster) and a check step (on the new cluster). By combining them into one test method that branches based on which cluster it's running against, it makes it much easier to run the entire test, as you can now use -Dtests.method=testSystemIndexMetadataIsUpgraded instead of having to specify multiple methods.", "author": "gwbrown", "createdAt": "2020-09-15T15:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MDkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwODg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488508855", "bodyText": "I think this comment is incorrect?", "author": "pugnascotia", "createdAt": "2020-09-15T09:08:20Z", "path": "qa/smoke-test-http/src/test/java/org/elasticsearch/http/SystemIndexRestIT.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.http;\n+\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.IndexScopedSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsFilter;\n+import org.elasticsearch.indices.SystemIndexDescriptor;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.plugins.SystemIndexPlugin;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestHandler;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestStatusToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import static org.elasticsearch.test.rest.ESRestTestCase.entityAsMap;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.is;\n+\n+public class SystemIndexRestIT extends HttpSmokeTestCase {\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        List<Class<? extends Plugin>> plugins = new ArrayList<>(super.nodePlugins());\n+        plugins.add(SystemIndexTestPlugin.class);\n+        return plugins;\n+    }\n+\n+    public void testSystemIndexAccessBlockedByDefault() throws Exception {\n+        // create index\n+        {\n+            Request putDocRequest = new Request(\"POST\", \"/_sys_index_test/add_doc/42\");\n+            Response resp = getRestClient().performRequest(putDocRequest);\n+            assertThat(resp.getStatusLine().getStatusCode(), equalTo(201));\n+        }\n+\n+\n+        // make sure the system index now exists (with allow_system_index_access flag)\n+        assertBusy(() -> {\n+            Request searchRequest = new Request(\"GET\", \"/\" + SystemIndexTestPlugin.SYSTEM_INDEX_NAME + \"/_count\");\n+            searchRequest.addParameter(\"allow_system_index_access\", \"true\");\n+\n+            // Disallow no indices to cause an exception if the flag above doesn't work\n+            searchRequest.addParameter(\"allow_no_indices\", \"false\");\n+            searchRequest.setJsonEntity(\"{\\\"query\\\": {\\\"match\\\":  {\\\"some_field\\\":  \\\"some_value\\\"}}}\");\n+\n+            final Response searchResponse = getRestClient().performRequest(searchRequest);\n+            assertThat(searchResponse.getStatusLine().getStatusCode(), is(200));\n+            Map<String, Object> responseMap = entityAsMap(searchResponse);\n+            assertThat(responseMap, hasKey(\"count\"));\n+            assertThat(responseMap.get(\"count\"), equalTo(1));\n+        });\n+\n+        // now try without `allow_system_index_access`\n+        assertDeprecationWarningOnAccess(SystemIndexTestPlugin.SYSTEM_INDEX_NAME, SystemIndexTestPlugin.SYSTEM_INDEX_NAME);\n+\n+        // And with a partial wildcard\n+        assertDeprecationWarningOnAccess(\".test-*\", SystemIndexTestPlugin.SYSTEM_INDEX_NAME);\n+\n+        // And with a total wildcard\n+        assertDeprecationWarningOnAccess(randomFrom(\"*\", \"_all\"), SystemIndexTestPlugin.SYSTEM_INDEX_NAME);\n+\n+        // Try to index a doc directly\n+        {\n+            String expectedWarning = \"this request accesses system indices: [\" + SystemIndexTestPlugin.SYSTEM_INDEX_NAME + \"], but in a \" +\n+                \"future major version, direct access to system indices will be prevented by default\";\n+            RequestOptions expectWarningOptions = RequestOptions.DEFAULT.toBuilder().setWarningsHandler(expectedWarning::equals).build();\n+            Request putDocDirectlyRequest = new Request(\"PUT\", \"/\" + SystemIndexTestPlugin.SYSTEM_INDEX_NAME + \"/_doc/43\");\n+            putDocDirectlyRequest.setJsonEntity(\"{\\\"some_field\\\":  \\\"some_other_value\\\"}\");\n+            putDocDirectlyRequest.setOptions(expectWarningOptions);\n+            Response response = getRestClient().performRequest(putDocDirectlyRequest);\n+            assertThat(response.getStatusLine().getStatusCode(), equalTo(201));\n+        }\n+    }\n+\n+    private void assertDeprecationWarningOnAccess(String queryPattern, String warningIndexName) throws IOException {\n+        String expectedWarning = \"this request accesses system indices: [\" + warningIndexName + \"], but in a \" +\n+            \"future major version, direct access to system indices will be prevented by default\";\n+        RequestOptions expectWarningOptions = RequestOptions.DEFAULT.toBuilder()\n+            .setWarningsHandler(w -> w.contains(expectedWarning) == false || w.size() != 1)\n+            .build();\n+        Request searchRequest = new Request(\"GET\", \"/\" + queryPattern + randomFrom(\"/_count\", \"/_search\"));\n+        searchRequest.setJsonEntity(\"{\\\"query\\\": {\\\"match\\\":  {\\\"some_field\\\":  \\\"some_value\\\"}}}\");\n+        // Disallow no indices to cause an exception if this resolves to zero indices (as we expect)", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0MzcxMA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488743710", "bodyText": "Yes, this is from an old version of the test, before I switched this to emit a deprecation warning instead of omitting system indices. I'll fix.", "author": "gwbrown", "createdAt": "2020-09-15T15:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwODg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDQzMg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488524432", "bodyText": "Should this be removed?", "author": "pugnascotia", "createdAt": "2020-09-15T09:33:14Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -282,10 +317,44 @@\n             }\n             throw infe;\n         }\n+        checkSystemIndexAccess(context, metadata, concreteIndices);\n         return concreteIndices.toArray(new Index[concreteIndices.size()]);\n     }\n \n+    private static void checkSystemIndexAccess(Context context, Metadata metadata, Set<Index> concreteIndices) {\n+        if (context.isSystemIndexAccessAllowed() == false) {\n+            final List<String> resolvedSystemIndices = concreteIndices.stream()\n+                .map(metadata::index)\n+                .filter(IndexMetadata::isSystem)\n+                .map(i -> i.getIndex().getName())\n+                .sorted() // reliable order for testing\n+                .collect(Collectors.toList());\n+            if (resolvedSystemIndices.isEmpty() == false) {\n+                switch (SYSTEM_INDEX_ACCESS_BEHAVIOR) {\n+                    case ALLOWED:\n+                        // If access is allowed in all cases, then there's nothing to do here.\n+                        break;\n+                    case DEPRECATED:\n+                        deprecationLogger.deprecate(\"open_system_index_access\",\n+                            \"this request accesses system indices: {}, but in a future major version, direct access to system \" +\n+                                \"indices will be prevented by default\", resolvedSystemIndices);\n+                        break;\n+                    case RESTRICTED:\n+                        final String errorMsg = \"while resolving indices, resolved system indices [\" + resolvedSystemIndices +\n+                            \"] when access to system indices is restricted\";\n+                        assert false : errorMsg;", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0NjY3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488746672", "bodyText": "This is intentional. This will cause the node to fail if this line is hit with assertions enabled (i.e. during testing), which is what I want as this would indicate there's a bug in the code which should cause system indices to be completely omitted - and if there is, I want it to yell as loudly as possible.\nIf this line is hit without assertions enabled, it will fall through to the next line, which throws an exception. This is a relatively common pattern to enforce invariants more strictly during testing than at runtime.", "author": "gwbrown", "createdAt": "2020-09-15T15:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1NzY4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488557689", "bodyText": "I'm not generally a fan of long tests that check lots of cases. Can we usefully split up this method into a series of more targeted test cases, ideally with a Javadoc comment that explains what is the test is for (see point 9 here).", "author": "pugnascotia", "createdAt": "2020-09-15T10:26:28Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexAbstractionTests.java", "diffHunk": "@@ -116,13 +118,82 @@ public void testHiddenAliasValidation() {\n         }\n     }\n \n-    private IndexMetadata buildIndexWithAlias(String indexName, String aliasName, @Nullable Boolean aliasIsHidden) {\n+    public void testSystemAliasValidation() {", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MTYxNw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488961617", "bodyText": "I've split this test and the one in IndexNameExpressionResolverTests into multiple tests. I have not added Javadoc to the split test cases though, as the test cases ended up fairly small and I was finding in attempting to write Javadoc for them that the Javadoc largely was just repeating the test names.", "author": "gwbrown", "createdAt": "2020-09-15T20:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1NzY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2MjQ0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488562447", "bodyText": "Same observation here about splitting up this test.", "author": "pugnascotia", "createdAt": "2020-09-15T10:35:09Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1810,6 +1828,125 @@ public void testIgnoreThrottled() {\n         }\n     }\n \n+    public void testSystemIndexResolutionWhenAllowed() {", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2NjAwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488566004", "bodyText": "What do you think about defining a helper method, to cut down on the ceremony here? Something like:\nprivate void getConcreteIndexNames(ClusterState state, SearchRequest request) {\n    return List<String> indexNames = Arrays\n        .stream(indexNameExpressionResolver.concreteIndices(state, request))\n        .map(i -> i.getName())\n        .collect(Collectors.toList());\n}", "author": "pugnascotia", "createdAt": "2020-09-15T10:41:39Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java", "diffHunk": "@@ -1810,6 +1828,125 @@ public void testIgnoreThrottled() {\n         }\n     }\n \n+    public void testSystemIndexResolutionWhenAllowed() {\n+        Settings settings = Settings.builder().build();\n+        Metadata.Builder mdBuilder = Metadata.builder()\n+            .put(indexBuilder(\".ml-meta\", settings).state(State.OPEN).system(true))\n+            .put(indexBuilder(\".watches\", settings).state(State.OPEN).system(true))\n+            .put(indexBuilder(\".ml-stuff\", settings).state(State.OPEN).system(true))\n+            .put(indexBuilder(\"some-other-index\").state(State.OPEN));\n+        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n+\n+        // Single name\n+        {\n+            SearchRequest request = new SearchRequest(\".ml-meta\");\n+\n+            List<String> indexNames = Arrays\n+                .stream(indexNameExpressionResolver.concreteIndices(state, request))\n+                .map(i -> i.getName())\n+                .collect(Collectors.toList());", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNzE5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488617195", "bodyText": "I can't see this new parameter being used. Am I missing something?", "author": "pugnascotia", "createdAt": "2020-09-15T12:13:57Z", "path": "x-pack/qa/src/main/java/org/elasticsearch/xpack/test/rest/IndexMappingTemplateAsserter.java", "diffHunk": "@@ -51,9 +51,10 @@\n      * effect of a different test running in the cluster.\n      *\n      * @param client The rest client\n+     * @param allowSystemIndexWarnings Whether deprecation warnings for system index access should be allowed/expected.\n      * @throws IOException On error\n      */\n-    public static void assertMlMappingsMatchTemplates(RestClient client) throws IOException {\n+    public static void assertMlMappingsMatchTemplates(RestClient client, boolean allowSystemIndexWarnings) throws IOException {", "originalCommit": "e5f90679f5b7059d4ea6d4cbe5fc06aa8538131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0OTQ3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488749475", "bodyText": "Good catch, I forgot some plumbing here. I'll fix - if this is false, it should then pass false to all of the assertLegacyTemplateMatchesIndexMappings calls (as opposed to now, where some of them are hardcoded to true)", "author": "gwbrown", "createdAt": "2020-09-15T15:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjI3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r488982276", "bodyText": "Actually, it turns out I misread one of the callsites and this must be true for both places this is called, so I removed this parameter and went back to specifying the values passed to assertLegacyTemplateMatchesIndexMappings directly.", "author": "gwbrown", "createdAt": "2020-09-15T21:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxNzE5NQ=="}], "type": "inlineReview"}, {"oid": "ba55f39fc3a618ca3e71746b59737fd4d91b65e6", "url": "https://github.com/elastic/elasticsearch/commit/ba55f39fc3a618ca3e71746b59737fd4d91b65e6", "message": "Wording change per review", "committedDate": "2020-09-15T16:50:31Z", "type": "commit"}, {"oid": "a67c2b29ab0335dfbcb7fade9de3421d585996f7", "url": "https://github.com/elastic/elasticsearch/commit/a67c2b29ab0335dfbcb7fade9de3421d585996f7", "message": "Update comment per review", "committedDate": "2020-09-15T16:52:57Z", "type": "commit"}, {"oid": "4c8763bc981d3e4472de45a9889acf55b6a853e7", "url": "https://github.com/elastic/elasticsearch/commit/4c8763bc981d3e4472de45a9889acf55b6a853e7", "message": "Factor out shared stream/map code per review", "committedDate": "2020-09-15T17:03:35Z", "type": "commit"}, {"oid": "fcd6af9d5f2dc488276aa9e2be09f2352babcfde", "url": "https://github.com/elastic/elasticsearch/commit/fcd6af9d5f2dc488276aa9e2be09f2352babcfde", "message": "Break up large INER test cases per review", "committedDate": "2020-09-15T17:30:48Z", "type": "commit"}, {"oid": "c3bedf6eb0cab33747b29b7a9d552b5b81ac9eb8", "url": "https://github.com/elastic/elasticsearch/commit/c3bedf6eb0cab33747b29b7a9d552b5b81ac9eb8", "message": "Tweak method name", "committedDate": "2020-09-15T17:32:54Z", "type": "commit"}, {"oid": "70a8114ebaab913c1a06dc02ae152b93c5c87943", "url": "https://github.com/elastic/elasticsearch/commit/70a8114ebaab913c1a06dc02ae152b93c5c87943", "message": "Actually pass parameter in ML upgrade tests per review", "committedDate": "2020-09-15T17:57:09Z", "type": "commit"}, {"oid": "a621a3ebf0c337bdeafa9bae597e206ac7cf68cc", "url": "https://github.com/elastic/elasticsearch/commit/a621a3ebf0c337bdeafa9bae597e206ac7cf68cc", "message": "Break up IndexAbstractionTests per review", "committedDate": "2020-09-15T20:05:42Z", "type": "commit"}, {"oid": "89df7c800cc42826342ecf38aead85bd4e946a50", "url": "https://github.com/elastic/elasticsearch/commit/89df7c800cc42826342ecf38aead85bd4e946a50", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-15T20:43:48Z", "type": "commit"}, {"oid": "0cf441196d1f21ba4d08bb727f4a346d26a23b53", "url": "https://github.com/elastic/elasticsearch/commit/0cf441196d1f21ba4d08bb727f4a346d26a23b53", "message": "Add origin for Logstash management APIs", "committedDate": "2020-09-15T21:13:04Z", "type": "commit"}, {"oid": "97bde46a126c5df2928a88f499d8d86f79afcca3", "url": "https://github.com/elastic/elasticsearch/commit/97bde46a126c5df2928a88f499d8d86f79afcca3", "message": "Always allow system indiex warnings in ML index template tests", "committedDate": "2020-09-15T21:13:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5Nzk4NA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489697984", "bodyText": "Should resolution of _all that includes system indices trigger a deprecation warning? If we get all aliases and return system aliases such as .security in 7.x but stop doing so in 8.0, then that would be a breaking change right?", "author": "jaymode", "createdAt": "2020-09-16T19:20:22Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestGetAliasesAction.java", "diffHunk": "@@ -72,8 +72,15 @@ public String getName() {\n         return \"get_aliases_action\";\n     }\n \n+    @Override\n+    public boolean allowSystemIndexAccessByDefault() {\n+        // If not given an index (only an alias), resolves `_all`, which causes deprecation warnings.\n+        return true;", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxOTIwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r490519208", "bodyText": "Should resolution of _all that includes system indices trigger a deprecation warning?\n\nThis does feel odd, but:\n\nIf it doesn't trigger a deprecation warning, then (for example) searches against _all that return documents in system indices will have an unannounced breaking change in 8.0, as you note in your second question.\nAs far as I can tell, in the presence of Security, it's impossible to tell in IndexNameExpressionResolver if the original query used a wildcard or not, as the original list of indices has by then been replaced. If I'm wrong and there's a good way to get that information, this might be a bit easier to fix.\n\n\nIf we get all aliases and return system aliases such as .security in 7.x but stop doing so in 8.0, then that would be a breaking change right?\n\nSort of - if we go ahead with our plan of treating system indices created in 7.x with the previous 7.x behavior, then technically no, but if we upgrade all of the system indices shortly after ugprade, it'll feel like it to a user.\nI'd definitely like to figure out something better to do here.", "author": "gwbrown", "createdAt": "2020-09-17T19:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5Nzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1Njg2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r490556862", "bodyText": "As far as I can tell, in the presence of Security, it's impossible to tell in IndexNameExpressionResolver if the original query used a wildcard or not, as the original list of indices has by then been replaced\n\nThat is 100% correct. I do wonder if we could have security place the original indices in the thread context and have the IndexNameExpressionResolver know that header/context key?\n\nif we go ahead with our plan of treating system indices created in 7.x with the previous 7.x behavior, then technically no, but if we upgrade all of the system indices shortly after ugprade, it'll feel like it to a user.\n\nI think there may be confusion around treatment of 7.x system indices. The original plan involved every index that was dot-prefixed to be a system index except those created in 7.x or earlier. Once we made the decision to allow hidden indices to be dot-prefixed, that opened up the ability to no longer having to provide this layer of bwc for system indices since we could have user created indices, hidden indices, and system indices that all start with dots after an upgrade. Instead, we allow 7.x dot indices that are not system or hidden to behave normally.\nWe're already marking specific indices as system indices in 7.x if a descriptor has been registered for that index to route the read operations to the correct thread pool.\nI am wondering if the types removal behavior could fit here:\n\nImplicit system index access without the parameter is deprecated in 7.x\nExplicit system index access without the parameter is deprecated in 7.x\nSystem index access with the parameter is not deprecated in 7.x\nImplicit system index access without the parameter is a bad request in 8.0\nExplicit system index access without the parameter is a bad request in 8.0\nSystem index access with the parameter is deprecated in 8.0+\nParameter removed for 9.0 :)", "author": "jaymode", "createdAt": "2020-09-17T20:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5Nzk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5ODQ2MA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489698460", "bodyText": "why do we allow system by default for cat apis?", "author": "jaymode", "createdAt": "2020-09-16T19:20:45Z", "path": "server/src/main/java/org/elasticsearch/rest/action/cat/AbstractCatAction.java", "diffHunk": "@@ -42,6 +42,11 @@\n \n     protected abstract Table getTableWithHeader(RestRequest request);\n \n+    @Override\n+    public boolean allowSystemIndexAccessByDefault() {\n+        return true;", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzkyMw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r490517923", "bodyText": "This ties into the \"Resolving _all causes a deprecation warning\" issue, and we can't omit them (like we do with hidden indices) in 7.x, as that would break BWC.", "author": "gwbrown", "createdAt": "2020-09-17T19:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5ODQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMTYwNA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489701604", "bodyText": "this feels like a hack to me; I wonder if we can find a way to not need this for items that resolve _all to do certain things :|", "author": "jaymode", "createdAt": "2020-09-16T19:23:54Z", "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/rest/RestDataStreamsStatsAction.java", "diffHunk": "@@ -29,6 +29,12 @@ public String getName() {\n         );\n     }\n \n+    @Override\n+    public boolean allowSystemIndexAccessByDefault() {\n+        // Does not actually access system indices, but does resolve `_all`, which can cause confusing deprecation warnings.", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMDU4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r490520586", "bodyText": "It's definitely a hack, and I'd love to not do this. I'll dig in a bit and see if there's a better way to handle this case.", "author": "gwbrown", "createdAt": "2020-09-17T19:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMTYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMjE2NA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489702164", "bodyText": "Do we have an issue for this yet?", "author": "jaymode", "createdAt": "2020-09-16T19:24:55Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/EnrichPolicyRunner.java", "diffHunk": "@@ -350,67 +355,80 @@ private void transferDataToEnrichIndex(final String destinationIndexName) {\n         reindexRequest.getDestination().source(new BytesArray(new byte[0]), XContentType.SMILE);\n         reindexRequest.getDestination().routing(\"discard\");\n         reindexRequest.getDestination().setPipeline(EnrichPolicyReindexPipeline.pipelineName());\n-        client.execute(ReindexAction.INSTANCE, reindexRequest, new ActionListener<>() {\n-            @Override\n-            public void onResponse(BulkByScrollResponse bulkByScrollResponse) {\n-                // Do we want to fail the request if there were failures during the reindex process?\n-                if (bulkByScrollResponse.getBulkFailures().size() > 0) {\n-                    logger.warn(\n-                        \"Policy [{}]: encountered [{}] bulk failures. Turn on DEBUG logging for details.\",\n-                        policyName,\n-                        bulkByScrollResponse.getBulkFailures().size()\n-                    );\n-                    if (logger.isDebugEnabled()) {\n-                        for (BulkItemResponse.Failure failure : bulkByScrollResponse.getBulkFailures()) {\n-                            logger.debug(\n-                                new ParameterizedMessage(\n-                                    \"Policy [{}]: bulk index failed for index [{}], id [{}]\",\n-                                    policyName,\n-                                    failure.getIndex(),\n-                                    failure.getId()\n-                                ),\n-                                failure.getCause()\n+\n+        // The ContextPreservingActionListener here is for the purpose of dropping the response headers, as we need this reindex to run\n+        // in the security context of the user (rather than Enrich's security context) to ensure that DLS/FLS is correctly applied, but\n+        // the reindex needs to access the `.enrich` index, which causes a deprecation warning. Since we drop the response headers,\n+        // the deprecation warning is also dropped - but this is a hack and will not work once full protections of system indices are", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2OTIwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489769209", "bodyText": "We do now: #62505", "author": "gwbrown", "createdAt": "2020-09-16T21:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMjE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNTUxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489705511", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:31:01Z", "path": "x-pack/plugin/transform/qa/single-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformConfigurationIndexIT.java", "diffHunk": "@@ -43,6 +43,7 @@ public void testDeleteConfigurationLeftOver() throws IOException {\n             final StringEntity entity = new StringEntity(Strings.toString(builder), ContentType.APPLICATION_JSON);\n             Request req = new Request(\"PUT\",\n                     TransformInternalIndexConstants.LATEST_INDEX_NAME + \"/_doc/\" + TransformConfig.documentId(fakeTransformName));\n+            req.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNTc2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489705767", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:31:30Z", "path": "x-pack/plugin/transform/qa/single-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformInternalIndexIT.java", "diffHunk": "@@ -79,14 +76,18 @@ public void testUpdateDeletesOldTransformConfig() throws Exception {\n             + \" } } } },\"\n             + \"\\\"frequency\\\":\\\"1s\\\"\"\n             + \"}\";\n-        client.index(new IndexRequest(OLD_INDEX)\n-                .id(TransformConfig.documentId(transformId))\n-                .source(config, XContentType.JSON)\n-                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE),\n-            RequestOptions.DEFAULT);\n-        GetResponse getResponse = client.get(new GetRequest(OLD_INDEX, TransformConfig.documentId(transformId)),\n-            RequestOptions.DEFAULT);\n-        assertThat(getResponse.isExists(), is(true));\n+        Request indexRequest = new Request(\"PUT\", OLD_INDEX + \"/_doc/\" + TransformConfig.documentId(transformId));\n+        indexRequest.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNTk2MA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489705960", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:31:51Z", "path": "x-pack/plugin/transform/qa/single-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformRestTestCase.java", "diffHunk": "@@ -480,6 +480,7 @@ public void wipeTransforms() throws IOException {\n \n         // the configuration index should be empty\n         Request request = new Request(\"GET\", TransformInternalIndexConstants.LATEST_INDEX_NAME + \"/_search\");\n+        request.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNjA4MA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489706080", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:32:07Z", "path": "x-pack/plugin/transform/qa/single-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformRobustnessIT.java", "diffHunk": "@@ -117,6 +117,8 @@ private int getNumberOfTransformTasks() throws IOException {\n     }\n \n     private void beEvilAndDeleteTheTransformIndex() throws IOException {\n-        adminClient().performRequest(new Request(\"DELETE\", TransformInternalIndexConstants.LATEST_INDEX_NAME));\n+        final Request deleteRequest = new Request(\"DELETE\", TransformInternalIndexConstants.LATEST_INDEX_NAME);\n+        deleteRequest.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNjIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489706220", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:32:21Z", "path": "x-pack/plugin/transform/qa/single-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/transform/integration/TransformUsageIT.java", "diffHunk": "@@ -62,6 +62,7 @@ public void testUsage() throws Exception {\n                 + \":\"\n                 + TransformStoredDoc.NAME\n         );\n+        statsExistsRequest.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNjY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489706647", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:33:06Z", "path": "x-pack/plugin/watcher/qa/common/src/main/java/org/elasticsearch/xpack/watcher/WatcherRestTestCase.java", "diffHunk": "@@ -73,6 +73,7 @@ public final void stopWatcher() throws Exception {\n \n         Request deleteWatchesIndexRequest = new Request(\"DELETE\", \".watches\");\n         deleteWatchesIndexRequest.addParameter(\"ignore_unavailable\", \"true\");\n+        deleteWatchesIndexRequest.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNjgzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489706839", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:33:30Z", "path": "x-pack/plugin/watcher/qa/common/src/main/java/org/elasticsearch/xpack/watcher/WatcherYamlSuiteTestCase.java", "diffHunk": "@@ -105,6 +105,7 @@ public final void stopWatcher() throws Exception {\n     private static void deleteWatcherIndices() throws IOException {\n         Request deleteWatchesIndexRequest = new Request(\"DELETE\", \".watches\");\n         deleteWatchesIndexRequest.addParameter(\"ignore_unavailable\", \"true\");\n+        deleteWatchesIndexRequest.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNzcwNg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489707706", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:35:04Z", "path": "x-pack/plugin/watcher/qa/with-monitoring/src/javaRestTest/java/org/elasticsearch/smoketest/MonitoringWithWatcherRestIT.java", "diffHunk": "@@ -86,8 +88,10 @@ private void assertMonitoringWatchHasBeenOverWritten(String watchId) throws Exce\n \n     private void assertTotalWatchCount(int expectedWatches) throws Exception {\n         assertBusy(() -> {\n-            assertOK(client().performRequest(new Request(\"POST\", \"/.watches/_refresh\")));\n-            ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request(\"POST\", \"/.watches/_count\")));\n+            refreshAllIndices();\n+            final Request countRequest = new Request(\"POST\", \"/.watches/_count\");\n+            countRequest.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxNDU0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r489714549", "bodyText": "add an issue for this test too (or add it to an issue for all tests)", "author": "jaymode", "createdAt": "2020-09-16T19:48:00Z", "path": "x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/MlMappingsUpgradeIT.java", "diffHunk": "@@ -163,6 +163,7 @@ private void assertUpgradedConfigMappings() throws Exception {\n \n         assertBusy(() -> {\n             Request getMappings = new Request(\"GET\", \".ml-config/_mappings\");\n+            getMappings.addParameter(\"allow_system_index_access\", \"true\");", "originalCommit": "97bde46a126c5df2928a88f499d8d86f79afcca3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "240a6f093b140044ab3ac7f03091646c400a3e9d", "url": "https://github.com/elastic/elasticsearch/commit/240a6f093b140044ab3ac7f03091646c400a3e9d", "message": "Use test assumptions instead of setting system properties per review", "committedDate": "2020-09-16T22:23:04Z", "type": "commit"}, {"oid": "d38d1507a0c67157bab9e6dbe05493276610ed7e", "url": "https://github.com/elastic/elasticsearch/commit/d38d1507a0c67157bab9e6dbe05493276610ed7e", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-16T22:51:44Z", "type": "commit"}, {"oid": "46b646dca88584a2647ff8d03373924d475add2f", "url": "https://github.com/elastic/elasticsearch/commit/46b646dca88584a2647ff8d03373924d475add2f", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-17T22:05:35Z", "type": "commit"}, {"oid": "1972b9fc782d3cc076dd7ceaec9e4d1577380026", "url": "https://github.com/elastic/elasticsearch/commit/1972b9fc782d3cc076dd7ceaec9e4d1577380026", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-18T17:22:17Z", "type": "commit"}, {"oid": "8fd1e262c1273c8365187a25de8f531d643466a7", "url": "https://github.com/elastic/elasticsearch/commit/8fd1e262c1273c8365187a25de8f531d643466a7", "message": "Do not emit deprecation warnings on total wildcard queries", "committedDate": "2020-09-18T22:23:20Z", "type": "commit"}, {"oid": "9459027136e51beb982d12d26a3f54e7a8698517", "url": "https://github.com/elastic/elasticsearch/commit/9459027136e51beb982d12d26a3f54e7a8698517", "message": "Remove system index access by default from APIs which no longer need it", "committedDate": "2020-09-18T22:23:20Z", "type": "commit"}, {"oid": "8e990ec114e24d107a4f4cb9b70282e1b61dd623", "url": "https://github.com/elastic/elasticsearch/commit/8e990ec114e24d107a4f4cb9b70282e1b61dd623", "message": "First cut of security integration for _all handling", "committedDate": "2020-09-18T22:23:21Z", "type": "commit"}, {"oid": "24682c2532af15d75ac917768e8dd033b2f54fa2", "url": "https://github.com/elastic/elasticsearch/commit/24682c2532af15d75ac917768e8dd033b2f54fa2", "message": "Add yet another allow_system_index_access flag as necessary", "committedDate": "2020-09-18T22:23:21Z", "type": "commit"}, {"oid": "3218750bd10983cbec045d2f629ff9c341e0b252", "url": "https://github.com/elastic/elasticsearch/commit/3218750bd10983cbec045d2f629ff9c341e0b252", "message": "Add yet more allow_system_index_access flag as necessary", "committedDate": "2020-09-18T22:35:20Z", "type": "commit"}, {"oid": "50a013c1b4e6e96f78d0b278c8b1e04a492a728c", "url": "https://github.com/elastic/elasticsearch/commit/50a013c1b4e6e96f78d0b278c8b1e04a492a728c", "message": "Check if a deprecation warning should be emitted rather than allowing system index access for _all", "committedDate": "2020-09-21T22:14:41Z", "type": "commit"}, {"oid": "c8d55a5e921c7b46aa39a7bed2ca3254333e1a85", "url": "https://github.com/elastic/elasticsearch/commit/c8d55a5e921c7b46aa39a7bed2ca3254333e1a85", "message": "Remove header drop from IndexResolver", "committedDate": "2020-09-21T22:15:06Z", "type": "commit"}, {"oid": "9c15ae8861ded7eb04fdf45f2d78cc9785890c86", "url": "https://github.com/elastic/elasticsearch/commit/9c15ae8861ded7eb04fdf45f2d78cc9785890c86", "message": "Set original indices header OUTSIDE of the context preserving listener", "committedDate": "2020-09-21T23:16:22Z", "type": "commit"}, {"oid": "6b2db2fc4afb1c7801d3ae8198684dd3177d5ce9", "url": "https://github.com/elastic/elasticsearch/commit/6b2db2fc4afb1c7801d3ae8198684dd3177d5ce9", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-21T23:16:52Z", "type": "commit"}, {"oid": "dfb6c78e44d8f9ffefc676666c4d9c7fcb9134cd", "url": "https://github.com/elastic/elasticsearch/commit/dfb6c78e44d8f9ffefc676666c4d9c7fcb9134cd", "message": "Line lengths", "committedDate": "2020-09-21T23:22:37Z", "type": "commit"}, {"oid": "e76731196beb064f1636e2575c1be949c5a89bd0", "url": "https://github.com/elastic/elasticsearch/commit/e76731196beb064f1636e2575c1be949c5a89bd0", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-22T17:37:37Z", "type": "commit"}, {"oid": "2d172291dfa04309772487a392005bb221771ae3", "url": "https://github.com/elastic/elasticsearch/commit/2d172291dfa04309772487a392005bb221771ae3", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-23T21:54:28Z", "type": "commit"}, {"oid": "9f7790f36c6688dbde32f6cebd3c27185a5711b1", "url": "https://github.com/elastic/elasticsearch/commit/9f7790f36c6688dbde32f6cebd3c27185a5711b1", "message": "Replace allow_system_index_access flags in Java tests with warnings handlers", "committedDate": "2020-09-24T16:21:17Z", "type": "commit"}, {"oid": "08c2ec94e8056e8534fd6f904f4c505172278452", "url": "https://github.com/elastic/elasticsearch/commit/08c2ec94e8056e8534fd6f904f4c505172278452", "message": "Replace allow_system_index_access flags in yaml tests with warnings handlers", "committedDate": "2020-09-24T17:57:41Z", "type": "commit"}, {"oid": "7a2606fdc6b06da015006fbd852f8ea5922d6945", "url": "https://github.com/elastic/elasticsearch/commit/7a2606fdc6b06da015006fbd852f8ea5922d6945", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-24T18:37:16Z", "type": "commit"}, {"oid": "bb27000c40fb25c9cf0d4a6689ee5f05843dfb7e", "url": "https://github.com/elastic/elasticsearch/commit/bb27000c40fb25c9cf0d4a6689ee5f05843dfb7e", "message": "Remove a couple unnecessary warning checks (they might be back later)", "committedDate": "2020-09-24T20:54:50Z", "type": "commit"}, {"oid": "e3c4d816fb644621282cc1c8ae7110d9bc81bd68", "url": "https://github.com/elastic/elasticsearch/commit/e3c4d816fb644621282cc1c8ae7110d9bc81bd68", "message": "The current security index is `.security-7`, not just ``.security`", "committedDate": "2020-09-24T20:56:42Z", "type": "commit"}, {"oid": "3ac9ecfb36c39c1e25256fdee6d8bcfff812a665", "url": "https://github.com/elastic/elasticsearch/commit/3ac9ecfb36c39c1e25256fdee6d8bcfff812a665", "message": "Fix skip:feature block in YAML test", "committedDate": "2020-09-24T21:11:15Z", "type": "commit"}, {"oid": "d3f5cd544259670a5dff73bf1675c059cdf1b1f0", "url": "https://github.com/elastic/elasticsearch/commit/d3f5cd544259670a5dff73bf1675c059cdf1b1f0", "message": "Add missing warning handler for current version", "committedDate": "2020-09-24T21:11:47Z", "type": "commit"}, {"oid": "3668a7ba46da72faf40a1f14ea69c479b9fab939", "url": "https://github.com/elastic/elasticsearch/commit/3668a7ba46da72faf40a1f14ea69c479b9fab939", "message": "Undo _all special case handling", "committedDate": "2020-09-24T21:34:09Z", "type": "commit"}, {"oid": "acc455ae0301541fc9fa182189167e6b8f3273d3", "url": "https://github.com/elastic/elasticsearch/commit/acc455ae0301541fc9fa182189167e6b8f3273d3", "message": "Remove allow_system_index_access flag", "committedDate": "2020-09-24T22:06:49Z", "type": "commit"}, {"oid": "aa48e2028b91f891a3231556040542c1d4491365", "url": "https://github.com/elastic/elasticsearch/commit/aa48e2028b91f891a3231556040542c1d4491365", "message": "More `.security` -> `.security-7` in expected warnings", "committedDate": "2020-09-24T22:15:45Z", "type": "commit"}, {"oid": "f2520dc28eb0fd3b9893175210ad6910bcf67542", "url": "https://github.com/elastic/elasticsearch/commit/f2520dc28eb0fd3b9893175210ad6910bcf67542", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-24T22:16:26Z", "type": "commit"}, {"oid": "04b7e4ba752f2131617547a1b2d8222770e574f1", "url": "https://github.com/elastic/elasticsearch/commit/04b7e4ba752f2131617547a1b2d8222770e574f1", "message": "Unused import", "committedDate": "2020-09-24T22:18:35Z", "type": "commit"}, {"oid": "e9d533268df72042e7861710194c23607c56cf77", "url": "https://github.com/elastic/elasticsearch/commit/e9d533268df72042e7861710194c23607c56cf77", "message": "Work around _all resolution in Get Aliases API", "committedDate": "2020-09-30T19:38:05Z", "type": "commit"}, {"oid": "51e4d50bd686d3b7891d334270d85011757f036e", "url": "https://github.com/elastic/elasticsearch/commit/51e4d50bd686d3b7891d334270d85011757f036e", "message": "Specify index in \"Test wildcard job id\" so we don't get a warning", "committedDate": "2020-09-30T20:19:39Z", "type": "commit"}, {"oid": "661ce27597074b01737cc90965787abbd4802eec", "url": "https://github.com/elastic/elasticsearch/commit/661ce27597074b01737cc90965787abbd4802eec", "message": "Accept warning in SQL test that might trigger it", "committedDate": "2020-09-30T20:20:11Z", "type": "commit"}, {"oid": "5c07feab739165e8e232d4cfa718309f1cfe2855", "url": "https://github.com/elastic/elasticsearch/commit/5c07feab739165e8e232d4cfa718309f1cfe2855", "message": "Allow system index access in APIs we're confident we want it", "committedDate": "2020-09-30T20:39:39Z", "type": "commit"}, {"oid": "dad9bd16557eac6a3cfdf966b16b8959e5f0034c", "url": "https://github.com/elastic/elasticsearch/commit/dad9bd16557eac6a3cfdf966b16b8959e5f0034c", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-30T22:31:57Z", "type": "commit"}, {"oid": "70136919984f45a98a4f6e9c6d2da0dcb0c9f273", "url": "https://github.com/elastic/elasticsearch/commit/70136919984f45a98a4f6e9c6d2da0dcb0c9f273", "message": "Spotless", "committedDate": "2020-09-30T22:50:30Z", "type": "commit"}, {"oid": "a5f080e9391c2d542dd4e72c3653a322d453820f", "url": "https://github.com/elastic/elasticsearch/commit/a5f080e9391c2d542dd4e72c3653a322d453820f", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-10-01T16:59:11Z", "type": "commit"}, {"oid": "2e138fd37307a7071614d241b06978f5eb30bf88", "url": "https://github.com/elastic/elasticsearch/commit/2e138fd37307a7071614d241b06978f5eb30bf88", "message": "Respect system index access header when re-adding deprecation in Get Alias API", "committedDate": "2020-10-01T17:17:49Z", "type": "commit"}, {"oid": "df094c3e0504b05a3b6526ad9e9383c4d4b1882e", "url": "https://github.com/elastic/elasticsearch/commit/df094c3e0504b05a3b6526ad9e9383c4d4b1882e", "message": "Handle Get Alias deprecation warning in upgrade test", "committedDate": "2020-10-01T17:26:29Z", "type": "commit"}, {"oid": "2cb62db7ace2b30a47387b91d2b181e3e9e5cd6a", "url": "https://github.com/elastic/elasticsearch/commit/2cb62db7ace2b30a47387b91d2b181e3e9e5cd6a", "message": "Allow data streams stats action to only resolve to data streams", "committedDate": "2020-10-01T19:28:59Z", "type": "commit"}, {"oid": "e4f9d866eaff8eeb96eb14e7ec41002effded402", "url": "https://github.com/elastic/elasticsearch/commit/e4f9d866eaff8eeb96eb14e7ec41002effded402", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-10-01T19:51:29Z", "type": "commit"}, {"oid": "a00a0c79053e6d4962e1447a6c1e50837e014bb7", "url": "https://github.com/elastic/elasticsearch/commit/a00a0c79053e6d4962e1447a6c1e50837e014bb7", "message": "Allow deprecation warning on another alias call", "committedDate": "2020-10-01T20:01:28Z", "type": "commit"}, {"oid": "aaa9759531de48acdf323991048fe8e79b992a7d", "url": "https://github.com/elastic/elasticsearch/commit/aaa9759531de48acdf323991048fe8e79b992a7d", "message": "Allow _cat/aliases to access system indices by default because it's weird otherwise", "committedDate": "2020-10-01T21:08:37Z", "type": "commit"}, {"oid": "1f989c766977e0eda0f51da334f096d848ee867c", "url": "https://github.com/elastic/elasticsearch/commit/1f989c766977e0eda0f51da334f096d848ee867c", "message": "Allow deprecation warning on wildcard Get Aliases call in MlJobIT", "committedDate": "2020-10-01T21:09:08Z", "type": "commit"}, {"oid": "cae36a5ff97ff98510939b1b58401c2572e275bf", "url": "https://github.com/elastic/elasticsearch/commit/cae36a5ff97ff98510939b1b58401c2572e275bf", "message": "Remove unnecessary semicolon", "committedDate": "2020-10-01T22:33:49Z", "type": "commit"}, {"oid": "7cb23ddc0c59331bc2941920b44b00d76750484e", "url": "https://github.com/elastic/elasticsearch/commit/7cb23ddc0c59331bc2941920b44b00d76750484e", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-10-02T21:20:11Z", "type": "commit"}, {"oid": "0eb283cf7c2e48b3dabd0a8c4218f14237b9c437", "url": "https://github.com/elastic/elasticsearch/commit/0eb283cf7c2e48b3dabd0a8c4218f14237b9c437", "message": "Fix compilation after merge", "committedDate": "2020-10-02T21:24:01Z", "type": "commit"}, {"oid": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "url": "https://github.com/elastic/elasticsearch/commit/0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "message": "Remove \"feature flag\" for deprecation warnings", "committedDate": "2020-10-02T22:56:12Z", "type": "commit"}, {"oid": "07aacba9d9bf5461cb03e36d5e256d2cc5de80de", "url": "https://github.com/elastic/elasticsearch/commit/07aacba9d9bf5461cb03e36d5e256d2cc5de80de", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-10-05T15:08:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MjMxNg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499742316", "bodyText": "Shouldn't we also deprecate if the alias request was for a \"system alias\" (say .kibana) but it doesn't exist?", "author": "jaymode", "createdAt": "2020-10-05T16:58:39Z", "path": "server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/TransportGetAliasesAction.java", "diffHunk": "@@ -85,7 +99,27 @@ protected void masterOperation(Task task, GetAliasesRequest request, ClusterStat\n                 assert previous == null;\n             }\n         }\n-        return mapBuilder.build();\n+        final ImmutableOpenMap<String, List<AliasMetadata>> finalResponse = mapBuilder.build();\n+        if (systemIndexAccessAllowed == false) {\n+            checkSystemIndexAccess(state, finalResponse);\n+        }\n+        return finalResponse;\n+    }\n+\n+    private static void checkSystemIndexAccess(ClusterState state, ImmutableOpenMap<String, List<AliasMetadata>> aliasesMap) {", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MTUwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499771509", "bodyText": "We can do so if it matches a System Index pattern, at least, yes.", "author": "gwbrown", "createdAt": "2020-10-05T17:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MjMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMzUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499913510", "bodyText": "I've implemented this such that the alias is only checked if there are no concrete system indices found to warn about.", "author": "gwbrown", "createdAt": "2020-10-05T22:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MjMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mzg2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499743867", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static DeprecationLogger deprecationLogger = DeprecationLogger.getLogger(IndexNameExpressionResolver.class);\n          \n          \n            \n                private static final DeprecationLogger deprecationLogger = DeprecationLogger.getLogger(IndexNameExpressionResolver.class);", "author": "jaymode", "createdAt": "2020-10-05T17:01:22Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -59,19 +63,37 @@\n import java.util.stream.StreamSupport;\n \n public class IndexNameExpressionResolver {\n+    public static DeprecationLogger deprecationLogger = DeprecationLogger.getLogger(IndexNameExpressionResolver.class);", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDUzMw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499744533", "bodyText": "can you document this method?", "author": "jaymode", "createdAt": "2020-10-05T17:02:41Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -650,6 +693,10 @@ boolean isPatternMatchingAllIndices(Metadata metadata, String[] indicesOrAliases\n         return false;\n     }\n \n+    public boolean isSystemIndexAccessAllowed() {", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Njk5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499746992", "bodyText": "technically we don't need to modify this method's signature since the class has the NodeClient, so we could do client.threadPool().getThreadContext() to get the ThreadContext and even store the reference in the class constructor.", "author": "jaymode", "createdAt": "2020-10-05T17:07:07Z", "path": "server/src/main/java/org/elasticsearch/rest/RestController.java", "diffHunk": "@@ -218,7 +219,8 @@ public void dispatchBadRequest(final RestChannel channel, final ThreadContext th\n         }\n     }\n \n-    private void dispatchRequest(RestRequest request, RestChannel channel, RestHandler handler) throws Exception {\n+    private void dispatchRequest(RestRequest request, RestChannel channel, RestHandler handler,\n+                                 ThreadContext threadContext) throws Exception {", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODA5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499748099", "bodyText": "Do you recall why we need to allow system indices to be refreshed?", "author": "jaymode", "createdAt": "2020-10-05T17:09:16Z", "path": "server/src/main/java/org/elasticsearch/rest/action/admin/indices/RestRefreshAction.java", "diffHunk": "@@ -51,6 +51,11 @@ public String getName() {\n         return \"refresh_action\";\n     }\n \n+    @Override\n+    public boolean allowSystemIndexAccessByDefault() {\n+        return true;", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MDgxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499770811", "bodyText": "I don't think we do - I had intended to remove this.", "author": "gwbrown", "createdAt": "2020-10-05T17:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODc0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499748745", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n          \n          \n            \n                            new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),", "author": "jaymode", "createdAt": "2020-10-05T17:10:32Z", "path": "server/src/test/java/org/elasticsearch/action/ActionModuleTests.java", "diffHunk": "@@ -146,9 +148,10 @@ public String getName() {\n         ThreadPool threadPool = new TestThreadPool(getTestName());\n         try {\n             UsageService usageService = new UsageService();\n-            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n-                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n-                    singletonList(dupsMainAction), null, null, usageService, null);\n+            ActionModule actionModule = new ActionModule(settings.getSettings(),\n+                new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499748956", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n          \n          \n            \n                            new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),", "author": "jaymode", "createdAt": "2020-10-05T17:10:58Z", "path": "server/src/test/java/org/elasticsearch/action/ActionModuleTests.java", "diffHunk": "@@ -180,9 +183,10 @@ public void handleRequest(RestRequest request, RestChannel channel, NodeClient c\n         ThreadPool threadPool = new TestThreadPool(getTestName());\n         try {\n             UsageService usageService = new UsageService();\n-            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n-                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n-                    singletonList(registersFakeHandler), null, null, usageService, null);\n+            ActionModule actionModule = new ActionModule(settings.getSettings(),\n+                new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MzYzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499753631", "bodyText": "do we need this log statement?", "author": "jaymode", "createdAt": "2020-10-05T17:19:14Z", "path": "x-pack/plugin/ml/qa/native-multi-node-tests/src/javaRestTest/java/org/elasticsearch/xpack/ml/integration/InferenceIngestIT.java", "diffHunk": "@@ -71,8 +70,26 @@ protected Settings restClientSettings() {\n     @After\n     public void cleanUpData() throws Exception {\n         new MlRestTestStateCleaner(logger, adminClient()).clearMlMetadata();\n-        client().performRequest(new Request(\"DELETE\", InferenceIndexConstants.INDEX_PATTERN));\n-        client().performRequest(new Request(\"DELETE\", MlStatsIndex.indexPattern()));\n+        RequestOptions allowSystemIndexAccessWarningOptions = RequestOptions.DEFAULT.toBuilder()\n+            .setWarningsHandler(warnings -> {\n+                if (warnings.isEmpty()) {\n+                    // There may not be an index to delete, in which case there's no warning\n+                    return false;\n+                } else if (warnings.size() > 1) {\n+                    logger.warn(\"too many warnings: {}\", warnings);", "originalCommit": "0e302e6c75e75684b2d0f5b3b36bcbcd5836cdc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MDYyMg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r499770622", "bodyText": "No, thanks for catching. I'll remove.", "author": "gwbrown", "createdAt": "2020-10-05T17:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MzYzMQ=="}], "type": "inlineReview"}, {"oid": "5df4c3fa5d508cb6706977e638f7ca3cef5611b7", "url": "https://github.com/elastic/elasticsearch/commit/5df4c3fa5d508cb6706977e638f7ca3cef5611b7", "message": "Refresh no longer allow system index access by default", "committedDate": "2020-10-05T17:59:50Z", "type": "commit"}, {"oid": "0eb3eb853254b29b4fd712cb4775e68352fe2095", "url": "https://github.com/elastic/elasticsearch/commit/0eb3eb853254b29b4fd712cb4775e68352fe2095", "message": "Remove unnecessary log line", "committedDate": "2020-10-05T18:06:44Z", "type": "commit"}, {"oid": "591b442e08ed84d43be84b759afe6a67a46dd3fb", "url": "https://github.com/elastic/elasticsearch/commit/591b442e08ed84d43be84b759afe6a67a46dd3fb", "message": "Don't create a new threadcontext, we already have one", "committedDate": "2020-10-05T18:07:34Z", "type": "commit"}, {"oid": "906e024c312bc2f7c5b4862cae6b2cf0b4e45183", "url": "https://github.com/elastic/elasticsearch/commit/906e024c312bc2f7c5b4862cae6b2cf0b4e45183", "message": "Don't need to take ThreadContext as a param in dispatchRequest", "committedDate": "2020-10-05T18:09:12Z", "type": "commit"}, {"oid": "e23a25bf22142b27a6010c42d0190d974f27ee4a", "url": "https://github.com/elastic/elasticsearch/commit/e23a25bf22142b27a6010c42d0190d974f27ee4a", "message": "Javadoc for isSystemIndexAccessAllowed", "committedDate": "2020-10-05T18:10:09Z", "type": "commit"}, {"oid": "b924de59d287538e1a5595d57c793620cb7c8403", "url": "https://github.com/elastic/elasticsearch/commit/b924de59d287538e1a5595d57c793620cb7c8403", "message": "Deprecation logger doesn't need to be public", "committedDate": "2020-10-05T18:10:39Z", "type": "commit"}, {"oid": "d3eb24741b36f659875a36af89de8935c2f683b9", "url": "https://github.com/elastic/elasticsearch/commit/d3eb24741b36f659875a36af89de8935c2f683b9", "message": "Doc fix per review", "committedDate": "2020-10-05T18:11:10Z", "type": "commit"}, {"oid": "c223029fc074d7ed607cbb5aec456cf08597a616", "url": "https://github.com/elastic/elasticsearch/commit/c223029fc074d7ed607cbb5aec456cf08597a616", "message": "Allow deprecation warning for refreshing all indices", "committedDate": "2020-10-05T18:17:21Z", "type": "commit"}, {"oid": "ebabb5ab2ff2db343dea758dcb48e00bf5513085", "url": "https://github.com/elastic/elasticsearch/commit/ebabb5ab2ff2db343dea758dcb48e00bf5513085", "message": "Allow warnings on refresh in reindex YAML tests", "committedDate": "2020-10-05T18:55:13Z", "type": "commit"}, {"oid": "d7b0f8e7ba50f39cbedd2748ff95fafe48dfff38", "url": "https://github.com/elastic/elasticsearch/commit/d7b0f8e7ba50f39cbedd2748ff95fafe48dfff38", "message": "Properly populate client in RestControllerTests now that it's actually used", "committedDate": "2020-10-05T19:11:04Z", "type": "commit"}, {"oid": "45cf15d2823053b63c8eb0dd5ed1edfb9710afec", "url": "https://github.com/elastic/elasticsearch/commit/45cf15d2823053b63c8eb0dd5ed1edfb9710afec", "message": "Stash context in RestSubmitAsyncSearchActionTests so the same headers don't get added multiple times", "committedDate": "2020-10-05T20:00:04Z", "type": "commit"}, {"oid": "49bf8c5b7964f5f486f6b3439de2fcbd7ab75b31", "url": "https://github.com/elastic/elasticsearch/commit/49bf8c5b7964f5f486f6b3439de2fcbd7ab75b31", "message": "Handle more _refresh warnings", "committedDate": "2020-10-05T20:19:57Z", "type": "commit"}, {"oid": "18b98ce35ebfcbe34bc8bab048849d569761ae06", "url": "https://github.com/elastic/elasticsearch/commit/18b98ce35ebfcbe34bc8bab048849d569761ae06", "message": "YAML skip: features: warnings block", "committedDate": "2020-10-05T20:51:06Z", "type": "commit"}, {"oid": "2a6bbb2206ce3333b903f6a55bf41c3b22d51c4a", "url": "https://github.com/elastic/elasticsearch/commit/2a6bbb2206ce3333b903f6a55bf41c3b22d51c4a", "message": "Address _refresh warnings in yaml tests", "committedDate": "2020-10-05T21:45:34Z", "type": "commit"}, {"oid": "5c92e966bd45ad7070be078cc4dd0e3c761fbe74", "url": "https://github.com/elastic/elasticsearch/commit/5c92e966bd45ad7070be078cc4dd0e3c761fbe74", "message": "Warn when accessing aliases with names reserved for system indices", "committedDate": "2020-10-05T22:05:25Z", "type": "commit"}, {"oid": "c852f30cbdf45dd9e1bc60f2101a431826748181", "url": "https://github.com/elastic/elasticsearch/commit/c852f30cbdf45dd9e1bc60f2101a431826748181", "message": "Suppress warnings when `X-elastic-product-origin` header is present", "committedDate": "2020-10-05T22:07:29Z", "type": "commit"}, {"oid": "5276b12b0d26ed0b4a43d2746aab34eac4ad0237", "url": "https://github.com/elastic/elasticsearch/commit/5276b12b0d26ed0b4a43d2746aab34eac4ad0237", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-10-05T22:22:23Z", "type": "commit"}, {"oid": "833215a719c177208be1eee71a64eded99907ecc", "url": "https://github.com/elastic/elasticsearch/commit/833215a719c177208be1eee71a64eded99907ecc", "message": "EMPTY_MAP -> emptyMap()", "committedDate": "2020-10-05T22:26:21Z", "type": "commit"}, {"oid": "f7c9e5b8bab6d089c01cb98850db1054a13369f3", "url": "https://github.com/elastic/elasticsearch/commit/f7c9e5b8bab6d089c01cb98850db1054a13369f3", "message": "Invert incorrect header check", "committedDate": "2020-10-05T22:37:03Z", "type": "commit"}, {"oid": "c4e5ed8e1d4235442d3729523a183a143a4308cb", "url": "https://github.com/elastic/elasticsearch/commit/c4e5ed8e1d4235442d3729523a183a143a4308cb", "message": "Add comment about header", "committedDate": "2020-10-05T23:06:40Z", "type": "commit"}, {"oid": "a1ffb915b9610c8ac1778d7411c73924f40d2504", "url": "https://github.com/elastic/elasticsearch/commit/a1ffb915b9610c8ac1778d7411c73924f40d2504", "message": "first cut of header-based system index enforcement", "committedDate": "2020-08-11T01:17:24Z", "type": "commit"}, {"oid": "4712c4781157740b2d1579a93193fb3f9e0a7969", "url": "https://github.com/elastic/elasticsearch/commit/4712c4781157740b2d1579a93193fb3f9e0a7969", "message": "Properly shut down components in test", "committedDate": "2020-08-11T01:18:21Z", "type": "commit"}, {"oid": "6793e2e99a551bfbcc65aba22f4a7af9908e6776", "url": "https://github.com/elastic/elasticsearch/commit/6793e2e99a551bfbcc65aba22f4a7af9908e6776", "message": "Version guard system index flag on cleanup", "committedDate": "2020-08-11T01:18:21Z", "type": "commit"}, {"oid": "98cad266bbae56ab953e8e4b5eecb78ce594aa0b", "url": "https://github.com/elastic/elasticsearch/commit/98cad266bbae56ab953e8e4b5eecb78ce594aa0b", "message": "Fix guard in REST layer", "committedDate": "2020-08-11T01:18:21Z", "type": "commit"}, {"oid": "3fe10113b75be52a5ef3dd9508798f3c2c065530", "url": "https://github.com/elastic/elasticsearch/commit/3fe10113b75be52a5ef3dd9508798f3c2c065530", "message": "Set origin from Enrich", "committedDate": "2020-08-11T01:18:21Z", "type": "commit"}, {"oid": "1c67a6fb54f5c514ceee101ea54444ef36008082", "url": "https://github.com/elastic/elasticsearch/commit/1c67a6fb54f5c514ceee101ea54444ef36008082", "message": "Set origin from Enrich in the processor", "committedDate": "2020-08-11T01:19:05Z", "type": "commit"}, {"oid": "57b8c036f0d7d3ae57310994a85f25ad999131de", "url": "https://github.com/elastic/elasticsearch/commit/57b8c036f0d7d3ae57310994a85f25ad999131de", "message": "Fix NPEs in Enrich tests", "committedDate": "2020-08-11T01:19:08Z", "type": "commit"}, {"oid": "fc85715b2d901f9bdbdb330ffc04dfc4e05c2a1d", "url": "https://github.com/elastic/elasticsearch/commit/fc85715b2d901f9bdbdb330ffc04dfc4e05c2a1d", "message": "Ensure we never double-add the header (should be tests only?)", "committedDate": "2020-08-11T01:19:08Z", "type": "commit"}, {"oid": "d782a40032f0976189f0eb7484332010455de537", "url": "https://github.com/elastic/elasticsearch/commit/d782a40032f0976189f0eb7484332010455de537", "message": "Fix NPE in UsageServiceTests", "committedDate": "2020-08-11T01:19:08Z", "type": "commit"}, {"oid": "b437ad6c74945ee61a0787dbe3724a0f6359fd13", "url": "https://github.com/elastic/elasticsearch/commit/b437ad6c74945ee61a0787dbe3724a0f6359fd13", "message": "Fix NPE in RestAnalyzeActionTests", "committedDate": "2020-08-11T01:19:08Z", "type": "commit"}, {"oid": "d0c1a8fe845fcbf7198dcebc3da697a50b5d03a3", "url": "https://github.com/elastic/elasticsearch/commit/d0c1a8fe845fcbf7198dcebc3da697a50b5d03a3", "message": "Fix NPE in RestBulkActionTests", "committedDate": "2020-08-11T01:19:08Z", "type": "commit"}, {"oid": "ebaafcfb72bbbfcb9c268fb4fe15754c0dc85c48", "url": "https://github.com/elastic/elasticsearch/commit/ebaafcfb72bbbfcb9c268fb4fe15754c0dc85c48", "message": "Fix NPE/mocking in `RestActionTestCase`s", "committedDate": "2020-08-11T01:19:08Z", "type": "commit"}, {"oid": "05f8fa1e34cb9b29ce4ccd758add8c3b71c7273e", "url": "https://github.com/elastic/elasticsearch/commit/05f8fa1e34cb9b29ce4ccd758add8c3b71c7273e", "message": "Add `allow_system_index_access` flag to search spec", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "606d9c93186810b02ff12bd5be594589d6a97ea8", "url": "https://github.com/elastic/elasticsearch/commit/606d9c93186810b02ff12bd5be594589d6a97ea8", "message": "Add `allow_system_index_access` as necessary to Watcher tests", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "d74939b0bbd1a9a90f45b00e933b9912456fec76", "url": "https://github.com/elastic/elasticsearch/commit/d74939b0bbd1a9a90f45b00e933b9912456fec76", "message": "Add `allow_system_index_access` flag to count, index, index.delete specs", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "212224098ed188c1298a269e565e0f308603a6c0", "url": "https://github.com/elastic/elasticsearch/commit/212224098ed188c1298a269e565e0f308603a6c0", "message": "Add `allow_system_index_access` to ML REST tests as necessary", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "a618ec1b7ff153b082c243c0e374f7bea4bd1f33", "url": "https://github.com/elastic/elasticsearch/commit/a618ec1b7ff153b082c243c0e374f7bea4bd1f33", "message": "Allow REST handlers to control whether they allow system index access", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "842e3efba76b5aa63c73a4353b4b2f9c59f63380", "url": "https://github.com/elastic/elasticsearch/commit/842e3efba76b5aa63c73a4353b4b2f9c59f63380", "message": "Fix NPE/client mock in RestSearchScrollActionTests", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "d2acd60b674136da847c2e821d5e8c25b48dbc2b", "url": "https://github.com/elastic/elasticsearch/commit/d2acd60b674136da847c2e821d5e8c25b48dbc2b", "message": "Fix NPE/client mock in RestClearScrollActionTests", "committedDate": "2020-08-11T01:21:38Z", "type": "commit"}, {"oid": "04eb2fa6483211a2b9870cc290dfe0ed2f9173a3", "url": "https://github.com/elastic/elasticsearch/commit/04eb2fa6483211a2b9870cc290dfe0ed2f9173a3", "message": "Add allow_system_index_access flag to Get API", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "a7ea769a29e935b71176fb2a2190be22e5f251af", "url": "https://github.com/elastic/elasticsearch/commit/a7ea769a29e935b71176fb2a2190be22e5f251af", "message": "Add allow_system_index_access flag to Security tests as necessary", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "05b80ab1923b4e1c3390575542a2634f3c86ba3a", "url": "https://github.com/elastic/elasticsearch/commit/05b80ab1923b4e1c3390575542a2634f3c86ba3a", "message": "Add allow_system_index_access flag to upgrade tests as necessary", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "ce93851d018be56416e61df54a7f4f5ac84ae6a8", "url": "https://github.com/elastic/elasticsearch/commit/ce93851d018be56416e61df54a7f4f5ac84ae6a8", "message": "Include system indices in cluster health by default", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "fc88e4183f3740bbabe1a18a972a4b7fc5b640b4", "url": "https://github.com/elastic/elasticsearch/commit/fc88e4183f3740bbabe1a18a972a4b7fc5b640b4", "message": "Fix NPE/client mock in SecurityBaseRestHandlerTests", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "f744cd57d026787b4d27f3983aca3310019313f5", "url": "https://github.com/elastic/elasticsearch/commit/f744cd57d026787b4d27f3983aca3310019313f5", "message": "Fix NPE/client mock in RestHasPrivilegesActionTests", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "853d874c4307bddfd5779ed062dd21b7c94e680c", "url": "https://github.com/elastic/elasticsearch/commit/853d874c4307bddfd5779ed062dd21b7c94e680c", "message": "Add allow_system_index_access flag to ML Restart tests as necessary", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "391f1325b59cc7f3e13acfddb396cc8c0be6fba4", "url": "https://github.com/elastic/elasticsearch/commit/391f1325b59cc7f3e13acfddb396cc8c0be6fba4", "message": "Add allow_system_index_access flag to cluster restart tests as necessary", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "2fdc53e684ebebe94c141f6c6fa72455c9537825", "url": "https://github.com/elastic/elasticsearch/commit/2fdc53e684ebebe94c141f6c6fa72455c9537825", "message": "Add allow_system_index_access flag to Transform tests as necessary", "committedDate": "2020-08-11T01:21:39Z", "type": "commit"}, {"oid": "01b1fb3397278771252b4a172966f1fd0fc96254", "url": "https://github.com/elastic/elasticsearch/commit/01b1fb3397278771252b4a172966f1fd0fc96254", "message": "Clean up old comments", "committedDate": "2020-08-11T01:41:20Z", "type": "commit"}, {"oid": "58d651f265586a4b3d9ac93e44f32394e61dca05", "url": "https://github.com/elastic/elasticsearch/commit/58d651f265586a4b3d9ac93e44f32394e61dca05", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-11T19:51:09Z", "type": "commit"}, {"oid": "612c304991744112045a5a1a268a9a8629a75406", "url": "https://github.com/elastic/elasticsearch/commit/612c304991744112045a5a1a268a9a8629a75406", "message": "Allow Kibana APIs to access system indices by default.", "committedDate": "2020-08-11T20:08:55Z", "type": "commit"}, {"oid": "6879de89155924c73f39a5398c5c59f7afbb53c9", "url": "https://github.com/elastic/elasticsearch/commit/6879de89155924c73f39a5398c5c59f7afbb53c9", "message": "Fix NPE/client mock in RestGetUserPrivilegesActionTests", "committedDate": "2020-08-11T20:11:14Z", "type": "commit"}, {"oid": "3924661668e2ed08dbed41410254adb0424f70eb", "url": "https://github.com/elastic/elasticsearch/commit/3924661668e2ed08dbed41410254adb0424f70eb", "message": "Rename and centralize system index access control header key", "committedDate": "2020-08-11T21:26:58Z", "type": "commit"}, {"oid": "8e5b29ee698418e934c0cca09125a07452618fec", "url": "https://github.com/elastic/elasticsearch/commit/8e5b29ee698418e934c0cca09125a07452618fec", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-11T21:30:36Z", "type": "commit"}, {"oid": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "url": "https://github.com/elastic/elasticsearch/commit/19147b7f2ad8520c524586df0ee9a36d478b9a59", "message": "Add allow_system_index_access flag to Transform Upgrade tests as necessary", "committedDate": "2020-08-11T21:57:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MTI1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469291257", "bodyText": "since we only need the ThreadContext here can we pass that as the constructor argument instead of the ThreadPool?", "author": "jaymode", "createdAt": "2020-08-12T14:14:18Z", "path": "server/src/main/java/org/elasticsearch/cluster/ClusterModule.java", "diffHunk": "@@ -107,13 +108,13 @@\n     final ShardsAllocator shardsAllocator;\n \n     public ClusterModule(Settings settings, ClusterService clusterService, List<ClusterPlugin> clusterPlugins,\n-                         ClusterInfoService clusterInfoService) {\n+                         ClusterInfoService clusterInfoService, ThreadPool threadPool) {", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MTkwOA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469291908", "bodyText": "I agree and think we should make this similar to what we did with hidden aliases", "author": "jaymode", "createdAt": "2020-08-12T14:15:10Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexAbstraction.java", "diffHunk": "@@ -210,6 +217,13 @@ public boolean isHidden() {\n             return isHidden;\n         }\n \n+        @Override\n+        public boolean isSystem() {\n+            //G-> This is probably not the best way to tell if an alias is a system-index-alias\n+            // this should probably be checked on the alias layer and added as a property in the AliasMetadata\n+            return referenceIndexMetadatas.stream().anyMatch(IndexMetadata::isSystem);", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MzMyMg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469293322", "bodyText": "this is a nit, I personally like _system_index_access_allowed", "author": "jaymode", "createdAt": "2020-08-12T14:17:03Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -61,17 +62,25 @@\n public class IndexNameExpressionResolver {\n \n     public static final String EXCLUDED_DATA_STREAMS_KEY = \"es.excluded_ds\";\n+    public static final String SYSTEM_INDEX_ACCESS_CONTROL_KEY = \"_prevent_system_index_access\";", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5NDEyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469294125", "bodyText": "why would the threadContext be null?", "author": "jaymode", "createdAt": "2020-08-12T14:18:14Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java", "diffHunk": "@@ -650,6 +665,13 @@ boolean isPatternMatchingAllIndices(Metadata metadata, String[] indicesOrAliases\n         return false;\n     }\n \n+    private boolean isSystemIndexAccessAllowed() {\n+        if (threadContext == null) {", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwMzQ1MA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469503450", "bodyText": "I think this was a hack I put in during development to work around some (since otherwise fixed) test issues that accidentally got committed. I'll remove it, thanks for the catch.", "author": "gwbrown", "createdAt": "2020-08-12T19:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5NDEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5NzQwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469297401", "bodyText": "Please use Booleans.parseBoolean instead, see #59190. This will also remove the need for the null/empty checks.", "author": "jaymode", "createdAt": "2020-08-12T14:22:42Z", "path": "server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java", "diffHunk": "@@ -76,6 +79,16 @@ public final long getUsageCount() {\n \n     @Override\n     public final void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+        if (allowSystemIndexAccessByDefault() == false) {\n+            final String allow_system_index_access = request.param(\"allow_system_index_access\");\n+            final ThreadContext threadContext = client.threadPool().getThreadContext();\n+            if (threadContext.getHeader(SYSTEM_INDEX_ACCESS_CONTROL_KEY) == null\n+                && (allow_system_index_access == null\n+                || allow_system_index_access.isEmpty()\n+                || Boolean.parseBoolean(allow_system_index_access) == false)) {", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5OTEyMg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469299122", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AutoCreateIndex  autoCreateIndex = new AutoCreateIndex(settings, clusterSettings,\n          \n          \n            \n                    AutoCreateIndex autoCreateIndex = new AutoCreateIndex(settings, clusterSettings,", "author": "jaymode", "createdAt": "2020-08-12T14:25:02Z", "path": "server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java", "diffHunk": "@@ -177,7 +178,8 @@ public void testUpdate() {\n \n         ClusterSettings clusterSettings = new ClusterSettings(settings,\n                 ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n-        AutoCreateIndex  autoCreateIndex = new AutoCreateIndex(settings, clusterSettings, new IndexNameExpressionResolver());\n+        AutoCreateIndex  autoCreateIndex = new AutoCreateIndex(settings, clusterSettings,", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMzk1NA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469303954", "bodyText": "By removing this, we no longer verify that the bulk method is actually called. I think adding an AtomicInteger as a counter for method invocations and validating that the method is called once should be sufficient", "author": "jaymode", "createdAt": "2020-08-12T14:31:32Z", "path": "server/src/test/java/org/elasticsearch/rest/action/document/RestBulkActionTests.java", "diffHunk": "@@ -45,32 +46,38 @@\n public class RestBulkActionTests extends ESTestCase {\n \n     public void testBulkPipelineUpsert() throws Exception {\n-        final NodeClient mockClient = mock(NodeClient.class);\n-        final Map<String, String> params = new HashMap<>();\n-        params.put(\"pipeline\", \"timestamps\");\n-        new RestBulkAction(settings(Version.CURRENT).build())\n-            .handleRequest(\n-                new FakeRestRequest.Builder(\n-                    xContentRegistry()).withPath(\"my_index/_bulk\").withParams(params)\n-                    .withContent(\n-                        new BytesArray(\n-                            \"{\\\"index\\\":{\\\"_id\\\":\\\"1\\\"}}\\n\" +\n-                                \"{\\\"field1\\\":\\\"val1\\\"}\\n\" +\n-                                \"{\\\"update\\\":{\\\"_id\\\":\\\"2\\\"}}\\n\" +\n-                                \"{\\\"script\\\":{\\\"source\\\":\\\"ctx._source.counter++;\\\"},\\\"upsert\\\":{\\\"field1\\\":\\\"upserted_val\\\"}}\\n\"\n-                        ),\n-                        XContentType.JSON\n-                    ).withMethod(RestRequest.Method.POST).build(),\n-                mock(RestChannel.class), mockClient\n-            );\n-        Mockito.verify(mockClient)", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwNDA3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469504075", "bodyText": "++, I did that for a number of other tests that needed similar change, but forgot on this one.", "author": "gwbrown", "createdAt": "2020-08-12T19:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMzk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNTY3NA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469305674", "bodyText": "Do you want to have a constant version somewhere for when the allow_system_index_access flag was added?", "author": "jaymode", "createdAt": "2020-08-12T14:33:52Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java", "diffHunk": "@@ -642,9 +642,13 @@ private void wipeCluster() throws Exception {\n \n     protected static void wipeAllIndices() throws IOException {\n         boolean includeHidden = minimumNodeVersion().onOrAfter(Version.V_7_7_0);\n+        boolean includeSystem = minimumNodeVersion().onOrAfter(Version.V_8_0_0);", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwNjYxNA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r469306614", "bodyText": "I guess this needs to be added to the TODO list", "author": "jaymode", "createdAt": "2020-08-12T14:35:10Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/MlIndexAndAlias.java", "diffHunk": "@@ -99,7 +99,7 @@ public static void createIndexAndAliasIfNecessary(Client client,\n         // The initial index name must be suitable for rollover functionality.\n         String firstConcreteIndex = indexPatternPrefix + \"-000001\";\n         String[] concreteIndexNames =\n-            resolver.concreteIndexNames(clusterState, IndicesOptions.lenientExpandOpen(), indexPattern);\n+            resolver.concreteIndexNames(clusterState, IndicesOptions.lenientExpandOpen(), indexPattern); //G-> Does this work as expected?", "originalCommit": "19147b7f2ad8520c524586df0ee9a36d478b9a59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b80f5161619ba7b53a3421da639311aeaecf6e51", "url": "https://github.com/elastic/elasticsearch/commit/b80f5161619ba7b53a3421da639311aeaecf6e51", "message": "Add allow_system_index_access flag to relevant REST specs", "committedDate": "2020-08-12T20:47:38Z", "type": "commit"}, {"oid": "71da5f85678db243c482609e60e5e7b1e7521f37", "url": "https://github.com/elastic/elasticsearch/commit/71da5f85678db243c482609e60e5e7b1e7521f37", "message": "ClusterModule now requires a ThreadContext instead of a ThreadPool", "committedDate": "2020-08-12T20:53:36Z", "type": "commit"}, {"oid": "9e5b251e53303e3699fa773555cddb154ea21dec", "url": "https://github.com/elastic/elasticsearch/commit/9e5b251e53303e3699fa773555cddb154ea21dec", "message": "Remove unnecessary null check in IndexNameExpressionResolver", "committedDate": "2020-08-12T20:54:18Z", "type": "commit"}, {"oid": "b4128e75765aa565a91aecb8f1d2804d8d0c240a", "url": "https://github.com/elastic/elasticsearch/commit/b4128e75765aa565a91aecb8f1d2804d8d0c240a", "message": "s/Boolean.parseBoolean/Booleans.parseBoolean", "committedDate": "2020-08-12T21:02:40Z", "type": "commit"}, {"oid": "948e2bc762c7eebd02a876a092da9229bcf5b354", "url": "https://github.com/elastic/elasticsearch/commit/948e2bc762c7eebd02a876a092da9229bcf5b354", "message": "Remove accidental double space per review", "committedDate": "2020-08-12T21:03:14Z", "type": "commit"}, {"oid": "0bc64f60471f11feaac927e8099f7243f032ef53", "url": "https://github.com/elastic/elasticsearch/commit/0bc64f60471f11feaac927e8099f7243f032ef53", "message": "Ensure method is actually called in RestBulkActionTests", "committedDate": "2020-08-12T21:05:33Z", "type": "commit"}, {"oid": "8d97b0fefb65ef05cd6a73414ea4b6ea5bc82063", "url": "https://github.com/elastic/elasticsearch/commit/8d97b0fefb65ef05cd6a73414ea4b6ea5bc82063", "message": "Move allow_system key to constant & add version constant", "committedDate": "2020-08-12T21:08:59Z", "type": "commit"}, {"oid": "e16b6dc13104d69e3c86198b8c5723a86e7633ac", "url": "https://github.com/elastic/elasticsearch/commit/e16b6dc13104d69e3c86198b8c5723a86e7633ac", "message": "Refactor ThreadContext header to use positive logic", "committedDate": "2020-08-12T21:30:15Z", "type": "commit"}, {"oid": "ed19899a39514da8c1a04d440714073b358065da", "url": "https://github.com/elastic/elasticsearch/commit/ed19899a39514da8c1a04d440714073b358065da", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-12T21:33:53Z", "type": "commit"}, {"oid": "3e979d9e42fbdb087d6beb4742f85c9a1aca2345", "url": "https://github.com/elastic/elasticsearch/commit/3e979d9e42fbdb087d6beb4742f85c9a1aca2345", "message": "Fix test after inverting header logic", "committedDate": "2020-08-12T21:47:11Z", "type": "commit"}, {"oid": "4a8143804ef8f857edb4eca585c555de4a755b8b", "url": "https://github.com/elastic/elasticsearch/commit/4a8143804ef8f857edb4eca585c555de4a755b8b", "message": "Fix logic when attaching header", "committedDate": "2020-08-13T15:40:26Z", "type": "commit"}, {"oid": "be71f26cbc4e9160ead3c236340c966b8a6eac7b", "url": "https://github.com/elastic/elasticsearch/commit/be71f26cbc4e9160ead3c236340c966b8a6eac7b", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-13T15:59:09Z", "type": "commit"}, {"oid": "766e7ddd6ec8b2b3baa5b19e07fcda0cdba06022", "url": "https://github.com/elastic/elasticsearch/commit/766e7ddd6ec8b2b3baa5b19e07fcda0cdba06022", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-14T20:22:17Z", "type": "commit"}, {"oid": "f091c91b0e4bd44e3d5a0f99cfc884f799e2429b", "url": "https://github.com/elastic/elasticsearch/commit/f091c91b0e4bd44e3d5a0f99cfc884f799e2429b", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-17T16:39:27Z", "type": "commit"}, {"oid": "e708dcf8353ee1ee394ec8567b98d18657369283", "url": "https://github.com/elastic/elasticsearch/commit/e708dcf8353ee1ee394ec8567b98d18657369283", "message": "Fix compilation from merge", "committedDate": "2020-08-17T16:48:01Z", "type": "commit"}, {"oid": "c8588ccb12cba8a053557743f6709ba30075335d", "url": "https://github.com/elastic/elasticsearch/commit/c8588ccb12cba8a053557743f6709ba30075335d", "message": "Add `allow_system_index_access` flag to test", "committedDate": "2020-08-17T19:48:27Z", "type": "commit"}, {"oid": "5325e0a5f47c94b8967022145cc30e259085b296", "url": "https://github.com/elastic/elasticsearch/commit/5325e0a5f47c94b8967022145cc30e259085b296", "message": "Remove unnecessary comment", "committedDate": "2020-08-17T19:56:08Z", "type": "commit"}, {"oid": "f69bc2b5c9afe97b0a97afbe27f1796b0d1fe0b9", "url": "https://github.com/elastic/elasticsearch/commit/f69bc2b5c9afe97b0a97afbe27f1796b0d1fe0b9", "message": "INER tests for total wildcards", "committedDate": "2020-08-17T20:08:10Z", "type": "commit"}, {"oid": "5852572050e03bdb6976336a0ad8575c256a66de", "url": "https://github.com/elastic/elasticsearch/commit/5852572050e03bdb6976336a0ad8575c256a66de", "message": "Add dedicated system index blocking/access integration test", "committedDate": "2020-08-17T21:23:22Z", "type": "commit"}, {"oid": "8cadfcaf2651c1ad88e13889dacad3f5292b5755", "url": "https://github.com/elastic/elasticsearch/commit/8cadfcaf2651c1ad88e13889dacad3f5292b5755", "message": "Rules for aliases & system indices + unit tests", "committedDate": "2020-08-17T23:32:44Z", "type": "commit"}, {"oid": "c962c240d3dfa1978b13c1689197a5fb55216ee1", "url": "https://github.com/elastic/elasticsearch/commit/c962c240d3dfa1978b13c1689197a5fb55216ee1", "message": "Clean up system index upgrade tests", "committedDate": "2020-08-18T00:07:45Z", "type": "commit"}, {"oid": "1314cfd4404ade47614dd627868ee19d37c965dd", "url": "https://github.com/elastic/elasticsearch/commit/1314cfd4404ade47614dd627868ee19d37c965dd", "message": "Add allow_system_index_access flag to docs as necessary & docs updates", "committedDate": "2020-08-18T00:26:02Z", "type": "commit"}, {"oid": "f0a9b68fa3834f0a4bcd6046d5989b75d4bb1ed6", "url": "https://github.com/elastic/elasticsearch/commit/f0a9b68fa3834f0a4bcd6046d5989b75d4bb1ed6", "message": "Add allow_no_indices to upgrade tests to ensure they fail if appropriate", "committedDate": "2020-08-18T00:49:28Z", "type": "commit"}, {"oid": "c2f21d2954f25afeaf399fa2bfb729a6a1b5c8c6", "url": "https://github.com/elastic/elasticsearch/commit/c2f21d2954f25afeaf399fa2bfb729a6a1b5c8c6", "message": "Ensure we throw a 404 if a system index is explicitly requested, but not allowed", "committedDate": "2020-08-18T00:55:41Z", "type": "commit"}, {"oid": "a17155c1de71005e39be572c36816a6a63fbe047", "url": "https://github.com/elastic/elasticsearch/commit/a17155c1de71005e39be572c36816a6a63fbe047", "message": "Upgrade tests for alias logic", "committedDate": "2020-08-18T01:23:35Z", "type": "commit"}, {"oid": "5307a697d5a976ea472f4100cba539ac84c2f46c", "url": "https://github.com/elastic/elasticsearch/commit/5307a697d5a976ea472f4100cba539ac84c2f46c", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-18T16:16:15Z", "type": "commit"}, {"oid": "8d4f90c9c6f8dc0a35b2bbfbc6dd6f348a7cf1da", "url": "https://github.com/elastic/elasticsearch/commit/8d4f90c9c6f8dc0a35b2bbfbc6dd6f348a7cf1da", "message": "Fix BWC tests to account for both upgrades from 7.x and current", "committedDate": "2020-08-18T20:59:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3Nzc4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472477781", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (CLUSTER_TYPE == ClusterType.UPGRADED) {\n          \n          \n            \n                    } else {\n          \n          \n            \n                        assertThat(CLUSTER_TYPE, is(ClusterType.UPGRADED));", "author": "jaymode", "createdAt": "2020-08-18T20:36:30Z", "path": "qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/SystemIndicesUpgradeIT.java", "diffHunk": "@@ -23,73 +23,85 @@\n \n import java.util.Map;\n \n+import static org.hamcrest.Matchers.hasKey;\n import static org.hamcrest.Matchers.is;\n \n public class SystemIndicesUpgradeIT extends AbstractRollingTestCase {\n \n-    public void testOldDoesntHaveSystemIndexMetadata() throws Exception {\n-        assumeTrue(\"only run in old cluster\", CLUSTER_TYPE == ClusterType.OLD);\n-        // create index\n-        Request createTestIndex = new Request(\"PUT\", \"/test_index_old\");\n-        createTestIndex.setJsonEntity(\"{\\\"settings\\\": {\\\"index.number_of_replicas\\\": 0}}\");\n-        client().performRequest(createTestIndex);\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSystemIndicesUpgrades() throws Exception {\n+        if (CLUSTER_TYPE == ClusterType.OLD) {\n+            // create index\n+            Request createTestIndex = new Request(\"PUT\", \"/test_index_old\");\n+            createTestIndex.setJsonEntity(\"{\\\"settings\\\": {\\\"index.number_of_replicas\\\": 0}}\");\n+            client().performRequest(createTestIndex);\n \n-        Request bulk = new Request(\"POST\", \"/_bulk\");\n-        bulk.addParameter(\"refresh\", \"true\");\n-        bulk.setJsonEntity(\"{\\\"index\\\": {\\\"_index\\\": \\\"test_index_old\\\"}}\\n\" +\n-            \"{\\\"f1\\\": \\\"v1\\\", \\\"f2\\\": \\\"v2\\\"}\\n\");\n-        client().performRequest(bulk);\n+            Request bulk = new Request(\"POST\", \"/_bulk\");\n+            bulk.addParameter(\"refresh\", \"true\");\n+            bulk.setJsonEntity(\"{\\\"index\\\": {\\\"_index\\\": \\\"test_index_old\\\"}}\\n\" +\n+                \"{\\\"f1\\\": \\\"v1\\\", \\\"f2\\\": \\\"v2\\\"}\\n\");\n+            client().performRequest(bulk);\n \n-        // start a async reindex job\n-        Request reindex = new Request(\"POST\", \"/_reindex\");\n-        reindex.setJsonEntity(\n-            \"{\\n\" +\n-                \"  \\\"source\\\":{\\n\" +\n-                \"    \\\"index\\\":\\\"test_index_old\\\"\\n\" +\n-                \"  },\\n\" +\n-                \"  \\\"dest\\\":{\\n\" +\n-                \"    \\\"index\\\":\\\"test_index_reindex\\\"\\n\" +\n-                \"  }\\n\" +\n-                \"}\");\n-        reindex.addParameter(\"wait_for_completion\", \"false\");\n-        Map<String, Object> response = entityAsMap(client().performRequest(reindex));\n-        String taskId = (String) response.get(\"task\");\n+            // start a async reindex job\n+            Request reindex = new Request(\"POST\", \"/_reindex\");\n+            reindex.setJsonEntity(\n+                \"{\\n\" +\n+                    \"  \\\"source\\\":{\\n\" +\n+                    \"    \\\"index\\\":\\\"test_index_old\\\"\\n\" +\n+                    \"  },\\n\" +\n+                    \"  \\\"dest\\\":{\\n\" +\n+                    \"    \\\"index\\\":\\\"test_index_reindex\\\"\\n\" +\n+                    \"  }\\n\" +\n+                    \"}\");\n+            reindex.addParameter(\"wait_for_completion\", \"false\");\n+            Map<String, Object> response = entityAsMap(client().performRequest(reindex));\n+            String taskId = (String) response.get(\"task\");\n \n-        // wait for task\n-        Request getTask = new Request(\"GET\", \"/_tasks/\" + taskId);\n-        getTask.addParameter(\"wait_for_completion\", \"true\");\n-        client().performRequest(getTask);\n+            // wait for task\n+            Request getTask = new Request(\"GET\", \"/_tasks/\" + taskId);\n+            getTask.addParameter(\"wait_for_completion\", \"true\");\n+            client().performRequest(getTask);\n \n-        // make sure .tasks index exists\n-        assertBusy(() -> {\n-            Request getTasksIndex = new Request(\"GET\", \"/.tasks\");\n-            assertThat(client().performRequest(getTasksIndex).getStatusLine().getStatusCode(), is(200));\n-        });\n-    }\n+            // make sure .tasks index exists\n+            assertBusy(() -> {\n+                Request getTasksIndex = new Request(\"GET\", \"/.tasks\");\n+                getTasksIndex.addParameter(\"allow_no_indices\", \"false\");\n+                assertThat(client().performRequest(getTasksIndex).getStatusLine().getStatusCode(), is(200));\n+            });\n \n-    public void testMixedCluster() {\n-        assumeTrue(\"nothing to do in mixed cluster\", CLUSTER_TYPE == ClusterType.MIXED);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testUpgradedCluster() throws Exception {\n-        assumeTrue(\"only run on upgraded cluster\", CLUSTER_TYPE == ClusterType.UPGRADED);\n+            // Create an alias to make sure it gets upgraded properly\n+            Request putAliasRequest = new Request(\"POST\", \"/_aliases\");\n+            putAliasRequest.setJsonEntity(\"{\\n\" +\n+                \"  \\\"actions\\\": [\\n\" +\n+                \"    {\\\"add\\\":  {\\\"index\\\":  \\\".tasks\\\", \\\"alias\\\": \\\"test-system-alias\\\"}},\\n\" +\n+                \"    {\\\"add\\\":  {\\\"index\\\":  \\\"test_index_reindex\\\", \\\"alias\\\": \\\"test-system-alias\\\"}}\\n\" +\n+                \"  ]\\n\" +\n+                \"}\");\n+            assertThat(client().performRequest(putAliasRequest).getStatusLine().getStatusCode(), is(200));\n+        } else if (CLUSTER_TYPE == ClusterType.UPGRADED) {", "originalCommit": "a17155c1de71005e39be572c36816a6a63fbe047", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwNjg4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472506882", "bodyText": "That won't work, I think, because there's also a ClusterType.MIXED that this might be called with.", "author": "gwbrown", "createdAt": "2020-08-18T21:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3Nzc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NzA0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r473167046", "bodyText": "You're right; I missed that the line with ClusterType.MIXED was a deletion only.", "author": "jaymode", "createdAt": "2020-08-19T16:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3Nzc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3OTc5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472479796", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ALLOW_SYSTEM_INDEX_ACCESS_KEY = \"allow_system_index_access\";\n          \n          \n            \n                public static final String ALLOW_SYSTEM_INDEX_ACCESS_KEY = \"_allow_system_index_access\";\n          \n      \n    \n    \n  \n\nThe general convention has been to use underscore in keys for system added items. I think you had one in a previous version too.", "author": "jaymode", "createdAt": "2020-08-18T20:40:24Z", "path": "server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java", "diffHunk": "@@ -53,6 +58,8 @@\n \n     public static final Setting<Boolean> MULTI_ALLOW_EXPLICIT_INDEX =\n         Setting.boolSetting(\"rest.action.multi.allow_explicit_index\", true, Property.NodeScope);\n+    public static final Version ALLOW_SYSTEM_INDEX_ADDED_VERSION = Version.V_8_0_0;\n+    public static final String ALLOW_SYSTEM_INDEX_ACCESS_KEY = \"allow_system_index_access\";", "originalCommit": "a17155c1de71005e39be572c36816a6a63fbe047", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODI4MA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472508280", "bodyText": "This string is the REST parameter, as in GET _search?allow_system_index_access=true. The constant defining the key used for the ThreadContext header is defined in IndexNameExpressionResolver.\nMy general philosophy has been to put the constant definitions as close to their \"primary consumer\" as possible.", "author": "gwbrown", "createdAt": "2020-08-18T21:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3OTc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472508755", "bodyText": "That said, this tells me that these constants probably need names that are clearer about their purpose. So I'll update the names to make them clearer.", "author": "gwbrown", "createdAt": "2020-08-18T21:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3OTc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODIzNw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r473168237", "bodyText": "Thanks; maybe ALLOW_SYSTEM_INDEX_ACCESS_PARAM?", "author": "jaymode", "createdAt": "2020-08-19T16:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3OTc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTg2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472485863", "bodyText": "Is the check for a value in the threadcontext due to the wrapping of handlers?\nI suggest we move this \"up a level\" out of BaseRestHandler and into RestController#dispatchRequest that calls this method. The allowSystemIndexAccessByDefault method would also move to the RestHandler interface. This is due to the fact that not all RestHandlers have to be a BaseRestHandler, which could allow an unknowing bypass. I think having both a base class and an interface is a bit trappy here but changing that is beyond the scope of this PR.", "author": "jaymode", "createdAt": "2020-08-18T20:52:01Z", "path": "server/src/main/java/org/elasticsearch/rest/BaseRestHandler.java", "diffHunk": "@@ -76,6 +83,14 @@ public final long getUsageCount() {\n \n     @Override\n     public final void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n+        if (allowSystemIndexAccessByDefault() == false) {\n+            final String allowSystemIndexParameter = request.param(ALLOW_SYSTEM_INDEX_ACCESS_KEY);\n+            final ThreadContext threadContext = client.threadPool().getThreadContext();\n+            if (threadContext.getHeader(SYSTEM_INDEX_ACCESS_CONTROL_KEY) == null", "originalCommit": "a17155c1de71005e39be572c36816a6a63fbe047", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwOTc4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472509783", "bodyText": "\ud83d\udc4d Yeah, this is primarily due to wrapping of handlers, and actually IIRC it only triggers in a few test cases that do somewhat odd things. I'll look into moving it up a level, thanks for the suggestion.", "author": "gwbrown", "createdAt": "2020-08-18T21:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4ODA5MA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472488090", "bodyText": "Drop the threadpool from here and just create a threadcontext?", "author": "jaymode", "createdAt": "2020-08-18T20:56:09Z", "path": "server/src/test/java/org/elasticsearch/cluster/ClusterModuleTests.java", "diffHunk": "@@ -63,8 +65,24 @@\n \n public class ClusterModuleTests extends ModuleTestCase {\n     private ClusterInfoService clusterInfoService = EmptyClusterInfoService.INSTANCE;\n-    private ClusterService clusterService = new ClusterService(Settings.EMPTY,\n-        new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), null);\n+    private ClusterService clusterService;\n+    private ThreadPool threadPool;", "originalCommit": "a17155c1de71005e39be572c36816a6a63fbe047", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4ODY1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472488655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ClusterState.builder(new ClusterName(\"_name\")).build(), IndicesOptions.strictExpand(),\n          \n          \n            \n                    false);\n          \n          \n            \n                        ClusterState.builder(new ClusterName(\"_name\")).build(), IndicesOptions.strictExpand(), false\n          \n          \n            \n                );", "author": "jaymode", "createdAt": "2020-08-18T20:57:21Z", "path": "server/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java", "diffHunk": "@@ -43,8 +43,8 @@\n \n     private final DateMathExpressionResolver expressionResolver = new DateMathExpressionResolver();\n     private final Context context = new Context(\n-            ClusterState.builder(new ClusterName(\"_name\")).build(), IndicesOptions.strictExpand()\n-    );\n+            ClusterState.builder(new ClusterName(\"_name\")).build(), IndicesOptions.strictExpand(),\n+        false);", "originalCommit": "a17155c1de71005e39be572c36816a6a63fbe047", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5Mjk4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472492981", "bodyText": "can you add basic javadocs?", "author": "jaymode", "createdAt": "2020-08-18T21:06:19Z", "path": "test/framework/src/main/java/org/elasticsearch/test/client/NoOpNodeClient.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.test.client;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.ActionType;\n+import org.elasticsearch.action.support.TransportAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.tasks.TaskListener;\n+import org.elasticsearch.tasks.TaskManager;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.RemoteClusterService;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class NoOpNodeClient extends NodeClient {", "originalCommit": "8d4f90c9c6f8dc0a35b2bbfbc6dd6f348a7cf1da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MzU3OA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472493578", "bodyText": "can you add basic class level javadocs?", "author": "jaymode", "createdAt": "2020-08-18T21:07:29Z", "path": "test/framework/src/main/java/org/elasticsearch/test/rest/RestActionTestCase.java", "diffHunk": "@@ -66,4 +78,54 @@ protected void dispatchRequest(RestRequest request) {\n         ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n         controller.dispatchRequest(request, channel, threadContext);\n     }\n+\n+    public static class VerifyingClient extends NoOpNodeClient {", "originalCommit": "8d4f90c9c6f8dc0a35b2bbfbc6dd6f348a7cf1da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTU0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472499546", "bodyText": "I don't know that this is correct. If I am not mistaken this is to take a user's policy and execute it to create the enrich index for the policy. The user's permissions dictate what indices they can access so we do not want to override that with the enrich origin when reading the data from the source index but instead need to do it only when writing the data to the enrich system indices unless I missed something?", "author": "jaymode", "createdAt": "2020-08-18T21:19:53Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/TransportExecuteEnrichPolicyAction.java", "diffHunk": "@@ -58,7 +61,7 @@ public TransportExecuteEnrichPolicyAction(\n         this.executor = new EnrichPolicyExecutor(\n             settings,\n             clusterService,\n-            client,\n+            new OriginSettingClient(client, ENRICH_ORIGIN),", "originalCommit": "8d4f90c9c6f8dc0a35b2bbfbc6dd6f348a7cf1da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMTU5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472511592", "bodyText": "Looking at this closer, I think you're correct - I think I misread what this does the first time. Thanks for the catch!\n(Also, do we not have enrich+security tests to catch something like this? I'll have to check)", "author": "gwbrown", "createdAt": "2020-08-18T21:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3MjI4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r473172286", "bodyText": "It looks like we do have some security tests for Enrich (x-pack/plugin/enrich/qa/rest-with-security) but it is a limited set of tests.", "author": "jaymode", "createdAt": "2020-08-19T16:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjU5NA==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r486666594", "bodyText": "We discussed this offline and came to the conclusion that this is indeed the incorrect way to handle this. I've updated this to ensure that all actions that touch the source index in an Enrich policy run in the user's security context, and the Enrich security context is used only for operations that only touch the .enrich* index.\nThis does run into a problem in the reindex call used to populate the .enrich* index, which touches both. In this case, we simply drop the response headers added during the reindex call - a change which will need a follow-up later, as that approach will not work when we enable full protection of system indices.", "author": "gwbrown", "createdAt": "2020-09-10T22:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDM3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472500372", "bodyText": "I think this one is right since this is used to access the enrich system indices.", "author": "jaymode", "createdAt": "2020-08-18T21:21:37Z", "path": "x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/AbstractEnrichProcessor.java", "diffHunk": "@@ -188,8 +191,9 @@ int getMaxMatches() {\n     }\n \n     private static BiConsumer<SearchRequest, BiConsumer<SearchResponse, Exception>> createSearchRunner(Client client) {\n+        Client originClient = new OriginSettingClient(client, ENRICH_ORIGIN);\n         return (req, handler) -> {\n-            client.execute(\n+            originClient.execute(", "originalCommit": "8d4f90c9c6f8dc0a35b2bbfbc6dd6f348a7cf1da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMTgwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/60945#discussion_r472511805", "bodyText": "++, this one I'm pretty confident on being the right thing.", "author": "gwbrown", "createdAt": "2020-08-18T21:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDM3Mg=="}], "type": "inlineReview"}, {"oid": "c742d4a171bd37889f35edf692b7d6ccc003e40e", "url": "https://github.com/elastic/elasticsearch/commit/c742d4a171bd37889f35edf692b7d6ccc003e40e", "message": "Rename constants to be clearer", "committedDate": "2020-08-18T22:48:40Z", "type": "commit"}, {"oid": "d16ba0e4d94ee5b85719222c66ec0001233b04df", "url": "https://github.com/elastic/elasticsearch/commit/d16ba0e4d94ee5b85719222c66ec0001233b04df", "message": "Move constants & default access config to `RestHandler` (from `BaseRestHandler`)", "committedDate": "2020-08-18T22:59:33Z", "type": "commit"}, {"oid": "159b40aa6d8000fd5318fd9e99fc346519af4e0c", "url": "https://github.com/elastic/elasticsearch/commit/159b40aa6d8000fd5318fd9e99fc346519af4e0c", "message": "Move header attachment to `RestController#dispatchRequest` (from `BaseRestHandler`)", "committedDate": "2020-08-18T23:03:25Z", "type": "commit"}, {"oid": "a30107fbba6efa9f27cffd583b45771a3054ae80", "url": "https://github.com/elastic/elasticsearch/commit/a30107fbba6efa9f27cffd583b45771a3054ae80", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-19T21:46:52Z", "type": "commit"}, {"oid": "9b07888124733497f17d4e6bf9b2a5ed2f0be07e", "url": "https://github.com/elastic/elasticsearch/commit/9b07888124733497f17d4e6bf9b2a5ed2f0be07e", "message": "Use the correct ThreadContext in RestController", "committedDate": "2020-08-19T21:51:40Z", "type": "commit"}, {"oid": "46854ab4419c4d626176902780a10c6922ce3727", "url": "https://github.com/elastic/elasticsearch/commit/46854ab4419c4d626176902780a10c6922ce3727", "message": "Javadoc per review", "committedDate": "2020-08-19T22:26:32Z", "type": "commit"}, {"oid": "30225b302cc3a733a44f68f26eb694d406fa0164", "url": "https://github.com/elastic/elasticsearch/commit/30225b302cc3a733a44f68f26eb694d406fa0164", "message": "Ensure allowSystemIndexAccessByDefault is passed through SecurityRestFilter", "committedDate": "2020-08-20T20:56:17Z", "type": "commit"}, {"oid": "0bf65e4106a8446267c01ff1bf3ec56954598f0d", "url": "https://github.com/elastic/elasticsearch/commit/0bf65e4106a8446267c01ff1bf3ec56954598f0d", "message": "Switch to emitting a deprecation warning instead of changing behavior", "committedDate": "2020-08-20T23:15:01Z", "type": "commit"}, {"oid": "89f3925f9ca029d822b97d2d9499a2612756c988", "url": "https://github.com/elastic/elasticsearch/commit/89f3925f9ca029d822b97d2d9499a2612756c988", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-20T23:17:16Z", "type": "commit"}, {"oid": "dbe52f4e5d7c69f41502e6e5dd31704eb66f4b96", "url": "https://github.com/elastic/elasticsearch/commit/dbe52f4e5d7c69f41502e6e5dd31704eb66f4b96", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-25T21:45:55Z", "type": "commit"}, {"oid": "515b4eb78a18abd026eb890e9594d478e368ef43", "url": "https://github.com/elastic/elasticsearch/commit/515b4eb78a18abd026eb890e9594d478e368ef43", "message": "Correct NoOpNodeClient for changes in NodeClient", "committedDate": "2020-08-25T22:01:28Z", "type": "commit"}, {"oid": "912f096fb6579e66b854dc584c38a23f35ca8fe4", "url": "https://github.com/elastic/elasticsearch/commit/912f096fb6579e66b854dc584c38a23f35ca8fe4", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-26T21:56:26Z", "type": "commit"}, {"oid": "39538e3151f662a76a6880c53bbac16617374f3f", "url": "https://github.com/elastic/elasticsearch/commit/39538e3151f662a76a6880c53bbac16617374f3f", "message": "Implement \"feature flag\" for choosing system index access behavior", "committedDate": "2020-08-27T00:23:54Z", "type": "commit"}, {"oid": "e75c50fdce607d93e6af862c5170b493c8080533", "url": "https://github.com/elastic/elasticsearch/commit/e75c50fdce607d93e6af862c5170b493c8080533", "message": "Docs changes per review", "committedDate": "2020-08-27T00:51:54Z", "type": "commit"}, {"oid": "06c7ca402e47532ba8ae5312e65117ce3cc4a1ed", "url": "https://github.com/elastic/elasticsearch/commit/06c7ca402e47532ba8ae5312e65117ce3cc4a1ed", "message": "Formatting changes per review", "committedDate": "2020-08-27T00:52:06Z", "type": "commit"}, {"oid": "966cfc38e7452aa46026add4e6911c6c44202a01", "url": "https://github.com/elastic/elasticsearch/commit/966cfc38e7452aa46026add4e6911c6c44202a01", "message": "allow_system_index_access flag in YAML tests as necessary", "committedDate": "2020-08-27T22:12:49Z", "type": "commit"}, {"oid": "d25c10dedc1a0035d059c5335232636b7ff50f29", "url": "https://github.com/elastic/elasticsearch/commit/d25c10dedc1a0035d059c5335232636b7ff50f29", "message": "Allow system index access in GetAliases, as disallowing it causes very odd behavior", "committedDate": "2020-08-27T22:16:08Z", "type": "commit"}, {"oid": "a0a78f8634bda85860ec065602c4fd07e698bf05", "url": "https://github.com/elastic/elasticsearch/commit/a0a78f8634bda85860ec065602c4fd07e698bf05", "message": "Allow system index access in GetDataStreamsStats, as disallowing it causes very odd behavior", "committedDate": "2020-08-27T23:32:34Z", "type": "commit"}, {"oid": "cba4fd7bdceab36f796c56f79a6d49ba518564d0", "url": "https://github.com/elastic/elasticsearch/commit/cba4fd7bdceab36f796c56f79a6d49ba518564d0", "message": "Allow system index access in cat APIs, otherwise we get deprecation warnings", "committedDate": "2020-08-27T23:45:54Z", "type": "commit"}, {"oid": "a3980e392e15c48bbf6f328e44fc82d90d0817fc", "url": "https://github.com/elastic/elasticsearch/commit/a3980e392e15c48bbf6f328e44fc82d90d0817fc", "message": "Remove allow_system flag from test that no longer needs it due to changed defaults", "committedDate": "2020-08-28T00:07:45Z", "type": "commit"}, {"oid": "7770cb6d8d0d5466bc7e3a1b5c994bb4f0511e8c", "url": "https://github.com/elastic/elasticsearch/commit/7770cb6d8d0d5466bc7e3a1b5c994bb4f0511e8c", "message": "Remove allow_system flag from more tests that no longer needs it due to changed defaults", "committedDate": "2020-08-28T00:08:45Z", "type": "commit"}, {"oid": "a22258aa690b6f32f571d745bfd1eaab217caf7b", "url": "https://github.com/elastic/elasticsearch/commit/a22258aa690b6f32f571d745bfd1eaab217caf7b", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-08-31T16:21:12Z", "type": "commit"}, {"oid": "56d4d058df864189f2bfd816ba727b36f0cfea59", "url": "https://github.com/elastic/elasticsearch/commit/56d4d058df864189f2bfd816ba727b36f0cfea59", "message": "Add allow_system_index_access to docs tests where necessary\n\nNote: these should be removed and replaced with actual APIs everywhere this is necessary.", "committedDate": "2020-08-31T17:25:08Z", "type": "commit"}, {"oid": "15ef7e801516a2ec344f240c7b68a4fdbaf7b17b", "url": "https://github.com/elastic/elasticsearch/commit/15ef7e801516a2ec344f240c7b68a4fdbaf7b17b", "message": "Fix origin setting in Enrich classes", "committedDate": "2020-08-31T23:36:00Z", "type": "commit"}, {"oid": "8e7d9c12741a8a5b3f159762550c8b1b9eba38d7", "url": "https://github.com/elastic/elasticsearch/commit/8e7d9c12741a8a5b3f159762550c8b1b9eba38d7", "message": "Add allow_system_index_access to reindex tests as necessary", "committedDate": "2020-09-01T19:12:25Z", "type": "commit"}, {"oid": "712f1ccc9f9fdf9c3eda1d78490f44be9a8d80c8", "url": "https://github.com/elastic/elasticsearch/commit/712f1ccc9f9fdf9c3eda1d78490f44be9a8d80c8", "message": "Add allow_system_index_access to Watcher tests & test cleanup as necessary", "committedDate": "2020-09-01T19:25:11Z", "type": "commit"}, {"oid": "37dc6dfb3f4eb5e87c0df28806ed29d93de96a30", "url": "https://github.com/elastic/elasticsearch/commit/37dc6dfb3f4eb5e87c0df28806ed29d93de96a30", "message": "Add allow_system_index_access to Monitoring test cleanup as necessary", "committedDate": "2020-09-01T19:34:25Z", "type": "commit"}, {"oid": "ef3e9cdeff295786d41f0e37ec1a059aa0b770e8", "url": "https://github.com/elastic/elasticsearch/commit/ef3e9cdeff295786d41f0e37ec1a059aa0b770e8", "message": "Add allow_system_index_access to Transform test cleanup as necessary", "committedDate": "2020-09-01T19:41:08Z", "type": "commit"}, {"oid": "a2dcb91c8af2127cf13a709a18a29199ff008214", "url": "https://github.com/elastic/elasticsearch/commit/a2dcb91c8af2127cf13a709a18a29199ff008214", "message": "Merge branch 'master' into si/protection-header", "committedDate": "2020-09-08T16:03:19Z", "type": "commit"}, {"oid": "83c2c52acf275420279caeaec6efbb5b09ab9b09", "url": "https://github.com/elastic/elasticsearch/commit/83c2c52acf275420279caeaec6efbb5b09ab9b09", "message": "add allow_system_index_access to Watcher cleanup", "committedDate": "2020-09-08T16:42:41Z", "type": "commit"}, {"oid": "555910c7e6fcb27c7c130fe465ca7425234b3bc6", "url": "https://github.com/elastic/elasticsearch/commit/555910c7e6fcb27c7c130fe465ca7425234b3bc6", "message": "Remove now unnecessary allow_system_index_access from upgrade test", "committedDate": "2020-09-08T20:15:06Z", "type": "commit"}, {"oid": "5e484f13b030bfa451dacb67fe86167e2b66c64a", "url": "https://github.com/elastic/elasticsearch/commit/5e484f13b030bfa451dacb67fe86167e2b66c64a", "message": "Add allow_system_index_access to ML tests as necessary", "committedDate": "2020-09-08T20:17:45Z", "type": "commit"}, {"oid": "10c3886c84254d3882b58ea813c60b78c9abaced", "url": "https://github.com/elastic/elasticsearch/commit/10c3886c84254d3882b58ea813c60b78c9abaced", "message": "Another allow_system_index_access test fix", "committedDate": "2020-09-08T20:30:55Z", "type": "commit"}, {"oid": "d20847bc469a8cf1b7b7a57158887d817fe4c56d", "url": "https://github.com/elastic/elasticsearch/commit/d20847bc469a8cf1b7b7a57158887d817fe4c56d", "message": "Remove allow_system_index_access from TransformSurvivesUpgradeIT", "committedDate": "2020-09-08T21:03:36Z", "type": "commit"}, {"oid": "1c579bc9ac2b2446cd39f2be0f33bbb874f0c269", "url": "https://github.com/elastic/elasticsearch/commit/1c579bc9ac2b2446cd39f2be0f33bbb874f0c269", "message": "Add allow_system_index_access as necessary in MlMappingsUpgradeIT", "committedDate": "2020-09-08T21:22:52Z", "type": "commit"}, {"oid": "bd4caf0bce37df7c1c1263fba518e282bf05695a", "url": "https://github.com/elastic/elasticsearch/commit/bd4caf0bce37df7c1c1263fba518e282bf05695a", "message": "Ensure system index access is allowed for GetAliasesAction even if there's a header to disallow it\n\nOtherwise, we get unnecessary deprecation warnings", "committedDate": "2020-09-08T22:57:12Z", "type": "commit"}]}