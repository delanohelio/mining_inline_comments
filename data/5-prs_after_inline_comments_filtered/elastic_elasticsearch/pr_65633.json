{"pr_number": 65633, "pr_title": "Add Rollup ILM Action", "pr_createdAt": "2020-11-30T19:53:11Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65633", "timeline": [{"oid": "206102f2e5b32fda86f27da6cf695fd71e1ea691", "url": "https://github.com/elastic/elasticsearch/commit/206102f2e5b32fda86f27da6cf695fd71e1ea691", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-11-30T20:15:20Z", "type": "forcePushed"}, {"oid": "bcb732b6a705c35d23172de7da36645593fe5a1b", "url": "https://github.com/elastic/elasticsearch/commit/bcb732b6a705c35d23172de7da36645593fe5a1b", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-11-30T20:41:59Z", "type": "forcePushed"}, {"oid": "1826396b969d6f1b9e5822a9ba0a2b6d1f76f2d8", "url": "https://github.com/elastic/elasticsearch/commit/1826396b969d6f1b9e5822a9ba0a2b6d1f76f2d8", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-11-30T21:45:00Z", "type": "forcePushed"}, {"oid": "05169e92d52d194831d6fd722241e2805f3eb16a", "url": "https://github.com/elastic/elasticsearch/commit/05169e92d52d194831d6fd722241e2805f3eb16a", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-11-30T21:57:20Z", "type": "forcePushed"}, {"oid": "33d61ad06d9f6e7cc86c443c6880f87edcf9004a", "url": "https://github.com/elastic/elasticsearch/commit/33d61ad06d9f6e7cc86c443c6880f87edcf9004a", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-11-30T23:15:38Z", "type": "forcePushed"}, {"oid": "7a73bd4dc8f74e8a4779f4b2821b1bf71f5a8845", "url": "https://github.com/elastic/elasticsearch/commit/7a73bd4dc8f74e8a4779f4b2821b1bf71f5a8845", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-12-07T23:33:10Z", "type": "forcePushed"}, {"oid": "c09d9a79a6cc85cd76c88a5c6f530578caf6e811", "url": "https://github.com/elastic/elasticsearch/commit/c09d9a79a6cc85cd76c88a5c6f530578caf6e811", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-12-07T23:33:33Z", "type": "forcePushed"}, {"oid": "176af3698b9373ade97d4cc75344efcee97d6a4b", "url": "https://github.com/elastic/elasticsearch/commit/176af3698b9373ade97d4cc75344efcee97d6a4b", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-12-08T05:48:27Z", "type": "commit"}, {"oid": "176af3698b9373ade97d4cc75344efcee97d6a4b", "url": "https://github.com/elastic/elasticsearch/commit/176af3698b9373ade97d4cc75344efcee97d6a4b", "message": "Add Rollup ILM Action\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index. Optionally,\nthe original index can be deleted.\n\nRelates #42720.\n\nCloses #48003.", "committedDate": "2020-12-08T05:48:27Z", "type": "forcePushed"}, {"oid": "ca3e6951babba1f9dd815a8a46b4b2012d15d832", "url": "https://github.com/elastic/elasticsearch/commit/ca3e6951babba1f9dd815a8a46b4b2012d15d832", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2020-12-08T15:38:03Z", "type": "commit"}, {"oid": "3631adc00350833f8c5e73df82d59561e44d8356", "url": "https://github.com/elastic/elasticsearch/commit/3631adc00350833f8c5e73df82d59561e44d8356", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2020-12-08T15:59:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwMzQxMw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r539403413", "bodyText": "I realize this is a matter of taste, but this function name really sounds like it's intended to take an action (delete), not return a flag value.  Normally I don't care, but in this case I really think getDeleteOriginalIndex() (or maybe shouldDeleteOriginalIndex) would be a better name.", "author": "not-napoleon", "createdAt": "2020-12-09T15:28:57Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupILMAction.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ilm.Step.StepKey;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link LifecycleAction} which calls {@link org.elasticsearch.xpack.core.rollup.v2.RollupAction} on an index\n+ */\n+public class RollupILMAction implements LifecycleAction {\n+    public static final String NAME = \"rollup\";\n+\n+    private static final ParseField CONFIG_FIELD = new ParseField(\"config\");\n+    private static final ParseField DELETE_FIELD = new ParseField(\"delete_original\");\n+    private static final ParseField POLICY_FIELD = new ParseField(\"rollup_policy\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<RollupILMAction, Void> PARSER = new ConstructingObjectParser<>(NAME,\n+        a -> new RollupILMAction((RollupActionConfig) a[0], (boolean) a[1], (String) a[2]));\n+\n+    private final RollupActionConfig config;\n+    private final boolean deleteOriginalIndex;\n+    private final String rollupPolicy;\n+\n+    static {\n+        PARSER.declareField(ConstructingObjectParser.constructorArg(),\n+            (p, c) -> RollupActionConfig.fromXContent(p), CONFIG_FIELD, ObjectParser.ValueType.OBJECT);\n+        PARSER.declareBoolean(ConstructingObjectParser.optionalConstructorArg(), DELETE_FIELD);\n+        PARSER.declareString(ConstructingObjectParser.optionalConstructorArg(), POLICY_FIELD);\n+    }\n+\n+    public static RollupILMAction parse(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public RollupILMAction(RollupActionConfig config, boolean deleteOriginalIndex, @Nullable String rollupPolicy) {\n+        this.config = config;\n+        this.deleteOriginalIndex = deleteOriginalIndex;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    public RollupILMAction(StreamInput in) throws IOException {\n+        this(new RollupActionConfig(in), in.readBoolean(), in.readOptionalString());\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return NAME;\n+    }\n+\n+    RollupActionConfig config() {\n+        return config;\n+    }\n+\n+    boolean deleteOriginalIndex() {", "originalCommit": "3631adc00350833f8c5e73df82d59561e44d8356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1MTI0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r539451247", "bodyText": "totally valid! I think I sometimes find myself going away from what I prefer: having boolean instance-get method names to be is<varName>. I will rename \ud83d\udc4d", "author": "talevy", "createdAt": "2020-12-09T16:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQwMzQxMw=="}], "type": "inlineReview"}, {"oid": "184c7cad6497cf68d00f0e49caf39a0757c0d2b4", "url": "https://github.com/elastic/elasticsearch/commit/184c7cad6497cf68d00f0e49caf39a0757c0d2b4", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2020-12-09T18:13:33Z", "type": "commit"}, {"oid": "434f49cfdebf188fa2ccc21464baecf252965a43", "url": "https://github.com/elastic/elasticsearch/commit/434f49cfdebf188fa2ccc21464baecf252965a43", "message": "respond to review", "committedDate": "2020-12-09T18:19:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1MDI2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542450263", "bodyText": "Should rollup index name prefix and postfix be configurable?\nShould we allow users to configure behavior (fail, overrwrite, no-op) in case the rollup index already exists?", "author": "csoulios", "createdAt": "2020-12-14T14:59:27Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupStep.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupAction;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Rolls up index using a {@link RollupActionConfig}\n+ */\n+public class RollupStep extends AsyncActionStep {\n+    public static final String NAME = \"rollup\";\n+    public static final String ROLLUP_INDEX_NAME_POSTFIX = \"-rollup\";\n+\n+    private final RollupActionConfig config;\n+    private final String rollupPolicy;\n+\n+    public RollupStep(StepKey key, StepKey nextStepKey, Client client, RollupActionConfig config, String rollupPolicy) {\n+        super(key, nextStepKey, client);\n+        this.config = config;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentState, ClusterStateObserver observer, Listener listener) {\n+        String originalIndex = indexMetadata.getIndex().getName();\n+        String rollupIndex = originalIndex + ROLLUP_INDEX_NAME_POSTFIX;", "originalCommit": "434f49cfdebf188fa2ccc21464baecf252965a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTM5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542521392", "bodyText": "I am not sure this needs to be configurable? Specifically if this is used against a data-stream, then this would not be a concern. We can discuss! I would like to reduce the concerns, but if this type of conflict is expected, we do need a work-around for users. you're right", "author": "talevy", "createdAt": "2020-12-14T16:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1MDI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzI2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542473262", "bodyText": "nit: I guess this is the optional policy field for the rollup index. I understand this will be explained in the docs but maybe we should find a more representative name. Something like rollup_index_policy", "author": "csoulios", "createdAt": "2020-12-14T15:27:36Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupILMAction.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ilm.Step.StepKey;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link LifecycleAction} which calls {@link org.elasticsearch.xpack.core.rollup.v2.RollupAction} on an index\n+ */\n+public class RollupILMAction implements LifecycleAction {\n+    public static final String NAME = \"rollup\";\n+\n+    private static final ParseField CONFIG_FIELD = new ParseField(\"config\");\n+    private static final ParseField DELETE_FIELD = new ParseField(\"delete_original\");\n+    private static final ParseField POLICY_FIELD = new ParseField(\"rollup_policy\");", "originalCommit": "434f49cfdebf188fa2ccc21464baecf252965a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYxMg==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542521612", "bodyText": "sure, will rename!", "author": "talevy", "createdAt": "2020-12-14T16:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NzUxMw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r547297513", "bodyText": "After our last discussion on defining the ILM policy of the rollup index separately. Is this still the place to set the rollup index policy?", "author": "csoulios", "createdAt": "2020-12-22T14:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzE4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542477183", "bodyText": "I thought we would allow RollupILMAction in \"hot\" phase similar to SearchableSnapshotAction. Is this a next step?", "author": "csoulios", "createdAt": "2020-12-14T15:32:28Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/TimeseriesLifecycleType.java", "diffHunk": "@@ -44,25 +45,36 @@\n         ReadOnlyAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME, SearchableSnapshotAction.NAME);\n     static final List<String> ORDERED_VALID_WARM_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, ReadOnlyAction.NAME,\n         AllocateAction.NAME, MigrateAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME);\n-    static final List<String> ORDERED_VALID_COLD_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, AllocateAction.NAME,\n-        MigrateAction.NAME, FreezeAction.NAME, SearchableSnapshotAction.NAME);\n+    static final List<String> ORDERED_VALID_COLD_ACTIONS;\n     static final List<String> ORDERED_VALID_DELETE_ACTIONS = Arrays.asList(WaitForSnapshotAction.NAME, DeleteAction.NAME);\n     static final Set<String> VALID_HOT_ACTIONS = Sets.newHashSet(ORDERED_VALID_HOT_ACTIONS);\n     static final Set<String> VALID_WARM_ACTIONS = Sets.newHashSet(ORDERED_VALID_WARM_ACTIONS);\n-    static final Set<String> VALID_COLD_ACTIONS = Sets.newHashSet(ORDERED_VALID_COLD_ACTIONS);\n+    static final Set<String> VALID_COLD_ACTIONS;\n     static final Set<String> VALID_DELETE_ACTIONS = Sets.newHashSet(ORDERED_VALID_DELETE_ACTIONS);\n-    private static final Map<String, Set<String>> ALLOWED_ACTIONS = Map.of(\n-        HOT_PHASE, VALID_HOT_ACTIONS,\n-        WARM_PHASE, VALID_WARM_ACTIONS,\n-        COLD_PHASE, VALID_COLD_ACTIONS,\n-        DELETE_PHASE, VALID_DELETE_ACTIONS);\n+    private static final Map<String, Set<String>> ALLOWED_ACTIONS;\n \n     static final Set<String> HOT_ACTIONS_THAT_REQUIRE_ROLLOVER = Sets.newHashSet(ReadOnlyAction.NAME, ShrinkAction.NAME,\n         ForceMergeAction.NAME, SearchableSnapshotAction.NAME);\n     // a set of actions that cannot be defined (executed) after the managed index has been mounted as searchable snapshot\n     static final Set<String> ACTIONS_CANNOT_FOLLOW_SEARCHABLE_SNAPSHOT = Sets.newHashSet(ShrinkAction.NAME, ForceMergeAction.NAME,\n         FreezeAction.NAME, SearchableSnapshotAction.NAME);\n \n+    static {\n+        if (RollupV2.isEnabled()) {\n+            ORDERED_VALID_COLD_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, AllocateAction.NAME,\n+                MigrateAction.NAME, FreezeAction.NAME, SearchableSnapshotAction.NAME, RollupILMAction.NAME);", "originalCommit": "434f49cfdebf188fa2ccc21464baecf252965a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxOTU2MA==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542519560", "bodyText": "yeah... I consider that something we can work on in a follow-up. it will require some more conditionals etc that I thought would distract this PR.", "author": "talevy", "createdAt": "2020-12-14T16:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0OTkwNw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542749907", "bodyText": "It makes sense. Thanks", "author": "csoulios", "createdAt": "2020-12-14T20:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NzE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NzMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542497303", "bodyText": "Is it enough to only check for index being read-only?\nDoes it make sense to check that rollover has completed? (Maybe checking the index.lifecycle.indexing_complete index setting?", "author": "csoulios", "createdAt": "2020-12-14T15:57:08Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupILMAction.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ilm.Step.StepKey;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link LifecycleAction} which calls {@link org.elasticsearch.xpack.core.rollup.v2.RollupAction} on an index\n+ */\n+public class RollupILMAction implements LifecycleAction {\n+    public static final String NAME = \"rollup\";\n+\n+    private static final ParseField CONFIG_FIELD = new ParseField(\"config\");\n+    private static final ParseField DELETE_FIELD = new ParseField(\"delete_original\");\n+    private static final ParseField POLICY_FIELD = new ParseField(\"rollup_policy\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<RollupILMAction, Void> PARSER = new ConstructingObjectParser<>(NAME,\n+        a -> new RollupILMAction((RollupActionConfig) a[0], (boolean) a[1], (String) a[2]));\n+\n+    private final RollupActionConfig config;\n+    private final boolean deleteOriginalIndex;\n+    private final String rollupPolicy;\n+\n+    static {\n+        PARSER.declareField(ConstructingObjectParser.constructorArg(),\n+            (p, c) -> RollupActionConfig.fromXContent(p), CONFIG_FIELD, ObjectParser.ValueType.OBJECT);\n+        PARSER.declareBoolean(ConstructingObjectParser.optionalConstructorArg(), DELETE_FIELD);\n+        PARSER.declareString(ConstructingObjectParser.optionalConstructorArg(), POLICY_FIELD);\n+    }\n+\n+    public static RollupILMAction parse(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public RollupILMAction(RollupActionConfig config, boolean deleteOriginalIndex, @Nullable String rollupPolicy) {\n+        this.config = config;\n+        this.deleteOriginalIndex = deleteOriginalIndex;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    public RollupILMAction(StreamInput in) throws IOException {\n+        this(new RollupActionConfig(in), in.readBoolean(), in.readOptionalString());\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return NAME;\n+    }\n+\n+    RollupActionConfig config() {\n+        return config;\n+    }\n+\n+    boolean shouldDeleteOriginalIndex() {\n+        return deleteOriginalIndex;\n+    }\n+\n+    String rollupPolicy() {\n+        return rollupPolicy;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        builder.field(CONFIG_FIELD.getPreferredName(), config);\n+        builder.field(DELETE_FIELD.getPreferredName(), deleteOriginalIndex);\n+        if (rollupPolicy != null) {\n+            builder.field(POLICY_FIELD.getPreferredName(), rollupPolicy);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        config.writeTo(out);\n+        out.writeBoolean(deleteOriginalIndex);\n+        out.writeOptionalString(rollupPolicy);\n+    }\n+\n+    @Override\n+    public boolean isSafeAction() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<Step> toSteps(Client client, String phase, StepKey nextStepKey) {\n+        StepKey checkNotWriteIndex = new StepKey(phase, NAME, CheckNotDataStreamWriteIndexStep.NAME);\n+        StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n+        StepKey rollupKey = new StepKey(phase, NAME, NAME);\n+        StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);\n+        StepKey deleteStepKey = new StepKey(phase, NAME, DeleteStep.NAME);\n+\n+        Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n+\n+        CheckNotDataStreamWriteIndexStep checkNotWriteIndexStep = new CheckNotDataStreamWriteIndexStep(checkNotWriteIndex,", "originalCommit": "434f49cfdebf188fa2ccc21464baecf252965a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDA3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r542520077", "bodyText": "I will double-check with the ILM team, but this is what most of the other actions are doing", "author": "talevy", "createdAt": "2020-12-14T16:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NzMwMw=="}], "type": "inlineReview"}, {"oid": "fe1f124b2b4c0937b50868ca1d048f0c245cd832", "url": "https://github.com/elastic/elasticsearch/commit/fe1f124b2b4c0937b50868ca1d048f0c245cd832", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2020-12-14T18:39:57Z", "type": "commit"}, {"oid": "638cbe7762635caef46320750168dba7e5108f15", "url": "https://github.com/elastic/elasticsearch/commit/638cbe7762635caef46320750168dba7e5108f15", "message": "fix for latest master", "committedDate": "2020-12-14T18:48:22Z", "type": "commit"}, {"oid": "91371d905bccdf4ce4aaa73907eb5ab15f39a1f4", "url": "https://github.com/elastic/elasticsearch/commit/91371d905bccdf4ce4aaa73907eb5ab15f39a1f4", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2020-12-21T21:53:15Z", "type": "commit"}, {"oid": "e46d4ec99c6d411670a2772060517ee5dc5b8f2c", "url": "https://github.com/elastic/elasticsearch/commit/e46d4ec99c6d411670a2772060517ee5dc5b8f2c", "message": "remove delete option and add to hot before snapshotting", "committedDate": "2020-12-21T22:09:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwNjg3MA==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r547306870", "bodyText": "should RollupILMAction be added in a if (RolupV2.isEnabled() {.....} block?", "author": "csoulios", "createdAt": "2020-12-22T14:26:28Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/TimeseriesLifecycleType.java", "diffHunk": "@@ -41,27 +42,38 @@\n     static final String DELETE_PHASE = \"delete\";\n     static final List<String> VALID_PHASES = Arrays.asList(HOT_PHASE, WARM_PHASE, COLD_PHASE, DELETE_PHASE);\n     static final List<String> ORDERED_VALID_HOT_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, RolloverAction.NAME,\n-        ReadOnlyAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME, SearchableSnapshotAction.NAME);\n+        ReadOnlyAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME, RollupILMAction.NAME, SearchableSnapshotAction.NAME);", "originalCommit": "e46d4ec99c6d411670a2772060517ee5dc5b8f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNTIyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r547415229", "bodyText": "yes, indeed! I slipped here because I was eager to see CI run the integration tests. will fix", "author": "talevy", "createdAt": "2020-12-22T17:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwNjg3MA=="}], "type": "inlineReview"}, {"oid": "3e38fd65495c67ee4e88619bb20467de327c3745", "url": "https://github.com/elastic/elasticsearch/commit/3e38fd65495c67ee4e88619bb20467de327c3745", "message": "enable rollup_v2 flag for ilm tests", "committedDate": "2021-01-04T18:12:32Z", "type": "commit"}, {"oid": "277549b9e119fbb07876826a1e41673d56433d38", "url": "https://github.com/elastic/elasticsearch/commit/277549b9e119fbb07876826a1e41673d56433d38", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-04T19:01:08Z", "type": "commit"}, {"oid": "6f7f6f3239da37d42903707bf2d6014557dcc19d", "url": "https://github.com/elastic/elasticsearch/commit/6f7f6f3239da37d42903707bf2d6014557dcc19d", "message": "put Rollup behind feature flag in ilm hot phase actions", "committedDate": "2021-01-04T19:40:26Z", "type": "commit"}, {"oid": "ff38007898682c672b122f03fd00be85467fa435", "url": "https://github.com/elastic/elasticsearch/commit/ff38007898682c672b122f03fd00be85467fa435", "message": "fix rollup ilm action test", "committedDate": "2021-01-04T20:08:18Z", "type": "commit"}, {"oid": "a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "url": "https://github.com/elastic/elasticsearch/commit/a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "message": "really fix it", "committedDate": "2021-01-05T00:08:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg3OTQwNg==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r552879406", "bodyText": "We use prefixes for most of the other ILM actions (searchable snapshot and shrinking), I think it'd be nice to stick with that convention for rollup indices also", "author": "dakrone", "createdAt": "2021-01-06T18:15:43Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupStep.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupAction;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Rolls up index using a {@link RollupActionConfig}\n+ */\n+public class RollupStep extends AsyncActionStep {\n+    public static final String NAME = \"rollup\";\n+    public static final String ROLLUP_INDEX_NAME_POSTFIX = \"-rollup\";\n+\n+    private final RollupActionConfig config;\n+    private final String rollupPolicy;\n+\n+    public RollupStep(StepKey key, StepKey nextStepKey, Client client, RollupActionConfig config, String rollupPolicy) {\n+        super(key, nextStepKey, client);\n+        this.config = config;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentState, ClusterStateObserver observer, Listener listener) {\n+        String originalIndex = indexMetadata.getIndex().getName();\n+        String rollupIndex = originalIndex + ROLLUP_INDEX_NAME_POSTFIX;", "originalCommit": "a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg4MDIyMA==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r552880220", "bodyText": "What happens if response.isAcknowledge() is false here?", "author": "dakrone", "createdAt": "2021-01-06T18:16:29Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupStep.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupAction;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Rolls up index using a {@link RollupActionConfig}\n+ */\n+public class RollupStep extends AsyncActionStep {\n+    public static final String NAME = \"rollup\";\n+    public static final String ROLLUP_INDEX_NAME_POSTFIX = \"-rollup\";\n+\n+    private final RollupActionConfig config;\n+    private final String rollupPolicy;\n+\n+    public RollupStep(StepKey key, StepKey nextStepKey, Client client, RollupActionConfig config, String rollupPolicy) {\n+        super(key, nextStepKey, client);\n+        this.config = config;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentState, ClusterStateObserver observer, Listener listener) {\n+        String originalIndex = indexMetadata.getIndex().getName();\n+        String rollupIndex = originalIndex + ROLLUP_INDEX_NAME_POSTFIX;\n+        RollupAction.Request request = new RollupAction.Request(originalIndex, rollupIndex, config);\n+        if (rollupPolicy == null) {\n+            getClient().execute(RollupAction.INSTANCE, request,\n+                ActionListener.wrap(response -> listener.onResponse(true), listener::onFailure));", "originalCommit": "a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE2NTg2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r556165865", "bodyText": "there is more work to do with regards to the RollupAction itself, which will evolve the response from the action. For now it either throws exception or returns true as a placeholder before we introduce more subtle edge-case behaviors (e.g. #66423)", "author": "talevy", "createdAt": "2021-01-12T23:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg4MDIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTEzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r552891131", "bodyText": "I think these can be split into two steps, that way the update settings request can be retryable, rather than a failure of that step causing the entire rollup to fail", "author": "dakrone", "createdAt": "2021-01-06T18:32:37Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupStep.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupAction;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Rolls up index using a {@link RollupActionConfig}\n+ */\n+public class RollupStep extends AsyncActionStep {\n+    public static final String NAME = \"rollup\";\n+    public static final String ROLLUP_INDEX_NAME_POSTFIX = \"-rollup\";\n+\n+    private final RollupActionConfig config;\n+    private final String rollupPolicy;\n+\n+    public RollupStep(StepKey key, StepKey nextStepKey, Client client, RollupActionConfig config, String rollupPolicy) {\n+        super(key, nextStepKey, client);\n+        this.config = config;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentState, ClusterStateObserver observer, Listener listener) {\n+        String originalIndex = indexMetadata.getIndex().getName();\n+        String rollupIndex = originalIndex + ROLLUP_INDEX_NAME_POSTFIX;\n+        RollupAction.Request request = new RollupAction.Request(originalIndex, rollupIndex, config);\n+        if (rollupPolicy == null) {\n+            getClient().execute(RollupAction.INSTANCE, request,\n+                ActionListener.wrap(response -> listener.onResponse(true), listener::onFailure));\n+        } else {\n+            Settings setPolicySettings = Settings.builder().put(LifecycleSettings.LIFECYCLE_NAME, rollupPolicy).build();\n+            UpdateSettingsRequest updateSettingsRequest = new UpdateSettingsRequest(rollupIndex)\n+                .masterNodeTimeout(getMasterTimeout(currentState)).settings(setPolicySettings);\n+            getClient().execute(RollupAction.INSTANCE, request,\n+                ActionListener.wrap(rollupResponse -> {\n+                    getClient().admin().indices().updateSettings(updateSettingsRequest,\n+                        ActionListener.wrap(settingsResponse -> listener.onResponse(true), listener::onFailure));\n+                }, listener::onFailure));", "originalCommit": "a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MTk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r552891961", "bodyText": "I think it would be really nice to have this be retryable for the first release, maybe we can brainstorm why it isn't retryable and how to make it so? Otherwise I think we may end up having to do surgery on the indices if they get into an error and can't proceed past the rollup stage", "author": "dakrone", "createdAt": "2021-01-06T18:34:15Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupStep.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupAction;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Rolls up index using a {@link RollupActionConfig}\n+ */\n+public class RollupStep extends AsyncActionStep {\n+    public static final String NAME = \"rollup\";\n+    public static final String ROLLUP_INDEX_NAME_POSTFIX = \"-rollup\";\n+\n+    private final RollupActionConfig config;\n+    private final String rollupPolicy;\n+\n+    public RollupStep(StepKey key, StepKey nextStepKey, Client client, RollupActionConfig config, String rollupPolicy) {\n+        super(key, nextStepKey, client);\n+        this.config = config;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return false;", "originalCommit": "a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5NTAxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r552895011", "bodyText": "This should use the ReadOnlyStep (which uses the new API for marking things as read only) rather than updating the settings manually", "author": "dakrone", "createdAt": "2021-01-06T18:40:27Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupILMAction.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ObjectParser;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ilm.Step.StepKey;\n+import org.elasticsearch.xpack.core.rollup.v2.RollupActionConfig;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A {@link LifecycleAction} which calls {@link org.elasticsearch.xpack.core.rollup.v2.RollupAction} on an index\n+ */\n+public class RollupILMAction implements LifecycleAction {\n+    public static final String NAME = \"rollup\";\n+\n+    private static final ParseField CONFIG_FIELD = new ParseField(\"config\");\n+    private static final ParseField POLICY_FIELD = new ParseField(\"rollup_policy\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static final ConstructingObjectParser<RollupILMAction, Void> PARSER = new ConstructingObjectParser<>(NAME,\n+        a -> new RollupILMAction((RollupActionConfig) a[0], (String) a[1]));\n+\n+    private final RollupActionConfig config;\n+    private final String rollupPolicy;\n+\n+    static {\n+        PARSER.declareField(ConstructingObjectParser.constructorArg(),\n+            (p, c) -> RollupActionConfig.fromXContent(p), CONFIG_FIELD, ObjectParser.ValueType.OBJECT);\n+        PARSER.declareString(ConstructingObjectParser.optionalConstructorArg(), POLICY_FIELD);\n+    }\n+\n+    public static RollupILMAction parse(XContentParser parser) {\n+        return PARSER.apply(parser, null);\n+    }\n+\n+    public RollupILMAction(RollupActionConfig config, @Nullable String rollupPolicy) {\n+        this.config = config;\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    public RollupILMAction(StreamInput in) throws IOException {\n+        this(new RollupActionConfig(in), in.readOptionalString());\n+    }\n+\n+    @Override\n+    public String getWriteableName() {\n+        return NAME;\n+    }\n+\n+    RollupActionConfig config() {\n+        return config;\n+    }\n+\n+    String rollupPolicy() {\n+        return rollupPolicy;\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        builder.startObject();\n+        builder.field(CONFIG_FIELD.getPreferredName(), config);\n+        if (rollupPolicy != null) {\n+            builder.field(POLICY_FIELD.getPreferredName(), rollupPolicy);\n+        }\n+        builder.endObject();\n+        return builder;\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        config.writeTo(out);\n+        out.writeOptionalString(rollupPolicy);\n+    }\n+\n+    @Override\n+    public boolean isSafeAction() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<Step> toSteps(Client client, String phase, StepKey nextStepKey) {\n+        StepKey checkNotWriteIndex = new StepKey(phase, NAME, CheckNotDataStreamWriteIndexStep.NAME);\n+        StepKey readOnlyKey = new StepKey(phase, NAME, ReadOnlyAction.NAME);\n+        StepKey rollupKey = new StepKey(phase, NAME, NAME);\n+        Settings readOnlySettings = Settings.builder().put(IndexMetadata.SETTING_BLOCKS_WRITE, true).build();\n+        CheckNotDataStreamWriteIndexStep checkNotWriteIndexStep = new CheckNotDataStreamWriteIndexStep(checkNotWriteIndex,\n+            readOnlyKey);\n+        UpdateSettingsStep readOnlyStep = new UpdateSettingsStep(readOnlyKey, rollupKey, client, readOnlySettings);", "originalCommit": "a5b1bb94e1ee359a092e5d88410e8f7a1d33074e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c430366c72f5da07a8b5b1a24a10aa536271a9a0", "url": "https://github.com/elastic/elasticsearch/commit/c430366c72f5da07a8b5b1a24a10aa536271a9a0", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-12T19:35:03Z", "type": "commit"}, {"oid": "d954f55e98e3861a22b2ad6eb17901f970e56c9b", "url": "https://github.com/elastic/elasticsearch/commit/d954f55e98e3861a22b2ad6eb17901f970e56c9b", "message": "update rollup ilm to more steps and retryable", "committedDate": "2021-01-12T23:29:04Z", "type": "commit"}, {"oid": "4679677d68b09903d04eaedfe831d09f2c768151", "url": "https://github.com/elastic/elasticsearch/commit/4679677d68b09903d04eaedfe831d09f2c768151", "message": "fix test bugs", "committedDate": "2021-01-15T00:20:23Z", "type": "commit"}, {"oid": "4091a96cfb93d871955202d623544389df343d57", "url": "https://github.com/elastic/elasticsearch/commit/4091a96cfb93d871955202d623544389df343d57", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-15T00:20:43Z", "type": "commit"}, {"oid": "ffcc4a27b19ffc924fd50ac4f2a86441be060098", "url": "https://github.com/elastic/elasticsearch/commit/ffcc4a27b19ffc924fd50ac4f2a86441be060098", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-19T17:19:37Z", "type": "commit"}, {"oid": "d9523a8dcce52071069df7273b63eedb9f9cac38", "url": "https://github.com/elastic/elasticsearch/commit/d9523a8dcce52071069df7273b63eedb9f9cac38", "message": "simplify and fix tests", "committedDate": "2021-01-19T19:02:41Z", "type": "commit"}, {"oid": "d53427eb63b3a3af9491a4a322f94f2d6e27ffea", "url": "https://github.com/elastic/elasticsearch/commit/d53427eb63b3a3af9491a4a322f94f2d6e27ffea", "message": "fix checkstyle", "committedDate": "2021-01-19T19:45:45Z", "type": "commit"}, {"oid": "05de2e1892d07a7cbd3319252dbbd9e1ae64a3b1", "url": "https://github.com/elastic/elasticsearch/commit/05de2e1892d07a7cbd3319252dbbd9e1ae64a3b1", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-20T18:15:06Z", "type": "commit"}, {"oid": "0f8ebcc6bb8cbed7c32e3708f8a0f0fe0d8cea40", "url": "https://github.com/elastic/elasticsearch/commit/0f8ebcc6bb8cbed7c32e3708f8a0f0fe0d8cea40", "message": "re-introduce policy updating by way of a new step", "committedDate": "2021-01-20T18:38:28Z", "type": "commit"}, {"oid": "1905843ab5e5017a1725d9778ad4ba1493742942", "url": "https://github.com/elastic/elasticsearch/commit/1905843ab5e5017a1725d9778ad4ba1493742942", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-21T22:30:02Z", "type": "commit"}, {"oid": "b622f39144026b310e2515cf8ceb1b7ccfda1420", "url": "https://github.com/elastic/elasticsearch/commit/b622f39144026b310e2515cf8ceb1b7ccfda1420", "message": "fix merge exceptions", "committedDate": "2021-01-21T22:36:27Z", "type": "commit"}, {"oid": "968e7aa646641635c9d4e5d1e159f993ad8acdec", "url": "https://github.com/elastic/elasticsearch/commit/968e7aa646641635c9d4e5d1e159f993ad8acdec", "message": "fix test setup", "committedDate": "2021-01-25T16:01:34Z", "type": "commit"}, {"oid": "1d03113bdf55d7bb1747c4d5560657834f88f996", "url": "https://github.com/elastic/elasticsearch/commit/1d03113bdf55d7bb1747c4d5560657834f88f996", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-25T16:01:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA5OTU3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r564099573", "bodyText": "Can we add a comment here about why this is okay to hardcode to true? ie, is it truly okay to ignore if the request is not acknowledged?", "author": "dakrone", "createdAt": "2021-01-25T22:56:07Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/RollupStep.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.xpack.core.rollup.RollupActionConfig;\n+import org.elasticsearch.xpack.core.rollup.action.RollupAction;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Rolls up index using a {@link RollupActionConfig}\n+ */\n+public class RollupStep extends AsyncActionStep {\n+    public static final String NAME = \"rollup\";\n+    public static final String ROLLUP_INDEX_NAME_PREFIX = \"rollup-\";\n+\n+    private final RollupActionConfig config;\n+\n+    public RollupStep(StepKey key, StepKey nextStepKey, Client client, RollupActionConfig config) {\n+        super(key, nextStepKey, client);\n+        this.config = config;\n+    }\n+\n+    public static String getRollupIndexName(String index) {\n+        return ROLLUP_INDEX_NAME_PREFIX + index;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentState, ClusterStateObserver observer, Listener listener) {\n+        String originalIndex = indexMetadata.getIndex().getName();\n+        RollupAction.Request request = new RollupAction.Request(originalIndex, getRollupIndexName(originalIndex), config);\n+        getClient().execute(RollupAction.INSTANCE, request,\n+            ActionListener.wrap(response -> listener.onResponse(true), listener::onFailure));", "originalCommit": "1d03113bdf55d7bb1747c4d5560657834f88f996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEwMDk3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r564100975", "bodyText": "This should check the acknowledged flag, throwing an exception if it was not acknowledged (so that the settings update will be retried)", "author": "dakrone", "createdAt": "2021-01-25T22:59:04Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/UpdateRollupIndexPolicyStep.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ilm;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.ClusterStateObserver;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Updates the lifecycle policy for the rollup index for the original/currently managed index\n+ */\n+public class UpdateRollupIndexPolicyStep extends AsyncActionStep {\n+    public static final String NAME = \"update-rollup-policy\";\n+\n+    private final String rollupPolicy;\n+\n+    public UpdateRollupIndexPolicyStep(StepKey key, StepKey nextStepKey, Client client, String rollupPolicy) {\n+        super(key, nextStepKey, client);\n+        this.rollupPolicy = rollupPolicy;\n+    }\n+\n+    @Override\n+    public boolean isRetryable() {\n+        return true;\n+    }\n+\n+    public String getRollupPolicy() {\n+        return rollupPolicy;\n+    }\n+\n+    @Override\n+    public void performAction(IndexMetadata indexMetadata, ClusterState currentState, ClusterStateObserver observer, Listener listener) {\n+        String rollupIndex = RollupStep.getRollupIndexName(indexMetadata.getIndex().getName());\n+        Settings settings = Settings.builder().put(LifecycleSettings.LIFECYCLE_NAME, rollupPolicy).build();\n+        UpdateSettingsRequest updateSettingsRequest = new UpdateSettingsRequest(rollupIndex)\n+            .masterNodeTimeout(getMasterTimeout(currentState))\n+            .settings(settings);\n+        getClient().admin().indices().updateSettings(updateSettingsRequest,\n+                ActionListener.wrap(response -> listener.onResponse(true), listener::onFailure));", "originalCommit": "1d03113bdf55d7bb1747c4d5560657834f88f996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96a1622568a2729d0dc6d5d4d38235d366b99d84", "url": "https://github.com/elastic/elasticsearch/commit/96a1622568a2729d0dc6d5d4d38235d366b99d84", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-26T21:36:54Z", "type": "commit"}, {"oid": "c9e31d52239ddd5a93de4d0d76b6d711da3673d8", "url": "https://github.com/elastic/elasticsearch/commit/c9e31d52239ddd5a93de4d0d76b6d711da3673d8", "message": "docs and cleanup", "committedDate": "2021-01-26T22:09:41Z", "type": "commit"}, {"oid": "1d1fc31f0c3207e48e62a648fe2153f6dcff2234", "url": "https://github.com/elastic/elasticsearch/commit/1d1fc31f0c3207e48e62a648fe2153f6dcff2234", "message": "add docs to ILM Actions page", "committedDate": "2021-01-26T22:11:00Z", "type": "commit"}, {"oid": "49b58022be6b6b197dbafe25f58ed3fc23474aca", "url": "https://github.com/elastic/elasticsearch/commit/49b58022be6b6b197dbafe25f58ed3fc23474aca", "message": "place ILM Rollup Docs behind unreleased branch conditional", "committedDate": "2021-01-26T22:19:32Z", "type": "commit"}, {"oid": "e340f07b9f38779daffd2868b7a96d8f8987b002", "url": "https://github.com/elastic/elasticsearch/commit/e340f07b9f38779daffd2868b7a96d8f8987b002", "message": "Update docs/reference/ilm/actions/ilm-rollup.asciidoc\n\nCo-authored-by: James Rodewig <40268737+jrodewig@users.noreply.github.com>", "committedDate": "2021-01-27T20:34:20Z", "type": "commit"}, {"oid": "7efb1a30ea9dc776b4678ade68dbe44ab08a4970", "url": "https://github.com/elastic/elasticsearch/commit/7efb1a30ea9dc776b4678ade68dbe44ab08a4970", "message": "Update docs/reference/ilm/actions/ilm-rollup.asciidoc\n\nCo-authored-by: James Rodewig <40268737+jrodewig@users.noreply.github.com>", "committedDate": "2021-01-27T20:34:30Z", "type": "commit"}, {"oid": "10487aab499e4bfa5d19b9a5eb48dd7141d22b3d", "url": "https://github.com/elastic/elasticsearch/commit/10487aab499e4bfa5d19b9a5eb48dd7141d22b3d", "message": "Update docs/reference/ilm/actions/ilm-rollup.asciidoc\n\nCo-authored-by: James Rodewig <40268737+jrodewig@users.noreply.github.com>", "committedDate": "2021-01-27T20:34:38Z", "type": "commit"}, {"oid": "382915d803b5cf755fef06bd7f6e3a2b4c594c7a", "url": "https://github.com/elastic/elasticsearch/commit/382915d803b5cf755fef06bd7f6e3a2b4c594c7a", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-27T20:36:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ0MTc0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r566441749", "bodyText": "I missed this before, but if we're going to rollup right after a shrink and force merge, what's the point of shrinking and force merging? Should we just rollup first and then do the shrink/forcemerge?\n(I think this is okay to leave as is for now, but we might want to investigate making them mutually exclusive in the future so we don't waste resources doing a shrink and force merge right before we rollup and create a new index anyway. At the very least I think maybe force merge should move to after the Rollup?)", "author": "dakrone", "createdAt": "2021-01-28T22:10:50Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/TimeseriesLifecycleType.java", "diffHunk": "@@ -40,28 +41,43 @@\n     static final String COLD_PHASE = \"cold\";\n     static final String DELETE_PHASE = \"delete\";\n     static final List<String> VALID_PHASES = Arrays.asList(HOT_PHASE, WARM_PHASE, COLD_PHASE, DELETE_PHASE);\n-    static final List<String> ORDERED_VALID_HOT_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, RolloverAction.NAME,\n-        ReadOnlyAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME, SearchableSnapshotAction.NAME);\n+    static final List<String> ORDERED_VALID_HOT_ACTIONS;\n     static final List<String> ORDERED_VALID_WARM_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, ReadOnlyAction.NAME,\n         AllocateAction.NAME, MigrateAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME);\n-    static final List<String> ORDERED_VALID_COLD_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, AllocateAction.NAME,\n-        MigrateAction.NAME, FreezeAction.NAME, SearchableSnapshotAction.NAME);\n+    static final List<String> ORDERED_VALID_COLD_ACTIONS;\n     static final List<String> ORDERED_VALID_DELETE_ACTIONS = Arrays.asList(WaitForSnapshotAction.NAME, DeleteAction.NAME);\n-    static final Set<String> VALID_HOT_ACTIONS = Sets.newHashSet(ORDERED_VALID_HOT_ACTIONS);\n+    static final Set<String> VALID_HOT_ACTIONS;\n     static final Set<String> VALID_WARM_ACTIONS = Sets.newHashSet(ORDERED_VALID_WARM_ACTIONS);\n-    static final Set<String> VALID_COLD_ACTIONS = Sets.newHashSet(ORDERED_VALID_COLD_ACTIONS);\n+    static final Set<String> VALID_COLD_ACTIONS;\n     static final Set<String> VALID_DELETE_ACTIONS = Sets.newHashSet(ORDERED_VALID_DELETE_ACTIONS);\n-    private static final Map<String, Set<String>> ALLOWED_ACTIONS = Map.of(\n-        HOT_PHASE, VALID_HOT_ACTIONS,\n-        WARM_PHASE, VALID_WARM_ACTIONS,\n-        COLD_PHASE, VALID_COLD_ACTIONS,\n-        DELETE_PHASE, VALID_DELETE_ACTIONS);\n+    private static final Map<String, Set<String>> ALLOWED_ACTIONS;\n \n     static final Set<String> HOT_ACTIONS_THAT_REQUIRE_ROLLOVER = Sets.newHashSet(ReadOnlyAction.NAME, ShrinkAction.NAME,\n-        ForceMergeAction.NAME, SearchableSnapshotAction.NAME);\n+        ForceMergeAction.NAME, RollupILMAction.NAME, SearchableSnapshotAction.NAME);\n     // a set of actions that cannot be defined (executed) after the managed index has been mounted as searchable snapshot\n     static final Set<String> ACTIONS_CANNOT_FOLLOW_SEARCHABLE_SNAPSHOT = Sets.newHashSet(ShrinkAction.NAME, ForceMergeAction.NAME,\n-        FreezeAction.NAME, SearchableSnapshotAction.NAME);\n+        FreezeAction.NAME, SearchableSnapshotAction.NAME, RollupILMAction.NAME);\n+\n+    static {\n+        if (RollupV2.isEnabled()) {\n+            ORDERED_VALID_HOT_ACTIONS = Arrays.asList(SetPriorityAction.NAME, UnfollowAction.NAME, RolloverAction.NAME,\n+                ReadOnlyAction.NAME, ShrinkAction.NAME, ForceMergeAction.NAME, RollupILMAction.NAME, SearchableSnapshotAction.NAME);", "originalCommit": "382915d803b5cf755fef06bd7f6e3a2b4c594c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ3MzQzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/65633#discussion_r566473431", "bodyText": "these are fair points. I figured these things would occur anyways, so order should not matter at the end of the day. That being said, waiting to do these operations before rolling up is not necessary. it might be interesting to benchmark and see if fewer shards ends up resulting in a faster rollup or not. but this should not be of concern to the user anyways.\nI will move Rollup to happen before Shrink, but will bring this up with the team to see if there are any other opinions", "author": "talevy", "createdAt": "2021-01-28T23:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ0MTc0OQ=="}], "type": "inlineReview"}, {"oid": "e01d06362c53063f816af74d4837e97a723fe399", "url": "https://github.com/elastic/elasticsearch/commit/e01d06362c53063f816af74d4837e97a723fe399", "message": "Merge remote-tracking branch 'elastic/master' into rollup-ilm", "committedDate": "2021-01-28T23:19:16Z", "type": "commit"}, {"oid": "ec30764aa31ee8910b7d850492246198e201e70c", "url": "https://github.com/elastic/elasticsearch/commit/ec30764aa31ee8910b7d850492246198e201e70c", "message": "prioritize rollup before shrink/forcemerge in hot phase", "committedDate": "2021-01-29T00:58:27Z", "type": "commit"}]}