{"pr_number": 58708, "pr_title": "Oidc additional client auth types", "pr_createdAt": "2020-06-29T22:56:15Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58708", "timeline": [{"oid": "3360fa13fb529d33c602a170f9753479928dbdd3", "url": "https://github.com/elastic/elasticsearch/commit/3360fa13fb529d33c602a170f9753479928dbdd3", "message": "wip", "committedDate": "2020-06-25T05:52:32Z", "type": "commit"}, {"oid": "7050759cfb616d9ec60f127868d1ca5382d9eee4", "url": "https://github.com/elastic/elasticsearch/commit/7050759cfb616d9ec60f127868d1ca5382d9eee4", "message": "OIDC: Enable additional client auth types\n\nThe OpenID Connect specification defines a number of ways for a\nclient (RP) to authenticate itself to the OP when accessing the\nToken Endpoint. We currently only support `client_secret_basic`.\n\nThis change introduces support for 2 additional authentication\nmethods, namely `client_secret_post` (where the client credentials\nare passed in the body of the POST request to the OP) and\n`client_secret_jwt` where the client constructs a JWT and signs\nit using the the client secret as a key.\n\nSupport for the above, and especially `client_secret_jwt` in our\nintegration tests meant that the OP we use ( Connect2id server )\nshould be able to validate the JWT that we send it from the RP.\nSince we run the OP in docker and it listens on an ephemeral port\nwe would have no way of knowing the port so that we can configure\nthe ES running via the testcluster to know the \"correct\" Token\nEndpoint, and even if we did, this would not be the Token Endpoint\nURL that the OP would think it listens on. To alleviate this, we\nrun an ES single node cluster in docker, alongside the OP so that\nwe can configured it with the correct hostname and port within\nthe docker network.", "committedDate": "2020-06-29T12:20:13Z", "type": "commit"}, {"oid": "45d9a742a57174909816fccc1222d18e7158f06a", "url": "https://github.com/elastic/elasticsearch/commit/45d9a742a57174909816fccc1222d18e7158f06a", "message": "Merge remote-tracking branch 'origin/master' into oidc-additional-client-auth-types", "committedDate": "2020-06-29T22:52:18Z", "type": "commit"}, {"oid": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "url": "https://github.com/elastic/elasticsearch/commit/0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "message": "remove random characters from config", "committedDate": "2020-06-30T04:54:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MTk4Ng==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447681986", "bodyText": "Nit: The name or value is usually placed inside a pair of brackets in error messages, .e.g ... but was [xxx].", "author": "ywangd", "createdAt": "2020-06-30T13:28:48Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }\n+            } else {\n+                tokensListener.onFailure(new ElasticsearchSecurityException(\"Failed to exchange code for Id Token using Token Endpoint.\" +\n+                    \"Expected client authentication method to be one of \" + OpenIdConnectRealmSettings.CLIENT_AUTH_METHODS + \" but was \" +\n+                    rpConfig.getClientAuthenticationMethod()));", "originalCommit": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447685828", "bodyText": "Maybe I am missing something obvious. But client_id is not added as one of the request parameters? The map returned from ClientSecretJWT.toParameters() only contains client_assertion and client_assertion_type if I read the code correctly.", "author": "ywangd", "createdAt": "2020-06-30T13:33:49Z", "path": "x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java", "diffHunk": "@@ -463,19 +466,36 @@ private void exchangeCodeForToken(AuthorizationCode code, ActionListener<Tuple<A\n         try {\n             final AuthorizationCodeGrant codeGrant = new AuthorizationCodeGrant(code, rpConfig.getRedirectUri());\n             final HttpPost httpPost = new HttpPost(opConfig.getTokenEndpoint());\n+            httpPost.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n             final List<NameValuePair> params = new ArrayList<>();\n             for (Map.Entry<String, List<String>> entry : codeGrant.toParameters().entrySet()) {\n                 // All parameters of AuthorizationCodeGrant are singleton lists\n                 params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n             }\n+            if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)) {\n+                UsernamePasswordCredentials creds =\n+                    new UsernamePasswordCredentials(URLEncoder.encode(rpConfig.getClientId().getValue(), StandardCharsets.UTF_8),\n+                        URLEncoder.encode(rpConfig.getClientSecret().toString(), StandardCharsets.UTF_8));\n+                httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_POST)) {\n+                params.add(new BasicNameValuePair(\"client_id\", rpConfig.getClientId().getValue()));\n+                params.add(new BasicNameValuePair(\"client_secret\", rpConfig.getClientSecret().toString()));\n+            } else if (rpConfig.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.CLIENT_SECRET_JWT)) {\n+                ClientSecretJWT clientSecretJWT = new ClientSecretJWT(rpConfig.getClientId(), opConfig.getTokenEndpoint(),\n+                    rpConfig.getClientAuthenticationJwtAlgorithm(), new Secret(rpConfig.getClientSecret().toString()));\n+                for (Map.Entry<String, List<String>> entry : clientSecretJWT.toParameters().entrySet()) {\n+                    // Both client_assertion and client_assertion_type are singleton lists\n+                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue().get(0)));\n+                }", "originalCommit": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTQ0NA==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447719444", "bodyText": "But client_id is not added as one of the request parameters?\n\nIt's not, it doesn't need to be. It is added as the iss claim of the JWT and validated from there.\n\nonly contains client_assertion and client_assertion_type\n\nyes, these are the two parameters needed, see https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication", "author": "jkakavas", "createdAt": "2020-06-30T14:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTM2NA==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447725364", "bodyText": "You are right. For a moment, I forgot how JWT is organized. It's too late for me ...", "author": "ywangd", "createdAt": "2020-06-30T14:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMDM2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447730365", "bodyText": "I know that feeling !!! :) No need to go through this today, it can definitely wait. I raised the PR because I had it ready since last week", "author": "jkakavas", "createdAt": "2020-06-30T14:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4ODI2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447688262", "bodyText": "Nit: need a blank line before this method.", "author": "ywangd", "createdAt": "2020-06-30T13:37:11Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticatorTests.java", "diffHunk": "@@ -841,6 +842,8 @@ private RelyingPartyConfiguration getDefaultRpConfig() throws URISyntaxException\n             new ResponseType(\"id_token\", \"token\"),\n             new Scope(\"openid\"),\n             JWSAlgorithm.RS384,\n+            ClientAuthenticationMethod.CLIENT_SECRET_BASIC,\n+            JWSAlgorithm.HS384,\n             new URI(\"https://rp.elastic.co/successfull_logout\"));\n     }\n     private RelyingPartyConfiguration getRpConfig(String alg) throws URISyntaxException {", "originalCommit": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTMxMg==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447695312", "bodyText": "\"none\", \"None\", \"noNe\", \"nOnE\", \"NonE\" ... \ud83d\udc4d that we will not have this issue.", "author": "ywangd", "createdAt": "2020-06-30T13:46:37Z", "path": "x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectRealmSettingsTests.java", "diffHunk": "@@ -327,6 +362,45 @@ public void testInvalidProxyHostThrowsError() {\n         ));\n     }\n \n+    public void testInvalidClientAuthenticationMethodThrowsError() {\n+        final Settings.Builder settingsBuilder = Settings.builder()\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_AUTHORIZATION_ENDPOINT), \"https://op.example.com/login\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_ISSUER), \"https://op.example.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_JWKSET_PATH), \"https://op.example.com/jwks.json\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.OP_TOKEN_ENDPOINT), \"https://op.example.com/token\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.PRINCIPAL_CLAIM.getClaim()), \"sub\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_REDIRECT_URI), \"https://rp.my.com\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_ID), \"rp-my\")\n+            .put(getFullSettingKey(REALM_NAME, OpenIdConnectRealmSettings.RP_CLIENT_AUTH_METHOD), \"none\")", "originalCommit": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTc1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447725755", "bodyText": "This would be testing the OP though, not our implementation, as it is the OP that should not validate a client JWT with none algorithm. We do not disallow none specifically, we use an allowlist that only allows \"HS256\", \"HS384\", \"HS512\"\nI like the suggestion though, we can use it in OpenIdConnectAuthenticatorTests.testImplicitFlowFailsWithNoneAlgorithm which tests our implementation", "author": "jkakavas", "createdAt": "2020-06-30T14:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NTMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447714554", "bodyText": "I don't see test.fixtures.elasticsearch-node.9200 get set anywhere. How does this work?", "author": "ywangd", "createdAt": "2020-06-30T14:11:54Z", "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -65,16 +71,31 @@\n     private static final String REALM_NAME = \"c2id\";\n     private static final String REALM_NAME_IMPLICIT = \"c2id-implicit\";\n     private static final String REALM_NAME_PROXY = \"c2id-proxy\";\n+    private static final String REALM_NAME_CLIENT_POST_AUTH = \"c2id-post\";\n+    private static final String REALM_NAME_CLIENT_JWT_AUTH = \"c2id-jwt\";\n     private static final String FACILITATOR_PASSWORD = \"f@cilit@t0r\";\n-    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id/clients\";\n-    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralPortFromProperty(\"8080\") + \"/c2id-login/api/\";\n+    private static final String REGISTRATION_URL = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id/clients\";\n+    private static final String LOGIN_API = \"http://127.0.0.1:\" + getEphemeralTcpPortFromProperty(\"oidc-provider\", \"8080\")\n+        + \"/c2id-login/api/\";\n+    private static final String ES_PORT = getEphemeralTcpPortFromProperty(\"elasticsearch-node\", \"9200\");", "originalCommit": "0467b14986b3f5b7596a4681b0e7b6bce5a4cffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNzUyNA==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447727524", "bodyText": "elasticsearch-node is the name of the elasticsearch service in https://github.com/elastic/elasticsearch/pull/58708/files#diff-2be63811028f90650408e594c29099b9R3 and 9200 is defined there in the ports section. I assume it is the gradle docker compose plugin that handles this magic or something in our buildSrc , Mark can probably share more details", "author": "jkakavas", "createdAt": "2020-06-30T14:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMDQxNg==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r447730416", "bodyText": "Ah awesome! buildSrc magic. TIL", "author": "ywangd", "createdAt": "2020-06-30T14:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDU1NA=="}], "type": "inlineReview"}, {"oid": "e1e553724b454b64043e80a74a10c57b7c5c7ceb", "url": "https://github.com/elastic/elasticsearch/commit/e1e553724b454b64043e80a74a10c57b7c5c7ceb", "message": "address feedback", "committedDate": "2020-06-30T14:39:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNzA0MA==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448107040", "bodyText": "Not sure where this Bearer token is picked from. I guess it has something to do with the docker image?", "author": "ywangd", "createdAt": "2020-07-01T04:23:43Z", "path": "x-pack/qa/oidc-op-tests/src/test/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthIT.java", "diffHunk": "@@ -95,30 +117,71 @@ public static void registerClients() throws Exception {\n                 \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n                 \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"]\" +\n                 \"}\";\n+            String postClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_post\\\"\" +\n+                \"}\";\n+            String jwtClient = \"{\" +\n+                \"\\\"grant_types\\\": [\\\"authorization_code\\\"],\" +\n+                \"\\\"response_types\\\": [\\\"code\\\"],\" +\n+                \"\\\"preferred_client_id\\\":\\\"elasticsearch-post-jwt\\\",\" +\n+                \"\\\"preferred_client_secret\\\":\\\"b07efb7a1cf6ec9462afe7b6d3ab55c6c7880262aa61ac28dded292aca47c9a2\\\",\" +\n+                \"\\\"redirect_uris\\\": [\\\"https://my.fantastic.rp/cb\\\"],\" +\n+                \"\\\"token_endpoint_auth_method\\\":\\\"client_secret_jwt\\\"\" +\n+                \"}\";\n             HttpPost httpPost = new HttpPost(REGISTRATION_URL);\n             final BasicHttpContext context = new BasicHttpContext();\n             httpPost.setEntity(new StringEntity(codeClient, ContentType.APPLICATION_JSON));\n             httpPost.setHeader(\"Accept\", \"application/json\");\n             httpPost.setHeader(\"Content-type\", \"application/json\");\n             httpPost.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost, context));\n-            assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\n-            httpPost.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n+\n             HttpPost httpPost2 = new HttpPost(REGISTRATION_URL);\n             httpPost2.setEntity(new StringEntity(implicitClient, ContentType.APPLICATION_JSON));\n             httpPost2.setHeader(\"Accept\", \"application/json\");\n             httpPost2.setHeader(\"Content-type\", \"application/json\");\n             httpPost2.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");\n-            CloseableHttpResponse response2 = SocketAccess.doPrivileged(() -> httpClient.execute(httpPost2, context));\n-            assertThat(response2.getStatusLine().getStatusCode(), equalTo(200));\n+\n+            HttpPost httpPost3 = new HttpPost(REGISTRATION_URL);\n+            httpPost3.setEntity(new StringEntity(postClient, ContentType.APPLICATION_JSON));\n+            httpPost3.setHeader(\"Accept\", \"application/json\");\n+            httpPost3.setHeader(\"Content-type\", \"application/json\");\n+            httpPost3.setHeader(\"Authorization\", \"Bearer 811fa888f3e0fdc9e01d4201bfeee46a\");", "originalCommit": "e1e553724b454b64043e80a74a10c57b7c5c7ceb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4NjcwMw==", "url": "https://github.com/elastic/elasticsearch/pull/58708#discussion_r448186703", "bodyText": "We define this in override.properties which we bind mount to the container, see the docker compose file and it is used as a static credential to talk to the OPs API , I'll add a comment here when I get to merge this", "author": "jkakavas", "createdAt": "2020-07-01T08:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwNzA0MA=="}], "type": "inlineReview"}, {"oid": "e66c6e5d092395fe41c0c1d85e3601b39d153a72", "url": "https://github.com/elastic/elasticsearch/commit/e66c6e5d092395fe41c0c1d85e3601b39d153a72", "message": "Merge remote-tracking branch 'origin/master' into oidc-additional-client-auth-types", "committedDate": "2020-08-19T08:54:42Z", "type": "commit"}, {"oid": "49cd4388950e8e07cf35372e3a67cc5659eacfb3", "url": "https://github.com/elastic/elasticsearch/commit/49cd4388950e8e07cf35372e3a67cc5659eacfb3", "message": "address feedback", "committedDate": "2020-08-19T09:13:17Z", "type": "commit"}, {"oid": "0636079234ac1cf7bbb7cfb37df56dfb8479cf28", "url": "https://github.com/elastic/elasticsearch/commit/0636079234ac1cf7bbb7cfb37df56dfb8479cf28", "message": "Merge branch 'master' into oidc-additional-client-auth-types", "committedDate": "2020-09-01T09:33:36Z", "type": "commit"}, {"oid": "52a4c80eb89f14ec2cdebd776e95236e259f2f53", "url": "https://github.com/elastic/elasticsearch/commit/52a4c80eb89f14ec2cdebd776e95236e259f2f53", "message": "Merge remote-tracking branch 'origin/master' into oidc-additional-client-auth-types", "committedDate": "2020-09-09T08:53:49Z", "type": "commit"}, {"oid": "1dcd6f31090b51a94f0c0947ff402afdbdd8408e", "url": "https://github.com/elastic/elasticsearch/commit/1dcd6f31090b51a94f0c0947ff402afdbdd8408e", "message": "Apply Rene's fix for test fixture\n\nFrom\nhttps://github.com/breskeby/elasticsearch/commit/de079d6dde022c5122a0c7b41ae9248abed4ad58", "committedDate": "2020-09-09T08:55:30Z", "type": "commit"}]}