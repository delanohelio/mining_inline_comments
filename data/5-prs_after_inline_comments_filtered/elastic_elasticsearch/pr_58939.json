{"pr_number": 58939, "pr_title": "Scripted keyword field", "pr_createdAt": "2020-07-02T16:13:37Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58939", "timeline": [{"oid": "39edc3cfb9db926ae7ef1ba866516e5d3a8061ca", "url": "https://github.com/elastic/elasticsearch/commit/39edc3cfb9db926ae7ef1ba866516e5d3a8061ca", "message": "WIP: runtime keyword field", "committedDate": "2020-06-18T22:28:21Z", "type": "commit"}, {"oid": "51e8d23497f8d4e1487fc6517db657f27203cc93", "url": "https://github.com/elastic/elasticsearch/commit/51e8d23497f8d4e1487fc6517db657f27203cc93", "message": "Merge branch 'feature/runtime_fields' into enhancement/runtime_keyword_field", "committedDate": "2020-06-28T09:52:14Z", "type": "commit"}, {"oid": "e7fbaab08b486d8aea22df0c8dab8e0df11211ae", "url": "https://github.com/elastic/elasticsearch/commit/e7fbaab08b486d8aea22df0c8dab8e0df11211ae", "message": "iter", "committedDate": "2020-06-28T10:21:12Z", "type": "commit"}, {"oid": "0f156cb39361688b441e4f74e0562903676fcaad", "url": "https://github.com/elastic/elasticsearch/commit/0f156cb39361688b441e4f74e0562903676fcaad", "message": "Merge branch 'feature/runtime_fields' into enhancement/runtime_keyword_field", "committedDate": "2020-07-02T16:02:50Z", "type": "commit"}, {"oid": "6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "url": "https://github.com/elastic/elasticsearch/commit/6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "message": "make scripts work", "committedDate": "2020-07-02T16:11:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzOTA0NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449139045", "bodyText": "Ok with me.", "author": "nik9000", "createdAt": "2020-07-02T16:35:01Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractScriptFieldScript.java", "diffHunk": "@@ -21,23 +24,19 @@\n  */\n public abstract class AbstractScriptFieldScript {\n     private final Map<String, Object> params;\n-    private final LeafReaderContext ctx;\n-    private final SourceLookup source;\n-    private final LeafDocLookup fieldData;\n+    private final LeafSearchLookup leafSearchLookup;", "originalCommit": "6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzOTQ0MA==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449139440", "bodyText": "Yeah, they have them exposed in weird ways that I don't feel comfortable copying. I'd prefer to make a getter for them.", "author": "nik9000", "createdAt": "2020-07-02T16:35:42Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/AbstractScriptFieldScript.java", "diffHunk": "@@ -21,23 +24,19 @@\n  */\n public abstract class AbstractScriptFieldScript {\n     private final Map<String, Object> params;\n-    private final LeafReaderContext ctx;\n-    private final SourceLookup source;\n-    private final LeafDocLookup fieldData;\n+    private final LeafSearchLookup leafSearchLookup;\n \n-    public AbstractScriptFieldScript(Map<String, Object> params, SourceLookup source, DocLookup fieldData, LeafReaderContext ctx) {\n+    public AbstractScriptFieldScript(Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n+        this.leafSearchLookup = searchLookup.getLeafSearchLookup(ctx);\n+        //TODO how do other scripts get stored fields exposed? Through asMap? I don't see any getters for them.", "originalCommit": "6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzOTk5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449139991", "bodyText": "That is kind of nasty. Not a blocker for the PR, and maybe not a blocker ever, but a little sad!", "author": "nik9000", "createdAt": "2020-07-02T16:36:42Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/RuntimeFields.java", "diffHunk": "@@ -6,25 +6,54 @@\n \n package org.elasticsearch.xpack.runtimefields;\n \n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.NodeEnvironment;\n import org.elasticsearch.index.mapper.Mapper;\n import org.elasticsearch.plugins.MapperPlugin;\n import org.elasticsearch.plugins.Plugin;\n import org.elasticsearch.plugins.ScriptPlugin;\n+import org.elasticsearch.repositories.RepositoriesService;\n import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.watcher.ResourceWatcherService;\n+import org.elasticsearch.xpack.runtimefields.mapper.ScriptFieldMapper;\n \n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Supplier;\n \n public final class RuntimeFields extends Plugin implements MapperPlugin, ScriptPlugin {\n \n+    private final ScriptFieldMapper.TypeParser scriptTypeParser = new ScriptFieldMapper.TypeParser();\n+\n     @Override\n     public Map<String, Mapper.TypeParser> getMappers() {\n-        return Collections.emptyMap();\n+        return Collections.singletonMap(ScriptFieldMapper.CONTENT_TYPE, scriptTypeParser);\n     }\n \n     @Override\n     public List<ScriptContext<?>> getContexts() {\n         return List.of(DoubleScriptFieldScript.CONTEXT, LongScriptFieldScript.CONTEXT, StringScriptFieldScript.CONTEXT);\n     }\n+\n+    @Override\n+    public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,\n+                                               ResourceWatcherService resourceWatcherService, ScriptService scriptService,\n+                                               NamedXContentRegistry xContentRegistry, Environment environment,\n+                                               NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry,\n+                                               IndexNameExpressionResolver indexNameExpressionResolver,\n+                                               Supplier<RepositoriesService> repositoriesServiceSupplier) {\n+        //looks like createComponents gets called after getMappers\n+        this.scriptTypeParser.setScriptService(scriptService);", "originalCommit": "6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0Njg4Mg==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449146882", "bodyText": "yea this caught me by surprise. Though it was not hard to work around.", "author": "javanna", "createdAt": "2020-07-02T16:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzOTk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTAyNA==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449141024", "bodyText": "I think our keywords come out as strings though, right? When does this get called?", "author": "nik9000", "createdAt": "2020-07-02T16:38:35Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/RuntimeKeywordMappedFieldType.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.util.BytesRef;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.ToXContent.Params;\n+import org.elasticsearch.index.fielddata.IndexFieldData;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.TextSearchInfo;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+import org.elasticsearch.xpack.runtimefields.fielddata.ScriptBinaryFieldData;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public final class RuntimeKeywordMappedFieldType extends MappedFieldType {\n+\n+    private final Script script;\n+    private final StringScriptFieldScript.Factory scriptFactory;\n+\n+    RuntimeKeywordMappedFieldType(String name, Script script, StringScriptFieldScript.Factory scriptFactory, Map<String, String> meta) {\n+        super(name, false, false, TextSearchInfo.NONE, meta);\n+        this.script = script;\n+        this.scriptFactory = scriptFactory;\n+    }\n+\n+    RuntimeKeywordMappedFieldType(RuntimeKeywordMappedFieldType ref) {\n+        super(ref);\n+        this.script = ref.script;\n+        this.scriptFactory = ref.scriptFactory;\n+    }\n+\n+    @Override\n+    public MappedFieldType clone() {\n+        return new RuntimeKeywordMappedFieldType(this);\n+    }\n+\n+    @Override\n+    public Object valueForDisplay(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        // keywords are internally stored as utf8 bytes\n+        BytesRef binaryValue = (BytesRef) value;", "originalCommit": "6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NzA3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449147079", "bodyText": "no idea, this is copied from the keyword field....", "author": "javanna", "createdAt": "2020-07-02T16:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTg1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/58939#discussion_r449141855", "bodyText": "This'll get called if the source contains the field. I wonder if we should do anything about that? Like, not now, but maybe sometime? I dunno.", "author": "nik9000", "createdAt": "2020-07-02T16:40:06Z", "path": "x-pack/plugin/runtime-fields/src/main/java/org/elasticsearch/xpack/runtimefields/mapper/ScriptFieldMapper.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.runtimefields.mapper;\n+\n+import org.apache.lucene.document.FieldType;\n+import org.apache.lucene.util.SetOnce;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+import org.elasticsearch.index.mapper.BooleanFieldMapper;\n+import org.elasticsearch.index.mapper.FieldMapper;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.mapper.Mapper;\n+import org.elasticsearch.index.mapper.MapperParsingException;\n+import org.elasticsearch.index.mapper.ParseContext;\n+import org.elasticsearch.script.Script;\n+import org.elasticsearch.script.ScriptService;\n+import org.elasticsearch.xpack.runtimefields.StringScriptFieldScript;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class ScriptFieldMapper extends FieldMapper {\n+\n+    public static final String CONTENT_TYPE = \"script\";\n+\n+    private static final FieldType FIELD_TYPE = new FieldType();\n+\n+    ScriptFieldMapper(String simpleName, MappedFieldType mappedFieldType, MultiFields multiFields, CopyTo copyTo) {\n+        super(simpleName, FIELD_TYPE, mappedFieldType, multiFields, copyTo);\n+    }\n+\n+    @Override\n+    protected void parseCreateField(ParseContext context) {\n+        //there is no field!", "originalCommit": "6166bc16cf28aa04f23e31eb88f0219b2c6ae0d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "939e3f7fd7d9187ba0fc6c7f95b7209216f978ff", "url": "https://github.com/elastic/elasticsearch/commit/939e3f7fd7d9187ba0fc6c7f95b7209216f978ff", "message": "spotless etc", "committedDate": "2020-07-02T16:51:58Z", "type": "commit"}]}