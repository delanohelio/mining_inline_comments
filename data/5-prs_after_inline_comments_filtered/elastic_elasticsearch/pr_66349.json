{"pr_number": 66349, "pr_title": "[ML] Add hyperparameter model metadata", "pr_createdAt": "2020-12-15T14:26:23Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/66349", "timeline": [{"oid": "d575513bc2796a206171978b6563eaefb611f655", "url": "https://github.com/elastic/elasticsearch/commit/d575513bc2796a206171978b6563eaefb611f655", "message": "init commit", "committedDate": "2020-12-14T16:35:35Z", "type": "commit"}, {"oid": "e244d6678af78375620bc17e02200e158c7207d6", "url": "https://github.com/elastic/elasticsearch/commit/e244d6678af78375620bc17e02200e158c7207d6", "message": "continue adjusting tests", "committedDate": "2020-12-15T14:01:49Z", "type": "commit"}, {"oid": "f6236fb4d36731faa46032be80b2e3e9997dd93b", "url": "https://github.com/elastic/elasticsearch/commit/f6236fb4d36731faa46032be80b2e3e9997dd93b", "message": "fix ChunkedTrainedModelPersisterIT.java", "committedDate": "2020-12-15T16:02:06Z", "type": "commit"}, {"oid": "48a36459f29c0dbd0a78915fe8036c2fddb977ba", "url": "https://github.com/elastic/elasticsearch/commit/48a36459f29c0dbd0a78915fe8036c2fddb977ba", "message": "formatting", "committedDate": "2020-12-16T15:13:31Z", "type": "commit"}, {"oid": "d28b824181aa4c13f8081021f7964c643e30f480", "url": "https://github.com/elastic/elasticsearch/commit/d28b824181aa4c13f8081021f7964c643e30f480", "message": "rename hyperparameters, add supplied", "committedDate": "2020-12-16T15:59:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNTEyMA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544435120", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    parser.declareObjectArray(ConstructingObjectParser.constructorArg(),\n          \n          \n            \n                    parser.declareObjectArray(ConstructingObjectParser.optionalConstructorArg(),\n          \n      \n    \n    \n  \n\nThis should always be optional as older models could exist in the index that don't have this field.", "author": "benwtrent", "createdAt": "2020-12-16T16:21:42Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadata.java", "diffHunk": "@@ -38,14 +39,18 @@\n     private static ConstructingObjectParser<TrainedModelMetadata, Void> createParser(boolean ignoreUnknownFields) {\n         ConstructingObjectParser<TrainedModelMetadata, Void> parser = new ConstructingObjectParser<>(NAME,\n             ignoreUnknownFields,\n-            a -> new TrainedModelMetadata((String)a[0], (List<TotalFeatureImportance>)a[1], (FeatureImportanceBaseline)a[2]));\n+            a -> new TrainedModelMetadata((String)a[0], (List<TotalFeatureImportance>)a[1], (FeatureImportanceBaseline)a[2], \n+                                          (List<Hyperparameters>)a[3]));\n         parser.declareString(ConstructingObjectParser.constructorArg(), MODEL_ID);\n         parser.declareObjectArray(ConstructingObjectParser.constructorArg(),\n             ignoreUnknownFields ? TotalFeatureImportance.LENIENT_PARSER : TotalFeatureImportance.STRICT_PARSER,\n             TOTAL_FEATURE_IMPORTANCE);\n         parser.declareObject(ConstructingObjectParser.optionalConstructorArg(),\n             ignoreUnknownFields ? FeatureImportanceBaseline.LENIENT_PARSER : FeatureImportanceBaseline.STRICT_PARSER,\n             FEATURE_IMPORTANCE_BASELINE);\n+        parser.declareObjectArray(ConstructingObjectParser.constructorArg(),", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4ODI3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545788278", "bodyText": "Fixed", "author": "valeriy42", "createdAt": "2020-12-18T12:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNTEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNTU5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544435596", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.hyperparameters = Collections.unmodifiableList(hyperparameters);\n          \n          \n            \n                    this.hyperparameters = hyperparameters == null ? Collections.emptyList() : Collections.unmodifiableList(hyperparameters);", "author": "benwtrent", "createdAt": "2020-12-16T16:22:16Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadata.java", "diffHunk": "@@ -63,20 +68,25 @@ public static String modelId(String docId) {\n \n     private final List<TotalFeatureImportance> totalFeatureImportances;\n     private final FeatureImportanceBaseline featureImportanceBaselines;\n+    private final List<Hyperparameters> hyperparameters;\n     private final String modelId;\n \n     public TrainedModelMetadata(StreamInput in) throws IOException {\n         this.modelId = in.readString();\n         this.totalFeatureImportances = in.readList(TotalFeatureImportance::new);\n         this.featureImportanceBaselines = in.readOptionalWriteable(FeatureImportanceBaseline::new);\n+        this.hyperparameters = in.readList(Hyperparameters::new);\n     }\n \n     public TrainedModelMetadata(String modelId,\n                                 List<TotalFeatureImportance> totalFeatureImportances,\n-                                FeatureImportanceBaseline featureImportanceBaselines) {\n+                                FeatureImportanceBaseline featureImportanceBaselines,\n+                                List<Hyperparameters> hyperparameters) {\n         this.modelId = ExceptionsHelper.requireNonNull(modelId, MODEL_ID);\n         this.totalFeatureImportances = Collections.unmodifiableList(totalFeatureImportances);\n         this.featureImportanceBaselines = featureImportanceBaselines;\n+        this.hyperparameters = Collections.unmodifiableList(hyperparameters);\n+", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5MDc0NA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545790744", "bodyText": "fixed", "author": "valeriy42", "createdAt": "2020-12-18T12:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNTU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNjY3OA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544436678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Stream.generate(HyperparametersTests::randomInstance).limit(randomIntBetween(1, 10)).collect(Collectors.toList()));\n          \n          \n            \n                        randomBoolean() ? null :  Stream.generate(HyperparametersTests::randomInstance).limit(randomIntBetween(1, 10)).collect(Collectors.toList()));", "author": "benwtrent", "createdAt": "2020-12-16T16:23:42Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadataTests.java", "diffHunk": "@@ -24,7 +24,8 @@ public static TrainedModelMetadata randomInstance() {\n         return new TrainedModelMetadata(\n             randomAlphaOfLength(10),\n             Stream.generate(TotalFeatureImportanceTests::randomInstance).limit(randomIntBetween(1, 10)).collect(Collectors.toList()),\n-            randomBoolean() ? null : FeatureImportanceBaselineTests.randomInstance());\n+            randomBoolean() ? null : FeatureImportanceBaselineTests.randomInstance(), \n+            Stream.generate(HyperparametersTests::randomInstance).limit(randomIntBetween(1, 10)).collect(Collectors.toList()));", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4ODY4NA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545788684", "bodyText": "fixed", "author": "valeriy42", "createdAt": "2020-12-18T12:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNjY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNzA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544437070", "bodyText": "Suggested change", "author": "benwtrent", "createdAt": "2020-12-16T16:24:09Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/results/ModelMetadata.java", "diffHunk": "@@ -24,23 +25,29 @@\n \n     public static final ParseField TOTAL_FEATURE_IMPORTANCE = new ParseField(\"total_feature_importance\");\n     public static final ParseField FEATURE_IMPORTANCE_BASELINE = new ParseField(\"feature_importance_baseline\");\n+    public static final ParseField HYPERPARAMETERS = new ParseField(\"hyperparameters\");\n \n     @SuppressWarnings(\"unchecked\")\n     public static final ConstructingObjectParser<ModelMetadata, Void> PARSER = new ConstructingObjectParser<>(\n         \"trained_model_metadata\",\n-        a -> new ModelMetadata((List<TotalFeatureImportance>) a[0], (FeatureImportanceBaseline) a[1]));\n+        a -> new ModelMetadata((List<TotalFeatureImportance>) a[0], (FeatureImportanceBaseline) a[1], (List<Hyperparameters>) a[2]));\n \n     static {\n         PARSER.declareObjectArray(constructorArg(), TotalFeatureImportance.STRICT_PARSER, TOTAL_FEATURE_IMPORTANCE);\n         PARSER.declareObject(optionalConstructorArg(), FeatureImportanceBaseline.STRICT_PARSER, FEATURE_IMPORTANCE_BASELINE);\n+        PARSER.declareObjectArray(constructorArg(), Hyperparameters.STRICT_PARSER, HYPERPARAMETERS);\n+", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNzYzMA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544437630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ModelMetadata(List<TotalFeatureImportance> featureImportances, FeatureImportanceBaseline featureImportanceBaseline, \n          \n          \n            \n                List<Hyperparameters> hyperparameters) {\n          \n          \n            \n                public ModelMetadata(List<TotalFeatureImportance> featureImportances, \n          \n          \n            \n                    FeatureImportanceBaseline featureImportanceBaseline, \n          \n          \n            \n                    List<Hyperparameters> hyperparameters) {", "author": "benwtrent", "createdAt": "2020-12-16T16:24:45Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/results/ModelMetadata.java", "diffHunk": "@@ -24,23 +25,29 @@\n \n     public static final ParseField TOTAL_FEATURE_IMPORTANCE = new ParseField(\"total_feature_importance\");\n     public static final ParseField FEATURE_IMPORTANCE_BASELINE = new ParseField(\"feature_importance_baseline\");\n+    public static final ParseField HYPERPARAMETERS = new ParseField(\"hyperparameters\");\n \n     @SuppressWarnings(\"unchecked\")\n     public static final ConstructingObjectParser<ModelMetadata, Void> PARSER = new ConstructingObjectParser<>(\n         \"trained_model_metadata\",\n-        a -> new ModelMetadata((List<TotalFeatureImportance>) a[0], (FeatureImportanceBaseline) a[1]));\n+        a -> new ModelMetadata((List<TotalFeatureImportance>) a[0], (FeatureImportanceBaseline) a[1], (List<Hyperparameters>) a[2]));\n \n     static {\n         PARSER.declareObjectArray(constructorArg(), TotalFeatureImportance.STRICT_PARSER, TOTAL_FEATURE_IMPORTANCE);\n         PARSER.declareObject(optionalConstructorArg(), FeatureImportanceBaseline.STRICT_PARSER, FEATURE_IMPORTANCE_BASELINE);\n+        PARSER.declareObjectArray(constructorArg(), Hyperparameters.STRICT_PARSER, HYPERPARAMETERS);\n+\n     }\n \n     private final List<TotalFeatureImportance> featureImportances;\n     private final FeatureImportanceBaseline featureImportanceBaseline;\n+    private final List<Hyperparameters> hyperparameters;\n \n-    public ModelMetadata(List<TotalFeatureImportance> featureImportances, FeatureImportanceBaseline featureImportanceBaseline) {\n+    public ModelMetadata(List<TotalFeatureImportance> featureImportances, FeatureImportanceBaseline featureImportanceBaseline, \n+    List<Hyperparameters> hyperparameters) {", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5MDEyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545790121", "bodyText": "I don't see the change here. Is this a formatting issue?", "author": "valeriy42", "createdAt": "2020-12-18T12:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNzYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzODE5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544438192", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PARSER.declareObjectArray(constructorArg(), Hyperparameters.STRICT_PARSER, HYPERPARAMETERS);\n          \n          \n            \n                    PARSER.declareObjectArray(optionalConstructorArg(), Hyperparameters.STRICT_PARSER, HYPERPARAMETERS);\n          \n      \n    \n    \n  \n\nThis can be non-optional once the c++ side is done.", "author": "benwtrent", "createdAt": "2020-12-16T16:25:30Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/results/ModelMetadata.java", "diffHunk": "@@ -24,23 +25,29 @@\n \n     public static final ParseField TOTAL_FEATURE_IMPORTANCE = new ParseField(\"total_feature_importance\");\n     public static final ParseField FEATURE_IMPORTANCE_BASELINE = new ParseField(\"feature_importance_baseline\");\n+    public static final ParseField HYPERPARAMETERS = new ParseField(\"hyperparameters\");\n \n     @SuppressWarnings(\"unchecked\")\n     public static final ConstructingObjectParser<ModelMetadata, Void> PARSER = new ConstructingObjectParser<>(\n         \"trained_model_metadata\",\n-        a -> new ModelMetadata((List<TotalFeatureImportance>) a[0], (FeatureImportanceBaseline) a[1]));\n+        a -> new ModelMetadata((List<TotalFeatureImportance>) a[0], (FeatureImportanceBaseline) a[1], (List<Hyperparameters>) a[2]));\n \n     static {\n         PARSER.declareObjectArray(constructorArg(), TotalFeatureImportance.STRICT_PARSER, TOTAL_FEATURE_IMPORTANCE);\n         PARSER.declareObject(optionalConstructorArg(), FeatureImportanceBaseline.STRICT_PARSER, FEATURE_IMPORTANCE_BASELINE);\n+        PARSER.declareObjectArray(constructorArg(), Hyperparameters.STRICT_PARSER, HYPERPARAMETERS);", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4OTQ3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545789472", "bodyText": "Fixed", "author": "valeriy42", "createdAt": "2020-12-18T12:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzODE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzOTE0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r544439147", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    builder.field(HYPERPARAMETERS.getPreferredName(), hyperparameters);\n          \n          \n            \n                    if (hyperparameters != null) {\n          \n          \n            \n                        builder.field(HYPERPARAMETERS.getPreferredName(), hyperparameters);\n          \n          \n            \n                    }", "author": "benwtrent", "createdAt": "2020-12-16T16:26:39Z", "path": "x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/results/ModelMetadata.java", "diffHunk": "@@ -72,6 +84,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         if (featureImportanceBaseline != null) {\n             builder.field(FEATURE_IMPORTANCE_BASELINE.getPreferredName(), featureImportanceBaseline);\n         }\n+        builder.field(HYPERPARAMETERS.getPreferredName(), hyperparameters);", "originalCommit": "d28b824181aa4c13f8081021f7964c643e30f480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4OTg3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545789875", "bodyText": "fixed", "author": "valeriy42", "createdAt": "2020-12-18T12:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzOTE0Nw=="}], "type": "inlineReview"}, {"oid": "ff27fabe959c814a1374c5476b1d78c1df2afb44", "url": "https://github.com/elastic/elasticsearch/commit/ff27fabe959c814a1374c5476b1d78c1df2afb44", "message": "code review", "committedDate": "2020-12-18T12:09:24Z", "type": "commit"}, {"oid": "0c8e00bb164043e54a8fe0e68e9af1e8faaa10d9", "url": "https://github.com/elastic/elasticsearch/commit/0c8e00bb164043e54a8fe0e68e9af1e8faaa10d9", "message": "Update x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/results/ModelMetadata.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T12:12:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMjczMw==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545802733", "bodyText": "If the Doubles and the Boolean  are truly not nullable, they should be double and boolean (unboxed, not nullable).\nIf they are nullable, the parser needs to treat them as optional and the serialization needs to as well", "author": "benwtrent", "createdAt": "2020-12-18T12:34:12Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    private static final String NAME = \"hyperparameters\";\n+    public static final ParseField HYPERPARAMETER_NAME = new ParseField(\"name\");\n+    public static final ParseField VALUE = new ParseField(\"value\");\n+    public static final ParseField ABSOLUTE_IMPORTANCE = new ParseField(\"absolute_importance\");\n+    public static final ParseField RELATIVE_IMPORTANCE = new ParseField(\"relative_importance\");\n+    public static final ParseField SUPPLIED = new ParseField(\"supplied\");\n+\n+\n+    // These parsers follow the pattern that metadata is parsed leniently (to allow for enhancements), whilst config is parsed strictly\n+    public static final ConstructingObjectParser<Hyperparameters, Void> LENIENT_PARSER = createParser(true);\n+    public static final ConstructingObjectParser<Hyperparameters, Void> STRICT_PARSER = createParser(false);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(NAME,\n+            ignoreUnknownFields,\n+            a -> new Hyperparameters((String)a[0], (Double)a[1], (Double)a[2], (Double)a[3], (Boolean)a[4]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), HYPERPARAMETER_NAME);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), VALUE);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), ABSOLUTE_IMPORTANCE);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), RELATIVE_IMPORTANCE);\n+        parser.declareBoolean(ConstructingObjectParser.constructorArg(), SUPPLIED);\n+        return parser;\n+    }\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.parse(parser, null) : STRICT_PARSER.parse(parser, null);\n+    }\n+\n+    public final String hyperparameterName;\n+    public final Double value;\n+    public final Double absoluteImportance;\n+    public final Double relativeImportance;\n+    public final Boolean supplied;\n+\n+    public Hyperparameters(StreamInput in) throws IOException {\n+        this.hyperparameterName = in.readString();\n+        this.value = in.readDouble();\n+        this.absoluteImportance = in.readDouble();\n+        this.relativeImportance = in.readDouble();\n+        this.supplied = in.readBoolean();\n+    }\n+\n+    Hyperparameters(String hyperparameterName, Double value, Double absoluteImportance, Double relativeImportance, Boolean supplied) {\n+        this.hyperparameterName = hyperparameterName;\n+        this.value = value;\n+        this.absoluteImportance = absoluteImportance;\n+        this.relativeImportance = relativeImportance;\n+        this.supplied = supplied;", "originalCommit": "0c8e00bb164043e54a8fe0e68e9af1e8faaa10d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMzAyMg==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545803022", "bodyText": "Suggested change", "author": "benwtrent", "createdAt": "2020-12-18T12:34:39Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadata.java", "diffHunk": "@@ -95,26 +105,33 @@ public FeatureImportanceBaseline getFeatureImportanceBaselines() {\n         return featureImportanceBaselines;\n     }\n \n+    public List<Hyperparameters> getHyperparameters() {\n+        return hyperparameters;\n+    }\n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n         TrainedModelMetadata that = (TrainedModelMetadata) o;\n         return Objects.equals(totalFeatureImportances, that.totalFeatureImportances) &&\n             Objects.equals(featureImportanceBaselines, that.featureImportanceBaselines) &&\n+            Objects.equals(hyperparameters, that.hyperparameters) &&\n             Objects.equals(modelId, that.modelId);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(totalFeatureImportances, featureImportanceBaselines, modelId);\n+        return Objects.hash(totalFeatureImportances, featureImportanceBaselines, hyperparameters, modelId);\n     }\n \n     @Override\n     public void writeTo(StreamOutput out) throws IOException {\n         out.writeString(modelId);\n         out.writeList(totalFeatureImportances);\n         out.writeOptionalWriteable(featureImportanceBaselines);\n+        out.writeList(hyperparameters);\n+", "originalCommit": "0c8e00bb164043e54a8fe0e68e9af1e8faaa10d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMzE0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545803141", "bodyText": "Suggested change", "author": "benwtrent", "createdAt": "2020-12-18T12:34:51Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadata.java", "diffHunk": "@@ -63,20 +68,25 @@ public static String modelId(String docId) {\n \n     private final List<TotalFeatureImportance> totalFeatureImportances;\n     private final FeatureImportanceBaseline featureImportanceBaselines;\n+    private final List<Hyperparameters> hyperparameters;\n     private final String modelId;\n \n     public TrainedModelMetadata(StreamInput in) throws IOException {\n         this.modelId = in.readString();\n         this.totalFeatureImportances = in.readList(TotalFeatureImportance::new);\n         this.featureImportanceBaselines = in.readOptionalWriteable(FeatureImportanceBaseline::new);\n+        this.hyperparameters = in.readList(Hyperparameters::new);\n     }\n \n     public TrainedModelMetadata(String modelId,\n                                 List<TotalFeatureImportance> totalFeatureImportances,\n-                                FeatureImportanceBaseline featureImportanceBaselines) {\n+                                FeatureImportanceBaseline featureImportanceBaselines,\n+                                List<Hyperparameters> hyperparameters) {\n         this.modelId = ExceptionsHelper.requireNonNull(modelId, MODEL_ID);\n         this.totalFeatureImportances = Collections.unmodifiableList(totalFeatureImportances);\n         this.featureImportanceBaselines = featureImportanceBaselines;\n+        this.hyperparameters =  hyperparameters == null ? Collections.emptyList() : Collections.unmodifiableList(hyperparameters);\n+", "originalCommit": "0c8e00bb164043e54a8fe0e68e9af1e8faaa10d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f73ec7f248b3f61f9587610bcdf456d307c07dd5", "url": "https://github.com/elastic/elasticsearch/commit/f73ec7f248b3f61f9587610bcdf456d307c07dd5", "message": "Update x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadata.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T12:56:39Z", "type": "commit"}, {"oid": "f301ac7e4e8cceaf69e4d3b064f40bcee1688bf8", "url": "https://github.com/elastic/elasticsearch/commit/f301ac7e4e8cceaf69e4d3b064f40bcee1688bf8", "message": "Update x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/TrainedModelMetadata.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T12:56:46Z", "type": "commit"}, {"oid": "5515700be78612d7291a3c9ad3ae33570a7b3cc7", "url": "https://github.com/elastic/elasticsearch/commit/5515700be78612d7291a3c9ad3ae33570a7b3cc7", "message": "optional fields", "committedDate": "2020-12-18T13:01:09Z", "type": "commit"}, {"oid": "b4de908dfca7183433b3170f111f27d96e93aef6", "url": "https://github.com/elastic/elasticsearch/commit/b4de908dfca7183433b3170f111f27d96e93aef6", "message": "Merge branch 'hyperparameter-model-metadata' of https://github.com/valeriy42/elasticsearch into hyperparameter-model-metadata", "committedDate": "2020-12-18T13:01:20Z", "type": "commit"}, {"oid": "33b8af76e6a3ff1801071c8be9672acbef082639", "url": "https://github.com/elastic/elasticsearch/commit/33b8af76e6a3ff1801071c8be9672acbef082639", "message": "handle optional importance fields", "committedDate": "2020-12-18T13:13:45Z", "type": "commit"}, {"oid": "f14592beccb85553185e577390afb59b4fb78ea5", "url": "https://github.com/elastic/elasticsearch/commit/f14592beccb85553185e577390afb59b4fb78ea5", "message": "formatting", "committedDate": "2020-12-18T13:24:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNDkxMA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545824910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.supplied == false) {\n          \n          \n            \n                        this.absoluteImportance = in.readDouble();\n          \n          \n            \n                        this.relativeImportance = in.readDouble();\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        this.absoluteImportance = null;\n          \n          \n            \n                        this.relativeImportance = null;\n          \n          \n            \n                    }\n          \n          \n            \n                    this.absoluteImportance = in.readOptionalDouble();\n          \n          \n            \n                    this.relativeImportance = in.readOptionalDouble();", "author": "benwtrent", "createdAt": "2020-12-18T13:17:49Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    private static final String NAME = \"hyperparameters\";\n+    public static final ParseField HYPERPARAMETER_NAME = new ParseField(\"name\");\n+    public static final ParseField VALUE = new ParseField(\"value\");\n+    public static final ParseField ABSOLUTE_IMPORTANCE = new ParseField(\"absolute_importance\");\n+    public static final ParseField RELATIVE_IMPORTANCE = new ParseField(\"relative_importance\");\n+    public static final ParseField SUPPLIED = new ParseField(\"supplied\");\n+\n+\n+    // These parsers follow the pattern that metadata is parsed leniently (to allow for enhancements), whilst config is parsed strictly\n+    public static final ConstructingObjectParser<Hyperparameters, Void> LENIENT_PARSER = createParser(true);\n+    public static final ConstructingObjectParser<Hyperparameters, Void> STRICT_PARSER = createParser(false);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(NAME,\n+            ignoreUnknownFields,\n+            a -> new Hyperparameters((String)a[0], (Double)a[1], (Double)a[2], (Double)a[3], (Boolean)a[4]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), HYPERPARAMETER_NAME);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), VALUE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), ABSOLUTE_IMPORTANCE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), RELATIVE_IMPORTANCE);\n+        parser.declareBoolean(ConstructingObjectParser.constructorArg(), SUPPLIED);\n+        return parser;\n+    }\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.parse(parser, null) : STRICT_PARSER.parse(parser, null);\n+    }\n+\n+    public final String hyperparameterName;\n+    public final double value;\n+    public final Double absoluteImportance;\n+    public final Double relativeImportance;\n+    public final boolean supplied;\n+\n+    public Hyperparameters(StreamInput in) throws IOException {\n+        this.hyperparameterName = in.readString();\n+        this.value = in.readDouble();\n+        this.supplied = in.readBoolean();\n+        if (this.supplied == false) {\n+            this.absoluteImportance = in.readDouble();\n+            this.relativeImportance = in.readDouble();\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }", "originalCommit": "33b8af76e6a3ff1801071c8be9672acbef082639", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNTQ3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545825476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.supplied == false) {\n          \n          \n            \n                        this.absoluteImportance = ExceptionsHelper.requireNonNull(absoluteImportance, ABSOLUTE_IMPORTANCE.getPreferredName());\n          \n          \n            \n                        this.relativeImportance = ExceptionsHelper.requireNonNull(relativeImportance, RELATIVE_IMPORTANCE.getPreferredName());\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        this.absoluteImportance = null;\n          \n          \n            \n                        this.relativeImportance = null;\n          \n          \n            \n                    }\n          \n          \n            \n                    this.absoluteImportance = absoluteImportance;\n          \n          \n            \n                    this.relativeImportance = relativeImportance;\n          \n          \n            \n                    if (this.supplied == false) {\n          \n          \n            \n                        ExceptionsHelper.requireNonNull(absoluteImportance, ABSOLUTE_IMPORTANCE.getPreferredName());\n          \n          \n            \n                        ExceptionsHelper.requireNonNull(relativeImportance, RELATIVE_IMPORTANCE.getPreferredName());\n          \n          \n            \n                    }", "author": "benwtrent", "createdAt": "2020-12-18T13:18:55Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    private static final String NAME = \"hyperparameters\";\n+    public static final ParseField HYPERPARAMETER_NAME = new ParseField(\"name\");\n+    public static final ParseField VALUE = new ParseField(\"value\");\n+    public static final ParseField ABSOLUTE_IMPORTANCE = new ParseField(\"absolute_importance\");\n+    public static final ParseField RELATIVE_IMPORTANCE = new ParseField(\"relative_importance\");\n+    public static final ParseField SUPPLIED = new ParseField(\"supplied\");\n+\n+\n+    // These parsers follow the pattern that metadata is parsed leniently (to allow for enhancements), whilst config is parsed strictly\n+    public static final ConstructingObjectParser<Hyperparameters, Void> LENIENT_PARSER = createParser(true);\n+    public static final ConstructingObjectParser<Hyperparameters, Void> STRICT_PARSER = createParser(false);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(NAME,\n+            ignoreUnknownFields,\n+            a -> new Hyperparameters((String)a[0], (Double)a[1], (Double)a[2], (Double)a[3], (Boolean)a[4]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), HYPERPARAMETER_NAME);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), VALUE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), ABSOLUTE_IMPORTANCE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), RELATIVE_IMPORTANCE);\n+        parser.declareBoolean(ConstructingObjectParser.constructorArg(), SUPPLIED);\n+        return parser;\n+    }\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.parse(parser, null) : STRICT_PARSER.parse(parser, null);\n+    }\n+\n+    public final String hyperparameterName;\n+    public final double value;\n+    public final Double absoluteImportance;\n+    public final Double relativeImportance;\n+    public final boolean supplied;\n+\n+    public Hyperparameters(StreamInput in) throws IOException {\n+        this.hyperparameterName = in.readString();\n+        this.value = in.readDouble();\n+        this.supplied = in.readBoolean();\n+        if (this.supplied == false) {\n+            this.absoluteImportance = in.readDouble();\n+            this.relativeImportance = in.readDouble();\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }\n+    }\n+\n+    Hyperparameters(String hyperparameterName, double value, Double absoluteImportance, Double relativeImportance, boolean supplied) {\n+        this.hyperparameterName = hyperparameterName;\n+        this.value = value;\n+        this.supplied = supplied;\n+        if (this.supplied == false) {\n+            this.absoluteImportance = ExceptionsHelper.requireNonNull(absoluteImportance, ABSOLUTE_IMPORTANCE.getPreferredName());\n+            this.relativeImportance = ExceptionsHelper.requireNonNull(relativeImportance, RELATIVE_IMPORTANCE.getPreferredName());\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }", "originalCommit": "33b8af76e6a3ff1801071c8be9672acbef082639", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNTcyOA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545825728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (supplied == false) {\n          \n          \n            \n                        out.writeOptionalDouble(absoluteImportance);\n          \n          \n            \n                        out.writeOptionalDouble(relativeImportance);\n          \n          \n            \n                    }\n          \n          \n            \n                    out.writeOptionalDouble(absoluteImportance);\n          \n          \n            \n                    out.writeOptionalDouble(relativeImportance);", "author": "benwtrent", "createdAt": "2020-12-18T13:19:22Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    private static final String NAME = \"hyperparameters\";\n+    public static final ParseField HYPERPARAMETER_NAME = new ParseField(\"name\");\n+    public static final ParseField VALUE = new ParseField(\"value\");\n+    public static final ParseField ABSOLUTE_IMPORTANCE = new ParseField(\"absolute_importance\");\n+    public static final ParseField RELATIVE_IMPORTANCE = new ParseField(\"relative_importance\");\n+    public static final ParseField SUPPLIED = new ParseField(\"supplied\");\n+\n+\n+    // These parsers follow the pattern that metadata is parsed leniently (to allow for enhancements), whilst config is parsed strictly\n+    public static final ConstructingObjectParser<Hyperparameters, Void> LENIENT_PARSER = createParser(true);\n+    public static final ConstructingObjectParser<Hyperparameters, Void> STRICT_PARSER = createParser(false);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(NAME,\n+            ignoreUnknownFields,\n+            a -> new Hyperparameters((String)a[0], (Double)a[1], (Double)a[2], (Double)a[3], (Boolean)a[4]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), HYPERPARAMETER_NAME);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), VALUE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), ABSOLUTE_IMPORTANCE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), RELATIVE_IMPORTANCE);\n+        parser.declareBoolean(ConstructingObjectParser.constructorArg(), SUPPLIED);\n+        return parser;\n+    }\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.parse(parser, null) : STRICT_PARSER.parse(parser, null);\n+    }\n+\n+    public final String hyperparameterName;\n+    public final double value;\n+    public final Double absoluteImportance;\n+    public final Double relativeImportance;\n+    public final boolean supplied;\n+\n+    public Hyperparameters(StreamInput in) throws IOException {\n+        this.hyperparameterName = in.readString();\n+        this.value = in.readDouble();\n+        this.supplied = in.readBoolean();\n+        if (this.supplied == false) {\n+            this.absoluteImportance = in.readDouble();\n+            this.relativeImportance = in.readDouble();\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }\n+    }\n+\n+    Hyperparameters(String hyperparameterName, double value, Double absoluteImportance, Double relativeImportance, boolean supplied) {\n+        this.hyperparameterName = hyperparameterName;\n+        this.value = value;\n+        this.supplied = supplied;\n+        if (this.supplied == false) {\n+            this.absoluteImportance = ExceptionsHelper.requireNonNull(absoluteImportance, ABSOLUTE_IMPORTANCE.getPreferredName());\n+            this.relativeImportance = ExceptionsHelper.requireNonNull(relativeImportance, RELATIVE_IMPORTANCE.getPreferredName());\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(hyperparameterName);\n+        out.writeDouble(value);\n+        out.writeBoolean(supplied);\n+        if (supplied == false) {\n+            out.writeOptionalDouble(absoluteImportance);\n+            out.writeOptionalDouble(relativeImportance);\n+        }", "originalCommit": "33b8af76e6a3ff1801071c8be9672acbef082639", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNjAzMA==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545826030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (supplied == false) {\n          \n          \n            \n                        if (absoluteImportance != null) {\n          \n          \n            \n                            map.put(ABSOLUTE_IMPORTANCE.getPreferredName(), absoluteImportance);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (relativeImportance != null) {\n          \n          \n            \n                            map.put(RELATIVE_IMPORTANCE.getPreferredName(), relativeImportance);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (absoluteImportance != null) {\n          \n          \n            \n                        map.put(ABSOLUTE_IMPORTANCE.getPreferredName(), absoluteImportance);\n          \n          \n            \n                    }\n          \n          \n            \n                    if (relativeImportance != null) {\n          \n          \n            \n                        map.put(RELATIVE_IMPORTANCE.getPreferredName(), relativeImportance);\n          \n          \n            \n                    }", "author": "benwtrent", "createdAt": "2020-12-18T13:20:01Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.common.ParseField;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class Hyperparameters implements ToXContentObject, Writeable {\n+\n+    private static final String NAME = \"hyperparameters\";\n+    public static final ParseField HYPERPARAMETER_NAME = new ParseField(\"name\");\n+    public static final ParseField VALUE = new ParseField(\"value\");\n+    public static final ParseField ABSOLUTE_IMPORTANCE = new ParseField(\"absolute_importance\");\n+    public static final ParseField RELATIVE_IMPORTANCE = new ParseField(\"relative_importance\");\n+    public static final ParseField SUPPLIED = new ParseField(\"supplied\");\n+\n+\n+    // These parsers follow the pattern that metadata is parsed leniently (to allow for enhancements), whilst config is parsed strictly\n+    public static final ConstructingObjectParser<Hyperparameters, Void> LENIENT_PARSER = createParser(true);\n+    public static final ConstructingObjectParser<Hyperparameters, Void> STRICT_PARSER = createParser(false);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static ConstructingObjectParser<Hyperparameters, Void> createParser(boolean ignoreUnknownFields) {\n+        ConstructingObjectParser<Hyperparameters, Void> parser = new ConstructingObjectParser<>(NAME,\n+            ignoreUnknownFields,\n+            a -> new Hyperparameters((String)a[0], (Double)a[1], (Double)a[2], (Double)a[3], (Boolean)a[4]));\n+        parser.declareString(ConstructingObjectParser.constructorArg(), HYPERPARAMETER_NAME);\n+        parser.declareDouble(ConstructingObjectParser.constructorArg(), VALUE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), ABSOLUTE_IMPORTANCE);\n+        parser.declareDouble(ConstructingObjectParser.optionalConstructorArg(), RELATIVE_IMPORTANCE);\n+        parser.declareBoolean(ConstructingObjectParser.constructorArg(), SUPPLIED);\n+        return parser;\n+    }\n+\n+    public static Hyperparameters fromXContent(XContentParser parser, boolean lenient) throws IOException {\n+        return lenient ? LENIENT_PARSER.parse(parser, null) : STRICT_PARSER.parse(parser, null);\n+    }\n+\n+    public final String hyperparameterName;\n+    public final double value;\n+    public final Double absoluteImportance;\n+    public final Double relativeImportance;\n+    public final boolean supplied;\n+\n+    public Hyperparameters(StreamInput in) throws IOException {\n+        this.hyperparameterName = in.readString();\n+        this.value = in.readDouble();\n+        this.supplied = in.readBoolean();\n+        if (this.supplied == false) {\n+            this.absoluteImportance = in.readDouble();\n+            this.relativeImportance = in.readDouble();\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }\n+    }\n+\n+    Hyperparameters(String hyperparameterName, double value, Double absoluteImportance, Double relativeImportance, boolean supplied) {\n+        this.hyperparameterName = hyperparameterName;\n+        this.value = value;\n+        this.supplied = supplied;\n+        if (this.supplied == false) {\n+            this.absoluteImportance = ExceptionsHelper.requireNonNull(absoluteImportance, ABSOLUTE_IMPORTANCE.getPreferredName());\n+            this.relativeImportance = ExceptionsHelper.requireNonNull(relativeImportance, RELATIVE_IMPORTANCE.getPreferredName());\n+        }\n+        else {\n+            this.absoluteImportance = null;\n+            this.relativeImportance = null;\n+        }\n+    }\n+\n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(hyperparameterName);\n+        out.writeDouble(value);\n+        out.writeBoolean(supplied);\n+        if (supplied == false) {\n+            out.writeOptionalDouble(absoluteImportance);\n+            out.writeOptionalDouble(relativeImportance);\n+        }\n+    }\n+\n+    @Override\n+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n+        return builder.map(asMap());\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Hyperparameters that = (Hyperparameters) o;\n+        return Objects.equals(that.hyperparameterName, hyperparameterName)\n+            && Objects.equals(value, that.value)\n+            && Objects.equals(absoluteImportance, that.absoluteImportance)\n+            && Objects.equals(relativeImportance, that.relativeImportance)\n+            && Objects.equals(supplied, that.supplied)\n+        ;\n+    }\n+\n+    public Map<String, Object> asMap() {\n+        Map<String, Object> map = new LinkedHashMap<>();\n+        map.put(HYPERPARAMETER_NAME.getPreferredName(), hyperparameterName);\n+        map.put(VALUE.getPreferredName(), value);\n+        if (supplied == false) {\n+            if (absoluteImportance != null) {\n+                map.put(ABSOLUTE_IMPORTANCE.getPreferredName(), absoluteImportance);\n+            }\n+            if (relativeImportance != null) {\n+                map.put(RELATIVE_IMPORTANCE.getPreferredName(), relativeImportance);\n+            }\n+        }", "originalCommit": "33b8af76e6a3ff1801071c8be9672acbef082639", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNjY0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545826641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Hyperparameters(\n          \n          \n            \n                    boolean supplied = randomBoolean();\n          \n          \n            \n                    return new Hyperparameters(", "author": "benwtrent", "createdAt": "2020-12-18T13:21:16Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/HyperparametersTests.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.AbstractBWCSerializationTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+\n+public class HyperparametersTests extends AbstractBWCSerializationTestCase<Hyperparameters> {\n+\n+    private boolean lenient;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Hyperparameters randomInstance() {\n+        return new Hyperparameters(", "originalCommit": "33b8af76e6a3ff1801071c8be9672acbef082639", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyODEyNQ==", "url": "https://github.com/elastic/elasticsearch/pull/66349#discussion_r545828125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        randomDoubleBetween(0.0, 100.0, true),\n          \n          \n            \n                        randomDoubleBetween(0.0, 1.0, true),\n          \n          \n            \n                        randomBoolean());\n          \n          \n            \n                        // If supplied, the importance values are possibly nullable\n          \n          \n            \n                        supplied && randomBoolean() ? null : randomDoubleBetween(0.0, 100.0, true),\n          \n          \n            \n                        supplied && randomBoolean() ? null : randomDoubleBetween(0.0, 1.0, true),\n          \n          \n            \n                        supplied);", "author": "benwtrent", "createdAt": "2020-12-18T13:24:13Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/HyperparametersTests.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.core.ml.inference.trainedmodel.metadata;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.xpack.core.ml.AbstractBWCSerializationTestCase;\n+import org.junit.Before;\n+\n+import java.io.IOException;\n+\n+\n+public class HyperparametersTests extends AbstractBWCSerializationTestCase<Hyperparameters> {\n+\n+    private boolean lenient;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Hyperparameters randomInstance() {\n+        return new Hyperparameters(\n+            randomAlphaOfLength(10),\n+            randomDoubleBetween(0.0, 1.0, true),\n+            randomDoubleBetween(0.0, 100.0, true),\n+            randomDoubleBetween(0.0, 1.0, true),\n+            randomBoolean());", "originalCommit": "33b8af76e6a3ff1801071c8be9672acbef082639", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0399e1082fbfdb6efebc487f78635da9f0447a65", "url": "https://github.com/elastic/elasticsearch/commit/0399e1082fbfdb6efebc487f78635da9f0447a65", "message": "Update x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T13:57:56Z", "type": "commit"}, {"oid": "8be327dbc0f3a01743064daf08b5c706ec18bb17", "url": "https://github.com/elastic/elasticsearch/commit/8be327dbc0f3a01743064daf08b5c706ec18bb17", "message": "Update x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T13:58:12Z", "type": "commit"}, {"oid": "be379370973a73d17f30d0d6ae69edf9f5174a32", "url": "https://github.com/elastic/elasticsearch/commit/be379370973a73d17f30d0d6ae69edf9f5174a32", "message": "Update x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T13:58:22Z", "type": "commit"}, {"oid": "f9e6ef2f82014ee9f017829ab5328f8aa2cbbb8e", "url": "https://github.com/elastic/elasticsearch/commit/f9e6ef2f82014ee9f017829ab5328f8aa2cbbb8e", "message": "Update x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/Hyperparameters.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T13:58:33Z", "type": "commit"}, {"oid": "62dab5930855dd595db61fc867a344a1978a8911", "url": "https://github.com/elastic/elasticsearch/commit/62dab5930855dd595db61fc867a344a1978a8911", "message": "Update x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/HyperparametersTests.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T13:58:53Z", "type": "commit"}, {"oid": "3a5182d17e2599f2fdfdb7cfc187236b69823913", "url": "https://github.com/elastic/elasticsearch/commit/3a5182d17e2599f2fdfdb7cfc187236b69823913", "message": "Update x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/metadata/HyperparametersTests.java\n\nCo-authored-by: Benjamin Trent <ben.w.trent@gmail.com>", "committedDate": "2020-12-18T13:59:08Z", "type": "commit"}, {"oid": "cbf0dc8f15fa77ca96eeed876f8388208c81d2dd", "url": "https://github.com/elastic/elasticsearch/commit/cbf0dc8f15fa77ca96eeed876f8388208c81d2dd", "message": "fix dangling comma", "committedDate": "2020-12-18T16:25:03Z", "type": "commit"}, {"oid": "43dbb5bd34bcaa93ab260ff5afb82a3105db9ad1", "url": "https://github.com/elastic/elasticsearch/commit/43dbb5bd34bcaa93ab260ff5afb82a3105db9ad1", "message": "Merge branch 'master' into hyperparameter-model-metadata", "committedDate": "2020-12-18T17:04:29Z", "type": "commit"}]}