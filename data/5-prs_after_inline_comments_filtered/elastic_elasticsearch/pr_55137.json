{"pr_number": 55137, "pr_title": "EQL: implement math functions: add, divide, module, multiply, subtract", "pr_createdAt": "2020-04-14T00:20:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/55137", "timeline": [{"oid": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597", "url": "https://github.com/elastic/elasticsearch/commit/5e43d9e178e97ce995bd9842b5c8aa0e6eacb597", "message": "EQL: implement math functions: add, divide, module, multiply, subtract", "committedDate": "2020-04-14T00:18:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407793794", "bodyText": "Do I need to wrap these into surrogatefunction derived class or can I use them directly?", "author": "aleksmaus", "createdAt": "2020-04-14T00:22:21Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "originalCommit": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyOTA0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407829041", "bodyText": "I didn't even realize you could do this, so this removes a lot of boilerplate.\nI think divide will be the only one where we'll want a custom function", "author": "rw-access", "createdAt": "2020-04-14T02:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNTYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r408105613", "bodyText": "yeah, was looking to write less boilerplate code, but wanted to double check with @costin if this appropriate in the grand scheme of things", "author": "aleksmaus", "createdAt": "2020-04-14T12:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MzE0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r409473142", "bodyText": "I would add them directly (that's what we do in SQL). SurrogateFunction is useful when a function results in a chain of other functions, otherwise it can be a subclass or like here, the base class itself.", "author": "costin", "createdAt": "2020-04-16T11:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5Mzc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407796039", "bodyText": "These are the functions that are currently implemented at QL level. The original div implementation didn't match EQL  implementation. EQL converts numbers into floats which will render different results.\n82/2 == 41\n83//2 == 41\n\nwhile\n82.0/2.0 == 41\n83.0/2.0 == 41.5\n\nDo we match the QL div function or do we introduce something else?", "author": "aleksmaus", "createdAt": "2020-04-14T00:29:57Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/predicate/operator/arithmetic/Arithmetics.java", "diffHunk": "@@ -97,10 +97,10 @@ public static Number div(Number l, Number r) {\n             return l.floatValue() / r.floatValue();\n         }\n         if (l instanceof Long || r instanceof Long) {\n-            return l.longValue() / r.longValue();\n+            return (double)l.longValue() / (double)r.longValue();\n         }\n \n-        return l.intValue() / r.intValue();\n+        return (double)l.intValue() / (double)r.intValue();", "originalCommit": "5e43d9e178e97ce995bd9842b5c8aa0e6eacb597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyODczMA==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r407828730", "bodyText": "We either need to change the EQL spec for what divide and / mean, or we create a new function and update org/elasticsearch/xpack/eql/plugin/eql_whitelist.txt to use our version of div", "author": "rw-access", "createdAt": "2020-04-14T02:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3NzYwMw==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r409477603", "bodyText": "The operator classes (DefaultBinaryArithmeticOperation) work with any kind of number as they are type aware using the Java/SQL semantics\nIf the numbers are integers, so will the result - if a higher precision is needed then at least one of the numbers has to be a float/double.\nYou can check ArithmeticOperation.dataType() method. Clearly +, - and * preserve the type but / might be an exception to this rule.\nMaking / always return a float means it can turn an entire expression into a float:  2 /1 +1 = 3.0 or maybe 2.9999...\nHence why currently it forces the users to think of types which works in SQL but not in EQL.\nAn alternative would be to have a dedicated DIV implementation for EQL.\nMaking this a team-discuss.", "author": "costin", "createdAt": "2020-04-16T11:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTgwMg==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r409939802", "bodyText": "Per our Slack conversation rolling back this change, allowing div implementation to deviate from the original EQL implementation.\nExpecting the type conversion to be explicit with ES EQL implementation for now.", "author": "aleksmaus", "createdAt": "2020-04-17T01:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NjAzOQ=="}], "type": "inlineReview"}, {"oid": "f02a483b9afb9429a34ab2778e9e4ffe90243a06", "url": "https://github.com/elastic/elasticsearch/commit/f02a483b9afb9429a34ab2778e9e4ffe90243a06", "message": "Address feeback on PR draft.", "committedDate": "2020-04-17T01:27:07Z", "type": "commit"}, {"oid": "2a7c7fc2b031382bc2bdba095325932f33672328", "url": "https://github.com/elastic/elasticsearch/commit/2a7c7fc2b031382bc2bdba095325932f33672328", "message": "Merge branch 'master' into feature/eql_math", "committedDate": "2020-04-17T01:39:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzM0MA==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412077340", "bodyText": "I think all of these math functions should be added to a different FunctionDefinition array to group different types of functions in separate arrays: String, Math....", "author": "astefan", "createdAt": "2020-04-21T10:46:57Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -32,15 +37,20 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Add.class, Add::new,\"add\"),", "originalCommit": "2a7c7fc2b031382bc2bdba095325932f33672328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MzM2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412963369", "bodyText": "Moved to a different FunctionDefinition array.", "author": "aleksmaus", "createdAt": "2020-04-22T13:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3ODA5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r412078096", "bodyText": "Whitespace between the Number casting and the class name, please.", "author": "astefan", "createdAt": "2020-04-21T10:48:15Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/scalar/whitelist/InternalQlScriptUtils.java", "diffHunk": "@@ -119,7 +120,27 @@ public static Boolean regex(String value, String pattern) {\n     //\n     // Math\n     //\n+    public static Number add(Number left, Number right) {\n+        return (Number)DefaultBinaryArithmeticOperation.ADD.apply(left, right);", "originalCommit": "2a7c7fc2b031382bc2bdba095325932f33672328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyNzkzMw==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413427933", "bodyText": "Added whitespaces.", "author": "aleksmaus", "createdAt": "2020-04-23T00:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3ODA5Ng=="}], "type": "inlineReview"}, {"oid": "01de50c3f8e002a2d312d21b873a0947f37a4567", "url": "https://github.com/elastic/elasticsearch/commit/01de50c3f8e002a2d312d21b873a0947f37a4567", "message": "Merge branch 'master' into feature/eql_math", "committedDate": "2020-04-22T12:58:56Z", "type": "commit"}, {"oid": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b", "url": "https://github.com/elastic/elasticsearch/commit/1f1a2533c169c923348cf004b82c6b85dcfb5e5b", "message": "Address code review feedback", "committedDate": "2020-04-23T03:42:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNTQwOA==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413625408", "bodyText": "Whitespace before the last parameter.", "author": "astefan", "createdAt": "2020-04-23T08:39:14Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -37,21 +37,24 @@ public EqlFunctionRegistry() {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n-                def(Add.class, Add::new,\"add\"),\n                 def(Between.class, Between::new, 2, \"between\"),\n                 def(CIDRMatch.class, CIDRMatch::new, \"cidrmatch\"),\n-                def(Div.class, Div::new,\"divide\"),\n                 def(EndsWith.class, EndsWith::new, \"endswith\"),\n                 def(IndexOf.class, IndexOf::new, \"indexof\"),\n                 def(Length.class, Length::new, \"length\"),\n-                def(Mod.class, Mod::new,\"modulo\"),\n-                def(Mul.class, Mul::new,\"multiply\"),\n                 def(StartsWith.class, StartsWith::new, \"startswith\"),\n                 def(ToString.class, ToString::new, \"string\"),\n                 def(StringContains.class, StringContains::new, \"stringcontains\"),\n                 def(Substring.class, Substring::new, \"substring\"),\n-                def(Sub.class, Sub::new,\"subtract\"),\n                 def(Wildcard.class, Wildcard::new, \"wildcard\"),\n+            },\n+        // Arithmetic\n+            new FunctionDefinition[] {\n+                    def(Add.class, Add::new,\"add\"),", "originalCommit": "1f1a2533c169c923348cf004b82c6b85dcfb5e5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4NjAwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/55137#discussion_r413786009", "bodyText": "fixed", "author": "aleksmaus", "createdAt": "2020-04-23T12:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNTQwOA=="}], "type": "inlineReview"}, {"oid": "c8d81227c6cbbf18de77b61049cdd63ce84ede26", "url": "https://github.com/elastic/elasticsearch/commit/c8d81227c6cbbf18de77b61049cdd63ce84ede26", "message": "Address the latest code review comments", "committedDate": "2020-04-23T13:00:17Z", "type": "commit"}, {"oid": "0f3c75ae342f778629fe0569ca45f838f26b9deb", "url": "https://github.com/elastic/elasticsearch/commit/0f3c75ae342f778629fe0569ca45f838f26b9deb", "message": "Update test based on the code review feedback", "committedDate": "2020-04-24T01:10:46Z", "type": "commit"}]}