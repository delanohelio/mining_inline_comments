{"pr_number": 59525, "pr_title": "Move data stream transport and rest action to xpack", "pr_createdAt": "2020-07-14T12:23:29Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59525", "timeline": [{"oid": "243df9258f5a4b45dd2002e0a304586396332610", "url": "https://github.com/elastic/elasticsearch/commit/243df9258f5a4b45dd2002e0a304586396332610", "message": "Move data stream transport and rest action to xpack\n\n* Actions are moved to xpack core.\n* Transport and rest actions are moved the data-streams module.\n* Removed data streams methods from Client interface.\n* Adjusted tests to use client.execute(...) instead of data stream specific methods.", "committedDate": "2020-07-14T12:21:43Z", "type": "commit"}, {"oid": "65d77f6df1d9bec4eadc742f9e13a04c2a0cf8c4", "url": "https://github.com/elastic/elasticsearch/commit/65d77f6df1d9bec4eadc742f9e13a04c2a0cf8c4", "message": "only attempt to delete all data streams if xpack is installed", "committedDate": "2020-07-14T12:50:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MjEyOA==", "url": "https://github.com/elastic/elasticsearch/pull/59525#discussion_r454362128", "bodyText": "I suggest moving this method to DataStreamTestHelper since it's used in a lot of tests in the server module.", "author": "danhermann", "createdAt": "2020-07-14T13:38:22Z", "path": "x-pack/plugin/data-streams/src/test/java/org/elasticsearch/xpack/datastreams/action/DeleteDataStreamTransportActionTests.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.datastreams.action;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.SnapshotsInProgress;\n+import org.elasticsearch.cluster.metadata.DataStream;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.cluster.metadata.MetadataDeleteIndexService;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.Index;\n+import org.elasticsearch.snapshots.Snapshot;\n+import org.elasticsearch.snapshots.SnapshotId;\n+import org.elasticsearch.snapshots.SnapshotInProgressException;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.core.action.DeleteDataStreamAction;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.elasticsearch.cluster.DataStreamTestHelper.createTimestampField;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DeleteDataStreamTransportActionTests extends ESTestCase {\n+\n+    public void testDeleteDataStream() {\n+        final String dataStreamName = \"my-data-stream\";\n+        final List<String> otherIndices = randomSubsetOf(List.of(\"foo\", \"bar\", \"baz\"));\n+\n+        ClusterState cs = getClusterStateWithDataStreams(List.of(new Tuple<>(dataStreamName, 2)), otherIndices);\n+        DeleteDataStreamAction.Request req = new DeleteDataStreamAction.Request(new String[] { dataStreamName });\n+        ClusterState newState = DeleteDataStreamTransportAction.removeDataStream(getMetadataDeleteIndexService(), cs, req);\n+        assertThat(newState.metadata().dataStreams().size(), equalTo(0));\n+        assertThat(newState.metadata().indices().size(), equalTo(otherIndices.size()));\n+        for (String indexName : otherIndices) {\n+            assertThat(newState.metadata().indices().get(indexName).getIndex().getName(), equalTo(indexName));\n+        }\n+    }\n+\n+    public void testDeleteMultipleDataStreams() {\n+        String[] dataStreamNames = { \"foo\", \"bar\", \"baz\", \"eggplant\" };\n+        ClusterState cs = getClusterStateWithDataStreams(\n+            List.of(\n+                new Tuple<>(dataStreamNames[0], randomIntBetween(1, 3)),\n+                new Tuple<>(dataStreamNames[1], randomIntBetween(1, 3)),\n+                new Tuple<>(dataStreamNames[2], randomIntBetween(1, 3)),\n+                new Tuple<>(dataStreamNames[3], randomIntBetween(1, 3))\n+            ),\n+            List.of()\n+        );\n+\n+        DeleteDataStreamAction.Request req = new DeleteDataStreamAction.Request(new String[] { \"ba*\", \"eggplant\" });\n+        ClusterState newState = DeleteDataStreamTransportAction.removeDataStream(getMetadataDeleteIndexService(), cs, req);\n+        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n+        DataStream remainingDataStream = newState.metadata().dataStreams().get(dataStreamNames[0]);\n+        assertNotNull(remainingDataStream);\n+        assertThat(newState.metadata().indices().size(), equalTo(remainingDataStream.getIndices().size()));\n+        for (Index i : remainingDataStream.getIndices()) {\n+            assertThat(newState.metadata().indices().get(i.getName()).getIndex(), equalTo(i));\n+        }\n+    }\n+\n+    public void testDeleteSnapshottingDataStream() {\n+        final String dataStreamName = \"my-data-stream1\";\n+        final String dataStreamName2 = \"my-data-stream2\";\n+        final List<String> otherIndices = randomSubsetOf(List.of(\"foo\", \"bar\", \"baz\"));\n+\n+        ClusterState cs = getClusterStateWithDataStreams(\n+            List.of(new Tuple<>(dataStreamName, 2), new Tuple<>(dataStreamName2, 2)),\n+            otherIndices\n+        );\n+        SnapshotsInProgress snapshotsInProgress = SnapshotsInProgress.of(\n+            List.of(createEntry(dataStreamName, \"repo1\", false), createEntry(dataStreamName2, \"repo2\", true))\n+        );\n+        ClusterState snapshotCs = ClusterState.builder(cs).putCustom(SnapshotsInProgress.TYPE, snapshotsInProgress).build();\n+\n+        DeleteDataStreamAction.Request req = new DeleteDataStreamAction.Request(new String[] { dataStreamName });\n+        SnapshotInProgressException e = expectThrows(\n+            SnapshotInProgressException.class,\n+            () -> DeleteDataStreamTransportAction.removeDataStream(getMetadataDeleteIndexService(), snapshotCs, req)\n+        );\n+\n+        assertThat(\n+            e.getMessage(),\n+            equalTo(\n+                \"Cannot delete data streams that are being snapshotted: [my-data-stream1]. Try again after \"\n+                    + \"snapshot finishes or cancel the currently running snapshot.\"\n+            )\n+        );\n+    }\n+\n+    private SnapshotsInProgress.Entry createEntry(String dataStreamName, String repo, boolean partial) {\n+        return new SnapshotsInProgress.Entry(\n+            new Snapshot(repo, new SnapshotId(\"\", \"\")),\n+            false,\n+            partial,\n+            SnapshotsInProgress.State.STARTED,\n+            Collections.emptyList(),\n+            List.of(dataStreamName),\n+            0,\n+            1,\n+            ImmutableOpenMap.of(),\n+            null,\n+            null,\n+            null\n+        );\n+    }\n+\n+    public void testDeleteNonexistentDataStream() {\n+        final String dataStreamName = \"my-data-stream\";\n+        String[] dataStreamNames = { \"foo\", \"bar\", \"baz\", \"eggplant\" };\n+        ClusterState cs = getClusterStateWithDataStreams(\n+            List.of(\n+                new Tuple<>(dataStreamNames[0], randomIntBetween(1, 3)),\n+                new Tuple<>(dataStreamNames[1], randomIntBetween(1, 3)),\n+                new Tuple<>(dataStreamNames[2], randomIntBetween(1, 3)),\n+                new Tuple<>(dataStreamNames[3], randomIntBetween(1, 3))\n+            ),\n+            List.of()\n+        );\n+        DeleteDataStreamAction.Request req = new DeleteDataStreamAction.Request(new String[] { dataStreamName });\n+        ClusterState newState = DeleteDataStreamTransportAction.removeDataStream(getMetadataDeleteIndexService(), cs, req);\n+        assertThat(newState.metadata().dataStreams().size(), equalTo(cs.metadata().dataStreams().size()));\n+        assertThat(\n+            newState.metadata().dataStreams().keySet(),\n+            containsInAnyOrder(cs.metadata().dataStreams().keySet().toArray(Strings.EMPTY_ARRAY))\n+        );\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static MetadataDeleteIndexService getMetadataDeleteIndexService() {\n+        MetadataDeleteIndexService s = mock(MetadataDeleteIndexService.class);\n+        when(s.deleteIndices(any(ClusterState.class), any(Set.class))).thenAnswer(mockInvocation -> {\n+            ClusterState currentState = (ClusterState) mockInvocation.getArguments()[0];\n+            Set<Index> indices = (Set<Index>) mockInvocation.getArguments()[1];\n+\n+            final Metadata.Builder b = Metadata.builder(currentState.metadata());\n+            for (Index index : indices) {\n+                b.remove(index.getName());\n+            }\n+\n+            return ClusterState.builder(currentState).metadata(b.build()).build();\n+        });\n+\n+        return s;\n+    }\n+\n+    /**\n+     * Constructs {@code ClusterState} with the specified data streams and indices.\n+     *\n+     * @param dataStreams The names of the data streams to create with their respective number of backing indices\n+     * @param indexNames  The names of indices to create that do not back any data streams\n+     */\n+    public static ClusterState getClusterStateWithDataStreams(List<Tuple<String, Integer>> dataStreams, List<String> indexNames) {", "originalCommit": "65d77f6df1d9bec4eadc742f9e13a04c2a0cf8c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2NTI0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/59525#discussion_r454365247", "bodyText": "Good point. This is why ci/1 failed. I've addressed this.", "author": "martijnvg", "createdAt": "2020-07-14T13:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MjEyOA=="}], "type": "inlineReview"}, {"oid": "78826fc1ad1b572432c445203f702f374895df81", "url": "https://github.com/elastic/elasticsearch/commit/78826fc1ad1b572432c445203f702f374895df81", "message": "moved test util method to DataStreamTestHelper", "committedDate": "2020-07-14T13:40:18Z", "type": "commit"}, {"oid": "fd61ba081c3ed826de79eee07908298d5187f786", "url": "https://github.com/elastic/elasticsearch/commit/fd61ba081c3ed826de79eee07908298d5187f786", "message": "fixed checkstyle violation", "committedDate": "2020-07-14T14:51:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzOTcyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/59525#discussion_r454439721", "bodyText": "This license needs to be removed", "author": "dakrone", "createdAt": "2020-07-14T15:23:10Z", "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/rest/RestDeleteDataStreamAction.java", "diffHunk": "@@ -1,3 +1,9 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n /*\n  * Licensed to Elasticsearch under one or more contributor\n  * license agreements. See the NOTICE file distributed with", "originalCommit": "78826fc1ad1b572432c445203f702f374895df81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1Njk4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/59525#discussion_r454456981", "bodyText": "whoops \ud83d\ude2c\ndual licensing was not the intent of this change :)", "author": "martijnvg", "createdAt": "2020-07-14T15:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzOTcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzOTg3Mw==", "url": "https://github.com/elastic/elasticsearch/pull/59525#discussion_r454439873", "bodyText": "This license needs to be removed", "author": "dakrone", "createdAt": "2020-07-14T15:23:22Z", "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/rest/RestCreateDataStreamAction.java", "diffHunk": "@@ -1,3 +1,9 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n /*\n  * Licensed to Elasticsearch under one or more contributor\n  * license agreements. See the NOTICE file distributed with", "originalCommit": "78826fc1ad1b572432c445203f702f374895df81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MDA4OA==", "url": "https://github.com/elastic/elasticsearch/pull/59525#discussion_r454440088", "bodyText": "Same here", "author": "dakrone", "createdAt": "2020-07-14T15:23:39Z", "path": "x-pack/plugin/data-streams/src/main/java/org/elasticsearch/xpack/datastreams/rest/RestGetDataStreamsAction.java", "diffHunk": "@@ -1,3 +1,9 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n /*\n  * Licensed to Elasticsearch under one or more contributor\n  * license agreements. See the NOTICE file distributed with", "originalCommit": "78826fc1ad1b572432c445203f702f374895df81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d445338fb4aa7d9f7c3786fa85caf381139aca6", "url": "https://github.com/elastic/elasticsearch/commit/7d445338fb4aa7d9f7c3786fa85caf381139aca6", "message": "Now that ds apis are in xpack and ESIntegTestCase\nno longers deletes all ds, do that in the MlNativeIntegTestCase\nclass for ml tests.", "committedDate": "2020-07-14T15:44:46Z", "type": "commit"}, {"oid": "a645f385b8e311c7bd14cd02cbb15bf35c7a5f37", "url": "https://github.com/elastic/elasticsearch/commit/a645f385b8e311c7bd14cd02cbb15bf35c7a5f37", "message": "removed forgotten apache2 license headers", "committedDate": "2020-07-14T15:53:04Z", "type": "commit"}, {"oid": "a8d24c0875fb345ec333ff0ea578fc4409571ce5", "url": "https://github.com/elastic/elasticsearch/commit/a8d24c0875fb345ec333ff0ea578fc4409571ce5", "message": "Merge remote-tracking branch 'es/master' into move_ds_action_ds_module", "committedDate": "2020-07-14T20:27:31Z", "type": "commit"}, {"oid": "3324fde8874523443a8e2570fc9ca966416bf280", "url": "https://github.com/elastic/elasticsearch/commit/3324fde8874523443a8e2570fc9ca966416bf280", "message": "fix issues after merging in master", "committedDate": "2020-07-14T20:49:05Z", "type": "commit"}, {"oid": "18ea3e4f8b200833e59ca34b8098956d2138994d", "url": "https://github.com/elastic/elasticsearch/commit/18ea3e4f8b200833e59ca34b8098956d2138994d", "message": "Merge remote-tracking branch 'es/master' into move_ds_action_ds_module", "committedDate": "2020-07-15T07:13:54Z", "type": "commit"}, {"oid": "a3a9bcfd485e22a662461529d42f07688b97c36a", "url": "https://github.com/elastic/elasticsearch/commit/a3a9bcfd485e22a662461529d42f07688b97c36a", "message": "fixed test compile error", "committedDate": "2020-07-15T07:21:49Z", "type": "commit"}]}