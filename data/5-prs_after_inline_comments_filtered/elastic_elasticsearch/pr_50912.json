{"pr_number": 50912, "pr_title": "Fix caching for PreConfiguredTokenFilter", "pr_createdAt": "2020-01-13T12:31:07Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/50912", "timeline": [{"oid": "e7d1e5d3bf28e49fedb6edaaf0aa0d46fb81aa46", "url": "https://github.com/elastic/elasticsearch/commit/e7d1e5d3bf28e49fedb6edaaf0aa0d46fb81aa46", "message": "Fix caching for PreConfiguredTokenFilter\n\nThe `PreConfiguredTokenFilter#singletonWithVersion` uses the version\ninternaly for the token filter factories but it registers only one\ninstance in the cahce and not one instance per version. This can lead\nto exceptions like the one described in #50734 since the version created\nof the first index creates and caches the singleton.\n\nRemove the `singletonWithVersion()` methods and use the\n`elasticsearchVersion()` methods instead.\n\nFixes: #50734", "committedDate": "2020-01-13T12:24:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTY1OQ==", "url": "https://github.com/elastic/elasticsearch/pull/50912#discussion_r365779659", "bodyText": "Any idea to use something like this: https://github.com/elastic/elasticsearch/pull/50912/files#diff-5a875cd5f076862a2984f3815807fc6aR95 but get a different random Version where the Lucene Version is also different?", "author": "matriv", "createdAt": "2020-01-13T12:32:29Z", "path": "server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch.index.analysis;\n+\n+import org.apache.lucene.analysis.TokenFilter;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.metadata.IndexMetaData;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.env.TestEnvironment;\n+import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.IndexSettingsModule;\n+import org.elasticsearch.test.VersionUtils;\n+\n+import java.io.IOException;\n+\n+public class PreConfiguredTokenFilterTests extends ESTestCase {\n+\n+    private final Settings emptyNodeSettings = Settings.builder()\n+            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n+            .build();\n+\n+    public void testCachingWithSingleton() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.singleton(\"singleton\", randomBoolean(),\n+                        (tokenStream) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"singleton\", settings2);\n+        assertSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithElasticsearchVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n+                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n+                    @Override\n+                    public boolean incrementToken() {\n+                        return false;\n+                    }\n+                });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = VersionUtils.randomVersion(random());\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n+        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n+                .build();\n+\n+        TokenFilterFactory tff_v2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n+        assertNotSame(tff_v1_1, tff_v2);\n+    }\n+\n+    public void testCachingWithLuceneVersion() throws IOException {\n+        PreConfiguredTokenFilter pctf =\n+                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n+                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n+                            @Override\n+                            public boolean incrementToken() {\n+                                return false;\n+                            }\n+                        });\n+\n+\n+        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n+\n+        Version version1 = Version.CURRENT;\n+        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n+                .build();\n+        TokenFilterFactory tff_v1_1 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        TokenFilterFactory tff_v1_2 =\n+                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n+        assertSame(tff_v1_1, tff_v1_2);\n+\n+\n+        Version version2 = Version.V_7_2_1;", "originalCommit": "e7d1e5d3bf28e49fedb6edaaf0aa0d46fb81aa46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4MzI4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/50912#discussion_r365783283", "bodyText": "I think VersionUtils.getFirstVersion() will always return a version with a different lucene version to Version.CURRENT?", "author": "romseygeek", "createdAt": "2020-01-13T12:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc4NjIwMg==", "url": "https://github.com/elastic/elasticsearch/pull/50912#discussion_r365786202", "bodyText": "Probably it would work, but there is no actual guarantee that the first released version (that's what getFirstVersion() does) has a different Lucene version.", "author": "matriv", "createdAt": "2020-01-13T12:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTY1OQ=="}], "type": "inlineReview"}, {"oid": "f7c4f9eeed06f91ffacb8c195ddd41dc880d5bea", "url": "https://github.com/elastic/elasticsearch/commit/f7c4f9eeed06f91ffacb8c195ddd41dc880d5bea", "message": "Make prev version for Lucene test more flexible", "committedDate": "2020-01-15T15:31:08Z", "type": "commit"}, {"oid": "93a82c5b6b510d49379edfb6ec4e3ff134a18e04", "url": "https://github.com/elastic/elasticsearch/commit/93a82c5b6b510d49379edfb6ec4e3ff134a18e04", "message": "Merge remote-tracking branch 'upstream/master' into fix-50734", "committedDate": "2020-01-15T15:42:14Z", "type": "commit"}]}