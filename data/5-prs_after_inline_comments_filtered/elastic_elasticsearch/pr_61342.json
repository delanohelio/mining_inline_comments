{"pr_number": 61342, "pr_title": "Allocate newly created indices on data_hot tier nodes", "pr_createdAt": "2020-08-19T16:50:25Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61342", "timeline": [{"oid": "83fc4a76c0f013103d291de0d590bf430aa91e30", "url": "https://github.com/elastic/elasticsearch/commit/83fc4a76c0f013103d291de0d590bf430aa91e30", "message": "Allocate newly created indices on data_hot tier nodes\n\nThis commit adds the functionality to allocate newly created indices on nodes in the \"hot\" tier by\ndefault when they are created.\n\nThis does not break existing behavior, as nodes with the `data` role are considered to be part of\nthe hot tier. Users that separate their deployments by using the `data_hot` (and `data_warm`,\n`data_cold`, `data_frozen`) roles will have their data allocated on the hot tier nodes now by\ndefault.\n\nThis change is a little more complicated than changing the default value for\n`index.routing.allocation.include._tier` from null to \"data_hot\". Instead, this adds the ability to\nhave a plugin inject a setting into the builder for a newly created index. This has the benefit of\nallowing this setting to be visible as part of the settings when retrieving the index, for example:\n\n```\n// Create an index\nPUT /eggplant\n\n// Get an index\nGET /eggplant?flat_settings\n```\n\nReturns the default settings now of:\n\n```json\n{\n  \"eggplant\" : {\n    \"aliases\" : { },\n    \"mappings\" : { },\n    \"settings\" : {\n      \"index.creation_date\" : \"1597855465598\",\n      \"index.number_of_replicas\" : \"1\",\n      \"index.number_of_shards\" : \"1\",\n      \"index.provided_name\" : \"eggplant\",\n      \"index.routing.allocation.include._tier\" : \"data_hot\",\n      \"index.uuid\" : \"6ySG78s9RWGystRipoBFCA\",\n      \"index.version.created\" : \"8000099\"\n    }\n  }\n}\n```\n\nAfter the initial setting of this setting, it can be treated like any other index level setting.\n\nThis new setting is *not* set on a new index if any of the following is true:\n\n- The index is created with an `index.routing.allocation.include._tier` setting\n- The index is created with an `index.routing.allocation.exclude._tier` setting\n- The index is created with an `index.routing.allocation.require._tier` setting\n- The index is created with a null `index.routing.allocation.include._tier` value\n- The index was created from an existing source metadata (shrink, clone, split, etc)\n\nRelates to #60848", "committedDate": "2020-08-19T16:37:52Z", "type": "commit"}, {"oid": "3b60e93cad4a766abf8ace7ffb9c28b0a7818832", "url": "https://github.com/elastic/elasticsearch/commit/3b60e93cad4a766abf8ace7ffb9c28b0a7818832", "message": "Fix docs", "committedDate": "2020-08-19T17:57:49Z", "type": "commit"}, {"oid": "5005a73084d944262ffdfd7d02ee6a0bc03e9402", "url": "https://github.com/elastic/elasticsearch/commit/5005a73084d944262ffdfd7d02ee6a0bc03e9402", "message": "Switch from setting listener to explicit index setting provider", "committedDate": "2020-08-20T20:04:13Z", "type": "commit"}, {"oid": "b4183a78ea66a6305aad02588ea75bb68e1c2161", "url": "https://github.com/elastic/elasticsearch/commit/b4183a78ea66a6305aad02588ea75bb68e1c2161", "message": "Unset tier include for JDBC tests", "committedDate": "2020-08-20T21:28:41Z", "type": "commit"}, {"oid": "dfe922bc301ae0ce46927978c70975ad0a658c7b", "url": "https://github.com/elastic/elasticsearch/commit/dfe922bc301ae0ce46927978c70975ad0a658c7b", "message": "Use Settings instead of a Map<String, String>", "committedDate": "2020-08-24T15:21:07Z", "type": "commit"}, {"oid": "08e4ab57bf9a9bf23ab496d398d809fb6118147f", "url": "https://github.com/elastic/elasticsearch/commit/08e4ab57bf9a9bf23ab496d398d809fb6118147f", "message": "Check for all index level allocation settings when putting explicit setting in place", "committedDate": "2020-08-24T21:50:32Z", "type": "commit"}, {"oid": "f1c44a24b556748ec531c56986e565accb03cb7e", "url": "https://github.com/elastic/elasticsearch/commit/f1c44a24b556748ec531c56986e565accb03cb7e", "message": "Fix some tests", "committedDate": "2020-08-24T22:33:31Z", "type": "commit"}, {"oid": "53a5ed7ec7fd336ea46342ce0cd471fd9f321edc", "url": "https://github.com/elastic/elasticsearch/commit/53a5ed7ec7fd336ea46342ce0cd471fd9f321edc", "message": "Fix ILM test", "committedDate": "2020-08-24T23:13:44Z", "type": "commit"}, {"oid": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "url": "https://github.com/elastic/elasticsearch/commit/ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "message": "Merge branch 'master' into dt-default-deploy-on-hot", "committedDate": "2020-08-24T23:14:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwODI4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477508285", "bodyText": "nit: :s/listener/provider", "author": "jakelandis", "createdAt": "2020-08-26T18:39:10Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -595,14 +611,65 @@ private ClusterState applyCreateIndexRequestWithExistingMetadata(final ClusterSt\n      * @return the aggregated settings for the new index\n      */\n     static Settings aggregateIndexSettings(ClusterState currentState, CreateIndexClusterStateUpdateRequest request,\n-                                           Settings templateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n-                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator) {\n-        Settings.Builder indexSettingsBuilder = Settings.builder();\n+                                           Settings combinedTemplateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n+                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator,\n+                                           Set<ExplicitIndexSettingProvider> explicitIndexSettingProviders) {\n+        // Create builders for the template and request settings. We transform these into builders\n+        // because we may want settings to be \"removed\" from these prior to being set on the new\n+        // index (see more comments below)\n+        final Settings.Builder templateSettings = Settings.builder().put(combinedTemplateSettings);\n+        final Settings.Builder requestSettings = Settings.builder().put(request.settings());\n+\n+        final Settings.Builder indexSettingsBuilder = Settings.builder();\n         if (sourceMetadata == null) {\n-            indexSettingsBuilder.put(templateSettings);\n+            final Settings.Builder explicitDefaultSettings = Settings.builder();\n+            final Settings templateAndRequestSettings = Settings.builder()\n+                .put(combinedTemplateSettings)\n+                .put(request.settings())\n+                .build();\n+\n+            // Loop through all the explicit index setting providers, adding them to the\n+            // explicitDefaultSettings map\n+            for (ExplicitIndexSettingProvider listener : explicitIndexSettingProviders) {", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMDczMw==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477530733", "bodyText": "If we expected exceptions here, we should document it on the interface. However, I don't think we should.\nI think the contract should be that a provider provides all valid settings, or Settings.EMPTY if none can be satisfied. Removing the catch here and any exception thrown by a provider impl would result in a 500 and no index created, which I think is slightly better then settings that should have been applied but were not.", "author": "jakelandis", "createdAt": "2020-08-26T19:13:41Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -595,14 +611,65 @@ private ClusterState applyCreateIndexRequestWithExistingMetadata(final ClusterSt\n      * @return the aggregated settings for the new index\n      */\n     static Settings aggregateIndexSettings(ClusterState currentState, CreateIndexClusterStateUpdateRequest request,\n-                                           Settings templateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n-                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator) {\n-        Settings.Builder indexSettingsBuilder = Settings.builder();\n+                                           Settings combinedTemplateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n+                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator,\n+                                           Set<ExplicitIndexSettingProvider> explicitIndexSettingProviders) {\n+        // Create builders for the template and request settings. We transform these into builders\n+        // because we may want settings to be \"removed\" from these prior to being set on the new\n+        // index (see more comments below)\n+        final Settings.Builder templateSettings = Settings.builder().put(combinedTemplateSettings);\n+        final Settings.Builder requestSettings = Settings.builder().put(request.settings());\n+\n+        final Settings.Builder indexSettingsBuilder = Settings.builder();\n         if (sourceMetadata == null) {\n-            indexSettingsBuilder.put(templateSettings);\n+            final Settings.Builder explicitDefaultSettings = Settings.builder();\n+            final Settings templateAndRequestSettings = Settings.builder()\n+                .put(combinedTemplateSettings)\n+                .put(request.settings())\n+                .build();\n+\n+            // Loop through all the explicit index setting providers, adding them to the\n+            // explicitDefaultSettings map\n+            for (ExplicitIndexSettingProvider listener : explicitIndexSettingProviders) {\n+                try {\n+                    explicitDefaultSettings.put(listener.getExplicitIndexSettings(request.index(), templateAndRequestSettings));\n+                } catch (Exception e) {\n+                    logger.warn(new ParameterizedMessage(\"failed invoking explicit setting provider for creation of [{}] index\",", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzOTQxMA==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477539410", "bodyText": "nit: this if/elseif/else can be simplified to an if/elseif (just a minor style preference)", "author": "jakelandis", "createdAt": "2020-08-26T19:30:18Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/DataTier.java", "diffHunk": "@@ -137,4 +142,28 @@ public static boolean isColdNode(DiscoveryNode discoveryNode) {\n     public static boolean isFrozenNode(DiscoveryNode discoveryNode) {\n         return discoveryNode.getRoles().contains(DATA_FROZEN_NODE_ROLE) || discoveryNode.getRoles().contains(DiscoveryNodeRole.DATA_ROLE);\n     }\n+\n+    /**\n+     * This listener injects the setting allocating all newly created indices with\n+     * {@code index.routing.allocation.include._tier: \"data_hot\"} unless the user overrides the\n+     * setting while the index is being created (in a create index request for instance)\n+     */\n+    public static class DefaultHotAllocationSettingProvider implements ExplicitIndexSettingProvider {\n+        @Override\n+        public Settings getExplicitIndexSettings(String indexName, Settings indexSettings) {\n+            Set<String> settings = indexSettings.keySet();\n+            if (settings.contains(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE)) {", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MTE3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477541172", "bodyText": "nit: the listener ? not sure i follow what that is in reference to..", "author": "jakelandis", "createdAt": "2020-08-26T19:33:51Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/DataTier.java", "diffHunk": "@@ -137,4 +142,28 @@ public static boolean isColdNode(DiscoveryNode discoveryNode) {\n     public static boolean isFrozenNode(DiscoveryNode discoveryNode) {\n         return discoveryNode.getRoles().contains(DATA_FROZEN_NODE_ROLE) || discoveryNode.getRoles().contains(DiscoveryNodeRole.DATA_ROLE);\n     }\n+\n+    /**\n+     * This listener injects the setting allocating all newly created indices with", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MDk4OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477550989", "bodyText": "outside the scope of this PR, but can you use _tier with the node specification  ?", "author": "jakelandis", "createdAt": "2020-08-26T19:52:06Z", "path": "server/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java", "diffHunk": "@@ -181,6 +181,9 @@ public boolean match(DiscoveryNode node) {\n                         }\n                     }\n                 }\n+            } else if (\"_tier\".equals(attr)) {\n+                // Always allow _tier as an attribute, will be handled elsewhere", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU2ODg2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477568867", "bodyText": "Yes you can, I added tests for that in #60994", "author": "dakrone", "createdAt": "2020-08-26T20:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MDk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MTM1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477551351", "bodyText": "nit: doesn't return a map", "author": "jakelandis", "createdAt": "2020-08-26T19:52:51Z", "path": "server/src/main/java/org/elasticsearch/index/shard/ExplicitIndexSettingProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.shard;\n+\n+import org.elasticsearch.common.settings.Settings;\n+\n+/**\n+ * An {@link ExplicitIndexSettingProvider} is a provider for index level settings that can be set\n+ * explicitly as a default value (so they show up as \"set\" for newly created indices)\n+ */\n+public interface ExplicitIndexSettingProvider {\n+    /**\n+     * Returns a map of explicitly set default index settings for the given index.", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MjAyMw==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477552023", "bodyText": "a debug message here might be helpful for future troubleshooting.", "author": "jakelandis", "createdAt": "2020-08-26T19:54:09Z", "path": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/DataTier.java", "diffHunk": "@@ -137,4 +142,28 @@ public static boolean isColdNode(DiscoveryNode discoveryNode) {\n     public static boolean isFrozenNode(DiscoveryNode discoveryNode) {\n         return discoveryNode.getRoles().contains(DATA_FROZEN_NODE_ROLE) || discoveryNode.getRoles().contains(DiscoveryNodeRole.DATA_ROLE);\n     }\n+\n+    /**\n+     * This listener injects the setting allocating all newly created indices with\n+     * {@code index.routing.allocation.include._tier: \"data_hot\"} unless the user overrides the\n+     * setting while the index is being created (in a create index request for instance)\n+     */\n+    public static class DefaultHotAllocationSettingProvider implements ExplicitIndexSettingProvider {\n+        @Override\n+        public Settings getExplicitIndexSettings(String indexName, Settings indexSettings) {\n+            Set<String> settings = indexSettings.keySet();\n+            if (settings.contains(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE)) {\n+                // It's okay to put it, it will be removed or overridden by the template/request settings\n+                return Settings.builder().put(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE, DATA_HOT).build();\n+            } else if (settings.stream().anyMatch(s -> s.startsWith(IndexMetadata.INDEX_ROUTING_REQUIRE_GROUP_PREFIX + \".\")) ||\n+                settings.stream().anyMatch(s -> s.startsWith(IndexMetadata.INDEX_ROUTING_EXCLUDE_GROUP_PREFIX + \".\")) ||\n+                settings.stream().anyMatch(s -> s.startsWith(IndexMetadata.INDEX_ROUTING_INCLUDE_GROUP_PREFIX + \".\"))) {\n+                // A different index level require, include, or exclude has been specified, so don't put the setting", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NjM5Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477556397", "bodyText": "maybe switch between \"data\" and \"data_hot\" randomly here ... IIUC they are synonymous in this context ?", "author": "jakelandis", "createdAt": "2020-08-26T20:02:08Z", "path": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/cluster/routing/allocation/DataTierIT.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.cluster.routing.allocation;\n+\n+import org.elasticsearch.action.admin.indices.shrink.ResizeType;\n+import org.elasticsearch.action.admin.indices.template.put.PutComposableIndexTemplateAction;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.elasticsearch.cluster.metadata.ComposableIndexTemplate;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Template;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.xpack.core.DataTier;\n+import org.elasticsearch.xpack.core.LocalStateCompositeXPackPlugin;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, numClientNodes = 0)\n+public class DataTierIT extends ESIntegTestCase {\n+    private static final String index = \"myindex\";\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        return Collections.singleton(LocalStateCompositeXPackPlugin.class);\n+    }\n+\n+    public void testDefaultAllocateToHot() {\n+        startWarmNode();\n+        startColdNode();\n+        ensureGreen();\n+\n+        client().admin().indices().prepareCreate(index).setWaitForActiveShards(0).get();\n+\n+        Settings idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(DataTier.DATA_HOT));\n+\n+        // index should be red\n+        assertThat(client().admin().cluster().prepareHealth(index).get().getIndices().get(index).getStatus(),\n+            equalTo(ClusterHealthStatus.RED));\n+\n+        logger.info(\"--> starting hot node\");\n+        startHotNode();\n+\n+        logger.info(\"--> waiting for {} to be yellow\", index);\n+        ensureYellow(index);\n+    }\n+\n+    public void testOverrideDefaultAllocation() {\n+        startWarmNode();\n+        startColdNode();\n+        ensureGreen();\n+\n+        String setting = randomBoolean() ? DataTierAllocationDecider.INDEX_ROUTING_REQUIRE :\n+            DataTierAllocationDecider.INDEX_ROUTING_INCLUDE;\n+\n+        client().admin().indices().prepareCreate(index)\n+            .setWaitForActiveShards(0)\n+            .setSettings(Settings.builder()\n+                .put(setting, DataTier.DATA_WARM))\n+            .get();\n+\n+        Settings idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(idxSettings.get(setting), equalTo(DataTier.DATA_WARM));\n+\n+        // index should be yellow\n+        logger.info(\"--> waiting for {} to be yellow\", index);\n+        ensureYellow(index);\n+    }\n+\n+    public void testRequestSettingOverridesAllocation() {\n+        startWarmNode();\n+        startColdNode();\n+        ensureGreen();\n+\n+        client().admin().indices().prepareCreate(index)\n+            .setWaitForActiveShards(0)\n+            .setSettings(Settings.builder()\n+                .putNull(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE))\n+            .get();\n+\n+        Settings idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(\"\"));\n+        // Even the key shouldn't exist if it has been nulled out\n+        assertFalse(idxSettings.keySet().toString(), idxSettings.keySet().contains(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE));\n+\n+        // index should be yellow\n+        logger.info(\"--> waiting for {} to be yellow\", index);\n+        ensureYellow(index);\n+\n+        client().admin().indices().prepareDelete(index).get();\n+\n+        // Now test it overriding the \"require\" setting, in which case the include should be skipped\n+        client().admin().indices().prepareCreate(index)\n+            .setWaitForActiveShards(0)\n+            .setSettings(Settings.builder()\n+                .put(DataTierAllocationDecider.INDEX_ROUTING_REQUIRE, DataTier.DATA_COLD))\n+            .get();\n+\n+        idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(\"\"));\n+        // The key should not be put in place since it was overridden\n+        assertFalse(idxSettings.keySet().contains(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE));\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_REQUIRE_SETTING.get(idxSettings), equalTo(DataTier.DATA_COLD));\n+\n+        // index should be yellow\n+        logger.info(\"--> waiting for {} to be yellow\", index);\n+        ensureYellow(index);\n+    }\n+\n+    /**\n+     * When a new index is created from source metadata (as during a shrink), the data tier\n+     * default setting should *not* be applied. This test checks that behavior.\n+     */\n+    public void testShrinkStaysOnTier() {\n+        startWarmNode();\n+        startHotNode();\n+\n+        client().admin().indices().prepareCreate(index)\n+            .setWaitForActiveShards(0)\n+            .setSettings(Settings.builder()\n+                .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 2)\n+                .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+                .put(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE, \"data_warm\"))\n+            .get();\n+\n+        client().admin().indices().prepareAddBlock(IndexMetadata.APIBlock.READ_ONLY, index).get();\n+        client().admin().indices().prepareResizeIndex(index, index + \"-shrunk\")\n+            .setResizeType(ResizeType.SHRINK)\n+            .setSettings(Settings.builder()\n+                .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1)\n+                .put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)\n+                .build()).get();\n+\n+        ensureGreen(index + \"-shrunk\");\n+\n+        Settings idxSettings = client().admin().indices().prepareGetIndex().addIndices(index + \"-shrunk\")\n+            .get().getSettings().get(index + \"-shrunk\");\n+        // It should inherit the setting of its originator\n+        assertThat(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE_SETTING.get(idxSettings), equalTo(DataTier.DATA_WARM));\n+\n+        // Required or else the test cleanup fails because it can't delete the indices\n+        client().admin().indices().prepareUpdateSettings(index, index + \"-shrunk\")\n+            .setSettings(Settings.builder()\n+                .put(\"index.blocks.read_only\", false))\n+            .get();\n+    }\n+\n+    public void testTemplateOverridesDefaults() {\n+        startWarmNode();\n+\n+        Template t = new Template(Settings.builder()\n+            .put(DataTierAllocationDecider.INDEX_ROUTING_REQUIRE, DataTier.DATA_WARM)\n+            .build(), null, null);\n+        ComposableIndexTemplate ct = new ComposableIndexTemplate(Collections.singletonList(index), t, null, null, null, null, null);\n+        client().execute(PutComposableIndexTemplateAction.INSTANCE,\n+            new PutComposableIndexTemplateAction.Request(\"template\").indexTemplate(ct)).actionGet();\n+\n+        client().admin().indices().prepareCreate(index).setWaitForActiveShards(0).get();\n+\n+        Settings idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(idxSettings.keySet().contains(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE), equalTo(false));\n+\n+        // index should be yellow\n+        ensureYellow(index);\n+\n+        client().admin().indices().prepareDelete(index).get();\n+\n+        t = new Template(Settings.builder()\n+            .putNull(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE)\n+            .build(), null, null);\n+        ct = new ComposableIndexTemplate(Collections.singletonList(index), t, null, null, null, null, null);\n+        client().execute(PutComposableIndexTemplateAction.INSTANCE,\n+            new PutComposableIndexTemplateAction.Request(\"template\").indexTemplate(ct)).actionGet();\n+\n+        client().admin().indices().prepareCreate(index).setWaitForActiveShards(0).get();\n+\n+        idxSettings = client().admin().indices().prepareGetIndex().addIndices(index).get().getSettings().get(index);\n+        assertThat(idxSettings.keySet().contains(DataTierAllocationDecider.INDEX_ROUTING_INCLUDE), equalTo(false));\n+\n+        ensureYellow(index);\n+    }\n+\n+    public void startHotNode() {\n+        Settings nodeSettings = Settings.builder()\n+            .putList(\"node.roles\", Arrays.asList(\"master\", \"data_hot\", \"ingest\"))", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3MjQxOA==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477572418", "bodyText": "They are synonymous in that they can both have hot data, but not for tests that may expect starting a hot node to mean there are no warm/cold/frozen nodes in the cluster. I'll rename these to startHotOnlyNode (for all the node types)", "author": "dakrone", "createdAt": "2020-08-26T20:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NjM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1OTAwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477559009", "bodyText": "mabye a debug message here to help with future troubleshooting ?", "author": "jakelandis", "createdAt": "2020-08-26T20:07:32Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -595,14 +611,65 @@ private ClusterState applyCreateIndexRequestWithExistingMetadata(final ClusterSt\n      * @return the aggregated settings for the new index\n      */\n     static Settings aggregateIndexSettings(ClusterState currentState, CreateIndexClusterStateUpdateRequest request,\n-                                           Settings templateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n-                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator) {\n-        Settings.Builder indexSettingsBuilder = Settings.builder();\n+                                           Settings combinedTemplateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n+                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator,\n+                                           Set<ExplicitIndexSettingProvider> explicitIndexSettingProviders) {\n+        // Create builders for the template and request settings. We transform these into builders\n+        // because we may want settings to be \"removed\" from these prior to being set on the new\n+        // index (see more comments below)\n+        final Settings.Builder templateSettings = Settings.builder().put(combinedTemplateSettings);\n+        final Settings.Builder requestSettings = Settings.builder().put(request.settings());\n+\n+        final Settings.Builder indexSettingsBuilder = Settings.builder();\n         if (sourceMetadata == null) {\n-            indexSettingsBuilder.put(templateSettings);\n+            final Settings.Builder explicitDefaultSettings = Settings.builder();\n+            final Settings templateAndRequestSettings = Settings.builder()\n+                .put(combinedTemplateSettings)\n+                .put(request.settings())\n+                .build();\n+\n+            // Loop through all the explicit index setting providers, adding them to the\n+            // explicitDefaultSettings map\n+            for (ExplicitIndexSettingProvider listener : explicitIndexSettingProviders) {\n+                try {\n+                    explicitDefaultSettings.put(listener.getExplicitIndexSettings(request.index(), templateAndRequestSettings));\n+                } catch (Exception e) {\n+                    logger.warn(new ParameterizedMessage(\"failed invoking explicit setting provider for creation of [{}] index\",\n+                        request.index()), e);\n+                }\n+            }\n+\n+            // For all the explicit settings, we go through the template and request level settings\n+            // and see if either a template or the request has \"cancelled out\" an explicit default\n+            // setting. For example, if a plugin had as an explicit setting:\n+            // \"index.mysetting\": \"blah\n+            // And either a template or create index request had:\n+            // \"index.mysetting\": null\n+            // We want to remove the explicit setting not only from the explicitly set settings, but\n+            // also from the template and request settings, so that from the newly create index's\n+            // perspective it is as though the setting has not been set at all (using the default\n+            // value).\n+            for (String explicitSetting : explicitDefaultSettings.keys()) {\n+                if (templateSettings.keys().contains(explicitSetting) && templateSettings.get(explicitSetting) == null) {\n+                    explicitDefaultSettings.remove(explicitSetting);\n+                    templateSettings.remove(explicitSetting);", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1OTA4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477559087", "bodyText": "mabye a debug message here to help with future troubleshooting ?", "author": "jakelandis", "createdAt": "2020-08-26T20:07:40Z", "path": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexService.java", "diffHunk": "@@ -595,14 +611,65 @@ private ClusterState applyCreateIndexRequestWithExistingMetadata(final ClusterSt\n      * @return the aggregated settings for the new index\n      */\n     static Settings aggregateIndexSettings(ClusterState currentState, CreateIndexClusterStateUpdateRequest request,\n-                                           Settings templateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n-                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator) {\n-        Settings.Builder indexSettingsBuilder = Settings.builder();\n+                                           Settings combinedTemplateSettings, @Nullable IndexMetadata sourceMetadata, Settings settings,\n+                                           IndexScopedSettings indexScopedSettings, ShardLimitValidator shardLimitValidator,\n+                                           Set<ExplicitIndexSettingProvider> explicitIndexSettingProviders) {\n+        // Create builders for the template and request settings. We transform these into builders\n+        // because we may want settings to be \"removed\" from these prior to being set on the new\n+        // index (see more comments below)\n+        final Settings.Builder templateSettings = Settings.builder().put(combinedTemplateSettings);\n+        final Settings.Builder requestSettings = Settings.builder().put(request.settings());\n+\n+        final Settings.Builder indexSettingsBuilder = Settings.builder();\n         if (sourceMetadata == null) {\n-            indexSettingsBuilder.put(templateSettings);\n+            final Settings.Builder explicitDefaultSettings = Settings.builder();\n+            final Settings templateAndRequestSettings = Settings.builder()\n+                .put(combinedTemplateSettings)\n+                .put(request.settings())\n+                .build();\n+\n+            // Loop through all the explicit index setting providers, adding them to the\n+            // explicitDefaultSettings map\n+            for (ExplicitIndexSettingProvider listener : explicitIndexSettingProviders) {\n+                try {\n+                    explicitDefaultSettings.put(listener.getExplicitIndexSettings(request.index(), templateAndRequestSettings));\n+                } catch (Exception e) {\n+                    logger.warn(new ParameterizedMessage(\"failed invoking explicit setting provider for creation of [{}] index\",\n+                        request.index()), e);\n+                }\n+            }\n+\n+            // For all the explicit settings, we go through the template and request level settings\n+            // and see if either a template or the request has \"cancelled out\" an explicit default\n+            // setting. For example, if a plugin had as an explicit setting:\n+            // \"index.mysetting\": \"blah\n+            // And either a template or create index request had:\n+            // \"index.mysetting\": null\n+            // We want to remove the explicit setting not only from the explicitly set settings, but\n+            // also from the template and request settings, so that from the newly create index's\n+            // perspective it is as though the setting has not been set at all (using the default\n+            // value).\n+            for (String explicitSetting : explicitDefaultSettings.keys()) {\n+                if (templateSettings.keys().contains(explicitSetting) && templateSettings.get(explicitSetting) == null) {\n+                    explicitDefaultSettings.remove(explicitSetting);\n+                    templateSettings.remove(explicitSetting);\n+                }\n+                if (requestSettings.keys().contains(explicitSetting) && requestSettings.get(explicitSetting) == null) {\n+                    explicitDefaultSettings.remove(explicitSetting);\n+                    requestSettings.remove(explicitSetting);", "originalCommit": "ed6c3dc8adf8d9f7e1f919abf047d400a27f6e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c001cf91b0a8c587c7e4e10913af360bfead684", "url": "https://github.com/elastic/elasticsearch/commit/7c001cf91b0a8c587c7e4e10913af360bfead684", "message": "Merge remote-tracking branch 'origin/master' into dt-default-deploy-on-hot", "committedDate": "2020-08-26T20:27:22Z", "type": "commit"}, {"oid": "5039087aa77a4bfd9f40299131427aae23777d84", "url": "https://github.com/elastic/elasticsearch/commit/5039087aa77a4bfd9f40299131427aae23777d84", "message": "Fix typos and listener -> provider after refactor", "committedDate": "2020-08-26T20:29:02Z", "type": "commit"}, {"oid": "d659748e323f5b78f934c641634fbc3e70dc3471", "url": "https://github.com/elastic/elasticsearch/commit/d659748e323f5b78f934c641634fbc3e70dc3471", "message": "Pass exceptions through, preventing index creation if provider fails", "committedDate": "2020-08-26T20:29:43Z", "type": "commit"}, {"oid": "055c6420644e60b115630936b1c05709b053d719", "url": "https://github.com/elastic/elasticsearch/commit/055c6420644e60b115630936b1c05709b053d719", "message": "Add debug log message when skipping hot tier allocation", "committedDate": "2020-08-26T20:32:33Z", "type": "commit"}, {"oid": "7b2982657a44606b715c08535c98a61acab5716e", "url": "https://github.com/elastic/elasticsearch/commit/7b2982657a44606b715c08535c98a61acab5716e", "message": "Rename node starting helpers in DataTierIT", "committedDate": "2020-08-26T20:34:22Z", "type": "commit"}, {"oid": "7a70b0c01d7b5f259e3699ab7a6af02f26b47a9a", "url": "https://github.com/elastic/elasticsearch/commit/7a70b0c01d7b5f259e3699ab7a6af02f26b47a9a", "message": "Add debug log for explicit setting cancelled out by template/request", "committedDate": "2020-08-26T20:36:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4NjM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477586376", "bodyText": "The naming here is a little confusing, because I thought this was about defaults, while \"explicit\" implies to me this is something else.", "author": "rjernst", "createdAt": "2020-08-26T21:00:46Z", "path": "server/src/main/java/org/elasticsearch/index/shard/ExplicitIndexSettingProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.shard;\n+\n+import org.elasticsearch.common.settings.Settings;\n+\n+/**\n+ * An {@link ExplicitIndexSettingProvider} is a provider for index level settings that can be set\n+ * explicitly as a default value (so they show up as \"set\" for newly created indices)\n+ */\n+public interface ExplicitIndexSettingProvider {", "originalCommit": "7a70b0c01d7b5f259e3699ab7a6af02f26b47a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MDI3NQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477650275", "bodyText": "It's short for \"ExplicitDefaultIndexSettingProvider\", and I should use the full name to be less confusing, I'll change this to use it.", "author": "dakrone", "createdAt": "2020-08-26T23:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4NjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwNTMxMA==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477705310", "bodyText": "Maybe just IndexSettingsProvider? I'm still not understanding where the explicit comes in. I think the method could just be getAdditionalIndexSettings, similar to the getAdditionalSettings() we have on plugins for providing node settings.", "author": "rjernst", "createdAt": "2020-08-26T23:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4NjM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4ODYzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477588631", "bodyText": "Can we do without the passed in settings? I had imagined the caller would do the merging/defaulting logic, so it's unclear why we would need the user passed in settings.", "author": "rjernst", "createdAt": "2020-08-26T21:05:10Z", "path": "server/src/main/java/org/elasticsearch/index/shard/ExplicitIndexSettingProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.shard;\n+\n+import org.elasticsearch.common.settings.Settings;\n+\n+/**\n+ * An {@link ExplicitIndexSettingProvider} is a provider for index level settings that can be set\n+ * explicitly as a default value (so they show up as \"set\" for newly created indices)\n+ */\n+public interface ExplicitIndexSettingProvider {\n+    /**\n+     * Returns explicitly set default index {@link Settings} for the given index.\n+     */\n+    default Settings getExplicitIndexSettings(String indexName, Settings templateAndRequestSettings) {", "originalCommit": "7a70b0c01d7b5f259e3699ab7a6af02f26b47a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0OTA1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477649053", "bodyText": "We need the settings to be able to not set mutually exclusive settings, for example, if a user created an index with:\nPOST /myindex\n{\n  \"settings\": {\n    \"index.routing.allocation.require._name\": \"mynode\"\n  }\n}\n\nWe need to not set index.routing.allocation.include._tier automatically, because otherwise we're constraining a new index to a tier when the user specifically wanted it constrained to single node (we check the all index level filtering settings). These settings are the only way we can make explicit default index settings reactive to other index level settings (such as adding an opt-out index level setting in the future)", "author": "dakrone", "createdAt": "2020-08-26T23:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4ODYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4OTY2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477589669", "bodyText": "I would put the method on Plugin, where we have the rest of the settings logic. We may want to split that out to eg a SettingsPlugin at some point, but it would be nice to have those related extension points near each other for now.", "author": "rjernst", "createdAt": "2020-08-26T21:07:12Z", "path": "server/src/main/java/org/elasticsearch/plugins/IndexSettingsProviderPlugin.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.plugins;\n+\n+import org.elasticsearch.index.shard.ExplicitIndexSettingProvider;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * An {@link IndexSettingsProviderPlugin} is a plugin that allows hooking in to parts of an index\n+ * lifecycle to provide explicit default settings for newly created indices. Rather than changing\n+ * the default values for an index-level setting, these act as though the setting has been set\n+ * explicitly, but still allow the setting to be overridden by a template or creation request body.\n+ */\n+public interface IndexSettingsProviderPlugin {\n+    default Collection<ExplicitIndexSettingProvider> getExplicitSettingProviders() {", "originalCommit": "7a70b0c01d7b5f259e3699ab7a6af02f26b47a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgyMzA3MA==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r477823070", "bodyText": "minor: might want to instruct consumers that this method should not return null, nor throw exceptions, and if the conditions dictate that are no settings to apply for this index then return Settings.EMPTY.", "author": "jakelandis", "createdAt": "2020-08-27T00:55:49Z", "path": "server/src/main/java/org/elasticsearch/index/shard/ExplicitIndexSettingProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.shard;\n+\n+import org.elasticsearch.common.settings.Settings;\n+\n+/**\n+ * An {@link ExplicitIndexSettingProvider} is a provider for index level settings that can be set\n+ * explicitly as a default value (so they show up as \"set\" for newly created indices)\n+ */\n+public interface ExplicitIndexSettingProvider {\n+    /**\n+     * Returns explicitly set default index {@link Settings} for the given index.", "originalCommit": "7a70b0c01d7b5f259e3699ab7a6af02f26b47a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17bde03ae3406f926016d79ee77aca554296209e", "url": "https://github.com/elastic/elasticsearch/commit/17bde03ae3406f926016d79ee77aca554296209e", "message": "Rename Explicit -> Additional, collapse to Plugin instead of new plugin", "committedDate": "2020-08-27T16:05:31Z", "type": "commit"}, {"oid": "e95e9220a1916034e0f0eab2d3a01f73d3652989", "url": "https://github.com/elastic/elasticsearch/commit/e95e9220a1916034e0f0eab2d3a01f73d3652989", "message": "Merge branch 'master' into dt-default-deploy-on-hot", "committedDate": "2020-08-27T17:06:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NTQzMA==", "url": "https://github.com/elastic/elasticsearch/pull/61342#discussion_r478595430", "bodyText": "nit: AdditionalSetting -> AdditionalIndexSetting?", "author": "rjernst", "createdAt": "2020-08-27T17:53:29Z", "path": "server/src/main/java/org/elasticsearch/plugins/Plugin.java", "diffHunk": "@@ -197,4 +198,14 @@ public void onIndexModule(IndexModule indexModule) {}\n     public void close() throws IOException {\n \n     }\n+\n+    /**\n+     * An {@link IndexSettingProvider} allows hooking in to parts of an index\n+     * lifecycle to provide explicit default settings for newly created indices. Rather than changing\n+     * the default values for an index-level setting, these act as though the setting has been set\n+     * explicitly, but still allow the setting to be overridden by a template or creation request body.\n+     */\n+    public Collection<IndexSettingProvider> getAdditionalSettingProviders() {", "originalCommit": "e95e9220a1916034e0f0eab2d3a01f73d3652989", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2aa7b4f36618c7a905ec5555d828f1c2cf7df4e1", "url": "https://github.com/elastic/elasticsearch/commit/2aa7b4f36618c7a905ec5555d828f1c2cf7df4e1", "message": "getAdditionalSettingProviders -> getAdditionalIndexSettingProviders", "committedDate": "2020-08-27T17:56:56Z", "type": "commit"}]}