{"pr_number": 53879, "pr_title": "Extract CacheBufferedIndexInput from CacheDirectory", "pr_createdAt": "2020-03-20T15:38:07Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/53879", "timeline": [{"oid": "9215ccec85e9e0e849bfcf2a6603f26f11cb1b36", "url": "https://github.com/elastic/elasticsearch/commit/9215ccec85e9e0e849bfcf2a6603f26f11cb1b36", "message": "Extract CacheBufferedIndexInput", "committedDate": "2020-03-20T15:35:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMTY1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395721657", "bodyText": "This class has been extracted from CacheDirectory as is, with the following modification:\n\nlogger moved to the base class (previously at the CacheDirectory level)\nCOPY_BUFFER_SIZE moved within the CacheBufferedIndexInput class (previously at the CacheDirectory level)\nCacheFileReference now explicitely calls directory.createCacheKey() and directory.getCacheFile()", "author": "tlrx", "createdAt": "2020-03-20T15:40:26Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheBufferedIndexInput.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.lucene.store.AlreadyClosedException;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.Channels;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardSnapshot.FileInfo;\n+import org.elasticsearch.index.store.BaseSearchableSnapshotIndexInput;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class CacheBufferedIndexInput extends BaseSearchableSnapshotIndexInput {", "originalCommit": "9215ccec85e9e0e849bfcf2a6603f26f11cb1b36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjkwNQ==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395732905", "bodyText": "Thanks, that's very helpful :)", "author": "DaveCTurner", "createdAt": "2020-03-20T15:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjM0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395732346", "bodyText": "I would rather use a distinct (private) logger for each class if possible -- makes it that much easier to track down where messages are coming from.", "author": "DaveCTurner", "createdAt": "2020-03-20T15:56:33Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/BaseSearchableSnapshotIndexInput.java", "diffHunk": "@@ -19,6 +21,8 @@\n \n public abstract class BaseSearchableSnapshotIndexInput extends BufferedIndexInput {\n \n+    protected static final Logger logger = LogManager.getLogger(BaseSearchableSnapshotIndexInput.class);", "originalCommit": "9215ccec85e9e0e849bfcf2a6603f26f11cb1b36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1MjcxMA==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395752710", "bodyText": "Makes sense", "author": "tlrx", "createdAt": "2020-03-20T16:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NDg1Mg==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395744852", "bodyText": "Maybe make CacheFileReference a static class (top-level even) and pass the directory to its constructor? That would avoid needing to do this.", "author": "DaveCTurner", "createdAt": "2020-03-20T16:16:37Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/CacheBufferedIndexInput.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.searchablesnapshots.cache;\n+\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.lucene.store.AlreadyClosedException;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.elasticsearch.common.Nullable;\n+import org.elasticsearch.common.SuppressForbidden;\n+import org.elasticsearch.common.io.Channels;\n+import org.elasticsearch.common.util.concurrent.ReleasableLock;\n+import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardSnapshot.FileInfo;\n+import org.elasticsearch.index.store.BaseSearchableSnapshotIndexInput;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class CacheBufferedIndexInput extends BaseSearchableSnapshotIndexInput {\n+\n+    private static final int COPY_BUFFER_SIZE = 8192;\n+\n+    private final CacheDirectory directory;\n+    private final long offset;\n+    private final long end;\n+    private final CacheFileReference cacheFileReference;\n+    private final IndexInputStats stats;\n+\n+    // the following are only mutable so they can be adjusted after cloning\n+    private AtomicBoolean closed;\n+    private boolean isClone;\n+\n+    // last read position is kept around in order to detect (non)contiguous reads for stats\n+    private long lastReadPosition;\n+    // last seek position is kept around in order to detect forward/backward seeks for stats\n+    private long lastSeekPosition;\n+\n+    CacheBufferedIndexInput(CacheDirectory directory, FileInfo fileInfo, IOContext context, IndexInputStats stats) {\n+        this(\"CachedBufferedIndexInput(\" + fileInfo.physicalName() + \")\", directory, fileInfo, context, stats, 0L, fileInfo.length(),\n+            false, null);\n+        stats.incrementOpenCount();\n+    }\n+\n+    private CacheBufferedIndexInput(String resourceDesc, CacheDirectory directory, FileInfo fileInfo, IOContext context,\n+                                    IndexInputStats stats, long offset, long length, boolean isClone,\n+                                    @Nullable CacheFileReference cacheFileReference) {\n+        super(resourceDesc, directory.blobContainer(), fileInfo, context);\n+        this.directory = directory;\n+        this.offset = offset;\n+        this.stats = stats;\n+        this.end = offset + length;\n+        this.closed = new AtomicBoolean(false);\n+        this.isClone = isClone;\n+        this.cacheFileReference = Objects.requireNonNullElseGet(cacheFileReference,", "originalCommit": "9215ccec85e9e0e849bfcf2a6603f26f11cb1b36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1MzA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395753048", "bodyText": "I must admit I hesitated between the two. I applied your opinion.", "author": "tlrx", "createdAt": "2020-03-20T16:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NDg1Mg=="}], "type": "inlineReview"}, {"oid": "9028f8aab9124bbb928669ad65282858f3cb5fee", "url": "https://github.com/elastic/elasticsearch/commit/9028f8aab9124bbb928669ad65282858f3cb5fee", "message": "apply feedback", "committedDate": "2020-03-20T16:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODQ0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395758446", "bodyText": "This isn't used? I mean it probably will be in future, but I think I'd prefer to add it when it's needed.", "author": "DaveCTurner", "createdAt": "2020-03-20T16:38:22Z", "path": "x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/index/store/SearchableSnapshotIndexInput.java", "diffHunk": "@@ -48,6 +50,8 @@\n  */\n public class SearchableSnapshotIndexInput extends BaseSearchableSnapshotIndexInput {\n \n+    private static final Logger logger = LogManager.getLogger(SearchableSnapshotIndexInput.class);", "originalCommit": "9028f8aab9124bbb928669ad65282858f3cb5fee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2MDIyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/53879#discussion_r395760229", "bodyText": "\ud83e\udd26\u200d\u2642\ufe0f Thanks, I removed it.", "author": "tlrx", "createdAt": "2020-03-20T16:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODQ0Ng=="}], "type": "inlineReview"}, {"oid": "251e4b35c937d62c7e48c81b3fb1f5064db5c1f8", "url": "https://github.com/elastic/elasticsearch/commit/251e4b35c937d62c7e48c81b3fb1f5064db5c1f8", "message": "remove unused", "committedDate": "2020-03-20T16:40:23Z", "type": "commit"}]}