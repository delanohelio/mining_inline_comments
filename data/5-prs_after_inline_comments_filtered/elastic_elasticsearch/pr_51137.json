{"pr_number": 51137, "pr_title": "Add ranged readBlob to S3BlobContainer", "pr_createdAt": "2020-01-17T09:02:55Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51137", "timeline": [{"oid": "c75a2a00069208c68b4ebb124680b1d126731471", "url": "https://github.com/elastic/elasticsearch/commit/c75a2a00069208c68b4ebb124680b1d126731471", "message": "Add ranged readBlob to S3BlobContainer", "committedDate": "2020-01-17T09:00:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MTkzOA==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367851938", "bodyText": "It should be read_blob_incomplete", "author": "tlrx", "createdAt": "2020-01-17T09:54:06Z", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +291,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_no_response\", 0, 1)) {", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzU2OA==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367853568", "bodyText": "Maybe just randomize the call to range/non-range read instead of doing both?", "author": "tlrx", "createdAt": "2020-01-17T09:57:40Z", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -139,8 +143,12 @@ private BlobContainer createBlobContainer(final @Nullable Integer maxRetries,\n \n     public void testReadNonexistentBlobThrowsNoSuchFileException() {\n         final BlobContainer blobContainer = createBlobContainer(between(1, 5), null, null, null);\n-        final Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));\n+        Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));\n         assertThat(exception.getMessage().toLowerCase(Locale.ROOT), containsString(\"blob object [read_nonexistent_blob] not found\"));\n+        final long position = randomLongBetween(0, Long.MAX_VALUE - 1);\n+        final int length = randomIntBetween(0, Math.toIntExact(Math.min(Integer.MAX_VALUE, Long.MAX_VALUE - 1 - position)));", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDk3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367854979", "bodyText": "Maybe rename read_blob_max_retries ->  read_range_blob_max_retries so that each test uses a dedicated Http context (this is no mandatory but can avoid some confusion maybe)?", "author": "tlrx", "createdAt": "2020-01-17T10:00:44Z", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -178,6 +187,50 @@ public void testReadBlobWithRetries() throws Exception {\n         }\n     }\n \n+    public void testReadRangeBlobWithRetries() throws Exception {\n+        final int maxRetries = randomInt(5);\n+        final CountDown countDown = new CountDown(maxRetries + 1);\n+\n+        final byte[] bytes = randomBlobContent();\n+        httpServer.createContext(\"/bucket/read_blob_max_retries\", exchange -> {", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTY5MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367855691", "bodyText": "It pops up here and there, maybe we should put this value in a constant?", "author": "tlrx", "createdAt": "2020-01-17T10:02:27Z", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -397,23 +463,47 @@ public void testWriteLargeBlob() throws Exception {\n         return randomByteArrayOfLength(randomIntBetween(1, frequently() ? 512 : 1 << 20)); // rarely up to 1mb\n     }\n \n-    private static int getRangeStart(HttpExchange exchange) {\n+    private static Tuple<Long, Long> getRange(HttpExchange exchange) {\n         final String rangeHeader = exchange.getRequestHeaders().getFirst(\"Range\");\n         if (rangeHeader == null) {\n-            return 0;\n+            return Tuple.tuple(0L, Long.MAX_VALUE - 1);\n         }\n \n-        final Matcher matcher = Pattern.compile(\"^bytes=([0-9]+)-9223372036854775806$\").matcher(rangeHeader);\n+        final Matcher matcher = Pattern.compile(\"^bytes=([0-9]+)-([0-9]+)$\").matcher(rangeHeader);\n         assertTrue(rangeHeader + \" matches expected pattern\", matcher.matches());\n-        return Math.toIntExact(Long.parseLong(matcher.group(1)));\n+        long rangeStart = Long.parseLong(matcher.group(1));\n+        long rangeEnd = Long.parseLong(matcher.group(2));\n+        assertThat(rangeStart, lessThanOrEqualTo(rangeEnd));\n+        return Tuple.tuple(rangeStart, rangeEnd);\n+    }\n+\n+    private static int getRangeStart(HttpExchange exchange) {\n+        return Math.toIntExact(getRange(exchange).v1());\n+    }\n+\n+    private static Optional<Integer> getRangeEnd(HttpExchange exchange) {\n+        final long rangeEnd = getRange(exchange).v2();\n+        if (rangeEnd == Long.MAX_VALUE - 1) {", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367852269", "bodyText": "I think we could reasonably drop this constructor and use the ranged one everywhere.", "author": "DaveCTurner", "createdAt": "2020-01-17T09:54:51Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3MDM3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367970370", "bodyText": "I prefer to have a separate constructor instead of passing magical values.", "author": "ywelsch", "createdAt": "2020-01-17T14:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDk2Ng==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368034966", "bodyText": "ok", "author": "DaveCTurner", "createdAt": "2020-01-17T16:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MjI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1MzU1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367853551", "bodyText": "end < 0L is redundant since 0 \u2264 start and we're also checking for end < start.", "author": "DaveCTurner", "createdAt": "2020-01-17T09:57:38Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -58,17 +60,32 @@\n     private boolean closed;\n \n     S3RetryingInputStream(S3BlobStore blobStore, String blobKey) throws IOException {\n+        this(blobStore, blobKey, 0, Long.MAX_VALUE - 1);\n+    }\n+\n+    // both start and end are inclusive bounds, following the definition in GetObjectRequest.setRange\n+    S3RetryingInputStream(S3BlobStore blobStore, String blobKey, long start, long end) throws IOException {\n+        if (start < 0L) {\n+            throw new IllegalArgumentException(\"start must be non-negative\");\n+        }\n+        if (end < 0L || end == Long.MAX_VALUE || end < start) {", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NDAzMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r367854031", "bodyText": "Can still be final?", "author": "DaveCTurner", "createdAt": "2020-01-17T09:58:36Z", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -139,8 +143,12 @@ private BlobContainer createBlobContainer(final @Nullable Integer maxRetries,\n \n     public void testReadNonexistentBlobThrowsNoSuchFileException() {\n         final BlobContainer blobContainer = createBlobContainer(between(1, 5), null, null, null);\n-        final Exception exception = expectThrows(NoSuchFileException.class, () -> blobContainer.readBlob(\"read_nonexistent_blob\"));", "originalCommit": "c75a2a00069208c68b4ebb124680b1d126731471", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1ea74062339fdfcf972ed07fe4e686f364afefce", "url": "https://github.com/elastic/elasticsearch/commit/1ea74062339fdfcf972ed07fe4e686f364afefce", "message": "Simple review comments", "committedDate": "2020-01-17T10:52:28Z", "type": "commit"}, {"oid": "ff4361f8f7b6d85631b92c7fbafae679989e265b", "url": "https://github.com/elastic/elasticsearch/commit/ff4361f8f7b6d85631b92c7fbafae679989e265b", "message": "Consume stream when not fully consumed yet", "committedDate": "2020-01-17T14:41:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjE2NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368036165", "bodyText": "I think we need it the other way round:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        e2.addSuppressed(e);\n          \n          \n            \n                        e.addSuppressed(e2);", "author": "DaveCTurner", "createdAt": "2020-01-17T16:53:10Z", "path": "plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3RetryingInputStream.java", "diffHunk": "@@ -122,20 +140,33 @@ private void ensureOpen() {\n \n     private void reopenStreamOrFail(IOException e) throws IOException {\n         if (attempt >= maxAttempts) {\n+            logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], giving up\",\n+                blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n             throw addSuppressedExceptions(e);\n         }\n         logger.debug(new ParameterizedMessage(\"failed reading [{}/{}] at offset [{}], attempt [{}] of [{}], retrying\",\n-            blobStore.bucket(), blobKey, currentOffset, attempt, maxAttempts), e);\n+            blobStore.bucket(), blobKey, start + currentOffset, attempt, maxAttempts), e);\n         attempt += 1;\n         if (failures.size() < MAX_SUPPRESSED_EXCEPTIONS) {\n             failures.add(e);\n         }\n+        try {\n+            Streams.consumeFully(currentStream);\n+        } catch (Exception e2) {\n+            e2.addSuppressed(e);", "originalCommit": "ff4361f8f7b6d85631b92c7fbafae679989e265b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDY1NQ==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368050655", "bodyText": "I actually intended to log it that way. It's not needed anyway, as we already log the original exception above. I have removed this in 0b733f0", "author": "ywelsch", "createdAt": "2020-01-17T17:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNjE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzOTI3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368039270", "bodyText": "Apparently this results in a different exception?\njava.lang.AssertionError: \nExpected: a string containing \"premature end of content-length delimited message body\"\n     but: was \"premature end of chunk coded message body: closing chunk expected\"", "author": "DaveCTurner", "createdAt": "2020-01-17T16:59:56Z", "path": "plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/S3BlobContainerRetriesTests.java", "diffHunk": "@@ -227,7 +339,9 @@ public void testReadBlobWithPrematureConnectionClose() {\n         });\n \n         final Exception exception = expectThrows(ConnectionClosedException.class, () -> {\n-            try (InputStream stream = blobContainer.readBlob(\"read_blob_incomplete\")) {\n+            try (InputStream stream = randomBoolean() ?\n+                    blobContainer.readBlob(\"read_blob_incomplete\") :\n+                    blobContainer.readBlob(\"read_blob_incomplete\", 0, 1)) {", "originalCommit": "ff4361f8f7b6d85631b92c7fbafae679989e265b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDc5OA==", "url": "https://github.com/elastic/elasticsearch/pull/51137#discussion_r368050798", "bodyText": "Thanks, fixed in 6ec202c", "author": "ywelsch", "createdAt": "2020-01-17T17:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzOTI3MA=="}], "type": "inlineReview"}, {"oid": "6ec202c332927d1f3cfaf1053102496fc84cc5d3", "url": "https://github.com/elastic/elasticsearch/commit/6ec202c332927d1f3cfaf1053102496fc84cc5d3", "message": "fix test", "committedDate": "2020-01-17T17:24:50Z", "type": "commit"}, {"oid": "0b733f010e737199194f8bdbb90138ecc09ca33a", "url": "https://github.com/elastic/elasticsearch/commit/0b733f010e737199194f8bdbb90138ecc09ca33a", "message": "no need for suppressed exception, already logged", "committedDate": "2020-01-17T17:25:47Z", "type": "commit"}, {"oid": "2b2b69319f39cacbd210423cc6b573fef6b65333", "url": "https://github.com/elastic/elasticsearch/commit/2b2b69319f39cacbd210423cc6b573fef6b65333", "message": "Merge branch 'feature/searchable-snapshots' into repo-range-requests", "committedDate": "2020-01-20T15:56:30Z", "type": "commit"}, {"oid": "65b532d554b5a8e4f2790802a1d1efbaf85c22dc", "url": "https://github.com/elastic/elasticsearch/commit/65b532d554b5a8e4f2790802a1d1efbaf85c22dc", "message": "fix tests", "committedDate": "2020-01-20T20:36:49Z", "type": "commit"}, {"oid": "4ee2d9ffe1f0eeb44bfd1be9e1cd6dcd78331131", "url": "https://github.com/elastic/elasticsearch/commit/4ee2d9ffe1f0eeb44bfd1be9e1cd6dcd78331131", "message": "moar fixes", "committedDate": "2020-01-20T20:56:57Z", "type": "commit"}, {"oid": "cf193742cff6b9dabace211b559e7ac48a6c61ad", "url": "https://github.com/elastic/elasticsearch/commit/cf193742cff6b9dabace211b559e7ac48a6c61ad", "message": "yet more fixes", "committedDate": "2020-01-20T22:07:08Z", "type": "commit"}]}