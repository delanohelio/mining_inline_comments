{"pr_number": 61839, "pr_title": "Clone Snapshot API", "pr_createdAt": "2020-09-02T10:22:38Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/61839", "timeline": [{"oid": "ae3f108837c916a4f10d32cc2797564548387e77", "url": "https://github.com/elastic/elasticsearch/commit/ae3f108837c916a4f10d32cc2797564548387e77", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-17T17:46:14Z", "type": "commit"}, {"oid": "1f9d70161266199de7bee3b61f51f9845d2e58be", "url": "https://github.com/elastic/elasticsearch/commit/1f9d70161266199de7bee3b61f51f9845d2e58be", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-20T11:00:47Z", "type": "commit"}, {"oid": "f1bf399ce49e1ea9c013c59aa4f8dd27fe8f9d21", "url": "https://github.com/elastic/elasticsearch/commit/f1bf399ce49e1ea9c013c59aa4f8dd27fe8f9d21", "message": "fix docs?", "committedDate": "2020-09-20T11:39:16Z", "type": "commit"}, {"oid": "eed621424feb884d663b2e4dbf4dfac6c30b7e21", "url": "https://github.com/elastic/elasticsearch/commit/eed621424feb884d663b2e4dbf4dfac6c30b7e21", "message": "remove settings for now", "committedDate": "2020-09-20T17:04:19Z", "type": "commit"}, {"oid": "06ce72dd4dd4d35dfae12a2b5c149b999ed5f480", "url": "https://github.com/elastic/elasticsearch/commit/06ce72dd4dd4d35dfae12a2b5c149b999ed5f480", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-21T15:39:58Z", "type": "commit"}, {"oid": "55b2d8490c2a8afb3ccc7eabd50589c19e3e6af2", "url": "https://github.com/elastic/elasticsearch/commit/55b2d8490c2a8afb3ccc7eabd50589c19e3e6af2", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-21T21:19:00Z", "type": "commit"}, {"oid": "95ffa6fd57459ee4b3ae518b0724036cd46b65a0", "url": "https://github.com/elastic/elasticsearch/commit/95ffa6fd57459ee4b3ae518b0724036cd46b65a0", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-22T10:35:27Z", "type": "commit"}, {"oid": "30e623b0534b074fac7b4b209fc90b50c8908f5f", "url": "https://github.com/elastic/elasticsearch/commit/30e623b0534b074fac7b4b209fc90b50c8908f5f", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-28T12:40:02Z", "type": "commit"}, {"oid": "72a7f4bf04d545d079eea1da5a09285006149596", "url": "https://github.com/elastic/elasticsearch/commit/72a7f4bf04d545d079eea1da5a09285006149596", "message": "less noise", "committedDate": "2020-09-28T12:42:03Z", "type": "commit"}, {"oid": "9141f37e824e96bfee0d847dbfb0e2f3522692f5", "url": "https://github.com/elastic/elasticsearch/commit/9141f37e824e96bfee0d847dbfb0e2f3522692f5", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-29T09:54:29Z", "type": "commit"}, {"oid": "c0504fb662be0971345e4807630b74e130aeff23", "url": "https://github.com/elastic/elasticsearch/commit/c0504fb662be0971345e4807630b74e130aeff23", "message": "remove noisy changes", "committedDate": "2020-09-29T10:58:11Z", "type": "commit"}, {"oid": "157ec270824769a4b3c3898e8e0f3d54eba1b678", "url": "https://github.com/elastic/elasticsearch/commit/157ec270824769a4b3c3898e8e0f3d54eba1b678", "message": "reduce noise", "committedDate": "2020-09-29T11:05:07Z", "type": "commit"}, {"oid": "56779b4a7172f186cb82db535e77bc1f5e7bbed8", "url": "https://github.com/elastic/elasticsearch/commit/56779b4a7172f186cb82db535e77bc1f5e7bbed8", "message": "align style", "committedDate": "2020-09-29T11:58:09Z", "type": "commit"}, {"oid": "d504a4e50cf9824c231f9e13893bc49e5c1b884c", "url": "https://github.com/elastic/elasticsearch/commit/d504a4e50cf9824c231f9e13893bc49e5c1b884c", "message": "align style", "committedDate": "2020-09-29T12:00:41Z", "type": "commit"}, {"oid": "ad43cea9bca2af3dc7e6d8caff81683872ca5499", "url": "https://github.com/elastic/elasticsearch/commit/ad43cea9bca2af3dc7e6d8caff81683872ca5499", "message": "making things look nicer", "committedDate": "2020-09-29T12:14:29Z", "type": "commit"}, {"oid": "1a4f1f9814ea083ee66de9d505563f9356f1ea5d", "url": "https://github.com/elastic/elasticsearch/commit/1a4f1f9814ea083ee66de9d505563f9356f1ea5d", "message": "drier", "committedDate": "2020-09-29T13:03:40Z", "type": "commit"}, {"oid": "911457a9967b167ce5f998e630965dea85ab83f8", "url": "https://github.com/elastic/elasticsearch/commit/911457a9967b167ce5f998e630965dea85ab83f8", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-29T13:03:53Z", "type": "commit"}, {"oid": "0a15e5db9e01e5498e9f601071de1b362efddd26", "url": "https://github.com/elastic/elasticsearch/commit/0a15e5db9e01e5498e9f601071de1b362efddd26", "message": "drier", "committedDate": "2020-09-29T13:42:54Z", "type": "commit"}, {"oid": "c3ae02d65cf1d3cb811fb5590f469d7383571c28", "url": "https://github.com/elastic/elasticsearch/commit/c3ae02d65cf1d3cb811fb5590f469d7383571c28", "message": "nicer", "committedDate": "2020-09-29T18:45:04Z", "type": "commit"}, {"oid": "80facac2808da35aaab5ecf61736cbbcdfee9c65", "url": "https://github.com/elastic/elasticsearch/commit/80facac2808da35aaab5ecf61736cbbcdfee9c65", "message": "make some things nicer", "committedDate": "2020-09-29T19:02:00Z", "type": "commit"}, {"oid": "75821afbc5540dd304e559f69ffe9be24031719b", "url": "https://github.com/elastic/elasticsearch/commit/75821afbc5540dd304e559f69ffe9be24031719b", "message": "add validation", "committedDate": "2020-09-29T19:18:04Z", "type": "commit"}, {"oid": "9d4c34830668f3669f8adad57188e8016167a7cd", "url": "https://github.com/elastic/elasticsearch/commit/9d4c34830668f3669f8adad57188e8016167a7cd", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-30T07:44:16Z", "type": "commit"}, {"oid": "3b5b057064bea068645ee71a627b1862b59f0c96", "url": "https://github.com/elastic/elasticsearch/commit/3b5b057064bea068645ee71a627b1862b59f0c96", "message": "less noisy", "committedDate": "2020-09-30T08:01:16Z", "type": "commit"}, {"oid": "9c73e11f96e3d2fefbbc5057ceb9bd5ae86a7acd", "url": "https://github.com/elastic/elasticsearch/commit/9c73e11f96e3d2fefbbc5057ceb9bd5ae86a7acd", "message": "less noise", "committedDate": "2020-09-30T08:34:33Z", "type": "commit"}, {"oid": "0cccd4efd8d066e480aa391dfadb000755dbc1d0", "url": "https://github.com/elastic/elasticsearch/commit/0cccd4efd8d066e480aa391dfadb000755dbc1d0", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-30T12:03:33Z", "type": "commit"}, {"oid": "6942a0fd1dcf66ddfba3a56432ed525305344169", "url": "https://github.com/elastic/elasticsearch/commit/6942a0fd1dcf66ddfba3a56432ed525305344169", "message": "cleaner", "committedDate": "2020-09-30T12:06:20Z", "type": "commit"}, {"oid": "c9410421776d878ce461360641286af798a6db24", "url": "https://github.com/elastic/elasticsearch/commit/c9410421776d878ce461360641286af798a6db24", "message": "safer", "committedDate": "2020-09-30T12:29:20Z", "type": "commit"}, {"oid": "855a1cb2a0b60380f6e9f65a681cf745d6f0714f", "url": "https://github.com/elastic/elasticsearch/commit/855a1cb2a0b60380f6e9f65a681cf745d6f0714f", "message": "better docs", "committedDate": "2020-09-30T12:37:48Z", "type": "commit"}, {"oid": "de8ca3705948f85523830381aa7113f28855cd87", "url": "https://github.com/elastic/elasticsearch/commit/de8ca3705948f85523830381aa7113f28855cd87", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-30T12:54:54Z", "type": "commit"}, {"oid": "78e3110d704d383228ed7b8056a3fe6ebe0d2819", "url": "https://github.com/elastic/elasticsearch/commit/78e3110d704d383228ed7b8056a3fe6ebe0d2819", "message": "better", "committedDate": "2020-09-30T15:19:15Z", "type": "commit"}, {"oid": "38d56ea5c72800aed34ba99bfac3c68fbae73fa4", "url": "https://github.com/elastic/elasticsearch/commit/38d56ea5c72800aed34ba99bfac3c68fbae73fa4", "message": "better", "committedDate": "2020-09-30T15:23:05Z", "type": "commit"}, {"oid": "f0c7df1f1c74b285305a6fd53f2c443d7733aacb", "url": "https://github.com/elastic/elasticsearch/commit/f0c7df1f1c74b285305a6fd53f2c443d7733aacb", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-30T17:22:56Z", "type": "commit"}, {"oid": "db3e957842816e34ed314000b827b2c1033fa40b", "url": "https://github.com/elastic/elasticsearch/commit/db3e957842816e34ed314000b827b2c1033fa40b", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-30T19:13:36Z", "type": "commit"}, {"oid": "e0d38156fdc123655328ad13689ac657b81b336d", "url": "https://github.com/elastic/elasticsearch/commit/e0d38156fdc123655328ad13689ac657b81b336d", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-10-01T06:24:09Z", "type": "commit"}, {"oid": "7266d3ea0bd971f1ffcbeb08107b4b722dbc382d", "url": "https://github.com/elastic/elasticsearch/commit/7266d3ea0bd971f1ffcbeb08107b4b722dbc382d", "message": "nicer", "committedDate": "2020-10-01T07:16:34Z", "type": "commit"}, {"oid": "ec76593610a160d27bc009290ecf6009b34f7260", "url": "https://github.com/elastic/elasticsearch/commit/ec76593610a160d27bc009290ecf6009b34f7260", "message": "simpler diff", "committedDate": "2020-10-01T07:19:11Z", "type": "commit"}, {"oid": "631df59d78f46887910178f07aab08e92c9855e9", "url": "https://github.com/elastic/elasticsearch/commit/631df59d78f46887910178f07aab08e92c9855e9", "message": "fix", "committedDate": "2020-10-01T07:21:34Z", "type": "commit"}, {"oid": "e7bd833383b145ba2a07b036f5dba84d741fa290", "url": "https://github.com/elastic/elasticsearch/commit/e7bd833383b145ba2a07b036f5dba84d741fa290", "message": "TODO", "committedDate": "2020-10-01T07:45:32Z", "type": "commit"}, {"oid": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "url": "https://github.com/elastic/elasticsearch/commit/3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "message": "tests are hard", "committedDate": "2020-10-01T08:10:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE2OTY3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498169676", "bodyText": "I think we are silently losing global metadata and data streams information, are we ok with that?", "author": "tlrx", "createdAt": "2020-10-01T11:22:14Z", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -96,18 +99,52 @@ public static Entry startedEntry(Snapshot snapshot, boolean includeGlobalState,\n                 indices, dataStreams, startTime, repositoryStateId, shards, null, userMetadata, version);\n     }\n \n+    /**\n+     * Creates the initial snapshot clone entry\n+     *\n+     * @param snapshot snapshot to clone into\n+     * @param source   snapshot to clone from\n+     * @param indices  indices to clone\n+     * @param startTime start time\n+     * @param repositoryStateId repository state id that this clone is based on\n+     * @param version repository metadata version to write\n+     * @return snapshot clone entry\n+     */\n+    public static Entry startClone(Snapshot snapshot, SnapshotId source, List<IndexId> indices, long startTime,\n+                                   long repositoryStateId, Version version) {\n+        return new SnapshotsInProgress.Entry(snapshot, false, false, State.STARTED, indices, Collections.emptyList(),", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNDMwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498224309", "bodyText": "My understanding would be yes since the motivation here was cloning indices. That said, I could just add the ability to clone global meta as well in a follow up? It's not hard to add but adds yet another step of complexity to snapshot finalization so that going into a separate step might be a good idea if we want it?", "author": "original-brownbear", "createdAt": "2020-10-01T12:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE2OTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzMDEyOA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498230128", "bodyText": "Again I'm afraid of silent loses. If a snapshot contains the global metadata I'd expect its clone to also contains it (or vice versa). I'm ok for a follow up as long as it lands in the feature before it's backported.", "author": "tlrx", "createdAt": "2020-10-01T13:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE2OTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NTkwOQ==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498275909", "bodyText": "Actually ... turns out bdd6943 is all that's needed to get the global metadata into the clone. The more interesting question is data streams. I'm not sure we would just want to clone those as well every time because of how they interact with indices. That might technically need smarter logic there, I'll look into those in a follow-up.", "author": "original-brownbear", "createdAt": "2020-10-01T14:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE2OTY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NDM4MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498174381", "bodyText": "Do you think we could have a test that fails to clone a snapshot with failed indices?", "author": "tlrx", "createdAt": "2020-10-01T11:31:51Z", "path": "server/src/internalClusterTest/java/org/elasticsearch/snapshots/CloneSnapshotIT.java", "diffHunk": "@@ -107,6 +122,365 @@ public void testShardClone() throws Exception {\n         assertEquals(newShardGeneration, newShardGeneration2);\n     }\n \n+    public void testCloneSnapshotIndex() throws Exception {\n+        internalCluster().startMasterOnlyNode();\n+        internalCluster().startDataOnlyNode();\n+        final String repoName = \"repo-name\";\n+        createRepository(repoName, \"fs\");\n+\n+        final String indexName = \"index-1\";\n+        createIndexWithRandomDocs(indexName, randomIntBetween(5, 10));\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        indexRandomDocs(indexName, randomIntBetween(20, 100));\n+        if (randomBoolean()) {\n+            assertAcked(admin().indices().prepareDelete(indexName));\n+        }\n+        final String targetSnapshot = \"target-snapshot\";\n+        assertAcked(startClone(repoName, sourceSnapshot, targetSnapshot, indexName).get());\n+\n+        final List<SnapshotStatus> status = clusterAdmin().prepareSnapshotStatus(repoName)\n+                .setSnapshots(sourceSnapshot, targetSnapshot).get().getSnapshots();\n+        assertThat(status, hasSize(2));\n+        final SnapshotIndexStatus status1 = status.get(0).getIndices().get(indexName);\n+        final SnapshotIndexStatus status2 = status.get(1).getIndices().get(indexName);\n+        assertEquals(status1.getStats().getTotalFileCount(), status2.getStats().getTotalFileCount());\n+        assertEquals(status1.getStats().getTotalSize(), status2.getStats().getTotalSize());\n+    }\n+\n+    public void testClonePreventsSnapshotDelete() throws Exception {\n+        final String masterName = internalCluster().startMasterOnlyNode();\n+        internalCluster().startDataOnlyNode();\n+        final String repoName = \"repo-name\";\n+        createRepository(repoName, \"mock\");\n+\n+        final String indexName = \"index-1\";\n+        createIndexWithRandomDocs(indexName, randomIntBetween(5, 10));\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        indexRandomDocs(indexName, randomIntBetween(20, 100));\n+\n+        final String targetSnapshot = \"target-snapshot\";\n+        blockNodeOnAnyFiles(repoName, masterName);\n+        final ActionFuture<AcknowledgedResponse> cloneFuture = startClone(repoName, sourceSnapshot, targetSnapshot, indexName);\n+        waitForBlock(masterName, repoName, TimeValue.timeValueSeconds(30L));\n+        assertFalse(cloneFuture.isDone());\n+\n+        ConcurrentSnapshotExecutionException ex = expectThrows(ConcurrentSnapshotExecutionException.class,\n+                () -> startDeleteSnapshot(repoName, sourceSnapshot).actionGet());\n+        assertThat(ex.getMessage(), containsString(\"cannot delete snapshot while it is being cloned\"));\n+\n+        unblockNode(repoName, masterName);\n+        assertAcked(cloneFuture.get());\n+        final List<SnapshotStatus> status = clusterAdmin().prepareSnapshotStatus(repoName)\n+                .setSnapshots(sourceSnapshot, targetSnapshot).get().getSnapshots();\n+        assertThat(status, hasSize(2));\n+        final SnapshotIndexStatus status1 = status.get(0).getIndices().get(indexName);\n+        final SnapshotIndexStatus status2 = status.get(1).getIndices().get(indexName);\n+        assertEquals(status1.getStats().getTotalFileCount(), status2.getStats().getTotalFileCount());\n+        assertEquals(status1.getStats().getTotalSize(), status2.getStats().getTotalSize());\n+    }\n+\n+    public void testConcurrentCloneAndSnapshot() throws Exception {\n+        internalCluster().startMasterOnlyNode();\n+        final String dataNode = internalCluster().startDataOnlyNode();\n+        final String repoName = \"repo-name\";\n+        createRepository(repoName, \"mock\");\n+\n+        final String indexName = \"index-1\";\n+        createIndexWithRandomDocs(indexName, randomIntBetween(5, 10));\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        indexRandomDocs(indexName, randomIntBetween(20, 100));\n+\n+        final String targetSnapshot = \"target-snapshot\";\n+        final ActionFuture<CreateSnapshotResponse> snapshot2Future =\n+                startFullSnapshotBlockedOnDataNode(\"snapshot-2\", repoName, dataNode);\n+        waitForBlock(dataNode, repoName, TimeValue.timeValueSeconds(30L));\n+        final ActionFuture<AcknowledgedResponse> cloneFuture = startClone(repoName, sourceSnapshot, targetSnapshot, indexName);\n+        awaitNumberOfSnapshotsInProgress(2);\n+        unblockNode(repoName, dataNode);\n+        assertAcked(cloneFuture.get());\n+        assertSuccessful(snapshot2Future);\n+    }\n+\n+    public void testLongRunningCloneAllowsConcurrentSnapshot() throws Exception {\n+        // large snapshot pool so blocked snapshot threads from cloning don't prevent concurrent snapshot finalizations\n+        final String masterNode = internalCluster().startMasterOnlyNode(LARGE_SNAPSHOT_POOL_SETTINGS);\n+        internalCluster().startDataOnlyNode();\n+        final String repoName = \"test-repo\";\n+        createRepository(repoName, \"mock\");\n+        final String indexSlow = \"index-slow\";\n+        createIndexWithContent(indexSlow);\n+\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        final String targetSnapshot = \"target-snapshot\";\n+        blockMasterOnShardClone(repoName);\n+        final ActionFuture<AcknowledgedResponse> cloneFuture = startClone(repoName, sourceSnapshot, targetSnapshot, indexSlow);\n+        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n+\n+        final String indexFast = \"index-fast\";\n+        createIndexWithRandomDocs(indexFast, randomIntBetween(20, 100));\n+\n+        assertSuccessful(clusterAdmin().prepareCreateSnapshot(repoName, \"fast-snapshot\")\n+                .setIndices(indexFast).setWaitForCompletion(true).execute());\n+\n+        assertThat(cloneFuture.isDone(), is(false));\n+        unblockNode(repoName, masterNode);\n+\n+        assertAcked(cloneFuture.get());\n+    }\n+\n+    public void testLongRunningSnapshotAllowsConcurrentClone() throws Exception {\n+        internalCluster().startMasterOnlyNode();\n+        final String dataNode = internalCluster().startDataOnlyNode();\n+        final String repoName = \"test-repo\";\n+        createRepository(repoName, \"mock\");\n+        final String indexSlow = \"index-slow\";\n+        createIndexWithContent(indexSlow);\n+\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        final String indexFast = \"index-fast\";\n+        createIndexWithRandomDocs(indexFast, randomIntBetween(20, 100));\n+\n+        blockDataNode(repoName, dataNode);\n+        final ActionFuture<CreateSnapshotResponse> snapshotFuture = clusterAdmin()\n+                .prepareCreateSnapshot(repoName, \"fast-snapshot\").setIndices(indexFast).setWaitForCompletion(true).execute();\n+        waitForBlock(dataNode, repoName, TimeValue.timeValueSeconds(30L));\n+\n+        final String targetSnapshot = \"target-snapshot\";\n+        assertAcked(startClone(repoName, sourceSnapshot, targetSnapshot, indexSlow).get());\n+\n+        assertThat(snapshotFuture.isDone(), is(false));\n+        unblockNode(repoName, dataNode);\n+\n+        assertSuccessful(snapshotFuture);\n+    }\n+\n+    public void testDeletePreventsClone() throws Exception {\n+        final String masterName = internalCluster().startMasterOnlyNode();\n+        internalCluster().startDataOnlyNode();\n+        final String repoName = \"repo-name\";\n+        createRepository(repoName, \"mock\");\n+\n+        final String indexName = \"index-1\";\n+        createIndexWithRandomDocs(indexName, randomIntBetween(5, 10));\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        indexRandomDocs(indexName, randomIntBetween(20, 100));\n+\n+        final String targetSnapshot = \"target-snapshot\";\n+        blockNodeOnAnyFiles(repoName, masterName);\n+        final ActionFuture<AcknowledgedResponse> deleteFuture = startDeleteSnapshot(repoName, sourceSnapshot);\n+        waitForBlock(masterName, repoName, TimeValue.timeValueSeconds(30L));\n+        assertFalse(deleteFuture.isDone());\n+\n+        ConcurrentSnapshotExecutionException ex = expectThrows(ConcurrentSnapshotExecutionException.class, () ->\n+                startClone(repoName, sourceSnapshot, targetSnapshot, indexName).actionGet());\n+        assertThat(ex.getMessage(), containsString(\"cannot clone from snapshot that is being deleted\"));\n+\n+        unblockNode(repoName, masterName);\n+        assertAcked(deleteFuture.get());\n+    }\n+\n+    public void testBackToBackClonesForIndexNotInCluster() throws Exception {\n+        // large snapshot pool so blocked snapshot threads from cloning don't prevent concurrent snapshot finalizations\n+        final String masterNode = internalCluster().startMasterOnlyNode(LARGE_SNAPSHOT_POOL_SETTINGS);\n+        internalCluster().startDataOnlyNode();\n+        final String repoName = \"test-repo\";\n+        createRepository(repoName, \"mock\");\n+        final String indexBlocked = \"index-blocked\";\n+        createIndexWithContent(indexBlocked);\n+\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        assertAcked(admin().indices().prepareDelete(indexBlocked).get());\n+\n+        final String targetSnapshot1 = \"target-snapshot\";\n+        blockMasterOnShardClone(repoName);\n+        final ActionFuture<AcknowledgedResponse> cloneFuture1 = startClone(repoName, sourceSnapshot, targetSnapshot1, indexBlocked);\n+        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n+        assertThat(cloneFuture1.isDone(), is(false));\n+\n+        final int extraClones = randomIntBetween(1, 5);\n+        final List<ActionFuture<AcknowledgedResponse>> extraCloneFutures = new ArrayList<>(extraClones);\n+        for (int i = 0; i < extraClones; i++) {\n+            extraCloneFutures.add(startClone(repoName, sourceSnapshot, \"target-snapshot-\" + i, indexBlocked));\n+        }\n+        awaitNumberOfSnapshotsInProgress(1 + extraClones);\n+        for (ActionFuture<AcknowledgedResponse> extraCloneFuture : extraCloneFutures) {\n+            assertFalse(extraCloneFuture.isDone());\n+        }\n+\n+        final int extraSnapshots = randomIntBetween(0, 5);\n+        if (extraSnapshots > 0) {\n+            createIndexWithContent(indexBlocked);\n+        }\n+\n+        final List<ActionFuture<CreateSnapshotResponse>> extraSnapshotFutures = new ArrayList<>(extraSnapshots);\n+        for (int i = 0; i < extraSnapshots; i++) {\n+            extraSnapshotFutures.add(startFullSnapshot(repoName, \"extra-snap-\" + i));\n+        }\n+\n+        awaitNumberOfSnapshotsInProgress(1 + extraClones + extraSnapshots);\n+        for (ActionFuture<CreateSnapshotResponse> extraSnapshotFuture : extraSnapshotFutures) {\n+            assertFalse(extraSnapshotFuture.isDone());\n+        }\n+\n+        unblockNode(repoName, masterNode);\n+        assertAcked(cloneFuture1.get());\n+\n+        for (ActionFuture<AcknowledgedResponse> extraCloneFuture : extraCloneFutures) {\n+            assertAcked(extraCloneFuture.get());\n+        }\n+        for (ActionFuture<CreateSnapshotResponse> extraSnapshotFuture : extraSnapshotFutures) {\n+            assertSuccessful(extraSnapshotFuture);\n+        }\n+    }\n+\n+    public void testMasterFailoverDuringCloneStep1() throws Exception {\n+        internalCluster().startMasterOnlyNodes(3);\n+        internalCluster().startDataOnlyNode();\n+        final String repoName = \"test-repo\";\n+        createRepository(repoName, \"mock\");\n+        final String testIndex = \"index-test\";\n+        createIndexWithContent(testIndex);\n+\n+        final String sourceSnapshot = \"source-snapshot\";\n+        createFullSnapshot(repoName, sourceSnapshot);\n+\n+        blockMasterOnReadIndexMeta(repoName);\n+        final ActionFuture<AcknowledgedResponse> cloneFuture =\n+                startCloneFromDataNode(repoName, sourceSnapshot, \"target-snapshot\", testIndex);\n+        awaitNumberOfSnapshotsInProgress(1);\n+        final String masterNode = internalCluster().getMasterName();\n+        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n+        internalCluster().restartNode(masterNode);\n+        boolean cloneSucceeded = false;\n+        try {\n+            cloneFuture.actionGet(TimeValue.timeValueSeconds(30L));\n+            cloneSucceeded = true;\n+        } catch (SnapshotException sne) {\n+            // ignored, most of the time we will throw here but we could randomly run into a situation where the data node retries the\n+            // snapshot on disconnect slowly enough for it to work out\n+        }\n+\n+        awaitNoMoreRunningOperations(internalCluster().getMasterName());\n+\n+        assertAllSnapshotsSuccessful(getRepositoryData(repoName), cloneSucceeded ? 2 : 1);\n+    }\n+\n+    public void testFailsOnCloneMissingIndices() {", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzI1MA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498223250", "bodyText": "Yea we definitely should have one (could've sworn I added one already but apparently not ...), on it.", "author": "original-brownbear", "createdAt": "2020-10-01T12:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4NTUxMA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498685510", "bodyText": "Added in 6e5b74b  :)", "author": "original-brownbear", "createdAt": "2020-10-02T08:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3NDM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE4MjA2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498182069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assert assertShardsConsistent(source, state, indices, shards, this.clones);\n          \n          \n            \n                        assert assertShardsConsistent(this.source, this.state, this.indices, this.shards, this.clones);", "author": "tlrx", "createdAt": "2020-10-01T11:47:27Z", "path": "server/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java", "diffHunk": "@@ -124,11 +170,18 @@ public Entry(Snapshot snapshot, boolean includeGlobalState, boolean partial, Sta\n             this.dataStreams = dataStreams;\n             this.startTime = startTime;\n             this.shards = shards;\n-            assert assertShardsConsistent(state, indices, shards);\n             this.repositoryStateId = repositoryStateId;\n             this.failure = failure;\n             this.userMetadata = userMetadata;\n             this.version = version;\n+            this.source = source;\n+            if (source == null) {\n+                assert clones == null || clones.isEmpty() : \"Provided [\" + clones + \"] but no source\";\n+                this.clones = ImmutableOpenMap.of();\n+            } else {\n+                this.clones = clones;\n+            }\n+            assert assertShardsConsistent(source, state, indices, shards, this.clones);", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE4OTM2NA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498189364", "bodyText": "Maybe move this few steps up, after final String repositoryName = request.repository();", "author": "tlrx", "createdAt": "2020-10-01T12:01:10Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -313,6 +308,275 @@ public TimeValue timeout() {\n         }, \"create_snapshot [\" + snapshotName + ']', listener::onFailure);\n     }\n \n+    private static void ensureSnapshotNameNotRunning(List<SnapshotsInProgress.Entry> runningSnapshots, String repositoryName,\n+                                                     String snapshotName) {\n+        if (runningSnapshots.stream().anyMatch(s -> {\n+            final Snapshot running = s.snapshot();\n+            return running.getRepository().equals(repositoryName) && running.getSnapshotId().getName().equals(snapshotName);\n+        })) {\n+            throw new InvalidSnapshotNameException(repositoryName, snapshotName, \"snapshot with the same name is already in-progress\");\n+        }\n+    }\n+\n+    private static Map<String, IndexId> getInFlightIndexIds(List<SnapshotsInProgress.Entry> runningSnapshots, String repositoryName) {\n+        return runningSnapshots.stream().filter(entry -> entry.repository().equals(repositoryName))\n+                .flatMap(entry -> entry.indices().stream()).distinct()\n+                .collect(Collectors.toMap(IndexId::getName, Function.identity()));\n+    }\n+\n+    public void cloneSnapshot(CloneSnapshotRequest request, ActionListener<Void> listener) {\n+        final String repositoryName = request.repository();\n+        final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.target());\n+        validate(repositoryName, snapshotName);\n+        Repository repository = repositoriesService.repository(repositoryName);\n+        if (repository.isReadOnly()) {", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzA3OA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498303078", "bodyText": "done :)", "author": "original-brownbear", "createdAt": "2020-10-01T14:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE4OTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5Njk3NA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498196974", "bodyText": "nit: indentation messed up here, making the code difficult to read", "author": "tlrx", "createdAt": "2020-10-01T12:15:08Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -313,6 +308,275 @@ public TimeValue timeout() {\n         }, \"create_snapshot [\" + snapshotName + ']', listener::onFailure);\n     }\n \n+    private static void ensureSnapshotNameNotRunning(List<SnapshotsInProgress.Entry> runningSnapshots, String repositoryName,\n+                                                     String snapshotName) {\n+        if (runningSnapshots.stream().anyMatch(s -> {\n+            final Snapshot running = s.snapshot();\n+            return running.getRepository().equals(repositoryName) && running.getSnapshotId().getName().equals(snapshotName);\n+        })) {\n+            throw new InvalidSnapshotNameException(repositoryName, snapshotName, \"snapshot with the same name is already in-progress\");\n+        }\n+    }\n+\n+    private static Map<String, IndexId> getInFlightIndexIds(List<SnapshotsInProgress.Entry> runningSnapshots, String repositoryName) {\n+        return runningSnapshots.stream().filter(entry -> entry.repository().equals(repositoryName))\n+                .flatMap(entry -> entry.indices().stream()).distinct()\n+                .collect(Collectors.toMap(IndexId::getName, Function.identity()));\n+    }\n+\n+    public void cloneSnapshot(CloneSnapshotRequest request, ActionListener<Void> listener) {\n+        final String repositoryName = request.repository();\n+        final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.target());\n+        validate(repositoryName, snapshotName);\n+        Repository repository = repositoriesService.repository(repositoryName);\n+        if (repository.isReadOnly()) {\n+            listener.onFailure(new RepositoryException(repositoryName, \"cannot create snapshot in a readonly repository\"));\n+            return;\n+        }\n+        final SnapshotId snapshotId = new SnapshotId(snapshotName, UUIDs.randomBase64UUID());\n+        final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);\n+        initializingClones.add(snapshot);\n+        repository.executeConsistentStateUpdate(repositoryData -> new ClusterStateUpdateTask() {\n+\n+            private SnapshotsInProgress.Entry newEntry;\n+\n+            @Override\n+            public ClusterState execute(ClusterState currentState) {\n+                ensureSnapshotNameAvailableInRepo(repositoryData, snapshotName, repository);\n+                ensureNoCleanupInProgress(currentState, repositoryName, snapshotName);\n+                final SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY);\n+                final List<SnapshotsInProgress.Entry> runningSnapshots = snapshots.entries();\n+                ensureSnapshotNameNotRunning(runningSnapshots, repositoryName, snapshotName);\n+                validate(repositoryName, snapshotName, currentState);\n+\n+                final SnapshotId sourceSnapshotId = repositoryData.getSnapshotIds()\n+                        .stream()\n+                        .filter(src -> src.getName().equals(request.source()))\n+                        .findAny()\n+                        .orElseThrow(() -> new SnapshotMissingException(repositoryName, request.source()));\n+                final SnapshotDeletionsInProgress deletionsInProgress =\n+                        currentState.custom(SnapshotDeletionsInProgress.TYPE, SnapshotDeletionsInProgress.EMPTY);\n+                if (deletionsInProgress.getEntries().stream().anyMatch(entry -> entry.getSnapshots().contains(sourceSnapshotId))) {\n+                    throw new ConcurrentSnapshotExecutionException(repositoryName, sourceSnapshotId.getName(),\n+                            \"cannot clone from snapshot that is being deleted\");\n+                }\n+                ensureBelowConcurrencyLimit(repositoryName, snapshotName, snapshots, deletionsInProgress);\n+                final List<String> indicesForSnapshot = new ArrayList<>();\n+                for (IndexId indexId : repositoryData.getIndices().values()) {\n+                    if (repositoryData.getSnapshots(indexId).contains(sourceSnapshotId)) {\n+                        indicesForSnapshot.add(indexId.getName());\n+                    }\n+                }\n+                final List<String> matchingIndices =\n+                        SnapshotUtils.filterIndices(indicesForSnapshot, request.indices(), request.indicesOptions());\n+                if (matchingIndices.isEmpty()) {\n+                    throw new SnapshotException(new Snapshot(repositoryName, sourceSnapshotId),\n+                            \"No indices in the source snapshot [\" + sourceSnapshotId + \"] matched requested pattern [\"\n+                                    + Strings.arrayToCommaDelimitedString(request.indices()) + \"]\");\n+                }\n+                newEntry = SnapshotsInProgress.startClone(\n+                        snapshot, sourceSnapshotId,\n+                        repositoryData.resolveIndices(matchingIndices),\n+                        threadPool.absoluteTimeInMillis(), repositoryData.getGenId(),\n+                        minCompatibleVersion(currentState.nodes().getMinNodeVersion(), repositoryData, null));\n+                final List<SnapshotsInProgress.Entry> newEntries = new ArrayList<>(runningSnapshots);\n+                newEntries.add(newEntry);\n+                return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE,\n+                        SnapshotsInProgress.of(List.copyOf(newEntries))).build();\n+            }\n+\n+            @Override\n+            public void onFailure(String source, Exception e) {\n+                initializingClones.remove(snapshot);\n+                logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to clone snapshot\", repositoryName, snapshotName), e);\n+                listener.onFailure(e);\n+            }\n+\n+            @Override\n+            public void clusterStateProcessed(String source, ClusterState oldState, final ClusterState newState) {\n+                logger.info(\"snapshot clone [{}] started\", snapshot);\n+                addListener(snapshot, ActionListener.wrap(r -> listener.onResponse(null), listener::onFailure));\n+                startCloning(repository, newEntry);\n+            }\n+\n+            @Override\n+            public TimeValue timeout() {\n+                initializingClones.remove(snapshot);\n+                return request.masterNodeTimeout();\n+            }\n+        }, \"clone_snapshot [\" + request.source() + \"][\" + snapshotName + ']', listener::onFailure);\n+    }\n+\n+    private static void ensureNoCleanupInProgress(ClusterState currentState, String repositoryName, String snapshotName) {\n+        final RepositoryCleanupInProgress repositoryCleanupInProgress =\n+                currentState.custom(RepositoryCleanupInProgress.TYPE, RepositoryCleanupInProgress.EMPTY);\n+        if (repositoryCleanupInProgress.hasCleanupInProgress()) {\n+            throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n+                    \"cannot snapshot while a repository cleanup is in-progress in [\" + repositoryCleanupInProgress + \"]\");\n+        }\n+    }\n+\n+    private static void ensureSnapshotNameAvailableInRepo(RepositoryData repositoryData, String snapshotName, Repository repository) {\n+        // check if the snapshot name already exists in the repository\n+        if (repositoryData.getSnapshotIds().stream().anyMatch(s -> s.getName().equals(snapshotName))) {\n+            throw new InvalidSnapshotNameException(\n+                    repository.getMetadata().name(), snapshotName, \"snapshot with the same name already exists\");\n+        }\n+    }\n+\n+    /**\n+     * Determine the number of shards in each index of a clone operation and update the cluster state accordingly.\n+     *\n+     * @param repository     repository to run operation on\n+     * @param cloneEntry     clone operation in the cluster state\n+     */\n+    private void startCloning(Repository repository, SnapshotsInProgress.Entry cloneEntry) {\n+        final List<IndexId> indices = cloneEntry.indices();\n+        final SnapshotId sourceSnapshot = cloneEntry.source();\n+        final Snapshot targetSnapshot = cloneEntry.snapshot();\n+\n+        final Executor executor = threadPool.executor(ThreadPool.Names.SNAPSHOT);\n+        // Exception handler for IO exceptions with loading index and repo metadata\n+        final Consumer<Exception> onFailure = e -> {\n+            initializingClones.remove(targetSnapshot);\n+            logger.info(() -> new ParameterizedMessage(\"Failed to start snapshot clone [{}]\", cloneEntry), e);\n+            removeFailedSnapshotFromClusterState(targetSnapshot, e, null);\n+        };\n+\n+        // 1. step, load SnapshotInfo to make sure that source snapshot was successful for the indices we want to clone\n+        // TODO: we could skip this step for snapshots with state SUCCESS\n+        final StepListener<SnapshotInfo> snapshotInfoListener = new StepListener<>();\n+        executor.execute(ActionRunnable.supply(snapshotInfoListener, () -> repository.getSnapshotInfo(sourceSnapshot)));\n+\n+        final StepListener<Collection<Tuple<IndexId, Integer>>> allShardCountsListener = new StepListener<>();\n+        final GroupedActionListener<Tuple<IndexId, Integer>> shardCountListener =\n+                new GroupedActionListener<>(allShardCountsListener, indices.size());\n+        snapshotInfoListener.whenComplete(snapshotInfo -> {\n+            for (IndexId indexId : indices) {\n+                if (RestoreService.failed(snapshotInfo, indexId.getName())) {\n+                    throw new SnapshotException(targetSnapshot, \"Can't clone index [\" + indexId +\n+                            \"] because its snapshot is was not successful.\");\n+                }\n+            }\n+            // 2. step, load the number of shards we have in each index to be cloned from the index metadata.\n+            repository.getRepositoryData(ActionListener.wrap(repositoryData -> {\n+                for (IndexId index : indices) {\n+                    executor.execute(ActionRunnable.supply(shardCountListener, () -> {\n+                        final IndexMetadata metadata = repository.getSnapshotIndexMetaData(repositoryData, sourceSnapshot, index);\n+                        return Tuple.tuple(index, metadata.getNumberOfShards());\n+                    }));\n+                }\n+            }, onFailure));\n+        }, onFailure);\n+\n+        // 3. step, we have all the shard counts, now update the cluster state to have clone jobs in the snap entry\n+        allShardCountsListener.whenComplete(counts -> repository.executeConsistentStateUpdate(repoData -> new ClusterStateUpdateTask() {\n+\n+            private SnapshotsInProgress.Entry updatedEntry;\n+\n+            @Override\n+            public ClusterState execute(ClusterState currentState) {\n+                final SnapshotsInProgress snapshotsInProgress =\n+                        currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY);\n+                final List<SnapshotsInProgress.Entry> updatedEntries = new ArrayList<>(snapshotsInProgress.entries());\n+                boolean changed = false;\n+                final String localNodeId = currentState.nodes().getLocalNodeId();\n+                final String repoName = cloneEntry.repository();\n+                final Map<String, IndexId> indexIds = getInFlightIndexIds(updatedEntries, repoName);\n+                final ShardGenerations shardGenerations = repoData.shardGenerations();\n+                for (int i = 0; i < updatedEntries.size(); i++) {\n+                    if (cloneEntry.equals(updatedEntries.get(i))) {\n+                        final ImmutableOpenMap.Builder<RepositoryShardId, ShardSnapshotStatus> clonesBuilder =\n+                                ImmutableOpenMap.builder();\n+                        // TODO: could be optimized by just dealing with repo shard id directly\n+                        final Set<RepositoryShardId> busyShardsInRepo =\n+                                busyShardsForRepo(repoName, snapshotsInProgress, currentState.metadata())\n+                                        .stream()\n+                                        .map(shardId -> new RepositoryShardId(indexIds.get(shardId.getIndexName()), shardId.getId()))\n+                                        .collect(Collectors.toSet());\n+                        for (Tuple<IndexId, Integer> count : counts) {\n+                            for (int shardId = 0; shardId < count.v2(); shardId++) {\n+                                final RepositoryShardId repoShardId = new RepositoryShardId(count.v1(), shardId);\n+                                if (busyShardsInRepo.contains(repoShardId)) {\n+                                    clonesBuilder.put(repoShardId, ShardSnapshotStatus.UNASSIGNED_QUEUED);\n+                                } else {\n+                                    clonesBuilder.put(repoShardId,\n+                                            new ShardSnapshotStatus(localNodeId, shardGenerations.getShardGen(count.v1(), shardId)));\n+                                }\n+                            }\n+                        }\n+                        updatedEntry = cloneEntry.withClones(clonesBuilder.build());\n+                        updatedEntries.set(i, updatedEntry);\n+                        changed = true;\n+                        break;\n+                    }\n+                }\n+                return updateWithSnapshots(currentState, changed ? SnapshotsInProgress.of(updatedEntries) : null, null);\n+            }\n+\n+            @Override\n+            public void onFailure(String source, Exception e) {\n+                initializingClones.remove(targetSnapshot);\n+                logger.info(() -> new ParameterizedMessage(\"Failed to start snapshot clone [{}]\", cloneEntry), e);\n+                failAllListenersOnMasterFailOver(e);\n+            }\n+\n+            @Override\n+            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n+                initializingClones.remove(targetSnapshot);\n+                if (updatedEntry != null) {\n+                    final Snapshot target = updatedEntry.snapshot();\n+                    final SnapshotId sourceSnapshot = updatedEntry.source();\n+                    for (ObjectObjectCursor<RepositoryShardId, ShardSnapshotStatus> indexClone : updatedEntry.clones()) {\n+                        final ShardSnapshotStatus shardStatusBefore = indexClone.value;\n+                        if (shardStatusBefore.state() != ShardState.INIT) {\n+                            continue;\n+                        }\n+                        final RepositoryShardId repoShardId = indexClone.key;\n+                        runReadyClone(target, sourceSnapshot, shardStatusBefore, repoShardId, repository);\n+                    }\n+                } else {\n+                    // Extremely unlikely corner case of master failing over between between starting the clone and\n+                    // starting shard clones.\n+                    logger.warn(\"Did not find expected entry [{}] in the cluster state\", cloneEntry);\n+                }\n+            }\n+        }, \"start snapshot clone\", onFailure), onFailure);\n+    }\n+\n+    private final Set<RepositoryShardId> currentlyCloning = Collections.synchronizedSet(new HashSet<>());\n+\n+    private void runReadyClone(Snapshot target, SnapshotId sourceSnapshot, ShardSnapshotStatus shardStatusBefore,\n+                               RepositoryShardId repoShardId, Repository repository) {\n+        final SnapshotId targetSnapshot = target.getSnapshotId();\n+        final String localNodeId = clusterService.localNode().getId();\n+        if (currentlyCloning.add(repoShardId)) {\n+            repository.cloneShardSnapshot(sourceSnapshot, targetSnapshot, repoShardId,", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMjQzNg==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498212436", "bodyText": "nit: ident", "author": "tlrx", "createdAt": "2020-10-01T12:40:58Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1159,6 +1465,17 @@ public ClusterState execute(ClusterState currentState) {\n                 if (snapshotIds.isEmpty()) {\n                     return currentState;\n                 }\n+                final Set<SnapshotId> activeCloneSources = snapshots.entries()\n+                        .stream()\n+                        .filter(entry -> entry.source() != null)\n+                        .map(SnapshotsInProgress.Entry::source\n+                        ).collect(Collectors.toSet());", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMzExMg==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498213112", "bodyText": "It's use everywhere, maybe adding a method isClone() returning source != null would be more explicit?", "author": "tlrx", "createdAt": "2020-10-01T12:42:01Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1809,16 +2126,32 @@ public static ClusterState updateWithSnapshots(ClusterState state,\n      * @param snapshots    snapshots in progress\n      * @return shard ids that currently have an actively executing shard snapshot on a data node\n      */\n-    private static Set<ShardId> busyShardsForRepo(String repoName, @Nullable SnapshotsInProgress snapshots) {\n+    private static Set<ShardId> busyShardsForRepo(String repoName, @Nullable SnapshotsInProgress snapshots, Metadata metadata) {\n         final List<SnapshotsInProgress.Entry> runningSnapshots = snapshots == null ? List.of() : snapshots.entries();\n         final Set<ShardId> inProgressShards = new HashSet<>();\n         for (SnapshotsInProgress.Entry runningSnapshot : runningSnapshots) {\n             if (runningSnapshot.repository().equals(repoName) == false) {\n                 continue;\n             }\n-            for (ObjectObjectCursor<ShardId, ShardSnapshotStatus> shard : runningSnapshot.shards()) {\n-                if (shard.value.isActive()) {\n-                    inProgressShards.add(shard.key);\n+            if (runningSnapshot.source() == null) {", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDU2Mw==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498314563", "bodyText": "++  added that, much nicer now :)", "author": "original-brownbear", "createdAt": "2020-10-01T15:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMzExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMzU3MQ==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498213571", "bodyText": "Maybe activeShardsForRepo would be more appropriate?", "author": "tlrx", "createdAt": "2020-10-01T12:42:46Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1809,16 +2126,32 @@ public static ClusterState updateWithSnapshots(ClusterState state,\n      * @param snapshots    snapshots in progress\n      * @return shard ids that currently have an actively executing shard snapshot on a data node\n      */\n-    private static Set<ShardId> busyShardsForRepo(String repoName, @Nullable SnapshotsInProgress snapshots) {\n+    private static Set<ShardId> busyShardsForRepo(String repoName, @Nullable SnapshotsInProgress snapshots, Metadata metadata) {", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4NjY0Nw==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498686647", "bodyText": "Maybe I'm indifferent to the naming here, I'd say let's not rename things we don't have to rename in this one to keep the noise down maybe? There's a TODO to refactor the use of this method anyway and we can do better with the naming when we get to that?", "author": "original-brownbear", "createdAt": "2020-10-02T08:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMzU3MQ=="}], "type": "inlineReview"}, {"oid": "6ba89cb1bb5e33ee92c15f62789a1ad03b51a7b9", "url": "https://github.com/elastic/elasticsearch/commit/6ba89cb1bb5e33ee92c15f62789a1ad03b51a7b9", "message": "fix doc", "committedDate": "2020-10-01T14:00:02Z", "type": "commit"}, {"oid": "2432ab2c62b3770ab27fd60aa946f6a7a62ee34f", "url": "https://github.com/elastic/elasticsearch/commit/2432ab2c62b3770ab27fd60aa946f6a7a62ee34f", "message": "fix doc", "committedDate": "2020-10-01T14:00:32Z", "type": "commit"}, {"oid": "bdd6943f91386b376807b7efd9a3daa247926bea", "url": "https://github.com/elastic/elasticsearch/commit/bdd6943f91386b376807b7efd9a3daa247926bea", "message": "include global metadata", "committedDate": "2020-10-01T14:07:54Z", "type": "commit"}, {"oid": "6d6c592745d04a073672d3d4eefdfddbdaa3017f", "url": "https://github.com/elastic/elasticsearch/commit/6d6c592745d04a073672d3d4eefdfddbdaa3017f", "message": "fix indent", "committedDate": "2020-10-01T14:22:53Z", "type": "commit"}, {"oid": "900eabaa2f4f6a783bfec3fce9d16ddffa0e3c55", "url": "https://github.com/elastic/elasticsearch/commit/900eabaa2f4f6a783bfec3fce9d16ddffa0e3c55", "message": "fix indent", "committedDate": "2020-10-01T14:23:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NzE5Ng==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498257196", "bodyText": "Given the complexity of this method, I think it deserves its own unit tests.", "author": "tlrx", "createdAt": "2020-10-01T13:47:14Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1911,82 +2244,246 @@ public boolean assertAllListenersResolved() {\n         return true;\n     }\n \n+    /**\n+     * Executor that applies {@link ShardSnapshotUpdate}s to the current cluster state. The algorithm implemented below works as described\n+     * below:\n+     * Every shard snapshot or clone state update can result in multiple snapshots being updated. In order to determine whether or not a\n+     * shard update has an effect we use an outer loop over all current executing snapshot operations that iterates over them in the order\n+     * they were started in and an inner loop over the list of shard update tasks.\n+     *\n+     * If the inner loop finds that a shard update task applies to a given snapshot and either a shard-snapshot or shard-clone operation in\n+     * it then it will update the state of the snapshot entry accordingly. If that update was a noop, then the task is removed from the\n+     * iteration as it was already applied before and likely just arrived on the master node again due to retries upstream.\n+     * If the update was not a noop, then it means that the shard it applied to is now available for another snapshot or clone operation\n+     * to be re-assigned if there is another snapshot operation that is waiting for the shard to become available. We therefore record the\n+     * fact that a task was executed by adding it to a collection of executed tasks. If a subsequent execution of the outer loop finds that\n+     * a task in the executed tasks collection applied to a shard it was waiting for to become available, then the shard snapshot operation\n+     * will be started for that snapshot entry and the task removed from the collection of tasks that need to be applied to snapshot\n+     * entries since it can not have any further effects.\n+     */\n     private static final ClusterStateTaskExecutor<ShardSnapshotUpdate> SHARD_STATE_EXECUTOR = (currentState, tasks) -> {", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3OTcyNg==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498679726", "bodyText": "Added a few of those now with effectively 100% coverage :)", "author": "original-brownbear", "createdAt": "2020-10-02T08:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NzE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MTg5NA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498261894", "bodyText": "Can we assert entry.source() != null ?", "author": "tlrx", "createdAt": "2020-10-01T13:53:36Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1911,82 +2244,246 @@ public boolean assertAllListenersResolved() {\n         return true;\n     }\n \n+    /**\n+     * Executor that applies {@link ShardSnapshotUpdate}s to the current cluster state. The algorithm implemented below works as described\n+     * below:\n+     * Every shard snapshot or clone state update can result in multiple snapshots being updated. In order to determine whether or not a\n+     * shard update has an effect we use an outer loop over all current executing snapshot operations that iterates over them in the order\n+     * they were started in and an inner loop over the list of shard update tasks.\n+     *\n+     * If the inner loop finds that a shard update task applies to a given snapshot and either a shard-snapshot or shard-clone operation in\n+     * it then it will update the state of the snapshot entry accordingly. If that update was a noop, then the task is removed from the\n+     * iteration as it was already applied before and likely just arrived on the master node again due to retries upstream.\n+     * If the update was not a noop, then it means that the shard it applied to is now available for another snapshot or clone operation\n+     * to be re-assigned if there is another snapshot operation that is waiting for the shard to become available. We therefore record the\n+     * fact that a task was executed by adding it to a collection of executed tasks. If a subsequent execution of the outer loop finds that\n+     * a task in the executed tasks collection applied to a shard it was waiting for to become available, then the shard snapshot operation\n+     * will be started for that snapshot entry and the task removed from the collection of tasks that need to be applied to snapshot\n+     * entries since it can not have any further effects.\n+     */\n     private static final ClusterStateTaskExecutor<ShardSnapshotUpdate> SHARD_STATE_EXECUTOR = (currentState, tasks) -> {\n         int changedCount = 0;\n         int startedCount = 0;\n         final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n+        final String localNodeId = currentState.nodes().getLocalNodeId();\n         // Tasks to check for updates for running snapshots.\n         final List<ShardSnapshotUpdate> unconsumedTasks = new ArrayList<>(tasks);\n         // Tasks that were used to complete an existing in-progress shard snapshot\n         final Set<ShardSnapshotUpdate> executedTasks = new HashSet<>();\n+        // Outer loop over all snapshot entries in the order they were created in\n         for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n             if (entry.state().completed()) {\n+                // completed snapshots do not require any updates so we just add them to the new list and keep going\n                 entries.add(entry);\n                 continue;\n             }\n             ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+            ImmutableOpenMap.Builder<RepositoryShardId, ShardSnapshotStatus> clones = null;\n+            Map<String, IndexId> indicesLookup = null;\n+            // inner loop over all the shard updates that are potentially applicable to the current snapshot entry\n             for (Iterator<ShardSnapshotUpdate> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n                 final ShardSnapshotUpdate updateSnapshotState = iterator.next();\n                 final Snapshot updatedSnapshot = updateSnapshotState.snapshot;\n                 final String updatedRepository = updatedSnapshot.getRepository();\n                 if (entry.repository().equals(updatedRepository) == false) {\n+                    // the update applies to a different repository so it is irrelevant here\n                     continue;\n                 }\n-                final ShardId finishedShardId = updateSnapshotState.shardId;\n-                if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n-                    final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n-                    if (existing == null) {\n-                        logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n-                                updateSnapshotState, entry);\n-                        assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n-                        continue;\n-                    }\n-                    if (existing.state().completed()) {\n-                        // No point in doing noop updates that might happen if data nodes resends shard status after a disconnect.\n-                        iterator.remove();\n-                        continue;\n-                    }\n-                    logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n-                            finishedShardId, updateSnapshotState.updatedState.state());\n-                    if (shards == null) {\n-                        shards = ImmutableOpenMap.builder(entry.shards());\n-                    }\n-                    shards.put(finishedShardId, updateSnapshotState.updatedState);\n-                    executedTasks.add(updateSnapshotState);\n-                    changedCount++;\n-                } else if (executedTasks.contains(updateSnapshotState)) {\n-                    // tasks that completed a shard might allow starting a new shard snapshot for the current snapshot\n-                    final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                    if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                        continue;\n+                if (updateSnapshotState.isClone()) {\n+                    // The update applied to a shard clone operation\n+                    final RepositoryShardId finishedShardId = updateSnapshotState.repoShardId;\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.clones().get(finishedShardId);", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNjk5OA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498306998", "bodyText": "certainly can, added it :)", "author": "original-brownbear", "createdAt": "2020-10-01T14:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MTg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTk1MA==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498289950", "bodyText": "I've been a bit worried about re-resolving indices here as the cloned shard could reference an index from the snapshot that do not exist anymore, or could have been recreated with a different sharding, but after writing some tests I think it's OK as existingStatus == null later will prevent any difference in the number of shards.", "author": "tlrx", "createdAt": "2020-10-01T14:30:21Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -1911,82 +2244,246 @@ public boolean assertAllListenersResolved() {\n         return true;\n     }\n \n+    /**\n+     * Executor that applies {@link ShardSnapshotUpdate}s to the current cluster state. The algorithm implemented below works as described\n+     * below:\n+     * Every shard snapshot or clone state update can result in multiple snapshots being updated. In order to determine whether or not a\n+     * shard update has an effect we use an outer loop over all current executing snapshot operations that iterates over them in the order\n+     * they were started in and an inner loop over the list of shard update tasks.\n+     *\n+     * If the inner loop finds that a shard update task applies to a given snapshot and either a shard-snapshot or shard-clone operation in\n+     * it then it will update the state of the snapshot entry accordingly. If that update was a noop, then the task is removed from the\n+     * iteration as it was already applied before and likely just arrived on the master node again due to retries upstream.\n+     * If the update was not a noop, then it means that the shard it applied to is now available for another snapshot or clone operation\n+     * to be re-assigned if there is another snapshot operation that is waiting for the shard to become available. We therefore record the\n+     * fact that a task was executed by adding it to a collection of executed tasks. If a subsequent execution of the outer loop finds that\n+     * a task in the executed tasks collection applied to a shard it was waiting for to become available, then the shard snapshot operation\n+     * will be started for that snapshot entry and the task removed from the collection of tasks that need to be applied to snapshot\n+     * entries since it can not have any further effects.\n+     */\n     private static final ClusterStateTaskExecutor<ShardSnapshotUpdate> SHARD_STATE_EXECUTOR = (currentState, tasks) -> {\n         int changedCount = 0;\n         int startedCount = 0;\n         final List<SnapshotsInProgress.Entry> entries = new ArrayList<>();\n+        final String localNodeId = currentState.nodes().getLocalNodeId();\n         // Tasks to check for updates for running snapshots.\n         final List<ShardSnapshotUpdate> unconsumedTasks = new ArrayList<>(tasks);\n         // Tasks that were used to complete an existing in-progress shard snapshot\n         final Set<ShardSnapshotUpdate> executedTasks = new HashSet<>();\n+        // Outer loop over all snapshot entries in the order they were created in\n         for (SnapshotsInProgress.Entry entry : currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY).entries()) {\n             if (entry.state().completed()) {\n+                // completed snapshots do not require any updates so we just add them to the new list and keep going\n                 entries.add(entry);\n                 continue;\n             }\n             ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = null;\n+            ImmutableOpenMap.Builder<RepositoryShardId, ShardSnapshotStatus> clones = null;\n+            Map<String, IndexId> indicesLookup = null;\n+            // inner loop over all the shard updates that are potentially applicable to the current snapshot entry\n             for (Iterator<ShardSnapshotUpdate> iterator = unconsumedTasks.iterator(); iterator.hasNext(); ) {\n                 final ShardSnapshotUpdate updateSnapshotState = iterator.next();\n                 final Snapshot updatedSnapshot = updateSnapshotState.snapshot;\n                 final String updatedRepository = updatedSnapshot.getRepository();\n                 if (entry.repository().equals(updatedRepository) == false) {\n+                    // the update applies to a different repository so it is irrelevant here\n                     continue;\n                 }\n-                final ShardId finishedShardId = updateSnapshotState.shardId;\n-                if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n-                    final ShardSnapshotStatus existing = entry.shards().get(finishedShardId);\n-                    if (existing == null) {\n-                        logger.warn(\"Received shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n-                                updateSnapshotState, entry);\n-                        assert false : \"This should never happen, data nodes should only send updates for expected shards\";\n-                        continue;\n-                    }\n-                    if (existing.state().completed()) {\n-                        // No point in doing noop updates that might happen if data nodes resends shard status after a disconnect.\n-                        iterator.remove();\n-                        continue;\n-                    }\n-                    logger.trace(\"[{}] Updating shard [{}] with status [{}]\", updatedSnapshot,\n-                            finishedShardId, updateSnapshotState.updatedState.state());\n-                    if (shards == null) {\n-                        shards = ImmutableOpenMap.builder(entry.shards());\n-                    }\n-                    shards.put(finishedShardId, updateSnapshotState.updatedState);\n-                    executedTasks.add(updateSnapshotState);\n-                    changedCount++;\n-                } else if (executedTasks.contains(updateSnapshotState)) {\n-                    // tasks that completed a shard might allow starting a new shard snapshot for the current snapshot\n-                    final ShardSnapshotStatus existingStatus = entry.shards().get(finishedShardId);\n-                    if (existingStatus == null || existingStatus.state() != ShardState.QUEUED) {\n-                        continue;\n+                if (updateSnapshotState.isClone()) {\n+                    // The update applied to a shard clone operation\n+                    final RepositoryShardId finishedShardId = updateSnapshotState.repoShardId;\n+                    if (entry.snapshot().getSnapshotId().equals(updatedSnapshot.getSnapshotId())) {\n+                        final ShardSnapshotStatus existing = entry.clones().get(finishedShardId);\n+                        if (existing == null) {\n+                            logger.warn(\"Received clone shard snapshot status update [{}] but this shard is not tracked in [{}]\",\n+                                    updateSnapshotState, entry);\n+                            assert false : \"This should never happen, master will not submit a state update for a non-existing clone\";\n+                            continue;\n+                        }\n+                        if (existing.state().completed()) {\n+                            // No point in doing noop updates that might happen if data nodes resends shard status after a disconnect.\n+                            iterator.remove();\n+                            continue;\n+                        }\n+                        logger.trace(\"[{}] Updating shard clone [{}] with status [{}]\", updatedSnapshot,\n+                                finishedShardId, updateSnapshotState.updatedState.state());\n+                        if (clones == null) {\n+                            clones = ImmutableOpenMap.builder(entry.clones());\n+                        }\n+                        changedCount++;\n+                        clones.put(finishedShardId, updateSnapshotState.updatedState);\n+                        executedTasks.add(updateSnapshotState);\n+                    } else if (executedTasks.contains(updateSnapshotState)) {\n+                        // the update was already executed on the clone operation it applied to, now we check if it may be possible to\n+                        // start a shard snapshot or clone operation on the current entry\n+                        if (entry.source() == null) {\n+                            // current entry is a snapshot operation so we must translate the repository shard id to a routing shard id\n+                            final IndexMetadata indexMeta = currentState.metadata().index(finishedShardId.indexName());", "originalCommit": "3c5f8cdf4b87ce4211ae8a3cfd6caa7aadae4dec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "468359d148c268695a3ffa196ac825b5149b276a", "url": "https://github.com/elastic/elasticsearch/commit/468359d148c268695a3ffa196ac825b5149b276a", "message": "add assertion", "committedDate": "2020-10-01T14:51:07Z", "type": "commit"}, {"oid": "60df5f9ab7ab5c20ac51a3d331fdb54a742754b3", "url": "https://github.com/elastic/elasticsearch/commit/60df5f9ab7ab5c20ac51a3d331fdb54a742754b3", "message": "isCLone", "committedDate": "2020-10-01T15:01:53Z", "type": "commit"}, {"oid": "ad9fe18a90f1dc94d0b53ae6f5e3bf4077d388ff", "url": "https://github.com/elastic/elasticsearch/commit/ad9fe18a90f1dc94d0b53ae6f5e3bf4077d388ff", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-10-01T15:08:24Z", "type": "commit"}, {"oid": "df09e3ec4959ba81ea7672aa1e14ccad796c44d9", "url": "https://github.com/elastic/elasticsearch/commit/df09e3ec4959ba81ea7672aa1e14ccad796c44d9", "message": "some UTs", "committedDate": "2020-10-01T21:31:42Z", "type": "commit"}, {"oid": "c8d5961a8b59cb336b4c3b2b43904455a499eb88", "url": "https://github.com/elastic/elasticsearch/commit/c8d5961a8b59cb336b4c3b2b43904455a499eb88", "message": "moar UTs", "committedDate": "2020-10-02T06:56:33Z", "type": "commit"}, {"oid": "4c2a2128e0af590457d7a19cd2f734f1077f0fdd", "url": "https://github.com/elastic/elasticsearch/commit/4c2a2128e0af590457d7a19cd2f734f1077f0fdd", "message": "even moar tests", "committedDate": "2020-10-02T07:23:17Z", "type": "commit"}, {"oid": "3b1085f41c0b26c2bd50bb8c6d7e657ceac3b92f", "url": "https://github.com/elastic/elasticsearch/commit/3b1085f41c0b26c2bd50bb8c6d7e657ceac3b92f", "message": "even moar tests (80% cov)", "committedDate": "2020-10-02T07:44:31Z", "type": "commit"}, {"oid": "208985efcddcefd504fc9f5da3d5241e760174af", "url": "https://github.com/elastic/elasticsearch/commit/208985efcddcefd504fc9f5da3d5241e760174af", "message": "full coverage", "committedDate": "2020-10-02T08:11:46Z", "type": "commit"}, {"oid": "5316fc3b3ffd03b5ab4f5a3723eaf1997cb12aa0", "url": "https://github.com/elastic/elasticsearch/commit/5316fc3b3ffd03b5ab4f5a3723eaf1997cb12aa0", "message": "shorter", "committedDate": "2020-10-02T08:17:22Z", "type": "commit"}, {"oid": "6e5b74bfcd431b1192f4aface3739f2026da8268", "url": "https://github.com/elastic/elasticsearch/commit/6e5b74bfcd431b1192f4aface3739f2026da8268", "message": "IT", "committedDate": "2020-10-02T08:30:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNDYzNg==", "url": "https://github.com/elastic/elasticsearch/pull/61839#discussion_r498824636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"] because its snapshot is was not successful.\");\n          \n          \n            \n                                        \"] because its snapshot was not successful.\");", "author": "tlrx", "createdAt": "2020-10-02T13:34:33Z", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java", "diffHunk": "@@ -313,6 +308,276 @@ public TimeValue timeout() {\n         }, \"create_snapshot [\" + snapshotName + ']', listener::onFailure);\n     }\n \n+    private static void ensureSnapshotNameNotRunning(List<SnapshotsInProgress.Entry> runningSnapshots, String repositoryName,\n+                                                     String snapshotName) {\n+        if (runningSnapshots.stream().anyMatch(s -> {\n+            final Snapshot running = s.snapshot();\n+            return running.getRepository().equals(repositoryName) && running.getSnapshotId().getName().equals(snapshotName);\n+        })) {\n+            throw new InvalidSnapshotNameException(repositoryName, snapshotName, \"snapshot with the same name is already in-progress\");\n+        }\n+    }\n+\n+    private static Map<String, IndexId> getInFlightIndexIds(List<SnapshotsInProgress.Entry> runningSnapshots, String repositoryName) {\n+        return runningSnapshots.stream().filter(entry -> entry.repository().equals(repositoryName))\n+                .flatMap(entry -> entry.indices().stream()).distinct()\n+                .collect(Collectors.toMap(IndexId::getName, Function.identity()));\n+    }\n+\n+    public void cloneSnapshot(CloneSnapshotRequest request, ActionListener<Void> listener) {\n+        final String repositoryName = request.repository();\n+        Repository repository = repositoriesService.repository(repositoryName);\n+        if (repository.isReadOnly()) {\n+            listener.onFailure(new RepositoryException(repositoryName, \"cannot create snapshot in a readonly repository\"));\n+            return;\n+        }\n+        final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.target());\n+        validate(repositoryName, snapshotName);\n+        final SnapshotId snapshotId = new SnapshotId(snapshotName, UUIDs.randomBase64UUID());\n+        final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);\n+        initializingClones.add(snapshot);\n+        repository.executeConsistentStateUpdate(repositoryData -> new ClusterStateUpdateTask() {\n+\n+            private SnapshotsInProgress.Entry newEntry;\n+\n+            @Override\n+            public ClusterState execute(ClusterState currentState) {\n+                ensureSnapshotNameAvailableInRepo(repositoryData, snapshotName, repository);\n+                ensureNoCleanupInProgress(currentState, repositoryName, snapshotName);\n+                final SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE, SnapshotsInProgress.EMPTY);\n+                final List<SnapshotsInProgress.Entry> runningSnapshots = snapshots.entries();\n+                ensureSnapshotNameNotRunning(runningSnapshots, repositoryName, snapshotName);\n+                validate(repositoryName, snapshotName, currentState);\n+\n+                final SnapshotId sourceSnapshotId = repositoryData.getSnapshotIds()\n+                        .stream()\n+                        .filter(src -> src.getName().equals(request.source()))\n+                        .findAny()\n+                        .orElseThrow(() -> new SnapshotMissingException(repositoryName, request.source()));\n+                final SnapshotDeletionsInProgress deletionsInProgress =\n+                        currentState.custom(SnapshotDeletionsInProgress.TYPE, SnapshotDeletionsInProgress.EMPTY);\n+                if (deletionsInProgress.getEntries().stream().anyMatch(entry -> entry.getSnapshots().contains(sourceSnapshotId))) {\n+                    throw new ConcurrentSnapshotExecutionException(repositoryName, sourceSnapshotId.getName(),\n+                            \"cannot clone from snapshot that is being deleted\");\n+                }\n+                ensureBelowConcurrencyLimit(repositoryName, snapshotName, snapshots, deletionsInProgress);\n+                final List<String> indicesForSnapshot = new ArrayList<>();\n+                for (IndexId indexId : repositoryData.getIndices().values()) {\n+                    if (repositoryData.getSnapshots(indexId).contains(sourceSnapshotId)) {\n+                        indicesForSnapshot.add(indexId.getName());\n+                    }\n+                }\n+                final List<String> matchingIndices =\n+                        SnapshotUtils.filterIndices(indicesForSnapshot, request.indices(), request.indicesOptions());\n+                if (matchingIndices.isEmpty()) {\n+                    throw new SnapshotException(new Snapshot(repositoryName, sourceSnapshotId),\n+                            \"No indices in the source snapshot [\" + sourceSnapshotId + \"] matched requested pattern [\"\n+                                    + Strings.arrayToCommaDelimitedString(request.indices()) + \"]\");\n+                }\n+                newEntry = SnapshotsInProgress.startClone(\n+                        snapshot, sourceSnapshotId,\n+                        repositoryData.resolveIndices(matchingIndices),\n+                        threadPool.absoluteTimeInMillis(), repositoryData.getGenId(),\n+                        minCompatibleVersion(currentState.nodes().getMinNodeVersion(), repositoryData, null));\n+                final List<SnapshotsInProgress.Entry> newEntries = new ArrayList<>(runningSnapshots);\n+                newEntries.add(newEntry);\n+                return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE,\n+                        SnapshotsInProgress.of(List.copyOf(newEntries))).build();\n+            }\n+\n+            @Override\n+            public void onFailure(String source, Exception e) {\n+                initializingClones.remove(snapshot);\n+                logger.warn(() -> new ParameterizedMessage(\"[{}][{}] failed to clone snapshot\", repositoryName, snapshotName), e);\n+                listener.onFailure(e);\n+            }\n+\n+            @Override\n+            public void clusterStateProcessed(String source, ClusterState oldState, final ClusterState newState) {\n+                logger.info(\"snapshot clone [{}] started\", snapshot);\n+                addListener(snapshot, ActionListener.wrap(r -> listener.onResponse(null), listener::onFailure));\n+                startCloning(repository, newEntry);\n+            }\n+\n+            @Override\n+            public TimeValue timeout() {\n+                initializingClones.remove(snapshot);\n+                return request.masterNodeTimeout();\n+            }\n+        }, \"clone_snapshot [\" + request.source() + \"][\" + snapshotName + ']', listener::onFailure);\n+    }\n+\n+    private static void ensureNoCleanupInProgress(ClusterState currentState, String repositoryName, String snapshotName) {\n+        final RepositoryCleanupInProgress repositoryCleanupInProgress =\n+                currentState.custom(RepositoryCleanupInProgress.TYPE, RepositoryCleanupInProgress.EMPTY);\n+        if (repositoryCleanupInProgress.hasCleanupInProgress()) {\n+            throw new ConcurrentSnapshotExecutionException(repositoryName, snapshotName,\n+                    \"cannot snapshot while a repository cleanup is in-progress in [\" + repositoryCleanupInProgress + \"]\");\n+        }\n+    }\n+\n+    private static void ensureSnapshotNameAvailableInRepo(RepositoryData repositoryData, String snapshotName, Repository repository) {\n+        // check if the snapshot name already exists in the repository\n+        if (repositoryData.getSnapshotIds().stream().anyMatch(s -> s.getName().equals(snapshotName))) {\n+            throw new InvalidSnapshotNameException(\n+                    repository.getMetadata().name(), snapshotName, \"snapshot with the same name already exists\");\n+        }\n+    }\n+\n+    /**\n+     * Determine the number of shards in each index of a clone operation and update the cluster state accordingly.\n+     *\n+     * @param repository     repository to run operation on\n+     * @param cloneEntry     clone operation in the cluster state\n+     */\n+    private void startCloning(Repository repository, SnapshotsInProgress.Entry cloneEntry) {\n+        final List<IndexId> indices = cloneEntry.indices();\n+        final SnapshotId sourceSnapshot = cloneEntry.source();\n+        final Snapshot targetSnapshot = cloneEntry.snapshot();\n+\n+        final Executor executor = threadPool.executor(ThreadPool.Names.SNAPSHOT);\n+        // Exception handler for IO exceptions with loading index and repo metadata\n+        final Consumer<Exception> onFailure = e -> {\n+            initializingClones.remove(targetSnapshot);\n+            logger.info(() -> new ParameterizedMessage(\"Failed to start snapshot clone [{}]\", cloneEntry), e);\n+            removeFailedSnapshotFromClusterState(targetSnapshot, e, null);\n+        };\n+\n+        // 1. step, load SnapshotInfo to make sure that source snapshot was successful for the indices we want to clone\n+        // TODO: we could skip this step for snapshots with state SUCCESS\n+        final StepListener<SnapshotInfo> snapshotInfoListener = new StepListener<>();\n+        executor.execute(ActionRunnable.supply(snapshotInfoListener, () -> repository.getSnapshotInfo(sourceSnapshot)));\n+\n+        final StepListener<Collection<Tuple<IndexId, Integer>>> allShardCountsListener = new StepListener<>();\n+        final GroupedActionListener<Tuple<IndexId, Integer>> shardCountListener =\n+                new GroupedActionListener<>(allShardCountsListener, indices.size());\n+        snapshotInfoListener.whenComplete(snapshotInfo -> {\n+            for (IndexId indexId : indices) {\n+                if (RestoreService.failed(snapshotInfo, indexId.getName())) {\n+                    throw new SnapshotException(targetSnapshot, \"Can't clone index [\" + indexId +\n+                            \"] because its snapshot is was not successful.\");", "originalCommit": "6e5b74bfcd431b1192f4aface3739f2026da8268", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c5f3bd5a452f2067aa8157914d50f01d61511fb7", "url": "https://github.com/elastic/elasticsearch/commit/c5f3bd5a452f2067aa8157914d50f01d61511fb7", "message": "Update server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java\n\nCo-authored-by: Tanguy Leroux <tlrx.dev@gmail.com>", "committedDate": "2020-10-02T13:43:47Z", "type": "commit"}, {"oid": "2a5a226b0ecda994359a92c5ba0fe46b53c5900e", "url": "https://github.com/elastic/elasticsearch/commit/2a5a226b0ecda994359a92c5ba0fe46b53c5900e", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-10-02T14:21:58Z", "type": "commit"}, {"oid": "6ad35522fc9c75cf561be530d4ace8f8ae0efe0e", "url": "https://github.com/elastic/elasticsearch/commit/6ad35522fc9c75cf561be530d4ace8f8ae0efe0e", "message": "gotta fix message in tests as well", "committedDate": "2020-10-02T14:23:15Z", "type": "commit"}, {"oid": "87d721e1a963912d17af7189c9728c190407617d", "url": "https://github.com/elastic/elasticsearch/commit/87d721e1a963912d17af7189c9728c190407617d", "message": "bck", "committedDate": "2020-08-03T10:09:20Z", "type": "commit"}, {"oid": "4ae31193d4db14540279cc76420a621eeb96134d", "url": "https://github.com/elastic/elasticsearch/commit/4ae31193d4db14540279cc76420a621eeb96134d", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-03T10:09:29Z", "type": "commit"}, {"oid": "d84264d479a95a53abf89e5601aa3d5fb3599975", "url": "https://github.com/elastic/elasticsearch/commit/d84264d479a95a53abf89e5601aa3d5fb3599975", "message": "Clone snapshot API start", "committedDate": "2020-08-03T16:41:12Z", "type": "commit"}, {"oid": "f6d287eb4fafdaf60818124589bdd9999ae46d07", "url": "https://github.com/elastic/elasticsearch/commit/f6d287eb4fafdaf60818124589bdd9999ae46d07", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-03T16:45:50Z", "type": "commit"}, {"oid": "38da49aee9b2aa375f87766791eb86e45e9fee97", "url": "https://github.com/elastic/elasticsearch/commit/38da49aee9b2aa375f87766791eb86e45e9fee97", "message": "works", "committedDate": "2020-08-03T18:10:03Z", "type": "commit"}, {"oid": "988490b657e1432e255ed224fdf75eb9293180ab", "url": "https://github.com/elastic/elasticsearch/commit/988490b657e1432e255ed224fdf75eb9293180ab", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-03T18:23:38Z", "type": "commit"}, {"oid": "b4be1f6f0dec850b4a28533a10492561568dc026", "url": "https://github.com/elastic/elasticsearch/commit/b4be1f6f0dec850b4a28533a10492561568dc026", "message": "r/w", "committedDate": "2020-08-03T18:33:22Z", "type": "commit"}, {"oid": "2e3fbccea3b3da0270077c2d4668766e9bf3234a", "url": "https://github.com/elastic/elasticsearch/commit/2e3fbccea3b3da0270077c2d4668766e9bf3234a", "message": "bck", "committedDate": "2020-08-03T19:30:30Z", "type": "commit"}, {"oid": "28d6e9746e308bbc90d7e7cfa8cdb6647b36883d", "url": "https://github.com/elastic/elasticsearch/commit/28d6e9746e308bbc90d7e7cfa8cdb6647b36883d", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-04T10:25:19Z", "type": "commit"}, {"oid": "eb7b620304453a07ccfc64c3e68e64fecfe01fb6", "url": "https://github.com/elastic/elasticsearch/commit/eb7b620304453a07ccfc64c3e68e64fecfe01fb6", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-05T08:09:20Z", "type": "commit"}, {"oid": "cf5d19915c2d4e349f78d118edfabb5507fe67e4", "url": "https://github.com/elastic/elasticsearch/commit/cf5d19915c2d4e349f78d118edfabb5507fe67e4", "message": "fix", "committedDate": "2020-08-05T08:37:06Z", "type": "commit"}, {"oid": "bf0671f3637cdd52b9ce4a468f1b8a194e349a50", "url": "https://github.com/elastic/elasticsearch/commit/bf0671f3637cdd52b9ce4a468f1b8a194e349a50", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-05T12:07:08Z", "type": "commit"}, {"oid": "6a06ae8d08375d9ef79a51ca027e4229fa9eb25e", "url": "https://github.com/elastic/elasticsearch/commit/6a06ae8d08375d9ef79a51ca027e4229fa9eb25e", "message": "progress", "committedDate": "2020-08-05T12:31:36Z", "type": "commit"}, {"oid": "789a07df787cc3da80c418e3359bdcadbb640114", "url": "https://github.com/elastic/elasticsearch/commit/789a07df787cc3da80c418e3359bdcadbb640114", "message": "bck", "committedDate": "2020-08-05T16:46:09Z", "type": "commit"}, {"oid": "9218b62f1754eefc693bb8690624614658dc03b6", "url": "https://github.com/elastic/elasticsearch/commit/9218b62f1754eefc693bb8690624614658dc03b6", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-06T12:15:28Z", "type": "commit"}, {"oid": "9647e44e5c73b7b427ff2cc8df66775e540d46ad", "url": "https://github.com/elastic/elasticsearch/commit/9647e44e5c73b7b427ff2cc8df66775e540d46ad", "message": "fix", "committedDate": "2020-08-06T12:19:05Z", "type": "commit"}, {"oid": "41463b661bb4e8d185eb53144379c0492c3c2b10", "url": "https://github.com/elastic/elasticsearch/commit/41463b661bb4e8d185eb53144379c0492c3c2b10", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-10T11:23:26Z", "type": "commit"}, {"oid": "e140322007abf62cf6d37b63562323cd064e246b", "url": "https://github.com/elastic/elasticsearch/commit/e140322007abf62cf6d37b63562323cd064e246b", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-10T11:36:58Z", "type": "commit"}, {"oid": "ddbcb23283edfd5f5c2863dbb68fd57decda31db", "url": "https://github.com/elastic/elasticsearch/commit/ddbcb23283edfd5f5c2863dbb68fd57decda31db", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-11T09:50:02Z", "type": "commit"}, {"oid": "f662c4739647b353f34c7f7708cd965c0eab92b9", "url": "https://github.com/elastic/elasticsearch/commit/f662c4739647b353f34c7f7708cd965c0eab92b9", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-11T12:16:12Z", "type": "commit"}, {"oid": "e95a9e2a2df34231c56495b1ac7fbdf9115bf0f1", "url": "https://github.com/elastic/elasticsearch/commit/e95a9e2a2df34231c56495b1ac7fbdf9115bf0f1", "message": "bck", "committedDate": "2020-08-11T13:27:11Z", "type": "commit"}, {"oid": "bf6ec9625defb20facd82d82998f061fc594d28e", "url": "https://github.com/elastic/elasticsearch/commit/bf6ec9625defb20facd82d82998f061fc594d28e", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-11T13:35:26Z", "type": "commit"}, {"oid": "1c135969ee83f223cf1b8018ecd88a870e36713e", "url": "https://github.com/elastic/elasticsearch/commit/1c135969ee83f223cf1b8018ecd88a870e36713e", "message": "bck", "committedDate": "2020-08-11T19:23:45Z", "type": "commit"}, {"oid": "4d816e34834e5eac394170f018291cda294c4c7c", "url": "https://github.com/elastic/elasticsearch/commit/4d816e34834e5eac394170f018291cda294c4c7c", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-12T10:58:55Z", "type": "commit"}, {"oid": "e01a58e3af38ac579885aca3487f8324350010b7", "url": "https://github.com/elastic/elasticsearch/commit/e01a58e3af38ac579885aca3487f8324350010b7", "message": "bck", "committedDate": "2020-08-12T14:20:57Z", "type": "commit"}, {"oid": "c319448cc77efce4a9766e0585ae8de878b0bd04", "url": "https://github.com/elastic/elasticsearch/commit/c319448cc77efce4a9766e0585ae8de878b0bd04", "message": "bck", "committedDate": "2020-08-30T16:20:41Z", "type": "commit"}, {"oid": "4c754d127fe0330669ba30c13093f6258ce31107", "url": "https://github.com/elastic/elasticsearch/commit/4c754d127fe0330669ba30c13093f6258ce31107", "message": "bck", "committedDate": "2020-08-30T16:59:59Z", "type": "commit"}, {"oid": "fc3fd52e7ebfe1108a080b9eb74cdef0dee3c351", "url": "https://github.com/elastic/elasticsearch/commit/fc3fd52e7ebfe1108a080b9eb74cdef0dee3c351", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-30T19:56:49Z", "type": "commit"}, {"oid": "6d18df3116ba7feff71262e5613e56b02eb85965", "url": "https://github.com/elastic/elasticsearch/commit/6d18df3116ba7feff71262e5613e56b02eb85965", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-31T08:37:40Z", "type": "commit"}, {"oid": "617ee9bbbbb48fcb6f3ccc92284e45c421b28cfd", "url": "https://github.com/elastic/elasticsearch/commit/617ee9bbbbb48fcb6f3ccc92284e45c421b28cfd", "message": "bck", "committedDate": "2020-08-31T12:55:25Z", "type": "commit"}, {"oid": "c1d9e9350ac8fd5d125832948ab7cc2bc0343dd6", "url": "https://github.com/elastic/elasticsearch/commit/c1d9e9350ac8fd5d125832948ab7cc2bc0343dd6", "message": "bck", "committedDate": "2020-08-31T13:54:44Z", "type": "commit"}, {"oid": "5a9ce25a6ffa0f9aa535ef1ed8c33e10424260c6", "url": "https://github.com/elastic/elasticsearch/commit/5a9ce25a6ffa0f9aa535ef1ed8c33e10424260c6", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-08-31T13:54:54Z", "type": "commit"}, {"oid": "7b527223acdaf3f1d48efb0e08ed5284020a68b3", "url": "https://github.com/elastic/elasticsearch/commit/7b527223acdaf3f1d48efb0e08ed5284020a68b3", "message": "bck", "committedDate": "2020-08-31T14:09:09Z", "type": "commit"}, {"oid": "214901f666a38c7f79015f894064d9b82ab087d9", "url": "https://github.com/elastic/elasticsearch/commit/214901f666a38c7f79015f894064d9b82ab087d9", "message": "worksish", "committedDate": "2020-08-31T15:16:54Z", "type": "commit"}, {"oid": "5b14bd42c4ebd2b63bd0bc20af8d7541407d0f94", "url": "https://github.com/elastic/elasticsearch/commit/5b14bd42c4ebd2b63bd0bc20af8d7541407d0f94", "message": "bck", "committedDate": "2020-08-31T16:04:24Z", "type": "commit"}, {"oid": "c1253489501d60f2bac68c90d3c9ee716eb0fb1e", "url": "https://github.com/elastic/elasticsearch/commit/c1253489501d60f2bac68c90d3c9ee716eb0fb1e", "message": "bck", "committedDate": "2020-08-31T16:12:01Z", "type": "commit"}, {"oid": "a56e8262c63c70d864f4e76ace893c7ba7044def", "url": "https://github.com/elastic/elasticsearch/commit/a56e8262c63c70d864f4e76ace893c7ba7044def", "message": "bck", "committedDate": "2020-08-31T16:13:43Z", "type": "commit"}, {"oid": "bdac60a9797c393092ef7ddf2b86e2b183ebf9e5", "url": "https://github.com/elastic/elasticsearch/commit/bdac60a9797c393092ef7ddf2b86e2b183ebf9e5", "message": "bck", "committedDate": "2020-08-31T17:09:33Z", "type": "commit"}, {"oid": "82808e560f1e0a84ebeaaca654027eae7a2608de", "url": "https://github.com/elastic/elasticsearch/commit/82808e560f1e0a84ebeaaca654027eae7a2608de", "message": "better", "committedDate": "2020-08-31T18:15:37Z", "type": "commit"}, {"oid": "95638b21548a038ef7206d58e81d483500956047", "url": "https://github.com/elastic/elasticsearch/commit/95638b21548a038ef7206d58e81d483500956047", "message": "bck", "committedDate": "2020-08-31T18:58:45Z", "type": "commit"}, {"oid": "862e8ca5bab7eaec7aec64fbd1f6fd7ff76dc34f", "url": "https://github.com/elastic/elasticsearch/commit/862e8ca5bab7eaec7aec64fbd1f6fd7ff76dc34f", "message": "green", "committedDate": "2020-08-31T21:17:59Z", "type": "commit"}, {"oid": "c882c9f9ac56020cccadb9c622a30751a723b6af", "url": "https://github.com/elastic/elasticsearch/commit/c882c9f9ac56020cccadb9c622a30751a723b6af", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-01T08:42:06Z", "type": "commit"}, {"oid": "8494701bf0ec0ed062be997f4dae38702b5ff09c", "url": "https://github.com/elastic/elasticsearch/commit/8494701bf0ec0ed062be997f4dae38702b5ff09c", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-01T09:22:23Z", "type": "commit"}, {"oid": "19e6e7b293434885a23e2956d64c9cd5f0af6c95", "url": "https://github.com/elastic/elasticsearch/commit/19e6e7b293434885a23e2956d64c9cd5f0af6c95", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-01T10:25:14Z", "type": "commit"}, {"oid": "ecd821d438cca3b36bdc407a4abff2f45813d81c", "url": "https://github.com/elastic/elasticsearch/commit/ecd821d438cca3b36bdc407a4abff2f45813d81c", "message": "bck", "committedDate": "2020-09-01T11:03:04Z", "type": "commit"}, {"oid": "0eb072db5de4b57c0a4d52419962b44a4beaf09c", "url": "https://github.com/elastic/elasticsearch/commit/0eb072db5de4b57c0a4d52419962b44a4beaf09c", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-01T11:45:51Z", "type": "commit"}, {"oid": "8a74150b34159c59da76c16ec347a9250fb392ed", "url": "https://github.com/elastic/elasticsearch/commit/8a74150b34159c59da76c16ec347a9250fb392ed", "message": "bck", "committedDate": "2020-09-01T12:56:35Z", "type": "commit"}, {"oid": "ec4b1672f05e9cd8f2b93b6d4dbf6fbcef6a95e1", "url": "https://github.com/elastic/elasticsearch/commit/ec4b1672f05e9cd8f2b93b6d4dbf6fbcef6a95e1", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-01T12:56:43Z", "type": "commit"}, {"oid": "b1b950ef04f91febc50990fb0f409fc3fa6e7b11", "url": "https://github.com/elastic/elasticsearch/commit/b1b950ef04f91febc50990fb0f409fc3fa6e7b11", "message": "clone prevents delete", "committedDate": "2020-09-01T13:20:33Z", "type": "commit"}, {"oid": "2090a547a3e5bfa9c20db4e8f325d91045b4c9e0", "url": "https://github.com/elastic/elasticsearch/commit/2090a547a3e5bfa9c20db4e8f325d91045b4c9e0", "message": "delete prevents clone", "committedDate": "2020-09-01T13:49:25Z", "type": "commit"}, {"oid": "24dfb6c6ddb15b9bb529d9cc15bfac0a89a04bc4", "url": "https://github.com/elastic/elasticsearch/commit/24dfb6c6ddb15b9bb529d9cc15bfac0a89a04bc4", "message": "bck", "committedDate": "2020-09-01T15:22:54Z", "type": "commit"}, {"oid": "087f52288b42f5eafb2332892416f2c211000186", "url": "https://github.com/elastic/elasticsearch/commit/087f52288b42f5eafb2332892416f2c211000186", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-02T09:01:15Z", "type": "commit"}, {"oid": "e363042965810cfc1582cf1281c3085afe6468b8", "url": "https://github.com/elastic/elasticsearch/commit/e363042965810cfc1582cf1281c3085afe6468b8", "message": "bck", "committedDate": "2020-09-02T10:11:57Z", "type": "commit"}, {"oid": "4c6b0d5fb3335aead8472b2bb4652e8892f07379", "url": "https://github.com/elastic/elasticsearch/commit/4c6b0d5fb3335aead8472b2bb4652e8892f07379", "message": "cleanup rest action", "committedDate": "2020-09-02T10:14:26Z", "type": "commit"}, {"oid": "daeb2fadd9aaf30b2fa83f3ce1d117700fd5c20c", "url": "https://github.com/elastic/elasticsearch/commit/daeb2fadd9aaf30b2fa83f3ce1d117700fd5c20c", "message": "shorter diff", "committedDate": "2020-09-02T10:33:03Z", "type": "commit"}, {"oid": "6999ea22e4a33e3e47374c02ec4948056a9be343", "url": "https://github.com/elastic/elasticsearch/commit/6999ea22e4a33e3e47374c02ec4948056a9be343", "message": "bck", "committedDate": "2020-09-02T11:17:24Z", "type": "commit"}, {"oid": "4658086fad03b4186d7595177a019681257be3ee", "url": "https://github.com/elastic/elasticsearch/commit/4658086fad03b4186d7595177a019681257be3ee", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-02T11:19:10Z", "type": "commit"}, {"oid": "94ba717f068aedfdc3793cb713a2f0bde086e7cf", "url": "https://github.com/elastic/elasticsearch/commit/94ba717f068aedfdc3793cb713a2f0bde086e7cf", "message": "docs test", "committedDate": "2020-09-02T11:53:52Z", "type": "commit"}, {"oid": "96f2617292d9dca33630d28a879bb5fe5dae9bae", "url": "https://github.com/elastic/elasticsearch/commit/96f2617292d9dca33630d28a879bb5fe5dae9bae", "message": "one more case handled", "committedDate": "2020-09-02T12:21:42Z", "type": "commit"}, {"oid": "09de3d62cfa96e1ff29504d765b1b99c2d71621a", "url": "https://github.com/elastic/elasticsearch/commit/09de3d62cfa96e1ff29504d765b1b99c2d71621a", "message": "error handling", "committedDate": "2020-09-02T13:04:36Z", "type": "commit"}, {"oid": "33012dcdb51d4da857efc050e77d75a714151673", "url": "https://github.com/elastic/elasticsearch/commit/33012dcdb51d4da857efc050e77d75a714151673", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-02T14:54:16Z", "type": "commit"}, {"oid": "a50e50607986bcd3c1c0f3eca1564bc9135c5713", "url": "https://github.com/elastic/elasticsearch/commit/a50e50607986bcd3c1c0f3eca1564bc9135c5713", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-02T16:43:37Z", "type": "commit"}, {"oid": "d2c47f837f3c4a342b79790ce3ea901c9c4a571a", "url": "https://github.com/elastic/elasticsearch/commit/d2c47f837f3c4a342b79790ce3ea901c9c4a571a", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-02T19:50:03Z", "type": "commit"}, {"oid": "0f61e835bbdf9a531ddb20a9bf0cac97a6a18376", "url": "https://github.com/elastic/elasticsearch/commit/0f61e835bbdf9a531ddb20a9bf0cac97a6a18376", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-03T08:44:40Z", "type": "commit"}, {"oid": "9db152ff741cbcdbe6c8847be6b06a9e9b47c4e6", "url": "https://github.com/elastic/elasticsearch/commit/9db152ff741cbcdbe6c8847be6b06a9e9b47c4e6", "message": "more fixes", "committedDate": "2020-09-03T11:51:15Z", "type": "commit"}, {"oid": "10b3516a44be2b580b6f914db197b86b2352e2d3", "url": "https://github.com/elastic/elasticsearch/commit/10b3516a44be2b580b6f914db197b86b2352e2d3", "message": "last one?", "committedDate": "2020-09-03T14:01:30Z", "type": "commit"}, {"oid": "1cf9a6736759f977f315ad3d587d0fe66cc13329", "url": "https://github.com/elastic/elasticsearch/commit/1cf9a6736759f977f315ad3d587d0fe66cc13329", "message": "bck", "committedDate": "2020-09-03T22:10:03Z", "type": "commit"}, {"oid": "d9622265acd1a6be3e647eba9e90b5dc869d1f22", "url": "https://github.com/elastic/elasticsearch/commit/d9622265acd1a6be3e647eba9e90b5dc869d1f22", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-05T15:13:58Z", "type": "commit"}, {"oid": "e3dfef36055701697d2b0ccc811c93bad4377139", "url": "https://github.com/elastic/elasticsearch/commit/e3dfef36055701697d2b0ccc811c93bad4377139", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-07T13:23:43Z", "type": "commit"}, {"oid": "a06ee9d8bc18b8ede6e0a0668e95ba4d577ed4bc", "url": "https://github.com/elastic/elasticsearch/commit/a06ee9d8bc18b8ede6e0a0668e95ba4d577ed4bc", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-07T14:10:23Z", "type": "commit"}, {"oid": "a51f0a31d0f97570ed5aedddb16b5d3e554b58de", "url": "https://github.com/elastic/elasticsearch/commit/a51f0a31d0f97570ed5aedddb16b5d3e554b58de", "message": "fix state machine", "committedDate": "2020-09-07T15:00:18Z", "type": "commit"}, {"oid": "6f149f75a56942f2fffde94802721159a5e58d02", "url": "https://github.com/elastic/elasticsearch/commit/6f149f75a56942f2fffde94802721159a5e58d02", "message": "optimize", "committedDate": "2020-09-07T15:10:16Z", "type": "commit"}, {"oid": "52020af79b65fb0589b103f3414ca7ca7e310cf7", "url": "https://github.com/elastic/elasticsearch/commit/52020af79b65fb0589b103f3414ca7ca7e310cf7", "message": "better not great", "committedDate": "2020-09-07T16:30:14Z", "type": "commit"}, {"oid": "8a8f98546a64ed428d002bffe8c01a3618f964ac", "url": "https://github.com/elastic/elasticsearch/commit/8a8f98546a64ed428d002bffe8c01a3618f964ac", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-10T14:30:16Z", "type": "commit"}, {"oid": "aab90773d4f5829aec0025a5a201d528248f4f94", "url": "https://github.com/elastic/elasticsearch/commit/aab90773d4f5829aec0025a5a201d528248f4f94", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-12T13:32:00Z", "type": "commit"}, {"oid": "176fb7d89fa36bec990b73d515225948658a511c", "url": "https://github.com/elastic/elasticsearch/commit/176fb7d89fa36bec990b73d515225948658a511c", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-13T20:45:17Z", "type": "commit"}, {"oid": "5b7b795af272431e1eed23757c4e0ba99893c5f8", "url": "https://github.com/elastic/elasticsearch/commit/5b7b795af272431e1eed23757c4e0ba99893c5f8", "message": "mroe efficient", "committedDate": "2020-09-14T05:24:31Z", "type": "commit"}, {"oid": "b756cc256bf956a2ec77c16c42812dd4b1e6e0b8", "url": "https://github.com/elastic/elasticsearch/commit/b756cc256bf956a2ec77c16c42812dd4b1e6e0b8", "message": "fix", "committedDate": "2020-09-14T05:42:57Z", "type": "commit"}, {"oid": "0f71f8b83df7cf52f6730c23b7b7359b591f0865", "url": "https://github.com/elastic/elasticsearch/commit/0f71f8b83df7cf52f6730c23b7b7359b591f0865", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-14T08:25:09Z", "type": "commit"}, {"oid": "1059222c164d40b19b8012965274ee7a86a83984", "url": "https://github.com/elastic/elasticsearch/commit/1059222c164d40b19b8012965274ee7a86a83984", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T07:28:36Z", "type": "commit"}, {"oid": "b26c47c7ce344c66c79a28ddd5e82f01c8b2b112", "url": "https://github.com/elastic/elasticsearch/commit/b26c47c7ce344c66c79a28ddd5e82f01c8b2b112", "message": "fix", "committedDate": "2020-09-15T09:08:11Z", "type": "commit"}, {"oid": "13d4b9850a57835de052f92c55944d4081887c40", "url": "https://github.com/elastic/elasticsearch/commit/13d4b9850a57835de052f92c55944d4081887c40", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T09:08:23Z", "type": "commit"}, {"oid": "ab787bd5fce822c221e788f6836b3788f739b476", "url": "https://github.com/elastic/elasticsearch/commit/ab787bd5fce822c221e788f6836b3788f739b476", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T10:46:14Z", "type": "commit"}, {"oid": "6bf7bc0cfe605f3d6a48dbc8181933ff9a43d863", "url": "https://github.com/elastic/elasticsearch/commit/6bf7bc0cfe605f3d6a48dbc8181933ff9a43d863", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T12:18:36Z", "type": "commit"}, {"oid": "1defbd5a6c29d927541ef61b5a69801f026a193d", "url": "https://github.com/elastic/elasticsearch/commit/1defbd5a6c29d927541ef61b5a69801f026a193d", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T12:39:29Z", "type": "commit"}, {"oid": "f7d2588e29f55b5246aee22b312a44e5b6240ae7", "url": "https://github.com/elastic/elasticsearch/commit/f7d2588e29f55b5246aee22b312a44e5b6240ae7", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T13:10:11Z", "type": "commit"}, {"oid": "87e1c3da2c7316049f667ebc9c0cc632e56d7627", "url": "https://github.com/elastic/elasticsearch/commit/87e1c3da2c7316049f667ebc9c0cc632e56d7627", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into clone-snapshot-on-repo", "committedDate": "2020-09-15T13:45:08Z", "type": "commit"}, {"oid": "ad4d438af4eb2be491d2bdc95f40ffd8ffa2d0a8", "url": "https://github.com/elastic/elasticsearch/commit/ad4d438af4eb2be491d2bdc95f40ffd8ffa2d0a8", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-15T15:35:38Z", "type": "commit"}, {"oid": "f04e0d1ae04b971017bba1d09c0cc3a0875fb6f5", "url": "https://github.com/elastic/elasticsearch/commit/f04e0d1ae04b971017bba1d09c0cc3a0875fb6f5", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-16T11:57:49Z", "type": "commit"}, {"oid": "c0027c2418e04282c249ee9c4ff0e429b8b2e5bd", "url": "https://github.com/elastic/elasticsearch/commit/c0027c2418e04282c249ee9c4ff0e429b8b2e5bd", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-17T07:05:02Z", "type": "commit"}, {"oid": "d2dc4f8f1752a9559f68a88859d272580ab167d1", "url": "https://github.com/elastic/elasticsearch/commit/d2dc4f8f1752a9559f68a88859d272580ab167d1", "message": "reproducer", "committedDate": "2020-09-17T09:33:26Z", "type": "commit"}, {"oid": "225cac01d30a69808fb9b1e79ff671cb00047901", "url": "https://github.com/elastic/elasticsearch/commit/225cac01d30a69808fb9b1e79ff671cb00047901", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-17T09:37:38Z", "type": "commit"}, {"oid": "43242d8be70a96ec15a724e33f440ffa8c74bd39", "url": "https://github.com/elastic/elasticsearch/commit/43242d8be70a96ec15a724e33f440ffa8c74bd39", "message": "fix master failover part 1", "committedDate": "2020-09-17T10:41:31Z", "type": "commit"}, {"oid": "4f6eec8bf8b4cb6da1d36f6c40605ef03b1fdb0f", "url": "https://github.com/elastic/elasticsearch/commit/4f6eec8bf8b4cb6da1d36f6c40605ef03b1fdb0f", "message": "fix master failover part 2", "committedDate": "2020-09-17T10:54:40Z", "type": "commit"}, {"oid": "c01ebbcf2d2871d87c406435555024061bb64df3", "url": "https://github.com/elastic/elasticsearch/commit/c01ebbcf2d2871d87c406435555024061bb64df3", "message": "nicer", "committedDate": "2020-09-17T11:27:38Z", "type": "commit"}, {"oid": "9c1d38ca2eb5c2643b964241a032001d9c722d09", "url": "https://github.com/elastic/elasticsearch/commit/9c1d38ca2eb5c2643b964241a032001d9c722d09", "message": "nicer", "committedDate": "2020-09-17T11:46:27Z", "type": "commit"}, {"oid": "c011f13d6448d092c132b34efdc1ceaf2dcd052b", "url": "https://github.com/elastic/elasticsearch/commit/c011f13d6448d092c132b34efdc1ceaf2dcd052b", "message": "cleaner", "committedDate": "2020-09-17T11:47:59Z", "type": "commit"}, {"oid": "51bfc4a9cda6edc836955ee675d0469b5698dd8e", "url": "https://github.com/elastic/elasticsearch/commit/51bfc4a9cda6edc836955ee675d0469b5698dd8e", "message": "fix more edge cases", "committedDate": "2020-09-17T13:33:33Z", "type": "commit"}, {"oid": "cf5dc894348466815eb63682def637388c8e0c06", "url": "https://github.com/elastic/elasticsearch/commit/cf5dc894348466815eb63682def637388c8e0c06", "message": "Merge remote-tracking branch 'elastic/master' into clone-snapshot-on-repo", "committedDate": "2020-09-17T14:12:29Z", "type": "commit"}, {"oid": "7eb9762190330f5043dc9bbcc230b3076bc7afc1", "url": "https://github.com/elastic/elasticsearch/commit/7eb9762190330f5043dc9bbcc230b3076bc7afc1", "message": "shorter", "committedDate": "2020-09-17T14:43:34Z", "type": "commit"}]}