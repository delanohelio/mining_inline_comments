{"pr_number": 62302, "pr_title": "Minor cleanups to BytesReferenceStreamInput", "pr_createdAt": "2020-09-14T11:09:45Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62302", "timeline": [{"oid": "4e80e997e2e75813e78c822a97d47a0e1ea30093", "url": "https://github.com/elastic/elasticsearch/commit/4e80e997e2e75813e78c822a97d47a0e1ea30093", "message": "Minor cleanups to BytesReferenceStreamInput\n\nFollowup to #61681:\n\n- reuse the current iterator in `reset()` if possible\n- simply some integer-overflow-avoidance in `skip()`\n- clarify some comments\n- address some IntelliJ warnings", "committedDate": "2020-09-14T11:06:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0MTIxMQ==", "url": "https://github.com/elastic/elasticsearch/pull/62302#discussion_r487841211", "bodyText": "neat :)", "author": "original-brownbear", "createdAt": "2020-09-14T11:29:19Z", "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "diffHunk": "@@ -308,11 +309,16 @@ public long skip(long n) throws IOException {\n \n         @Override\n         public void reset() throws IOException {\n-            iterator = iterator();\n-            slice = iterator.next();\n-            sliceStartOffset = 0;\n-            sliceIndex = 0;\n-            skip(mark);\n+            if (sliceStartOffset <= mark) {", "originalCommit": "4e80e997e2e75813e78c822a97d47a0e1ea30093", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2MDkwNw==", "url": "https://github.com/elastic/elasticsearch/pull/62302#discussion_r487860907", "bodyText": "Not sure I'm the biggest fan of this, it's just a slower method on the hot path (much larger and won't always inline perfectly I think) isn't it + it requires the reader to look into what ByteSizeUnit.BYTES.toIntBytes does when the previous version was crystal clear here?", "author": "original-brownbear", "createdAt": "2020-09-14T12:08:18Z", "path": "server/src/main/java/org/elasticsearch/common/bytes/AbstractBytesReference.java", "diffHunk": "@@ -293,8 +295,7 @@ protected void ensureCanReadBytes(int bytesToRead) throws EOFException {\n \n         @Override\n         public long skip(long n) throws IOException {\n-            final int skip = (int) Math.min(Integer.MAX_VALUE, n);\n-            final int numBytesSkipped =  Math.min(skip, length() - offset());\n+            final int numBytesSkipped = ByteSizeUnit.BYTES.toIntBytes(Math.min(n, length() - offset()));", "originalCommit": "4e80e997e2e75813e78c822a97d47a0e1ea30093", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDExMA==", "url": "https://github.com/elastic/elasticsearch/pull/62302#discussion_r487904110", "bodyText": "Yeah ok we don't really need this assertion. There's a latent bug in the original code if called with n < Integer.MIN_VALUE: the cast would overflow and maybe we'd skip too much, and also the callers are not all super-strict at checking we skipped what we wanted to. Changed to a different assertion and lighter code in 5bb4280.", "author": "DaveCTurner", "createdAt": "2020-09-14T13:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2MDkwNw=="}], "type": "inlineReview"}, {"oid": "5bb42800091e2304bef18dcd6a155112de1650db", "url": "https://github.com/elastic/elasticsearch/commit/5bb42800091e2304bef18dcd6a155112de1650db", "message": "No need to use toIntBytes to assert the cast is ok", "committedDate": "2020-09-14T13:14:37Z", "type": "commit"}, {"oid": "4c425201b4fec92528ed7746cdbfc6d8c476301a", "url": "https://github.com/elastic/elasticsearch/commit/4c425201b4fec92528ed7746cdbfc6d8c476301a", "message": "Merge branch 'master' into 2020-09-14-BytesReferenceStreamInput-cleanup", "committedDate": "2020-09-14T13:48:09Z", "type": "commit"}, {"oid": "d8cbe82a4508e415bfa63dea974262703bff66d9", "url": "https://github.com/elastic/elasticsearch/commit/d8cbe82a4508e415bfa63dea974262703bff66d9", "message": "Imports", "committedDate": "2020-09-14T14:02:25Z", "type": "commit"}]}