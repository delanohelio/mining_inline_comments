{"pr_number": 51682, "pr_title": "Add IDP Configuration settings and related tests", "pr_createdAt": "2020-01-30T14:40:52Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/51682", "timeline": [{"oid": "57d2d76f3d864178fd2d6f3bf5f7f1131cf19155", "url": "https://github.com/elastic/elasticsearch/commit/57d2d76f3d864178fd2d6f3bf5f7f1131cf19155", "message": "Add IDP Configuration settings and related tests", "committedDate": "2020-01-30T14:35:28Z", "type": "commit"}, {"oid": "fcb2e8c28112e00dae8cb5a29d919a2772ba17ab", "url": "https://github.com/elastic/elasticsearch/commit/fcb2e8c28112e00dae8cb5a29d919a2772ba17ab", "message": "license and missing conf", "committedDate": "2020-01-30T14:40:33Z", "type": "commit"}, {"oid": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "url": "https://github.com/elastic/elasticsearch/commit/db7cb6719c4d60050183e5fc3ab0446228e837cf", "message": "Add scope to settings", "committedDate": "2020-01-30T14:51:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1NDc0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373254749", "bodyText": "Should we make these Setting<URI> instead?", "author": "tvernum", "createdAt": "2020-01-30T23:49:41Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/IdentityProviderPlugin.java", "diffHunk": "@@ -31,22 +38,72 @@\n  */\n public class IdentityProviderPlugin extends Plugin implements ActionPlugin {\n \n-    private final Setting<Boolean> ENABLED_SETTING = Setting.boolSetting(\"xpack.idp.enabled\", false, Setting.Property.NodeScope);\n+    private static final Setting<Boolean> ENABLED_SETTING = Setting.boolSetting(\"xpack.idp.enabled\", false, Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_ENTITY_ID = Setting.simpleString(\"xpack.idp.entity_id\", Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_SSO_REDIRECT_ENDPOINT = Setting.simpleString(\"xpack.idp.sso_endpoint.redirect\", value -> {", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDEwMQ==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320101", "bodyText": "I went back and forth. I settled on that we care about them being URIs mainly when we validate them while reading the setting and from there on we can treat them as Strings. Since I don't see any other use for these other than:\n\nConstructing metadata\nValidating Authn and Logout Requests where we will use string equality eitherway\n\nit feels that future implementers or anyone reading the code doesn't need to care about the fact that these are URIs so I opted for the \"simpler\" handling.", "author": "jkakavas", "createdAt": "2020-01-31T05:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1NDc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1Njc0NA==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373256744", "bodyText": "The previous implementation is actually correct.\nPlugins should do as little as possible in the constructor, and everything that can be, should be handled in createComponents\nSee: #49667\nThe main issue is that a plugin is permitted to override the node's settings. But due to the plugin lifecycle, that has to happen after the plugin is constructed, which means after all plugins are constructed.\nSo the Settings object here is only a subset of the settings that the node might actually run with.", "author": "tvernum", "createdAt": "2020-01-30T23:57:05Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/IdentityProviderPlugin.java", "diffHunk": "@@ -31,22 +38,72 @@\n  */\n public class IdentityProviderPlugin extends Plugin implements ActionPlugin {\n \n-    private final Setting<Boolean> ENABLED_SETTING = Setting.boolSetting(\"xpack.idp.enabled\", false, Setting.Property.NodeScope);\n+    private static final Setting<Boolean> ENABLED_SETTING = Setting.boolSetting(\"xpack.idp.enabled\", false, Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_ENTITY_ID = Setting.simpleString(\"xpack.idp.entity_id\", Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_SSO_REDIRECT_ENDPOINT = Setting.simpleString(\"xpack.idp.sso_endpoint.redirect\", value -> {\n+        try {\n+            new URI(value);\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"Invalid value [\" + value + \"] for  [xpack.idp.sso_endpoint.redirect]. Not a valid URI\", e);\n+        }\n+    }, Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_SSO_POST_ENDPOINT = Setting.simpleString(\"xpack.idp.sso_endpoint.post\", value -> {\n+        try {\n+            new URI(value);\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"Invalid value [\" + value + \"] for  [xpack.idp.sso_endpoint.post]. Not a valid URI\", e);\n+        }\n+    }, Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_SLO_REDIRECT_ENDPOINT = Setting.simpleString(\"xpack.idp.slo_endpoint.redirect\", value -> {\n+        try {\n+            new URI(value);\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"Invalid value [\" + value + \"] for  [xpack.idp.slo_endpoint.redirect]. Not a valid URI\", e);\n+        }\n+    }, Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_SLO_POST_ENDPOINT = Setting.simpleString(\"xpack.idp.slo_endpoint.post\", value -> {\n+        try {\n+            new URI(value);\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(\"Invalid value [\" + value + \"] for  [xpack.idp.slo_endpoint.post]. Not a valid URI\", e);\n+        }\n+    }, Setting.Property.NodeScope);\n+    public static final Setting<String> IDP_SIGNING_KEY_ALIAS = Setting.simpleString(\"xpack.idp.signing.keystore.alias\",\n+        Setting.Property.NodeScope);\n \n     private final Logger logger = LogManager.getLogger();\n     private boolean enabled;\n+    private final Settings settings;\n+\n+    public IdentityProviderPlugin(Settings settings) {\n+        this.settings = settings;\n+        this.enabled = ENABLED_SETTING.get(settings);\n+    }", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1OTc1OA==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373259758", "bodyText": "I don't understand why we have 1 put and 3 computeIfAbsent\nI think you'd get the same bevahiour with 4 put wouldn't you? None of the keys are going to be present.", "author": "tvernum", "createdAt": "2020-01-31T00:08:48Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDExMw==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320113", "bodyText": "The \"added benefit\" of computeIfAbsent is that if the setting is not defined and settings.get returns null, then the null value won't be added to the hashmap.\nI don't feel strongly about it, it seemed as a nice thing to do but I could also do with null checks here or when consuming the map values.", "author": "jkakavas", "createdAt": "2020-01-31T05:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1OTc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNzAzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373927039", "bodyText": "It seems like it's depending on a side effect (a documented one, but still a side effect) and makes the code less clear because the reader is left trying to understand why we're using different methods.\nI'm not particular fussed though.", "author": "tvernum", "createdAt": "2020-02-03T05:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1OTc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MDQ3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373260472", "bodyText": "Nit: I prefer putting the whole string on a new line rather than splitting it. I find it easier to check that the message has the right spaces, and no duplicate words, etc if I can read it in 1 unit.\n    throw new IllegalArgumentException(\n        \"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC key pairs\");", "author": "tvernum", "createdAt": "2020-01-31T00:11:56Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));\n+        this.signingCredential = buildSigningCredential(env, settings);\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public String getSingleSignOnEndpoint(String binding) {\n+        return ssoEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public String getSingleLogoutEndpoint(String binding) {\n+        return sloEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public X509Credential getSigningCredential() {\n+        return signingCredential;\n+    }\n+\n+    private static String require(Settings settings, Setting<String> setting) {\n+        if (settings.hasValue(setting.getKey())) {\n+            return setting.get(settings);\n+        } else {\n+            throw new SettingsException(\"The configuration setting [\" + setting.getKey() + \"] is required\");\n+        }\n+    }\n+\n+    static X509Credential buildSigningCredential(Environment env, Settings settings) {\n+        final X509KeyPairSettings keyPairSettings = X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false);\n+        final X509KeyManager keyManager = CertParsingUtils.getKeyManager(keyPairSettings, settings, null, env);\n+        if (keyManager == null) {\n+            return null;\n+        }\n+        final Set<String> aliases = new HashSet<>();\n+        final String configAlias = IDP_SIGNING_KEY_ALIAS.get(settings);\n+        if (Strings.isNullOrEmpty(configAlias)) {\n+            final String[] rsaAliases = keyManager.getServerAliases(\"RSA\", null);\n+            if (null != rsaAliases) {\n+                aliases.addAll(Arrays.asList(rsaAliases));\n+            }\n+            final String[] ecAliases = keyManager.getServerAliases(\"EC\", null);\n+            if (null != ecAliases) {\n+                aliases.addAll(Arrays.asList(ecAliases));\n+            }\n+            if (aliases.isEmpty()) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +\n+                    \" key pairs\");", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MDYzNw==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373260637", "bodyText": "This is an obvious exception since it can't fit on a single line :)", "author": "tvernum", "createdAt": "2020-01-31T00:12:34Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));\n+        this.signingCredential = buildSigningCredential(env, settings);\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public String getSingleSignOnEndpoint(String binding) {\n+        return ssoEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public String getSingleLogoutEndpoint(String binding) {\n+        return sloEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public X509Credential getSigningCredential() {\n+        return signingCredential;\n+    }\n+\n+    private static String require(Settings settings, Setting<String> setting) {\n+        if (settings.hasValue(setting.getKey())) {\n+            return setting.get(settings);\n+        } else {\n+            throw new SettingsException(\"The configuration setting [\" + setting.getKey() + \"] is required\");\n+        }\n+    }\n+\n+    static X509Credential buildSigningCredential(Environment env, Settings settings) {\n+        final X509KeyPairSettings keyPairSettings = X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false);\n+        final X509KeyManager keyManager = CertParsingUtils.getKeyManager(keyPairSettings, settings, null, env);\n+        if (keyManager == null) {\n+            return null;\n+        }\n+        final Set<String> aliases = new HashSet<>();\n+        final String configAlias = IDP_SIGNING_KEY_ALIAS.get(settings);\n+        if (Strings.isNullOrEmpty(configAlias)) {\n+            final String[] rsaAliases = keyManager.getServerAliases(\"RSA\", null);\n+            if (null != rsaAliases) {\n+                aliases.addAll(Arrays.asList(rsaAliases));\n+            }\n+            final String[] ecAliases = keyManager.getServerAliases(\"EC\", null);\n+            if (null != ecAliases) {\n+                aliases.addAll(Arrays.asList(ecAliases));\n+            }\n+            if (aliases.isEmpty()) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +\n+                    \" key pairs\");\n+            }\n+            if (aliases.size() > 1) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore contains multiple key pairs\" +\n+                    \" but no alias has been configured with [\" + IDP_SIGNING_KEY_ALIAS.getKey() + \"]\");", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDEzOA==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320138", "bodyText": "Could you please rephrase/elaborate ?", "author": "jkakavas", "createdAt": "2020-01-31T05:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MDYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM2MDY2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373360662", "bodyText": "Sorry, that was very confusing wording.\nGiven this message does not fit onto a single line, I'm not too worried about how it gets split.", "author": "tvernum", "createdAt": "2020-01-31T08:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MDYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MDk0Mw==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373260943", "bodyText": "My preference is to refer to the Setting object for the key\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +\n          \n          \n            \n                            throw new IllegalArgumentException(\"The configured keystore for \" + IDP_SIGNING_KEY_ALIAS.getKey() + \" does not contain any RSA or EC\" +", "author": "tvernum", "createdAt": "2020-01-31T00:13:53Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));\n+        this.signingCredential = buildSigningCredential(env, settings);\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public String getSingleSignOnEndpoint(String binding) {\n+        return ssoEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public String getSingleLogoutEndpoint(String binding) {\n+        return sloEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public X509Credential getSigningCredential() {\n+        return signingCredential;\n+    }\n+\n+    private static String require(Settings settings, Setting<String> setting) {\n+        if (settings.hasValue(setting.getKey())) {\n+            return setting.get(settings);\n+        } else {\n+            throw new SettingsException(\"The configuration setting [\" + setting.getKey() + \"] is required\");\n+        }\n+    }\n+\n+    static X509Credential buildSigningCredential(Environment env, Settings settings) {\n+        final X509KeyPairSettings keyPairSettings = X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false);\n+        final X509KeyManager keyManager = CertParsingUtils.getKeyManager(keyPairSettings, settings, null, env);\n+        if (keyManager == null) {\n+            return null;\n+        }\n+        final Set<String> aliases = new HashSet<>();\n+        final String configAlias = IDP_SIGNING_KEY_ALIAS.get(settings);\n+        if (Strings.isNullOrEmpty(configAlias)) {\n+            final String[] rsaAliases = keyManager.getServerAliases(\"RSA\", null);\n+            if (null != rsaAliases) {\n+                aliases.addAll(Arrays.asList(rsaAliases));\n+            }\n+            final String[] ecAliases = keyManager.getServerAliases(\"EC\", null);\n+            if (null != ecAliases) {\n+                aliases.addAll(Arrays.asList(ecAliases));\n+            }\n+            if (aliases.isEmpty()) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDE0OA==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320148", "bodyText": "Same here in general, but this is the keystore , not the alias, and we don't define the Setting object explicitly but rather\nsettings.addAll(X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false).getAllSettings());\n\nin the plugin", "author": "jkakavas", "createdAt": "2020-01-31T05:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MDk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MTc3MA==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373261770", "bodyText": "I wish there was an obviously neater way to get the element from a singleton set...\nConstructing a list just to get at the element makes me feel dirty.\nWe do have Iterables.get(aliases, 0), but maybe we need to implement Iterables.head(aliases) (or Sets.head)", "author": "tvernum", "createdAt": "2020-01-31T00:17:17Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));\n+        this.signingCredential = buildSigningCredential(env, settings);\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public String getSingleSignOnEndpoint(String binding) {\n+        return ssoEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public String getSingleLogoutEndpoint(String binding) {\n+        return sloEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public X509Credential getSigningCredential() {\n+        return signingCredential;\n+    }\n+\n+    private static String require(Settings settings, Setting<String> setting) {\n+        if (settings.hasValue(setting.getKey())) {\n+            return setting.get(settings);\n+        } else {\n+            throw new SettingsException(\"The configuration setting [\" + setting.getKey() + \"] is required\");\n+        }\n+    }\n+\n+    static X509Credential buildSigningCredential(Environment env, Settings settings) {\n+        final X509KeyPairSettings keyPairSettings = X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false);\n+        final X509KeyManager keyManager = CertParsingUtils.getKeyManager(keyPairSettings, settings, null, env);\n+        if (keyManager == null) {\n+            return null;\n+        }\n+        final Set<String> aliases = new HashSet<>();\n+        final String configAlias = IDP_SIGNING_KEY_ALIAS.get(settings);\n+        if (Strings.isNullOrEmpty(configAlias)) {\n+            final String[] rsaAliases = keyManager.getServerAliases(\"RSA\", null);\n+            if (null != rsaAliases) {\n+                aliases.addAll(Arrays.asList(rsaAliases));\n+            }\n+            final String[] ecAliases = keyManager.getServerAliases(\"EC\", null);\n+            if (null != ecAliases) {\n+                aliases.addAll(Arrays.asList(ecAliases));\n+            }\n+            if (aliases.isEmpty()) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +\n+                    \" key pairs\");\n+            }\n+            if (aliases.size() > 1) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore contains multiple key pairs\" +\n+                    \" but no alias has been configured with [\" + IDP_SIGNING_KEY_ALIAS.getKey() + \"]\");\n+            }\n+        } else {\n+            aliases.add(configAlias);\n+        }\n+        String alias = new ArrayList<>(aliases).get(0);", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDMwNw==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320307", "bodyText": "I wish there was an obviously neater way to get the element from a singleton set...\n\nThe first time I couldn't do call get(0) on a Set, I thought my IDE was broken. I spent too much time on this rewritting it a couple of ways but didn't really like any. In other cases we also iterate the set with\nfor (String alias: aliases) {\n}\n\nI missed the Iterables.get(aliases, 0), I'll use that one.", "author": "jkakavas", "createdAt": "2020-01-31T05:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MTc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MjU0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373262542", "bodyText": "This seems strange to me.\nCouldn't we\n\ncreate a final String selectedAlias local var where we currently declare aliases\nmove aliases to be contained in the if block.\nchange this line to selectedAlias = configAlias\nmove the \"get element from singleton set\" into the if block.\n?", "author": "tvernum", "createdAt": "2020-01-31T00:20:01Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));\n+        this.signingCredential = buildSigningCredential(env, settings);\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public String getSingleSignOnEndpoint(String binding) {\n+        return ssoEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public String getSingleLogoutEndpoint(String binding) {\n+        return sloEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public X509Credential getSigningCredential() {\n+        return signingCredential;\n+    }\n+\n+    private static String require(Settings settings, Setting<String> setting) {\n+        if (settings.hasValue(setting.getKey())) {\n+            return setting.get(settings);\n+        } else {\n+            throw new SettingsException(\"The configuration setting [\" + setting.getKey() + \"] is required\");\n+        }\n+    }\n+\n+    static X509Credential buildSigningCredential(Environment env, Settings settings) {\n+        final X509KeyPairSettings keyPairSettings = X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false);\n+        final X509KeyManager keyManager = CertParsingUtils.getKeyManager(keyPairSettings, settings, null, env);\n+        if (keyManager == null) {\n+            return null;\n+        }\n+        final Set<String> aliases = new HashSet<>();\n+        final String configAlias = IDP_SIGNING_KEY_ALIAS.get(settings);\n+        if (Strings.isNullOrEmpty(configAlias)) {\n+            final String[] rsaAliases = keyManager.getServerAliases(\"RSA\", null);\n+            if (null != rsaAliases) {\n+                aliases.addAll(Arrays.asList(rsaAliases));\n+            }\n+            final String[] ecAliases = keyManager.getServerAliases(\"EC\", null);\n+            if (null != ecAliases) {\n+                aliases.addAll(Arrays.asList(ecAliases));\n+            }\n+            if (aliases.isEmpty()) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +\n+                    \" key pairs\");\n+            }\n+            if (aliases.size() > 1) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore contains multiple key pairs\" +\n+                    \" but no alias has been configured with [\" + IDP_SIGNING_KEY_ALIAS.getKey() + \"]\");\n+            }\n+        } else {\n+            aliases.add(configAlias);", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDMzOQ==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320339", "bodyText": "Yes. that is much neater thanks", "author": "jkakavas", "createdAt": "2020-01-31T05:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MjU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MjcyMw==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373262723", "bodyText": "Minor: Can we extract keyManager.getPrivateKey(alias) into a local since we call it twice?", "author": "tvernum", "createdAt": "2020-01-31T00:20:45Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/CloudIdp.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.idp.saml.idp;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Setting;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.settings.SettingsException;\n+import org.elasticsearch.env.Environment;\n+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;\n+import org.elasticsearch.xpack.core.ssl.X509KeyPairSettings;\n+import org.opensaml.security.x509.X509Credential;\n+import org.opensaml.security.x509.impl.X509KeyManagerX509CredentialAdapter;\n+\n+import javax.net.ssl.X509KeyManager;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_ENTITY_ID;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SIGNING_KEY_ALIAS;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SLO_REDIRECT_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_POST_ENDPOINT;\n+import static org.elasticsearch.xpack.idp.IdentityProviderPlugin.IDP_SSO_REDIRECT_ENDPOINT;\n+\n+public class CloudIdp implements SamlIdentityProvider {\n+\n+    private final String entityId;\n+    private final HashMap<String, String> ssoEndpoints = new HashMap<>();\n+    private final HashMap<String, String> sloEndpoints = new HashMap<>();\n+    private final X509Credential signingCredential;\n+\n+    public CloudIdp(Environment env, Settings settings) {\n+        this.entityId = require(settings, IDP_ENTITY_ID);\n+        this.ssoEndpoints.put(\"redirect\", require(settings, IDP_SSO_REDIRECT_ENDPOINT));\n+        this.ssoEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SSO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"post\", v -> settings.get(IDP_SLO_POST_ENDPOINT.getKey()));\n+        this.sloEndpoints.computeIfAbsent(\"redirect\", v -> settings.get(IDP_SLO_REDIRECT_ENDPOINT.getKey()));\n+        this.signingCredential = buildSigningCredential(env, settings);\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public String getSingleSignOnEndpoint(String binding) {\n+        return ssoEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public String getSingleLogoutEndpoint(String binding) {\n+        return sloEndpoints.get(binding);\n+    }\n+\n+    @Override\n+    public X509Credential getSigningCredential() {\n+        return signingCredential;\n+    }\n+\n+    private static String require(Settings settings, Setting<String> setting) {\n+        if (settings.hasValue(setting.getKey())) {\n+            return setting.get(settings);\n+        } else {\n+            throw new SettingsException(\"The configuration setting [\" + setting.getKey() + \"] is required\");\n+        }\n+    }\n+\n+    static X509Credential buildSigningCredential(Environment env, Settings settings) {\n+        final X509KeyPairSettings keyPairSettings = X509KeyPairSettings.withPrefix(\"xpack.idp.signing.\", false);\n+        final X509KeyManager keyManager = CertParsingUtils.getKeyManager(keyPairSettings, settings, null, env);\n+        if (keyManager == null) {\n+            return null;\n+        }\n+        final Set<String> aliases = new HashSet<>();\n+        final String configAlias = IDP_SIGNING_KEY_ALIAS.get(settings);\n+        if (Strings.isNullOrEmpty(configAlias)) {\n+            final String[] rsaAliases = keyManager.getServerAliases(\"RSA\", null);\n+            if (null != rsaAliases) {\n+                aliases.addAll(Arrays.asList(rsaAliases));\n+            }\n+            final String[] ecAliases = keyManager.getServerAliases(\"EC\", null);\n+            if (null != ecAliases) {\n+                aliases.addAll(Arrays.asList(ecAliases));\n+            }\n+            if (aliases.isEmpty()) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not contain any RSA or EC\" +\n+                    \" key pairs\");\n+            }\n+            if (aliases.size() > 1) {\n+                throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore contains multiple key pairs\" +\n+                    \" but no alias has been configured with [\" + IDP_SIGNING_KEY_ALIAS.getKey() + \"]\");\n+            }\n+        } else {\n+            aliases.add(configAlias);\n+        }\n+        String alias = new ArrayList<>(aliases).get(0);\n+        if (keyManager.getPrivateKey(alias) == null) {\n+            throw new IllegalArgumentException(\"The configured keystore for xpack.idp.signing.keystore does not have a private key\" +\n+                \" associated with alias [\" + alias + \"]\");\n+        }\n+\n+        final String keyType = keyManager.getPrivateKey(alias).getAlgorithm();", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MzI0OQ==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373263249", "bodyText": "Could these return URI instead?\nAlso where do we expect to need these? Is it just for metadata? (which is a real need - I just want to check how we expect to consume them).", "author": "tvernum", "createdAt": "2020-01-31T00:22:38Z", "path": "x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdentityProvider.java", "diffHunk": "@@ -7,10 +7,18 @@\n package org.elasticsearch.xpack.idp.saml.idp;\n \n \n+import org.opensaml.security.x509.X509Credential;\n+\n /**\n  * SAML 2.0 configuration information about this IdP\n  */\n public interface SamlIdentityProvider {\n \n     String getEntityId();\n+\n+    String getSingleSignOnEndpoint(String binding);", "originalCommit": "db7cb6719c4d60050183e5fc3ab0446228e837cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDQ2Nw==", "url": "https://github.com/elastic/elasticsearch/pull/51682#discussion_r373320467", "bodyText": "see #51682 (comment)\n\nAlso where do we expect to need these? Is it just for metadata?\n\nMetadata creation and incoming SAML message validation", "author": "jkakavas", "createdAt": "2020-01-31T05:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2MzI0OQ=="}], "type": "inlineReview"}, {"oid": "8ed79cbab0a48778566813e4776750ae6cc5b031", "url": "https://github.com/elastic/elasticsearch/commit/8ed79cbab0a48778566813e4776750ae6cc5b031", "message": "address feedback", "committedDate": "2020-01-31T05:28:14Z", "type": "commit"}, {"oid": "a4136c7166685413ee1f9032c301310039e41ee4", "url": "https://github.com/elastic/elasticsearch/commit/a4136c7166685413ee1f9032c301310039e41ee4", "message": "add missing file", "committedDate": "2020-01-31T10:01:49Z", "type": "commit"}, {"oid": "5252c8bd7e4462999cc4fe82589c8fbb7aa7c730", "url": "https://github.com/elastic/elasticsearch/commit/5252c8bd7e4462999cc4fe82589c8fbb7aa7c730", "message": "address feedback", "committedDate": "2020-02-03T09:06:54Z", "type": "commit"}, {"oid": "00caa85a0e3f659159663afd8c9019a441aee805", "url": "https://github.com/elastic/elasticsearch/commit/00caa85a0e3f659159663afd8c9019a441aee805", "message": "Merge branch 'feature-internal-idp' into idp-configuration", "committedDate": "2020-02-03T09:56:13Z", "type": "commit"}]}