{"pr_number": 59375, "pr_title": "Assign follower primary to nodes with remote cluster client role", "pr_createdAt": "2020-07-12T22:19:29Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/59375", "timeline": [{"oid": "473531b6aa8e80e726685c72c8ee37ef60e98a4f", "url": "https://github.com/elastic/elasticsearch/commit/473531b6aa8e80e726685c72c8ee37ef60e98a4f", "message": "Assign follower primary to nodes with remote cluster client role\n\nThe primary shards of follower indices during the bootstrap need to be\non nodes with the remote cluster client role as those nodes reach out to\nthe corresponding leader shards on the remote cluster to copy Lucene\nsegment files and renew the retention leases. This commit introduces a\nnew allocation decider that ensures those follower primaries are\nallocated to nodes with that role.\n\nCo-authored-by: Jason Tedor <jason@tedor.me>", "committedDate": "2020-07-12T22:13:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzNTc5MA==", "url": "https://github.com/elastic/elasticsearch/pull/59375#discussion_r453935790", "bodyText": "Good catch on this!", "author": "jasontedor", "createdAt": "2020-07-13T21:12:14Z", "path": "x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/allocation/CcrPrimaryFollowerAllocationDecider.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.xpack.ccr.allocation;\n+\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.node.DiscoveryNodeRole;\n+import org.elasticsearch.cluster.routing.RecoverySource;\n+import org.elasticsearch.cluster.routing.RoutingNode;\n+import org.elasticsearch.cluster.routing.ShardRouting;\n+import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;\n+import org.elasticsearch.cluster.routing.allocation.decider.AllocationDecider;\n+import org.elasticsearch.cluster.routing.allocation.decider.Decision;\n+import org.elasticsearch.xpack.ccr.CcrSettings;\n+\n+/**\n+ * An allocation decider that ensures primary shards of follower indices that are being bootstrapped are assigned to nodes that have the\n+ * remote cluster client role. This is necessary as those nodes reach out to the leader shards on the remote cluster to copy Lucene segment\n+ * files and periodically renew retention leases during the bootstrap.\n+ */\n+public final class CcrPrimaryFollowerAllocationDecider extends AllocationDecider {\n+    static final String NAME = \"ccr_primary_follower\";\n+\n+    @Override\n+    public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {\n+        final IndexMetadata indexMetadata = allocation.metadata().index(shardRouting.index());\n+        if (CcrSettings.CCR_FOLLOWING_INDEX_SETTING.get(indexMetadata.getSettings()) == false) {\n+            return allocation.decision(Decision.YES, NAME, \"shard is not a follower and is not under the purview of this decider\");\n+        }\n+        if (shardRouting.primary() == false) {\n+            return allocation.decision(Decision.YES, NAME, \"shard is a replica follower and is not under the purview of this decider\");\n+        }\n+        final RecoverySource recoverySource = shardRouting.recoverySource();\n+        if (recoverySource == null || recoverySource.getType() != RecoverySource.Type.SNAPSHOT) {", "originalCommit": "473531b6aa8e80e726685c72c8ee37ef60e98a4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}