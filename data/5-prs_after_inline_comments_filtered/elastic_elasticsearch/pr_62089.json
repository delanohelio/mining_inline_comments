{"pr_number": 62089, "pr_title": "Convert some more mapping tests to MapperServiceTestCase", "pr_createdAt": "2020-09-08T11:17:21Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/62089", "timeline": [{"oid": "7b662869ff37e05f91d6062c612ebbe4ee99c0b0", "url": "https://github.com/elastic/elasticsearch/commit/7b662869ff37e05f91d6062c612ebbe4ee99c0b0", "message": "Convert CopyToMapperTests to MappingServiceTestCase", "committedDate": "2020-09-07T16:12:35Z", "type": "commit"}, {"oid": "919d9a0b2d86d44286c5dabf9ec097f31c4a7c9a", "url": "https://github.com/elastic/elasticsearch/commit/919d9a0b2d86d44286c5dabf9ec097f31c4a7c9a", "message": "Convert a bunch of mapping tests to MapperServiceTestCase", "committedDate": "2020-09-08T11:15:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MDUyNw==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484840527", "bodyText": "This one is used by some tests in DocumentParserTests which load mappings defined in an external file.  I'm also open to just rewriting it so that it's all done in java code.", "author": "romseygeek", "createdAt": "2020-09-08T11:18:56Z", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "diffHunk": "@@ -91,6 +91,12 @@ protected final DocumentMapper createDocumentMapper(XContentBuilder mappings) th\n         return createMapperService(mappings).documentMapper();\n     }\n \n+    protected final DocumentMapper createDocumentMapper(String mappings) throws IOException {", "originalCommit": "919d9a0b2d86d44286c5dabf9ec097f31c4a7c9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MDI2NA==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484880264", "bodyText": "Its cool.", "author": "nik9000", "createdAt": "2020-09-08T12:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MDUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTMwMw==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484841303", "bodyText": "Your wish is my command!", "author": "romseygeek", "createdAt": "2020-09-08T11:20:28Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -57,103 +48,89 @@\n import static org.hamcrest.Matchers.not;\n import static org.hamcrest.Matchers.notNullValue;\n \n-// TODO: make this a real unit test", "originalCommit": "919d9a0b2d86d44286c5dabf9ec097f31c4a7c9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTkzMg==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484841932", "bodyText": "There are a bunch of tests here that check that if you have a field called foo it doesn't get confused if you also have a type called foo.  Seeing as we don't have types anymore, apart from _doc, and I don't think that you can actually create a field called _doc I'm not sure they're strictly necessary any more, but I've kept them in for now.", "author": "romseygeek", "createdAt": "2020-09-08T11:21:47Z", "path": "server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java", "diffHunk": "@@ -1211,88 +1005,66 @@ public void testSimpleParserNoTypeNoId() throws Exception {\n \n     public void testAttributes() throws Exception {\n         String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/simple/test-mapping.json\");\n-        DocumentMapperParser parser = createIndex(\"test\").mapperService().documentMapperParser();\n-        DocumentMapper docMapper = parser.parse(\"person\", new CompressedXContent(mapping));\n+\n+        DocumentMapper docMapper = createDocumentMapper(mapping);\n \n         assertThat((String) docMapper.meta().get(\"param1\"), equalTo(\"value1\"));\n \n         String builtMapping = docMapper.mappingSource().string();\n-        DocumentMapper builtDocMapper = parser.parse(\"person\", new CompressedXContent(builtMapping));\n+        DocumentMapper builtDocMapper = createDocumentMapper(builtMapping);\n         assertThat((String) builtDocMapper.meta().get(\"param1\"), equalTo(\"value1\"));\n     }\n \n     public void testNoDocumentSent() throws Exception {\n-        IndexService indexService = createIndex(\"test\");\n-        DocumentMapper docMapper = new DocumentMapper.Builder(\n-                new RootObjectMapper.Builder(\"person\")\n-                        .add(new ObjectMapper.Builder(\"name\")\n-                            .add(new TextFieldMapper.Builder(\"first\").store(true).index(false))),\n-            indexService.mapperService()).build(indexService.mapperService());\n-\n+        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {}));\n         BytesReference json = new BytesArray(\"\".getBytes(StandardCharsets.UTF_8));\n-        try {\n-            docMapper.parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n-            fail(\"this point is never reached\");\n-        } catch (MapperParsingException e) {\n-            assertThat(e.getMessage(), equalTo(\"failed to parse, document is empty\"));\n-        }\n+        MapperParsingException e = expectThrows(MapperParsingException.class,\n+            () -> docMapper.parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)));\n+        assertThat(e.getMessage(), equalTo(\"failed to parse, document is empty\"));\n     }\n \n     public void testNoLevel() throws Exception {\n-        String defaultMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").endObject().endObject());\n-\n-        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n-            .parse(\"type\", new CompressedXContent(defaultMapping));\n-\n-        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n-                .bytes(XContentFactory.jsonBuilder()\n-                        .startObject()\n-                        .field(\"test1\", \"value1\")\n-                        .field(\"test2\", \"value2\")\n-                        .startObject(\"inner\").field(\"inner_field\", \"inner_value\").endObject()\n-                        .endObject()),\n-                XContentType.JSON));\n-\n+        DocumentMapper defaultMapper = createDocumentMapper(mapping(b -> {}));\n+        ParsedDocument doc = defaultMapper.parse(source(b -> {\n+            b.field(\"test1\", \"value1\");\n+            b.field(\"test2\", \"value2\");\n+            b.startObject(\"inner\").field(\"inner_field\", \"inner_value\").endObject();\n+        }));\n         assertThat(doc.rootDoc().get(\"test1\"), equalTo(\"value1\"));\n         assertThat(doc.rootDoc().get(\"test2\"), equalTo(\"value2\"));\n         assertThat(doc.rootDoc().get(\"inner.inner_field\"), equalTo(\"inner_value\"));\n     }\n \n-    public void testTypeLevel() throws Exception {\n-        String defaultMapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").endObject().endObject());\n+    // TODO do we still need all this tests for 'type' at the bottom level now that\n+    // we no longer have types?", "originalCommit": "919d9a0b2d86d44286c5dabf9ec097f31c4a7c9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3ODIxMg==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484878212", "bodyText": "I'm not sure! we do still support indices from 7.x which have types, right?", "author": "nik9000", "createdAt": "2020-09-08T12:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4NzU3OA==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484887578", "bodyText": "We do - I'll keep them in for now then.", "author": "romseygeek", "createdAt": "2020-09-08T12:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MTkzMg=="}], "type": "inlineReview"}, {"oid": "e7c886ed29417f32e4aeb00679edb6669eeaf8f0", "url": "https://github.com/elastic/elasticsearch/commit/e7c886ed29417f32e4aeb00679edb6669eeaf8f0", "message": "checkstyle dammit", "committedDate": "2020-09-08T11:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MDg0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484880841", "bodyText": "This one might should be private. Or we should document why you'd want to call this one rather than the other one.", "author": "nik9000", "createdAt": "2020-09-08T12:35:36Z", "path": "test/framework/src/main/java/org/elasticsearch/index/mapper/MapperServiceTestCase.java", "diffHunk": "@@ -155,7 +161,23 @@ protected final SourceToParse source(CheckedConsumer<XContentBuilder, IOExceptio\n      * Merge a new mapping into the one in the provided {@link MapperService}.\n      */\n     protected final void merge(MapperService mapperService, XContentBuilder mapping) throws IOException {\n-        mapperService.merge(null, new CompressedXContent(BytesReference.bytes(mapping)), MapperService.MergeReason.MAPPING_UPDATE);\n+        merge(mapperService, MapperService.MergeReason.MAPPING_UPDATE, mapping);\n+    }\n+\n+    protected final void merge(MapperService mapperService, String mapping) throws IOException {\n+        mapperService.merge(null, new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n+    }\n+\n+    protected final void merge(MapperService mapperService,", "originalCommit": "e7c886ed29417f32e4aeb00679edb6669eeaf8f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4ODI0NA==", "url": "https://github.com/elastic/elasticsearch/pull/62089#discussion_r484888244", "bodyText": "It's used to test merging index templates, which work slightly differently and need a specific MergeReason to be passed to the merge method.  I'll add javadoc.", "author": "romseygeek", "createdAt": "2020-09-08T12:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MDg0MQ=="}], "type": "inlineReview"}, {"oid": "c255471efe8747a87976fedd8d62374046fda7c0", "url": "https://github.com/elastic/elasticsearch/commit/c255471efe8747a87976fedd8d62374046fda7c0", "message": "Merge remote-tracking branch 'origin/master' into mapper/copytomappertests", "committedDate": "2020-09-08T12:43:01Z", "type": "commit"}, {"oid": "8a87f3aa4a356206fccc082e813fa66fb6f7e771", "url": "https://github.com/elastic/elasticsearch/commit/8a87f3aa4a356206fccc082e813fa66fb6f7e771", "message": "javadoc", "committedDate": "2020-09-08T12:48:22Z", "type": "commit"}, {"oid": "349de0cf4c983eb29066ab55523832b16c27b0a4", "url": "https://github.com/elastic/elasticsearch/commit/349de0cf4c983eb29066ab55523832b16c27b0a4", "message": "Merge branch 'master' into mapper/copytomappertests", "committedDate": "2020-09-08T13:56:05Z", "type": "commit"}, {"oid": "075d64770416b704080a57e04e4182446e76be7d", "url": "https://github.com/elastic/elasticsearch/commit/075d64770416b704080a57e04e4182446e76be7d", "message": "Merge branch 'master' into mapper/copytomappertests", "committedDate": "2020-09-08T15:36:58Z", "type": "commit"}]}