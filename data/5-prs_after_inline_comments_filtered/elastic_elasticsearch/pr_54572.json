{"pr_number": 54572, "pr_title": "Compatible logic for Removes typed endpoint from search and related APIs", "pr_createdAt": "2020-04-01T11:04:09Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54572", "timeline": [{"oid": "96ebb5c3376dc5309e27e41890ab041f2bceeec6", "url": "https://github.com/elastic/elasticsearch/commit/96ebb5c3376dc5309e27e41890ab041f2bceeec6", "message": "init work. 221 vs 231 failing\n\nfixed get/index tests\nCompatRestIT. test {yaml=get/21_stored_fields_with_types/Stored fields}\nCompatRestIT. test {yaml=get/71_source_filtering_with_types/Source\nfiltering}\n\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index call that\nintroduces new field mappings}\nCompatRestIT. test {yaml=index/70_mix_typeless_typeful/Index with\ntypeless API on an index that has types}\n\nhowever the last one from get is still failing\nCompatRestIT. test {yaml=get/100_mix_typeless_typeful/GET with typeless\nAPI on an index that has", "committedDate": "2020-03-25T15:38:40Z", "type": "commit"}, {"oid": "2e922bf77ab08d48a8c2c48f8073b082275cbf10", "url": "https://github.com/elastic/elasticsearch/commit/2e922bf77ab08d48a8c2c48f8073b082275cbf10", "message": "allow registering multiple rest actions under the same path", "committedDate": "2020-03-27T13:57:42Z", "type": "commit"}, {"oid": "e7eda970edfec379bba6e91b8ba66495ebdedd67", "url": "https://github.com/elastic/elasticsearch/commit/e7eda970edfec379bba6e91b8ba66495ebdedd67", "message": "revert out dirs", "committedDate": "2020-03-27T14:07:44Z", "type": "commit"}, {"oid": "5dac4b9cbcd77ffbc662d2912067f4d6f49555b6", "url": "https://github.com/elastic/elasticsearch/commit/5dac4b9cbcd77ffbc662d2912067f4d6f49555b6", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type", "committedDate": "2020-03-27T14:15:22Z", "type": "commit"}, {"oid": "a213e6c7cc8ebb86d9c467155afe82348faff43e", "url": "https://github.com/elastic/elasticsearch/commit/a213e6c7cc8ebb86d9c467155afe82348faff43e", "message": "extend restcreateindexaction", "committedDate": "2020-03-27T14:29:45Z", "type": "commit"}, {"oid": "f1ad6779f0eb699d3623e055cb932ec041abd39b", "url": "https://github.com/elastic/elasticsearch/commit/f1ad6779f0eb699d3623e055cb932ec041abd39b", "message": "code style and discovery nodes in indexaction", "committedDate": "2020-03-27T15:14:13Z", "type": "commit"}, {"oid": "8ff3463f7558256da4aba434f14ba8446e1ebce8", "url": "https://github.com/elastic/elasticsearch/commit/8ff3463f7558256da4aba434f14ba8446e1ebce8", "message": "fix double registration", "committedDate": "2020-03-30T08:03:58Z", "type": "commit"}, {"oid": "9b8a26a46dc516fe88e1361e48cb276fdfeb5fd1", "url": "https://github.com/elastic/elasticsearch/commit/9b8a26a46dc516fe88e1361e48cb276fdfeb5fd1", "message": "add search action v7", "committedDate": "2020-03-30T18:24:40Z", "type": "commit"}, {"oid": "b0a12bdb082498a62a5befa5b881e123a1858d39", "url": "https://github.com/elastic/elasticsearch/commit/b0a12bdb082498a62a5befa5b881e123a1858d39", "message": "search & multisearch", "committedDate": "2020-03-31T12:30:27Z", "type": "commit"}, {"oid": "b94be5c2150d2c2cf93a1c290582bc850a1d394e", "url": "https://github.com/elastic/elasticsearch/commit/b94be5c2150d2c2cf93a1c290582bc850a1d394e", "message": "types with consumer", "committedDate": "2020-04-01T07:24:50Z", "type": "commit"}, {"oid": "f78e0211fb9c83949b6b161b071db548e829b8be", "url": "https://github.com/elastic/elasticsearch/commit/f78e0211fb9c83949b6b161b071db548e829b8be", "message": "cleanup type funciton", "committedDate": "2020-04-01T08:18:31Z", "type": "commit"}, {"oid": "9eb1c68fd15f8910cbf029ec41b9daa146dcdb4d", "url": "https://github.com/elastic/elasticsearch/commit/9eb1c68fd15f8910cbf029ec41b9daa146dcdb4d", "message": "packages fixed", "committedDate": "2020-04-01T10:10:09Z", "type": "commit"}, {"oid": "a421d56a4e914f3ea676ee14e4023a3b1e2a81cb", "url": "https://github.com/elastic/elasticsearch/commit/a421d56a4e914f3ea676ee14e4023a3b1e2a81cb", "message": "update by query, delete by query, multi term and term", "committedDate": "2020-04-01T11:01:23Z", "type": "commit"}, {"oid": "336414170a8bd11237ccaf473e2e57ddaacf7279", "url": "https://github.com/elastic/elasticsearch/commit/336414170a8bd11237ccaf473e2e57ddaacf7279", "message": "package rename", "committedDate": "2020-04-01T11:07:15Z", "type": "commit"}, {"oid": "8abcc0a255f9d03eebc5ed765333d33c807eefa1", "url": "https://github.com/elastic/elasticsearch/commit/8abcc0a255f9d03eebc5ed765333d33c807eefa1", "message": "spotless", "committedDate": "2020-04-01T11:54:32Z", "type": "commit"}, {"oid": "6efdb306a31cb4ef5a0a5c0e8954a6665f1f674d", "url": "https://github.com/elastic/elasticsearch/commit/6efdb306a31cb4ef5a0a5c0e8954a6665f1f674d", "message": "checkstyle", "committedDate": "2020-04-01T12:06:41Z", "type": "commit"}, {"oid": "90c37e21d4e4894cdf10c2f4d507ad3021fe1073", "url": "https://github.com/elastic/elasticsearch/commit/90c37e21d4e4894cdf10c2f4d507ad3021fe1073", "message": "fake request build iwth compat", "committedDate": "2020-04-01T13:37:43Z", "type": "commit"}, {"oid": "484e4aca9c8d11b923fa24a98c45fb9fead89409", "url": "https://github.com/elastic/elasticsearch/commit/484e4aca9c8d11b923fa24a98c45fb9fead89409", "message": "fixing some tests", "committedDate": "2020-04-01T13:52:26Z", "type": "commit"}, {"oid": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "url": "https://github.com/elastic/elasticsearch/commit/6184a9d07d97fb884601af6c0bb05b910b2e04c5", "message": "term vector body not finished", "committedDate": "2020-04-02T07:05:43Z", "type": "commit"}, {"oid": "1ee448754484179e05ab14815bbaa21ba02dca0a", "url": "https://github.com/elastic/elasticsearch/commit/1ee448754484179e05ab14815bbaa21ba02dca0a", "message": "additional testing and using version", "committedDate": "2020-04-02T12:07:12Z", "type": "commit"}, {"oid": "abe1d2864ad79f409f01f301255af6f4ca7f51c6", "url": "https://github.com/elastic/elasticsearch/commit/abe1d2864ad79f409f01f301255af6f4ca7f51c6", "message": "unused method", "committedDate": "2020-04-02T12:08:45Z", "type": "commit"}, {"oid": "d8fc2e554bcdd809d471fbb2543bdfe9c6ae423f", "url": "https://github.com/elastic/elasticsearch/commit/d8fc2e554bcdd809d471fbb2543bdfe9c6ae423f", "message": "method handlers - returning null when no handler under a method was registered", "committedDate": "2020-04-02T13:16:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyOTE1MA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402529150", "bodyText": "should the the above non-typed endpoints be here ?  Shouldn't the this error trying to register the route ?", "author": "jakelandis", "createdAt": "2020-04-02T18:36:21Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/action/document/RestMultiTermVectorsActionV7.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.document;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.termvectors.MultiTermVectorsRequest;\n+import org.elasticsearch.action.termvectors.TermVectorsRequest;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.compat.TypeConsumer;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestMultiTermVectorsActionV7 extends RestMultiTermVectorsAction {\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestTermVectorsAction.class));\n+    static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] \" + \"Specifying types in multi term vector requests is deprecated.\";\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(new Route(GET, \"/_mtermvectors\"),\n+            new Route(POST, \"/_mtermvectors\"),\n+            new Route(GET, \"/{index}/_mtermvectors\"),\n+            new Route(POST, \"/{index}/_mtermvectors\"),", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MTQyMA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402771420", "bodyText": "we allow registering same method and path but under different version. (if someone tried to register same method and path and version twice - it would end with error)\nWe need this because multi term vectors (and most multi-* api) can have a type in a body. So a typed request can be send via non-typed endpoint.", "author": "pgomulka", "createdAt": "2020-04-03T06:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyOTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjY4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402532687", "bodyText": "can this be re-named keyAllowed ? (or the like)\nA function used to validate if a provided xContent key is allowed. This is useful for xContent compatibility to determine if a key is allowed to be present in version agnostic manner. The provided function should return false if the key is not allowed. \n\n(it is does not use the Consumer interface, and I believe it more general purpose then the just for types)", "author": "jakelandis", "createdAt": "2020-04-02T18:42:29Z", "path": "modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestMultiSearchTemplateAction.java", "diffHunk": "@@ -79,6 +80,18 @@ public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client\n      * Parses a {@link RestRequest} body and returns a {@link MultiSearchTemplateRequest}\n      */\n     public static MultiSearchTemplateRequest parseRequest(RestRequest restRequest, boolean allowExplicitIndex) throws IOException {\n+        return parseRequest(restRequest,allowExplicitIndex, k->false);\n+    }\n+\n+    /**\n+     * Parses a {@link RestRequest} body and returns a {@link MultiSearchTemplateRequest}\n+     * @param typeConsumer - is a function used when parsing a request body. if it contains a types field it will consume it,", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MjI2OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402772269", "bodyText": "good idea, I wasn't sure typeConsumer was right as it was just too specific for type removal eample.\nWill rename and update javadoc", "author": "pgomulka", "createdAt": "2020-04-03T06:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0OTk1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402549956", "bodyText": "I think this class has a couple problems...\nit is named Consumer, but actually a Function with a side effect\nit requires an ordering between methods. (e.g. if you call hasTypes can yield different results then calling apply then hasTypes)\nhasTypes() method feels utility like, and apply is a pure function (which shouldn't have side effects even local to it's own class).\nCan we separate this into two classes , a utility class and pure function class. If you need to hold to the state returned by the function, whoever calls that function can take that responsibility.\nAlso, in tangent with my other comment on renaming the variable, I think the function class be be generalized as well KeyAllowed ?", "author": "jakelandis", "createdAt": "2020-04-02T19:11:51Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/compat/TypeConsumer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.compat;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+public class TypeConsumer implements Function<String, Boolean> {", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDI4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402790287", "bodyText": "Agree - the name is not right. The consumer was an initial idea but it ended up a function and I didn't change it accordingly. The KeyAllowed also feels right to me.\nI am not sure I understand how to refactor this. My idea was that the typeConsumer object being created at the V7 layer and passed down to v8 code can bubble up the state (information if type was found) back to v7 layer. Allowing the code to take action (most of the time just deprecation warning) to be present in v7 layer.\nThe apply() method was meant to serve two functions. Retrieve and store the information for v7 layer if the type was found. And to tell v8 code that the key was allowed and exception when parsing is not necessary.\nI also agree that side effect is probably unexpected. The TypeConsumer is visible as just a Function in v8 layer, so noone looking just at code which uses it would expect side effects.\nIf we have two classes, that would mean we would need to pass down two objects down to v8 layer?", "author": "pgomulka", "createdAt": "2020-04-03T07:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0OTk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0MjQxOA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r425742418", "bodyText": "@jakelandis I think this is the main issue on that PR.\nWe can split this in two functions\n\nKeyAllowed<String,Boolean> - a function returning true if a string is of allowed value (_type, types etc) false otherwise. This will then be pass down into a Request parsing logic - i.e. https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java#L588\nsecond class - not sure about this one.. we need to go down from v7 rest layer to the same place where a request is parsed (v8 code).\nI understand that it is not obvious that a function would has a state. But from the parsing point of view it wouldn't matter. All it care in TermVectorsRequest.java#L588 is if the field is allowed. The state if the field occurred (type for that example) is only relevant in v7 code where a class can be used directly (not by the Function interface)\n\nIf we were to have a utility class it would have live within some common to all modules utility module. That would not be ideal I guess.\nWe could refactor hasTypes to be a utility that is consuming the function that was passed down. But I am not sure this would benefit much (except from solving the ordering)\nAnyways I think I might be missing something in your idea of splitting this class into two. Can you please give more details?", "author": "pgomulka", "createdAt": "2020-05-15T11:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0OTk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MjAzNA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402552034", "bodyText": "Do you plan another round of PRs to issue deprecation and compatibility warnings ?", "author": "jakelandis", "createdAt": "2020-04-02T19:15:21Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/index/reindex/RestDeleteByQueryActionV7.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index.reindex;\n+\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestDeleteByQueryActionV7 extends RestDeleteByQueryAction {\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(new Route(POST, \"/{index}/{type}/_delete_by_query\"));\n+    }\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        request.param(\"type\");", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Mjk0NA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402772944", "bodyText": "I think it would be good to include this in this PR too, so we could consider these API complete. Will revisit.", "author": "pgomulka", "createdAt": "2020-04-03T06:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MjAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MjYwMA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402552600", "bodyText": "are the non-typed endpoints needed ?", "author": "jakelandis", "createdAt": "2020-04-02T19:16:22Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/action/document/RestTermVectorsActionV7.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.document;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.termvectors.TermVectorsRequest;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.compat.TypeConsumer;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestTermVectorsActionV7 extends RestTermVectorsAction {\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestTermVectorsAction.class));\n+    public static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] \" + \"Specifying types in term vector requests is deprecated.\";\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"/{index}/_termvectors\"),\n+            new Route(POST, \"/{index}/_termvectors\"),\n+            new Route(GET, \"/{index}/_termvectors/{id}\"),\n+            new Route(POST, \"/{index}/_termvectors/{id}\"),", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MzY4NA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402773684", "bodyText": "this one also can expect a type in a body for all these paths (even non-typed) - hence it is using TypeConsumer (to be renamed).", "author": "pgomulka", "createdAt": "2020-04-03T07:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MjYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzM3Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402553376", "bodyText": "If you move hasTypes a static method in a utility class, maybe we can push this logic (consume the type and log) there ?", "author": "jakelandis", "createdAt": "2020-04-02T19:17:49Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/action/document/RestTermVectorsActionV7.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.document;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.termvectors.TermVectorsRequest;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.compat.TypeConsumer;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestTermVectorsActionV7 extends RestTermVectorsAction {\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestTermVectorsAction.class));\n+    public static final String TYPES_DEPRECATION_MESSAGE = \"[types removal] \" + \"Specifying types in term vector requests is deprecated.\";\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"/{index}/_termvectors\"),\n+            new Route(POST, \"/{index}/_termvectors\"),\n+            new Route(GET, \"/{index}/_termvectors/{id}\"),\n+            new Route(POST, \"/{index}/_termvectors/{id}\"),\n+            // Deprecated typed endpoints.\n+            new Route(GET, \"/{index}/{type}/_termvectors\"),\n+            new Route(POST, \"/{index}/{type}/_termvectors\"),\n+            new Route(GET, \"/{index}/{type}/{id}/_termvectors\"),\n+            new Route(POST, \"/{index}/{type}/{id}/_termvectors\")\n+        );\n+    }\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {\n+        TypeConsumer typeConsumer = new TypeConsumer(request,\"_type\");\n+\n+        TermVectorsRequest termVectorsRequest = new TermVectorsRequest(request.param(\"index\"), request.param(\"id\"));\n+\n+        if (request.hasContentOrSourceParam()) {\n+            try (XContentParser parser = request.contentOrSourceParamParser()) {\n+                TermVectorsRequest.parseRequest(termVectorsRequest, parser, typeConsumer);\n+            }\n+        }\n+        readURIParameters(termVectorsRequest, request);\n+\n+        if (typeConsumer.hasTypes()) {", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzUzNw==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402553537", "bodyText": "are the non-typed end points needed ?", "author": "jakelandis", "createdAt": "2020-04-02T19:18:09Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchActionV7.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.search;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.compat.TypeConsumer;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.search.MultiSearchRequest;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestMultiSearchActionV7 extends RestMultiSearchAction {\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestMultiSearchAction.class));\n+    static final String TYPES_DEPRECATION_MESSAGE = \"[types removal]\" + \" Specifying types in multi search requests is deprecated.\";\n+\n+    public RestMultiSearchActionV7(Settings settings) {\n+        super(settings);\n+    }\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"/_msearch\"),\n+            new Route(POST, \"/_msearch\"),\n+            new Route(GET, \"/{index}/_msearch\"),\n+            new Route(POST, \"/{index}/_msearch\"),", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Mzk0NA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402773944", "bodyText": "as per previous comments - type is present in a body", "author": "pgomulka", "createdAt": "2020-04-03T07:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzcyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402553729", "bodyText": "non-typed endpoints ?", "author": "jakelandis", "createdAt": "2020-04-02T19:18:27Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/rest/action/search/RestSearchActionV7.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.rest.action.search;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.rest.RestRequest;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestSearchActionV7 extends RestSearchAction {\n+    public static final String INCLUDE_TYPE_NAME_PARAMETER = \"include_type_name\";\n+    public static final String TYPES_DEPRECATION_MESSAGE = \"[types removal]\" + \" Specifying types in search requests is deprecated.\";\n+\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(RestSearchAction.class));\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"/_search\"),\n+            new Route(POST, \"/_search\"),\n+            new Route(GET, \"/{index}/_search\"),\n+            new Route(POST, \"/{index}/_search\"),", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NTQ2OA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402775468", "bodyText": "type can be present as a parameter in v7 (as well as in a path for typed endpoints)", "author": "pgomulka", "createdAt": "2020-04-03T07:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NTY1OA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402775658", "bodyText": "although I am now not sure about INCLUDE_TYPE_NAME_PARAMETER\nwill revisit", "author": "pgomulka", "createdAt": "2020-04-03T07:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NDQyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402554421", "bodyText": "non-typed endpoints ?", "author": "jakelandis", "createdAt": "2020-04-02T19:19:40Z", "path": "modules/rest-compatibility/src/main/java/org/elasticsearch/script/mustache/RestMultiSearchTemplateActionV7.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.script.mustache;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.elasticsearch.compat.TypeConsumer;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.logging.DeprecationLogger;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+import org.elasticsearch.rest.action.search.RestMultiSearchAction;\n+import org.elasticsearch.rest.action.search.RestSearchAction;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.elasticsearch.rest.RestRequest.Method.GET;\n+import static org.elasticsearch.rest.RestRequest.Method.POST;\n+\n+public class RestMultiSearchTemplateActionV7 extends RestMultiSearchTemplateAction {\n+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(\n+        LogManager.getLogger(RestMultiSearchTemplateAction.class)\n+    );\n+    static final String TYPES_DEPRECATION_MESSAGE = \"[types removal]\"\n+        + \" Specifying types in multi search template requests is deprecated.\";\n+\n+    public RestMultiSearchTemplateActionV7(Settings settings) {\n+        super(settings);\n+    }\n+\n+    @Override\n+    public String compatibleWithVersion() {\n+        return String.valueOf(Version.V_7_0_0.major);\n+    }\n+\n+    @Override\n+    public List<Route> routes() {\n+        return List.of(\n+            new Route(GET, \"/_msearch/template\"),\n+            new Route(POST, \"/_msearch/template\"),\n+            new Route(GET, \"/{index}/_msearch/template\"),\n+            new Route(POST, \"/{index}/_msearch/template\"),", "originalCommit": "6184a9d07d97fb884601af6c0bb05b910b2e04c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NTgyMA==", "url": "https://github.com/elastic/elasticsearch/pull/54572#discussion_r402775820", "bodyText": "again - type can be present in a body.", "author": "pgomulka", "createdAt": "2020-04-03T07:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NDQyMQ=="}], "type": "inlineReview"}, {"oid": "d998555f99189f305bce708946f0a72dcff9c1d0", "url": "https://github.com/elastic/elasticsearch/commit/d998555f99189f305bce708946f0a72dcff9c1d0", "message": "comments", "committedDate": "2020-04-03T09:32:05Z", "type": "commit"}, {"oid": "ec8df43b08348e8edf9556a3cb3844aee18b69cc", "url": "https://github.com/elastic/elasticsearch/commit/ec8df43b08348e8edf9556a3cb3844aee18b69cc", "message": "remove unused constant", "committedDate": "2020-04-03T11:25:47Z", "type": "commit"}, {"oid": "8602f6566dd0dc366358cf84bfd26f5bb508ecea", "url": "https://github.com/elastic/elasticsearch/commit/8602f6566dd0dc366358cf84bfd26f5bb508ecea", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type", "committedDate": "2020-04-20T09:17:28Z", "type": "commit"}, {"oid": "f3d25e0e8667ab937889205a9006967e161b270a", "url": "https://github.com/elastic/elasticsearch/commit/f3d25e0e8667ab937889205a9006967e161b270a", "message": "fix javadoc", "committedDate": "2020-04-20T09:45:47Z", "type": "commit"}, {"oid": "7024913f90f98f9aae7284b406c901545032f0b2", "url": "https://github.com/elastic/elasticsearch/commit/7024913f90f98f9aae7284b406c901545032f0b2", "message": "compile", "committedDate": "2020-04-20T11:45:19Z", "type": "commit"}, {"oid": "446c114a972a6d8a93459acd8c92af64a500c2e5", "url": "https://github.com/elastic/elasticsearch/commit/446c114a972a6d8a93459acd8c92af64a500c2e5", "message": "Merge branch 'compat/create_index_include_type' into compat/search", "committedDate": "2020-04-20T11:49:15Z", "type": "commit"}, {"oid": "cafee2f346ac70b965f39a06d6c611858d32b650", "url": "https://github.com/elastic/elasticsearch/commit/cafee2f346ac70b965f39a06d6c611858d32b650", "message": "spotless", "committedDate": "2020-04-20T13:46:31Z", "type": "commit"}, {"oid": "f52dbc1de09ac72c4cb6ca3c5f69e10bcc6ff24c", "url": "https://github.com/elastic/elasticsearch/commit/f52dbc1de09ac72c4cb6ca3c5f69e10bcc6ff24c", "message": "spotless", "committedDate": "2020-04-20T13:56:59Z", "type": "commit"}, {"oid": "0b07539562a5cfc9e8cc128bea316d3a249974bf", "url": "https://github.com/elastic/elasticsearch/commit/0b07539562a5cfc9e8cc128bea316d3a249974bf", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type", "committedDate": "2020-04-21T11:38:15Z", "type": "commit"}, {"oid": "07a5dbc65714f2754158979297634d2c9b261f60", "url": "https://github.com/elastic/elasticsearch/commit/07a5dbc65714f2754158979297634d2c9b261f60", "message": "Merge branch 'compat/create_index_include_type' into compat/search", "committedDate": "2020-04-21T11:44:43Z", "type": "commit"}, {"oid": "813579444254bced0082b7994642124ee27b4cc1", "url": "https://github.com/elastic/elasticsearch/commit/813579444254bced0082b7994642124ee27b4cc1", "message": "v7 name", "committedDate": "2020-04-22T09:22:28Z", "type": "commit"}, {"oid": "2087c6a013742c3d7dbb154df6150ea50b66ab09", "url": "https://github.com/elastic/elasticsearch/commit/2087c6a013742c3d7dbb154df6150ea50b66ab09", "message": "Merge branch 'compat/create_index_include_type' into compat/search", "committedDate": "2020-04-22T09:36:40Z", "type": "commit"}, {"oid": "7e7ed6315a1f1ef65e361eea50da8f72fa40332f", "url": "https://github.com/elastic/elasticsearch/commit/7e7ed6315a1f1ef65e361eea50da8f72fa40332f", "message": "versions and names", "committedDate": "2020-04-22T09:55:20Z", "type": "commit"}, {"oid": "81a62fe38400672c0d2ed278555c0774778b05a0", "url": "https://github.com/elastic/elasticsearch/commit/81a62fe38400672c0d2ed278555c0774778b05a0", "message": "spotless", "committedDate": "2020-04-22T10:26:38Z", "type": "commit"}, {"oid": "d65a4a26d09dde9e9d82f6f486f62d264651d531", "url": "https://github.com/elastic/elasticsearch/commit/d65a4a26d09dde9e9d82f6f486f62d264651d531", "message": "import fix", "committedDate": "2020-04-22T11:40:19Z", "type": "commit"}, {"oid": "adb1a1e6d6de18804910e6a6ca1d69f367b2e546", "url": "https://github.com/elastic/elasticsearch/commit/adb1a1e6d6de18804910e6a6ca1d69f367b2e546", "message": "fix tests", "committedDate": "2020-04-22T13:33:28Z", "type": "commit"}, {"oid": "f8193132a056cb9ebdf0b587f52a6096fa2d5967", "url": "https://github.com/elastic/elasticsearch/commit/f8193132a056cb9ebdf0b587f52a6096fa2d5967", "message": "fix test", "committedDate": "2020-04-22T13:35:36Z", "type": "commit"}, {"oid": "6e28d245c7e79681c5a092f45db50188e6d33e6d", "url": "https://github.com/elastic/elasticsearch/commit/6e28d245c7e79681c5a092f45db50188e6d33e6d", "message": "javadoc", "committedDate": "2020-04-22T14:34:10Z", "type": "commit"}, {"oid": "a77716e7a19bccff0c07e64c651b706133f23e65", "url": "https://github.com/elastic/elasticsearch/commit/a77716e7a19bccff0c07e64c651b706133f23e65", "message": "Merge branch 'compat_rest_api' into compat/create_index_include_type", "committedDate": "2020-04-23T16:11:46Z", "type": "commit"}, {"oid": "dcf588c6ad0d3925ec0266ca3965e6fc6f601953", "url": "https://github.com/elastic/elasticsearch/commit/dcf588c6ad0d3925ec0266ca3965e6fc6f601953", "message": "Merge branch 'compat/create_index_include_type' into compat/search", "committedDate": "2020-04-23T16:23:02Z", "type": "commit"}, {"oid": "da0edd76d567322d6e27de23ed63938048b0213b", "url": "https://github.com/elastic/elasticsearch/commit/da0edd76d567322d6e27de23ed63938048b0213b", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-04-28T13:31:15Z", "type": "commit"}, {"oid": "42b40ecd6cb6ebf8b661bf44be2df8fe8b56af95", "url": "https://github.com/elastic/elasticsearch/commit/42b40ecd6cb6ebf8b661bf44be2df8fe8b56af95", "message": "fix merge problem", "committedDate": "2020-04-29T08:49:19Z", "type": "commit"}, {"oid": "8912c6059433a7d23180afdb1acf43f6e2db7a23", "url": "https://github.com/elastic/elasticsearch/commit/8912c6059433a7d23180afdb1acf43f6e2db7a23", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-04-29T10:44:02Z", "type": "commit"}, {"oid": "6c67db34489fc5c9c54e907e2325944528658a9b", "url": "https://github.com/elastic/elasticsearch/commit/6c67db34489fc5c9c54e907e2325944528658a9b", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-04-29T13:02:06Z", "type": "commit"}, {"oid": "5a720c5510ce1253febd4d35f978e6afc9323c25", "url": "https://github.com/elastic/elasticsearch/commit/5a720c5510ce1253febd4d35f978e6afc9323c25", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-06-17T09:33:58Z", "type": "commit"}, {"oid": "5f3158ce9725bc79e081505d7cc4ec67b8a53bb7", "url": "https://github.com/elastic/elasticsearch/commit/5f3158ce9725bc79e081505d7cc4ec67b8a53bb7", "message": "compile fix for deprecate method rename", "committedDate": "2020-06-17T10:21:30Z", "type": "commit"}, {"oid": "e8b28d6e13e69aaed89f504f40cdca5a0f89666c", "url": "https://github.com/elastic/elasticsearch/commit/e8b28d6e13e69aaed89f504f40cdca5a0f89666c", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-07-07T08:55:07Z", "type": "commit"}, {"oid": "83afde4684d46f39209a9b3ac870eaf8fd29c553", "url": "https://github.com/elastic/elasticsearch/commit/83afde4684d46f39209a9b3ac870eaf8fd29c553", "message": "fix after merge master", "committedDate": "2020-07-07T11:55:53Z", "type": "commit"}, {"oid": "660f0868ce5b0ca2a63b1dda6336fba84e99ff83", "url": "https://github.com/elastic/elasticsearch/commit/660f0868ce5b0ca2a63b1dda6336fba84e99ff83", "message": "spotless", "committedDate": "2020-07-07T12:10:24Z", "type": "commit"}, {"oid": "1f04044bfad536af90d8ee211384d3f716c76d2a", "url": "https://github.com/elastic/elasticsearch/commit/1f04044bfad536af90d8ee211384d3f716c76d2a", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-07-08T07:47:55Z", "type": "commit"}, {"oid": "24a44a8eff482ab3f2af34890f461c0e36b54ed0", "url": "https://github.com/elastic/elasticsearch/commit/24a44a8eff482ab3f2af34890f461c0e36b54ed0", "message": "Merge branch 'compat_rest_api' into compat/search", "committedDate": "2020-07-08T13:13:05Z", "type": "commit"}]}