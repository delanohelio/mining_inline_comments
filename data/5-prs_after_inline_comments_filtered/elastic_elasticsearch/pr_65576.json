{"pr_number": 65576, "pr_title": "Add List Append Utility Method", "pr_createdAt": "2020-11-30T00:10:42Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/65576", "timeline": [{"oid": "e376ecd1329c766ff7c0ee6d377f53425492e4c0", "url": "https://github.com/elastic/elasticsearch/commit/e376ecd1329c766ff7c0ee6d377f53425492e4c0", "message": "Add List Append Utility Method\n\n(list -> copy -> add one -> wrap immutable) is a pretty common pattern in CS\nupdates and tests => added a shortcut for it here and used it in easily identifyable\nspots.", "committedDate": "2020-11-30T00:08:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5MjkyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/65576#discussion_r532992929", "bodyText": "I think this can be written more succinctly and without the unchecked warning?\nreturn Stream.concat(collection.stream(), Stream.of(element)).collect(Collectors.toList())", "author": "rjernst", "createdAt": "2020-12-01T00:28:45Z", "path": "server/src/main/java/org/elasticsearch/common/util/CollectionUtils.java", "diffHunk": "@@ -317,6 +317,20 @@ public static int sortAndDedup(final BytesRefArray bytes, final int[] indices) {\n         return list;\n     }\n \n+    /**\n+     * Creates a copy of the given collection with the given element appended.\n+     *\n+     * @param collection collection to copy\n+     * @param element    element to append\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <E> List<E> appendToCopy(Collection<E> collection, E element) {\n+        final int size = collection.size() + 1;", "originalCommit": "e376ecd1329c766ff7c0ee6d377f53425492e4c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5NjkyNw==", "url": "https://github.com/elastic/elasticsearch/pull/65576#discussion_r532996927", "bodyText": "True, but it's slower and returns a mutable list and less efficiently sized list. The former might matter in some of the snapshot/blob-store usage I added where this is called in surprisingly hot code.", "author": "original-brownbear", "createdAt": "2020-12-01T00:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5MjkyOQ=="}], "type": "inlineReview"}]}