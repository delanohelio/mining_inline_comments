{"pr_number": 54277, "pr_title": "EQL: implement between function", "pr_createdAt": "2020-03-26T14:47:40Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/54277", "timeline": [{"oid": "354cf998afc3502ffa3a9501d7ec8a27621edaf4", "url": "https://github.com/elastic/elasticsearch/commit/354cf998afc3502ffa3a9501d7ec8a27621edaf4", "message": "EQL: implement between function", "committedDate": "2020-03-26T14:44:00Z", "type": "commit"}, {"oid": "341c725d6bf1efc8f87c6f87055f1299639e0541", "url": "https://github.com/elastic/elasticsearch/commit/341c725d6bf1efc8f87c6f87055f1299639e0541", "message": "Address WIP TODOs. Add more tests", "committedDate": "2020-03-26T20:00:26Z", "type": "commit"}, {"oid": "69c404fd6c395e5bd65ff18e27baa6f5660bd859", "url": "https://github.com/elastic/elasticsearch/commit/69c404fd6c395e5bd65ff18e27baa6f5660bd859", "message": "Fix linter complaint", "committedDate": "2020-03-26T20:11:13Z", "type": "commit"}, {"oid": "81cc3665f99b0ae3e478ccdf89e09cdf97ecd1db", "url": "https://github.com/elastic/elasticsearch/commit/81cc3665f99b0ae3e478ccdf89e09cdf97ecd1db", "message": "Add more query folder tests to cover invalid parameter types", "committedDate": "2020-03-27T13:56:38Z", "type": "commit"}, {"oid": "94ce5fac7879a0e6abc330d5971b8b223035057c", "url": "https://github.com/elastic/elasticsearch/commit/94ce5fac7879a0e6abc330d5971b8b223035057c", "message": "Update Between toDefault. Fix typo in BetweenFunctionProcessor. Add more tests.", "committedDate": "2020-03-27T19:21:40Z", "type": "commit"}, {"oid": "61a78085754ea3fd7bc29bb4045362f35a54b83c", "url": "https://github.com/elastic/elasticsearch/commit/61a78085754ea3fd7bc29bb4045362f35a54b83c", "message": "Remove unneeded null checks in BetweenFunctionProcessor::doProcess", "committedDate": "2020-03-27T19:44:29Z", "type": "commit"}, {"oid": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "url": "https://github.com/elastic/elasticsearch/commit/be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "message": "Merge branch 'master' into feature/between", "committedDate": "2020-03-27T19:47:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNzQ0OA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400337448", "bodyText": "Why this package name? :-)\nShouldn't this be the same as for other string functions? org.elasticsearch.xpack.eql.expression.function.scalar.string", "author": "astefan", "createdAt": "2020-03-30T16:42:50Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/Between.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwODg5Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403508892", "bodyText": "Yep. Will move everything under scalar.string package.", "author": "aleksmaus", "createdAt": "2020-04-04T19:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNzQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mjk2NA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400342964", "bodyText": "I think sbtw is shorter and serves the same purpose.", "author": "astefan", "createdAt": "2020-03-30T16:50:57Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbetween\";", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwOTA0OA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403509048", "bodyText": "Updated.", "author": "aleksmaus", "createdAt": "2020-04-04T19:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mjk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjA1Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400352056", "bodyText": "Can you move this one before substring (to follow the alphabetical order), please?", "author": "astefan", "createdAt": "2020-03-30T17:04:58Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/whitelist/InternalEqlScriptUtils.java", "diffHunk": "@@ -21,4 +22,8 @@\n     public static String substring(String s, Number start, Number end) {\n         return (String) SubstringFunctionProcessor.doProcess(s, start, end);\n     }\n+\n+    public static String between(String s, String left, String right, Boolean greedy, Boolean caseSensitive) {", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwOTk1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403509953", "bodyText": "Done.", "author": "aleksmaus", "createdAt": "2020-04-04T19:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NzI3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400357277", "bodyText": "I'll let other reviewers weigh in on the necessity of this approach here.\nThat isn't an usual approach with randomized testing. The Elasticsearch infra in CI does run the tests continuously and having a randomized value for parameters is usually enough.\nA more common approach is to introduce randomness in tests with various random* methods and leave CI do its thing. A personal approach (that others I believe are following) is to stress test such a random test class with -Dtests.iters=1000 or such a large value before creating the PR. I'm not saying this is enough, but it gives one a greater degree of confidence over the committed code.", "author": "astefan", "createdAt": "2020-03-30T17:13:34Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenBaseTestCase.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.test.ESTestCase;\n+\n+import java.util.concurrent.Callable;\n+\n+public abstract class BetweenBaseTestCase extends ESTestCase {", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTUwNA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403479504", "bodyText": "This seems to be the approach utilized by serializations tests, it's just extracted into the base class there, which we could consolidate across functions tests. Easy to remove. Let me know.", "author": "aleksmaus", "createdAt": "2020-04-04T14:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NzI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMDE0OA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403510148", "bodyText": "Removed the class and the multiple tests runs from randomized tests.", "author": "aleksmaus", "createdAt": "2020-04-04T19:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NzI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MTg3MA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400361870", "bodyText": "No test with last parameter set to true.", "author": "astefan", "createdAt": "2020-03-30T17:20:35Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenUtilsTests.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.apache.directory.api.util.Strings;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class BetweenUtilsTests extends BetweenBaseTestCase {\n+    public void testNullOrEmptyString() throws Exception {\n+        run(() -> {\n+            String left = randomAlphaOfLength(10);\n+            String right = randomAlphaOfLength(10);\n+            boolean greedy = randomBoolean();\n+            boolean caseSensitive = randomBoolean();\n+\n+            String string = randomBoolean() ? null : Strings.EMPTY_STRING;\n+            assertThat(BetweenUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+            return null;\n+        });\n+    }\n+\n+    public void testEmptyNullLeftRight() throws Exception {\n+        run(() -> {\n+            String string = randomAlphaOfLength(10);\n+            String left = randomBoolean() ? null : \"\";\n+            String right = randomBoolean() ? null : \"\";\n+            boolean greedy = randomBoolean();\n+            boolean caseSensitive = randomBoolean();\n+            assertThat(BetweenUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+            return null;\n+        });\n+    }\n+\n+    // Test from EQL doc https://eql.readthedocs.io/en/latest/query-guide/functions.html\n+    public void testBasicEQLExamples() {\n+        assertThat(BetweenUtils.between(\"welcome to event query language\", \" \", \" \", false, false),\n+                equalTo(\"to\"));\n+        assertThat(BetweenUtils.between(\"welcome to event query language\", \" \", \" \", true, false),\n+                equalTo(\"to event query\"));\n+        assertThat(BetweenUtils.between(\"System Idle Process\", \"s\", \"e\", true, false),\n+                equalTo(\"ystem Idle Proc\"));\n+\n+        assertThat(BetweenUtils.between(\"C:\\\\workspace\\\\dev\\\\TestLogs\\\\something.json\", \"dev\", \".json\", false, false),\n+                equalTo(\"\\\\TestLogs\\\\something\"));\n+\n+        assertThat(BetweenUtils.between(\"C:\\\\workspace\\\\dev\\\\TestLogs\\\\something.json\", \"dev\", \".json\", true, false),\n+                equalTo(\"\\\\TestLogs\\\\something\"));\n+\n+        assertThat(BetweenUtils.between(\"System Idle Process\", \"s\", \"e\", false, false),\n+                equalTo(\"yst\"));\n+    }", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMDg4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403510887", "bodyText": "Good catch, thanks. Added more tests.", "author": "aleksmaus", "createdAt": "2020-04-04T20:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODEyOQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400368129", "bodyText": "This should go somewhere at the top of this class.", "author": "astefan", "createdAt": "2020-03-30T17:30:16Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMDk4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403510987", "bodyText": "Moved to the top of this class.", "author": "aleksmaus", "createdAt": "2020-04-04T20:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODg4NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400368885", "bodyText": "hasOptionalParams == false", "author": "astefan", "createdAt": "2020-03-30T17:31:31Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {\n+            \"zero\",\n+            \"one\",\n+            \"two\",\n+            \"three\",\n+            \"four\",\n+            \"five\",\n+    };\n+\n+    @SuppressWarnings(\"overloads\")  // These are ambiguous if you aren't using ctor references but we always do\n+    public static <T extends Function> FunctionDefinition def(Class<T> function,\n+                                                              FiveParametersFunctionBuilder<T> ctorRef,\n+                                                              int numOptionalParams, String... names) {\n+        FunctionBuilder builder = (source, children, distinct, cfg) -> {\n+            final int NUM_TOTAL_PARAMS = 5;\n+            boolean hasOptionalParams = OptionalArgument.class.isAssignableFrom(function);\n+            if (hasOptionalParams && (children.size() > NUM_TOTAL_PARAMS || children.size() < NUM_TOTAL_PARAMS - numOptionalParams)) {\n+                throw new QlIllegalArgumentException(\"expects between \" + NUM_NAMES[NUM_TOTAL_PARAMS - numOptionalParams]\n+                        + \" and \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");\n+            } else if (!hasOptionalParams && children.size() != NUM_TOTAL_PARAMS) {", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMTA0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403511042", "bodyText": "Updated.", "author": "aleksmaus", "createdAt": "2020-04-04T20:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzcxNw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r400373717", "bodyText": "I understand this wants to be a generic approach for dealing with a variable number of optional parameters, but:\n\nthis solution needs to be generic throughout this class: here it's another method accepting optional parameters.\nI don't understand the purpose of this method... it tries to be generic, but NUM_TOTAL_PARAMS is always 5. So, this method is for functions that can have between 0 and 5 optional parameters? Apart from between is there any other such function?", "author": "astefan", "createdAt": "2020-03-30T17:39:03Z", "path": "x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/expression/function/FunctionRegistry.java", "diffHunk": "@@ -403,6 +403,47 @@ public static FunctionDefinition def(Class<? extends Function> function, Functio\n         T build(Source source, Expression src, Expression exp1, Expression exp2, Expression exp3);\n     }\n \n+\n+    // Translation table for error messaging in the following function\n+    private static final String[] NUM_NAMES = {\n+            \"zero\",\n+            \"one\",\n+            \"two\",\n+            \"three\",\n+            \"four\",\n+            \"five\",\n+    };\n+\n+    @SuppressWarnings(\"overloads\")  // These are ambiguous if you aren't using ctor references but we always do\n+    public static <T extends Function> FunctionDefinition def(Class<T> function,\n+                                                              FiveParametersFunctionBuilder<T> ctorRef,\n+                                                              int numOptionalParams, String... names) {\n+        FunctionBuilder builder = (source, children, distinct, cfg) -> {\n+            final int NUM_TOTAL_PARAMS = 5;\n+            boolean hasOptionalParams = OptionalArgument.class.isAssignableFrom(function);\n+            if (hasOptionalParams && (children.size() > NUM_TOTAL_PARAMS || children.size() < NUM_TOTAL_PARAMS - numOptionalParams)) {\n+                throw new QlIllegalArgumentException(\"expects between \" + NUM_NAMES[NUM_TOTAL_PARAMS - numOptionalParams]\n+                        + \" and \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");\n+            } else if (!hasOptionalParams && children.size() != NUM_TOTAL_PARAMS) {\n+                throw new QlIllegalArgumentException(\"expects exactly \" + NUM_NAMES[NUM_TOTAL_PARAMS] + \" arguments\");", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTk4Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403479983", "bodyText": "The approach by the here link in you comment allows only one optional parameter.\nHere I created a kind of more generic implementation allowing to specify the number of optional parameters.\nIn the case of between function we need to support up to two optional parameters.", "author": "aleksmaus", "createdAt": "2020-04-04T15:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTk0MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404381941", "bodyText": "Let's revisit this based on whether between actually needs case sensitivity or not - if it doesn't it will simplify things.\nSame applies for greedy.\n/cc @rw-access", "author": "costin", "createdAt": "2020-04-06T20:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MzQyMQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404463421", "bodyText": "the greedy is not quite the same as case sensitivity, could be useful.", "author": "aleksmaus", "createdAt": "2020-04-07T00:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMTc1Mw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401901753", "bodyText": "what if left and right are null?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (source == null) {\n          \n          \n            \n                    if (source == null || left == null || right == null) {", "author": "rw-access", "createdAt": "2020-04-01T20:51:57Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbetween\";\n+\n+    private final Processor source, left, right, greedy, caseSensitive;\n+\n+    public BetweenFunctionProcessor(Processor source, Processor left, Processor right, Processor greedy, Processor caseSensitive) {\n+        this.source = source;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = greedy;\n+        this.caseSensitive = caseSensitive;\n+    }\n+\n+    public BetweenFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        left = in.readNamedWriteable(Processor.class);\n+        right = in.readNamedWriteable(Processor.class);\n+        greedy = in.readNamedWriteable(Processor.class);\n+        caseSensitive = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(left);\n+        out.writeNamedWriteable(right);\n+        out.writeNamedWriteable(greedy);\n+        out.writeNamedWriteable(caseSensitive);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), left.process(input), right.process(input),\n+                greedy.process(input), caseSensitive.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object left, Object right, Object greedy, Object caseSensitive) {\n+        if (source == null) {", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwOTg1Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403509857", "bodyText": "Across functions that I  was implementing so far I was assuming that we are returning null only if the source data (first param) is null.\nThe rest of params  values should provided or there there will an exception, which is consistent with Java strings function overall that throw when the parameter is null.\nSaw another approach was used by @astefan where was returning null if any of params are null.\nOpen for discussion, but would need to make consistent across of all of the functions.\nHaven't heard a definite decision on this yet.", "author": "aleksmaus", "createdAt": "2020-04-04T19:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMTc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0OTk0Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401949942", "bodyText": "Since there are two optional arguments, do we need another class?", "author": "rw-access", "createdAt": "2020-04-01T22:35:27Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/between/Between.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.between;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.between.BetweenFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific between function.\n+ * between(source, left, right[, greedy=false, case_sensitive=false])\n+ * Extracts a substring from source that\u2019s between left and right substrings\n+ */\n+public class Between extends ScalarFunction implements OptionalArgument {", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MTA3OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401951079", "bodyText": "Saw the new custom builder. ++", "author": "rw-access", "createdAt": "2020-04-01T22:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0OTk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MDk2MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r401950961", "bodyText": "Should this be three?", "author": "rw-access", "createdAt": "2020-04-01T22:38:16Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/EqlFunctionRegistry.java", "diffHunk": "@@ -17,12 +18,13 @@\n     public EqlFunctionRegistry() {\n         super(functions());\n     }\n-    \n+\n     private static FunctionDefinition[][] functions() {\n         return new FunctionDefinition[][] {\n         // Scalar functions\n         // String\n             new FunctionDefinition[] {\n+                def(Between.class, Between::new, 2, \"between\"),", "originalCommit": "be0b67cdf5022f38ec3610a68bbb91af8b10b8b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwNTgyMg==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r403505822", "bodyText": "according to https://eql.readthedocs.io/en/latest/query-guide/functions.html#between\nbetween(source, left, right[, greedy=false, case_sensitive=false])\nit has two optional parameters", "author": "aleksmaus", "createdAt": "2020-04-04T19:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MDk2MQ=="}], "type": "inlineReview"}, {"oid": "779111c6b22f2be6b1a6ca8de8ee606f96b39a23", "url": "https://github.com/elastic/elasticsearch/commit/779111c6b22f2be6b1a6ca8de8ee606f96b39a23", "message": "Merge branch 'master' into feature/between", "committedDate": "2020-04-04T19:31:31Z", "type": "commit"}, {"oid": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "url": "https://github.com/elastic/elasticsearch/commit/72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "message": "Address code review comments", "committedDate": "2020-04-04T20:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTA5OQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404379099", "bodyText": "It might be worth extracting these assertions into the Check  class inside QL and reusing them through-out the code.\nWe've been going back and forth regarding this style - the if check is fairly simple but repeating the string is tedious (and typically tends to not be consistent).", "author": "costin", "createdAt": "2020-04-06T20:49:42Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbtw\";\n+\n+    private final Processor source, left, right, greedy, caseSensitive;\n+\n+    public BetweenFunctionProcessor(Processor source, Processor left, Processor right, Processor greedy, Processor caseSensitive) {\n+        this.source = source;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = greedy;\n+        this.caseSensitive = caseSensitive;\n+    }\n+\n+    public BetweenFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        left = in.readNamedWriteable(Processor.class);\n+        right = in.readNamedWriteable(Processor.class);\n+        greedy = in.readNamedWriteable(Processor.class);\n+        caseSensitive = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(left);\n+        out.writeNamedWriteable(right);\n+        out.writeNamedWriteable(greedy);\n+        out.writeNamedWriteable(caseSensitive);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), left.process(input), right.process(input),\n+                greedy.process(input), caseSensitive.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object left, Object right, Object greedy, Object caseSensitive) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        throwIfNotString(source);\n+        throwIfNotString(left);\n+        throwIfNotString(right);\n+\n+        throwIfNotBoolean(greedy);\n+        throwIfNotBoolean(caseSensitive);\n+\n+        String str = source.toString();\n+        String strRight = right.toString();\n+        String strLeft = left.toString();\n+        boolean bGreedy = ((Boolean) greedy).booleanValue();\n+        boolean bCaseSensitive = ((Boolean) caseSensitive).booleanValue();\n+        return StringUtils.between(str, strLeft, strRight, bGreedy, bCaseSensitive);\n+    }\n+\n+    private static void throwIfNotString(Object obj) {\n+        if (!(obj instanceof String || obj instanceof Character)) {", "originalCommit": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTQ2Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404395462", "bodyText": "yeah, I tried to avoid repetition of code and error strings. Moved these into QL Check class.", "author": "aleksmaus", "createdAt": "2020-04-06T21:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTU0Ng==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404379546", "bodyText": "Small nit - the getNameWritable tends to be towards the top after writeTo and hashCode before equals.", "author": "costin", "createdAt": "2020-04-06T20:50:34Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/BetweenFunctionProcessor.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.xpack.eql.EqlIllegalArgumentException;\n+import org.elasticsearch.xpack.ql.expression.gen.processor.Processor;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+public class BetweenFunctionProcessor implements Processor {\n+\n+    public static final String NAME = \"sbtw\";\n+\n+    private final Processor source, left, right, greedy, caseSensitive;\n+\n+    public BetweenFunctionProcessor(Processor source, Processor left, Processor right, Processor greedy, Processor caseSensitive) {\n+        this.source = source;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = greedy;\n+        this.caseSensitive = caseSensitive;\n+    }\n+\n+    public BetweenFunctionProcessor(StreamInput in) throws IOException {\n+        source = in.readNamedWriteable(Processor.class);\n+        left = in.readNamedWriteable(Processor.class);\n+        right = in.readNamedWriteable(Processor.class);\n+        greedy = in.readNamedWriteable(Processor.class);\n+        caseSensitive = in.readNamedWriteable(Processor.class);\n+    }\n+\n+    @Override\n+    public final void writeTo(StreamOutput out) throws IOException {\n+        out.writeNamedWriteable(source);\n+        out.writeNamedWriteable(left);\n+        out.writeNamedWriteable(right);\n+        out.writeNamedWriteable(greedy);\n+        out.writeNamedWriteable(caseSensitive);\n+    }\n+\n+    @Override\n+    public Object process(Object input) {\n+        return doProcess(source.process(input), left.process(input), right.process(input),\n+                greedy.process(input), caseSensitive.process(input));\n+    }\n+\n+    public static Object doProcess(Object source, Object left, Object right, Object greedy, Object caseSensitive) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n+        throwIfNotString(source);\n+        throwIfNotString(left);\n+        throwIfNotString(right);\n+\n+        throwIfNotBoolean(greedy);\n+        throwIfNotBoolean(caseSensitive);\n+\n+        String str = source.toString();\n+        String strRight = right.toString();\n+        String strLeft = left.toString();\n+        boolean bGreedy = ((Boolean) greedy).booleanValue();\n+        boolean bCaseSensitive = ((Boolean) caseSensitive).booleanValue();\n+        return StringUtils.between(str, strLeft, strRight, bGreedy, bCaseSensitive);\n+    }\n+\n+    private static void throwIfNotString(Object obj) {\n+        if (!(obj instanceof String || obj instanceof Character)) {\n+            throw new EqlIllegalArgumentException(\"A string/char is required; received [{}]\", obj);\n+        }\n+    }\n+\n+    private static void throwIfNotBoolean(Object obj) {\n+        if (!(obj instanceof Boolean)) {\n+            throw new EqlIllegalArgumentException(\"A boolean is required; received [{}]\", obj);\n+        }\n+    }\n+\n+    protected Processor source() {\n+        return source;\n+    }\n+\n+    public Processor left() {\n+        return left;\n+    }\n+\n+    public Processor right() {\n+        return right;\n+    }\n+\n+    public Processor greedy() {\n+        return greedy;\n+    }\n+\n+    public Processor caseSensitive() {\n+        return caseSensitive;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object obj) {", "originalCommit": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5ODU3Mg==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404398572", "bodyText": "It looks like getWriteableName presently it is at the end of every FunctionProcessor so far.\nUpdated.", "author": "aleksmaus", "createdAt": "2020-04-06T21:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDEwNw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404380107", "bodyText": "You could return org.elasticsearch.xpack.ql.util.StringUtils.EMPTY instead.", "author": "costin", "createdAt": "2020-04-06T20:51:40Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtils.java", "diffHunk": "@@ -8,12 +8,57 @@\n \n import org.elasticsearch.common.Strings;\n \n+import java.util.Locale;\n+\n import static org.elasticsearch.common.Strings.hasLength;\n \n final class StringUtils {\n \n     private StringUtils() {}\n \n+    /**\n+     * Extracts a substring from string between left and right strings.\n+     * Port of \"between\" function from the original EQL python implementation.\n+     *\n+     * @param string        string to search.\n+     * @param left          left bounding substring to search for.\n+     * @param right         right bounding substring to search for.\n+     * @param greedy        match the longest substring if true.\n+     * @param caseSensitive match case when searching for {@code left} and {@code right} strings.\n+     * @return the substring in between {@code left} and {@code right} strings.\n+     */\n+    static String between(String string, String left, String right, boolean greedy, boolean caseSensitive) {\n+        if (hasLength(string) == false || hasLength(left) == false || hasLength(right) == false) {\n+            return string;\n+        }\n+\n+        String matchString = string;\n+        if (caseSensitive == false) {\n+            matchString = matchString.toLowerCase(Locale.ROOT);\n+            left = left.toLowerCase(Locale.ROOT);\n+            right = right.toLowerCase(Locale.ROOT);\n+        }\n+\n+        int idx = matchString.indexOf(left);\n+        if (idx == -1) {\n+            return \"\";", "originalCommit": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5OTY5NQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404399695", "bodyText": "Updated.", "author": "aleksmaus", "createdAt": "2020-04-06T21:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDM2OA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404380368", "bodyText": "Wrong import.", "author": "costin", "createdAt": "2020-04-06T20:52:08Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -6,9 +6,11 @@\n \n package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n \n+import org.apache.directory.api.util.Strings;", "originalCommit": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2Mjk1MQ==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404462951", "bodyText": "Good catch, thank you! Found another place in tests. Updated both places.", "author": "aleksmaus", "createdAt": "2020-04-07T00:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDU3Nw==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404380577", "bodyText": "\ud83d\udc4d", "author": "costin", "createdAt": "2020-04-06T20:52:30Z", "path": "x-pack/plugin/eql/src/test/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/StringUtilsTests.java", "diffHunk": "@@ -72,4 +74,68 @@ public void testSubstringRandomSliceSameStartEnd() {\n     public void testNullValue() {\n         assertNull(substringSlice(null, 0, 0));\n     }\n+\n+    public void testBetweenNullOrEmptyString() throws Exception {\n+        String left = randomAlphaOfLength(10);\n+        String right = randomAlphaOfLength(10);\n+        boolean greedy = randomBoolean();\n+        boolean caseSensitive = randomBoolean();\n+\n+        String string = randomBoolean() ? null : Strings.EMPTY_STRING;\n+        assertThat(StringUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+    }\n+\n+    public void testBetweenEmptyNullLeftRight() throws Exception {\n+        String string = randomAlphaOfLength(10);\n+        String left = randomBoolean() ? null : \"\";\n+        String right = randomBoolean() ? null : \"\";\n+        boolean greedy = randomBoolean();\n+        boolean caseSensitive = randomBoolean();\n+        assertThat(StringUtils.between(string, left, right, greedy, caseSensitive), equalTo(string));\n+    }\n+\n+    // Test from EQL doc https://eql.readthedocs.io/en/latest/query-guide/functions.html\n+    public void testBetweenBasicEQLExamples() {", "originalCommit": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MjYzNA==", "url": "https://github.com/elastic/elasticsearch/pull/54277#discussion_r404382634", "bodyText": "Better to create a new exception preservation the source - helps with tracking down the location of the argument:\nnew Literal(exp.source(), Boolean.FALSE, DataTypes.Boolean)", "author": "costin", "createdAt": "2020-04-06T20:56:13Z", "path": "x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/expression/function/scalar/string/Between.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License;\n+ * you may not use this file except in compliance with the Elastic License.\n+ */\n+\n+package org.elasticsearch.xpack.eql.expression.function.scalar.string;\n+\n+import org.elasticsearch.xpack.ql.expression.Expression;\n+import org.elasticsearch.xpack.ql.expression.Expressions;\n+import org.elasticsearch.xpack.ql.expression.FieldAttribute;\n+import org.elasticsearch.xpack.ql.expression.Literal;\n+import org.elasticsearch.xpack.ql.expression.function.OptionalArgument;\n+import org.elasticsearch.xpack.ql.expression.function.scalar.ScalarFunction;\n+import org.elasticsearch.xpack.ql.expression.gen.pipeline.Pipe;\n+import org.elasticsearch.xpack.ql.expression.gen.script.ScriptTemplate;\n+import org.elasticsearch.xpack.ql.expression.gen.script.Scripts;\n+import org.elasticsearch.xpack.ql.tree.NodeInfo;\n+import org.elasticsearch.xpack.ql.tree.Source;\n+import org.elasticsearch.xpack.ql.type.DataType;\n+import org.elasticsearch.xpack.ql.type.DataTypes;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static java.lang.String.format;\n+import static org.elasticsearch.xpack.eql.expression.function.scalar.string.BetweenFunctionProcessor.doProcess;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isBoolean;\n+import static org.elasticsearch.xpack.ql.expression.TypeResolutions.isStringAndExact;\n+import static org.elasticsearch.xpack.ql.expression.gen.script.ParamsBuilder.paramsBuilder;\n+\n+/**\n+ * EQL specific between function.\n+ * between(source, left, right[, greedy=false, case_sensitive=false])\n+ * Extracts a substring from source that\u2019s between left and right substrings\n+ */\n+public class Between extends ScalarFunction implements OptionalArgument {\n+\n+    private final Expression source, left, right, greedy, caseSensitive;\n+\n+    public Between(Source source, Expression src, Expression left, Expression right, Expression greedy, Expression caseSensitive) {\n+        super(source, Arrays.asList(src, left, right, toDefault(greedy), toDefault(caseSensitive)));\n+        this.source = src;\n+        this.left = left;\n+        this.right = right;\n+        this.greedy = arguments().get(3);\n+        this.caseSensitive = arguments().get(4);\n+    }\n+\n+    private static Expression toDefault(Expression exp) {\n+        return exp != null ? exp : Literal.FALSE;", "originalCommit": "72265cd5569e6db5e5d7fe64b81e0a6ed6a53140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cff240ea00910219162ba7bb8aaff8596bc8d410", "url": "https://github.com/elastic/elasticsearch/commit/cff240ea00910219162ba7bb8aaff8596bc8d410", "message": "Address additional code review comments", "committedDate": "2020-04-07T00:20:34Z", "type": "commit"}, {"oid": "a0c9832e73ca8d07bf7a2589d15a72f2f6419af3", "url": "https://github.com/elastic/elasticsearch/commit/a0c9832e73ca8d07bf7a2589d15a72f2f6419af3", "message": "Merge branch 'master' into feature/between", "committedDate": "2020-04-07T00:25:22Z", "type": "commit"}, {"oid": "d7ac4e85f8d207b45ffd1bf90e579560a8413b8e", "url": "https://github.com/elastic/elasticsearch/commit/d7ac4e85f8d207b45ffd1bf90e579560a8413b8e", "message": "Remove dependency on QL from eql/qa project", "committedDate": "2020-04-07T13:37:58Z", "type": "commit"}, {"oid": "d6dfca5b30640e18f6bbd25dc2a28c7f4ff23698", "url": "https://github.com/elastic/elasticsearch/commit/d6dfca5b30640e18f6bbd25dc2a28c7f4ff23698", "message": "Merge branch 'master' into feature/between", "committedDate": "2020-04-07T14:07:32Z", "type": "commit"}, {"oid": "fd5d05a7102f2ed9cbd1823ff9404cc0a63dccc9", "url": "https://github.com/elastic/elasticsearch/commit/fd5d05a7102f2ed9cbd1823ff9404cc0a63dccc9", "message": "Merge branch 'master' of github.com:elastic/elasticsearch into feature/between", "committedDate": "2020-04-07T14:31:33Z", "type": "commit"}, {"oid": "39a329ad71d9f1028037664155f05046cd57905f", "url": "https://github.com/elastic/elasticsearch/commit/39a329ad71d9f1028037664155f05046cd57905f", "message": "Merge branch 'master' into feature/between", "committedDate": "2020-04-07T15:26:10Z", "type": "commit"}]}