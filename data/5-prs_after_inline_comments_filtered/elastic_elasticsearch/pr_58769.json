{"pr_number": 58769, "pr_title": "Move getPointReaderOrNull into AggregatorBase", "pr_createdAt": "2020-06-30T17:47:28Z", "pr_url": "https://github.com/elastic/elasticsearch/pull/58769", "timeline": [{"oid": "b435cd0e12585aa17c5108c51f5ff951ebb56187", "url": "https://github.com/elastic/elasticsearch/commit/b435cd0e12585aa17c5108c51f5ff951ebb56187", "message": "Pull getPointReader up to AggregatorBase", "committedDate": "2020-06-24T19:12:10Z", "type": "commit"}, {"oid": "c4f79ed84da874f803818e1687f49b82447a6d91", "url": "https://github.com/elastic/elasticsearch/commit/c4f79ed84da874f803818e1687f49b82447a6d91", "message": "Make getPointReader instance method", "committedDate": "2020-06-24T19:28:20Z", "type": "commit"}, {"oid": "0f1dc77dd0dd50f93d6d75cbb0090fa74d144d0f", "url": "https://github.com/elastic/elasticsearch/commit/0f1dc77dd0dd50f93d6d75cbb0090fa74d144d0f", "message": "pull getPointReaderOrNull up to the aggregator base", "committedDate": "2020-06-30T17:42:05Z", "type": "commit"}, {"oid": "c4eedfa7a48ffd92c502bd7dd74fa5255685c1a7", "url": "https://github.com/elastic/elasticsearch/commit/c4eedfa7a48ffd92c502bd7dd74fa5255685c1a7", "message": "Merge branch 'master' into vs-config-raw-data-flag", "committedDate": "2020-06-30T18:44:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzOTAxMA==", "url": "https://github.com/elastic/elasticsearch/pull/58769#discussion_r447939010", "bodyText": "Do you think now'd be a good time to change the name? I always thought something like pointReaderIfSafe or something is a little more clear about why you might get null back.\nAnd it isn't so much \"if early termination is applicable\" as \"if there are no filters and the underlying index is in the same order as the values produced by the config\"", "author": "nik9000", "createdAt": "2020-06-30T19:49:36Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java", "diffHunk": "@@ -105,6 +108,22 @@ public ScoreMode scoreMode() {\n         addRequestCircuitBreakerBytes(DEFAULT_WEIGHT);\n     }\n \n+    /**\n+     * Returns a converter for point values if early termination is applicable to\n+     * the context or <code>null</code> otherwise.\n+     *\n+     * @param config The config for the values source metric.\n+     */\n+    public Function<byte[], Number> getPointReaderOrNull(ValuesSourceConfig config) {", "originalCommit": "c4eedfa7a48ffd92c502bd7dd74fa5255685c1a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzOTg4Nw==", "url": "https://github.com/elastic/elasticsearch/pull/58769#discussion_r447939887", "bodyText": "Could you make the method final?", "author": "nik9000", "createdAt": "2020-06-30T19:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzOTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5OTc4OA==", "url": "https://github.com/elastic/elasticsearch/pull/58769#discussion_r448399788", "bodyText": "the underlying index is in the same order as the values produced by the config\n\nOut of curiosity, what in the current logic looks at index ordering?", "author": "not-napoleon", "createdAt": "2020-07-01T14:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzOTAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MDQ3MA==", "url": "https://github.com/elastic/elasticsearch/pull/58769#discussion_r447940470", "bodyText": "It's probably worth some javadoc on this one too.", "author": "nik9000", "createdAt": "2020-06-30T19:52:28Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "diffHunk": "@@ -371,4 +374,24 @@ public ValuesSource getValuesSource() {\n     public boolean hasGlobalOrdinals() {\n         return valuesSource.hasGlobalOrdinals();\n     }\n+\n+    @Nullable\n+    public Function<byte[], Number> getPointReaderOrNull() {", "originalCommit": "c4eedfa7a48ffd92c502bd7dd74fa5255685c1a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcd9704d36ee6d7490fc203ce9d789c7f0fff5af", "url": "https://github.com/elastic/elasticsearch/commit/fcd9704d36ee6d7490fc203ce9d789c7f0fff5af", "message": "response to PR feedback", "committedDate": "2020-07-01T13:42:59Z", "type": "commit"}, {"oid": "37aa3694a0b0dddc2cdfa693ad0423286bb282a9", "url": "https://github.com/elastic/elasticsearch/commit/37aa3694a0b0dddc2cdfa693ad0423286bb282a9", "message": "Add extension point for point reader lookup", "committedDate": "2020-07-01T15:17:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MDYxMw==", "url": "https://github.com/elastic/elasticsearch/pull/58769#discussion_r448450613", "bodyText": "I'm not convinced this is the right place to add extensibility here.  The other option I'm considering, we could make parsePoint a method on MappedFieldType (or, maybe a method that returns a reference to parsePoint or null, depending on if it's implemented for that field).  That would let us get rid of the instance type checking, and provide a way for plugins that add fields which use CoreVSTs to add custom point readers.", "author": "not-napoleon", "createdAt": "2020-07-01T15:39:01Z", "path": "server/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceType.java", "diffHunk": "@@ -85,6 +87,15 @@\n     ValuesSource replaceMissing(ValuesSource valuesSource, Object rawMissing, DocValueFormat docValueFormat,\n                                 LongSupplier nowSupplier);\n \n+    /**\n+     * Attempts to return a reader function for the indexed data of this field.  Some aggregations are able to use this as an optimization\n+     * instead of relying on doc values, when the index sort order matches that of the aggregation.\n+     *\n+     * @param fieldType The field type we want to get a reader for\n+     * @return null if we can't get a reader (e.g. because the field is the wrong type), otherwise a point reader function.\n+     */\n+    default Function<byte[], Number> getPointReader(MappedFieldType fieldType) { return null; }", "originalCommit": "37aa3694a0b0dddc2cdfa693ad0423286bb282a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMTk1OA==", "url": "https://github.com/elastic/elasticsearch/pull/58769#discussion_r448531958", "bodyText": "I agree that it should be the MappedFieldType's responsibility. It is built by the FieldMapper which is ultimately the only thing that actually knows how the index was built.", "author": "nik9000", "createdAt": "2020-07-01T18:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1MDYxMw=="}], "type": "inlineReview"}, {"oid": "a5c82c4d5af43bdc882b052f5ac36d8bfb0bceea", "url": "https://github.com/elastic/elasticsearch/commit/a5c82c4d5af43bdc882b052f5ac36d8bfb0bceea", "message": "move point reader creation onto MappedFieldType", "committedDate": "2020-07-01T21:22:36Z", "type": "commit"}, {"oid": "c429c77ec87e2a58ba87e6a7e92436d2a5138b25", "url": "https://github.com/elastic/elasticsearch/commit/c429c77ec87e2a58ba87e6a7e92436d2a5138b25", "message": "Merge branch 'master' into vs-config-raw-data-flag", "committedDate": "2020-07-02T14:06:22Z", "type": "commit"}, {"oid": "d1cd163401a3df5a8ea80f60bfe78a41e0d86df1", "url": "https://github.com/elastic/elasticsearch/commit/d1cd163401a3df5a8ea80f60bfe78a41e0d86df1", "message": "Merge branch 'master' into vs-config-raw-data-flag", "committedDate": "2020-07-06T15:56:41Z", "type": "commit"}, {"oid": "573c19d0f415be85abec0efecf1aa0b0b59b8662", "url": "https://github.com/elastic/elasticsearch/commit/573c19d0f415be85abec0efecf1aa0b0b59b8662", "message": "Merge branch 'master' into vs-config-raw-data-flag\n\n Conflicts:\n\tserver/src/main/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfig.java", "committedDate": "2020-07-09T19:55:14Z", "type": "commit"}]}