{"pr_number": 1037, "pr_title": "Review SmartadserverBidder", "pr_createdAt": "2020-11-30T01:03:03Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/1037", "timeline": [{"oid": "88909f45e456da9e8b007400c47620be4c209d44", "url": "https://github.com/prebid/prebid-server-java/commit/88909f45e456da9e8b007400c47620be4c209d44", "message": "Review SmartadserverBidder", "committedDate": "2020-11-30T01:00:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1Njg1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1037#discussion_r532556859", "bodyText": "Pls check StringUtils.removeEnd(..) instead.", "author": "rpanchyk", "createdAt": "2020-11-30T12:20:56Z", "path": "src/main/java/org/prebid/server/bidder/smartadserver/SmartadserverBidder.java", "diffHunk": "@@ -52,54 +53,65 @@ public SmartadserverBidder(String endpointUrl, JacksonMapper mapper) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<BidderError> errors = new ArrayList<>();\n \n         for (Imp imp : request.getImp()) {\n             try {\n                 final ExtImpSmartadserver extImpSmartadserver = parseImpExt(imp);\n-                final BidRequest updateRequest = request.toBuilder()\n+                final BidRequest updatedRequest = request.toBuilder()\n                         .imp(Collections.singletonList(imp))\n                         .site(Site.builder()\n                                 .publisher(Publisher.builder()\n                                         .id(String.valueOf(extImpSmartadserver.getNetworkId()))\n                                         .build())\n                                 .build())\n                         .build();\n-                result.add(createSingleRequest(updateRequest, getUri()));\n+                result.add(createSingleRequest(updatedRequest));\n             } catch (PreBidException e) {\n-                return Result.withError(BidderError.badInput(e.getMessage()));\n+                errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n-        return Result.withValues(result);\n+        return Result.of(result, errors);\n     }\n \n     private ExtImpSmartadserver parseImpExt(Imp imp) {\n         try {\n             return mapper.mapper().convertValue(imp.getExt(), SMARTADSERVER_EXT_TYPE_REFERENCE).getBidder();\n         } catch (IllegalArgumentException e) {\n-            throw new PreBidException(e.getMessage(), e);\n+            throw new PreBidException(\"Error parsing smartadserverExt parameters\");\n         }\n     }\n \n-    private String getUri() {\n-        final URIBuilder uriBuilder = new URIBuilder()\n-                .setPath(String.join(\"api/bid\", endpointUrl))\n-                .addParameter(\"callerId\", \"5\");\n-\n-        return uriBuilder.toString();\n-    }\n+    private HttpRequest<BidRequest> createSingleRequest(BidRequest request) {\n \n-    private HttpRequest<BidRequest> createSingleRequest(BidRequest request, String url) {\n-        final BidRequest outgoingRequest = request.toBuilder().build();\n-        final String body = mapper.encode(outgoingRequest);\n         return HttpRequest.<BidRequest>builder()\n                 .method(HttpMethod.POST)\n-                .uri(url)\n+                .uri(getUri())\n                 .headers(HttpUtil.headers())\n-                .body(body)\n-                .payload(outgoingRequest)\n+                .body(mapper.encode(request))\n+                .payload(request)\n                 .build();\n     }\n \n+    private String getUri() {\n+        final URI uri;\n+        final String resolvedPath;\n+        try {\n+            uri = new URI(endpointUrl);\n+            final String existingPath = uri.getPath();\n+            resolvedPath = existingPath.endsWith(\"/\")", "originalCommit": "88909f45e456da9e8b007400c47620be4c209d44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "898fae16916d7dd00c98d6cd7252986ac51996ed", "url": "https://github.com/prebid/prebid-server-java/commit/898fae16916d7dd00c98d6cd7252986ac51996ed", "message": "Fixes after review", "committedDate": "2020-11-30T12:35:54Z", "type": "commit"}, {"oid": "06d9eb2776f1761ab2439fc20299815f7dccfc3d", "url": "https://github.com/prebid/prebid-server-java/commit/06d9eb2776f1761ab2439fc20299815f7dccfc3d", "message": "Clean code", "committedDate": "2020-11-30T13:05:13Z", "type": "commit"}, {"oid": "70cfc10957e3dead058e567ea1ab9704a9839298", "url": "https://github.com/prebid/prebid-server-java/commit/70cfc10957e3dead058e567ea1ab9704a9839298", "message": "Github failed - try to find the reason", "committedDate": "2020-11-30T13:19:48Z", "type": "commit"}, {"oid": "c4578e17bee4a711984b366da9707b2c62afd8b8", "url": "https://github.com/prebid/prebid-server-java/commit/c4578e17bee4a711984b366da9707b2c62afd8b8", "message": "Back to normal", "committedDate": "2020-11-30T13:52:31Z", "type": "commit"}]}