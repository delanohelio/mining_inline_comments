{"pr_number": 692, "pr_title": "Add Kidoz Bidder and tests", "pr_createdAt": "2020-04-27T19:55:59Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/692", "timeline": [{"oid": "8cd88c0f9694bdad5c94d60312d1517174cb011d", "url": "https://github.com/prebid/prebid-server-java/commit/8cd88c0f9694bdad5c94d60312d1517174cb011d", "message": "Add Kidoz Bidder and tests", "committedDate": "2020-04-27T19:53:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MjI0MA==", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420062240", "bodyText": "Does they also include xnative ?", "author": "DGarbar", "createdAt": "2020-05-05T12:14:43Z", "path": "src/main/java/org/prebid/server/bidder/kidoz/KidozBidder.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.prebid.server.bidder.kidoz;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.kidoz.ExtImpKidoz;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class KidozBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKidoz>> KIDOZ_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKidoz>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KidozBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpKidoz extImpKidoz = parseAndValidateImpExt(imp);\n+                result.add(createSingleRequest(validImp, request, endpointUrl));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(headers)\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null && imp.getXNative() == null) {", "originalCommit": "8cd88c0f9694bdad5c94d60312d1517174cb011d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NjM0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420066343", "bodyText": "final", "author": "DGarbar", "createdAt": "2020-05-05T12:22:04Z", "path": "src/test/java/org/prebid/server/bidder/kidoz/KidozBidderTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+package org.prebid.server.bidder.kidoz;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.applogy.ApplogyBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.kidoz.ExtImpKidoz;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.audio;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KidozBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private KidozBidder kidozBidder;\n+\n+    @Before\n+    public void setUp() {\n+        kidozBidder = new KidozBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyAcessTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(null, \"publisherId\")))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz access_token required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(\"accessToken\", null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz publisher_id required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpKidoz> ext = ExtPrebid.of(null, ExtImpKidoz.of(\"token1\", \"publisherId\"));\n+        Imp imp = givenImp(", "originalCommit": "8cd88c0f9694bdad5c94d60312d1517174cb011d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NzA4Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/692#discussion_r420067083", "bodyText": "extract this imp also and name appropriately (validImp, notValidImp", "author": "DGarbar", "createdAt": "2020-05-05T12:23:30Z", "path": "src/test/java/org/prebid/server/bidder/kidoz/KidozBidderTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+package org.prebid.server.bidder.kidoz;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.applogy.ApplogyBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.kidoz.ExtImpKidoz;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.audio;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KidozBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private KidozBidder kidozBidder;\n+\n+    @Before\n+    public void setUp() {\n+        kidozBidder = new KidozBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new ApplogyBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyAcessTokens() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(null, \"publisherId\")))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz access_token required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpKidoz.of(\"accessToken\", null)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = kidozBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Kidoz publisher_id required\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?, ExtImpKidoz> ext = ExtPrebid.of(null, ExtImpKidoz.of(\"token1\", \"publisherId\"));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder", "originalCommit": "8cd88c0f9694bdad5c94d60312d1517174cb011d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4fa08a37d0d15c50b887d9c7d77c0554495098c", "url": "https://github.com/prebid/prebid-server-java/commit/c4fa08a37d0d15c50b887d9c7d77c0554495098c", "message": "KidozBidder fixes", "committedDate": "2020-05-05T18:56:23Z", "type": "commit"}, {"oid": "b54691a98b32495db2ebd6b5c4d7c08242b50bac", "url": "https://github.com/prebid/prebid-server-java/commit/b54691a98b32495db2ebd6b5c4d7c08242b50bac", "message": "Merge branch 'master' into add-kidoz-bidder", "committedDate": "2020-06-24T15:42:43Z", "type": "commit"}, {"oid": "5fd0c01d8dd1ea0f4b224ab495802176e9211038", "url": "https://github.com/prebid/prebid-server-java/commit/5fd0c01d8dd1ea0f4b224ab495802176e9211038", "message": "Add pbs-enforces-ccpa property to kidoz.yaml file", "committedDate": "2020-06-24T15:44:49Z", "type": "commit"}]}