{"pr_number": 585, "pr_title": "Rubicon rewarded video", "pr_createdAt": "2020-01-15T13:05:06Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/585", "timeline": [{"oid": "a015572509783df72ea0851d34d29b84bb370745", "url": "https://github.com/prebid/prebid-server-java/commit/a015572509783df72ea0851d34d29b84bb370745", "message": "Add VideoType on Video\n\n-Develop\n-Tests added", "committedDate": "2020-01-13T23:15:49Z", "type": "commit"}, {"oid": "c6860d1d36b019f8ba501d4c23ec0841bcefeef3", "url": "https://github.com/prebid/prebid-server-java/commit/c6860d1d36b019f8ba501d4c23ec0841bcefeef3", "message": "Add VideoType on Video\n\n-Develop\n-Tests added", "committedDate": "2020-01-14T08:35:21Z", "type": "commit"}, {"oid": "1c3124271c0827dfad46c297ccf778ff607e2868", "url": "https://github.com/prebid/prebid-server-java/commit/1c3124271c0827dfad46c297ccf778ff607e2868", "message": "Rubicon Bidder\n\n-Tests\n-bug fix", "committedDate": "2020-01-14T12:20:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NTM5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368345392", "bodyText": "Since we no longer use ExtImpRubicon as a type for map keys, we should rename the map to something like impToImpExt. Please correct other cases as well.", "author": "RossGoncharuk", "createdAt": "2020-01-20T01:57:53Z", "path": "src/main/java/org/prebid/server/bidder/rubicon/RubiconBidder.java", "diffHunk": "@@ -213,11 +216,13 @@ private static boolean useFirstPartyData(BidRequest bidRequest) {\n         return CollectionUtils.isNotEmpty(bidders); // this contains only current bidder\n     }\n \n-    private static Map<Imp, ExtImpRubicon> parseRubiconImpExts(List<Imp> imps, List<BidderError> errors) {\n-        final Map<Imp, ExtImpRubicon> impToRubiconExt = new HashMap<>();\n+    private static Map<Imp, ExtPrebid<ExtImpPrebid, ExtImpRubicon>> parseRubiconImpExts(\n+            List<Imp> imps, List<BidderError> errors\n+    ) {\n+        final Map<Imp, ExtPrebid<ExtImpPrebid, ExtImpRubicon>> impToRubiconExt = new HashMap<>();", "originalCommit": "1c3124271c0827dfad46c297ccf778ff607e2868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NTkxMg==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368345912", "bodyText": "Please remove an extra blank line after last variable declaration. There should be an empty line after last symbol in each .java class, which in 99% cases is a closing curly bracket of the class.", "author": "RossGoncharuk", "createdAt": "2020-01-20T02:02:04Z", "path": "src/main/java/org/prebid/server/bidder/rubicon/proto/RubiconVideoExt.java", "diffHunk": "@@ -12,4 +14,8 @@\n     Integer skipdelay;\n \n     RubiconVideoExtRp rp;\n+\n+    @JsonProperty(\"videotype\")\n+    VideoType videoType;\n+", "originalCommit": "1c3124271c0827dfad46c297ccf778ff607e2868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjM2MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368346361", "bodyText": "This annotation is redundant, since if it is missing Jason will resolve camel case naming (typical Java variable name) into snake case - which is going to be exactly is_rewarded_inventory. So you can skip the annotation when variable name is resolved as expected .json property name.", "author": "RossGoncharuk", "createdAt": "2020-01-20T02:06:07Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtImpPrebid.java", "diffHunk": "@@ -29,4 +29,16 @@\n      */\n     @JsonProperty(\"storedbidresponse\")\n     List<ExtStoredBidResponse> storedBidResponse;\n+\n+    /**\n+     * Defines the contract for bidrequest.imp[i].ext.prebid.is_rewarded_inventory\n+     */\n+    @JsonProperty(\"is_rewarded_inventory\")", "originalCommit": "1c3124271c0827dfad46c297ccf778ff607e2868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjU4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368346584", "bodyText": "Please add a //given inline commentary for a block of test where you declare variables or set up stubs.\nCheck other missing cases. Thanks!", "author": "RossGoncharuk", "createdAt": "2020-01-20T02:08:05Z", "path": "src/test/java/org/prebid/server/bidder/rubicon/RubiconBidderTest.java", "diffHunk": "@@ -332,9 +334,86 @@ public void makeHttpRequestsShouldFillVideoExt() {\n                 .extracting(Imp::getVideo).doesNotContainNull()\n                 .extracting(Video::getExt).doesNotContainNull()\n                 .extracting(ext -> mapper.treeToValue(ext, RubiconVideoExt.class))\n-                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14)));\n+                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14), null));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldFillVideoExtAndAddVideoType() {\n+", "originalCommit": "1c3124271c0827dfad46c297ccf778ff607e2868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "url": "https://github.com/prebid/prebid-server-java/commit/35f7e4e0a4080456b4f16dba2a8db0ab39207897", "message": "Fixed minor code style issues", "committedDate": "2020-01-20T07:26:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3MzU0MA==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368573540", "bodyText": "Please, inline this variable since it is needed only for video impression.", "author": "rpanchyk", "createdAt": "2020-01-20T14:24:54Z", "path": "src/main/java/org/prebid/server/bidder/rubicon/RubiconBidder.java", "diffHunk": "@@ -289,15 +297,18 @@ private static String tkXintValue(BidRequest bidRequest) {\n         }\n     }\n \n-    private Imp makeImp(Imp imp, ExtImpRubicon rubiconImpExt, Site site, App app, boolean useFirstPartyData) {\n+    private Imp makeImp(Imp imp, ExtPrebid<ExtImpPrebid, ExtImpRubicon> ext,\n+                        Site site, App app, boolean useFirstPartyData) {\n+        final ExtImpRubicon rubiconImpExt = ext.getBidder();\n+        final ExtImpPrebid prebidImpExt = ext.getPrebid();", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4OTEwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368589104", "bodyText": "The rubiconVideoParams should not impact on result Video.\nPls notice this:\nfinal VideoType videoType = prebidImpExt != null\n        && BooleanUtils.isTrue(prebidImpExt.getIsRewardedInventory()) ? VideoType.REWARDED : null;\n\nif (rubiconVideoParams == null && videoType == null) {\n    return video;\n}\n\nfinal Integer skip = rubiconVideoParams != null ? rubiconVideoParams.getSkip() : null;\nfinal Integer skipDelay = rubiconVideoParams != null ? rubiconVideoParams.getSkipdelay() : null;\nfinal Integer sizeId = rubiconVideoParams != null ? rubiconVideoParams.getSizeId() : null;\nreturn video.toBuilder()\n        .ext(Json.mapper.valueToTree(\n                RubiconVideoExt.of(skip, skipDelay, RubiconVideoExtRp.of(sizeId), videoType)))\n        .build();\n\nAlso:\n\nAdd unit-test for case when no rubiconVideoParams\nAdd rewarded video flag to\norg.prebid.server.it.ApplicationTest#openrtb2AuctionShouldRespondWithBidsFromRubiconAndAppnexus integration test to be sure in whole functional flow.", "author": "rpanchyk", "createdAt": "2020-01-20T14:55:32Z", "path": "src/main/java/org/prebid/server/bidder/rubicon/RubiconBidder.java", "diffHunk": "@@ -440,11 +451,17 @@ private static boolean isFullyPopulatedVideo(Video video) {\n                 && video.getLinearity() != null && video.getApi() != null;\n     }\n \n-    private static Video makeVideo(Video video, RubiconVideoParams rubiconVideoParams) {\n+    private static Video makeVideo(Video video, RubiconVideoParams rubiconVideoParams, ExtImpPrebid prebidImpExt) {\n+        boolean isRewardedInventory = false;\n+        if (prebidImpExt != null) {\n+            isRewardedInventory = prebidImpExt.getIsRewardedInventory() != null\n+                    ? prebidImpExt.getIsRewardedInventory() : false;\n+        }\n         return rubiconVideoParams == null ? video : video.toBuilder()", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NDkzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368594932", "bodyText": "This seems like a hack. What if you'll need to add another field?\nPlease, use @Builder instead of @AllArgsConstructor.\nPS. Usually, we use builder for models having more then 3 fields.", "author": "rpanchyk", "createdAt": "2020-01-20T15:07:21Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtImpPrebid.java", "diffHunk": "@@ -29,4 +29,15 @@\n      */\n     @JsonProperty(\"storedbidresponse\")\n     List<ExtStoredBidResponse> storedBidResponse;\n+\n+    /**\n+     * Defines the contract for bidrequest.imp[i].ext.prebid.is_rewarded_inventory\n+     */\n+    Boolean isRewardedInventory;\n+\n+    public static ExtImpPrebid of(ExtStoredRequest storedrequest,", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NTY2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368595664", "bodyText": "No need for separate enum since we have only one value so far.\nPlease, use plaing rewarded string where needed.", "author": "rpanchyk", "createdAt": "2020-01-20T15:08:57Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/rubicon/VideoType.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.prebid.server.proto.openrtb.ext.request.rubicon;\n+\n+public enum VideoType {", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NjcwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368596708", "bodyText": "Pls, make it final to be in one-style.", "author": "rpanchyk", "createdAt": "2020-01-20T15:11:13Z", "path": "src/test/java/org/prebid/server/bidder/rubicon/RubiconBidderTest.java", "diffHunk": "@@ -332,9 +334,86 @@ public void makeHttpRequestsShouldFillVideoExt() {\n                 .extracting(Imp::getVideo).doesNotContainNull()\n                 .extracting(Video::getExt).doesNotContainNull()\n                 .extracting(ext -> mapper.treeToValue(ext, RubiconVideoExt.class))\n-                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14)));\n+                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14), null));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldFillVideoExtAndAddVideoType() {\n+        // given\n+        final ExtImpPrebid prebid = ExtImpPrebid.of(null, null, null, true);\n+        final ExtImpRubicon rubicon = ExtImpRubicon.builder().video(RubiconVideoParams.builder().skip(5).skipdelay(10).sizeId(14).build()).build();\n+\n+        ExtPrebid<ExtImpPrebid, ExtImpRubicon> ext = ExtPrebid.of(prebid, rubicon);", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NzU3Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368597576", "bodyText": "The line is too long, pls use formatting in your IDE.", "author": "rpanchyk", "createdAt": "2020-01-20T15:13:00Z", "path": "src/test/java/org/prebid/server/bidder/rubicon/RubiconBidderTest.java", "diffHunk": "@@ -332,9 +334,86 @@ public void makeHttpRequestsShouldFillVideoExt() {\n                 .extracting(Imp::getVideo).doesNotContainNull()\n                 .extracting(Video::getExt).doesNotContainNull()\n                 .extracting(ext -> mapper.treeToValue(ext, RubiconVideoExt.class))\n-                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14)));\n+                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14), null));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldFillVideoExtAndAddVideoType() {\n+        // given\n+        final ExtImpPrebid prebid = ExtImpPrebid.of(null, null, null, true);\n+        final ExtImpRubicon rubicon = ExtImpRubicon.builder().video(RubiconVideoParams.builder().skip(5).skipdelay(10).sizeId(14).build()).build();", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5ODg1Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368598856", "bodyText": "Redundant empty line.", "author": "rpanchyk", "createdAt": "2020-01-20T15:15:27Z", "path": "src/test/java/org/prebid/server/bidder/rubicon/RubiconBidderTest.java", "diffHunk": "@@ -332,9 +334,86 @@ public void makeHttpRequestsShouldFillVideoExt() {\n                 .extracting(Imp::getVideo).doesNotContainNull()\n                 .extracting(Video::getExt).doesNotContainNull()\n                 .extracting(ext -> mapper.treeToValue(ext, RubiconVideoExt.class))\n-                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14)));\n+                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14), null));\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldFillVideoExtAndAddVideoType() {\n+        // given\n+        final ExtImpPrebid prebid = ExtImpPrebid.of(null, null, null, true);\n+        final ExtImpRubicon rubicon = ExtImpRubicon.builder().video(RubiconVideoParams.builder().skip(5).skipdelay(10).sizeId(14).build()).build();\n+\n+        ExtPrebid<ExtImpPrebid, ExtImpRubicon> ext = ExtPrebid.of(prebid, rubicon);\n+\n+        final BidRequest bidRequest = givenBidRequest(impBuilder -> impBuilder.video(Video.builder().build())\n+                .ext(mapper.valueToTree(ext)));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = rubiconBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1).doesNotContainNull()\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp).doesNotContainNull()\n+                .extracting(Imp::getVideo).doesNotContainNull()\n+                .extracting(Video::getExt).doesNotContainNull()\n+                .extracting(ex -> mapper.treeToValue(ex, RubiconVideoExt.class))\n+                .containsOnly(RubiconVideoExt.of(5, 10, RubiconVideoExtRp.of(14), VideoType.REWARDED));\n+    }\n+", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwMjAwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368602004", "bodyText": "Minor. For better readability maybe it make sense to split ExtPrebid ext into 2 separate arguments: ExtImpPrebid extImpPrebid and ExtImpRubicon extImpRubicon.\nWhat do you think?", "author": "rpanchyk", "createdAt": "2020-01-20T15:21:38Z", "path": "src/main/java/org/prebid/server/bidder/rubicon/RubiconBidder.java", "diffHunk": "@@ -244,18 +251,19 @@ private static String firstImpExtLanguage(Collection<ExtImpRubicon> rubiconImpEx\n                 .orElse(null);\n     }\n \n-    private BidRequest createSingleRequest(Imp imp, ExtImpRubicon rubiconImpExt, BidRequest bidRequest,\n-                                           String impLanguage, boolean useFirstPartyData) {\n+    private BidRequest createSingleRequest(Imp imp, ExtPrebid<ExtImpPrebid, ExtImpRubicon> ext,", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwMzY0MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/585#discussion_r368603641", "bodyText": "Minor. Redundant carriage return. Just to be in one style with other code.", "author": "rpanchyk", "createdAt": "2020-01-20T15:24:43Z", "path": "src/main/java/org/prebid/server/bidder/rubicon/RubiconBidder.java", "diffHunk": "@@ -213,29 +216,33 @@ private static boolean useFirstPartyData(BidRequest bidRequest) {\n         return CollectionUtils.isNotEmpty(bidders); // this contains only current bidder\n     }\n \n-    private static Map<Imp, ExtImpRubicon> parseRubiconImpExts(List<Imp> imps, List<BidderError> errors) {\n-        final Map<Imp, ExtImpRubicon> impToRubiconExt = new HashMap<>();\n+    private static Map<Imp, ExtPrebid<ExtImpPrebid, ExtImpRubicon>> parseRubiconImpExts(\n+            List<Imp> imps, List<BidderError> errors\n+    ) {", "originalCommit": "35f7e4e0a4080456b4f16dba2a8db0ab39207897", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d0346ed1cdfbc58ddc179db997fc070ee57443a", "url": "https://github.com/prebid/prebid-server-java/commit/5d0346ed1cdfbc58ddc179db997fc070ee57443a", "message": "Rewarded Video minor bugs fixed, tests added", "committedDate": "2020-01-20T20:14:34Z", "type": "commit"}, {"oid": "462ee915d73f83cd268804f2383bf953a0d4f9ae", "url": "https://github.com/prebid/prebid-server-java/commit/462ee915d73f83cd268804f2383bf953a0d4f9ae", "message": "Rewarded Video minor bugs fixed, tests added", "committedDate": "2020-01-20T20:27:40Z", "type": "commit"}, {"oid": "d13cd9417e0f8a252f0946c0284bcf15f2b3ed66", "url": "https://github.com/prebid/prebid-server-java/commit/d13cd9417e0f8a252f0946c0284bcf15f2b3ed66", "message": "Rewarded Video minor bugs fixed, tests added", "committedDate": "2020-01-20T20:37:10Z", "type": "commit"}, {"oid": "557385ef9c88bbd74d78aed43df8f287525ad234", "url": "https://github.com/prebid/prebid-server-java/commit/557385ef9c88bbd74d78aed43df8f287525ad234", "message": "Rewarded Video minor bugs fixed, tests added", "committedDate": "2020-01-20T20:42:59Z", "type": "commit"}, {"oid": "46d8f3fd4bdc393641dcbf04aacc2d5c25de8996", "url": "https://github.com/prebid/prebid-server-java/commit/46d8f3fd4bdc393641dcbf04aacc2d5c25de8996", "message": "Rewarded Video minor bugs fixed, tests added", "committedDate": "2020-01-21T15:02:45Z", "type": "commit"}, {"oid": "72c891ea6650e0144d337e5805a8643139bbbebb", "url": "https://github.com/prebid/prebid-server-java/commit/72c891ea6650e0144d337e5805a8643139bbbebb", "message": "Rewarded Video code cleanup, test fix", "committedDate": "2020-01-21T16:25:03Z", "type": "commit"}, {"oid": "a34026bcd9fb46109fceec8b0c2b33a5153a6057", "url": "https://github.com/prebid/prebid-server-java/commit/a34026bcd9fb46109fceec8b0c2b33a5153a6057", "message": "Remove Rewarded Video from Adapter", "committedDate": "2020-01-22T14:41:15Z", "type": "commit"}, {"oid": "22332fc982c55af491e665292e3a689a448594bd", "url": "https://github.com/prebid/prebid-server-java/commit/22332fc982c55af491e665292e3a689a448594bd", "message": "Merge branch 'master' into rubicon-rewarded-video", "committedDate": "2020-02-05T10:56:37Z", "type": "commit"}, {"oid": "00776abe4ac7e78cbdd1b092bccad6acefe21a05", "url": "https://github.com/prebid/prebid-server-java/commit/00776abe4ac7e78cbdd1b092bccad6acefe21a05", "message": "Conflict resolved", "committedDate": "2020-02-05T11:29:26Z", "type": "commit"}, {"oid": "dcb4498ba21b215629d6373df5a8f6a158fc9032", "url": "https://github.com/prebid/prebid-server-java/commit/dcb4498ba21b215629d6373df5a8f6a158fc9032", "message": "Merge branch 'master' into rubicon-rewarded-video", "committedDate": "2020-02-05T11:31:44Z", "type": "commit"}, {"oid": "d227bbbcf89fc83a40b97ef48335c15f6307f3c1", "url": "https://github.com/prebid/prebid-server-java/commit/d227bbbcf89fc83a40b97ef48335c15f6307f3c1", "message": "Conflict resolved", "committedDate": "2020-02-05T12:11:29Z", "type": "commit"}, {"oid": "71c2cfc596c384882080d246ed4f5002234dcfbf", "url": "https://github.com/prebid/prebid-server-java/commit/71c2cfc596c384882080d246ed4f5002234dcfbf", "message": "Merge branch 'master' into rubicon-rewarded-video", "committedDate": "2020-02-05T12:13:36Z", "type": "commit"}, {"oid": "c87c615a70afb52a0ec0f296e1664d634a93a6a0", "url": "https://github.com/prebid/prebid-server-java/commit/c87c615a70afb52a0ec0f296e1664d634a93a6a0", "message": "Conflict resolved", "committedDate": "2020-02-05T12:29:26Z", "type": "commit"}]}