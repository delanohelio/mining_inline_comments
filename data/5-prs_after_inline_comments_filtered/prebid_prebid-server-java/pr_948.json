{"pr_number": 948, "pr_title": "Add ConnectAd bidder and tests.", "pr_createdAt": "2020-10-08T13:41:14Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/948", "timeline": [{"oid": "3491c023a49921af8cf6c1d3440320410d30a41b", "url": "https://github.com/prebid/prebid-server-java/commit/3491c023a49921af8cf6c1d3440320410d30a41b", "message": "Add ConnectAd bidder and tests.", "committedDate": "2020-10-08T13:45:00Z", "type": "forcePushed"}, {"oid": "36c3f22a23ec28debe9e50164b734e00017d3272", "url": "https://github.com/prebid/prebid-server-java/commit/36c3f22a23ec28debe9e50164b734e00017d3272", "message": "Add ConnectAd bidder and tests.", "committedDate": "2020-10-08T13:50:09Z", "type": "forcePushed"}, {"oid": "a4e84ccd9e698cb7ed9929fd26fb777c04d80ff1", "url": "https://github.com/prebid/prebid-server-java/commit/a4e84ccd9e698cb7ed9929fd26fb777c04d80ff1", "message": "Add ConnectAd bidder and tests.", "committedDate": "2020-10-08T13:51:13Z", "type": "forcePushed"}, {"oid": "691ed7b9b24a8d7f0f60c361cd6ba790d692f49f", "url": "https://github.com/prebid/prebid-server-java/commit/691ed7b9b24a8d7f0f60c361cd6ba790d692f49f", "message": "Add ConnectAd bidder and tests.", "committedDate": "2020-10-20T23:21:26Z", "type": "commit"}, {"oid": "16f9e31f022c670bff58c8544cdd427595030bd7", "url": "https://github.com/prebid/prebid-server-java/commit/16f9e31f022c670bff58c8544cdd427595030bd7", "message": "Merge branch 'master' into connectAd_bidder/development", "committedDate": "2020-10-20T23:43:19Z", "type": "commit"}, {"oid": "16f9e31f022c670bff58c8544cdd427595030bd7", "url": "https://github.com/prebid/prebid-server-java/commit/16f9e31f022c670bff58c8544cdd427595030bd7", "message": "Merge branch 'master' into connectAd_bidder/development", "committedDate": "2020-10-20T23:43:19Z", "type": "forcePushed"}, {"oid": "c8998f2b7f30989b6541c561371844469f8df504", "url": "https://github.com/prebid/prebid-server-java/commit/c8998f2b7f30989b6541c561371844469f8df504", "message": "Merge branch 'master' into connectAd_bidder/development", "committedDate": "2020-10-23T13:22:38Z", "type": "commit"}, {"oid": "2d9af1c68d8d919290dcc002b0392b8e057fb1eb", "url": "https://github.com/prebid/prebid-server-java/commit/2d9af1c68d8d919290dcc002b0392b8e057fb1eb", "message": "Code fixes", "committedDate": "2020-10-23T13:47:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4MTI2Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510881262", "bodyText": "Pls rename to ConnectadBidder according to our naming policy for bidders.\nAlso, pls rename package to org.prebid.server.bidder.connectad.", "author": "rpanchyk", "createdAt": "2020-10-23T13:24:58Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ConnectAdBidder implements Bidder<BidRequest> {", "originalCommit": "16f9e31f022c670bff58c8544cdd427595030bd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NTE1Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510885157", "bodyText": "Go code allows to write check conditions like Ext.SiteID == 0 but in Java we need to make sure extImpConnectAd.getSiteId() is not NULL first.\nNote: The code might be less cryptic if use Objects.equals(extImpConnectAd.getSiteId(), 0).", "author": "rpanchyk", "createdAt": "2020-10-23T13:31:12Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ConnectAdBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectAdBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final String page = request.getSite() != null ? request.getSite().getPage() : null;\n+        final int secure = StringUtils.isNotBlank(page) && page.contains(\"https\") ? 1 : 0;\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt);\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        updateHeadersDueToRequest(headers, request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (extImpConnectAd.getSiteId().equals(NumberUtils.INTEGER_ZERO)) {", "originalCommit": "c8998f2b7f30989b6541c561371844469f8df504", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5MzQ0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510893443", "bodyText": "BidFloor field can be NULL.\nAlso, pls extract field value to separate variable if use more then once.", "author": "rpanchyk", "createdAt": "2020-10-23T13:44:05Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ConnectAdBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectAdBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final String page = request.getSite() != null ? request.getSite().getPage() : null;\n+        final int secure = StringUtils.isNotBlank(page) && page.contains(\"https\") ? 1 : 0;\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt);\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        updateHeadersDueToRequest(headers, request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (extImpConnectAd.getSiteId().equals(NumberUtils.INTEGER_ZERO)) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has no siteId present\", imp.getId()));\n+        }\n+        return extImpConnectAd;\n+    }\n+\n+    private Imp updateImp(Imp imp, Integer secure, ExtImpConnectAd extImp) {\n+\n+        final Imp.ImpBuilder updatedImp = imp.toBuilder().tagid(extImp.getSiteId().toString()).secure(secure);\n+        if (extImp.getBidfloor().compareTo(BigDecimal.ZERO) != NumberUtils.INTEGER_ZERO) {", "originalCommit": "c8998f2b7f30989b6541c561371844469f8df504", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMzI5OA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510903298", "bodyText": "This will remove first format for all bidders. Pls make a new list.", "author": "rpanchyk", "createdAt": "2020-10-23T13:58:29Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ConnectAdBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectAdBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final String page = request.getSite() != null ? request.getSite().getPage() : null;\n+        final int secure = StringUtils.isNotBlank(page) && page.contains(\"https\") ? 1 : 0;\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt);\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        updateHeadersDueToRequest(headers, request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (extImpConnectAd.getSiteId().equals(NumberUtils.INTEGER_ZERO)) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has no siteId present\", imp.getId()));\n+        }\n+        return extImpConnectAd;\n+    }\n+\n+    private Imp updateImp(Imp imp, Integer secure, ExtImpConnectAd extImp) {\n+\n+        final Imp.ImpBuilder updatedImp = imp.toBuilder().tagid(extImp.getSiteId().toString()).secure(secure);\n+        if (extImp.getBidfloor().compareTo(BigDecimal.ZERO) != NumberUtils.INTEGER_ZERO) {\n+            updatedImp.bidfloor(extImp.getBidfloor()).bidfloorcur(\"USD\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner == null) {\n+            throw new PreBidException(\"We need a Banner Object in the request\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                throw new PreBidException(\"At least one size is required\");\n+            }\n+            final Format format = banner.getFormat().get(0);\n+            final List<Format> slicedFormatList = banner.getFormat();\n+\n+            slicedFormatList.remove(0);", "originalCommit": "c8998f2b7f30989b6541c561371844469f8df504", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwNDc2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510904764", "bodyText": "It may be better to create a new method for adding headers here which will check values for null/empty.", "author": "rpanchyk", "createdAt": "2020-10-23T14:00:35Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ConnectAdBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectAdBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final String page = request.getSite() != null ? request.getSite().getPage() : null;\n+        final int secure = StringUtils.isNotBlank(page) && page.contains(\"https\") ? 1 : 0;\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt);\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        updateHeadersDueToRequest(headers, request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (extImpConnectAd.getSiteId().equals(NumberUtils.INTEGER_ZERO)) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has no siteId present\", imp.getId()));\n+        }\n+        return extImpConnectAd;\n+    }\n+\n+    private Imp updateImp(Imp imp, Integer secure, ExtImpConnectAd extImp) {\n+\n+        final Imp.ImpBuilder updatedImp = imp.toBuilder().tagid(extImp.getSiteId().toString()).secure(secure);\n+        if (extImp.getBidfloor().compareTo(BigDecimal.ZERO) != NumberUtils.INTEGER_ZERO) {\n+            updatedImp.bidfloor(extImp.getBidfloor()).bidfloorcur(\"USD\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner == null) {\n+            throw new PreBidException(\"We need a Banner Object in the request\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                throw new PreBidException(\"At least one size is required\");\n+            }\n+            final Format format = banner.getFormat().get(0);\n+            final List<Format> slicedFormatList = banner.getFormat();\n+\n+            slicedFormatList.remove(0);\n+            updatedImp.banner(banner.toBuilder().format(slicedFormatList).w(format.getW()).h(format.getH()).build());\n+        }\n+\n+        return updatedImp.build();\n+    }\n+\n+    private void updateHeadersDueToRequest(MultiMap headers, BidRequest request) {\n+        final Device device = request.getDevice();\n+\n+        if (device != null) {\n+            headers.add(\"User-Agent\", device.getUa());", "originalCommit": "c8998f2b7f30989b6541c561371844469f8df504", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMDEwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510910104", "bodyText": "May be it make sense to pass here only needed parameters instead of whole ExtImpConnectAd.", "author": "rpanchyk", "createdAt": "2020-10-23T14:08:45Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class ConnectAdBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectAdBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final String page = request.getSite() != null ? request.getSite().getPage() : null;\n+        final int secure = StringUtils.isNotBlank(page) && page.contains(\"https\") ? 1 : 0;\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt);\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        updateHeadersDueToRequest(headers, request);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (extImpConnectAd.getSiteId().equals(NumberUtils.INTEGER_ZERO)) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has no siteId present\", imp.getId()));\n+        }\n+        return extImpConnectAd;\n+    }\n+\n+    private Imp updateImp(Imp imp, Integer secure, ExtImpConnectAd extImp) {", "originalCommit": "c8998f2b7f30989b6541c561371844469f8df504", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMDk4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510910984", "bodyText": "Rename according to new bidder name.", "author": "rpanchyk", "createdAt": "2020-10-23T14:10:06Z", "path": "src/test/java/org/prebid/server/bidder/connectad/ConnectAdBidderTest.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package org.prebid.server.bidder.connectad;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.assertj.core.api.Assertions;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.connectAd.ConnectAdBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class ConnectAdBidderTest extends VertxTest {", "originalCommit": "c8998f2b7f30989b6541c561371844469f8df504", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMjU3OA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r510912578", "bodyText": "Probably would be better to extract this logic to separate method like secureFrom(request.getSite()).\nAlso, it might be more strict if we'll check startsWith(..) instead of contains(..)", "author": "rpanchyk", "createdAt": "2020-10-23T14:12:31Z", "path": "src/main/java/org/prebid/server/bidder/connectAd/ConnectAdBidder.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.prebid.server.bidder.connectAd;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ConnectAd {@link Bidder} implementation.\n+ */\n+public class ConnectAdBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+    private static final String HTTPS_PREFIX = \"https\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectAdBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final String page = request.getSite() != null ? request.getSite().getPage() : null;", "originalCommit": "2d9af1c68d8d919290dcc002b0392b8e057fb1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "74282202cea180d2ee448d79d07fab1faf8b7dd4", "url": "https://github.com/prebid/prebid-server-java/commit/74282202cea180d2ee448d79d07fab1faf8b7dd4", "message": "Fixes after review", "committedDate": "2020-10-23T15:21:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMzE3NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r511913175", "bodyText": "i see the code is absolutely right but LGTM thinks different.\nMay you pls change StringUtils.isNotBlank(page) to plain page != null?", "author": "rpanchyk", "createdAt": "2020-10-26T12:11:26Z", "path": "src/main/java/org/prebid/server/bidder/connectad/ConnectadBidder.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.prebid.server.bidder.connectad;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ConnectAd {@link Bidder} implementation.\n+ */\n+public class ConnectadBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+    private static final String HTTPS_PREFIX = \"https\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectadBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final int secure = secureFrom(request.getSite());\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt.getSiteId(), impExt.getBidfloor());\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private int secureFrom(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) && page.startsWith(HTTPS_PREFIX) ? 1 : 0;", "originalCommit": "74282202cea180d2ee448d79d07fab1faf8b7dd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxNDEyNA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r511914124", "bodyText": "This method can be static.", "author": "rpanchyk", "createdAt": "2020-10-26T12:13:19Z", "path": "src/main/java/org/prebid/server/bidder/connectad/ConnectadBidder.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.prebid.server.bidder.connectad;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ConnectAd {@link Bidder} implementation.\n+ */\n+public class ConnectadBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+    private static final String HTTPS_PREFIX = \"https\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectadBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final int secure = secureFrom(request.getSite());\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt.getSiteId(), impExt.getBidfloor());\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private int secureFrom(Site site) {", "originalCommit": "74282202cea180d2ee448d79d07fab1faf8b7dd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxNDc1OA==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r511914758", "bodyText": "This method can be private static.", "author": "rpanchyk", "createdAt": "2020-10-26T12:14:30Z", "path": "src/main/java/org/prebid/server/bidder/connectad/ConnectadBidder.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.prebid.server.bidder.connectad;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ConnectAd {@link Bidder} implementation.\n+ */\n+public class ConnectadBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+    private static final String HTTPS_PREFIX = \"https\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectadBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final int secure = secureFrom(request.getSite());\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt.getSiteId(), impExt.getBidfloor());\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private int secureFrom(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) && page.startsWith(HTTPS_PREFIX) ? 1 : 0;\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (Objects.equals(extImpConnectAd.getSiteId(), NumberUtils.INTEGER_ZERO)) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has no siteId present\", imp.getId()));\n+        }\n+        return extImpConnectAd;\n+    }\n+\n+    private Imp updateImp(Imp imp, Integer secure, Integer siteId, BigDecimal bidFloor) {\n+        final Imp.ImpBuilder updatedImp = imp.toBuilder().tagid(siteId.toString()).secure(secure);\n+\n+        if (bidFloor != null && bidFloor.compareTo(BigDecimal.ZERO) != NumberUtils.INTEGER_ZERO) {\n+            updatedImp.bidfloor(bidFloor).bidfloorcur(\"USD\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner == null) {\n+            throw new PreBidException(\"We need a Banner Object in the request\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                throw new PreBidException(\"At least one size is required\");\n+            }\n+            final Format format = banner.getFormat().get(0);\n+            final List<Format> slicedFormatList = new ArrayList<>(banner.getFormat());\n+\n+            slicedFormatList.remove(0);\n+            updatedImp.banner(banner.toBuilder().format(slicedFormatList).w(format.getW()).h(format.getH()).build());\n+        }\n+\n+        return updatedImp.build();\n+    }\n+\n+    final MultiMap resolveHeaders(Device device) {", "originalCommit": "74282202cea180d2ee448d79d07fab1faf8b7dd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxNjU1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/948#discussion_r511916559", "bodyText": "Just an advance. Headers can be string type only, so no need to specify this in name.\nRather, we can name it as addHeaderIfValueIsNotBlank or just addHeader or similar.\nPS. make it static also.", "author": "rpanchyk", "createdAt": "2020-10-26T12:17:53Z", "path": "src/main/java/org/prebid/server/bidder/connectad/ConnectadBidder.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.prebid.server.bidder.connectad;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.connectad.ExtImpConnectAd;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ConnectAd {@link Bidder} implementation.\n+ */\n+public class ConnectadBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpConnectAd>> CONNECTAD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpConnectAd>>() {\n+            };\n+    private static final String HTTPS_PREFIX = \"https\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public ConnectadBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final int secure = secureFrom(request.getSite());\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> processedImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpConnectAd impExt = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, secure, impExt.getSiteId(), impExt.getBidfloor());\n+                processedImps.add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+        if (CollectionUtils.isNotEmpty(errors)) {\n+            errors.add(BidderError.badInput(\"Error in preprocess of Imp\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+        final BidRequest outgoingRequest = request.toBuilder().imp(processedImps).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private int secureFrom(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) && page.startsWith(HTTPS_PREFIX) ? 1 : 0;\n+    }\n+\n+    private ExtImpConnectAd parseImpExt(Imp imp) {\n+        final ExtImpConnectAd extImpConnectAd;\n+        try {\n+            extImpConnectAd = mapper.mapper().convertValue(imp.getExt(), CONNECTAD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has invalid Ext\", imp.getId()));\n+        }\n+\n+        if (Objects.equals(extImpConnectAd.getSiteId(), NumberUtils.INTEGER_ZERO)) {\n+            throw new PreBidException(String.format(\"Impression id=%s, has no siteId present\", imp.getId()));\n+        }\n+        return extImpConnectAd;\n+    }\n+\n+    private Imp updateImp(Imp imp, Integer secure, Integer siteId, BigDecimal bidFloor) {\n+        final Imp.ImpBuilder updatedImp = imp.toBuilder().tagid(siteId.toString()).secure(secure);\n+\n+        if (bidFloor != null && bidFloor.compareTo(BigDecimal.ZERO) != NumberUtils.INTEGER_ZERO) {\n+            updatedImp.bidfloor(bidFloor).bidfloorcur(\"USD\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner == null) {\n+            throw new PreBidException(\"We need a Banner Object in the request\");\n+        }\n+\n+        if (banner.getW() == null && banner.getH() == null) {\n+            if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                throw new PreBidException(\"At least one size is required\");\n+            }\n+            final Format format = banner.getFormat().get(0);\n+            final List<Format> slicedFormatList = new ArrayList<>(banner.getFormat());\n+\n+            slicedFormatList.remove(0);\n+            updatedImp.banner(banner.toBuilder().format(slicedFormatList).w(format.getW()).h(format.getH()).build());\n+        }\n+\n+        return updatedImp.build();\n+    }\n+\n+    final MultiMap resolveHeaders(Device device) {\n+        final MultiMap headers = HttpUtil.headers();\n+\n+        if (device != null) {\n+            updateHeadersWithStringValue(headers, \"User-Agent\", device.getUa());\n+            updateHeadersWithStringValue(headers, \"Accept-Language\", device.getLanguage());\n+            updateHeadersWithStringValue(headers, \"X-Forwarded-For\", device.getIp());\n+            updateHeadersWithStringValue(headers, \"X-Forwarded-For\", device.getIpv6());\n+            if (device.getDnt() != null) {\n+                headers.add(\"DNT\", device.getDnt().toString());\n+            } else {\n+                headers.add(\"DNT\", \"0\");\n+            }\n+        }\n+        return headers;\n+    }\n+\n+    private void updateHeadersWithStringValue(MultiMap headers, String header, String value) {", "originalCommit": "74282202cea180d2ee448d79d07fab1faf8b7dd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "783f7ea2513e7702e6ca92b9ed8acb08e6b5a028", "url": "https://github.com/prebid/prebid-server-java/commit/783f7ea2513e7702e6ca92b9ed8acb08e6b5a028", "message": "Additional fixes", "committedDate": "2020-10-27T07:40:43Z", "type": "forcePushed"}, {"oid": "64fe3e2dccd25b114962f66be563fc92285f38a7", "url": "https://github.com/prebid/prebid-server-java/commit/64fe3e2dccd25b114962f66be563fc92285f38a7", "message": "Additional fixes", "committedDate": "2020-10-27T07:42:42Z", "type": "commit"}, {"oid": "64fe3e2dccd25b114962f66be563fc92285f38a7", "url": "https://github.com/prebid/prebid-server-java/commit/64fe3e2dccd25b114962f66be563fc92285f38a7", "message": "Additional fixes", "committedDate": "2020-10-27T07:42:42Z", "type": "forcePushed"}]}