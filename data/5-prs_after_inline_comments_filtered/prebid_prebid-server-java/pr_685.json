{"pr_number": 685, "pr_title": "Add implementation of ZeroclickfraudBidder and tests", "pr_createdAt": "2020-04-22T17:06:41Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/685", "timeline": [{"oid": "966bfd936172c19c841c28d086132a104eda392c", "url": "https://github.com/prebid/prebid-server-java/commit/966bfd936172c19c841c28d086132a104eda392c", "message": "Add implementation of ZeroclickfraudBidder and tests", "committedDate": "2020-04-22T17:05:13Z", "type": "commit"}, {"oid": "f6c36e1a4cc5e9f2e3c54e3ee1b7121b30478b10", "url": "https://github.com/prebid/prebid-server-java/commit/f6c36e1a4cc5e9f2e3c54e3ee1b7121b30478b10", "message": "Merge branch 'master' into add-zeroclickfraud-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties", "committedDate": "2020-04-22T17:09:34Z", "type": "commit"}, {"oid": "38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "url": "https://github.com/prebid/prebid-server-java/commit/38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "message": "Resolving conflicts", "committedDate": "2020-04-22T17:45:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NDUyMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/685#discussion_r414474521", "bodyText": "make {{Host}} and {{SourceId}} constants in the class", "author": "DGarbar", "createdAt": "2020-04-24T10:37:12Z", "path": "src/main/java/org/prebid/server/bidder/zeroclickfraud/ZeroclickfraudBidder.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.prebid.server.bidder.zeroclickfraud;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.zeroclickfraud.ExtImpZeroclickfraud;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ZeroclickfraudBidder {@link Bidder} implementation.\n+ */\n+public class ZeroclickfraudBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>> ZEROCLICKFRAUD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>>() {\n+            };\n+\n+    private final String endpointTemplate;\n+    private final JacksonMapper mapper;\n+\n+    public ZeroclickfraudBidder(String endpointTemplate, JacksonMapper mapper) {\n+        this.endpointTemplate = HttpUtil.validateUrl(Objects.requireNonNull(endpointTemplate));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final Map<ExtImpZeroclickfraud, List<Imp>> extToImps = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpZeroclickfraud extImpZeroclickfraud = parseAndValidateImpExt(imp.getExt());\n+                extToImps.computeIfAbsent(extImpZeroclickfraud, ext -> new ArrayList<>()).add(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<HttpRequest<BidRequest>> httpRequests = extToImps.entrySet().stream()\n+                .map(entry -> makeHttpRequest(entry, bidRequest))\n+                .collect(Collectors.toList());\n+\n+        return Result.of(httpRequests, Collections.emptyList());\n+    }\n+\n+    private ExtImpZeroclickfraud parseAndValidateImpExt(ObjectNode extNode) {\n+        final ExtImpZeroclickfraud extImpZeroclickfraud;\n+        try {\n+            extImpZeroclickfraud = mapper.mapper().convertValue(extNode, ZEROCLICKFRAUD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        final Integer sourceId = extImpZeroclickfraud.getSourceId();\n+        if (sourceId == null || sourceId < 1) {\n+            throw new PreBidException(\"Invalid/Missing SourceId\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpZeroclickfraud.getHost())) {\n+            throw new PreBidException(\"Invalid/Missing Host\");\n+        }\n+\n+        return extImpZeroclickfraud;\n+    }\n+\n+    private HttpRequest<BidRequest> makeHttpRequest(Map.Entry<ExtImpZeroclickfraud, List<Imp>> extToImps,\n+                                                    BidRequest bidRequest) {\n+        final ExtImpZeroclickfraud extImpZeroclickfraud = extToImps.getKey();\n+        final String uri = endpointTemplate\n+                .replace(\"{{Host}}\", extImpZeroclickfraud.getHost())\n+                .replace(\"{{SourceId}}\", extImpZeroclickfraud.getSourceId().toString());", "originalCommit": "38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NTYyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/685#discussion_r414475626", "bodyText": "I'd prefer split entry into variables in the method signature", "author": "DGarbar", "createdAt": "2020-04-24T10:39:09Z", "path": "src/main/java/org/prebid/server/bidder/zeroclickfraud/ZeroclickfraudBidder.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.prebid.server.bidder.zeroclickfraud;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.zeroclickfraud.ExtImpZeroclickfraud;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ZeroclickfraudBidder {@link Bidder} implementation.\n+ */\n+public class ZeroclickfraudBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>> ZEROCLICKFRAUD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>>() {\n+            };\n+\n+    private final String endpointTemplate;\n+    private final JacksonMapper mapper;\n+\n+    public ZeroclickfraudBidder(String endpointTemplate, JacksonMapper mapper) {\n+        this.endpointTemplate = HttpUtil.validateUrl(Objects.requireNonNull(endpointTemplate));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final Map<ExtImpZeroclickfraud, List<Imp>> extToImps = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpZeroclickfraud extImpZeroclickfraud = parseAndValidateImpExt(imp.getExt());\n+                extToImps.computeIfAbsent(extImpZeroclickfraud, ext -> new ArrayList<>()).add(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<HttpRequest<BidRequest>> httpRequests = extToImps.entrySet().stream()\n+                .map(entry -> makeHttpRequest(entry, bidRequest))\n+                .collect(Collectors.toList());\n+\n+        return Result.of(httpRequests, Collections.emptyList());\n+    }\n+\n+    private ExtImpZeroclickfraud parseAndValidateImpExt(ObjectNode extNode) {\n+        final ExtImpZeroclickfraud extImpZeroclickfraud;\n+        try {\n+            extImpZeroclickfraud = mapper.mapper().convertValue(extNode, ZEROCLICKFRAUD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        final Integer sourceId = extImpZeroclickfraud.getSourceId();\n+        if (sourceId == null || sourceId < 1) {\n+            throw new PreBidException(\"Invalid/Missing SourceId\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpZeroclickfraud.getHost())) {\n+            throw new PreBidException(\"Invalid/Missing Host\");\n+        }\n+\n+        return extImpZeroclickfraud;\n+    }\n+\n+    private HttpRequest<BidRequest> makeHttpRequest(Map.Entry<ExtImpZeroclickfraud, List<Imp>> extToImps,", "originalCommit": "38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NjYyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/685#discussion_r414476626", "bodyText": "Where checks for  StatusBadReques and not Ok statuses", "author": "DGarbar", "createdAt": "2020-04-24T10:40:55Z", "path": "src/main/java/org/prebid/server/bidder/zeroclickfraud/ZeroclickfraudBidder.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.prebid.server.bidder.zeroclickfraud;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.zeroclickfraud.ExtImpZeroclickfraud;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ZeroclickfraudBidder {@link Bidder} implementation.\n+ */\n+public class ZeroclickfraudBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>> ZEROCLICKFRAUD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>>() {\n+            };\n+\n+    private final String endpointTemplate;\n+    private final JacksonMapper mapper;\n+\n+    public ZeroclickfraudBidder(String endpointTemplate, JacksonMapper mapper) {\n+        this.endpointTemplate = HttpUtil.validateUrl(Objects.requireNonNull(endpointTemplate));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n+        final Map<ExtImpZeroclickfraud, List<Imp>> extToImps = new HashMap<>();\n+        for (Imp imp : bidRequest.getImp()) {\n+            try {\n+                final ExtImpZeroclickfraud extImpZeroclickfraud = parseAndValidateImpExt(imp.getExt());\n+                extToImps.computeIfAbsent(extImpZeroclickfraud, ext -> new ArrayList<>()).add(imp);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final List<HttpRequest<BidRequest>> httpRequests = extToImps.entrySet().stream()\n+                .map(entry -> makeHttpRequest(entry, bidRequest))\n+                .collect(Collectors.toList());\n+\n+        return Result.of(httpRequests, Collections.emptyList());\n+    }\n+\n+    private ExtImpZeroclickfraud parseAndValidateImpExt(ObjectNode extNode) {\n+        final ExtImpZeroclickfraud extImpZeroclickfraud;\n+        try {\n+            extImpZeroclickfraud = mapper.mapper().convertValue(extNode, ZEROCLICKFRAUD_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+\n+        final Integer sourceId = extImpZeroclickfraud.getSourceId();\n+        if (sourceId == null || sourceId < 1) {\n+            throw new PreBidException(\"Invalid/Missing SourceId\");\n+        }\n+\n+        if (StringUtils.isBlank(extImpZeroclickfraud.getHost())) {\n+            throw new PreBidException(\"Invalid/Missing Host\");\n+        }\n+\n+        return extImpZeroclickfraud;\n+    }\n+\n+    private HttpRequest<BidRequest> makeHttpRequest(Map.Entry<ExtImpZeroclickfraud, List<Imp>> extToImps,\n+                                                    BidRequest bidRequest) {\n+        final ExtImpZeroclickfraud extImpZeroclickfraud = extToImps.getKey();\n+        final String uri = endpointTemplate\n+                .replace(\"{{Host}}\", extImpZeroclickfraud.getHost())\n+                .replace(\"{{SourceId}}\", extImpZeroclickfraud.getSourceId().toString());\n+\n+        final BidRequest outgoingRequest = bidRequest.toBuilder().imp(extToImps.getValue()).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .headers(HttpUtil.headers())\n+                .uri(uri)\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {", "originalCommit": "38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NTY0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/685#discussion_r414485642", "bodyText": "not relevant.", "author": "DGarbar", "createdAt": "2020-04-24T10:57:09Z", "path": "src/test/java/org/prebid/server/bidder/zeroclickfraud/ZeroclickfraudBidderTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.prebid.server.bidder.zeroclickfraud;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.datablocks.DatablocksBidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.datablocks.ExtImpDatablocks;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class ZeroclickfraudBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_TEMPLATE = \"https://{{Host}}/{{SourceId}}\";\n+\n+    private ZeroclickfraudBidder zeroclickfraudBidder;\n+\n+    @Before\n+    public void setUp() {\n+        zeroclickfraudBidder = new ZeroclickfraudBidder(ENDPOINT_TEMPLATE, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new DatablocksBidder(\"invalid_url\", jacksonMapper));\n+    }", "originalCommit": "38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NjAzMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/685#discussion_r414486031", "bodyText": "validate url will fail on the real endpoint (\"http://{{Host}}/openrtb2?sid={{SourceId}}\")", "author": "DGarbar", "createdAt": "2020-04-24T10:57:56Z", "path": "src/main/java/org/prebid/server/bidder/zeroclickfraud/ZeroclickfraudBidder.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.prebid.server.bidder.zeroclickfraud;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.zeroclickfraud.ExtImpZeroclickfraud;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * ZeroclickfraudBidder {@link Bidder} implementation.\n+ */\n+public class ZeroclickfraudBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>> ZEROCLICKFRAUD_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpZeroclickfraud>>() {\n+            };\n+\n+    private final String endpointTemplate;\n+    private final JacksonMapper mapper;\n+\n+    public ZeroclickfraudBidder(String endpointTemplate, JacksonMapper mapper) {\n+        this.endpointTemplate = HttpUtil.validateUrl(Objects.requireNonNull(endpointTemplate));", "originalCommit": "38e6caf589a1b96ebde6a478f0c5ea03f6bd507e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa7977edd265c5d5d4661abe53beb67f92449e11", "url": "https://github.com/prebid/prebid-server-java/commit/fa7977edd265c5d5d4661abe53beb67f92449e11", "message": "Refactoring bidder and tests", "committedDate": "2020-04-27T12:14:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1ODU1MA==", "url": "https://github.com/prebid/prebid-server-java/pull/685#discussion_r420058550", "bodyText": "I meant that this test is happy path.\nAdd test which will show the real endpoint. (use ENDPOINT_TEMPLATE)", "author": "DGarbar", "createdAt": "2020-05-05T12:07:36Z", "path": "src/test/java/org/prebid/server/bidder/zeroclickfraud/ZeroclickfraudBidderTest.java", "diffHunk": "@@ -44,11 +42,6 @@ public void setUp() {\n         zeroclickfraudBidder = new ZeroclickfraudBidder(ENDPOINT_TEMPLATE, jacksonMapper);\n     }\n \n-    @Test\n-    public void creationShouldFailOnInvalidEndpointUrl() {\n-        assertThatIllegalArgumentException().isThrownBy(() -> new DatablocksBidder(\"invalid_url\", jacksonMapper));", "originalCommit": "fa7977edd265c5d5d4661abe53beb67f92449e11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17444fc5feb531a96003a50e84cc2edc4d07fa20", "url": "https://github.com/prebid/prebid-server-java/commit/17444fc5feb531a96003a50e84cc2edc4d07fa20", "message": "Add test for url", "committedDate": "2020-05-05T19:48:25Z", "type": "commit"}, {"oid": "3411a1a237041fd1c7a64d58bfa9020272945b5e", "url": "https://github.com/prebid/prebid-server-java/commit/3411a1a237041fd1c7a64d58bfa9020272945b5e", "message": "Merge branch 'master' into add-zeroclickfraud-bidder", "committedDate": "2020-06-24T15:28:51Z", "type": "commit"}, {"oid": "07af4160d12ec1148f7859d1d6e15986d512a0a4", "url": "https://github.com/prebid/prebid-server-java/commit/07af4160d12ec1148f7859d1d6e15986d512a0a4", "message": "Add pbs-enforces-ccpa property to zeroclickfraud.yaml file", "committedDate": "2020-06-24T15:31:08Z", "type": "commit"}]}