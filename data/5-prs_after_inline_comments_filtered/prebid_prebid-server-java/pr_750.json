{"pr_number": 750, "pr_title": "Add Ninthdecimal bidder", "pr_createdAt": "2020-06-05T20:23:57Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/750", "timeline": [{"oid": "0b03f15d40e4ac8af8cb2ff2a575c44eb6c2d8d1", "url": "https://github.com/prebid/prebid-server-java/commit/0b03f15d40e4ac8af8cb2ff2a575c44eb6c2d8d1", "message": "Add NinthdecimalBidder and tests", "committedDate": "2020-06-05T20:21:40Z", "type": "commit"}, {"oid": "5b45368639a94be96ecd59fe78af414b6fc35149", "url": "https://github.com/prebid/prebid-server-java/commit/5b45368639a94be96ecd59fe78af414b6fc35149", "message": "Merge branch 'master' into add-ninthdecimal-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties", "committedDate": "2020-07-10T17:07:56Z", "type": "commit"}, {"oid": "2c084ab33de55d61a4cfc2fef8768bb3c56aff87", "url": "https://github.com/prebid/prebid-server-java/commit/2c084ab33de55d61a4cfc2fef8768bb3c56aff87", "message": "Add LunamediaBidder and tests", "committedDate": "2020-07-10T17:16:25Z", "type": "commit"}, {"oid": "67a85f8a38f7cfee5bee79cdf6c7370aee2faf90", "url": "https://github.com/prebid/prebid-server-java/commit/67a85f8a38f7cfee5bee79cdf6c7370aee2faf90", "message": "Merge branch 'master' into add-ninthdecimal-bidder", "committedDate": "2020-08-19T12:56:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxMjk0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/750#discussion_r473012942", "bodyText": "No reason to check this in each bidder, org.prebid.server.validation.RequestValidator#validate does it.", "author": "rpanchyk", "createdAt": "2020-08-19T13:04:57Z", "path": "src/main/java/org/prebid/server/bidder/ninthdecimal/NinthdecimalBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.ninthdecimal;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ninthdecimal.ExtImpNinthdecimal;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NinthdecimalBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpNinthdecimal>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpNinthdecimal>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NinthdecimalBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {", "originalCommit": "67a85f8a38f7cfee5bee79cdf6c7370aee2faf90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxMzQwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/750#discussion_r473013406", "bodyText": "Can be final.", "author": "rpanchyk", "createdAt": "2020-08-19T13:05:39Z", "path": "src/main/java/org/prebid/server/bidder/ninthdecimal/NinthdecimalBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.ninthdecimal;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ninthdecimal.ExtImpNinthdecimal;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NinthdecimalBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpNinthdecimal>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpNinthdecimal>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NinthdecimalBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();", "originalCommit": "67a85f8a38f7cfee5bee79cdf6c7370aee2faf90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMzk4Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/750#discussion_r473033986", "bodyText": "Can we do it in updateImp(..) method?", "author": "rpanchyk", "createdAt": "2020-08-19T13:35:35Z", "path": "src/main/java/org/prebid/server/bidder/ninthdecimal/NinthdecimalBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.ninthdecimal;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ninthdecimal.ExtImpNinthdecimal;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NinthdecimalBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpNinthdecimal>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpNinthdecimal>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NinthdecimalBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        try {\n+            final Map<ExtImpNinthdecimal, List<Imp>> impToExtImp = getImpToExtImp(request, errors);\n+            httpRequests.addAll(buildBidderRequests(request, impToExtImp));\n+        } catch (PreBidException e) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private Map<ExtImpNinthdecimal, List<Imp>> getImpToExtImp(BidRequest request, List<BidderError> errors) {\n+        final Map<ExtImpNinthdecimal, List<Imp>> extToListOfUpdatedImp = new HashMap<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpNinthdecimal extImpNinthdecimal = parseAndValidateImpExt(imp);\n+                final Imp updatedImp = updateImp(imp);\n+\n+                extToListOfUpdatedImp.putIfAbsent(extImpNinthdecimal, new ArrayList<>());\n+                extToListOfUpdatedImp.get(extImpNinthdecimal).add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (extToListOfUpdatedImp.isEmpty()) {\n+            throw new PreBidException(\"No appropriate impressions\");\n+        }\n+\n+        return extToListOfUpdatedImp;\n+    }\n+\n+    private ExtImpNinthdecimal parseAndValidateImpExt(Imp imp) {\n+        final ExtImpNinthdecimal extImpNinthdecimal;\n+        try {\n+            extImpNinthdecimal = mapper.mapper().convertValue(imp.getExt(), NINTHDECIMAL_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpNinthdecimal.getPubid())) {\n+            throw new PreBidException(\"No pubid value provided\");\n+        }\n+\n+        return extImpNinthdecimal;\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null);\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            return impBuilder.banner(null)\n+                    .audio(null)\n+                    .xNative(null)\n+                    .build();\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            return impBuilder.banner(modifyImpBanner(banner)).build();\n+        }\n+\n+        throw new PreBidException(\"Unsupported impression has been received\");\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner != null && (banner.getW() == null || banner.getH() == null)) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (CollectionUtils.isEmpty(originalFormat)) {\n+                throw new PreBidException(\"Expected at least one banner.format entry or explicit w/h\");\n+            }\n+\n+            final List<Format> formatSkipFirst = originalFormat.subList(1, originalFormat.size());\n+            bannerBuilder.format(formatSkipFirst);\n+\n+            Format firstFormat = originalFormat.get(0);\n+            bannerBuilder.w(firstFormat.getW());\n+            bannerBuilder.h(firstFormat.getH());\n+\n+            return bannerBuilder.build();\n+        }\n+\n+        return banner;\n+    }\n+\n+    private List<HttpRequest<BidRequest>> buildBidderRequests(BidRequest bidRequest,\n+                                                               Map<ExtImpNinthdecimal, List<Imp>> impExtToListOfImps) {\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+\n+        for (Map.Entry<ExtImpNinthdecimal, List<Imp>> impExtAndListOfImo : impExtToListOfImps.entrySet()) {\n+            final ExtImpNinthdecimal extImpNinthdecimal = impExtAndListOfImo.getKey();\n+            final List<Imp> imps = impExtAndListOfImo.getValue();\n+            final BidRequest updatedBidRequest = makeBidRequest(bidRequest, extImpNinthdecimal, imps);\n+\n+            final String body = mapper.encode(updatedBidRequest);\n+            final MultiMap headers = HttpUtil.headers()\n+                    .add(\"x-openrtb-version\", \"2.5\");\n+            final String createdEndpoint = endpointUrl + extImpNinthdecimal.getPubid();\n+\n+            final HttpRequest<BidRequest> createdBidRequest = HttpRequest.<BidRequest>builder()\n+                    .method(HttpMethod.POST)\n+                    .uri(createdEndpoint)\n+                    .body(body)\n+                    .headers(headers)\n+                    .payload(bidRequest)\n+                    .build();\n+\n+            httpRequests.add(createdBidRequest);\n+        }\n+\n+        return httpRequests;\n+    }\n+\n+    private static BidRequest makeBidRequest(BidRequest preBidRequest, ExtImpNinthdecimal extImpNinthdecimal,\n+                                             List<Imp> imps) {\n+        final BidRequest.BidRequestBuilder bidRequestBuilder = preBidRequest.toBuilder();\n+\n+        final List<Imp> modifiedImps = imps.stream()\n+                .map(imp -> imp.toBuilder().tagid(extImpNinthdecimal.getPlacement()).build())", "originalCommit": "67a85f8a38f7cfee5bee79cdf6c7370aee2faf90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNDI5NA==", "url": "https://github.com/prebid/prebid-server-java/pull/750#discussion_r473034294", "bodyText": "Pls fix typo impExtAndListOfImo.", "author": "rpanchyk", "createdAt": "2020-08-19T13:35:57Z", "path": "src/main/java/org/prebid/server/bidder/ninthdecimal/NinthdecimalBidder.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.prebid.server.bidder.ninthdecimal;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ninthdecimal.ExtImpNinthdecimal;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NinthdecimalBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpNinthdecimal>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpNinthdecimal>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NinthdecimalBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        try {\n+            final Map<ExtImpNinthdecimal, List<Imp>> impToExtImp = getImpToExtImp(request, errors);\n+            httpRequests.addAll(buildBidderRequests(request, impToExtImp));\n+        } catch (PreBidException e) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private Map<ExtImpNinthdecimal, List<Imp>> getImpToExtImp(BidRequest request, List<BidderError> errors) {\n+        final Map<ExtImpNinthdecimal, List<Imp>> extToListOfUpdatedImp = new HashMap<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpNinthdecimal extImpNinthdecimal = parseAndValidateImpExt(imp);\n+                final Imp updatedImp = updateImp(imp);\n+\n+                extToListOfUpdatedImp.putIfAbsent(extImpNinthdecimal, new ArrayList<>());\n+                extToListOfUpdatedImp.get(extImpNinthdecimal).add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (extToListOfUpdatedImp.isEmpty()) {\n+            throw new PreBidException(\"No appropriate impressions\");\n+        }\n+\n+        return extToListOfUpdatedImp;\n+    }\n+\n+    private ExtImpNinthdecimal parseAndValidateImpExt(Imp imp) {\n+        final ExtImpNinthdecimal extImpNinthdecimal;\n+        try {\n+            extImpNinthdecimal = mapper.mapper().convertValue(imp.getExt(), NINTHDECIMAL_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpNinthdecimal.getPubid())) {\n+            throw new PreBidException(\"No pubid value provided\");\n+        }\n+\n+        return extImpNinthdecimal;\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null);\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            return impBuilder.banner(null)\n+                    .audio(null)\n+                    .xNative(null)\n+                    .build();\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            return impBuilder.banner(modifyImpBanner(banner)).build();\n+        }\n+\n+        throw new PreBidException(\"Unsupported impression has been received\");\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner != null && (banner.getW() == null || banner.getH() == null)) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (CollectionUtils.isEmpty(originalFormat)) {\n+                throw new PreBidException(\"Expected at least one banner.format entry or explicit w/h\");\n+            }\n+\n+            final List<Format> formatSkipFirst = originalFormat.subList(1, originalFormat.size());\n+            bannerBuilder.format(formatSkipFirst);\n+\n+            Format firstFormat = originalFormat.get(0);\n+            bannerBuilder.w(firstFormat.getW());\n+            bannerBuilder.h(firstFormat.getH());\n+\n+            return bannerBuilder.build();\n+        }\n+\n+        return banner;\n+    }\n+\n+    private List<HttpRequest<BidRequest>> buildBidderRequests(BidRequest bidRequest,\n+                                                               Map<ExtImpNinthdecimal, List<Imp>> impExtToListOfImps) {\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+\n+        for (Map.Entry<ExtImpNinthdecimal, List<Imp>> impExtAndListOfImo : impExtToListOfImps.entrySet()) {", "originalCommit": "67a85f8a38f7cfee5bee79cdf6c7370aee2faf90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed55aec9096c1999d2fbc9768e2e86738bfacabe", "url": "https://github.com/prebid/prebid-server-java/commit/ed55aec9096c1999d2fbc9768e2e86738bfacabe", "message": "Add method for update imps and fix typo", "committedDate": "2020-08-19T15:21:23Z", "type": "commit"}, {"oid": "67ee3b98fd7332925d0520c27782833f3404ed72", "url": "https://github.com/prebid/prebid-server-java/commit/67ee3b98fd7332925d0520c27782833f3404ed72", "message": "Merge remote-tracking branch 'internal-github/add-ninthdecimal-bidder' into add-ninthdecimal-bidder", "committedDate": "2020-08-19T15:21:52Z", "type": "commit"}, {"oid": "7ba2c2628bf2c57c494c8c8754983e22f555dc6a", "url": "https://github.com/prebid/prebid-server-java/commit/7ba2c2628bf2c57c494c8c8754983e22f555dc6a", "message": "Merge branch 'master' into add-ninthdecimal-bidder", "committedDate": "2020-09-07T08:38:46Z", "type": "commit"}, {"oid": "1df3f74dbb9c983954147db4f936919206698721", "url": "https://github.com/prebid/prebid-server-java/commit/1df3f74dbb9c983954147db4f936919206698721", "message": "Change redirect type in config file", "committedDate": "2020-09-11T08:07:01Z", "type": "commit"}, {"oid": "4765fdbd818980e17284275c923f602af224e645", "url": "https://github.com/prebid/prebid-server-java/commit/4765fdbd818980e17284275c923f602af224e645", "message": "Merge remote-tracking branch 'internal-github/add-ninthdecimal-bidder' into add-ninthdecimal-bidder", "committedDate": "2020-09-11T08:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTYyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/750#discussion_r486965627", "bodyText": "Pls set currency from bid response.", "author": "rpanchyk", "createdAt": "2020-09-11T10:48:18Z", "path": "src/main/java/org/prebid/server/bidder/ninthdecimal/NinthdecimalBidder.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package org.prebid.server.bidder.ninthdecimal;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.App;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ninthdecimal.ExtImpNinthdecimal;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NinthdecimalBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpNinthdecimal>> NINTHDECIMAL_EXT_TYPE_REFERENCE = new\n+            TypeReference<ExtPrebid<?, ExtImpNinthdecimal>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NinthdecimalBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        try {\n+            final Map<ExtImpNinthdecimal, List<Imp>> impToExtImp = getImpToExtImp(request, errors);\n+            httpRequests.addAll(buildBidderRequests(request, impToExtImp));\n+        } catch (PreBidException e) {\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        return Result.of(httpRequests, errors);\n+    }\n+\n+    private Map<ExtImpNinthdecimal, List<Imp>> getImpToExtImp(BidRequest request, List<BidderError> errors) {\n+        final Map<ExtImpNinthdecimal, List<Imp>> extToListOfUpdatedImp = new HashMap<>();\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpNinthdecimal extImpNinthdecimal = parseAndValidateImpExt(imp);\n+                final Imp updatedImp = updateImp(imp);\n+\n+                extToListOfUpdatedImp.putIfAbsent(extImpNinthdecimal, new ArrayList<>());\n+                extToListOfUpdatedImp.get(extImpNinthdecimal).add(updatedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (extToListOfUpdatedImp.isEmpty()) {\n+            throw new PreBidException(\"No appropriate impressions\");\n+        }\n+\n+        return extToListOfUpdatedImp;\n+    }\n+\n+    private ExtImpNinthdecimal parseAndValidateImpExt(Imp imp) {\n+        final ExtImpNinthdecimal extImpNinthdecimal;\n+        try {\n+            extImpNinthdecimal = mapper.mapper().convertValue(imp.getExt(), NINTHDECIMAL_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        if (StringUtils.isBlank(extImpNinthdecimal.getPubid())) {\n+            throw new PreBidException(\"No pubid value provided\");\n+        }\n+\n+        return extImpNinthdecimal;\n+    }\n+\n+    private static Imp updateImp(Imp imp) {\n+        final Imp.ImpBuilder impBuilder = imp.toBuilder().ext(null);\n+\n+        final Video video = imp.getVideo();\n+        if (video != null) {\n+            return impBuilder.banner(null)\n+                    .audio(null)\n+                    .xNative(null)\n+                    .build();\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            return impBuilder.banner(modifyImpBanner(banner)).build();\n+        }\n+\n+        throw new PreBidException(\"Unsupported impression has been received\");\n+    }\n+\n+    private static Banner modifyImpBanner(Banner banner) {\n+        if (banner != null && (banner.getW() == null || banner.getH() == null)) {\n+            final Banner.BannerBuilder bannerBuilder = banner.toBuilder();\n+            final List<Format> originalFormat = banner.getFormat();\n+\n+            if (CollectionUtils.isEmpty(originalFormat)) {\n+                throw new PreBidException(\"Expected at least one banner.format entry or explicit w/h\");\n+            }\n+\n+            final List<Format> formatSkipFirst = originalFormat.subList(1, originalFormat.size());\n+            bannerBuilder.format(formatSkipFirst);\n+\n+            Format firstFormat = originalFormat.get(0);\n+            bannerBuilder.w(firstFormat.getW());\n+            bannerBuilder.h(firstFormat.getH());\n+\n+            return bannerBuilder.build();\n+        }\n+\n+        return banner;\n+    }\n+\n+    private List<HttpRequest<BidRequest>> buildBidderRequests(BidRequest bidRequest,\n+                                                               Map<ExtImpNinthdecimal, List<Imp>> impExtToListOfImps) {\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+\n+        for (Map.Entry<ExtImpNinthdecimal, List<Imp>> impExtAndListOfImp : impExtToListOfImps.entrySet()) {\n+            final ExtImpNinthdecimal extImpNinthdecimal = impExtAndListOfImp.getKey();\n+            final List<Imp> imps = impExtAndListOfImp.getValue();\n+            final BidRequest updatedBidRequest = makeBidRequest(bidRequest, extImpNinthdecimal, imps);\n+\n+            final String body = mapper.encode(updatedBidRequest);\n+            final MultiMap headers = HttpUtil.headers()\n+                    .add(\"x-openrtb-version\", \"2.5\");\n+            final String createdEndpoint = endpointUrl + extImpNinthdecimal.getPubid();\n+\n+            final HttpRequest<BidRequest> createdBidRequest = HttpRequest.<BidRequest>builder()\n+                    .method(HttpMethod.POST)\n+                    .uri(createdEndpoint)\n+                    .body(body)\n+                    .headers(headers)\n+                    .payload(bidRequest)\n+                    .build();\n+\n+            httpRequests.add(createdBidRequest);\n+        }\n+\n+        return httpRequests;\n+    }\n+\n+    private static BidRequest makeBidRequest(BidRequest preBidRequest, ExtImpNinthdecimal extImpNinthdecimal,\n+                                             List<Imp> imps) {\n+        final BidRequest.BidRequestBuilder bidRequestBuilder = preBidRequest.toBuilder();\n+        final Site site = preBidRequest.getSite();\n+        if (site != null) {\n+            bidRequestBuilder.site(site.toBuilder().publisher(null).domain(\"\").build());\n+        }\n+\n+        final App app = preBidRequest.getApp();\n+        if (app != null) {\n+            bidRequestBuilder.app(app.toBuilder().publisher(null).build());\n+        }\n+        return bidRequestBuilder.imp(updateImps(imps, extImpNinthdecimal.getPlacement())).build();\n+    }\n+\n+    private static List<Imp> updateImps(List<Imp> imps, String placement) {\n+        return imps.stream()\n+                .map(imp -> imp.toBuilder().tagid(placement).build())\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        if (bidResponse.getSeatbid().size() != 1) {\n+            throw new PreBidException(String.format(\"Invalid SeatBids count: %d\", bidResponse.getSeatbid().size()));\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .map(SeatBid::getBid)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getType(bid.getImpid(), bidRequest.getImp()), DEFAULT_BID_CURRENCY))", "originalCommit": "4765fdbd818980e17284275c923f602af224e645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d0d0348c2dbd7b2316beb32f92314cbb36e19507", "url": "https://github.com/prebid/prebid-server-java/commit/d0d0348c2dbd7b2316beb32f92314cbb36e19507", "message": "Small refactoring and fix config file", "committedDate": "2020-09-11T16:13:57Z", "type": "commit"}, {"oid": "d64d11007fed970531de46923840b92f7b273052", "url": "https://github.com/prebid/prebid-server-java/commit/d64d11007fed970531de46923840b92f7b273052", "message": "Merge branch 'master' into add-ninthdecimal-bidder", "committedDate": "2020-09-15T13:11:36Z", "type": "commit"}]}