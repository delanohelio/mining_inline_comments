{"pr_number": 961, "pr_title": "Block analytic when P7 is enforced by TCF for PBS host company", "pr_createdAt": "2020-10-16T13:42:12Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/961", "timeline": [{"oid": "8b0c9ab75d0e1f5288c47511e640f1394944c035", "url": "https://github.com/prebid/prebid-server-java/commit/8b0c9ab75d0e1f5288c47511e640f1394944c035", "message": "removed rafactoring and extracted logic", "committedDate": "2020-10-16T13:40:53Z", "type": "commit"}, {"oid": "9defb8a59833f005485b608bf306cfee55ccbc6f", "url": "https://github.com/prebid/prebid-server-java/commit/9defb8a59833f005485b608bf306cfee55ccbc6f", "message": "Each AnalyticsReporter can have separate GVL ID.\n\nRefactored CookieSync and Setuid.", "committedDate": "2020-10-19T14:16:39Z", "type": "commit"}, {"oid": "f382e00853ef729356c720c964eec0a260e0217f", "url": "https://github.com/prebid/prebid-server-java/commit/f382e00853ef729356c720c964eec0a260e0217f", "message": "refactor setuid for handle tcfContext first", "committedDate": "2020-10-26T14:51:12Z", "type": "commit"}, {"oid": "b9dc5da997018c30f620ef9f8c6ad14726e1e5fb", "url": "https://github.com/prebid/prebid-server-java/commit/b9dc5da997018c30f620ef9f8c6ad14726e1e5fb", "message": "add tests", "committedDate": "2020-10-26T15:20:46Z", "type": "commit"}, {"oid": "9586a8dddd8bb6d8b6cce8a643051dc85da7be3a", "url": "https://github.com/prebid/prebid-server-java/commit/9586a8dddd8bb6d8b6cce8a643051dc85da7be3a", "message": "fix style", "committedDate": "2020-10-26T15:26:34Z", "type": "commit"}, {"oid": "873ec2b443c420eb4fdcbc350c3b6af3e1dbd0c4", "url": "https://github.com/prebid/prebid-server-java/commit/873ec2b443c420eb4fdcbc350c3b6af3e1dbd0c4", "message": "fix style", "committedDate": "2020-10-26T15:33:28Z", "type": "commit"}, {"oid": "8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "url": "https://github.com/prebid/prebid-server-java/commit/8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "message": "Add refactoring of cookieSync", "committedDate": "2020-10-27T11:16:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMzA3MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/961#discussion_r512613071", "bodyText": "There was no status code before", "author": "DGarbar", "createdAt": "2020-10-27T11:28:24Z", "path": "src/main/java/org/prebid/server/handler/CookieSyncHandler.java", "diffHunk": "@@ -289,76 +339,64 @@ private Void handleBidderNamesResult(TcfResponse<String> tcfResponse,\n                                 || bidderNameToAction.get(bidder).isBlockPixelSync())\n                 .collect(Collectors.toSet());\n \n-        respondWith(context, uidsCookie, privacy, biddersToSync, biddersRejectedByTcf, ccpaEnforcedBidders, limit);\n-\n-        return null;\n+        return RejectedBidders.of(biddersRejectedByTcf, ccpaEnforcedBidders);\n     }\n \n-    private Void handleTcfError(RoutingContext context,\n-                                UidsCookie uidsCookie,\n-                                Set<String> biddersToSync,\n-                                Privacy privacy,\n-                                Integer limit) {\n-\n-        respondWith(context, uidsCookie, privacy, biddersToSync, biddersToSync, Collections.emptySet(), limit);\n+    private Set<String> extractCcpaEnforcedBidders(Account account, Collection<String> biddersToSync, Privacy privacy) {\n+        if (privacyEnforcementService.isCcpaEnforced(privacy.getCcpa(), account)) {\n+            return biddersToSync.stream()\n+                    .filter(bidder -> bidderCatalog.bidderInfoByName(bidderNameFor(bidder)).isCcpaEnforced())\n+                    .collect(Collectors.toSet());\n+        }\n+        return Collections.emptySet();\n+    }\n \n-        return null;\n+    private void respondByRejectedBidder(AsyncResult<RejectedBidders> rejectedBiddersResult,\n+                                         Set<String> biddersToSync,\n+                                         CookieSyncContext cookieSyncContext) {\n+        if (rejectedBiddersResult.succeeded()) {\n+            final RejectedBidders rejectedBidders = rejectedBiddersResult.result();\n+            respondWithRejectedBidders(cookieSyncContext, biddersToSync, rejectedBidders);\n+        } else {\n+            final Throwable error = rejectedBiddersResult.cause();\n+            final RoutingContext routingContext = cookieSyncContext.getRoutingContext();\n+            final TcfContext tcfContext = cookieSyncContext.getPrivacyContext().getTcfContext();\n+            handleErrors(error, routingContext, tcfContext);\n+        }\n     }\n \n     /**\n      * Make HTTP response for given bidders.\n      */\n-    private void respondWith(RoutingContext context,\n-                             UidsCookie uidsCookie,\n-                             Privacy privacy,\n-                             Collection<String> bidders,\n-                             Set<String> biddersRejectedByTcf,\n-                             Set<String> biddersRejectedByCcpa,\n-                             Integer limit) {\n-\n-        updateCookieSyncTcfMetrics(bidders, biddersRejectedByTcf);\n-\n+    private void respondWithRejectedBidders(CookieSyncContext cookieSyncContext,\n+                                            Collection<String> bidders,\n+                                            RejectedBidders rejectedBidders) {\n+        updateCookieSyncTcfMetrics(bidders, rejectedBidders.getRejectedByTcf());\n+\n+        final RoutingContext routingContext = cookieSyncContext.getRoutingContext();\n+        final UidsCookie uidsCookie = cookieSyncContext.getUidsCookie();\n+        final Privacy privacy = cookieSyncContext.getPrivacyContext().getPrivacy();\n         final List<BidderUsersyncStatus> bidderStatuses = bidders.stream()\n-                .map(bidder -> bidderStatusFor(\n-                        bidder, context, uidsCookie, biddersRejectedByTcf, biddersRejectedByCcpa, privacy))\n+                .map(bidder -> bidderStatusFor(bidder, routingContext, uidsCookie, rejectedBidders, privacy))\n                 .filter(Objects::nonNull) // skip bidder with live UID\n                 .collect(Collectors.toList());\n+\n         updateCookieSyncMatchMetrics(bidders, bidderStatuses);\n \n-        final List<BidderUsersyncStatus> updatedBidderStatuses;\n-        if (limit != null && limit > 0 && limit < bidderStatuses.size()) {\n-            Collections.shuffle(bidderStatuses);\n-            updatedBidderStatuses = bidderStatuses.subList(0, limit);\n-        } else {\n-            updatedBidderStatuses = bidderStatuses;\n-        }\n+        final CookieSyncRequest cookieSyncRequest = cookieSyncContext.getCookieSyncRequest();\n+        final Integer limit = cookieSyncRequest.getLimit();\n+        final List<BidderUsersyncStatus> updatedBidderStatuses = trimBiddersToLimit(limit, bidderStatuses);\n+        final String status = uidsCookie.hasLiveUids() ? \"ok\" : \"no_cookie\";\n+        final CookieSyncResponse response = CookieSyncResponse.of(status, updatedBidderStatuses);\n \n-        final CookieSyncResponse response = CookieSyncResponse.of(uidsCookie.hasLiveUids() ? \"ok\" : \"no_cookie\",\n-                updatedBidderStatuses);\n         final String body = mapper.encode(response);\n+        respondWith(routingContext, HttpResponseStatus.OK.code(), body, JSON_HEADERS_MAP);", "originalCommit": "8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNzAyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/961#discussion_r512707026", "bodyText": "reporter could be omitted because it's evident from the context (interface name)", "author": "schernysh", "createdAt": "2020-10-27T13:49:31Z", "path": "src/main/java/org/prebid/server/analytics/AnalyticsReporter.java", "diffHunk": "@@ -13,4 +12,9 @@\n      * Implementation note: this method is executed on Vert.x event loop thread so it must never use blocking API.\n      */\n     <T> void processEvent(T event);\n+\n+    /**\n+     * Method for defying analytics reporter ID for TCF checks.\n+     */\n+    int reporterVendorId();", "originalCommit": "8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNzgxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/961#discussion_r512707816", "bodyText": "There must be a typo here - \"defying\" instead \"defining\".", "author": "schernysh", "createdAt": "2020-10-27T13:50:30Z", "path": "src/main/java/org/prebid/server/analytics/AnalyticsReporter.java", "diffHunk": "@@ -13,4 +12,9 @@\n      * Implementation note: this method is executed on Vert.x event loop thread so it must never use blocking API.\n      */\n     <T> void processEvent(T event);\n+\n+    /**\n+     * Method for defying analytics reporter ID for TCF checks.", "originalCommit": "8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMDUwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/961#discussion_r512710504", "bodyText": "That's not the composite anymore, let's remove not relevant part.", "author": "schernysh", "createdAt": "2020-10-27T13:53:47Z", "path": "src/main/java/org/prebid/server/analytics/AnalyticsReporterDelegator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.prebid.server.analytics;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.logging.Logger;\n+import io.vertx.core.logging.LoggerFactory;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.prebid.server.auction.PrivacyEnforcementService;\n+import org.prebid.server.privacy.gdpr.model.PrivacyEnforcementAction;\n+import org.prebid.server.privacy.gdpr.model.TcfContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Implementation of the Composite design pattern that dispatches event processing to all enabled reporters.", "originalCommit": "8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNTMzNg==", "url": "https://github.com/prebid/prebid-server-java/pull/961#discussion_r512725336", "bodyText": "Let's change the method name accordingly", "author": "schernysh", "createdAt": "2020-10-27T14:11:35Z", "path": "src/main/java/org/prebid/server/spring/config/AnalyticsConfiguration.java", "diffHunk": "@@ -17,10 +18,15 @@\n public class AnalyticsConfiguration {\n \n     @Bean\n-    CompositeAnalyticsReporter compositeAnalyticsReporter(\n-            @Autowired(required = false) List<AnalyticsReporter> delegates, Vertx vertx) {\n+    AnalyticsReporterDelegator compositeAnalyticsReporter(", "originalCommit": "8fe45f9b3642cc01078c05d6a3fdee7c0b9b0a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae547ea901776a326877cc4041fc4d86a8adee91", "url": "https://github.com/prebid/prebid-server-java/commit/ae547ea901776a326877cc4041fc4d86a8adee91", "message": "Merge remote-tracking branch 'opensource/master' into p7-tcf-block-analytics\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n#\tsrc/main/java/org/prebid/server/handler/CookieSyncHandler.java\n#\tsrc/main/java/org/prebid/server/handler/SetuidHandler.java\n#\tsrc/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java\n#\tsrc/test/java/org/prebid/server/handler/CookieSyncHandlerTest.java\n#\tsrc/test/java/org/prebid/server/handler/SetuidHandlerTest.java", "committedDate": "2020-12-15T13:13:08Z", "type": "commit"}, {"oid": "4bf9208227b4e38e17af0726ad3686f780e852f7", "url": "https://github.com/prebid/prebid-server-java/commit/4bf9208227b4e38e17af0726ad3686f780e852f7", "message": "fix after review + fix tests", "committedDate": "2020-12-15T13:33:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MjkyMw==", "url": "https://github.com/prebid/prebid-server-java/pull/961#discussion_r546662923", "bodyText": "The blockAnalyticsReport is primitive so cannot be null.", "author": "rpanchyk", "createdAt": "2020-12-21T11:48:25Z", "path": "src/main/java/org/prebid/server/analytics/AnalyticsReporterDelegator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.prebid.server.analytics;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.logging.Logger;\n+import io.vertx.core.logging.LoggerFactory;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.prebid.server.auction.PrivacyEnforcementService;\n+import org.prebid.server.privacy.gdpr.model.PrivacyEnforcementAction;\n+import org.prebid.server.privacy.gdpr.model.TcfContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class dispatches event processing to all enabled reporters.\n+ */\n+public class AnalyticsReporterDelegator {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AnalyticsReporterDelegator.class);\n+\n+    private final List<AnalyticsReporter> delegates;\n+    private final Vertx vertx;\n+    private final PrivacyEnforcementService privacyEnforcementService;\n+\n+    private final Set<Integer> reporterVendorIds;\n+\n+    public AnalyticsReporterDelegator(List<AnalyticsReporter> delegates,\n+                                      Vertx vertx,\n+                                      PrivacyEnforcementService privacyEnforcementService) {\n+        this.delegates = Objects.requireNonNull(delegates);\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.privacyEnforcementService = Objects.requireNonNull(privacyEnforcementService);\n+\n+        reporterVendorIds = delegates.stream().map(AnalyticsReporter::vendorId).collect(Collectors.toSet());\n+    }\n+\n+    public <T> void processEvent(T event) {\n+        for (AnalyticsReporter analyticsReporter : delegates) {\n+            vertx.runOnContext(ignored -> analyticsReporter.processEvent(event));\n+        }\n+    }\n+\n+    public <T> void processEvent(T event, TcfContext tcfContext) {\n+        privacyEnforcementService.resultForVendorIds(reporterVendorIds, tcfContext)\n+                .setHandler(privacyEnforcementMap -> delegateEvent(event, tcfContext, privacyEnforcementMap));\n+    }\n+\n+    private <T> void delegateEvent(T event,\n+                                   TcfContext tcfContext,\n+                                   AsyncResult<Map<Integer, PrivacyEnforcementAction>> privacyEnforcementMapResult) {\n+        if (privacyEnforcementMapResult.succeeded()) {\n+            final Map<Integer, PrivacyEnforcementAction> privacyEnforcementActionMap =\n+                    privacyEnforcementMapResult.result();\n+            for (AnalyticsReporter analyticsReporter : delegates) {\n+                final int reporterVendorId = analyticsReporter.vendorId();\n+                // resultForVendorIds is guaranteed returning for each provided value except null,\n+                // but to be sure lets use getOrDefault\n+                final PrivacyEnforcementAction reporterPrivacyAction = privacyEnforcementActionMap\n+                        .getOrDefault(reporterVendorId, PrivacyEnforcementAction.restrictAll());\n+                if (BooleanUtils.isNotTrue(reporterPrivacyAction.isBlockAnalyticsReport())) {", "originalCommit": "4bf9208227b4e38e17af0726ad3686f780e852f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2434bcaf36f76c84b4f3c8cf92828d51679caf19", "url": "https://github.com/prebid/prebid-server-java/commit/2434bcaf36f76c84b4f3c8cf92828d51679caf19", "message": "fix after review", "committedDate": "2020-12-22T11:48:34Z", "type": "commit"}, {"oid": "c6dda8ec948848df907d474f5a44319845657ec1", "url": "https://github.com/prebid/prebid-server-java/commit/c6dda8ec948848df907d474f5a44319845657ec1", "message": "fix checkstyle", "committedDate": "2020-12-23T10:39:05Z", "type": "commit"}, {"oid": "eacebdc1f96f39e293f4a42469c4b5a1fc161034", "url": "https://github.com/prebid/prebid-server-java/commit/eacebdc1f96f39e293f4a42469c4b5a1fc161034", "message": "Merge branch 'master' into p7-tcf-block-analytics", "committedDate": "2021-01-15T11:27:18Z", "type": "commit"}, {"oid": "395581da7cdec7591235cf515b67aee67eea13c8", "url": "https://github.com/prebid/prebid-server-java/commit/395581da7cdec7591235cf515b67aee67eea13c8", "message": "Merge branch 'master' into p7-tcf-block-analytics\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/AuctionRequestFactory.java", "committedDate": "2021-02-01T14:05:11Z", "type": "commit"}]}